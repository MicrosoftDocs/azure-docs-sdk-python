### YamlMime:PythonClass
uid: azure.keyvault.HttpChallenge
name: HttpChallenge
fullName: azure.keyvault.HttpChallenge
module: azure.keyvault
inheritances:
- builtins.object
constructor:
  syntax: HttpChallenge(request_uri, challenge, response_headers=None)
methods:
- uid: azure.keyvault.HttpChallenge.get_authorization_server
  name: get_authorization_server
  summary: Returns the URI for the authorization server if present, otherwise empty
    string.
  signature: get_authorization_server()
- uid: azure.keyvault.HttpChallenge.get_resource
  name: get_resource
  summary: Returns the resource if present, otherwise empty string.
  signature: get_resource()
- uid: azure.keyvault.HttpChallenge.get_scope
  name: get_scope
  summary: Returns the scope if present, otherwise empty string.
  signature: get_scope()
- uid: azure.keyvault.HttpChallenge.get_value
  name: get_value
  signature: get_value(key)
  parameters:
  - name: key
    isRequired: true
- uid: azure.keyvault.HttpChallenge.is_bearer_challenge
  name: is_bearer_challenge
  summary: 'Tests whether the HttpChallenge a Bearer challenge.

    rtype: bool'
  signature: is_bearer_challenge()
- uid: azure.keyvault.HttpChallenge.is_pop_challenge
  name: is_pop_challenge
  summary: 'Tests whether the HttpChallenge is a proof of possession challenge.

    rtype: bool'
  signature: is_pop_challenge()
- uid: azure.keyvault.HttpChallenge.supports_message_protection
  name: supports_message_protection
  summary: Returns True if challenge vault supports message protection
  signature: supports_message_protection()
- uid: azure.keyvault.HttpChallenge.supports_pop
  name: supports_pop
  summary: Returns True if challenge supports pop token auth else False
  signature: supports_pop()
