### YamlMime:PythonClass
uid: azure.eventprocessorhost.partition_manager.PartitionManager
name: PartitionManager
fullName: azure.eventprocessorhost.partition_manager.PartitionManager
module: azure.eventprocessorhost.partition_manager
inheritances:
- builtins.object
summary: Manages the partition event pump execution.
constructor:
  syntax: PartitionManager(host)
methods:
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.attempt_renew_lease
  name: attempt_renew_lease
  summary: Make attempt_renew_lease async call sync.
  signature: attempt_renew_lease(lease_task, owned_by_others_q, lease_manager)
  parameters:
  - name: lease_task
    isRequired: true
  - name: owned_by_others_q
    isRequired: true
  - name: lease_manager
    isRequired: true
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.attempt_renew_lease_async
  name: attempt_renew_lease_async
  summary: 'Attempts to renew a potential lease if possible and

    marks in the queue as none adds to adds to the queue.'
  signature: attempt_renew_lease_async(lease_task, owned_by_others_q, lease_manager)
  parameters:
  - name: lease_task
    isRequired: true
  - name: owned_by_others_q
    isRequired: true
  - name: lease_manager
    isRequired: true
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.check_and_add_pump_async
  name: check_and_add_pump_async
  summary: Updates the lease on an exisiting pump.
  signature: check_and_add_pump_async(partition_id, lease)
  parameters:
  - name: partition_id
    description: The partition ID.
    isRequired: true
    types:
    - <xref:str>
  - name: lease
    description: The lease to be used.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.count_leases_by_owner
  name: count_leases_by_owner
  summary: Returns a dictionary of leases by current owner.
  signature: count_leases_by_owner(leases)
  parameters:
  - name: leases
    isRequired: true
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.create_new_pump_async
  name: create_new_pump_async
  summary: Create a new pump thread with a given lease.
  signature: create_new_pump_async(partition_id, lease)
  parameters:
  - name: partition_id
    description: The partition ID.
    isRequired: true
    types:
    - <xref:str>
  - name: lease
    description: The lease to be used.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.get_partition_ids_async
  name: get_partition_ids_async
  summary: Returns a list of all the event hub partition IDs.
  signature: get_partition_ids_async()
  return:
    types:
    - <xref:list>[<xref:str>]
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.initialize_stores_async
  name: initialize_stores_async
  summary: 'Intializes the partition checkpoint and lease store ensures that a checkpoint

    exists for all partitions. Note in this case checkpoint and lease stores are

    the same storage manager construct.'
  signature: initialize_stores_async()
  return:
    description: Returns the number of partitions.
    types:
    - <xref:int>
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.remove_all_pumps_async
  name: remove_all_pumps_async
  summary: 'Stops all partition pumps

    (Note this might be wrong and need to await all tasks before returning done).'
  signature: remove_all_pumps_async(reason)
  parameters:
  - name: reason
    description: A reason for closing.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:bool>
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.remove_pump_async
  name: remove_pump_async
  summary: Stops a single partiton pump.
  signature: remove_pump_async(partition_id, reason)
  parameters:
  - name: partition_id
    description: The partition ID.
    isRequired: true
    types:
    - <xref:str>
  - name: reason
    description: A reason for closing.
    isRequired: true
    types:
    - <xref:str>
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.retry
  name: retry
  summary: Make attempt_renew_lease async call sync.
  signature: retry(func, partition_id, retry_message, final_failure_message, max_retries,
    host_id)
  parameters:
  - name: func
    isRequired: true
  - name: partition_id
    isRequired: true
  - name: retry_message
    isRequired: true
  - name: final_failure_message
    isRequired: true
  - name: max_retries
    isRequired: true
  - name: host_id
    isRequired: true
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.retry_async
  name: retry_async
  summary: Throws if it runs out of retries. If it returns, action succeeded.
  signature: retry_async(func, partition_id, retry_message, final_failure_message,
    max_retries, host_id)
  parameters:
  - name: func
    isRequired: true
  - name: partition_id
    isRequired: true
  - name: retry_message
    isRequired: true
  - name: final_failure_message
    isRequired: true
  - name: max_retries
    isRequired: true
  - name: host_id
    isRequired: true
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.run_async
  name: run_async
  summary: Starts the run loop and manages exceptions and cleanup.
  signature: run_async()
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.run_loop_async
  name: run_loop_async
  summary: This is the main execution loop for allocating and manging pumps.
  signature: run_loop_async()
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.start_async
  name: start_async
  summary: Intializes the partition checkpoint and lease store and then calls run
    async.
  signature: start_async()
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.stop_async
  name: stop_async
  summary: Terminiates the partition manger.
  signature: stop_async()
- uid: azure.eventprocessorhost.partition_manager.PartitionManager.which_lease_to_steal
  name: which_lease_to_steal
  summary: 'Determines and return which lease to steal

    If the number of leases is a multiple of the number of hosts, then the desired

    configuration is that all hosts own the name number of leases, and the

    difference between the "biggest" owner and any other is 0.


    If the number of leases is not a multiple of the number of hosts, then the most

    even configurationpossible is for some hosts to have (self, leases/hosts) leases

    and others to have (self, (self, leases/hosts) + 1). For example, for 16 partitions

    distributed over five hosts, the distribution would be 4, 3, 3, 3, 3, or any of
    the

    possible reorderings.


    In either case, if the difference between this host and the biggest owner is 2
    or more,

    then thesystem is not in the most evenly-distributed configuration, so steal one
    lease

    from the biggest. If there is a tie for biggest, we pick whichever appears first
    in the

    list because it doesn''t really matter which "biggest" is trimmed down.


    Stealing one at a time prevents flapping because it reduces the difference between
    the

    biggest and this host by two at a time. If the starting difference is two or greater,

    then the difference cannot end up below 0. This host may become tied for biggest,
    but it

    cannot become larger than the host that it is stealing from.'
  signature: which_lease_to_steal(stealable_leases, have_lease_count)
  parameters:
  - name: stealable_leases
    description: List of leases to determine which can be stolen.
    isRequired: true
    types:
    - <xref:list>[<xref:azure.eventprocessorhost.lease.Lease>]
  - name: have_lease_count
    description: Lease count.
    isRequired: true
    types:
    - <xref:int>
  return:
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
