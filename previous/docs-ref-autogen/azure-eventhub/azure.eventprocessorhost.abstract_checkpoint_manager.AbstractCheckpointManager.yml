### YamlMime:PythonClass
uid: azure.eventprocessorhost.abstract_checkpoint_manager.AbstractCheckpointManager
name: AbstractCheckpointManager
fullName: azure.eventprocessorhost.abstract_checkpoint_manager.AbstractCheckpointManager
module: azure.eventprocessorhost.abstract_checkpoint_manager
inheritances:
- abc.ABC
summary: 'If you wish to have EventProcessorHost store checkpoints somewhere other
  than Azure Storage,

  you can write your own checkpoint manager using this abstract class.'
constructor:
  syntax: AbstractCheckpointManager()
methods:
- uid: azure.eventprocessorhost.abstract_checkpoint_manager.AbstractCheckpointManager.create_checkpoint_if_not_exists_async
  name: create_checkpoint_if_not_exists_async
  summary: 'Create the given partition checkpoint if it doesn''t exist.Do nothing
    if it does exist.

    The offset/sequenceNumber for a freshly-created checkpoint should be set to StartOfStream/0.'
  signature: create_checkpoint_if_not_exists_async(partition_id)
  parameters:
  - name: partition_id
    description: The ID of a given parition.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The checkpoint for the given partition, whether newly created or
      already existing.
    types:
    - <xref:azure.eventprocessorhost.checkpoint.Checkpoint>
- uid: azure.eventprocessorhost.abstract_checkpoint_manager.AbstractCheckpointManager.create_checkpoint_store_if_not_exists_async
  name: create_checkpoint_store_if_not_exists_async
  summary: Create the checkpoint store if it doesn't exist. Do nothing if it does
    exist.
  signature: create_checkpoint_store_if_not_exists_async()
  return:
    description: '*True* if the checkpoint store already exists or was created OK,
      *False*

      if there was a failure.'
    types:
    - <xref:bool>
- uid: azure.eventprocessorhost.abstract_checkpoint_manager.AbstractCheckpointManager.delete_checkpoint_async
  name: delete_checkpoint_async
  summary: 'Delete the stored checkpoint for the given partition. If there is no stored
    checkpoint

    for the given partition, that is treated as success.'
  signature: delete_checkpoint_async(partition_id)
  parameters:
  - name: partition_id
    description: The ID of a given parition.
    isRequired: true
    types:
    - <xref:str>
- uid: azure.eventprocessorhost.abstract_checkpoint_manager.AbstractCheckpointManager.get_checkpoint_async
  name: get_checkpoint_async
  summary: 'Get the checkpoint data associated with the given partition.

    Could return null if no checkpoint has been created for that partition.'
  signature: get_checkpoint_async(partition_id)
  parameters:
  - name: partition_id
    description: The ID of a given parition.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Given partition checkpoint info, or *None* if none has been previously
      stored.
    types:
    - <xref:azure.eventprocessorhost.checkpoint.Checkpoint>
- uid: azure.eventprocessorhost.abstract_checkpoint_manager.AbstractCheckpointManager.update_checkpoint_async
  name: update_checkpoint_async
  summary: Update the checkpoint in the store with the offset/sequenceNumber in the
    provided checkpoint.
  signature: update_checkpoint_async(lease, checkpoint)
  parameters:
  - name: lease
    description: The lease to be updated.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
  - name: checkpoint
    description: offset/sequeceNumber to update the store with.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.checkpoint.Checkpoint>
