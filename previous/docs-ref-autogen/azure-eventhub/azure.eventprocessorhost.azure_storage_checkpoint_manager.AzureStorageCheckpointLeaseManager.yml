### YamlMime:PythonClass
uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager
name: AzureStorageCheckpointLeaseManager
fullName: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager
module: azure.eventprocessorhost.azure_storage_checkpoint_manager
inheritances:
- azure.eventprocessorhost.abstract_checkpoint_manager.AbstractCheckpointManager
- azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
summary: 'Manages checkpoints and lease with azure storage blobs. In this implementation,

  checkpoints are data that''s actually in the lease blob, so checkpoint operations

  turn into lease operations under the covers.'
constructor:
  syntax: AzureStorageCheckpointLeaseManager(storage_account_name=None, storage_account_key=None,
    lease_container_name='eph-leases', storage_blob_prefix=None, lease_renew_interval=10,
    lease_duration=30, sas_token=None, endpoint_suffix='core.windows.net', connection_string=None)
  parameters:
  - name: storage_account_name
    description: 'The storage account name. This is used to

      authenticate requests signed with an account key and to construct the storage

      endpoint. It is required unless a connection string is given.'
    isRequired: true
    types:
    - <xref:str>
  - name: storage_account_key
    description: 'The storage account key. This is used for shared key

      authentication. If neither account key or sas token is specified, anonymous
      access

      will be used.'
    isRequired: true
    types:
    - <xref:str>
  - name: lease_container_name
    description: 'The name of the container that will be used to store

      leases. If it does not already exist it will be created. Default value is ''eph-leases''.'
    isRequired: true
    types:
    - <xref:str>
  - name: lease_renew_interval
    description: 'The interval in seconds at which EPH will attempt to

      renew the lease of a particular partition. Default value is 10.'
    isRequired: true
    types:
    - <xref:int>
  - name: lease_duration
    description: 'The duration in seconds of a lease on a partition.

      Default value is 30.'
    isRequired: true
    types:
    - <xref:int>
  - name: sas_token
    description: 'A shared access signature token to use to authenticate requests

      instead of the account key. If account key and sas token are both specified,

      account key will be used to sign. If neither are specified, anonymous access
      will be used.'
    isRequired: true
    types:
    - <xref:str>
  - name: endpoint_suffix
    description: 'The host base component of the url, minus the account name.

      Defaults to Azure (core.windows.net). Override this to use a National Cloud.'
    isRequired: true
    types:
    - <xref:str>
  - name: connection_string
    description: 'If specified, this will override all other endpoint parameters.

      See [http://azure.microsoft.com/en-us/documentation/articles/storage-configure-connection-string/](http://azure.microsoft.com/en-us/documentation/articles/storage-configure-connection-string/)

      for the connection string format.'
    isRequired: true
    types:
    - <xref:str>
methods:
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.acquire_lease_async
  name: acquire_lease_async
  summary: 'Acquire the lease on the desired partition for this EventProcessorHost.

    Note that it is legal to acquire a lease that is already owned by another host.

    Lease-stealing is how partitions are redistributed when additional hosts are started.'
  signature: acquire_lease_async(lease)
  parameters:
  - name: lease
    description: The stored lease to be acquired.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
  return:
    description: '*True* if the lease was acquired successfully, *False* if not.'
    types:
    - <xref:bool>
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.create_checkpoint_if_not_exists_async
  name: create_checkpoint_if_not_exists_async
  summary: 'Create the given partition checkpoint if it doesn''t exist.Do nothing
    if it does exist.

    The offset/sequenceNumber for a freshly-created checkpoint should be set to StartOfStream/0.'
  signature: create_checkpoint_if_not_exists_async(partition_id)
  parameters:
  - name: partition_id
    description: The partition ID.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The checkpoint for the given partition, whether newly created or
      already existing.
    types:
    - <xref:azure.eventprocessorhost.checkpoint.Checkpoint>
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.create_checkpoint_store_if_not_exists_async
  name: create_checkpoint_store_if_not_exists_async
  summary: Create the checkpoint store if it doesn't exist. Do nothing if it does
    exist.
  signature: create_checkpoint_store_if_not_exists_async()
  return:
    description: '*True* if the checkpoint store already exists or was created OK,
      *False*

      if there was a failure.'
    types:
    - <xref:bool>
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.create_lease_if_not_exists_async
  name: create_lease_if_not_exists_async
  summary: 'Create in the store the lease info for the given partition, if it does
    not exist.

    Do nothing if it does exist in the store already.'
  signature: create_lease_if_not_exists_async(partition_id)
  parameters:
  - name: partition_id
    description: The ID of a given parition.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: the existing or newly-created lease info for the partition.
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.create_lease_store_if_not_exists_async
  name: create_lease_store_if_not_exists_async
  summary: Create the lease store if it does not exist, do nothing if it does exist.
  signature: create_lease_store_if_not_exists_async()
  return:
    description: '*True* if the lease store already exists or was created successfully,
      *False* if not.'
    types:
    - <xref:bool>
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.delete_checkpoint_async
  name: delete_checkpoint_async
  summary: 'Delete the stored checkpoint for the given partition. If there is no stored
    checkpoint

    for the given partition, that is treated as success.'
  signature: delete_checkpoint_async(partition_id)
  parameters:
  - name: partition_id
    description: The partition ID.
    isRequired: true
    types:
    - <xref:str>
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.delete_lease_async
  name: delete_lease_async
  summary: 'Delete the lease info for the given partition from the store.

    If there is no stored lease for the given partition, that is treated as success.'
  signature: delete_lease_async(lease)
  parameters:
  - name: lease
    description: The stored lease to be deleted.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.delete_lease_store_async
  name: delete_lease_store_async
  summary: Not used by EventProcessorHost, but a convenient function to have for testing.
  signature: delete_lease_store_async()
  return:
    description: '*True* if the lease store was deleted successfully, *False* if not.'
    types:
    - <xref:bool>
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.get_all_leases
  name: get_all_leases
  summary: 'Return the lease info for all partitions.

    A typical implementation could just call get_lease_async() on all partitions.'
  signature: get_all_leases()
  return:
    description: A list of lease info.
    types:
    - <xref:list>[<xref:azure.eventprocessorhost.lease.Lease>]
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.get_checkpoint_async
  name: get_checkpoint_async
  summary: 'Get the checkpoint data associated with the given partition.

    Could return null if no checkpoint has been created for that partition.'
  signature: get_checkpoint_async(partition_id)
  parameters:
  - name: partition_id
    description: The partition ID.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Given partition checkpoint info, or *None* if none has been previously
      stored.
    types:
    - <xref:azure.eventprocessorhost.checkpoint.Checkpoint>
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.get_lease_async
  name: get_lease_async
  summary: 'Return the lease info for the specified partition.

    Can return null if no lease has been created in the store for the specified partition.'
  signature: get_lease_async(partition_id)
  parameters:
  - name: partition_id
    description: The partition ID.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: lease info for the partition, or *None*.
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.initialize
  name: initialize
  summary: 'The EventProcessorHost can''t pass itself to the AzureStorageCheckpointLeaseManager

    constructor because it is still being constructed. Do other initialization here

    also because it might throw and hence we don''t want it in the constructor.'
  signature: initialize(host)
  parameters:
  - name: host
    isRequired: true
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.release_lease_async
  name: release_lease_async
  summary: 'Give up a lease currently held by this host. If the lease has been stolen,
    or expired,

    releasing it is unnecessary, and will fail if attempted.'
  signature: release_lease_async(lease)
  parameters:
  - name: lease
    description: The stored lease to be released.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
  return:
    description: '*True* if the lease was released successfully, *False* if not.'
    types:
    - <xref:bool>
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.renew_lease_async
  name: renew_lease_async
  summary: 'Renew a lease currently held by this host.

    If the lease has been stolen, or expired, or released, it is not possible to renew
    it.

    You will have to call getLease() and then acquireLease() again.'
  signature: renew_lease_async(lease)
  parameters:
  - name: lease
    description: The stored lease to be renewed.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
  return:
    description: '*True* if the lease was renewed successfully, *False* if not.'
    types:
    - <xref:bool>
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.update_checkpoint_async
  name: update_checkpoint_async
  summary: 'Update the checkpoint in the store with the offset/sequenceNumber in the
    provided checkpoint

    checkpoint:offset/sequeceNumber to update the store with.'
  signature: update_checkpoint_async(lease, checkpoint)
  parameters:
  - name: lease
    description: The stored lease to be updated.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
  - name: checkpoint
    description: The checkpoint to update the lease with.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.checkpoint.Checkpoint>
- uid: azure.eventprocessorhost.azure_storage_checkpoint_manager.AzureStorageCheckpointLeaseManager.update_lease_async
  name: update_lease_async
  summary: 'Update the store with the information in the provided lease. It is necessary
    to currently

    hold a lease in order to update it. If the lease has been stolen, or expired,
    or released,

    it cannot be updated. Updating should renew the lease before performing the update
    to

    avoid lease expiration during the process.'
  signature: update_lease_async(lease)
  parameters:
  - name: lease
    description: The stored lease to be updated.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
  return:
    description: '*True* if the updated was performed successfully, *False* if not.'
    types:
    - <xref:bool>
