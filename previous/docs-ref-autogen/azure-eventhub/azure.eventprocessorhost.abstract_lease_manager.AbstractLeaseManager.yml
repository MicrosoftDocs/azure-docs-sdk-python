### YamlMime:PythonClass
uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
name: AbstractLeaseManager
fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
module: azure.eventprocessorhost.abstract_lease_manager
inheritances:
- abc.ABC
summary: 'If you wish to have EventProcessorHost store leases somewhere other than
  Azure Storage,

  you can write your own lease manager using this abstract class. The Azure Storage
  managers

  use the same storage for both lease and checkpoints, so both interfaces are implemented
  by

  the same class.You are free to do the same thing if you have  a unified store for
  both

  types of data.'
constructor:
  syntax: AbstractLeaseManager(lease_renew_interval, lease_duration)
methods:
- uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.acquire_lease_async
  name: acquire_lease_async
  summary: 'Acquire the lease on the desired partition for this EventProcessorHost.

    Note that it is legal to acquire a lease that is already owned by another host.

    Lease-stealing is how partitions are redistributed when additional hosts are started.'
  signature: acquire_lease_async(lease)
  parameters:
  - name: lease
    description: The lease to be acquired.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
  return:
    description: '*True* if the lease was acquired successfully, *False* if not.'
    types:
    - <xref:bool>
- uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_if_not_exists_async
  name: create_lease_if_not_exists_async
  summary: 'Create in the store the lease info for the given partition, if it does
    not exist.

    Do nothing if it does exist in the store already.'
  signature: create_lease_if_not_exists_async(partition_id)
  parameters:
  - name: partition_id
    description: The ID of a given partition.
    isRequired: true
  return:
    description: The existing or newly-created lease info for the partition.
- uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_store_if_not_exists_async
  name: create_lease_store_if_not_exists_async
  summary: Create the lease store if it does not exist, do nothing if it does exist.
  signature: create_lease_store_if_not_exists_async()
  return:
    description: '*True* if the lease store already exists or was created successfully,
      *False* if not.'
    types:
    - <xref:bool>
- uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_async
  name: delete_lease_async
  summary: 'Delete the lease info for the given partition from the store.

    If there is no stored lease for the given partition, that is treated as success.'
  signature: delete_lease_async(lease)
  parameters:
  - name: lease
    description: The lease to be deleted.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
- uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_store_async
  name: delete_lease_store_async
  summary: Not used by EventProcessorHost, but a convenient function to have for testing.
  signature: delete_lease_store_async()
  return:
    description: '*True* if the lease store was deleted successfully, *False* if not.'
    types:
    - <xref:bool>
- uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_all_leases
  name: get_all_leases
  summary: 'Return the lease info for all partitions.

    A typical implementation could just call get_lease_async() on all partitions.'
  signature: get_all_leases()
  return:
    description: A list of lease info.
- uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_lease_async
  name: get_lease_async
  summary: 'Return the lease info for the specified partition.

    Can return null if no lease has been created in the store for the specified partition.'
  signature: get_lease_async(partition_id)
  parameters:
  - name: partition_id
    description: The ID of a given partition.
    isRequired: true
  return:
    description: Lease info for the partition, or *None*.
- uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.release_lease_async
  name: release_lease_async
  summary: 'Give up a lease currently held by this host. If the lease has been stolen,
    or expired,

    releasing it is unnecessary, and will fail if attempted.'
  signature: release_lease_async(lease)
  parameters:
  - name: lease
    description: The lease to be released.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
  return:
    description: '*True* if the lease was released successfully, *False* if not.'
    types:
    - <xref:bool>
- uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.renew_lease_async
  name: renew_lease_async
  summary: 'Renew a lease currently held by this host.

    If the lease has been stolen, or expired, or released, it is not possible to renew
    it.

    You will have to call get_lease_async() and then acquire_lease_async() again.'
  signature: renew_lease_async(lease)
  parameters:
  - name: lease
    description: The lease to be renewed.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
  return:
    description: '*True* if the lease was renewed successfully, *False* if not.'
    types:
    - <xref:bool>
- uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.update_lease_async
  name: update_lease_async
  summary: 'Update the store with the information in the provided lease. It is necessary
    to currently

    hold a lease in order to update it. If the lease has been stolen, or expired,
    or released,

    it cannot be updated. Updating should renew the lease before performing the update
    to

    avoid lease expiration during the process.'
  signature: update_lease_async(lease)
  parameters:
  - name: lease
    description: The lease to be updated.
    isRequired: true
    types:
    - <xref:azure.eventprocessorhost.lease.Lease>
  return:
    description: '*True* if the updated was performed successfully, *False* if not.'
    types:
    - <xref:bool>
