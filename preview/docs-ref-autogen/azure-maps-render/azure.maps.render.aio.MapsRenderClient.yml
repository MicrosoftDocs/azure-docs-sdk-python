### YamlMime:PythonClass
uid: azure.maps.render.aio.MapsRenderClient
name: MapsRenderClient
fullName: azure.maps.render.aio.MapsRenderClient
module: azure.maps.render.aio
inheritances:
- azure.maps.render.aio._base_client_async.AsyncMapsRenderClientBase
summary: Azure Maps Render REST APIs.
constructor:
  syntax: 'MapsRenderClient(credential: AzureKeyCredential | AsyncTokenCredential,
    **kwargs: Any)'
  parameters:
  - name: credential
    description: Credential needed for the client to connect to Azure.
    isRequired: true
    types:
    - <xref:azure.core.credentials.AsyncTokenCredential>
    - <xref:azure.core.credentials.AzureKeyCredential>
  - name: api_version
    description: 'The API version of the service to use for requests. It defaults
      to the latest service version.

      Setting to an older version may result in reduced feature compatibility.'
    types:
    - <xref:str>
examples:
- "Creating the MapsRenderClient with an subscription key.<!--[!code-python[Main](les\\\
  async_samples\\sample_authentication_async.py )]-->\n\n<!-- literal_block {\"ids\"\
  : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\157\\\\azure-maps-render-1.0.0b1\\\
  \\samples\\\\async_samples\\\\sample_authentication_async.py\", \"xml:space\": \"\
  preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\": {\"\
  linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
  \ import AzureKeyCredential\n   from azure.maps.render.aio import MapsRenderClient\n\
  \n   subscription_key = os.getenv(\"AZURE_SUBSCRIPTION_KEY\")\n\n   maps_render_client\
  \ = MapsRenderClient(credential=AzureKeyCredential(subscription_key))\n\n   ````\n\
  \nCreating the MapsRenderClient with a token credential.<!--[!code-python[Main](les\\\
  async_samples\\sample_authentication_async.py )]-->\n\n<!-- literal_block {\"ids\"\
  : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\157\\\\azure-maps-render-1.0.0b1\\\
  \\samples\\\\async_samples\\\\sample_authentication_async.py\", \"xml:space\": \"\
  preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\": {\"\
  linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.identity.aio\
  \ import DefaultAzureCredential\n   from azure.maps.render.aio import MapsRenderClient\n\
  \n   credential = DefaultAzureCredential()\n   maps_client_id = os.getenv(\"AZURE_MAPS_CLIENT_ID\"\
  )\n\n   maps_render_client = MapsRenderClient(client_id=maps_client_id, credential=credential)\n\
  \n   ````\n"
methods:
- uid: azure.maps.render.aio.MapsRenderClient.get_copyright_caption
  name: get_copyright_caption
  summary: 'Copyrights API is designed to serve copyright information for Render Tile

    service. In addition to basic copyright for the whole map, API is serving

    specific groups of copyrights for some countries.


    As an alternative to copyrights for map request, one can receive captions

    for displaying the map provider information on the map.'
  signature: 'async get_copyright_caption(**kwargs: Any) -> CopyrightCaption'
  return:
    description: Get Copyright Caption Result
    types:
    - <xref:azure.maps.render.models.CopyrightCaption>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Return serve copyright information for Render Tile service.<!--[!code-python[Main](les\\\
    async_samples\\sample_get_copyright_caption_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\157\\\\azure-maps-render-1.0.0b1\\\
    \\samples\\\\async_samples\\\\sample_get_copyright_caption_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.maps.render.aio import MapsRenderClient\n\
    \n   maps_render_client = MapsRenderClient(credential=AzureKeyCredential(subscription_key))\n\
    \n   async with maps_render_client:\n       result = await maps_render_client.get_copyright_caption()\n\
    \n   print(\"Get copyright caption result:\")\n   print(result.copyrights_caption)\n\
    \n   ````\n"
- uid: azure.maps.render.aio.MapsRenderClient.get_copyright_for_tile
  name: get_copyright_for_tile
  summary: 'Copyrights API is designed to serve copyright information for Render Tile  service.
    In addition

    to basic copyright for the whole map, API is serving  specific groups of copyrights
    for some

    countries.

    Returns the copyright information for a given tile. To obtain the copyright information
    for a

    particular tile, the request should specify the tile''s zoom level and x and y
    coordinates (see:

    Zoom Levels and Tile Grid).'
  signature: 'async get_copyright_for_tile(z: int, x: int, y: int, **kwargs: Any)
    -> Copyright'
  parameters:
  - name: z
    description: Zoom level for the desired tile.
    isRequired: true
    types:
    - <xref:azure.maps.render.aio.int>
  - name: x
    description: X coordinate of the tile on zoom grid.
    isRequired: true
    types:
    - <xref:azure.maps.render.aio.int>
  - name: y
    description: Y coordinate of the tile on zoom grid.
    isRequired: true
    types:
    - <xref:azure.maps.render.aio.int>
  - name: include_text
    description: 'True or False to exclude textual data from response. Only images
      and

      country names will be in response.'
    types:
    - <xref:bool>
  return:
    description: Copyright result
    types:
    - <xref:azure.maps.render.models.Copyright>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Returns the copyright information for a given tile.<!--[!code-python[Main](les\\\
    async_samples\\sample_get_copyright_for_tile_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\157\\\\azure-maps-render-1.0.0b1\\\
    \\samples\\\\async_samples\\\\sample_get_copyright_for_tile_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.maps.render.aio import MapsRenderClient\n\
    \n   maps_render_client = MapsRenderClient(credential=AzureKeyCredential(subscription_key))\n\
    \n   async with maps_render_client:\n       result = await maps_render_client.get_copyright_for_tile(z=6,\
    \ x=9, y=22)\n\n   print(\"Get copyright for tile result:\")\n   print(result.general_copyrights[0])\n\
    \n   ````\n"
- uid: azure.maps.render.aio.MapsRenderClient.get_copyright_for_world
  name: get_copyright_for_world
  summary: 'Copyrights API is designed to serve copyright information for Render Tile  service.
    In addition

    to basic copyright for the whole map, API is serving  specific groups of copyrights
    for some

    countries.

    Returns the copyright information for the world. To obtain the default copyright
    information

    for the whole world, do not specify a tile or bounding box.'
  signature: 'async get_copyright_for_world(**kwargs: Any) -> Copyright'
  parameters:
  - name: include_text
    description: 'True or False to exclude textual data from response. Only images
      and

      country names will be in response.'
    types:
    - <xref:bool>
  return:
    description: Copyright result
    types:
    - <xref:azure.maps.render.models.Copyright>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Returns the copyright information for the world.<!--[!code-python[Main](les\\\
    async_samples\\sample_get_copyright_for_world_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\157\\\\azure-maps-render-1.0.0b1\\\
    \\samples\\\\async_samples\\\\sample_get_copyright_for_world_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.maps.render.aio import MapsRenderClient\n\
    \n   maps_render_client = MapsRenderClient(credential=AzureKeyCredential(subscription_key))\n\
    \n   async with maps_render_client:\n       result = await maps_render_client.get_copyright_for_world()\n\
    \n   print(\"Get copyright for the world result:\")\n   print(result.general_copyrights[0])\n\
    \n   ````\n"
- uid: azure.maps.render.aio.MapsRenderClient.get_copyright_from_bounding_box
  name: get_copyright_from_bounding_box
  summary: 'Returns copyright information for a given bounding box. Bounding-box requests
    should specify

    the minimum and maximum longitude and latitude (EPSG-3857) coordinates.'
  signature: 'async get_copyright_from_bounding_box(bounding_box: BoundingBox, **kwargs:
    Any) -> Copyright'
  parameters:
  - name: bounding_box
    description: 'north(top), west(left), south(bottom), east(right)

      position of the bounding box as float.

      E.g. BoundingBox(west=37.553, south=-122.453, east=33.2, north=57)'
    isRequired: true
  - name: include_text
    description: 'True or False to exclude textual data from response. Only images
      and

      country names will be in response.'
    types:
    - <xref:bool>
  return:
    description: Copyright result
    types:
    - <xref:azure.maps.render.models.Copyright>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.maps.render.aio.MapsRenderClient.get_map_attribution
  name: get_map_attribution
  summary: 'The Get Map Attribution API allows users to request map copyright attribution
    information for a

    section of a tileset.'
  signature: 'async get_map_attribution(tileset_id: str | TilesetID, zoom: int, bounds:
    BoundingBox, **kwargs: Any) -> MapAttribution'
  parameters:
  - name: tileset_id
    description: 'A tileset is a collection of raster or vector data broken up into
      a

      uniform grid of square tiles at preset zoom levels. Every tileset has a **tilesetId**
      to use

      when making requests.'
    isRequired: true
    types:
    - <xref:azure.maps.render.aio.str>
    - <xref:azure.maps.render.models.TilesetID>
  - name: zoom
    description: Zoom level for the desired map attribution.
    isRequired: true
    types:
    - <xref:azure.maps.render.aio.int>
  - name: bounds
    description: 'north(top), west(left), south(bottom), east(right)

      position of the bounding box as float.

      E.g. BoundingBox(west=37.553, south=-122.453, east=33.2, north=57)'
    isRequired: true
    types:
    - <xref:azure.maps.render.models.BoundingBox>
  return:
    description: MapAttribution
    types:
    - <xref:azure.maps.render.models.MapAttribution>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Return map copyright attribution information for a section of a tileset.<!--[!code-python[Main](les\\\
    async_samples\\sample_get_map_attribution_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\157\\\\azure-maps-render-1.0.0b1\\\
    \\samples\\\\async_samples\\\\sample_get_map_attribution_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.maps.render.aio import MapsRenderClient\n\
    \   from azure.maps.render.models import TilesetID, BoundingBox\n\n   maps_render_client\
    \ = MapsRenderClient(credential=AzureKeyCredential(subscription_key))\n\n   async\
    \ with maps_render_client:\n       result = await maps_render_client.get_map_attribution(\n\
    \           tileset_id=TilesetID.MICROSOFT_BASE,\n           zoom=6,\n       \
    \    bounds=BoundingBox(\n               south=42.982261,\n               west=24.980233,\n\
    \               north=56.526017,\n               east=1.355233\n           )\n\
    \       )\n\n   print(\"Get map attribution result:\")\n   print(result.copyrights[0])\n\
    \n   ````\n"
- uid: azure.maps.render.aio.MapsRenderClient.get_map_state_tile
  name: get_map_state_tile
  summary: 'Fetches state tiles in vector format typically to be integrated into indoor
    maps module of map

    control or SDK.'
  signature: 'async get_map_state_tile(stateset_id: str, z: int, x: int, y: int, **kwargs:
    Any) -> AsyncIterator[bytes]'
  parameters:
  - name: z
    description: Zoom level for the desired tile.
    isRequired: true
    types:
    - <xref:azure.maps.render.aio.int>
  - name: x
    description: X coordinate of the tile on zoom grid.
    isRequired: true
    types:
    - <xref:azure.maps.render.aio.int>
  - name: y
    description: Y coordinate of the tile on zoom grid.
    isRequired: true
    types:
    - <xref:azure.maps.render.aio.int>
  - name: stateset_id
    description: The stateset id.
    isRequired: true
    types:
    - <xref:azure.maps.render.aio.str>
  return:
    description: AsyncIterator of the response bytes
    types:
    - <xref:azure.maps.render.aio.AsyncIterator>[<xref:azure.maps.render.aio.bytes>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.maps.render.aio.MapsRenderClient.get_map_static_image
  name: get_map_static_image
  summary: 'The static image service renders a user-defined, rectangular image containing
    a map section

    using a zoom level from 0 to 20. The static image service renders a user-defined,
    rectangular

    image containing a map section using a zoom level from 0 to 20. The supported
    resolution range

    for the map image is from 1x1 to 8192x8192. If you are deciding when to use the
    static image

    service over the map tile service, you may want to consider how you would like
    to interact with

    the rendered map. If the map contents will be relatively unchanging, a static
    map is a good

    choice. If you want to support a lot of zooming, panning and changing of the map
    content, the

    map tile service would be a better choice.'
  signature: 'async get_map_static_image(**kwargs: Any) -> AsyncIterator[bytes]'
  parameters:
  - name: img_format
    description: 'Desired format of the response. Possible value: png. "png" Default
      value is "png".'
    types:
    - <xref:str>
    - <xref:azure.maps.render.models.RasterTileFormat>
  - name: layer
    description: Map layer requested.
    types:
    - <xref:str>
    - <xref:azure.maps.render.models.StaticMapLayer>
  - name: style
    description: Map style to be returned.
    types:
    - <xref:str>
    - <xref:azure.maps.render.models.MapImageStyle>
  - name: zoom
    description: Desired zoom level of the map.
    types:
    - <xref:int>
  - name: center
    description: Coordinates of the center point.
    types:
    - <xref:azure.maps.render.models.LatLon>
    - <xref:Tuple>
  - name: bounding_box_private
    description: 'north(top), west(left), south(bottom), east(right)

      position of the bounding box as float.

      E.g. BoundingBox(west=37.553, south=-122.453, east=33.2, north=57)'
    types:
    - <xref:azure.maps.render.models.BoundingBox>
  - name: height
    description: Height of the resulting image in pixels. Range is 1 to 8192.
    types:
    - <xref:int>
  - name: width
    description: Width of the resulting image in pixels. Range is 1 to 8192. Default
      is 512.
    types:
    - <xref:int>
  - name: language
    description: Language in which search results should be returned.
    types:
    - <xref:str>
  - name: localized_map_view
    description: 'The View parameter (also called the "user region" parameter)

      allows you to show the correct maps for a certain country/region for geopolitically
      disputed

      regions.'
    types:
    - <xref:str>
    - <xref:azure.maps.render.models.LocalizedMapView>
  - name: pins
    description: Pushpin style and instances. Use this parameter to optionally add
      pushpins to the image.
    types:
    - <xref:list>[<xref:str>]
    - <xref:azure.maps.render.models.ImagePushpinStyle>
  - name: path
    description: 'Path style and locations. Use this parameter to optionally add lines,
      polygons

      or circles to the image.'
    types:
    - <xref:list>[<xref:str>]
    - <xref:azure.maps.render.models.ImagePathStyle>
  return:
    description: AsyncIterator of the response bytes
    types:
    - <xref:azure.maps.render.aio.AsyncIterator>[<xref:azure.maps.render.aio.bytes>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Return static image service renders a user-defined,\nrectangular image containing\
    \ a map section using a zoom level from 0 to 20.<!--[!code-python[Main](les\\\
    async_samples\\sample_get_map_static_image_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\157\\\\azure-maps-render-1.0.0b1\\\
    \\samples\\\\async_samples\\\\sample_get_map_static_image_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.maps.render.aio import MapsRenderClient\n\
    \n   maps_render_client = MapsRenderClient(credential=AzureKeyCredential(subscription_key))\n\
    \n   async with maps_render_client:\n       result = await maps_render_client.get_map_static_image(img_format=\"\
    png\", center=(52.41064,4.84228))\n\n   ````\n"
- uid: azure.maps.render.aio.MapsRenderClient.get_map_tile
  name: get_map_tile
  summary: 'The Get Map Tiles API allows users to request map tiles in vector or raster
    formats typically

    to be integrated into a map control or SDK. Some example tiles that can be requested
    are Azure

    Maps road tiles, real-time  Weather Radar tiles. By default, Azure Maps uses vector
    tiles for its web map

    control (Web SDK) and Android SDK.'
  signature: 'async get_map_tile(tileset_id: str | TilesetID, z: int, x: int, y: int,
    **kwargs: Any) -> AsyncIterator[bytes]'
  parameters:
  - name: tileset_id
    description: 'A tileset is a collection of raster or vector data broken up into
      a

      uniform grid of square tiles at preset zoom levels. Every tileset has a **tilesetId**
      to use

      when making requests.'
    isRequired: true
    types:
    - <xref:azure.maps.render.aio.str>
    - <xref:azure.maps.render.models.TilesetID>
  - name: z
    description: Zoom level for the desired tile.
    isRequired: true
    types:
    - <xref:azure.maps.render.aio.int>
  - name: x
    description: X coordinate of the tile on zoom grid.
    isRequired: true
    types:
    - <xref:azure.maps.render.aio.int>
  - name: y
    description: Y coordinate of the tile on zoom grid.
    isRequired: true
    types:
    - <xref:azure.maps.render.aio.int>
  - name: time_stamp
    description: The desired date and time of the requested tile.
    types:
    - <xref:datetime.datetime>
  - name: tile_size
    description: The size of the returned map tile in pixels.
    types:
    - <xref:azure.maps.render.models.MapTileSize>
  - name: language
    description: Language in which search results should be returned.
    types:
    - <xref:str>
  - name: localized_map_view
    description: 'The View parameter (also called the "user region" parameter)

      allows you to show the correct maps for a certain country/region for geopolitically
      disputed

      regions.'
    types:
    - <xref:str>
    - <xref:azure.maps.render.models.LocalizedMapView>
  return:
    description: AsyncIterator of the response bytes
    types:
    - <xref:azure.maps.render.aio.AsyncIterator>[<xref:azure.maps.render.aio.bytes>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Return map tiles in vector or raster formats.<!--[!code-python[Main](les\\async_samples\\\
    sample_get_map_tile_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\157\\\\azure-maps-render-1.0.0b1\\\\samples\\\
    \\async_samples\\\\sample_get_map_tile_async.py\", \"xml:space\": \"preserve\"\
    , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
    : 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.maps.render.aio import MapsRenderClient\n\
    \   from azure.maps.render.models import TilesetID\n\n   maps_render_client =\
    \ MapsRenderClient(credential=AzureKeyCredential(subscription_key))\n\n\n   async\
    \ with maps_render_client:\n       result = await maps_render_client.get_map_tile(tileset_id=TilesetID.MICROSOFT_BASE,\
    \ z=6, x=9, y=22, tile_size=\"512\")\n\n\n   ````\n"
- uid: azure.maps.render.aio.MapsRenderClient.get_map_tileset
  name: get_map_tileset
  summary: The Get Map Tileset API allows users to request metadata for a tileset.
  signature: 'async get_map_tileset(tileset_id: str | TilesetID, **kwargs: Any) ->
    MapTileset'
  parameters:
  - name: tileset_id
    description: 'A tileset is a collection of raster or vector data broken up into
      a

      uniform grid of square tiles at preset zoom levels. Every tileset has a **tilesetId**
      to use

      when making requests.'
    isRequired: true
    types:
    - <xref:azure.maps.render.aio.str>
    - <xref:azure.maps.render.models.TilesetID>
  return:
    description: MapTileset
    types:
    - <xref:azure.maps.render.models.MapTileset>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
