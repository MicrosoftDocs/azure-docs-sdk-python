### YamlMime:PythonClass
uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset
name: ExportedCustomEntityRecognitionProjectAsset
fullName: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset
module: azure.ai.textanalytics.authoring.models
summary: Represents the exported assets for a entity recognition project.
constructor:
  syntax: 'ExportedCustomEntityRecognitionProjectAsset(*args: Any, **kwargs: Any)'
variables:
- description: The list of entities belonging to the project.
  name: entities
  types:
  - <xref:list>[<xref:azure.ai.textanalytics.authoring.models.ExportedEntity>]
- description: The list of documents belonging to the project.
  name: documents
  types:
  - <xref:list>[<xref:azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionDocument>]
- description: 'The type of the project the assets belong to. Required. For building
    an

    extraction model to identify your domain categories using your own data.'
  name: project_kind
  types:
  - <xref:str>
  - <xref:azure.ai.textanalytics.authoring.models.CUSTOM_ENTITY_RECOGNITION>
methods:
- uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset.copy
  name: copy
  signature: copy() -> Model
- uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> tuple[str, Any]
- uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset.documents
  name: documents
  summary: The list of documents belonging to the project.
  signature: 'documents: list[''_models.ExportedCustomEntityRecognitionDocument'']
    | None'
- uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset.entities
  name: entities
  summary: The list of entities belonging to the project.
  signature: 'entities: list[''_models.ExportedEntity''] | None'
- uid: azure.ai.textanalytics.authoring.models.ExportedCustomEntityRecognitionProjectAsset.project_kind
  name: project_kind
  summary: 'The type of the project the assets belong to. Required. For building an
    extraction model to

    identify your domain categories using your own data.'
  signature: 'project_kind: CUSTOM_ENTITY_RECOGNITION: ''CustomEntityRecognition''>]'
