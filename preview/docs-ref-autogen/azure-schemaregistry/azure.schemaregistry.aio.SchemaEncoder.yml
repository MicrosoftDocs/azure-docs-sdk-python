### YamlMime:PythonClass
uid: azure.schemaregistry.aio.SchemaEncoder
name: SchemaEncoder
fullName: azure.schemaregistry.aio.SchemaEncoder
module: azure.schemaregistry.aio
inheritances:
- typing_extensions.Protocol
summary: "Provides the ability to encode and decode content according to a provided\
  \ schema or schema ID\n   corresponding to a schema in a Schema Registry group."
constructor:
  syntax: SchemaEncoder(*args, **kwargs)
methods:
- uid: azure.schemaregistry.aio.SchemaEncoder.decode
  name: decode
  summary: "Returns the decoded data with the schema format specified by the *content-type*\
    \ property.\n   If *validate* callable was passed to constructor, will validate\
    \ content against schema retrieved\n   from the registry after decoding."
  signature: 'async decode(message: MessageType | MessageContent, *, request_options:
    Dict[str, Any] | None = None, **kwargs: Any) -> Dict[str, Any]'
  parameters:
  - name: message
    description: 'The message object which holds the content to be decoded and content
      type

      containing the schema ID.'
    isRequired: true
    types:
    - <xref:azure.schemaregistry.MessageType>
    - <xref:azure.schemaregistry.MessageContent>
  keywordOnlyParameters:
  - name: request_options
    description: The keyword arguments for http requests to be passed to the client.
    types:
    - <xref:dict>[<xref:str>, <xref:any>]
    - <xref:None>
  return:
    description: The decoded content.
    types:
    - <xref:dict>[<xref:str>, <xref:any>]
- uid: azure.schemaregistry.aio.SchemaEncoder.encode
  name: encode
  summary: "Encodes content after validating against the provided pre-registered schema\
    \ or the one corresponding to\n   the provided schema ID. If provided with a MessageType\
    \ subtype, encoded content and content type will be\n   passed to create the message\
    \ object. If not provided, the following dict will be returned:\n   {\"content\"\
    : encoded value, \"content_type\": schema format mime type string + schema ID}.\n\
    \nIf *message_type* is set, then additional keyword arguments for building MessageType\
    \ will be passed to the\n   MessageType.from_message_content() method."
  signature: 'async encode(content: Mapping[str, Any], *, schema: str, schema_id:
    None = None, message_type: Type[''MessageType''], request_options: Dict[str, Any]
    | None = None, **kwargs: Any) -> MessageType'
  parameters:
  - name: content
    description: The content to be encoded.
    isRequired: true
    types:
    - <xref:mapping>[<xref:str>, <xref:any>]
  keywordOnlyParameters:
  - name: schema
    description: 'The pre-registered schema used to validate the content. Exactly
      one of

      *schema* or *schema_id* must be passed.'
    types:
    - <xref:str>
    - <xref:None>
  - name: schema_id
    description: 'The schema ID corresponding to the pre-registered schema to be used

      for validation. Exactly one of *schema* or *schema_id* must be passed.'
    types:
    - <xref:str>
    - <xref:None>
  - name: message_type
    description: 'The message class to construct the message. If passed, must be a
      subtype of the

      azure.schemaregistry.MessageType protocol.'
    types:
    - <xref:type>[<xref:azure.schemaregistry.MessageType>]
    - <xref:None>
  - name: request_options
    description: The keyword arguments for http requests to be passed to the client.
    types:
    - <xref:dict>[<xref:str>, <xref:any>]
    - <xref:None>
  return:
    description: 'TypedDict of encoded content and content type if *message_type*
      is not set, otherwise the

      constructed message object.'
    types:
    - <xref:azure.schemaregistry.MessageType>
    - <xref:azure.schemaregistry.MessageContent>
