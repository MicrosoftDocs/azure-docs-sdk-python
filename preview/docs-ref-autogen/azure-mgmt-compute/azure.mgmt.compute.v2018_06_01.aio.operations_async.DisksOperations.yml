### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_create_or_update
  - azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_delete
  - azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_grant_access
  - azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_revoke_access
  - azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_update
  - azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.get
  - azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.list
  - azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.list_by_resource_group
  - azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.models
  class: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.mgmt.compute.v2018_06_01.aio.operations_async
  name: DisksOperations
  summary: 'DisksOperations async operations.


    You should not instantiate this class directly. Instead, you should create a Client
    instance that

    instantiates it for you and attaches it as an attribute.'
  syntax:
    content: DisksOperations(client, config, serializer, deserializer) -> None
    parameters:
    - description: Client for service requests.
      id: client
    - description: Configuration of service client.
      id: config
    - description: An object model serializer.
      id: serializer
    - description: An object model deserializer.
      id: deserializer
    variables:
    - description: Alias to model classes used in this operation group.
      id: models
  type: class
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
- class: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_create_or_update
  langs:
  - python
  module: azure.mgmt.compute.v2018_06_01.aio.operations_async
  name: 'begin_create_or_update(resource_group_name: str, disk_name: str, disk: azure.mgmt.compute.v2018_06_01.models._models_py3.Disk,
    **kwargs) -> azure.mgmt.compute.v2018_06_01.models._models_py3.Disk'
  namewithoutparameters: begin_create_or_update
  summary: "Creates or updates a disk.\n\n   param resource_group_name:\n      The\
    \ name of the resource group.\n\n   type resource_group_name:\n      str\n\n \
    \  param disk_name:\n      The name of the managed disk that is being created.\
    \ The name can't be changed\n\n\nafter the disk is created. Supported characters\
    \ for the name are a-z, A-Z, 0-9 and _. The\nmaximum name length is 80 characters.\n\
    \n\n   type disk_name:\n      str\n\n   param disk:\n      Disk object supplied\
    \ in the body of the Put disk operation.\n\n   type disk:\n      ~azure.mgmt.compute.v2018_06_01.models.Disk\n\
    \n   keyword callable cls:\n      A custom type or function that will be passed\
    \ the direct response\n\n   keyword str continuation_token:\n      A continuation\
    \ token to restart a poller from a saved state.\n\n   keyword polling:\n     \
    \ True for ARMPolling, False for no polling, or a\n      polling object for personal\
    \ polling strategy\n\n   paramtype polling:\n      bool or ~azure.core.polling.AsyncPollingMethod\n\
    \n   keyword int polling_interval:\n      Default waiting time between two polls\
    \ for LRO operations if no Retry-After header is present.\n\n   return:\n    \
    \  Disk, or the result of cls(response)\n\n   rtype:\n      ~azure.mgmt.compute.v2018_06_01.models.Disk\n\
    \n   raises ~azure.core.exceptions.HttpResponseError:"
  syntax:
    content: 'begin_create_or_update(resource_group_name: str, disk_name: str, disk:
      azure.mgmt.compute.v2018_06_01.models._models_py3.Disk, **kwargs) -> azure.mgmt.compute.v2018_06_01.models._models_py3.Disk'
  type: method
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_create_or_update
- class: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_delete
  langs:
  - python
  module: azure.mgmt.compute.v2018_06_01.aio.operations_async
  name: 'begin_delete(resource_group_name: str, disk_name: str, **kwargs) -> None'
  namewithoutparameters: begin_delete
  summary: "Deletes a disk.\n\n   param resource_group_name:\n      The name of the\
    \ resource group.\n\n   type resource_group_name:\n      str\n\n   param disk_name:\n\
    \      The name of the managed disk that is being created. The name can't be changed\n\
    \n\nafter the disk is created. Supported characters for the name are a-z, A-Z,\
    \ 0-9 and _. The\nmaximum name length is 80 characters.\n\n\n   type disk_name:\n\
    \      str\n\n   keyword callable cls:\n      A custom type or function that will\
    \ be passed the direct response\n\n   keyword str continuation_token:\n      A\
    \ continuation token to restart a poller from a saved state.\n\n   keyword polling:\n\
    \      True for ARMPolling, False for no polling, or a\n      polling object for\
    \ personal polling strategy\n\n   paramtype polling:\n      bool or ~azure.core.polling.AsyncPollingMethod\n\
    \n   keyword int polling_interval:\n      Default waiting time between two polls\
    \ for LRO operations if no Retry-After header is present.\n\n   return:\n    \
    \  None, or the result of cls(response)\n\n   rtype:\n      None\n\n   raises\
    \ ~azure.core.exceptions.HttpResponseError:"
  syntax:
    content: 'begin_delete(resource_group_name: str, disk_name: str, **kwargs) ->
      None'
  type: method
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_delete
- class: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_grant_access
  langs:
  - python
  module: azure.mgmt.compute.v2018_06_01.aio.operations_async
  name: 'begin_grant_access(resource_group_name: str, disk_name: str, grant_access_data:
    azure.mgmt.compute.v2018_06_01.models._models_py3.GrantAccessData, **kwargs) ->
    azure.mgmt.compute.v2018_06_01.models._models_py3.AccessUri'
  namewithoutparameters: begin_grant_access
  summary: "Grants access to a disk.\n\n   param resource_group_name:\n      The name\
    \ of the resource group.\n\n   type resource_group_name:\n      str\n\n   param\
    \ disk_name:\n      The name of the managed disk that is being created. The name\
    \ can't be changed\n\n\nafter the disk is created. Supported characters for the\
    \ name are a-z, A-Z, 0-9 and _. The\nmaximum name length is 80 characters.\n\n\
    \n   type disk_name:\n      str\n\n   param grant_access_data:\n      Access data\
    \ object supplied in the body of the get disk access\n\n\noperation.\n   type\
    \ grant_access_data:\n      ~azure.mgmt.compute.v2018_06_01.models.GrantAccessData\n\
    \n   keyword callable cls:\n      A custom type or function that will be passed\
    \ the direct response\n\n   keyword str continuation_token:\n      A continuation\
    \ token to restart a poller from a saved state.\n\n   keyword polling:\n     \
    \ True for ARMPolling, False for no polling, or a\n      polling object for personal\
    \ polling strategy\n\n   paramtype polling:\n      bool or ~azure.core.polling.AsyncPollingMethod\n\
    \n   keyword int polling_interval:\n      Default waiting time between two polls\
    \ for LRO operations if no Retry-After header is present.\n\n   return:\n    \
    \  AccessUri, or the result of cls(response)\n\n   rtype:\n      ~azure.mgmt.compute.v2018_06_01.models.AccessUri\n\
    \n   raises ~azure.core.exceptions.HttpResponseError:"
  syntax:
    content: 'begin_grant_access(resource_group_name: str, disk_name: str, grant_access_data:
      azure.mgmt.compute.v2018_06_01.models._models_py3.GrantAccessData, **kwargs)
      -> azure.mgmt.compute.v2018_06_01.models._models_py3.AccessUri'
  type: method
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_grant_access
- class: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_revoke_access
  langs:
  - python
  module: azure.mgmt.compute.v2018_06_01.aio.operations_async
  name: 'begin_revoke_access(resource_group_name: str, disk_name: str, **kwargs) ->
    None'
  namewithoutparameters: begin_revoke_access
  summary: "Revokes access to a disk.\n\n   param resource_group_name:\n      The\
    \ name of the resource group.\n\n   type resource_group_name:\n      str\n\n \
    \  param disk_name:\n      The name of the managed disk that is being created.\
    \ The name can't be changed\n\n\nafter the disk is created. Supported characters\
    \ for the name are a-z, A-Z, 0-9 and _. The\nmaximum name length is 80 characters.\n\
    \n\n   type disk_name:\n      str\n\n   keyword callable cls:\n      A custom\
    \ type or function that will be passed the direct response\n\n   keyword str continuation_token:\n\
    \      A continuation token to restart a poller from a saved state.\n\n   keyword\
    \ polling:\n      True for ARMPolling, False for no polling, or a\n      polling\
    \ object for personal polling strategy\n\n   paramtype polling:\n      bool or\
    \ ~azure.core.polling.AsyncPollingMethod\n\n   keyword int polling_interval:\n\
    \      Default waiting time between two polls for LRO operations if no Retry-After\
    \ header is present.\n\n   return:\n      None, or the result of cls(response)\n\
    \n   rtype:\n      None\n\n   raises ~azure.core.exceptions.HttpResponseError:"
  syntax:
    content: 'begin_revoke_access(resource_group_name: str, disk_name: str, **kwargs)
      -> None'
  type: method
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_revoke_access
- class: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_update
  langs:
  - python
  module: azure.mgmt.compute.v2018_06_01.aio.operations_async
  name: 'begin_update(resource_group_name: str, disk_name: str, disk: azure.mgmt.compute.v2018_06_01.models._models_py3.DiskUpdate,
    **kwargs) -> azure.mgmt.compute.v2018_06_01.models._models_py3.Disk'
  namewithoutparameters: begin_update
  summary: "Updates (patches) a disk.\n\n   param resource_group_name:\n      The\
    \ name of the resource group.\n\n   type resource_group_name:\n      str\n\n \
    \  param disk_name:\n      The name of the managed disk that is being created.\
    \ The name can't be changed\n\n\nafter the disk is created. Supported characters\
    \ for the name are a-z, A-Z, 0-9 and _. The\nmaximum name length is 80 characters.\n\
    \n\n   type disk_name:\n      str\n\n   param disk:\n      Disk object supplied\
    \ in the body of the Patch disk operation.\n\n   type disk:\n      ~azure.mgmt.compute.v2018_06_01.models.DiskUpdate\n\
    \n   keyword callable cls:\n      A custom type or function that will be passed\
    \ the direct response\n\n   keyword str continuation_token:\n      A continuation\
    \ token to restart a poller from a saved state.\n\n   keyword polling:\n     \
    \ True for ARMPolling, False for no polling, or a\n      polling object for personal\
    \ polling strategy\n\n   paramtype polling:\n      bool or ~azure.core.polling.AsyncPollingMethod\n\
    \n   keyword int polling_interval:\n      Default waiting time between two polls\
    \ for LRO operations if no Retry-After header is present.\n\n   return:\n    \
    \  Disk, or the result of cls(response)\n\n   rtype:\n      ~azure.mgmt.compute.v2018_06_01.models.Disk\n\
    \n   raises ~azure.core.exceptions.HttpResponseError:"
  syntax:
    content: 'begin_update(resource_group_name: str, disk_name: str, disk: azure.mgmt.compute.v2018_06_01.models._models_py3.DiskUpdate,
      **kwargs) -> azure.mgmt.compute.v2018_06_01.models._models_py3.Disk'
  type: method
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_update
- class: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.get
  langs:
  - python
  module: azure.mgmt.compute.v2018_06_01.aio.operations_async
  name: 'get(resource_group_name: str, disk_name: str, **kwargs) -> azure.mgmt.compute.v2018_06_01.models._models_py3.Disk'
  namewithoutparameters: get
  summary: Gets information about a disk.
  syntax:
    content: 'get(resource_group_name: str, disk_name: str, **kwargs) -> azure.mgmt.compute.v2018_06_01.models._models_py3.Disk'
    parameters:
    - description: The name of the resource group.
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: 'The name of the managed disk that is being created. The name can''t
        be changed

        after the disk is created. Supported characters for the name are a-z, A-Z,
        0-9 and _. The

        maximum name length is 80 characters.'
      id: disk_name
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: Disk, or the result of cls(response)
      type:
      - azure.mgmt.compute.v2018_06_01.models.Disk
  type: method
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.get
- class: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.list
  langs:
  - python
  module: azure.mgmt.compute.v2018_06_01.aio.operations_async
  name: list(**kwargs) -> typing.AsyncIterable[_ForwardRef('models.DiskList')]
  namewithoutparameters: list
  summary: Lists all the disks under a subscription.
  syntax:
    content: list(**kwargs) -> typing.AsyncIterable[_ForwardRef('models.DiskList')]
    parameters:
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: An iterator like instance of either DiskList or the result of cls(response)
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.mgmt.compute.v2018_06_01.models.DiskList]
  type: method
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.list
- class: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.list_by_resource_group
  langs:
  - python
  module: azure.mgmt.compute.v2018_06_01.aio.operations_async
  name: 'list_by_resource_group(resource_group_name: str, **kwargs) -> typing.AsyncIterable[_ForwardRef(''models.DiskList'')]'
  namewithoutparameters: list_by_resource_group
  summary: Lists all the disks under a resource group.
  syntax:
    content: 'list_by_resource_group(resource_group_name: str, **kwargs) -> typing.AsyncIterable[_ForwardRef(''models.DiskList'')]'
    parameters:
    - description: The name of the resource group.
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: An iterator like instance of either DiskList or the result of cls(response)
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.mgmt.compute.v2018_06_01.models.DiskList]
  type: method
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.list_by_resource_group
- class: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.models
  langs:
  - python
  module: azure.mgmt.compute.v2018_06_01.aio.operations_async
  name: models
  syntax:
    content: models = <module 'azure.mgmt.compute.v2018_06_01.models' from 'c:\\hostedtoolcache\\windows\\python\\3.6.8\\x64\\lib\\site-packages\\azure\\mgmt\\compute\\v2018_06_01\\models\\__init__.py'>
  type: attribute
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.models
references:
- fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_create_or_update
  isExternal: false
  name: 'begin_create_or_update(resource_group_name: str, disk_name: str, disk: azure.mgmt.compute.v2018_06_01.models._models_py3.Disk,
    **kwargs) -> azure.mgmt.compute.v2018_06_01.models._models_py3.Disk'
  parent: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_create_or_update
- fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_delete
  isExternal: false
  name: 'begin_delete(resource_group_name: str, disk_name: str, **kwargs) -> None'
  parent: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_delete
- fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_grant_access
  isExternal: false
  name: 'begin_grant_access(resource_group_name: str, disk_name: str, grant_access_data:
    azure.mgmt.compute.v2018_06_01.models._models_py3.GrantAccessData, **kwargs) ->
    azure.mgmt.compute.v2018_06_01.models._models_py3.AccessUri'
  parent: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_grant_access
- fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_revoke_access
  isExternal: false
  name: 'begin_revoke_access(resource_group_name: str, disk_name: str, **kwargs) ->
    None'
  parent: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_revoke_access
- fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_update
  isExternal: false
  name: 'begin_update(resource_group_name: str, disk_name: str, disk: azure.mgmt.compute.v2018_06_01.models._models_py3.DiskUpdate,
    **kwargs) -> azure.mgmt.compute.v2018_06_01.models._models_py3.Disk'
  parent: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.begin_update
- fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.get
  isExternal: false
  name: 'get(resource_group_name: str, disk_name: str, **kwargs) -> azure.mgmt.compute.v2018_06_01.models._models_py3.Disk'
  parent: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.get
- fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.list
  isExternal: false
  name: list(**kwargs) -> typing.AsyncIterable[_ForwardRef('models.DiskList')]
  parent: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.list
- fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.list_by_resource_group
  isExternal: false
  name: 'list_by_resource_group(resource_group_name: str, **kwargs) -> typing.AsyncIterable[_ForwardRef(''models.DiskList'')]'
  parent: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.list_by_resource_group
- fullName: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.models
  isExternal: false
  name: models
  parent: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations
  uid: azure.mgmt.compute.v2018_06_01.aio.operations_async.DisksOperations.models
- fullName: azure.core.async_paging.AsyncItemPaged[azure.mgmt.compute.v2018_06_01.models.DiskList]
  name: AsyncItemPaged[DiskList]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.mgmt.compute.v2018_06_01.models.DiskList
    name: DiskList
    uid: azure.mgmt.compute.v2018_06_01.models.DiskList
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.mgmt.compute.v2018_06_01.models.DiskList]
