### YamlMime:PythonClass
uid: azure.agrifood.farming.operations.SolutionInferenceOperations
name: SolutionInferenceOperations
fullName: azure.agrifood.farming.operations.SolutionInferenceOperations
module: azure.agrifood.farming.operations
inheritances:
- builtins.object
summary: "> [!WARNING]\n> DO NOT instantiate this class directly.\n>\n> \n>\n> Instead,\
  \ you should access the following operations through\n>\n> <xref:azure.agrifood.farming.FarmBeatsClient>'s\n\
  >\n> <xref:solution_inference> attribute.\n>"
constructor:
  syntax: SolutionInferenceOperations(*args, **kwargs)
methods:
- uid: azure.agrifood.farming.operations.SolutionInferenceOperations.begin_create_or_update
  name: begin_create_or_update
  summary: Creates a job trigger for a solution.
  signature: 'begin_create_or_update(solution_id: str, solution_inference_request:
    JSON, *, content_type: str = ''application/json'', **kwargs: Any) -> LROPoller[Dict[str,
    Any]]'
  parameters:
  - name: solution_id
    description: Id of the solution resource. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: solution_inference_request
    description: 'solutionInferenceRequest containing input needed for job

      request processing. Is either a model type or a IO type. Required.'
    isRequired: true
    types:
    - <xref:JSON>
    - <xref:typing.IO>
  keywordOnlyParameters:
  - name: content_type
    description: 'Body Parameter content-type. Known values are: ''application/json''.

      Default value is None.'
    types:
    - <xref:str>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  - name: polling
    description: 'By default, your polling method will be LROBasePolling. Pass in
      False for

      this operation to not poll, or pass in your own initialized polling object for
      a personal

      polling strategy.'
    types:
    - <xref:bool>
    - <xref:azure.core.polling.PollingMethod>
  - name: polling_interval
    description: 'Default waiting time between two polls for LRO operations if no

      Retry-After header is present.'
    types:
    - <xref:int>
  return:
    description: An instance of LROPoller that returns dict mapping str to any
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:dict>[<xref:str>, <xref:any>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
    \   # response body for status code(s): 202\n   response == {\n       \"str\"\
    : {}  # Optional.\n   }\n   ````\n"
- uid: azure.agrifood.farming.operations.SolutionInferenceOperations.cancel
  name: cancel
  summary: Cancels a job for given solution id.
  signature: 'cancel(solution_id: str, solution_inference_request: JSON, *, content_type:
    str = ''application/json'', **kwargs: Any) -> Dict[str, Any]'
  parameters:
  - name: solution_id
    description: Id of solution for which job is to be cancelled. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: solution_inference_request
    description: 'solutionInferenceRequest containing input needed for job

      request processing. Is either a model type or a IO type. Required.'
    isRequired: true
    types:
    - <xref:JSON>
    - <xref:typing.IO>
  keywordOnlyParameters:
  - name: content_type
    description: 'Body Parameter content-type. Known values are: ''application/json''.

      Default value is None.'
    types:
    - <xref:str>
  return:
    description: dict mapping str to any
    types:
    - <xref:dict>[<xref:str>, <xref:any>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
    \   # response body for status code(s): 200\n   response == {\n       \"str\"\
    : {}  # Optional.\n   }\n   ````\n"
- uid: azure.agrifood.farming.operations.SolutionInferenceOperations.fetch
  name: fetch
  summary: Fetches details of triggered job for a solution.
  signature: 'fetch(solution_id: str, solution_inference_request: JSON, *, content_type:
    str = ''application/json'', **kwargs: Any) -> Dict[str, Any]'
  parameters:
  - name: solution_id
    description: Id of the solution. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: solution_inference_request
    description: 'solutionInferenceRequest containing input needed for job

      request processing. Is either a model type or a IO type. Required.'
    isRequired: true
    types:
    - <xref:JSON>
    - <xref:typing.IO>
  keywordOnlyParameters:
  - name: content_type
    description: 'Body Parameter content-type. Known values are: ''application/json''.

      Default value is None.'
    types:
    - <xref:str>
  return:
    description: dict mapping str to any
    types:
    - <xref:dict>[<xref:str>, <xref:any>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
    \   # response body for status code(s): 200\n   response == {\n       \"str\"\
    : {}  # Optional.\n   }\n   ````\n"
