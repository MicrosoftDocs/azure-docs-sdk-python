### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.fileshare.ShareLeaseClient.acquire
  - azure.storage.fileshare.ShareLeaseClient.break_lease
  - azure.storage.fileshare.ShareLeaseClient.change
  - azure.storage.fileshare.ShareLeaseClient.release
  class: azure.storage.fileshare.ShareLeaseClient
  fullName: azure.storage.fileshare.ShareLeaseClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.storage.fileshare
  name: ShareLeaseClient
  summary: 'Creates a new ShareLeaseClient.


    This client provides lease operations on a ShareFileClient.'
  syntax:
    content: ShareLeaseClient(client, lease_id=None)
    parameters:
    - description: The client of the file to lease.
      id: client
      type:
      - azure.storage.fileshare.ShareFileClient
    - description: 'A string representing the lease ID of an existing lease. This
        value does not

        need to be specified in order to acquire a new lease, or break one.'
      id: lease_id
      type:
      - str
    variables:
    - description: 'The ID of the lease currently being maintained. This will be *None*
        if no

        lease has yet been acquired.'
      id: id
      type:
      - str
    - description: 'The ETag of the lease currently being maintained. This will be
        *None* if no

        lease has yet been acquired or modified.'
      id: etag
      type:
      - str
    - description: 'The last modified timestamp of the lease currently being maintained.

        This will be *None* if no lease has yet been acquired or modified.'
      id: last_modified
      type:
      - datetime.datetime
  type: class
  uid: azure.storage.fileshare.ShareLeaseClient
- class: azure.storage.fileshare.ShareLeaseClient
  fullName: azure.storage.fileshare.ShareLeaseClient.acquire
  langs:
  - python
  module: azure.storage.fileshare
  name: acquire(**kwargs)
  namewithoutparameters: acquire
  summary: 'Requests a new lease. This operation establishes and manages a lock on
    a

    file for write and delete operations. If the file does not have an active lease,

    the File service creates a lease on the file. If the file has an active lease,

    you can only request a new lease using the active lease ID.


    If the file does not have an active lease, the File service creates a

    lease on the file and returns a new lease ID.'
  syntax:
    content: acquire(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.fileshare.ShareLeaseClient.acquire
- class: azure.storage.fileshare.ShareLeaseClient
  fullName: azure.storage.fileshare.ShareLeaseClient.break_lease
  langs:
  - python
  module: azure.storage.fileshare
  name: break_lease(**kwargs)
  namewithoutparameters: break_lease
  summary: 'Force breaks the lease if the file has an active lease. Any authorized
    request can break the lease;

    the request is not required to specify a matching lease ID. An infinite lease
    breaks immediately.


    Once a lease is broken, it cannot be changed. Any authorized request can break
    the lease;

    the request is not required to specify a matching lease ID.

    When a lease is successfully broken, the response indicates the interval

    in seconds until a new lease can be acquired.'
  syntax:
    content: break_lease(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: Approximate time remaining in the lease period, in seconds.
      type:
      - int
  type: method
  uid: azure.storage.fileshare.ShareLeaseClient.break_lease
- class: azure.storage.fileshare.ShareLeaseClient
  fullName: azure.storage.fileshare.ShareLeaseClient.change
  langs:
  - python
  module: azure.storage.fileshare
  name: change(proposed_lease_id, **kwargs)
  namewithoutparameters: change
  summary: 'Changes the lease ID of an active lease. A change must include the current
    lease ID in x-ms-lease-id and

    a new lease ID in x-ms-proposed-lease-id.'
  syntax:
    content: change(proposed_lease_id, **kwargs)
    parameters:
    - description: 'Proposed lease ID, in a GUID string format. The File service returns
        400

        (Invalid request) if the proposed lease ID is not in the correct format.'
      id: proposed_lease_id
      isRequired: true
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: None
  type: method
  uid: azure.storage.fileshare.ShareLeaseClient.change
- class: azure.storage.fileshare.ShareLeaseClient
  fullName: azure.storage.fileshare.ShareLeaseClient.release
  langs:
  - python
  module: azure.storage.fileshare
  name: release(**kwargs)
  namewithoutparameters: release
  summary: 'Releases the lease. The lease may be released if the lease ID specified
    on the request matches

    that associated with the file. Releasing the lease allows another client to immediately
    acquire the lease

    for the file as soon as the release is complete.


    The lease may be released if the client lease id specified matches

    that associated with the file. Releasing the lease allows another client

    to immediately acquire the lease for the file as soon as the release is complete.'
  syntax:
    content: release(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: None
  type: method
  uid: azure.storage.fileshare.ShareLeaseClient.release
references:
- fullName: azure.storage.fileshare.ShareLeaseClient.acquire
  isExternal: false
  name: acquire(**kwargs)
  parent: azure.storage.fileshare.ShareLeaseClient
  uid: azure.storage.fileshare.ShareLeaseClient.acquire
- fullName: azure.storage.fileshare.ShareLeaseClient.break_lease
  isExternal: false
  name: break_lease(**kwargs)
  parent: azure.storage.fileshare.ShareLeaseClient
  uid: azure.storage.fileshare.ShareLeaseClient.break_lease
- fullName: azure.storage.fileshare.ShareLeaseClient.change
  isExternal: false
  name: change(proposed_lease_id, **kwargs)
  parent: azure.storage.fileshare.ShareLeaseClient
  uid: azure.storage.fileshare.ShareLeaseClient.change
- fullName: azure.storage.fileshare.ShareLeaseClient.release
  isExternal: false
  name: release(**kwargs)
  parent: azure.storage.fileshare.ShareLeaseClient
  uid: azure.storage.fileshare.ShareLeaseClient.release
