### YamlMime:PythonClass
uid: azure.storage.fileshare.aio.ShareClient
name: ShareClient
fullName: azure.storage.fileshare.aio.ShareClient
module: azure.storage.fileshare.aio
inheritances:
- azure.storage.fileshare._shared.base_client_async.AsyncStorageAccountHostsMixin
- azure.storage.fileshare._share_client.ShareClient
summary: 'A client to interact with a specific share, although that share may not
  yet exist.


  For operations relating to a specific directory or file in this share, the clients
  for

  those entities can also be retrieved using the <xref:azure.storage.fileshare.aio.ShareClient.get_directory_client>
  and <xref:azure.storage.fileshare.aio.ShareClient.get_file_client> functions.'
constructor:
  syntax: ShareClient(account_url, share_name, snapshot=None, credential=None, **kwargs)
  parameters:
  - name: account_url
    description: 'The URI to the storage account. In order to create a client given
      the full URI to the share,

      use the <xref:azure.storage.fileshare.aio.from_share_url> classmethod.'
    types:
    - <xref:str>
  - name: share_name
    description: The name of the share with which to interact.
    types:
    - <xref:str>
  - name: snapshot
    description: 'An optional share snapshot on which to operate. This can be the
      snapshot ID string

      or the response returned from <xref:azure.storage.fileshare.aio.ShareClient.create_snapshot>.'
    types:
    - <xref:str>
  - name: credential
    description: 'The credential with which to authenticate. This is optional if the

      account URL already has a SAS token. The value can be a SAS token string,

      an instance of a AzureSasCredential from azure.core.credentials or an account

      shared access key.'
  - name: api_version
    description: 'The Storage API version to use for requests. Default value is ''2019-07-07''.

      Setting to an older version may result in reduced feature compatibility.


      New in version 12.1.0.'
    types:
    - <xref:str>
  - name: secondary_hostname
    description: The hostname of the secondary endpoint.
    types:
    - <xref:str>
  - name: loop
    description: The event loop to run the asynchronous tasks.
  - name: max_range_size
    description: The maximum range size used for a file upload. Defaults to 4*1024*1024.
    types:
    - <xref:int>
methods:
- uid: azure.storage.fileshare.aio.ShareClient.create_directory
  name: create_directory
  summary: 'Creates a directory in the share and returns a client to interact

    with the directory.'
  signature: create_directory(directory_name, **kwargs)
  parameters:
  - name: directory_name
    description: The name of the directory.
    isRequired: true
    types:
    - <xref:str>
  - name: metadata
    description: 'Name-value pairs associated with the directory as metadata.'
    isRequired: true
    types:
    - <xref:dict>(<xref:str,str>)
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: ShareDirectoryClient
    types:
    - <xref:azure.storage.fileshare.aio.ShareDirectoryClient>
- uid: azure.storage.fileshare.aio.ShareClient.create_permission_for_share
  name: create_permission_for_share
  summary: 'Create a permission (a security descriptor) at the share level.


    This ''permission'' can be used for the files/directories in the share.

    If a ''permission'' already exists, it shall return the key of it, else

    creates a new permission at the share level and return its key.'
  signature: create_permission_for_share(file_permission, **kwargs)
  parameters:
  - name: file_permission
    description: File permission, a Portable SDDL
    isRequired: true
    types:
    - <xref:str>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: A file permission key
    types:
    - <xref:str>
- uid: azure.storage.fileshare.aio.ShareClient.create_share
  name: create_share
  summary: 'Creates a new Share under the account. If a share with the

    same name already exists, the operation fails.'
  signature: create_share(**kwargs)
  parameters:
  - name: metadata
    description: 'Name-value pairs associated with the share as metadata.'
    isRequired: true
    types:
    - <xref:dict>(<xref:str,str>)
  - name: quota
    description: The quota to be allotted.
    isRequired: true
    types:
    - <xref:int>
  - name: access_tier
    description: 'Specifies the access tier of the share.

      Possible values: ''TransactionOptimized'', ''Hot'', ''Cool'''
    isRequired: true
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  - name: protocols
    description: Protocols to enable on the share. Only one protocol can be enabled
      on the share.
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.fileshare.ShareProtocols>
  - name: root_squash
    description: 'Root squash to set on the share.

      Only valid for NFS shares. Possible values include: ''NoRootSquash'', ''RootSquash'',
      ''AllSquash''.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.fileshare.ShareRootSquash>
  return:
    description: 'Share-updated property dict (Etag and last modified).'
    types:
    - <xref:dict>(<xref:str>, <xref:Any>)
  examples:
  - "Creates a file share.<!--[!code-python[Main](les\\file_samples_share_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\16\\\\azure-storage-file-share-12.4.0\\\\samples\\\\file_samples_share_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Create share\
    \ with Access Tier set to Hot\n   await share.create_share(access_tier=ShareAccessTier(\"\
    Hot\"))\n\n   ````\n"
- uid: azure.storage.fileshare.aio.ShareClient.create_snapshot
  name: create_snapshot
  summary: 'Creates a snapshot of the share.


    A snapshot is a read-only version of a share that''s taken at a point in time.

    It can be read, copied, or deleted, but not modified. Snapshots provide a way

    to back up a share as it appears at a moment in time.


    A snapshot of a share has the same name as the base share from which the snapshot

    is taken, with a DateTime value appended to indicate the time at which the

    snapshot was taken.'
  signature: create_snapshot(**kwargs)
  parameters:
  - name: metadata
    description: 'Name-value pairs associated with the share as metadata.'
    isRequired: true
    types:
    - <xref:dict>(<xref:str,str>)
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: 'Share-updated property dict (Snapshot ID, Etag, and last modified).'
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  examples:
  - "Creates a snapshot of the file share.<!--[!code-python[Main](les\\file_samples_share_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\16\\\\azure-storage-file-share-12.4.0\\\\samples\\\\file_samples_share_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await share.create_snapshot()\n\
    \n   ````\n"
- uid: azure.storage.fileshare.aio.ShareClient.delete_directory
  name: delete_directory
  summary: 'Marks the directory for deletion. The directory is

    later deleted during garbage collection.'
  signature: delete_directory(directory_name, **kwargs)
  parameters:
  - name: directory_name
    description: The name of the directory.
    isRequired: true
    types:
    - <xref:str>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    types:
    - <xref:None>
- uid: azure.storage.fileshare.aio.ShareClient.delete_share
  name: delete_share
  summary: 'Marks the specified share for deletion. The share is

    later deleted during garbage collection.'
  signature: delete_share(delete_snapshots=False, **kwargs)
  parameters:
  - name: delete_snapshots
    description: Indicates if snapshots are to be deleted.
    isRequired: true
    types:
    - <xref:bool>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  examples:
  - "Deletes the share and any snapshots.<!--[!code-python[Main](les\\file_samples_share_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\16\\\\azure-storage-file-share-12.4.0\\\\samples\\\\file_samples_share_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await share.delete_share(delete_snapshots=True)\n\
    \n   ````\n"
- uid: azure.storage.fileshare.aio.ShareClient.get_directory_client
  name: get_directory_client
  summary: 'Get a client to interact with the specified directory.

    The directory need not already exist.'
  signature: get_directory_client(directory_path=None)
  parameters:
  - name: directory_path
    description: Path to the specified directory.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: A Directory Client.
    types:
    - <xref:azure.storage.fileshare.aio.ShareDirectoryClient>
- uid: azure.storage.fileshare.aio.ShareClient.get_file_client
  name: get_file_client
  summary: 'Get a client to interact with the specified file.

    The file need not already exist.'
  signature: get_file_client(file_path)
  parameters:
  - name: file_path
    description: Path to the specified file.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A File Client.
    types:
    - <xref:azure.storage.fileshare.aio.ShareFileClient>
- uid: azure.storage.fileshare.aio.ShareClient.get_permission_for_share
  name: get_permission_for_share
  summary: 'Get a permission (a security descriptor) for a given key.


    This ''permission'' can be used for the files/directories in the share.'
  signature: get_permission_for_share(permission_key, **kwargs)
  parameters:
  - name: permission_key
    description: Key of the file permission to retrieve
    isRequired: true
    types:
    - <xref:str>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: A file permission (a portable SDDL)
    types:
    - <xref:str>
- uid: azure.storage.fileshare.aio.ShareClient.get_share_access_policy
  name: get_share_access_policy
  summary: 'Gets the permissions for the share. The permissions

    indicate whether files in a share may be accessed publicly.'
  signature: get_share_access_policy(**kwargs)
  parameters:
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: Access policy information in a dict.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
- uid: azure.storage.fileshare.aio.ShareClient.get_share_properties
  name: get_share_properties
  summary: 'Returns all user-defined metadata and system properties for the

    specified share. The data returned does not include the shares''s

    list of files or directories.'
  signature: get_share_properties(**kwargs)
  parameters:
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: The share properties.
    types:
    - <xref:azure.storage.fileshare.ShareProperties>
  examples:
  - "Gets the share properties.<!--[!code-python[Main](les\\file_samples_hello_world_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\16\\\\azure-storage-file-share-12.4.0\\\\samples\\\\file_samples_hello_world_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   properties = await\
    \ share.get_share_properties()\n\n   ````\n"
- uid: azure.storage.fileshare.aio.ShareClient.get_share_stats
  name: get_share_stats
  summary: 'Gets the approximate size of the data stored on the share in bytes.


    Note that this value may not include all recently created

    or recently re-sized files.'
  signature: get_share_stats(**kwargs)
  parameters:
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: The approximate size of the data (in bytes) stored on the share.
    types:
    - <xref:int>
- uid: azure.storage.fileshare.aio.ShareClient.list_directories_and_files
  name: list_directories_and_files
  summary: Lists the directories and files under the share.
  signature: list_directories_and_files(directory_name=None, name_starts_with=None,
    marker=None, **kwargs)
  parameters:
  - name: directory_name
    description: Name of a directory.
    isRequired: true
    types:
    - <xref:str>
  - name: name_starts_with
    description: 'Filters the results to return only directories whose names

      begin with the specified prefix.'
    isRequired: true
    types:
    - <xref:str>
  - name: marker
    description: 'An opaque continuation token. This value can be retrieved from the

      next_marker field of a previous generator object. If specified,

      this generator will begin returning results from this point.'
    isRequired: true
    types:
    - <xref:str>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: An auto-paging iterable of dict-like DirectoryProperties and FileProperties
  examples:
  - "List directories and files in the share.<!--[!code-python[Main](les\\file_samples_share_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\16\\\\azure-storage-file-share-12.4.0\\\\samples\\\\file_samples_share_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Create a directory\
    \ in the share\n   dir_client = await share.create_directory(\"mydir\")\n\n  \
    \ # Upload a file to the directory\n   with open(SOURCE_FILE, \"rb\") as source_file:\n\
    \       await dir_client.upload_file(file_name=\"sample\", data=source_file)\n\
    \n   # List files in the directory\n   my_files = []\n   async for item in share.list_directories_and_files(directory_name=\"\
    mydir\"):\n       my_files.append(item)\n   print(my_files)\n\n   ````\n"
- uid: azure.storage.fileshare.aio.ShareClient.set_share_access_policy
  name: set_share_access_policy
  summary: 'Sets the permissions for the share, or stored access

    policies that may be used with Shared Access Signatures. The permissions

    indicate whether files in a share may be accessed publicly.'
  signature: set_share_access_policy(signed_identifiers, **kwargs)
  parameters:
  - name: signed_identifiers
    description: 'A dictionary of access policies to associate with the share. The

      dictionary may contain up to 5 elements. An empty dictionary

      will clear the access policies set on the service.'
    isRequired: true
    types:
    - <xref:dict>(<xref:str>, <xref:azure.storage.fileshare.AccessPolicy>)
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: 'Share-updated property dict (Etag and last modified).'
    types:
    - <xref:dict>(<xref:str>, <xref:Any>)
- uid: azure.storage.fileshare.aio.ShareClient.set_share_metadata
  name: set_share_metadata
  summary: 'Sets the metadata for the share.


    Each call to this operation replaces all existing metadata

    attached to the share. To remove all metadata from the share,

    call this operation with no metadata dict.'
  signature: set_share_metadata(metadata, **kwargs)
  parameters:
  - name: metadata
    description: 'Name-value pairs associated with the share as metadata.'
    isRequired: true
    types:
    - <xref:dict>(<xref:str>, <xref:str>)
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: 'Share-updated property dict (Etag and last modified).'
    types:
    - <xref:dict>(<xref:str>, <xref:Any>)
  examples:
  - "Sets the share metadata.<!--[!code-python[Main](les\\file_samples_share_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\16\\\\azure-storage-file-share-12.4.0\\\\samples\\\\file_samples_share_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   data = {'category':\
    \ 'test'}\n   await share.set_share_metadata(metadata=data)\n\n   ````\n"
- uid: azure.storage.fileshare.aio.ShareClient.set_share_properties
  name: set_share_properties
  summary: 'Sets the share properties.


    New in version 12.6.0.'
  signature: set_share_properties(**kwargs)
  parameters:
  - name: access_tier
    description: 'Specifies the access tier of the share.

      Possible values: ''TransactionOptimized'', ''Hot'', and ''Cool'''
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.fileshare.models.ShareAccessTier>
  - name: quota
    description: 'Specifies the maximum size of the share, in gigabytes.

      Must be greater than 0, and less than or equal to 5TB.'
    isRequired: true
    types:
    - <xref:int>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  - name: root_squash
    description: 'Root squash to set on the share.

      Only valid for NFS shares. Possible values include: ''NoRootSquash'', ''RootSquash'',
      ''AllSquash'''
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.fileshare.ShareRootSquash>
  return:
    description: 'Share-updated property dict (Etag and last modified).'
    types:
    - <xref:dict>(<xref:str>, <xref:Any>)
  examples:
  - "Sets the share properties.<!--[!code-python[Main](les\\file_samples_share_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\16\\\\azure-storage-file-share-12.4.0\\\\samples\\\\file_samples_share_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Set the tier\
    \ for the first share to Hot\n   await share1.set_share_properties(access_tier=\"\
    Hot\")\n   # Set the quota for the first share to 3\n   await share1.set_share_properties(quota=3)\n\
    \   # Set the tier for the second share to Cool and quota to 2\n   await share2.set_share_properties(access_tier=ShareAccessTier(\"\
    Cool\"), quota=2)\n\n   # Get the shares' properties\n   props1 = await share1.get_share_properties()\n\
    \   props2 = await share2.get_share_properties()\n   print(props1.access_tier)\n\
    \   print(props1.quota)\n   print(props2.access_tier)\n   print(props2.quota)\n\
    \n   ````\n"
- uid: azure.storage.fileshare.aio.ShareClient.set_share_quota
  name: set_share_quota
  summary: Sets the quota for the share.
  signature: set_share_quota(quota, **kwargs)
  parameters:
  - name: quota
    description: 'Specifies the maximum size of the share, in gigabytes.

      Must be greater than 0, and less than or equal to 5TB.'
    isRequired: true
    types:
    - <xref:int>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: 'Share-updated property dict (Etag and last modified).'
    types:
    - <xref:dict>(<xref:str>, <xref:Any>)
  examples:
  - "Sets the share quota.<!--[!code-python[Main](les\\file_samples_share_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\16\\\\azure-storage-file-share-12.4.0\\\\samples\\\\file_samples_share_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Set the quota\
    \ for the share to 1GB\n   await share.set_share_quota(quota=1)\n\n   ````\n"
