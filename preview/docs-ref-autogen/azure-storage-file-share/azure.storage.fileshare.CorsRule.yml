### YamlMime:PythonClass
uid: azure.storage.fileshare.CorsRule
name: CorsRule
fullName: azure.storage.fileshare.CorsRule
module: azure.storage.fileshare
inheritances:
- azure.storage.fileshare._generated.models._models_py3.CorsRule
summary: 'CORS is an HTTP feature that enables a web application running under one

  domain to access resources in another domain. Web browsers implement a

  security restriction known as same-origin policy that prevents a web page

  from calling APIs in a different domain; CORS provides a secure way to

  allow one domain (the origin domain) to call APIs in another domain.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: CorsRule(allowed_origins, allowed_methods, **kwargs)
  parameters:
  - name: allowed_origins
    description: 'A list of origin domains that will be allowed via CORS, or "*" to
      allow

      all domains. The list of must contain at least one entry. Limited to 64

      origin domains. Each allowed origin can have up to 256 characters.'
    isRequired: true
    types:
    - <xref:list>(<xref:str>)
  - name: allowed_methods
    description: 'A list of HTTP methods that are allowed to be executed by the origin.

      The list of must contain at least one entry. For Azure Storage,

      permitted methods are DELETE, GET, HEAD, MERGE, POST, OPTIONS or PUT.'
    isRequired: true
    types:
    - <xref:list>(<xref:str>)
  keywordOnlyParameters:
  - name: allowed_headers
    description: 'Defaults to an empty list. A list of headers allowed to be part
      of

      the cross-origin request. Limited to 64 defined headers and 2 prefixed

      headers. Each header can be up to 256 characters.'
    types:
    - <xref:list>(<xref:str>)
  - name: exposed_headers
    description: 'Defaults to an empty list. A list of response headers to expose
      to CORS

      clients. Limited to 64 defined headers and two prefixed headers. Each

      header can be up to 256 characters.'
    types:
    - <xref:list>(<xref:str>)
  - name: max_age_in_seconds
    description: 'The number of seconds that the client/browser should cache a

      preflight response.'
    types:
    - <xref:int>
methods:
- uid: azure.storage.fileshare.CorsRule.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.storage.fileshare.CorsRule.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.storage.fileshare.CorsRule.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.storage.fileshare.CorsRule.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.storage.fileshare.CorsRule.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.storage.fileshare.CorsRule.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to server from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
