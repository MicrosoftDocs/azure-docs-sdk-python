### YamlMime:PythonClass
uid: azure.cognitiveservices.search.visualsearch.models.image_info_py3.ImageInfo
name: ImageInfo
fullName: azure.cognitiveservices.search.visualsearch.models.image_info_py3.ImageInfo
module: azure.cognitiveservices.search.visualsearch.models.image_info_py3
inheritances:
- msrest.serialization.Model
summary: 'A JSON object that identities the image to get insights of . It also

  includes the optional crop area that you use to identify the region of

  interest in the image.'
constructor:
  syntax: 'ImageInfo(*, image_insights_token: str = None, url: str = None, crop_area=None,
    **kwargs)'
  parameters:
  - name: image_insights_token
    description: 'An image insights token. To get the insights

      token, call one of the Image Search APIs (for example, /images/search). In

      the search results, the

      [Image](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image)

      object''s

      [imageInsightsToken](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image-imageinsightstoken)

      field contains the token. The imageInsightsToken and url fields mutually

      exclusive; do not specify both. Do not specify an insights token if the

      request includes the image form data.'
    isRequired: true
    types:
    - <xref:str>
  - name: url
    description: 'The URL of the input image. The imageInsightsToken and url

      fields are mutually exclusive; do not specify both. Do not specify the URL

      if the request includes the image form data.'
    isRequired: true
    types:
    - <xref:str>
  - name: crop_area
    description: 'A JSON object consisting of coordinates specifying the

      four corners of a cropped rectangle within the input image. Use the crop

      area to identify the region of interest in the image. You can apply the

      crop area to the images specified using the imageInsightsToken or url

      fields, or an image binary specified in an image form data.'
    isRequired: true
    types:
    - <xref:azure.cognitiveservices.search.visualsearch.models.CropArea>
  keywordOnlyParameters:
  - name: image_insights_token
    isRequired: true
  - name: url
    isRequired: true
  - name: crop_area
    isRequired: true
methods:
- uid: azure.cognitiveservices.search.visualsearch.models.image_info_py3.ImageInfo.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.cognitiveservices.search.visualsearch.models.image_info_py3.ImageInfo.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.cognitiveservices.search.visualsearch.models.image_info_py3.ImageInfo.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.cognitiveservices.search.visualsearch.models.image_info_py3.ImageInfo.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.cognitiveservices.search.visualsearch.models.image_info_py3.ImageInfo.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.cognitiveservices.search.visualsearch.models.image_info_py3.ImageInfo.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.cognitiveservices.search.visualsearch.models.image_info_py3.ImageInfo.validate
  name: validate
  summary: Validate this model recursively and return a list of ValidationError.
  signature: validate()
  return:
    description: A list of validation error
    types:
    - <xref:list>
