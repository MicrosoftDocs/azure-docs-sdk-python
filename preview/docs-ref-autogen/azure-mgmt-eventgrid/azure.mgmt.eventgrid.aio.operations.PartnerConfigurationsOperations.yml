### YamlMime:PythonClass
uid: azure.mgmt.eventgrid.aio.operations.PartnerConfigurationsOperations
name: PartnerConfigurationsOperations
fullName: azure.mgmt.eventgrid.aio.operations.PartnerConfigurationsOperations
module: azure.mgmt.eventgrid.aio.operations
inheritances:
- builtins.object
summary: "> [!WARNING]\n> DO NOT instantiate this class directly.\n>\n> \n>\n> Instead,\
  \ you should access the following operations through\n>\n> <xref:azure.mgmt.eventgrid.aio.EventGridManagementClient>'s\n\
  >\n> <xref:partner_configurations> attribute.\n>"
constructor:
  syntax: PartnerConfigurationsOperations(*args, **kwargs)
methods:
- uid: azure.mgmt.eventgrid.aio.operations.PartnerConfigurationsOperations.authorize_partner
  name: authorize_partner
  summary: 'Authorize a partner.


    Authorize a single partner either by partner registration immutable Id or by partner
    name.'
  signature: 'async authorize_partner(resource_group_name: str, partner_info: _models.Partner,
    *, content_type: str = ''application/json'', **kwargs: Any) -> _models.PartnerConfiguration'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: partner_info
    description: 'The information of the partner to be authorized. Is either a Partner
      type

      or a IO[bytes] type. Required.'
    isRequired: true
    types:
    - <xref:azure.mgmt.eventgrid.models.Partner>
    - <xref:typing.IO>[<xref:bytes>]
  return:
    description: PartnerConfiguration or the result of cls(response)
    types:
    - <xref:azure.mgmt.eventgrid.models.PartnerConfiguration>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.aio.operations.PartnerConfigurationsOperations.begin_create_or_update
  name: begin_create_or_update
  summary: 'Create or update a partner configuration.


    Synchronously creates or updates a partner configuration with the specified parameters.'
  signature: 'async begin_create_or_update(resource_group_name: str, partner_configuration_info:
    _models.PartnerConfiguration, *, content_type: str = ''application/json'', **kwargs:
    Any) -> AsyncLROPoller[_models.PartnerConfiguration]'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: partner_configuration_info
    description: 'Partner configuration information. Is either a

      PartnerConfiguration type or a IO[bytes] type. Required.'
    isRequired: true
    types:
    - <xref:azure.mgmt.eventgrid.models.PartnerConfiguration>
    - <xref:typing.IO>[<xref:bytes>]
  return:
    description: 'An instance of AsyncLROPoller that returns either PartnerConfiguration
      or the result

      of cls(response)'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:azure.mgmt.eventgrid.models.PartnerConfiguration>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.aio.operations.PartnerConfigurationsOperations.begin_delete
  name: begin_delete
  summary: 'Delete a partner configuration.


    Delete existing partner configuration.'
  signature: 'async begin_delete(resource_group_name: str, **kwargs: Any) -> AsyncLROPoller[None]'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An instance of AsyncLROPoller that returns either None or the result
      of cls(response)
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:None>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.aio.operations.PartnerConfigurationsOperations.begin_update
  name: begin_update
  summary: 'Update a partner configuration.


    Synchronously updates a partner configuration with the specified parameters.'
  signature: 'async begin_update(resource_group_name: str, partner_configuration_update_parameters:
    _models.PartnerConfigurationUpdateParameters, *, content_type: str = ''application/json'',
    **kwargs: Any) -> AsyncLROPoller[_models.PartnerConfiguration]'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: partner_configuration_update_parameters
    description: 'Partner configuration update information. Is

      either a PartnerConfigurationUpdateParameters type or a IO[bytes] type. Required.'
    isRequired: true
    types:
    - <xref:azure.mgmt.eventgrid.models.PartnerConfigurationUpdateParameters>
    - <xref:typing.IO>[<xref:bytes>]
  return:
    description: 'An instance of AsyncLROPoller that returns either PartnerConfiguration
      or the result

      of cls(response)'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:azure.mgmt.eventgrid.models.PartnerConfiguration>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.aio.operations.PartnerConfigurationsOperations.get
  name: get
  summary: 'Get a partner configuration.


    Get properties of a partner configuration.'
  signature: 'async get(resource_group_name: str, **kwargs: Any) -> PartnerConfiguration'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: PartnerConfiguration or the result of cls(response)
    types:
    - <xref:azure.mgmt.eventgrid.models.PartnerConfiguration>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.aio.operations.PartnerConfigurationsOperations.list_by_resource_group
  name: list_by_resource_group
  summary: 'List partner configurations under a resource group.


    List all the partner configurations under a resource group.'
  signature: 'list_by_resource_group(resource_group_name: str, **kwargs: Any) -> AsyncIterable[PartnerConfiguration]'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'An iterator like instance of either PartnerConfiguration or the
      result of

      cls(response)'
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.mgmt.eventgrid.models.PartnerConfiguration>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.aio.operations.PartnerConfigurationsOperations.list_by_subscription
  name: list_by_subscription
  summary: 'List partner configurations under an Azure subscription.


    List all the partner configurations under an Azure subscription.'
  signature: 'list_by_subscription(filter: str | None = None, top: int | None = None,
    **kwargs: Any) -> AsyncIterable[PartnerConfiguration]'
  parameters:
  - name: filter
    description: 'The query used to filter the search results using OData syntax.
      Filtering is

      permitted on the ''name'' property only and with limited number of OData operations.
      These

      operations are: the ''contains'' function as well as the following logical operations:
      not, and,

      or, eq (for equal), and ne (for not equal). No arithmetic operations are supported.
      The

      following is a valid filter example: $filter=contains(namE, ''PATTERN'') and
      name ne ''PATTERN-1''.

      The following is not a valid filter example: $filter=location eq ''westus''.
      Default value is

      None.'
    isRequired: true
    types:
    - <xref:str>
  - name: top
    description: 'The number of results to return per page for the list operation.
      Valid range for

      top parameter is 1 to 100. If not specified, the default number of results to
      be returned is 20

      items per page. Default value is None.'
    isRequired: true
    types:
    - <xref:int>
  return:
    description: 'An iterator like instance of either PartnerConfiguration or the
      result of

      cls(response)'
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.mgmt.eventgrid.models.PartnerConfiguration>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.aio.operations.PartnerConfigurationsOperations.unauthorize_partner
  name: unauthorize_partner
  summary: 'Unauthorize a partner.


    Unauthorize a single partner either by partner registration immutable Id or by
    partner name.'
  signature: 'async unauthorize_partner(resource_group_name: str, partner_info: _models.Partner,
    *, content_type: str = ''application/json'', **kwargs: Any) -> _models.PartnerConfiguration'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: partner_info
    description: 'The information of the partner to be unauthorized. Is either a Partner

      type or a IO[bytes] type. Required.'
    isRequired: true
    types:
    - <xref:azure.mgmt.eventgrid.models.Partner>
    - <xref:typing.IO>[<xref:bytes>]
  return:
    description: PartnerConfiguration or the result of cls(response)
    types:
    - <xref:azure.mgmt.eventgrid.models.PartnerConfiguration>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
attributes:
- uid: azure.mgmt.eventgrid.aio.operations.PartnerConfigurationsOperations.models
  name: models
  signature: models = <module 'azure.mgmt.eventgrid.models' from 'C:\\hostedtoolcache\\windows\\Python\\3.11.9\\x64\\Lib\\site-packages\\azure\\mgmt\\eventgrid\\models\\__init__.py'>
