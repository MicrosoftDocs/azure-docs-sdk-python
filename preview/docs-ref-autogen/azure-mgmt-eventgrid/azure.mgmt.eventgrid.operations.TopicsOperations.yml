### YamlMime:PythonClass
uid: azure.mgmt.eventgrid.operations.TopicsOperations
name: TopicsOperations
fullName: azure.mgmt.eventgrid.operations.TopicsOperations
module: azure.mgmt.eventgrid.operations
inheritances:
- builtins.object
summary: "> [!WARNING]\n> DO NOT instantiate this class directly.\n>\n> \n>\n> Instead,\
  \ you should access the following operations through\n>\n> <xref:azure.mgmt.eventgrid.EventGridManagementClient>'s\n\
  >\n> <xref:topics> attribute.\n>"
constructor:
  syntax: TopicsOperations(*args, **kwargs)
methods:
- uid: azure.mgmt.eventgrid.operations.TopicsOperations.begin_create_or_update
  name: begin_create_or_update
  summary: 'Create a topic.


    Asynchronously creates a new topic with the specified parameters.'
  signature: 'begin_create_or_update(resource_group_name: str, topic_name: str, topic_info:
    _models.Topic, *, content_type: str = ''application/json'', **kwargs: Any) ->
    LROPoller[_models.Topic]'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: topic_name
    description: Name of the topic. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: topic_info
    description: Topic information. Is either a Topic type or a IO[bytes] type. Required.
    isRequired: true
    types:
    - <xref:azure.mgmt.eventgrid.models.Topic>
    - <xref:typing.IO>[<xref:bytes>]
  return:
    description: An instance of LROPoller that returns either Topic or the result
      of cls(response)
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.mgmt.eventgrid.models.Topic>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.operations.TopicsOperations.begin_delete
  name: begin_delete
  summary: 'Delete a topic.


    Delete existing topic.'
  signature: 'begin_delete(resource_group_name: str, topic_name: str, **kwargs: Any)
    -> LROPoller[None]'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: topic_name
    description: Name of the topic. Required.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An instance of LROPoller that returns either None or the result of
      cls(response)
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:None>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.operations.TopicsOperations.begin_regenerate_key
  name: begin_regenerate_key
  summary: 'Regenerate key for a topic.


    Regenerate a shared access key for a topic.'
  signature: 'begin_regenerate_key(resource_group_name: str, topic_name: str, regenerate_key_request:
    _models.TopicRegenerateKeyRequest, *, content_type: str = ''application/json'',
    **kwargs: Any) -> LROPoller[_models.TopicSharedAccessKeys]'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: topic_name
    description: Name of the topic. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: regenerate_key_request
    description: 'Request body to regenerate key. Is either a

      TopicRegenerateKeyRequest type or a IO[bytes] type. Required.'
    isRequired: true
    types:
    - <xref:azure.mgmt.eventgrid.models.TopicRegenerateKeyRequest>
    - <xref:typing.IO>[<xref:bytes>]
  return:
    description: 'An instance of LROPoller that returns either TopicSharedAccessKeys
      or the result of

      cls(response)'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.mgmt.eventgrid.models.TopicSharedAccessKeys>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.operations.TopicsOperations.begin_update
  name: begin_update
  summary: 'Update a topic.


    Asynchronously updates a topic with the specified parameters.'
  signature: 'begin_update(resource_group_name: str, topic_name: str, topic_update_parameters:
    _models.TopicUpdateParameters, *, content_type: str = ''application/json'', **kwargs:
    Any) -> LROPoller[_models.Topic]'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: topic_name
    description: Name of the topic. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: topic_update_parameters
    description: 'Topic update information. Is either a TopicUpdateParameters

      type or a IO[bytes] type. Required.'
    isRequired: true
    types:
    - <xref:azure.mgmt.eventgrid.models.TopicUpdateParameters>
    - <xref:typing.IO>[<xref:bytes>]
  return:
    description: An instance of LROPoller that returns either Topic or the result
      of cls(response)
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.mgmt.eventgrid.models.Topic>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.operations.TopicsOperations.get
  name: get
  summary: 'Get a topic.


    Get properties of a topic.'
  signature: 'get(resource_group_name: str, topic_name: str, **kwargs: Any) -> Topic'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: topic_name
    description: Name of the topic. Required.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Topic or the result of cls(response)
    types:
    - <xref:azure.mgmt.eventgrid.models.Topic>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.operations.TopicsOperations.list_by_resource_group
  name: list_by_resource_group
  summary: 'List topics under a resource group.


    List all the topics under a resource group.'
  signature: 'list_by_resource_group(resource_group_name: str, filter: str | None
    = None, top: int | None = None, **kwargs: Any) -> Iterable[Topic]'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: filter
    description: 'The query used to filter the search results using OData syntax.
      Filtering is

      permitted on the ''name'' property only and with limited number of OData operations.
      These

      operations are: the ''contains'' function as well as the following logical operations:
      not, and,

      or, eq (for equal), and ne (for not equal). No arithmetic operations are supported.
      The

      following is a valid filter example: $filter=contains(namE, ''PATTERN'') and
      name ne ''PATTERN-1''.

      The following is not a valid filter example: $filter=location eq ''westus''.
      Default value is

      None.'
    isRequired: true
    types:
    - <xref:str>
  - name: top
    description: 'The number of results to return per page for the list operation.
      Valid range for

      top parameter is 1 to 100. If not specified, the default number of results to
      be returned is 20

      items per page. Default value is None.'
    isRequired: true
    types:
    - <xref:int>
  return:
    description: An iterator like instance of either Topic or the result of cls(response)
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.mgmt.eventgrid.models.Topic>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.operations.TopicsOperations.list_by_subscription
  name: list_by_subscription
  summary: 'List topics under an Azure subscription.


    List all the topics under an Azure subscription.'
  signature: 'list_by_subscription(filter: str | None = None, top: int | None = None,
    **kwargs: Any) -> Iterable[Topic]'
  parameters:
  - name: filter
    description: 'The query used to filter the search results using OData syntax.
      Filtering is

      permitted on the ''name'' property only and with limited number of OData operations.
      These

      operations are: the ''contains'' function as well as the following logical operations:
      not, and,

      or, eq (for equal), and ne (for not equal). No arithmetic operations are supported.
      The

      following is a valid filter example: $filter=contains(namE, ''PATTERN'') and
      name ne ''PATTERN-1''.

      The following is not a valid filter example: $filter=location eq ''westus''.
      Default value is

      None.'
    isRequired: true
    types:
    - <xref:str>
  - name: top
    description: 'The number of results to return per page for the list operation.
      Valid range for

      top parameter is 1 to 100. If not specified, the default number of results to
      be returned is 20

      items per page. Default value is None.'
    isRequired: true
    types:
    - <xref:int>
  return:
    description: An iterator like instance of either Topic or the result of cls(response)
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.mgmt.eventgrid.models.Topic>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.operations.TopicsOperations.list_event_types
  name: list_event_types
  summary: 'List topic event types.


    List event types for a topic.'
  signature: 'list_event_types(resource_group_name: str, provider_namespace: str,
    resource_type_name: str, resource_name: str, **kwargs: Any) -> Iterable[EventType]'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: provider_namespace
    description: Namespace of the provider of the topic. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: resource_type_name
    description: Name of the topic type. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: resource_name
    description: Name of the topic. Required.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterator like instance of either EventType or the result of cls(response)
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.mgmt.eventgrid.models.EventType>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.eventgrid.operations.TopicsOperations.list_shared_access_keys
  name: list_shared_access_keys
  summary: 'List keys for a topic.


    List the two keys used to publish to a topic.'
  signature: 'list_shared_access_keys(resource_group_name: str, topic_name: str, **kwargs:
    Any) -> TopicSharedAccessKeys'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group within the user''s subscription.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: topic_name
    description: Name of the topic. Required.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: TopicSharedAccessKeys or the result of cls(response)
    types:
    - <xref:azure.mgmt.eventgrid.models.TopicSharedAccessKeys>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
attributes:
- uid: azure.mgmt.eventgrid.operations.TopicsOperations.models
  name: models
  signature: models = <module 'azure.mgmt.eventgrid.models' from 'C:\\hostedtoolcache\\windows\\Python\\3.11.9\\x64\\Lib\\site-packages\\azure\\mgmt\\eventgrid\\models\\__init__.py'>
