### YamlMime:PythonClass
uid: azure.eventgrid.EventGridPublisherClient
name: EventGridPublisherClient
fullName: azure.eventgrid.EventGridPublisherClient
module: azure.eventgrid
inheritances:
- builtins.object
summary: 'EventGridPublisherClient publishes events to an EventGrid topic or domain.

  It can be used to publish either an EventGridEvent, a CloudEvent or a Custom Schema.'
constructor:
  syntax: 'EventGridPublisherClient(endpoint: str, credential: AzureKeyCredential
    | AzureSasCredential | TokenCredential, **kwargs: Any)'
  parameters:
  - name: endpoint
    description: The topic endpoint to send the events to.
    isRequired: true
    types:
    - <xref:azure.eventgrid.str>
  - name: credential
    description: 'The credential object used for authentication which

      implements SAS key authentication or SAS token authentication or a TokenCredential.'
    isRequired: true
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
    - <xref:azure.core.credentials.AzureSasCredential>
    - <xref:azure.core.credentials.TokenCredential>
examples:
- "Creating the EventGridPublisherClient with an endpoint and AzureKeyCredential.<!--[!code-python[Main](les\\\
  sync_samples\\sample_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [],\
  \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\125\\\\azure-eventgrid-4.9.0b1\\\\\
  samples\\\\sync_samples\\\\sample_authentication.py\", \"xml:space\": \"preserve\"\
  , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n   import os\n   from azure.eventgrid\
  \ import EventGridPublisherClient\n   from azure.core.credentials import AzureKeyCredential\n\
  \n   topic_key = os.environ[\"EVENTGRID_TOPIC_KEY\"]\n   endpoint = os.environ[\"\
  EVENTGRID_TOPIC_ENDPOINT\"]\n\n   credential = AzureKeyCredential(topic_key)\n \
  \  client = EventGridPublisherClient(endpoint, credential)\n\n   ````\n\nCreating\
  \ the EventGridPublisherClient with an endpoint and AzureSasCredential.<!--[!code-python[Main](les\\\
  sync_samples\\sample_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [],\
  \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\125\\\\azure-eventgrid-4.9.0b1\\\\\
  samples\\\\sync_samples\\\\sample_authentication.py\", \"xml:space\": \"preserve\"\
  , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n   import os\n   from azure.eventgrid\
  \ import EventGridPublisherClient\n   from azure.core.credentials import AzureSasCredential\n\
  \n   signature = os.environ[\"EVENTGRID_SAS\"]\n   endpoint = os.environ[\"EVENTGRID_TOPIC_ENDPOINT\"\
  ]\n\n   credential = AzureSasCredential(signature)\n   client = EventGridPublisherClient(endpoint,\
  \ credential)\n\n   ````\n"
methods:
- uid: azure.eventgrid.EventGridPublisherClient.close
  name: close
  summary: Close the <xref:azure.eventgrid.EventGridPublisherClient> session.
  signature: close() -> None
- uid: azure.eventgrid.EventGridPublisherClient.send
  name: send
  summary: 'Sends events to a topic or a domain specified during the client initialization.


    A single instance or a list of dictionaries, CloudEvents or EventGridEvents are
    accepted.


    Dict representation of respective serialized models is accepted as CloudEvent(s)
    or

    EventGridEvent(s) apart from the strongly typed objects.


    When publishing a Custom Schema Event(s), dict-like representation is accepted.

    Either a single dictionary or a list of dictionaries can be passed.


    **WARNING**: When sending a list of multiple events at one time, iterating over
    and sending each event

    will not result in optimal performance. For best performance, it is highly recommended
    to send

    a list of events.'
  signature: 'send(events: CloudEvent | EventGridEvent | Dict | List[CloudEvent] |
    List[EventGridEvent] | List[Dict], *, channel_name: str | None = None, **kwargs:
    Any) -> None'
  parameters:
  - name: events
    description: A single instance or a list of dictionaries/CloudEvent/EventGridEvent
      to be sent.
    isRequired: true
    types:
    - <xref:azure.core.messaging.CloudEvent>
    - <xref:azure.eventgrid.EventGridEvent>
    - <xref:azure.eventgrid.dict>
    - <xref:azure.eventgrid.List>[<xref:azure.core.messaging.CloudEvent>]
    - <xref:azure.eventgrid.List>[<xref:azure.eventgrid.EventGridEvent>]
    - <xref:azure.eventgrid.List>[<xref:azure.eventgrid.dict>]
  - name: content_type
    description: 'The type of content to be used to send the events.

      Has default value "application/json; charset=utf-8" for EventGridEvents,

      with "cloudevents-batch+json" for CloudEvents'
    types:
    - <xref:str>
  - name: channel_name
    description: 'Optional. Used to specify the name of event channel when publishing
      to partner.

      namespaces with partner topic. For more details, visit

      [https://docs.microsoft.com/azure/event-grid/partner-events-overview](https://docs.microsoft.com/azure/event-grid/partner-events-overview)'
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.eventgrid.None>
  examples:
  - "Publishing a Custom Schema event.<!--[!code-python[Main](les\\sync_samples\\\
    sample_publish_custom_schema_to_a_topic.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\125\\\\azure-eventgrid-4.9.0b1\\\
    \\samples\\\\sync_samples\\\\sample_publish_custom_schema_to_a_topic.py\", \"\
    xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   custom_schema_event\
    \ = {\n       \"customSubject\": \"sample\",\n       \"customEventType\": \"sample.event\"\
    ,\n       \"customDataVersion\": \"2.0\",\n       \"customId\": uuid.uuid4(),\n\
    \       \"customEventTime\": dt.datetime.now(UTC()).isoformat(),\n       \"customData\"\
    : \"sample data\"\n   }\n\n   client.send(custom_schema_event)\n\n   ````\n"
