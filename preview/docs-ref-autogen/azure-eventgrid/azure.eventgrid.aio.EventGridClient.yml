### YamlMime:PythonClass
uid: azure.eventgrid.aio.EventGridClient
name: EventGridClient
fullName: azure.eventgrid.aio.EventGridClient
module: azure.eventgrid.aio
inheritances:
- azure.eventgrid.aio._client.EventGridClient
summary: Azure Messaging EventGrid Client.
constructor:
  syntax: 'EventGridClient(endpoint: str, credential: AzureKeyCredential | AzureSasCredential
    | AsyncTokenCredential, *, api_version: str | None = None, level: str | ClientLevel
    = ''Standard'', **kwargs: Any)'
  parameters:
  - name: endpoint
    description: The endpoint to the Event Grid resource.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: Credential needed for the client to connect to Azure.
    isRequired: true
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
    - <xref:azure.core.credentials.AzureSasCredential>
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
  keywordOnlyParameters:
  - name: api_version
    description: 'The API version to use for this operation. Default value for namespaces
      is

      "2023-10-01-preview". Default value for basic is "2018-01-01".

      Note that overriding this default value may result in unsupported behavior.'
    types:
    - <xref:str>
    - <xref:None>
  - name: level
    description: 'The level of client to use.

      Known values include: "Basic", "Standard". Default value is "Standard".

      *Standard* is used for working with a namespace topic.

      *Basic* is used for working with a basic topic.'
    defaultValue: Standard
    types:
    - <xref:str>
methods:
- uid: azure.eventgrid.aio.EventGridClient.acknowledge_cloud_events
  name: acknowledge_cloud_events
  summary: 'Acknowledge batch of Cloud Events. The server responds with an HTTP 200
    status code if the

    request is successfully accepted. The response body will include the set of successfully

    acknowledged lockTokens, along with other failed lockTokens with their corresponding
    error

    information. Successfully acknowledged events will no longer be available to any
    consumer.'
  signature: 'acknowledge_cloud_events(topic_name: str, subscription_name: str, *,
    lock_tokens: List[str], **kwargs: Any) -> AcknowledgeResult'
  parameters:
  - name: topic_name
    description: Topic Name. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: Event Subscription Name. Required.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: lock_tokens
    description: Array of lock tokens of Cloud Events. Required.
    types:
    - <xref:typing.List>[<xref:str>]
  return:
    description: AcknowledgeResult. The AcknowledgeResult is compatible with MutableMapping
    types:
    - <xref:azure.eventgrid.models.AcknowledgeResult>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.eventgrid.aio.EventGridClient.close
  name: close
  signature: async close() -> None
- uid: azure.eventgrid.aio.EventGridClient.receive_cloud_events
  name: receive_cloud_events
  summary: Receive Batch of Cloud Events from the Event Subscription.
  signature: 'receive_cloud_events(topic_name: str, subscription_name: str, *, max_events:
    int | None = None, max_wait_time: int | None = None, **kwargs: Any) -> ReceiveResult'
  parameters:
  - name: topic_name
    description: Topic Name. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: Event Subscription Name. Required.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: max_events
    description: 'Max Events count to be received. Minimum value is 1, while maximum
      value

      is 100 events. If not specified, the default value is 1. Default value is None.'
    types:
    - <xref:int>
  - name: max_wait_time
    description: 'Max wait time value for receive operation in Seconds. It is the
      time in

      seconds that the server approximately waits for the availability of an event
      and responds to

      the request. If an event is available, the broker responds immediately to the
      client. Minimum

      value is 10 seconds, while maximum value is 120 seconds. If not specified, the
      default value is

      60 seconds. Default value is None.'
    types:
    - <xref:int>
  return:
    description: ReceiveResult. The ReceiveResult is compatible with MutableMapping
    types:
    - <xref:azure.eventgrid.models.ReceiveResult>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.eventgrid.aio.EventGridClient.reject_cloud_events
  name: reject_cloud_events
  summary: 'Reject batch of Cloud Events. The server responds with an HTTP 200 status
    code if the request

    is successfully accepted. The response body will include the set of successfully
    rejected

    lockTokens, along with other failed lockTokens with their corresponding error
    information.'
  signature: 'reject_cloud_events(topic_name: str, subscription_name: str, *, lock_tokens:
    List[str], **kwargs: Any) -> RejectResult'
  parameters:
  - name: topic_name
    description: Topic Name. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: Event Subscription Name. Required.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: lock_tokens
    description: Array of lock tokens of Cloud Events. Required.
    types:
    - <xref:typing.List>[<xref:str>]
  return:
    description: RejectResult. The RejectResult is compatible with MutableMapping
    types:
    - <xref:azure.eventgrid.models.RejectResult>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.eventgrid.aio.EventGridClient.release_cloud_events
  name: release_cloud_events
  summary: 'Release batch of Cloud Events. The server responds with an HTTP 200 status
    code if the request

    is successfully accepted. The response body will include the set of successfully
    released

    lockTokens, along with other failed lockTokens with their corresponding error
    information.'
  signature: 'release_cloud_events(topic_name: str, subscription_name: str, *, lock_tokens:
    List[str], release_delay: int | ReleaseDelay | None = None, **kwargs: Any) ->
    ReleaseResult'
  parameters:
  - name: topic_name
    description: Topic Name. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: Event Subscription Name. Required.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: lock_tokens
    description: Array of lock tokens of Cloud Events. Required.
    types:
    - <xref:typing.List>[<xref:str>]
  - name: release_delay
    description: 'Release cloud events with the specified delay in seconds.

      Known values are: 0, 10, 60, 600, and 3600. Default value is None.'
    types:
    - <xref:int>
    - <xref:azure.eventgrid.models.ReleaseDelay>
  return:
    description: ReleaseResult. The ReleaseResult is compatible with MutableMapping
    types:
    - <xref:azure.eventgrid.models.ReleaseResult>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.eventgrid.aio.EventGridClient.renew_cloud_event_locks
  name: renew_cloud_event_locks
  summary: 'Renew lock for batch of Cloud Events. The server responds with an HTTP
    200 status code if the

    request is successfully accepted. The response body will include the set of successfully

    renewed lockTokens, along with other failed lockTokens with their corresponding
    error

    information.'
  signature: 'renew_cloud_event_locks(topic_name: str, subscription_name: str, *,
    lock_tokens: List[str], **kwargs: Any) -> RenewCloudEventLocksResult'
  parameters:
  - name: topic_name
    description: Topic Name. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: Event Subscription Name. Required.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: lock_tokens
    description: Array of lock tokens of Cloud Events. Required.
    types:
    - <xref:typing.List>[<xref:str>]
  return:
    description: 'RenewCloudEventLocksResult. The RenewCloudEventLocksResult is compatible
      with

      MutableMapping'
    types:
    - <xref:azure.eventgrid.models.RenewCloudEventLocksResult>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.eventgrid.aio.EventGridClient.send
  name: send
  summary: 'Send events to the Event Grid Namespace Service.


    A single instance or a list of dictionaries, CloudEvents are accepted. In the
    case of an Azure Event Grid

    Basic Resource, EventGridEvent(s) and CNCFCloudEvents are also accepted.'
  signature: send(*args, **kwargs) -> None
  parameters:
  - name: topic_name
    description: The name of the topic to send the event to.
    isRequired: true
    types:
    - <xref:str>
  - name: events
    description: The event to send.
    isRequired: true
    types:
    - <xref:CloudEvent>
    - <xref:typing.List>[<xref:CloudEvent>]
    - <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]
    - <xref:typing.List>[<xref:typing.Dict>[<xref:str>, <xref:typing.Any>]]
  keywordOnlyParameters:
  - name: binary_mode
    description: 'Whether to send the event in binary mode. If not specified, the
      default

      value is False.'
    types:
    - <xref:bool>
  - name: channel_name
    description: The name of the channel to send the event to.
    types:
    - <xref:str>
    - <xref:None>
  - name: content_type
    description: 'The content type of the event. If not specified, the default value
      is

      "application/cloudevents+json; charset=utf-8".'
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Publishing a CloudEvent to a Basic Topic.<!--[!code-python[Main](les\\async_samples\\\
    sample_publish_events_using_cloud_events_1.0_schema_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\35\\\\azure-eventgrid-4.20.0b2\\\
    \\samples\\\\async_samples\\\\sample_publish_events_using_cloud_events_1.0_schema_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   import os\n   import asyncio\n   from azure.core.messaging import CloudEvent\n\
    \   from azure.eventgrid.aio import EventGridClient\n   from azure.core.credentials\
    \ import AzureKeyCredential\n\n   topic_key = os.environ[\"EVENTGRID_CLOUD_EVENT_TOPIC_KEY\"\
    ]\n   endpoint = os.environ[\"EVENTGRID_CLOUD_EVENT_TOPIC_ENDPOINT\"]\n\n\n  \
    \ async def publish():\n       credential = AzureKeyCredential(topic_key)\n  \
    \     client = EventGridClient(endpoint, credential, level=\"Basic\")\n      \
    \ async with client:\n           await client.send(\n               [\n      \
    \             CloudEvent(\n                       type=\"Contoso.Items.ItemReceived\"\
    ,\n                       source=\"/contoso/items\",\n                       data={\"\
    itemSku\": \"Contoso Item SKU #1\"},\n                       subject=\"Door1\"\
    ,\n                   )\n               ]\n           )\n\n\n\n   ````\n"
- uid: azure.eventgrid.aio.EventGridClient.send_request
  name: send_request
  summary: 'Runs the network request through the client''s chained policies.


    ```


    >>> from azure.core.rest import HttpRequest

    >>> request = HttpRequest("GET", "https://www.example.org/")

    <HttpRequest [GET], url: ''https://www.example.org/''>

    >>> response = await client.send_request(request)

    <AsyncHttpResponse: 200 OK>

    ```


    For more information on this code flow, see [https://aka.ms/azsdk/dpcodegen/python/send_request](https://aka.ms/azsdk/dpcodegen/python/send_request)'
  signature: 'send_request(request: HttpRequest, *, stream: bool = False, **kwargs:
    Any) -> Awaitable[AsyncHttpResponse]'
  parameters:
  - name: request
    description: The network request you want to make. Required.
    isRequired: true
    types:
    - <xref:azure.core.rest.HttpRequest>
  keywordOnlyParameters:
  - name: stream
    description: Whether the response payload will be streamed. Defaults to False.
    types:
    - <xref:bool>
  return:
    description: The response of your network call. Does not do error handling on
      your response.
    types:
    - <xref:azure.core.rest.AsyncHttpResponse>
