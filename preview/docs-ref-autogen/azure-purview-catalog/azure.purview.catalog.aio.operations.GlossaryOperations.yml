### YamlMime:PythonClass
uid: azure.purview.catalog.aio.operations.GlossaryOperations
name: GlossaryOperations
fullName: azure.purview.catalog.aio.operations.GlossaryOperations
module: azure.purview.catalog.aio.operations
inheritances:
- azure.purview.catalog.aio.operations._operations.GlossaryOperations
constructor:
  syntax: GlossaryOperations(*args, **kwargs)
methods:
- uid: azure.purview.catalog.aio.operations.GlossaryOperations.begin_import_glossary_terms_via_csv
  name: begin_import_glossary_terms_via_csv
  summary: 'You need to write a custom operation for "begin_import_glossary_terms_via_csv".
    Please refer to

    [https://aka.ms/azsdk/python/dpcodegen/python/customize](https://aka.ms/azsdk/python/dpcodegen/python/customize)
    to learn how to customize.'
  signature: 'async begin_import_glossary_terms_via_csv(glossary_guid: str, files:
    Dict[str, Any], *, include_term_hierarchy: bool | None = False, **kwargs: Any)
    -> AsyncLROPoller[MutableMapping[str, Any]]'
  parameters:
  - name: glossary_guid
    isRequired: true
  - name: files
    isRequired: true
- uid: azure.purview.catalog.aio.operations.GlossaryOperations.begin_import_glossary_terms_via_csv_by_glossary_name
  name: begin_import_glossary_terms_via_csv_by_glossary_name
  summary: Import Glossary Terms from local csv file by glossaryName.
  signature: 'async begin_import_glossary_terms_via_csv_by_glossary_name(glossary_name:
    str, files: Dict[str, Any], *, include_term_hierarchy: bool | None = False, **kwargs:
    Any) -> AsyncLROPoller[MutableMapping[str, Any]]'
  parameters:
  - name: glossary_name
    description: The name of the glossary.
    isRequired: true
    types:
    - <xref:azure.purview.catalog.aio.operations.str>
  - name: files
    description: 'Multipart input for files. See the template in our example to find
      the input

      shape.'
    isRequired: true
    types:
    - <xref:azure.purview.catalog.aio.operations.dict>[<xref:azure.purview.catalog.aio.operations.str>,
      <xref:azure.purview.catalog.aio.operations.any>]
  - name: include_term_hierarchy
    description: Whether include term hierarchy. Default value is False.
    types:
    - <xref:bool>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  - name: polling
    description: 'By default, your polling method will be LROBasePolling. Pass in
      False for

      this operation to not poll, or pass in your own initialized polling object for
      a personal

      polling strategy.'
    types:
    - <xref:bool>
    - <xref:azure.core.polling.PollingMethod>
  - name: polling_interval
    description: 'Default waiting time between two polls for LRO operations if no

      Retry-After header is present.'
    types:
    - <xref:int>
  return:
    description: An instance of LROPoller that returns JSON object
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.purview.catalog.aio.operations.JSONType>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
    \   # multipart input template you can fill out and use as your `files` input.\n\
    \   files = {\n       \"file\": b'bytes'  # The csv file to import glossary terms\
    \ from.\n   }\n\n   # response body for status code(s): 202\n   response.json()\
    \ == {\n       \"createTime\": \"str\",  # Optional. The created time of the record.\n\
    \       \"error\": {\n           \"errorCode\": 0,  # Optional. Error code from\
    \ async import job if\n             fail.\n           \"errorMessage\": \"str\"\
    \  # Optional. Error message from async import\n             job if fail.\n  \
    \     },\n       \"id\": \"str\",  # Optional. guid string.\n       \"lastUpdateTime\"\
    : \"str\",  # Optional. The last updated time of the record.\n       \"properties\"\
    : {\n           \"importedTerms\": \"str\",  # Optional. Term numbers that already\n\
    \             imported successfully.\n           \"totalTermsDetected\": \"str\"\
    \  # Optional. Total term numbers that\n             detected in csv.\n      \
    \ },\n       \"status\": \"str\"  # Optional. Enum of the status of import csv\
    \ operation.\n         Possible values include: \"NotStarted\", \"Succeeded\"\
    , \"Failed\", \"Running\".\n   }\n   ````\n"
