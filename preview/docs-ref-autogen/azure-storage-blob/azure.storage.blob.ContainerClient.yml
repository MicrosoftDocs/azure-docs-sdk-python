### YamlMime:PythonClass
uid: azure.storage.blob.ContainerClient
name: ContainerClient
fullName: azure.storage.blob.ContainerClient
module: azure.storage.blob
inheritances:
- azure.storage.blob._shared.base_client.StorageAccountHostsMixin
summary: 'A client to interact with a specific container, although that container

  may not yet exist.


  For operations relating to a specific blob within this container, a blob client
  can be

  retrieved using the <xref:azure.storage.blob.ContainerClient.get_blob_client> function.'
constructor:
  syntax: ContainerClient(account_url, container_name, credential=None, **kwargs)
  parameters:
  - name: account_url
    description: 'The URI to the storage account. In order to create a client given
      the full URI to the container,

      use the <xref:azure.storage.blob.ContainerClient.from_container_url> classmethod.'
    types:
    - <xref:str>
  - name: container_name
    description: The name of the container for the blob.
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be a SAS token string, an
      account

      shared access key, or an instance of a TokenCredentials class from azure.identity.

      If the URL already has a SAS token, specifying an explicit credential will take
      priority.'
  - name: api_version
    description: 'The Storage API version to use for requests. Default value is ''2019-07-07''.

      Setting to an older version may result in reduced feature compatibility.


      New in version 12.2.0.'
    types:
    - <xref:str>
  - name: secondary_hostname
    description: The hostname of the secondary endpoint.
    types:
    - <xref:str>
  - name: max_block_size
    description: 'The maximum chunk size for uploading a block blob in chunks.

      Defaults to 4*1024*1024, or 4MB.'
    types:
    - <xref:int>
  - name: max_single_put_size
    description: 'If the blob size is less than or equal max_single_put_size, then
      the blob will be

      uploaded with only one http PUT request. If the blob size is larger than max_single_put_size,

      the blob will be uploaded in chunks. Defaults to 64*1024*1024, or 64MB.'
    types:
    - <xref:int>
  - name: min_large_block_upload_threshold
    description: 'The minimum chunk size required to use the memory efficient

      algorithm when uploading a block blob. Defaults to 4*1024*1024+1.'
    types:
    - <xref:int>
  - name: use_byte_buffer
    description: Use a byte buffer for block blob uploads. Defaults to False.
    types:
    - <xref:bool>
  - name: max_page_size
    description: The maximum chunk size for uploading a page blob. Defaults to 4*1024*1024,
      or 4MB.
    types:
    - <xref:int>
  - name: max_single_get_size
    description: 'The maximum size for a blob to be downloaded in a single call,

      the exceeded part will be downloaded in chunks (could be parallel). Defaults
      to 32*1024*1024, or 32MB.'
    types:
    - <xref:int>
  - name: max_chunk_get_size
    description: 'The maximum chunk size used for downloading a blob. Defaults to
      4*1024*1024,

      or 4MB.'
    types:
    - <xref:int>
examples:
- "Get a ContainerClient from an existing BlobServiceClient.<!--[!code-python[Main](les\\\
  blob_samples_containers.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\
  \\1\\\\s\\\\dist_temp\\\\14\\\\azure-storage-blob-12.7.0\\\\samples\\\\blob_samples_containers.py\"\
  , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
  highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Instantiate a\
  \ BlobServiceClient using a connection string\n   from azure.storage.blob import\
  \ BlobServiceClient\n   blob_service_client = BlobServiceClient.from_connection_string(self.connection_string)\n\
  \n   # Instantiate a ContainerClient\n   container_client = blob_service_client.get_container_client(\"\
  mynewcontainer\")\n\n   ````\n\nCreating the container client directly.<!--[!code-python[Main](les\\\
  blob_samples_containers.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\
  \\1\\\\s\\\\dist_temp\\\\14\\\\azure-storage-blob-12.7.0\\\\samples\\\\blob_samples_containers.py\"\
  , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
  highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.storage.blob\
  \ import ContainerClient\n\n   sas_url = \"https://account.blob.core.windows.net/mycontainer?sv=2015-04-05&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sr=b&sp=rw&sip=168.1.5.60-168.1.5.70&spr=https&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D\"\
  \n   container = ContainerClient.from_container_url(sas_url)\n\n   ````\n"
methods:
- uid: azure.storage.blob.ContainerClient.acquire_lease
  name: acquire_lease
  summary: 'Requests a new lease. If the container does not have an active lease,

    the Blob service creates a lease on the container and returns a new

    lease ID.'
  signature: acquire_lease(lease_duration=-1, lease_id=None, **kwargs)
  parameters:
  - name: lease_duration
    description: 'Specifies the duration of the lease, in seconds, or negative one

      (-1) for a lease that never expires. A non-infinite lease can be

      between 15 and 60 seconds. A lease duration cannot be changed

      using renew or change. Default is -1 (infinite lease).'
    isRequired: true
    types:
    - <xref:int>
  - name: lease_id
    description: 'Proposed lease ID, in a GUID string format. The Blob service returns

      400 (Invalid request) if the proposed lease ID is not in the correct format.'
    isRequired: true
    types:
    - <xref:str>
  - name: if_modified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only

      if the resource has been modified since the specified time.'
    isRequired: true
    types:
    - <xref:datetime.datetime>
  - name: if_unmodified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only if

      the resource has not been modified since the specified date/time.'
    isRequired: true
    types:
    - <xref:datetime.datetime>
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource has changed,

      and act according to the condition specified by the *match_condition* parameter.'
    isRequired: true
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    isRequired: true
    types:
    - <xref:azure.core.MatchConditions>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: A BlobLeaseClient object, that can be run in a context manager.
    types:
    - <xref:azure.storage.blob.BlobLeaseClient>
  examples:
  - "Acquiring a lease on the container.<!--[!code-python[Main](les\\blob_samples_containers.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\14\\\\azure-storage-blob-12.7.0\\\\samples\\\\blob_samples_containers.py\",\
    \ \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Acquire a lease\
    \ on the container\n   lease = container_client.acquire_lease()\n\n   # Delete\
    \ container by passing in the lease\n   container_client.delete_container(lease=lease)\n\
    \n   ````\n"
- uid: azure.storage.blob.ContainerClient.create_container
  name: create_container
  summary: 'Creates a new container under the specified account. If the container

    with the same name already exists, the operation fails.'
  signature: create_container(metadata=None, public_access=None, **kwargs)
  parameters:
  - name: metadata
    description: 'A dict with name_value pairs to associate with the

      container as metadata. Example:{''Category'':''test''}'
    isRequired: true
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: public_access
    description: 'Possible values include: ''container'', ''blob''.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.PublicAccess>
  - name: container_encryption_scope
    description: 'Specifies the default encryption scope to set on the container and
      use for

      all future writes.


      New in version 12.2.0.'
    isRequired: true
    types:
    - <xref:dict>
    - <xref:azure.storage.blob.ContainerEncryptionScope>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    types:
    - <xref:None>
  examples:
  - "Creating a container to store blobs.<!--[!code-python[Main](les\\blob_samples_containers.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\14\\\\azure-storage-blob-12.7.0\\\\samples\\\\blob_samples_containers.py\",\
    \ \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   container_client.create_container()\n\
    \n   ````\n"
- uid: azure.storage.blob.ContainerClient.delete_blob
  name: delete_blob
  summary: "Marks the specified blob or snapshot for deletion.\n\nThe blob is later\
    \ deleted during garbage collection.\nNote that in order to delete a blob, you\
    \ must delete all of its\nsnapshots. You can delete both at the same time with\
    \ the delete_blob\noperation.\n\nIf a delete retention policy is enabled for the\
    \ service, then this operation soft deletes the blob or snapshot\nand retains\
    \ the blob or snapshot for specified number of days.\nAfter specified number of\
    \ days, blob's data is removed from the service during garbage collection.\nSoft\
    \ deleted blob or snapshot is accessible through <xref:azure.storage.blob.list_blobs>\
    \ specifying *include=[\"deleted\"]*\noption. Soft-deleted blob or snapshot can\
    \ be restored using <xref:BlobClient.undelete>\n\n\n:keyword str if_tags_match_condition\n\
    \   Specify a SQL where clause on blob tags to operate only on blob with a matching\
    \ value.\n   eg. \"\"tagname\"='my tag'\"\n\n   New in version 12.4.0."
  signature: delete_blob(blob, delete_snapshots=None, **kwargs)
  parameters:
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    types:
    - <xref:None>
- uid: azure.storage.blob.ContainerClient.delete_blobs
  name: delete_blobs
  summary: "Marks the specified blobs or snapshots for deletion.\n\nThe blobs are\
    \ later deleted during garbage collection.\nNote that in order to delete blobs,\
    \ you must delete all of their\nsnapshots. You can delete both at the same time\
    \ with the delete_blobs operation.\n\nIf a delete retention policy is enabled\
    \ for the service, then this operation soft deletes the blobs or snapshots\nand\
    \ retains the blobs or snapshots for specified number of days.\nAfter specified\
    \ number of days, blobs' data is removed from the service during garbage collection.\n\
    Soft deleted blobs or snapshots are accessible through <xref:azure.storage.blob.list_blobs>\
    \ specifying *include=[\"deleted\"]*\nSoft-deleted blobs or snapshots can be restored\
    \ using <xref:BlobClient.undelete>\n\n\n:keyword str if_tags_match_condition\n\
    \   Specify a SQL where clause on blob tags to operate only on blob with a matching\
    \ value.\n   eg. \"\"tagname\"='my tag'\"\n\n   New in version 12.4.0."
  signature: delete_blobs(*blobs, **kwargs)
  parameters:
  - name: raise_on_any_failure
    description: 'This is a boolean param which defaults to True. When this is set,
      an exception

      is raised even if there is a single operation failure.'
    isRequired: true
    types:
    - <xref:bool>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: An iterator of responses, one for each blob in order
    types:
    - <xref:Iterator>[<xref:azure.core.pipeline.transport.HttpResponse>]
  examples:
  - "Deleting multiple blobs.<!--[!code-python[Main](les\\blob_samples_common.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\14\\\\\
    azure-storage-blob-12.7.0\\\\samples\\\\blob_samples_common.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   # Delete multiple blobs in the\
    \ container by name\n   container_client.delete_blobs(\"my_blob1\", \"my_blob2\"\
    )\n\n   # Delete multiple blobs by properties iterator\n   my_blobs = container_client.list_blobs(name_starts_with=\"\
    my_blob\")\n   container_client.delete_blobs(*my_blobs)\n\n   ````\n"
- uid: azure.storage.blob.ContainerClient.delete_container
  name: delete_container
  summary: 'Marks the specified container for deletion. The container and any blobs

    contained within it are later deleted during garbage collection.'
  signature: delete_container(**kwargs)
  parameters:
  - name: lease
    description: 'If specified, delete_container only succeeds if the

      container''s lease is active and matches this ID.

      Required if the container has an active lease.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.BlobLeaseClient>
    - <xref:str>
  - name: if_modified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only

      if the resource has been modified since the specified time.'
    isRequired: true
    types:
    - <xref:datetime.datetime>
  - name: if_unmodified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only if

      the resource has not been modified since the specified date/time.'
    isRequired: true
    types:
    - <xref:datetime.datetime>
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource has changed,

      and act according to the condition specified by the *match_condition* parameter.'
    isRequired: true
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    isRequired: true
    types:
    - <xref:azure.core.MatchConditions>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    types:
    - <xref:None>
  examples:
  - "Delete a container.<!--[!code-python[Main](les\\blob_samples_containers.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\14\\\\\
    azure-storage-blob-12.7.0\\\\samples\\\\blob_samples_containers.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   container_client.delete_container()\n\
    \n   ````\n"
- uid: azure.storage.blob.ContainerClient.download_blob
  name: download_blob
  summary: "Downloads a blob to the StorageStreamDownloader. The readall() method\
    \ must\nbe used to read all the content or readinto() must be used to download\
    \ the blob into\na stream.\n\n\n:keyword str if_tags_match_condition\n   Specify\
    \ a SQL where clause on blob tags to operate only on blob with a matching value.\n\
    \   eg. \"\"tagname\"='my tag'\"\n\n   New in version 12.4.0."
  signature: download_blob(blob, offset=None, length=None, **kwargs)
  parameters:
  - name: cpk
    description: 'Encrypts the data on the service-side with the given key.

      Use of customer-provided keys must be done over HTTPS.

      As the encryption key itself is provided in the request,

      a secure connection must be established to transfer the key.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.CustomerProvidedEncryptionKey>
  - name: max_concurrency
    description: The number of parallel connections with which to download.
    isRequired: true
    types:
    - <xref:int>
  - name: encoding
    description: Encoding to decode the downloaded bytes. Default is None, i.e. no
      decoding.
    isRequired: true
    types:
    - <xref:str>
  - name: timeout
    description: 'The timeout parameter is expressed in seconds. This method may make

      multiple calls to the Azure service and the timeout will apply to

      each call individually.'
    isRequired: true
    types:
    - <xref:int>
  return:
    description: A streaming object (StorageStreamDownloader)
    types:
    - <xref:azure.storage.blob.StorageStreamDownloader>
- uid: azure.storage.blob.ContainerClient.from_connection_string
  name: from_connection_string
  summary: Create ContainerClient from a Connection String.
  signature: from_connection_string(conn_str, container_name, credential=None, **kwargs)
  parameters:
  - name: conn_str
    description: A connection string to an Azure Storage account.
    isRequired: true
    types:
    - <xref:str>
  - name: container_name
    description: The container name for the blob.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token, or the connection string already has shared

      access key values. The value can be a SAS token string, an account shared access

      key, or an instance of a TokenCredentials class from azure.identity.

      Credentials provided here will take precedence over those in the connection
      string.'
    isRequired: true
  - name: credential
    defaultValue: None
  return:
    description: A container client.
    types:
    - <xref:azure.storage.blob.ContainerClient>
  examples:
  - "Creating the ContainerClient from a connection string.<!--[!code-python[Main](les\\\
    blob_samples_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\14\\\\azure-storage-blob-12.7.0\\\\samples\\\\blob_samples_authentication.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.storage.blob\
    \ import ContainerClient\n   container_client = ContainerClient.from_connection_string(\n\
    \       self.connection_string, container_name=\"mycontainer\")\n\n   ````\n"
- uid: azure.storage.blob.ContainerClient.from_container_url
  name: from_container_url
  summary: Create ContainerClient from a container url.
  signature: from_container_url(container_url, credential=None, **kwargs)
  parameters:
  - name: container_url
    description: 'The full endpoint URL to the Container, including SAS token if used.
      This could be

      either the primary endpoint, or the secondary endpoint depending on the current
      *location_mode*.'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token, or the connection string already has shared

      access key values. The value can be a SAS token string, an account shared access

      key, or an instance of a TokenCredentials class from azure.identity.

      Credentials provided here will take precedence over those in the connection
      string.'
    isRequired: true
  - name: credential
    defaultValue: None
  return:
    description: A container client.
    types:
    - <xref:azure.storage.blob.ContainerClient>
- uid: azure.storage.blob.ContainerClient.get_account_information
  name: get_account_information
  summary: 'Gets information related to the storage account.


    The information can also be retrieved if the user has a SAS to a container or
    blob.

    The keys in the returned dictionary include ''sku_name'' and ''account_kind''.'
  signature: get_account_information(**kwargs)
  return:
    description: A dict of account information (SKU and account type).
    types:
    - <xref:dict>(<xref:str>, <xref:str>)
- uid: azure.storage.blob.ContainerClient.get_blob_client
  name: get_blob_client
  summary: 'Get a client to interact with the specified blob.


    The blob need not already exist.'
  signature: get_blob_client(blob, snapshot=None)
  parameters:
  - name: blob
    description: The blob with which to interact.
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.blob.BlobProperties>
  - name: snapshot
    description: 'The optional blob snapshot on which to operate. This can be the
      snapshot ID string

      or the response returned from <xref:BlobClient.create_snapshot>.'
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: A BlobClient.
    types:
    - <xref:azure.storage.blob.BlobClient>
  examples:
  - "Get the blob client.<!--[!code-python[Main](les\\blob_samples_containers.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\14\\\\\
    azure-storage-blob-12.7.0\\\\samples\\\\blob_samples_containers.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   # Get the BlobClient from the\
    \ ContainerClient to interact with a specific blob\n   blob_client = container_client.get_blob_client(\"\
    mynewblob\")\n\n   ````\n"
- uid: azure.storage.blob.ContainerClient.get_container_access_policy
  name: get_container_access_policy
  summary: 'Gets the permissions for the specified container.

    The permissions indicate whether container data may be accessed publicly.'
  signature: get_container_access_policy(**kwargs)
  parameters:
  - name: lease
    description: 'If specified, get_container_access_policy only succeeds if the

      container''s lease is active and matches this ID.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.BlobLeaseClient>
    - <xref:str>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: Access policy information in a dict.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  examples:
  - "Getting the access policy on the container.<!--[!code-python[Main](les\\blob_samples_containers.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\14\\\\azure-storage-blob-12.7.0\\\\samples\\\\blob_samples_containers.py\",\
    \ \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   policy = container_client.get_container_access_policy()\n\
    \n   ````\n"
- uid: azure.storage.blob.ContainerClient.get_container_properties
  name: get_container_properties
  summary: 'Returns all user-defined metadata and system properties for the specified

    container. The data returned does not include the container''s list of blobs.'
  signature: get_container_properties(**kwargs)
  parameters:
  - name: lease
    description: 'If specified, get_container_properties only succeeds if the

      container''s lease is active and matches this ID.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.BlobLeaseClient>
    - <xref:str>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: Properties for the specified container within a container object.
    types:
    - <xref:azure.storage.blob.ContainerProperties>
  examples:
  - "Getting properties on the container.<!--[!code-python[Main](les\\blob_samples_containers.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\14\\\\azure-storage-blob-12.7.0\\\\samples\\\\blob_samples_containers.py\",\
    \ \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   properties = container_client.get_container_properties()\n\
    \n   ````\n"
- uid: azure.storage.blob.ContainerClient.list_blobs
  name: list_blobs
  summary: 'Returns a generator to list the blobs under the specified container.

    The generator will lazily follow the continuation tokens returned by

    the service.'
  signature: list_blobs(name_starts_with=None, include=None, **kwargs)
  parameters:
  - name: name_starts_with
    description: 'Filters the results to return only blobs whose names

      begin with the specified prefix.'
    isRequired: true
    types:
    - <xref:str>
  - name: or str include
    description: 'Specifies one or more additional datasets to include in the response.

      Options include: ''snapshots'', ''metadata'', ''uncommittedblobs'', ''copy'',
      ''deleted'', ''tags''.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: An iterable (auto-paging) response of BlobProperties.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.storage.blob.BlobProperties>]
  examples:
  - "List the blobs in the container.<!--[!code-python[Main](les\\blob_samples_containers.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\14\\\\azure-storage-blob-12.7.0\\\\samples\\\\blob_samples_containers.py\",\
    \ \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   blobs_list = container_client.list_blobs()\n\
    \   for blob in blobs_list:\n       print(blob.name + '\\n')\n\n   ````\n"
- uid: azure.storage.blob.ContainerClient.set_container_access_policy
  name: set_container_access_policy
  summary: 'Sets the permissions for the specified container or stored access

    policies that may be used with Shared Access Signatures. The permissions

    indicate whether blobs in a container may be accessed publicly.'
  signature: set_container_access_policy(signed_identifiers, public_access=None, **kwargs)
  parameters:
  - name: signed_identifiers
    description: 'A dictionary of access policies to associate with the container.
      The

      dictionary may contain up to 5 elements. An empty dictionary

      will clear the access policies set on the service.'
    isRequired: true
    types:
    - <xref:dict>[<xref:str>, <xref:azure.storage.blob.AccessPolicy>]
  - name: public_access
    description: 'Possible values include: ''container'', ''blob''.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.PublicAccess>
  - name: lease
    description: 'Required if the container has an active lease. Value can be a BlobLeaseClient
      object

      or the lease ID as a string.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.BlobLeaseClient>
    - <xref:str>
  - name: if_modified_since
    description: 'A datetime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only

      if the resource has been modified since the specified date/time.'
    isRequired: true
    types:
    - <xref:datetime.datetime>
  - name: if_unmodified_since
    description: 'A datetime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only if

      the resource has not been modified since the specified date/time.'
    isRequired: true
    types:
    - <xref:datetime.datetime>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: Container-updated property dict (Etag and last modified).
    types:
    - <xref:dict>[<xref:str>, <xref:str>
    - <xref:datetime.datetime>]
  examples:
  - "Setting access policy on the container.<!--[!code-python[Main](les\\blob_samples_containers.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\14\\\\azure-storage-blob-12.7.0\\\\samples\\\\blob_samples_containers.py\",\
    \ \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Create access\
    \ policy\n   from azure.storage.blob import AccessPolicy, ContainerSasPermissions\n\
    \   access_policy = AccessPolicy(permission=ContainerSasPermissions(read=True),\n\
    \                                expiry=datetime.utcnow() + timedelta(hours=1),\n\
    \                                start=datetime.utcnow() - timedelta(minutes=1))\n\
    \n   identifiers = {'test': access_policy}\n\n   # Set the access policy on the\
    \ container\n   container_client.set_container_access_policy(signed_identifiers=identifiers)\n\
    \n   ````\n"
- uid: azure.storage.blob.ContainerClient.set_container_metadata
  name: set_container_metadata
  summary: 'Sets one or more user-defined name-value pairs for the specified

    container. Each call to this operation replaces all existing metadata

    attached to the container. To remove all metadata from the container,

    call this operation with no metadata dict.'
  signature: set_container_metadata(metadata=None, **kwargs)
  parameters:
  - name: metadata
    description: 'A dict containing name-value pairs to associate with the container
      as

      metadata. Example: {''category'':''test''}'
    isRequired: true
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: lease
    description: 'If specified, set_container_metadata only succeeds if the

      container''s lease is active and matches this ID.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.BlobLeaseClient>
    - <xref:str>
  - name: if_modified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only

      if the resource has been modified since the specified time.'
    isRequired: true
    types:
    - <xref:datetime.datetime>
  - name: if_unmodified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only if

      the resource has not been modified since the specified date/time.'
    isRequired: true
    types:
    - <xref:datetime.datetime>
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource has changed,

      and act according to the condition specified by the *match_condition* parameter.'
    isRequired: true
    types:
    - <xref:str>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: Container-updated property dict (Etag and last modified).
    types:
    - <xref:dict>[<xref:str>, <xref:str>
    - <xref:datetime>]
  examples:
  - "Setting metadata on the container.<!--[!code-python[Main](les\\blob_samples_containers.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\14\\\\azure-storage-blob-12.7.0\\\\samples\\\\blob_samples_containers.py\",\
    \ \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Create key,\
    \ value pairs for metadata\n   metadata = {'type': 'test'}\n\n   # Set metadata\
    \ on the container\n   container_client.set_container_metadata(metadata=metadata)\n\
    \n   ````\n"
- uid: azure.storage.blob.ContainerClient.set_premium_page_blob_tier_blobs
  name: set_premium_page_blob_tier_blobs
  summary: Sets the page blob tiers on all blobs. This API is only supported for page
    blobs on premium accounts.
  signature: set_premium_page_blob_tier_blobs(premium_page_blob_tier, *blobs, **kwargs)
  parameters:
  - name: premium_page_blob_tier
    description: 'A page blob tier value to set the blob to. The tier correlates to
      the size of the

      blob and number of allowed IOPS. This is only applicable to page blobs on

      premium storage accounts.



      > [!NOTE]

      > If you want to set different tier on different blobs please set this positional
      parameter to None.

      >

      > Then the blob tier on every BlobProperties will be taken.

      >'
    isRequired: true
    types:
    - <xref:azure.storage.blob.PremiumPageBlobTier>
  - name: blobs
    description: "The blobs with which to interact. This can be a single blob, or\
      \ multiple values can\nbe supplied, where each value is either the name of the\
      \ blob (str) or BlobProperties.\n\n\n> [!NOTE]\n> When the blob type is dict,\
      \ here's a list of keys, value rules.\n>\n> \n>\n> blob name:\n>\n> \n>\n> key:\
      \ 'name', value type: str\n>\n> \n>\n> premium blob tier:\n>\n> \n>\n> key:\
      \ 'blob_tier', value type: PremiumPageBlobTier\n>\n> \n>\n> lease:\n>\n> \n\
      >\n> key: 'lease_id', value type: Union[str, LeaseClient]\n>\n> \n>\n> timeout\
      \ for subrequest:\n>\n> \n>\n> key: 'timeout', value type: int\n>"
    isRequired: true
    types:
    - <xref:list>[<xref:str>], <xref:list>[<xref:dict>]<xref:,>
    - <xref:list>[<xref:azure.storage.blob.BlobProperties>]
  - name: timeout
    description: 'The timeout parameter is expressed in seconds. This method may make

      multiple calls to the Azure service and the timeout will apply to

      each call individually.'
    isRequired: true
    types:
    - <xref:int>
  - name: raise_on_any_failure
    description: 'This is a boolean param which defaults to True. When this is set,
      an exception

      is raised even if there is a single operation failure.'
    isRequired: true
    types:
    - <xref:bool>
  return:
    description: An iterator of responses, one for each blob in order
    types:
    - <xref:iterator>[<xref:azure.core.pipeline.transport.HttpResponse>]
- uid: azure.storage.blob.ContainerClient.set_standard_blob_tier_blobs
  name: set_standard_blob_tier_blobs
  summary: "This operation sets the tier on block blobs.\n\nA block blob's tier determines\
    \ Hot/Cool/Archive storage type.\nThis operation does not update the blob's ETag.\n\
    \n\n:keyword str if_tags_match_condition\n   Specify a SQL where clause on blob\
    \ tags to operate only on blob with a matching value.\n   eg. \"\"tagname\"='my\
    \ tag'\"\n\n   New in version 12.4.0."
  signature: set_standard_blob_tier_blobs(standard_blob_tier, *blobs, **kwargs)
  parameters:
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  - name: raise_on_any_failure
    description: 'This is a boolean param which defaults to True. When this is set,
      an exception

      is raised even if there is a single operation failure.'
    isRequired: true
    types:
    - <xref:bool>
  return:
    description: An iterator of responses, one for each blob in order
    types:
    - <xref:Iterator>[<xref:azure.core.pipeline.transport.HttpResponse>]
- uid: azure.storage.blob.ContainerClient.upload_blob
  name: upload_blob
  summary: "Creates a new blob from a data source with automatic chunking.\n\n\n:keyword\
    \ str if_tags_match_condition\n   Specify a SQL where clause on blob tags to operate\
    \ only on blob with a matching value.\n   eg. \"\"tagname\"='my tag'\"\n\n   New\
    \ in version 12.4.0."
  signature: 'upload_blob(name, data, blob_type=<BlobType.BlockBlob: ''BlockBlob''>,
    length=None, metadata=None, **kwargs)'
  parameters:
  - name: timeout
    description: 'The timeout parameter is expressed in seconds. This method may make

      multiple calls to the Azure service and the timeout will apply to

      each call individually.'
    isRequired: true
    types:
    - <xref:int>
  - name: premium_page_blob_tier
    description: 'A page blob tier value to set the blob to. The tier correlates to
      the size of the

      blob and number of allowed IOPS. This is only applicable to page blobs on

      premium storage accounts.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.PremiumPageBlobTier>
  - name: standard_blob_tier
    description: 'A standard blob tier value to set the blob to. For this version
      of the library,

      this is only applicable to block blobs on standard storage accounts.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.StandardBlobTier>
  - name: maxsize_condition
    description: 'Optional conditional header. The max length in bytes permitted for

      the append blob. If the Append Block operation would cause the blob

      to exceed that limit or if the blob size is already greater than the

      value specified in this header, the request will fail with

      MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).'
    isRequired: true
    types:
    - <xref:int>
  - name: max_concurrency
    description: 'Maximum number of parallel connections to use when the blob size
      exceeds

      64MB.'
    isRequired: true
    types:
    - <xref:int>
  - name: cpk
    description: 'Encrypts the data on the service-side with the given key.

      Use of customer-provided keys must be done over HTTPS.

      As the encryption key itself is provided in the request,

      a secure connection must be established to transfer the key.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.CustomerProvidedEncryptionKey>
  - name: encryption_scope
    description: 'A predefined encryption scope used to encrypt the data on the service.
      An encryption

      scope can be created using the Management API and referenced here by name. If
      a default

      encryption scope has been defined at the container, this value will override
      it if the

      container-level scope is configured to allow overrides. Otherwise an error will
      be raised.


      New in version 12.2.0.'
    isRequired: true
    types:
    - <xref:str>
  - name: encoding
    description: Defaults to UTF-8.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A BlobClient to interact with the newly uploaded blob.
    types:
    - <xref:azure.storage.blob.BlobClient>
  examples:
  - "Upload blob to the container.<!--[!code-python[Main](les\\blob_samples_containers.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\14\\\\azure-storage-blob-12.7.0\\\\samples\\\\blob_samples_containers.py\",\
    \ \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   with open(SOURCE_FILE,\
    \ \"rb\") as data:\n       blob_client = container_client.upload_blob(name=\"\
    myblob\", data=data)\n\n   properties = blob_client.get_blob_properties()\n\n\
    \   ````\n"
- uid: azure.storage.blob.ContainerClient.walk_blobs
  name: walk_blobs
  summary: 'Returns a generator to list the blobs under the specified container.

    The generator will lazily follow the continuation tokens returned by

    the service. This operation will list blobs in accordance with a hierarchy,

    as delimited by the specified delimiter character.'
  signature: walk_blobs(name_starts_with=None, include=None, delimiter='/', **kwargs)
  parameters:
  - name: name_starts_with
    description: 'Filters the results to return only blobs whose names

      begin with the specified prefix.'
    isRequired: true
    types:
    - <xref:str>
  - name: include
    description: 'Specifies one or more additional datasets to include in the response.

      Options include: ''snapshots'', ''metadata'', ''uncommittedblobs'', ''copy'',
      ''deleted''.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
  - name: delimiter
    description: 'When the request includes this parameter, the operation returns
      a BlobPrefix

      element in the response body that acts as a placeholder for all blobs whose

      names begin with the same substring up to the appearance of the delimiter

      character. The delimiter may be a single character or a string.'
    isRequired: true
    types:
    - <xref:str>
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: An iterable (auto-paging) response of BlobProperties.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.storage.blob.BlobProperties>]
