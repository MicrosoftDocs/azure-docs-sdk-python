### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.blob.aio.BlobServiceClient.create_container
  - azure.storage.blob.aio.BlobServiceClient.delete_container
  - azure.storage.blob.aio.BlobServiceClient.find_blobs_by_tags
  - azure.storage.blob.aio.BlobServiceClient.get_account_information
  - azure.storage.blob.aio.BlobServiceClient.get_blob_client
  - azure.storage.blob.aio.BlobServiceClient.get_container_client
  - azure.storage.blob.aio.BlobServiceClient.get_service_properties
  - azure.storage.blob.aio.BlobServiceClient.get_service_stats
  - azure.storage.blob.aio.BlobServiceClient.get_user_delegation_key
  - azure.storage.blob.aio.BlobServiceClient.list_containers
  - azure.storage.blob.aio.BlobServiceClient.set_service_properties
  class: azure.storage.blob.aio.BlobServiceClient
  example:
  - "Creating the BlobServiceClient with account url and credential.<!--[!code-python[Main](les\\\
    blob_samples_authentication_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-storage-blob-12.4.0b1\\\\samples\\\
    \\blob_samples_authentication_async.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   from azure.storage.blob.aio import BlobServiceClient\n   blob_service_client\
    \ = BlobServiceClient(account_url=self.url, credential=self.shared_access_key)\n\
    \n   ````\n\nCreating the BlobServiceClient with Azure Identity credentials.<!--[!code-python[Main](les\\\
    blob_samples_authentication_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-storage-blob-12.4.0b1\\\\samples\\\
    \\blob_samples_authentication_async.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   # Get a token credential for authentication\n   from azure.identity.aio\
    \ import ClientSecretCredential\n   token_credential = ClientSecretCredential(self.active_directory_tenant_id,\
    \ self.active_directory_application_id,\n                                    \
    \         self.active_directory_application_secret)\n\n   # Instantiate a BlobServiceClient\
    \ using a token credential\n   from azure.storage.blob.aio import BlobServiceClient\n\
    \   blob_service_client = BlobServiceClient(account_url=self.oauth_url, credential=token_credential)\n\
    \n   ````\n"
  fullName: azure.storage.blob.aio.BlobServiceClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.blob._shared.base_client_async.AsyncStorageAccountHostsMixin
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.storage.blob._shared.base_client.StorageAccountHostsMixin
    type: azure.storage.blob._blob_service_client.BlobServiceClient
  langs:
  - python
  module: azure.storage.blob.aio
  name: BlobServiceClient
  summary: 'A client to interact with the Blob Service at the account level.


    This client provides operations to retrieve and configure the account properties

    as well as list, create and delete containers within the account.

    For operations relating to a specific container or blob, clients for those entities

    can also be retrieved using the *get_client* functions.'
  syntax:
    content: BlobServiceClient(account_url, credential=None, **kwargs)
    parameters:
    - description: 'The URL to the blob storage account. Any other entities included

        in the URL path (e.g. container or blob) will be discarded. This URL can be
        optionally

        authenticated with a SAS token.'
      id: account_url
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        an account

        shared access key, or an instance of a TokenCredentials class from azure.identity.

        If the URL already has a SAS token, specifying an explicit credential will
        take priority.'
      id: credential
    - description: 'The Storage API version to use for requests. Default value is
        ''2019-07-07''.

        Setting to an older version may result in reduced feature compatibility.


        New in version 12.2.0.'
      id: api_version
      type:
      - str
    - description: The hostname of the secondary endpoint.
      id: secondary_hostname
      type:
      - str
    - description: 'The maximum chunk size for uploading a block blob in chunks.

        Defaults to 4*1024*1024, or 4MB.'
      id: max_block_size
      type:
      - int
    - description: 'If the blob size is less than or equal max_single_put_size, then
        the blob will be

        uploaded with only one http PUT request. If the blob size is larger than max_single_put_size,

        the blob will be uploaded in chunks. Defaults to 64*1024*1024, or 64MB.'
      id: max_single_put_size
      type:
      - int
    - description: 'The minimum chunk size required to use the memory efficient

        algorithm when uploading a block blob. Defaults to 4*1024*1024+1.'
      id: min_large_block_upload_threshold
      type:
      - int
    - description: Use a byte buffer for block blob uploads. Defaults to False.
      id: use_byte_buffer
      type:
      - bool
    - description: The maximum chunk size for uploading a page blob. Defaults to 4*1024*1024,
        or 4MB.
      id: max_page_size
      type:
      - int
    - description: 'The maximum size for a blob to be downloaded in a single call,

        the exceeded part will be downloaded in chunks (could be parallel). Defaults
        to 32*1024*1024, or 32MB.'
      id: max_single_get_size
      type:
      - int
    - description: 'The maximum chunk size used for downloading a blob. Defaults to
        4*1024*1024,

        or 4MB.'
      id: max_chunk_get_size
      type:
      - int
  type: class
  uid: azure.storage.blob.aio.BlobServiceClient
- class: azure.storage.blob.aio.BlobServiceClient
  example:
  - "Creating a container in the blob service.<!--[!code-python[Main](les\\blob_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\17\\\\azure-storage-blob-12.4.0b1\\\\samples\\\\blob_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   try:\n       new_container\
    \ = await blob_service_client.create_container(\"containerfromblobserviceasync\"\
    )\n       properties = await new_container.get_container_properties()\n   except\
    \ ResourceExistsError:\n       print(\"Container already exists.\")\n\n   ````\n"
  fullName: azure.storage.blob.aio.BlobServiceClient.create_container
  langs:
  - python
  module: azure.storage.blob.aio
  name: create_container(name, metadata=None, public_access=None, **kwargs)
  namewithoutparameters: create_container
  summary: 'Creates a new container under the specified account.


    If the container with the same name already exists, a ResourceExistsError will

    be raised. This method returns a client with which to interact with the newly

    created container.'
  syntax:
    content: create_container(name, metadata=None, public_access=None, **kwargs)
    parameters:
    - description: The name of the container to create.
      id: name
      isRequired: true
      type:
      - str
    - description: 'A dict with name-value pairs to associate with the

        container as metadata. Example: *{''Category'':''test''}*'
      id: metadata
      isRequired: true
      type:
      - dict(str, str)
    - description: 'Possible values include: ''container'', ''blob''.'
      id: public_access
      isRequired: true
      type:
      - str
      - azure.storage.blob.PublicAccess
    - description: 'Specifies the default encryption scope to set on the container
        and use for

        all future writes.


        New in version 12.2.0.'
      id: container_encryption_scope
      isRequired: true
      type:
      - dict
      - azure.storage.blob.ContainerEncryptionScope
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.storage.blob.aio.ContainerClient
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.create_container
- class: azure.storage.blob.aio.BlobServiceClient
  example:
  - "Deleting a container in the blob service.<!--[!code-python[Main](les\\blob_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\17\\\\azure-storage-blob-12.4.0b1\\\\samples\\\\blob_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Delete container\
    \ if it exists\n   try:\n       await blob_service_client.delete_container(\"\
    containerfromblobserviceasync\")\n   except ResourceNotFoundError:\n       print(\"\
    Container already deleted.\")\n\n   ````\n"
  fullName: azure.storage.blob.aio.BlobServiceClient.delete_container
  langs:
  - python
  module: azure.storage.blob.aio
  name: delete_container(container, lease=None, **kwargs)
  namewithoutparameters: delete_container
  summary: 'Marks the specified container for deletion.


    The container and any blobs contained within it are later deleted during garbage
    collection.

    If the container is not found, a ResourceNotFoundError will be raised.'
  syntax:
    content: delete_container(container, lease=None, **kwargs)
    parameters:
    - description: 'The container to delete. This can either be the name of the container,

        or an instance of ContainerProperties.'
      id: container
      isRequired: true
      type:
      - str
      - azure.storage.blob.ContainerProperties
    - description: 'If specified, delete_container only succeeds if the

        container''s lease is active and matches this ID.

        Required if the container has an active lease.'
      id: lease
      isRequired: true
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      isRequired: true
      type:
      - datetime.datetime
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      isRequired: true
      type:
      - datetime.datetime
    - description: 'An ETag value, or the wildcard character (*). Used to check if
        the resource has changed,

        and act according to the condition specified by the *match_condition* parameter.'
      id: etag
      isRequired: true
      type:
      - str
    - description: The match condition to use upon the etag.
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.delete_container
- class: azure.storage.blob.aio.BlobServiceClient
  fullName: azure.storage.blob.aio.BlobServiceClient.find_blobs_by_tags
  langs:
  - python
  module: azure.storage.blob.aio
  name: find_blobs_by_tags(filter_expression, **kwargs)
  namewithoutparameters: find_blobs_by_tags
  summary: 'The Filter Blobs operation enables callers to list blobs across all

    containers whose tags match a given search expression.  Filter blobs

    searches across all containers within a storage account but can be

    scoped within the expression to a single container.'
  syntax:
    content: find_blobs_by_tags(filter_expression, **kwargs)
    parameters:
    - description: 'The expression to find blobs whose tags matches the specified
        condition.

        eg. ""yourtagname"=''firsttag'' and "yourtagname2"=''secondtag''"

        To specify a container, eg. "@container=''containerName'' and "Name"=''C''"'
      id: filter_expression
      isRequired: true
      type:
      - str
    - description: The max result per page when paginating.
      id: results_per_page
      isRequired: true
      type:
      - int
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: An iterable (auto-paging) response of BlobProperties.
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.storage.blob.FilteredBlob]
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.find_blobs_by_tags
- class: azure.storage.blob.aio.BlobServiceClient
  example:
  - "Getting account information for the blob service.<!--[!code-python[Main](les\\\
    blob_samples_service_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-storage-blob-12.4.0b1\\\\samples\\\\blob_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   account_info =\
    \ await blob_service_client.get_account_information()\n   print('Using Storage\
    \ SKU: {}'.format(account_info['sku_name']))\n\n   ````\n"
  fullName: azure.storage.blob.aio.BlobServiceClient.get_account_information
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_account_information(**kwargs)
  namewithoutparameters: get_account_information
  summary: 'Gets information related to the storage account.


    The information can also be retrieved if the user has a SAS to a container or
    blob.

    The keys in the returned dictionary include ''sku_name'' and ''account_kind''.'
  syntax:
    content: get_account_information(**kwargs)
    return:
      description: A dict of account information (SKU and account type).
      type:
      - dict(str, str)
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.get_account_information
- class: azure.storage.blob.aio.BlobServiceClient
  example:
  - "Getting the blob client to interact with a specific blob.<!--[!code-python[Main](les\\\
    blob_samples_service_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-storage-blob-12.4.0b1\\\\samples\\\\blob_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   blob_client =\
    \ blob_service_client.get_blob_client(container=\"containertestasync\", blob=\"\
    my_blob\")\n   try:\n       stream = await blob_client.download_blob()\n   except\
    \ ResourceNotFoundError:\n       print(\"No blob found.\")\n\n   ````\n"
  fullName: azure.storage.blob.aio.BlobServiceClient.get_blob_client
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_blob_client(container, blob, snapshot=None)
  namewithoutparameters: get_blob_client
  summary: 'Get a client to interact with the specified blob.


    The blob need not already exist.'
  syntax:
    content: get_blob_client(container, blob, snapshot=None)
    parameters:
    - description: 'The container that the blob is in. This can either be the name
        of the container,

        or an instance of ContainerProperties.'
      id: container
      isRequired: true
      type:
      - str
      - azure.storage.blob.ContainerProperties
    - description: 'The blob with which to interact. This can either be the name of
        the blob,

        or an instance of BlobProperties.'
      id: blob
      isRequired: true
      type:
      - str
      - azure.storage.blob.BlobProperties
    - defaultValue: None
      description: 'The optional blob snapshot on which to operate. This can either
        be the ID of the snapshot,

        or a dictionary output returned by

        <xref:azure.storage.blob.aio.BlobClient.create_snapshot>.'
      id: snapshot
      type:
      - str
      - dict(str, Any)
    return:
      description: A BlobClient.
      type:
      - azure.storage.blob.aio.BlobClient
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.get_blob_client
- class: azure.storage.blob.aio.BlobServiceClient
  example:
  - "Getting the container client to interact with a specific container.<!--[!code-python[Main](les\\\
    blob_samples_service_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-storage-blob-12.4.0b1\\\\samples\\\\blob_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Get a client\
    \ to interact with a specific container - though it may not yet exist\n   container_client\
    \ = blob_service_client.get_container_client(\"containertestasync\")\n   try:\n\
    \       blobs_list = []\n       async for blob in container_client.list_blobs():\n\
    \           blobs_list.append(blob)\n\n       for blob in blobs_list:\n      \
    \     print(\"Found blob: \", blob.name)\n   except ResourceNotFoundError:\n \
    \      print(\"Container not found.\")\n\n   ````\n"
  fullName: azure.storage.blob.aio.BlobServiceClient.get_container_client
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_container_client(container)
  namewithoutparameters: get_container_client
  summary: 'Get a client to interact with the specified container.


    The container need not already exist.'
  syntax:
    content: get_container_client(container)
    parameters:
    - description: 'The container. This can either be the name of the container,

        or an instance of ContainerProperties.'
      id: container
      isRequired: true
      type:
      - str
      - azure.storage.blob.ContainerProperties
    return:
      description: A ContainerClient.
      type:
      - azure.storage.blob.aio.ContainerClient
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.get_container_client
- class: azure.storage.blob.aio.BlobServiceClient
  example:
  - "Getting service properties for the blob service.<!--[!code-python[Main](les\\\
    blob_samples_service_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-storage-blob-12.4.0b1\\\\samples\\\\blob_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   properties = await\
    \ blob_service_client.get_service_properties()\n\n   ````\n"
  fullName: azure.storage.blob.aio.BlobServiceClient.get_service_properties
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_service_properties(**kwargs)
  namewithoutparameters: get_service_properties
  summary: 'Gets the properties of a storage account''s Blob service, including

    Azure Storage Analytics.'
  syntax:
    content: get_service_properties(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: 'An object containing blob service properties such as

        analytics logging, hour/minute metrics, cors rules, etc.'
      type:
      - Dict[str, Any]
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.get_service_properties
- class: azure.storage.blob.aio.BlobServiceClient
  example:
  - "Getting service stats for the blob service.<!--[!code-python[Main](les\\blob_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\17\\\\azure-storage-blob-12.4.0b1\\\\samples\\\\blob_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   stats = await\
    \ blob_service_client.get_service_stats()\n\n   ````\n"
  fullName: azure.storage.blob.aio.BlobServiceClient.get_service_stats
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_service_stats(**kwargs)
  namewithoutparameters: get_service_stats
  summary: 'Retrieves statistics related to replication for the Blob service.


    It is only available when read-access geo-redundant replication is enabled for

    the storage account.


    With geo-redundant replication, Azure Storage maintains your data durable

    in two locations. In both locations, Azure Storage constantly maintains

    multiple healthy replicas of your data. The location where you read,

    create, update, or delete data is the primary storage account location.

    The primary location exists in the region you choose at the time you

    create an account via the Azure Management Azure classic portal, for

    example, North Central US. The location to which your data is replicated

    is the secondary location. The secondary location is automatically

    determined based on the location of the primary; it is in a second data

    center that resides in the same region as the primary location. Read-only

    access is available from the secondary location, if read-access geo-redundant

    replication is enabled for your storage account.'
  syntax:
    content: get_service_stats(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: The blob service stats.
      type:
      - Dict[str, Any]
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.get_service_stats
- class: azure.storage.blob.aio.BlobServiceClient
  fullName: azure.storage.blob.aio.BlobServiceClient.get_user_delegation_key
  langs:
  - python
  module: azure.storage.blob.aio
  name: get_user_delegation_key(key_start_time, key_expiry_time, **kwargs)
  namewithoutparameters: get_user_delegation_key
  summary: 'Obtain a user delegation key for the purpose of signing SAS tokens.

    A token credential must be present on the service object for this request to succeed.'
  syntax:
    content: get_user_delegation_key(key_start_time, key_expiry_time, **kwargs)
    parameters:
    - description: A DateTime value. Indicates when the key becomes valid.
      id: key_start_time
      isRequired: true
      type:
      - datetime.datetime
    - description: A DateTime value. Indicates when the key stops being valid.
      id: key_expiry_time
      isRequired: true
      type:
      - datetime.datetime
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: The user delegation key.
      type:
      - azure.storage.blob.UserDelegationKey
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.get_user_delegation_key
- class: azure.storage.blob.aio.BlobServiceClient
  example:
  - "Listing the containers in the blob service.<!--[!code-python[Main](les\\blob_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\17\\\\azure-storage-blob-12.4.0b1\\\\samples\\\\blob_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # List all containers\n\
    \   all_containers = []\n   async for container in blob_service_client.list_containers(include_metadata=True):\n\
    \       all_containers.append(container)\n\n   for container in all_containers:\n\
    \       print(container['name'], container['metadata'])\n\n   # Filter results\
    \ with name prefix\n   test_containers = []\n   async for name in blob_service_client.list_containers(name_starts_with='test-'):\n\
    \       test_containers.append(name)\n\n   for container in test_containers:\n\
    \       await blob_service_client.delete_container(container)\n\n   ````\n"
  fullName: azure.storage.blob.aio.BlobServiceClient.list_containers
  langs:
  - python
  module: azure.storage.blob.aio
  name: list_containers(name_starts_with=None, include_metadata=False, **kwargs)
  namewithoutparameters: list_containers
  summary: 'Returns a generator to list the containers under the specified account.


    The generator will lazily follow the continuation tokens returned by

    the service and stop when all containers have been returned.'
  syntax:
    content: list_containers(name_starts_with=None, include_metadata=False, **kwargs)
    parameters:
    - description: 'Filters the results to return only containers whose names

        begin with the specified prefix.'
      id: name_starts_with
      isRequired: true
      type:
      - str
    - description: 'Specifies that container metadata to be returned in the response.

        The default value is *False*.'
      id: include_metadata
      isRequired: true
      type:
      - bool
    - description: 'The maximum number of container names to retrieve per API

        call. If the request does not specify the server will return up to 5,000 items.'
      id: results_per_page
      isRequired: true
      type:
      - int
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: An iterable (auto-paging) of ContainerProperties.
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.storage.blob.ContainerProperties]
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.list_containers
- class: azure.storage.blob.aio.BlobServiceClient
  example:
  - "Setting service properties for the blob service.<!--[!code-python[Main](les\\\
    blob_samples_service_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-storage-blob-12.4.0b1\\\\samples\\\\blob_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Create service\
    \ properties\n   from azure.storage.blob import BlobAnalyticsLogging, Metrics,\
    \ CorsRule, RetentionPolicy\n\n   # Create logging settings\n   logging = BlobAnalyticsLogging(read=True,\
    \ write=True, delete=True, retention_policy=RetentionPolicy(enabled=True, days=5))\n\
    \n   # Create metrics for requests statistics\n   hour_metrics = Metrics(enabled=True,\
    \ include_apis=True, retention_policy=RetentionPolicy(enabled=True, days=5))\n\
    \   minute_metrics = Metrics(enabled=True, include_apis=True,\n              \
    \             retention_policy=RetentionPolicy(enabled=True, days=5))\n\n   #\
    \ Create CORS rules\n   cors_rule = CorsRule(['www.xyz.com'], ['GET'])\n   cors\
    \ = [cors_rule]\n\n   # Set the service properties\n   await blob_service_client.set_service_properties(logging,\
    \ hour_metrics, minute_metrics, cors)\n\n   ````\n"
  fullName: azure.storage.blob.aio.BlobServiceClient.set_service_properties
  langs:
  - python
  module: azure.storage.blob.aio
  name: set_service_properties(analytics_logging=None, hour_metrics=None, minute_metrics=None,
    cors=None, target_version=None, delete_retention_policy=None, static_website=None,
    **kwargs)
  namewithoutparameters: set_service_properties
  summary: 'Sets the properties of a storage account''s Blob service, including

    Azure Storage Analytics.


    If an element (e.g. analytics_logging) is left as None, the

    existing settings on the service for that functionality are preserved.'
  syntax:
    content: set_service_properties(analytics_logging=None, hour_metrics=None, minute_metrics=None,
      cors=None, target_version=None, delete_retention_policy=None, static_website=None,
      **kwargs)
    parameters:
    - description: Groups the Azure Analytics Logging settings.
      id: analytics_logging
      isRequired: true
      type:
      - azure.storage.blob.BlobAnalyticsLogging
    - description: 'The hour metrics settings provide a summary of request

        statistics grouped by API in hourly aggregates for blobs.'
      id: hour_metrics
      isRequired: true
      type:
      - azure.storage.blob.Metrics
    - description: 'The minute metrics settings provide request statistics

        for each minute for blobs.'
      id: minute_metrics
      isRequired: true
      type:
      - azure.storage.blob.Metrics
    - description: 'You can include up to five CorsRule elements in the

        list. If an empty list is specified, all CORS rules will be deleted,

        and CORS will be disabled for the service.'
      id: cors
      isRequired: true
      type:
      - list[azure.storage.blob.CorsRule]
    - description: 'Indicates the default version to use for requests if an incoming

        request''s version is not specified.'
      id: target_version
      isRequired: true
      type:
      - str
    - description: 'The delete retention policy specifies whether to retain deleted
        blobs.

        It also specifies the number of days and versions of blob to keep.'
      id: delete_retention_policy
      isRequired: true
      type:
      - azure.storage.blob.RetentionPolicy
    - description: 'Specifies whether the static website feature is enabled,

        and if yes, indicates the index document and 404 error document to use.'
      id: static_website
      isRequired: true
      type:
      - azure.storage.blob.StaticWebsite
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.BlobServiceClient.set_service_properties
references:
- fullName: azure.storage.blob.aio.BlobServiceClient.create_container
  isExternal: false
  name: create_container(name, metadata=None, public_access=None, **kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.create_container
- fullName: azure.storage.blob.aio.BlobServiceClient.delete_container
  isExternal: false
  name: delete_container(container, lease=None, **kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.delete_container
- fullName: azure.storage.blob.aio.BlobServiceClient.find_blobs_by_tags
  isExternal: false
  name: find_blobs_by_tags(filter_expression, **kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.find_blobs_by_tags
- fullName: azure.storage.blob.aio.BlobServiceClient.get_account_information
  isExternal: false
  name: get_account_information(**kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.get_account_information
- fullName: azure.storage.blob.aio.BlobServiceClient.get_blob_client
  isExternal: false
  name: get_blob_client(container, blob, snapshot=None)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.get_blob_client
- fullName: azure.storage.blob.aio.BlobServiceClient.get_container_client
  isExternal: false
  name: get_container_client(container)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.get_container_client
- fullName: azure.storage.blob.aio.BlobServiceClient.get_service_properties
  isExternal: false
  name: get_service_properties(**kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.get_service_properties
- fullName: azure.storage.blob.aio.BlobServiceClient.get_service_stats
  isExternal: false
  name: get_service_stats(**kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.get_service_stats
- fullName: azure.storage.blob.aio.BlobServiceClient.get_user_delegation_key
  isExternal: false
  name: get_user_delegation_key(key_start_time, key_expiry_time, **kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.get_user_delegation_key
- fullName: azure.storage.blob.aio.BlobServiceClient.list_containers
  isExternal: false
  name: list_containers(name_starts_with=None, include_metadata=False, **kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.list_containers
- fullName: azure.storage.blob.aio.BlobServiceClient.set_service_properties
  isExternal: false
  name: set_service_properties(analytics_logging=None, hour_metrics=None, minute_metrics=None,
    cors=None, target_version=None, delete_retention_policy=None, static_website=None,
    **kwargs)
  parent: azure.storage.blob.aio.BlobServiceClient
  uid: azure.storage.blob.aio.BlobServiceClient.set_service_properties
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
- fullName: azure.core.async_paging.AsyncItemPaged[azure.storage.blob.FilteredBlob]
  name: AsyncItemPaged[FilteredBlob]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.storage.blob.FilteredBlob
    name: FilteredBlob
    uid: azure.storage.blob.FilteredBlob
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.storage.blob.FilteredBlob]
- fullName: dict(str, Any)
  name: dict(str, Any)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: )
    name: )
  uid: dict(str, Any)
- fullName: Dict[str, Any]
  name: Dict[str, Any]
  spec.python:
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: Dict[str, Any]
- fullName: azure.core.async_paging.AsyncItemPaged[azure.storage.blob.ContainerProperties]
  name: AsyncItemPaged[ContainerProperties]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.storage.blob.ContainerProperties
    name: ContainerProperties
    uid: azure.storage.blob.ContainerProperties
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.storage.blob.ContainerProperties]
- fullName: list[azure.storage.blob.CorsRule]
  name: list[CorsRule]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.storage.blob.CorsRule
    name: CorsRule
    uid: azure.storage.blob.CorsRule
  - fullName: ']'
    name: ']'
  uid: list[azure.storage.blob.CorsRule]
