### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.blob.aio.BlobLeaseClient.acquire
  - azure.storage.blob.aio.BlobLeaseClient.break_lease
  - azure.storage.blob.aio.BlobLeaseClient.change
  - azure.storage.blob.aio.BlobLeaseClient.release
  - azure.storage.blob.aio.BlobLeaseClient.renew
  class: azure.storage.blob.aio.BlobLeaseClient
  fullName: azure.storage.blob.aio.BlobLeaseClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.blob._lease.BlobLeaseClient
  langs:
  - python
  module: azure.storage.blob.aio
  name: BlobLeaseClient
  summary: 'Creates a new BlobLeaseClient.


    This client provides lease operations on a BlobClient or ContainerClient.'
  syntax:
    content: BlobLeaseClient(client, lease_id=None)
    parameters:
    - description: The client of the blob or container to lease.
      id: client
      type:
      - azure.storage.blob.aio.BlobClient
      - azure.storage.blob.aio.ContainerClient
    - description: 'A string representing the lease ID of an existing lease. This
        value does not

        need to be specified in order to acquire a new lease, or break one.'
      id: lease_id
      type:
      - str
    variables:
    - description: 'The ID of the lease currently being maintained. This will be *None*
        if no

        lease has yet been acquired.'
      id: id
      type:
      - str
    - description: 'The ETag of the lease currently being maintained. This will be
        *None* if no

        lease has yet been acquired or modified.'
      id: etag
      type:
      - str
    - description: 'The last modified timestamp of the lease currently being maintained.

        This will be *None* if no lease has yet been acquired or modified.'
      id: last_modified
      type:
      - datetime.datetime
  type: class
  uid: azure.storage.blob.aio.BlobLeaseClient
- class: azure.storage.blob.aio.BlobLeaseClient
  fullName: azure.storage.blob.aio.BlobLeaseClient.acquire
  langs:
  - python
  module: azure.storage.blob.aio
  name: acquire(lease_duration=-1, **kwargs)
  namewithoutparameters: acquire
  summary: 'Requests a new lease.


    If the container does not have an active lease, the Blob service creates a

    lease on the container and returns a new lease ID.'
  syntax:
    content: acquire(lease_duration=-1, **kwargs)
    parameters:
    - description: 'Specifies the duration of the lease, in seconds, or negative one

        (-1) for a lease that never expires. A non-infinite lease can be

        between 15 and 60 seconds. A lease duration cannot be changed

        using renew or change. Default is -1 (infinite lease).'
      id: lease_duration
      isRequired: true
      type:
      - int
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      isRequired: true
      type:
      - datetime.datetime
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      isRequired: true
      type:
      - datetime.datetime
    - description: 'An ETag value, or the wildcard character (*). Used to check if
        the resource has changed,

        and act according to the condition specified by the *match_condition* parameter.'
      id: etag
      isRequired: true
      type:
      - str
    - description: The match condition to use upon the etag.
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.aio.BlobLeaseClient.acquire
- class: azure.storage.blob.aio.BlobLeaseClient
  fullName: azure.storage.blob.aio.BlobLeaseClient.break_lease
  langs:
  - python
  module: azure.storage.blob.aio
  name: break_lease(lease_break_period=None, **kwargs)
  namewithoutparameters: break_lease
  summary: 'Break the lease, if the container or blob has an active lease.


    Once a lease is broken, it cannot be renewed. Any authorized request can break
    the lease;

    the request is not required to specify a matching lease ID. When a lease

    is broken, the lease break period is allowed to elapse, during which time

    no lease operation except break and release can be performed on the container
    or blob.

    When a lease is successfully broken, the response indicates the interval

    in seconds until a new lease can be acquired.'
  syntax:
    content: break_lease(lease_break_period=None, **kwargs)
    parameters:
    - description: 'This is the proposed duration of seconds that the lease

        should continue before it is broken, between 0 and 60 seconds. This

        break period is only used if it is shorter than the time remaining

        on the lease. If longer, the time remaining on the lease is used.

        A new lease will not be available before the break period has

        expired, but the lease may be held for longer than the break

        period. If this header does not appear with a break

        operation, a fixed-duration lease breaks after the remaining lease

        period elapses, and an infinite lease breaks immediately.'
      id: lease_break_period
      isRequired: true
      type:
      - int
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      isRequired: true
      type:
      - datetime.datetime
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      isRequired: true
      type:
      - datetime.datetime
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: Approximate time remaining in the lease period, in seconds.
      type:
      - int
  type: method
  uid: azure.storage.blob.aio.BlobLeaseClient.break_lease
- class: azure.storage.blob.aio.BlobLeaseClient
  fullName: azure.storage.blob.aio.BlobLeaseClient.change
  langs:
  - python
  module: azure.storage.blob.aio
  name: change(proposed_lease_id, **kwargs)
  namewithoutparameters: change
  summary: Change the lease ID of an active lease.
  syntax:
    content: change(proposed_lease_id, **kwargs)
    parameters:
    - description: 'Proposed lease ID, in a GUID string format. The Blob service returns
        400

        (Invalid request) if the proposed lease ID is not in the correct format.'
      id: proposed_lease_id
      isRequired: true
      type:
      - str
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      isRequired: true
      type:
      - datetime.datetime
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      isRequired: true
      type:
      - datetime.datetime
    - description: 'An ETag value, or the wildcard character (*). Used to check if
        the resource has changed,

        and act according to the condition specified by the *match_condition* parameter.'
      id: etag
      isRequired: true
      type:
      - str
    - description: The match condition to use upon the etag.
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: None
  type: method
  uid: azure.storage.blob.aio.BlobLeaseClient.change
- class: azure.storage.blob.aio.BlobLeaseClient
  fullName: azure.storage.blob.aio.BlobLeaseClient.release
  langs:
  - python
  module: azure.storage.blob.aio
  name: release(**kwargs)
  namewithoutparameters: release
  summary: 'Release the lease.


    The lease may be released if the client lease id specified matches

    that associated with the container or blob. Releasing the lease allows another
    client

    to immediately acquire the lease for the container or blob as soon as the release
    is complete.'
  syntax:
    content: release(**kwargs)
    parameters:
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      isRequired: true
      type:
      - datetime.datetime
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      isRequired: true
      type:
      - datetime.datetime
    - description: 'An ETag value, or the wildcard character (*). Used to check if
        the resource has changed,

        and act according to the condition specified by the *match_condition* parameter.'
      id: etag
      isRequired: true
      type:
      - str
    - description: The match condition to use upon the etag.
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: None
  type: method
  uid: azure.storage.blob.aio.BlobLeaseClient.release
- class: azure.storage.blob.aio.BlobLeaseClient
  fullName: azure.storage.blob.aio.BlobLeaseClient.renew
  langs:
  - python
  module: azure.storage.blob.aio
  name: renew(**kwargs)
  namewithoutparameters: renew
  summary: 'Renews the lease.


    The lease can be renewed if the lease ID specified in the

    lease client matches that associated with the container or blob. Note that

    the lease may be renewed even if it has expired as long as the container

    or blob has not been leased again since the expiration of that lease. When you

    renew a lease, the lease duration clock resets.'
  syntax:
    content: renew(**kwargs)
    parameters:
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      isRequired: true
      type:
      - datetime.datetime
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      isRequired: true
      type:
      - datetime.datetime
    - description: 'An ETag value, or the wildcard character (*). Used to check if
        the resource has changed,

        and act according to the condition specified by the *match_condition* parameter.'
      id: etag
      isRequired: true
      type:
      - str
    - description: The match condition to use upon the etag.
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: None
  type: method
  uid: azure.storage.blob.aio.BlobLeaseClient.renew
references:
- fullName: azure.storage.blob.aio.BlobLeaseClient.acquire
  isExternal: false
  name: acquire(lease_duration=-1, **kwargs)
  parent: azure.storage.blob.aio.BlobLeaseClient
  uid: azure.storage.blob.aio.BlobLeaseClient.acquire
- fullName: azure.storage.blob.aio.BlobLeaseClient.break_lease
  isExternal: false
  name: break_lease(lease_break_period=None, **kwargs)
  parent: azure.storage.blob.aio.BlobLeaseClient
  uid: azure.storage.blob.aio.BlobLeaseClient.break_lease
- fullName: azure.storage.blob.aio.BlobLeaseClient.change
  isExternal: false
  name: change(proposed_lease_id, **kwargs)
  parent: azure.storage.blob.aio.BlobLeaseClient
  uid: azure.storage.blob.aio.BlobLeaseClient.change
- fullName: azure.storage.blob.aio.BlobLeaseClient.release
  isExternal: false
  name: release(**kwargs)
  parent: azure.storage.blob.aio.BlobLeaseClient
  uid: azure.storage.blob.aio.BlobLeaseClient.release
- fullName: azure.storage.blob.aio.BlobLeaseClient.renew
  isExternal: false
  name: renew(**kwargs)
  parent: azure.storage.blob.aio.BlobLeaseClient
  uid: azure.storage.blob.aio.BlobLeaseClient.renew
