### YamlMime:PythonClass
uid: azure.batch.models.BatchJobScheduleConfiguration
name: BatchJobScheduleConfiguration
fullName: azure.batch.models.BatchJobScheduleConfiguration
module: azure.batch.models
summary: 'The schedule according to which Jobs will be created. All times are fixed

  respective to UTC and are not impacted by daylight saving time.'
constructor:
  syntax: 'BatchJobScheduleConfiguration(*args: Any, **kwargs: Any)'
variables:
- description: 'The earliest time at which any Job may be created under this Job

    Schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready
    to create Jobs

    immediately.'
  name: do_not_run_until
  types:
  - <xref:datetime.datetime>
- description: 'A time after which no Job will be created under this Job Schedule.
    The

    schedule will move to the completed state as soon as this deadline is past and
    there is no

    active Job under this Job Schedule. If you do not specify a doNotRunAfter time,
    and you are

    creating a recurring Job Schedule, the Job Schedule will remain active until you
    explicitly

    terminate it.'
  name: do_not_run_after
  types:
  - <xref:datetime.datetime>
- description: 'The time interval, starting from the time at which the schedule indicates
    a

    Job should be created, within which a Job must be created. If a Job is not created
    within the

    startWindow interval, then the ''opportunity'' is lost; no Job will be created
    until the next

    recurrence of the schedule. If the schedule is recurring, and the startWindow
    is longer than

    the recurrence interval, then this is equivalent to an infinite startWindow, because
    the Job

    that is ''due'' in one recurrenceInterval is not carried forward into the next
    recurrence

    interval. The default is infinite. The minimum value is 1 minute. If you specify
    a lower value,

    the Batch service rejects the schedule with an error; if you are calling the REST
    API directly,

    the HTTP status code is 400 (Bad Request).'
  name: start_window
  types:
  - <xref:datetime.timedelta>
- description: 'The time interval between the start times of two successive Jobs

    under the Job Schedule. A Job Schedule can have at most one active Job under it
    at any given

    time. Because a Job Schedule can have at most one active Job under it at any given
    time, if it

    is time to create a new Job under a Job Schedule, but the previous Job is still
    running, the

    Batch service will not create the new Job until the previous Job finishes. If
    the previous Job

    does not finish within the startWindow period of the new recurrenceInterval, then
    no new Job

    will be scheduled for that interval. For recurring Jobs, you should normally specify
    a

    jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you
    will need an

    external process to monitor when Jobs are created, add Tasks to the Jobs and terminate
    the Jobs

    ready for the next recurrence. The default is that the schedule does not recur:
    one Job is

    created, within the startWindow after the doNotRunUntil time, and the schedule
    is complete as

    soon as that Job finishes. The minimum value is 1 minute. If you specify a lower
    value, the

    Batch service rejects the schedule with an error; if you are calling the REST
    API directly, the

    HTTP status code is 400 (Bad Request).'
  name: recurrence_interval
  types:
  - <xref:datetime.timedelta>
methods:
- uid: azure.batch.models.BatchJobScheduleConfiguration.as_dict
  name: as_dict
  summary: Return a dict that can be JSONify using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.BatchJobScheduleConfiguration.clear
  name: clear
  signature: clear() -> None
- uid: azure.batch.models.BatchJobScheduleConfiguration.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.BatchJobScheduleConfiguration.get
  name: get
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.BatchJobScheduleConfiguration.items
  name: items
  signature: items() -> ItemsView[str, Any]
- uid: azure.batch.models.BatchJobScheduleConfiguration.keys
  name: keys
  signature: keys() -> KeysView[str]
- uid: azure.batch.models.BatchJobScheduleConfiguration.pop
  name: pop
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchJobScheduleConfiguration.popitem
  name: popitem
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.BatchJobScheduleConfiguration.setdefault
  name: setdefault
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchJobScheduleConfiguration.update
  name: update
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.BatchJobScheduleConfiguration.values
  name: values
  signature: values() -> ValuesView[Any]
attributes:
- uid: azure.batch.models.BatchJobScheduleConfiguration.do_not_run_after
  name: do_not_run_after
  summary: 'A time after which no Job will be created under this Job Schedule. The
    schedule will move to

    the completed state as soon as this deadline is past and there is no active Job
    under this Job

    Schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring
    Job

    Schedule, the Job Schedule will remain active until you explicitly terminate it.'
  signature: 'do_not_run_after: datetime | None'
- uid: azure.batch.models.BatchJobScheduleConfiguration.do_not_run_until
  name: do_not_run_until
  summary: 'The earliest time at which any Job may be created under this Job Schedule.
    If you do not

    specify a doNotRunUntil time, the schedule becomes ready to create Jobs immediately.'
  signature: 'do_not_run_until: datetime | None'
- uid: azure.batch.models.BatchJobScheduleConfiguration.recurrence_interval
  name: recurrence_interval
  summary: 'The time interval between the start times of two successive Jobs under
    the Job Schedule. A Job

    Schedule can have at most one active Job under it at any given time. Because a
    Job Schedule can

    have at most one active Job under it at any given time, if it is time to create
    a new Job under

    a Job Schedule, but the previous Job is still running, the Batch service will
    not create the

    new Job until the previous Job finishes. If the previous Job does not finish within
    the

    startWindow period of the new recurrenceInterval, then no new Job will be scheduled
    for that

    interval. For recurring Jobs, you should normally specify a jobManagerTask in
    the

    jobSpecification. If you do not use jobManagerTask, you will need an external
    process to

    monitor when Jobs are created, add Tasks to the Jobs and terminate the Jobs ready
    for the next

    recurrence. The default is that the schedule does not recur: one Job is created,
    within the

    startWindow after the doNotRunUntil time, and the schedule is complete as soon
    as that Job

    finishes. The minimum value is 1 minute. If you specify a lower value, the Batch
    service

    rejects the schedule with an error; if you are calling the REST API directly,
    the HTTP status

    code is 400 (Bad Request).'
  signature: 'recurrence_interval: timedelta | None'
- uid: azure.batch.models.BatchJobScheduleConfiguration.start_window
  name: start_window
  summary: 'The time interval, starting from the time at which the schedule indicates
    a Job should be

    created, within which a Job must be created. If a Job is not created within the
    startWindow

    interval, then the ''opportunity'' is lost; no Job will be created until the next
    recurrence of

    the schedule. If the schedule is recurring, and the startWindow is longer than
    the recurrence

    interval, then this is equivalent to an infinite startWindow, because the Job
    that is ''due'' in

    one recurrenceInterval is not carried forward into the next recurrence interval.
    The default is

    infinite. The minimum value is 1 minute. If you specify a lower value, the Batch
    service

    rejects the schedule with an error; if you are calling the REST API directly,
    the HTTP status

    code is 400 (Bad Request).'
  signature: 'start_window: timedelta | None'
