### YamlMime:PythonClass
uid: azure.batch.models.RollingUpgradePolicy
name: RollingUpgradePolicy
fullName: azure.batch.models.RollingUpgradePolicy
module: azure.batch.models
summary: The configuration parameters used while performing a rolling upgrade.
constructor:
  syntax: 'RollingUpgradePolicy(*args: Any, **kwargs: Any)'
variables:
- description: 'Allow VMSS to ignore AZ boundaries when constructing upgrade

    batches. Take into consideration the Update Domain and maxBatchInstancePercent
    to determine the

    batch size. This field is able to be set to true or false only when using

    NodePlacementConfiguration as Zonal.'
  name: enable_cross_zone_upgrade
  types:
  - <xref:bool>
- description: 'The maximum percent of total virtual machine instances that

    will be upgraded simultaneously by the rolling upgrade in one batch. As this is
    a maximum,

    unhealthy instances in previous or future batches can cause the percentage of
    instances in a

    batch to decrease to ensure higher reliability. The value of this field should
    be between 5 and

    100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent
    are assigned

    with value, the value of maxBatchInstancePercent should not be more than

    maxUnhealthyInstancePercent.'
  name: max_batch_instance_percent
  types:
  - <xref:int>
- description: 'The maximum percentage of the total virtual machine

    instances in the scale set that can be simultaneously unhealthy, either as a result
    of being

    upgraded, or by being found in an unhealthy state by the virtual machine health
    checks before

    the rolling upgrade aborts. This constraint will be checked prior to starting
    any batch. The

    value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent
    and

    maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent

    should not be more than maxUnhealthyInstancePercent.'
  name: max_unhealthy_instance_percent
  types:
  - <xref:int>
- description: 'The maximum percentage of upgraded virtual

    machine instances that can be found to be in an unhealthy state. This check will
    happen after

    each batch is upgraded. If this percentage is ever exceeded, the rolling update
    aborts. The

    value of this field should be between 0 and 100, inclusive.'
  name: max_unhealthy_upgraded_instance_percent
  types:
  - <xref:int>
- description: 'The wait time between completing the update for all virtual

    machines in one batch and starting the next batch. The time duration should be
    specified in ISO

    8601 format..'
  name: pause_time_between_batches
  types:
  - <xref:datetime.timedelta>
- description: 'Upgrade all unhealthy instances in a scale set before any

    healthy instances.'
  name: prioritize_unhealthy_instances
  types:
  - <xref:bool>
- description: 'Rollback failed instances to previous model

    if the Rolling Upgrade policy is violated.'
  name: rollback_failed_instances_on_policy_breach
  types:
  - <xref:bool>
methods:
- uid: azure.batch.models.RollingUpgradePolicy.as_dict
  name: as_dict
  summary: Return a dict that can be JSONify using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.RollingUpgradePolicy.clear
  name: clear
  signature: clear() -> None
- uid: azure.batch.models.RollingUpgradePolicy.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.RollingUpgradePolicy.get
  name: get
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.RollingUpgradePolicy.items
  name: items
  signature: items() -> ItemsView[str, Any]
- uid: azure.batch.models.RollingUpgradePolicy.keys
  name: keys
  signature: keys() -> KeysView[str]
- uid: azure.batch.models.RollingUpgradePolicy.pop
  name: pop
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.RollingUpgradePolicy.popitem
  name: popitem
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.RollingUpgradePolicy.setdefault
  name: setdefault
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.RollingUpgradePolicy.update
  name: update
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.RollingUpgradePolicy.values
  name: values
  signature: values() -> ValuesView[Any]
attributes:
- uid: azure.batch.models.RollingUpgradePolicy.enable_cross_zone_upgrade
  name: enable_cross_zone_upgrade
  summary: 'Allow VMSS to ignore AZ boundaries when constructing upgrade batches.
    Take into consideration

    the Update Domain and maxBatchInstancePercent to determine the batch size. This
    field is able

    to be set to true or false only when using NodePlacementConfiguration as Zonal.'
  signature: 'enable_cross_zone_upgrade: bool | None'
- uid: azure.batch.models.RollingUpgradePolicy.max_batch_instance_percent
  name: max_batch_instance_percent
  summary: 'The maximum percent of total virtual machine instances that will be upgraded
    simultaneously by

    the rolling upgrade in one batch. As this is a maximum, unhealthy instances in
    previous or

    future batches can cause the percentage of instances in a batch to decrease to
    ensure higher

    reliability. The value of this field should be between 5 and 100, inclusive. If
    both

    maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value,
    the value of

    maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent.'
  signature: 'max_batch_instance_percent: int | None'
- uid: azure.batch.models.RollingUpgradePolicy.max_unhealthy_instance_percent
  name: max_unhealthy_instance_percent
  summary: 'The maximum percentage of the total virtual machine instances in the scale
    set that can be

    simultaneously unhealthy, either as a result of being upgraded, or by being found
    in an

    unhealthy state by the virtual machine health checks before the rolling upgrade
    aborts. This

    constraint will be checked prior to starting any batch. The value of this field
    should be

    between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent

    are assigned with value, the value of maxBatchInstancePercent should not be more
    than

    maxUnhealthyInstancePercent.'
  signature: 'max_unhealthy_instance_percent: int | None'
- uid: azure.batch.models.RollingUpgradePolicy.max_unhealthy_upgraded_instance_percent
  name: max_unhealthy_upgraded_instance_percent
  summary: 'The maximum percentage of upgraded virtual machine instances that can
    be found to be in an

    unhealthy state. This check will happen after each batch is upgraded. If this
    percentage is

    ever exceeded, the rolling update aborts. The value of this field should be between
    0 and 100,

    inclusive.'
  signature: 'max_unhealthy_upgraded_instance_percent: int | None'
- uid: azure.batch.models.RollingUpgradePolicy.pause_time_between_batches
  name: pause_time_between_batches
  summary: 'The wait time between completing the update for all virtual machines in
    one batch and starting

    the next batch. The time duration should be specified in ISO 8601 format..'
  signature: 'pause_time_between_batches: timedelta | None'
- uid: azure.batch.models.RollingUpgradePolicy.prioritize_unhealthy_instances
  name: prioritize_unhealthy_instances
  summary: Upgrade all unhealthy instances in a scale set before any healthy instances.
  signature: 'prioritize_unhealthy_instances: bool | None'
- uid: azure.batch.models.RollingUpgradePolicy.rollback_failed_instances_on_policy_breach
  name: rollback_failed_instances_on_policy_breach
  summary: Rollback failed instances to previous model if the Rolling Upgrade policy
    is violated.
  signature: 'rollback_failed_instances_on_policy_breach: bool | None'
