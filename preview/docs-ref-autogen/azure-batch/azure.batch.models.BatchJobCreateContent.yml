### YamlMime:PythonClass
uid: azure.batch.models.BatchJobCreateContent
name: BatchJobCreateContent
fullName: azure.batch.models.BatchJobCreateContent
module: azure.batch.models
summary: 'Parameters for creating an Azure Batch Job.


  All required parameters must be populated in order to send to server.'
constructor:
  syntax: 'BatchJobCreateContent(*args: Any, **kwargs: Any)'
variables:
- description: 'A string that uniquely identifies the Job within the Account. The
    ID can contain any

    combination of alphanumeric characters including hyphens and underscores, and
    cannot contain

    more than 64 characters. The ID is case-preserving and case-insensitive (that
    is, you may not

    have two IDs within an Account that differ only by case). Required.'
  name: id
  types:
  - <xref:str>
- description: 'The display name for the Job. The display name need not be unique
    and can

    contain any Unicode characters up to a maximum length of 1024.'
  name: display_name
  types:
  - <xref:str>
- description: 'Whether Tasks in the Job can define dependencies on each other.

    The default is false.'
  name: uses_task_dependencies
  types:
  - <xref:bool>
- description: 'The priority of the Job. Priority values can range from -1000 to 1000,
    with

    -1000 being the lowest priority and 1000 being the highest priority. The default
    value is 0.'
  name: priority
  types:
  - <xref:int>
- description: 'Whether Tasks in this job can be preempted by other high priority

    jobs. If the value is set to True, other high priority jobs submitted to the system
    will take

    precedence and will be able requeue tasks from this job. You can update a job''s

    allowTaskPreemption after it has been created using the update job API.'
  name: allow_task_preemption
  types:
  - <xref:bool>
- description: 'The maximum number of tasks that can be executed in parallel for the

    job. The value of maxParallelTasks must be -1 or greater than 0 if specified.
    If not specified,

    the default value is -1, which means there''s no limit to the number of tasks
    that can be run at

    once. You can update a job''s maxParallelTasks after it has been created using
    the update job

    API.'
  name: max_parallel_tasks
  types:
  - <xref:int>
- description: The execution constraints for the Job.
  name: constraints
  types:
  - <xref:azure.batch.models.BatchJobConstraints>
- description: 'Details of a Job Manager Task to be launched when the Job is started.

    If the Job does not specify a Job Manager Task, the user must explicitly add Tasks
    to the Job.

    If the Job does specify a Job Manager Task, the Batch service creates the Job
    Manager Task when

    the Job is created, and will try to schedule the Job Manager Task before scheduling
    other Tasks

    in the Job. The Job Manager Task''s typical purpose is to control and/or monitor
    Job execution,

    for example by deciding what additional Tasks to run, determining when the work
    is complete,

    etc. (However, a Job Manager Task is not restricted to these activities - it is
    a fully-fledged

    Task in the system and perform whatever actions are required for the Job.) For
    example, a Job

    Manager Task might download a file specified as a parameter, analyze the contents
    of that file

    and submit additional Tasks based on those contents.'
  name: job_manager_task
  types:
  - <xref:azure.batch.models.BatchJobManagerTask>
- description: 'The Job Preparation Task. If a Job has a Job Preparation Task, the

    Batch service will run the Job Preparation Task on a Node before starting any
    Tasks of that Job

    on that Compute Node.'
  name: job_preparation_task
  types:
  - <xref:azure.batch.models.BatchJobPreparationTask>
- description: 'The Job Release Task. A Job Release Task cannot be specified without

    also specifying a Job Preparation Task for the Job. The Batch service runs the
    Job Release Task

    on the Nodes that have run the Job Preparation Task. The primary purpose of the
    Job Release

    Task is to undo changes to Compute Nodes made by the Job Preparation Task. Example
    activities

    include deleting local files, or shutting down services that were started as part
    of Job

    preparation.'
  name: job_release_task
  types:
  - <xref:azure.batch.models.BatchJobReleaseTask>
- description: 'The list of common environment variable settings. These

    environment variables are set for all Tasks in the Job (including the Job Manager,
    Job

    Preparation and Job Release Tasks). Individual Tasks can override an environment
    setting

    specified here by specifying the same setting name with a different value.'
  name: common_environment_settings
  types:
  - <xref:list>[<xref:azure.batch.models.EnvironmentSetting>]
- description: The Pool on which the Batch service runs the Job's Tasks. Required.
  name: pool_info
  types:
  - <xref:azure.batch.models.BatchPoolInfo>
- description: 'The action the Batch service should take when all Tasks in the Job

    are in the completed state. Note that if a Job contains no Tasks, then all Tasks
    are considered

    complete. This option is therefore most commonly used with a Job Manager task;
    if you want to

    use automatic Job termination without a Job Manager, you should initially set

    onAllTasksComplete to noaction and update the Job properties to set onAllTasksComplete
    to

    terminatejob once you have finished adding Tasks. The default is noaction. Known
    values are:

    "noaction" and "terminatejob".'
  name: on_all_tasks_complete
  types:
  - <xref:str>
  - <xref:azure.batch.models.OnAllBatchTasksComplete>
- description: 'The action the Batch service should take when any Task in the Job
    fails.

    A Task is considered to have failed if has a failureInfo. A failureInfo is set
    if the Task

    completes with a non-zero exit code after exhausting its retry count, or if there
    was an error

    starting the Task, for example due to a resource file download error. The default
    is noaction.

    Known values are: "noaction" and "performexitoptionsjobaction".'
  name: on_task_failure
  types:
  - <xref:str>
  - <xref:azure.batch.models.OnBatchTaskFailure>
- description: The network configuration for the Job.
  name: network_configuration
  types:
  - <xref:azure.batch.models.BatchJobNetworkConfiguration>
- description: 'A list of name-value pairs associated with the Job as metadata. The
    Batch

    service does not assign any meaning to metadata; it is solely for the use of user
    code.'
  name: metadata
  types:
  - <xref:list>[<xref:azure.batch.models.MetadataItem>]
methods:
- uid: azure.batch.models.BatchJobCreateContent.as_dict
  name: as_dict
  summary: Return a dict that can be JSONify using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.BatchJobCreateContent.clear
  name: clear
  signature: clear() -> None
- uid: azure.batch.models.BatchJobCreateContent.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.BatchJobCreateContent.get
  name: get
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.BatchJobCreateContent.items
  name: items
  signature: items() -> ItemsView[str, Any]
- uid: azure.batch.models.BatchJobCreateContent.keys
  name: keys
  signature: keys() -> KeysView[str]
- uid: azure.batch.models.BatchJobCreateContent.pop
  name: pop
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchJobCreateContent.popitem
  name: popitem
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.BatchJobCreateContent.setdefault
  name: setdefault
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchJobCreateContent.update
  name: update
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.BatchJobCreateContent.values
  name: values
  signature: values() -> ValuesView[Any]
attributes:
- uid: azure.batch.models.BatchJobCreateContent.allow_task_preemption
  name: allow_task_preemption
  summary: 'Whether Tasks in this job can be preempted by other high priority jobs.
    If the value is set to

    True, other high priority jobs submitted to the system will take precedence and
    will be able

    requeue tasks from this job. You can update a job''s allowTaskPreemption after
    it has been

    created using the update job API.'
  signature: 'allow_task_preemption: bool | None'
- uid: azure.batch.models.BatchJobCreateContent.common_environment_settings
  name: common_environment_settings
  summary: 'The list of common environment variable settings. These environment variables
    are set for all

    Tasks in the Job (including the Job Manager, Job Preparation and Job Release Tasks).
    Individual

    Tasks can override an environment setting specified here by specifying the same
    setting name

    with a different value.'
  signature: 'common_environment_settings: List[_models.EnvironmentSetting] | None'
- uid: azure.batch.models.BatchJobCreateContent.constraints
  name: constraints
  summary: The execution constraints for the Job.
  signature: 'constraints: _models.BatchJobConstraints | None'
- uid: azure.batch.models.BatchJobCreateContent.display_name
  name: display_name
  summary: 'The display name for the Job. The display name need not be unique and
    can contain any Unicode

    characters up to a maximum length of 1024.'
  signature: 'display_name: str | None'
- uid: azure.batch.models.BatchJobCreateContent.id
  name: id
  summary: 'A string that uniquely identifies the Job within the Account. The ID can
    contain any

    combination of alphanumeric characters including hyphens and underscores, and
    cannot contain

    more than 64 characters. The ID is case-preserving and case-insensitive (that
    is, you may not

    have two IDs within an Account that differ only by case). Required.'
  signature: 'id: str'
- uid: azure.batch.models.BatchJobCreateContent.job_manager_task
  name: job_manager_task
  summary: 'Details of a Job Manager Task to be launched when the Job is started.
    If the Job does not

    specify a Job Manager Task, the user must explicitly add Tasks to the Job. If
    the Job does

    specify a Job Manager Task, the Batch service creates the Job Manager Task when
    the Job is

    created, and will try to schedule the Job Manager Task before scheduling other
    Tasks in the

    Job. The Job Manager Task''s typical purpose is to control and/or monitor Job
    execution, for

    example by deciding what additional Tasks to run, determining when the work is
    complete, etc.

    (However, a Job Manager Task is not restricted to these activities - it is a fully-fledged
    Task

    in the system and perform whatever actions are required for the Job.) For example,
    a Job

    Manager Task might download a file specified as a parameter, analyze the contents
    of that file

    and submit additional Tasks based on those contents.'
  signature: 'job_manager_task: _models.BatchJobManagerTask | None'
- uid: azure.batch.models.BatchJobCreateContent.job_preparation_task
  name: job_preparation_task
  summary: 'The Job Preparation Task. If a Job has a Job Preparation Task, the Batch
    service will run the

    Job Preparation Task on a Node before starting any Tasks of that Job on that Compute
    Node.'
  signature: 'job_preparation_task: _models.BatchJobPreparationTask | None'
- uid: azure.batch.models.BatchJobCreateContent.job_release_task
  name: job_release_task
  summary: 'The Job Release Task. A Job Release Task cannot be specified without also
    specifying a Job

    Preparation Task for the Job. The Batch service runs the Job Release Task on the
    Nodes that

    have run the Job Preparation Task. The primary purpose of the Job Release Task
    is to undo

    changes to Compute Nodes made by the Job Preparation Task. Example activities
    include deleting

    local files, or shutting down services that were started as part of Job preparation.'
  signature: 'job_release_task: _models.BatchJobReleaseTask | None'
- uid: azure.batch.models.BatchJobCreateContent.max_parallel_tasks
  name: max_parallel_tasks
  summary: 'The maximum number of tasks that can be executed in parallel for the job.
    The value of

    maxParallelTasks must be -1 or greater than 0 if specified. If not specified,
    the default value

    is -1, which means there''s no limit to the number of tasks that can be run at
    once. You can

    update a job''s maxParallelTasks after it has been created using the update job
    API.'
  signature: 'max_parallel_tasks: int | None'
- uid: azure.batch.models.BatchJobCreateContent.metadata
  name: metadata
  summary: 'A list of name-value pairs associated with the Job as metadata. The Batch
    service does not

    assign any meaning to metadata; it is solely for the use of user code.'
  signature: 'metadata: List[_models.MetadataItem] | None'
- uid: azure.batch.models.BatchJobCreateContent.network_configuration
  name: network_configuration
  summary: The network configuration for the Job.
  signature: 'network_configuration: _models.BatchJobNetworkConfiguration | None'
- uid: azure.batch.models.BatchJobCreateContent.on_all_tasks_complete
  name: on_all_tasks_complete
  summary: 'The action the Batch service should take when all Tasks in the Job are
    in the completed state.

    Note that if a Job contains no Tasks, then all Tasks are considered complete.
    This option is

    therefore most commonly used with a Job Manager task; if you want to use automatic
    Job

    termination without a Job Manager, you should initially set onAllTasksComplete
    to noaction and

    update the Job properties to set onAllTasksComplete to terminatejob once you have
    finished

    adding Tasks. The default is noaction. Known values are: "noaction" and "terminatejob".'
  signature: 'on_all_tasks_complete: str | _models.OnAllBatchTasksComplete | None'
- uid: azure.batch.models.BatchJobCreateContent.on_task_failure
  name: on_task_failure
  summary: 'The action the Batch service should take when any Task in the Job fails.
    A Task is considered

    to have failed if has a failureInfo. A failureInfo is set if the Task completes
    with a non-zero

    exit code after exhausting its retry count, or if there was an error starting
    the Task, for

    example due to a resource file download error. The default is noaction. Known
    values are:

    "noaction" and "performexitoptionsjobaction".'
  signature: 'on_task_failure: str | _models.OnBatchTaskFailure | None'
- uid: azure.batch.models.BatchJobCreateContent.pool_info
  name: pool_info
  summary: The Pool on which the Batch service runs the Job's Tasks. Required.
  signature: 'pool_info: _models.BatchPoolInfo'
- uid: azure.batch.models.BatchJobCreateContent.priority
  name: priority
  summary: 'The priority of the Job. Priority values can range from -1000 to 1000,
    with -1000 being the

    lowest priority and 1000 being the highest priority. The default value is 0.'
  signature: 'priority: int | None'
- uid: azure.batch.models.BatchJobCreateContent.uses_task_dependencies
  name: uses_task_dependencies
  summary: Whether Tasks in the Job can define dependencies on each other. The default
    is false.
  signature: 'uses_task_dependencies: bool | None'
