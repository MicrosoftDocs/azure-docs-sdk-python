### YamlMime:PythonClass
uid: azure.batch.models.ExitConditions
name: ExitConditions
fullName: azure.batch.models.ExitConditions
module: azure.batch.models
summary: Specifies how the Batch service should respond when the Task completes.
constructor:
  syntax: 'ExitConditions(*args: Any, **kwargs: Any)'
variables:
- description: 'A list of individual Task exit codes and how the Batch service should
    respond

    to them.'
  name: exit_codes
  types:
  - <xref:list>[<xref:azure.batch.models.ExitCodeMapping>]
- description: 'A list of Task exit code ranges and how the Batch service should

    respond to them.'
  name: exit_code_ranges
  types:
  - <xref:list>[<xref:azure.batch.models.ExitCodeRangeMapping>]
- description: 'How the Batch service should respond if the Task fails to start due

    to an error.'
  name: pre_processing_error
  types:
  - <xref:azure.batch.models.ExitOptions>
- description: 'How the Batch service should respond if a file upload error occurs.
    If

    the Task exited with an exit code that was specified via exitCodes or exitCodeRanges,
    and then

    encountered a file upload error, then the action specified by the exit code takes
    precedence.'
  name: file_upload_error
  types:
  - <xref:azure.batch.models.ExitOptions>
- description: 'How the Batch service should respond if the Task fails with an exit
    condition

    not covered by any of the other properties. This value is used if the Task exits
    with any

    nonzero exit code not listed in the exitCodes or exitCodeRanges collection, with
    a

    pre-processing error if the preProcessingError property is not present, or with
    a file upload

    error if the fileUploadError property is not present. If you want non-default
    behavior on exit

    code 0, you must list it explicitly using the exitCodes or exitCodeRanges collection.'
  name: default
  types:
  - <xref:azure.batch.models.ExitOptions>
methods:
- uid: azure.batch.models.ExitConditions.as_dict
  name: as_dict
  summary: Return a dict that can be JSONify using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.ExitConditions.clear
  name: clear
  signature: clear() -> None
- uid: azure.batch.models.ExitConditions.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.ExitConditions.get
  name: get
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.ExitConditions.items
  name: items
  signature: items() -> ItemsView[str, Any]
- uid: azure.batch.models.ExitConditions.keys
  name: keys
  signature: keys() -> KeysView[str]
- uid: azure.batch.models.ExitConditions.pop
  name: pop
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.ExitConditions.popitem
  name: popitem
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.ExitConditions.setdefault
  name: setdefault
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.ExitConditions.update
  name: update
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.ExitConditions.values
  name: values
  signature: values() -> ValuesView[Any]
attributes:
- uid: azure.batch.models.ExitConditions.default
  name: default
  summary: 'How the Batch service should respond if the Task fails with an exit condition
    not covered by

    any of the other properties. This value is used if the Task exits with any nonzero
    exit code

    not listed in the exitCodes or exitCodeRanges collection, with a pre-processing
    error if the

    preProcessingError property is not present, or with a file upload error if the
    fileUploadError

    property is not present. If you want non-default behavior on exit code 0, you
    must list it

    explicitly using the exitCodes or exitCodeRanges collection.'
  signature: 'default: _models.ExitOptions | None'
- uid: azure.batch.models.ExitConditions.exit_code_ranges
  name: exit_code_ranges
  summary: A list of Task exit code ranges and how the Batch service should respond
    to them.
  signature: 'exit_code_ranges: List[_models.ExitCodeRangeMapping] | None'
- uid: azure.batch.models.ExitConditions.exit_codes
  name: exit_codes
  summary: A list of individual Task exit codes and how the Batch service should respond
    to them.
  signature: 'exit_codes: List[_models.ExitCodeMapping] | None'
- uid: azure.batch.models.ExitConditions.file_upload_error
  name: file_upload_error
  summary: 'How the Batch service should respond if a file upload error occurs. If
    the Task exited with an

    exit code that was specified via exitCodes or exitCodeRanges, and then encountered
    a file

    upload error, then the action specified by the exit code takes precedence.'
  signature: 'file_upload_error: _models.ExitOptions | None'
- uid: azure.batch.models.ExitConditions.pre_processing_error
  name: pre_processing_error
  summary: How the Batch service should respond if the Task fails to start due to
    an error.
  signature: 'pre_processing_error: _models.ExitOptions | None'
