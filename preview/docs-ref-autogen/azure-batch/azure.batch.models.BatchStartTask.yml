### YamlMime:PythonClass
uid: azure.batch.models.BatchStartTask
name: BatchStartTask
fullName: azure.batch.models.BatchStartTask
module: azure.batch.models
summary: 'Batch will retry Tasks when a recovery operation is triggered on a Node.

  Examples of recovery operations include (but are not limited to) when an

  unhealthy Node is rebooted or a Compute Node disappeared due to host failure.

  Retries due to recovery operations are independent of and are not counted

  against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal

  retry due to a recovery operation may occur. Because of this, all Tasks should

  be idempotent. This means Tasks need to tolerate being interrupted and

  restarted without causing any corruption or duplicate data. The best practice

  for long running Tasks is to use some form of checkpointing. In some cases the

  StartTask may be re-run even though the Compute Node was not rebooted. Special

  care should be taken to avoid StartTasks which create breakaway process or

  install/launch services from the StartTask working directory, as this will

  block Batch from being able to re-run the StartTask.


  All required parameters must be populated in order to send to server.'
constructor:
  syntax: 'BatchStartTask(*args: Any, **kwargs: Any)'
variables:
- description: 'The command line of the StartTask. The command line does not run under
    a

    shell, and therefore cannot take advantage of shell features such as environment
    variable

    expansion. If you want to take advantage of such features, you should invoke the
    shell in the

    command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand"
    in

    Linux. If the command line refers to file paths, it should use a relative path
    (relative to the

    Task working directory), or use the Batch provided environment variable

    ([https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables](https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables)).

    Required.'
  name: command_line
  types:
  - <xref:str>
- description: 'The settings for the container under which the StartTask runs. When

    this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR
    (the root of

    Azure Batch directories on the node) are mapped into the container, all Task environment

    variables are mapped into the container, and the Task command line is executed
    in the

    container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might
    not be

    reflected to the host disk, meaning that Batch file APIs will not be able to access
    those

    files.'
  name: container_settings
  types:
  - <xref:azure.batch.models.BatchTaskContainerSettings>
- description: 'A list of files that the Batch service will download to the Compute
    Node

    before running the command line.  There is a maximum size for the list of resource
    files. When

    the max size is exceeded, the request will fail and the response error code will
    be

    RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be
    reduced in size.

    This can be achieved using .zip files, Application Packages, or Docker Containers.
    Files listed

    under this element are located in the Task''s working directory.'
  name: resource_files
  types:
  - <xref:list>[<xref:azure.batch.models.ResourceFile>]
- description: A list of environment variable settings for the StartTask.
  name: environment_settings
  types:
  - <xref:list>[<xref:azure.batch.models.EnvironmentSetting>]
- description: 'The user identity under which the StartTask runs. If omitted, the
    Task

    runs as a non-administrative user unique to the Task.'
  name: user_identity
  types:
  - <xref:azure.batch.models.UserIdentity>
- description: 'The maximum number of times the Task may be retried. The Batch

    service retries a Task if its exit code is nonzero. Note that this value specifically
    controls

    the number of retries. The Batch service will try the Task once, and may then
    retry up to this

    limit. For example, if the maximum retry count is 3, Batch tries the Task up to
    4 times (one

    initial try and 3 retries). If the maximum retry count is 0, the Batch service
    does not retry

    the Task. If the maximum retry count is -1, the Batch service retries the Task
    without limit,

    however this is not recommended for a start task or any task. The default value
    is 0 (no

    retries).'
  name: max_task_retry_count
  types:
  - <xref:int>
- description: 'Whether the Batch service should wait for the StartTask to complete

    successfully (that is, to exit with exit code 0) before scheduling any Tasks on
    the Compute

    Node. If true and the StartTask fails on a Node, the Batch service retries the
    StartTask up to

    its maximum retry count (maxTaskRetryCount). If the Task has still not completed
    successfully

    after all retries, then the Batch service marks the Node unusable, and will not
    schedule Tasks

    to it. This condition can be detected via the Compute Node state and failure info
    details. If

    false, the Batch service will not wait for the StartTask to complete. In this
    case, other Tasks

    can start executing on the Compute Node while the StartTask is still running;
    and even if the

    StartTask fails, new Tasks will continue to be scheduled on the Compute Node.
    The default is

    true.'
  name: wait_for_success
  types:
  - <xref:bool>
methods:
- uid: azure.batch.models.BatchStartTask.as_dict
  name: as_dict
  summary: Return a dict that can be JSONify using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.BatchStartTask.clear
  name: clear
  signature: clear() -> None
- uid: azure.batch.models.BatchStartTask.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.BatchStartTask.get
  name: get
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.BatchStartTask.items
  name: items
  signature: items() -> ItemsView[str, Any]
- uid: azure.batch.models.BatchStartTask.keys
  name: keys
  signature: keys() -> KeysView[str]
- uid: azure.batch.models.BatchStartTask.pop
  name: pop
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchStartTask.popitem
  name: popitem
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.BatchStartTask.setdefault
  name: setdefault
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchStartTask.update
  name: update
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.BatchStartTask.values
  name: values
  signature: values() -> ValuesView[Any]
attributes:
- uid: azure.batch.models.BatchStartTask.command_line
  name: command_line
  summary: 'The command line of the StartTask. The command line does not run under
    a shell, and therefore

    cannot take advantage of shell features such as environment variable expansion.
    If you want to

    take advantage of such features, you should invoke the shell in the command line,
    for example

    using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the
    command line

    refers to file paths, it should use a relative path (relative to the Task working
    directory),

    or use the Batch provided environment variable

    ([https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables](https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables)).

    Required.'
  signature: 'command_line: str'
- uid: azure.batch.models.BatchStartTask.container_settings
  name: container_settings
  summary: 'The settings for the container under which the StartTask runs. When this
    is specified, all

    directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch
    directories

    on the node) are mapped into the container, all Task environment variables are
    mapped into the

    container, and the Task command line is executed in the container. Files produced
    in the

    container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host
    disk, meaning

    that Batch file APIs will not be able to access those files.'
  signature: 'container_settings: _models.BatchTaskContainerSettings | None'
- uid: azure.batch.models.BatchStartTask.environment_settings
  name: environment_settings
  summary: A list of environment variable settings for the StartTask.
  signature: 'environment_settings: List[_models.EnvironmentSetting] | None'
- uid: azure.batch.models.BatchStartTask.max_task_retry_count
  name: max_task_retry_count
  summary: 'The maximum number of times the Task may be retried. The Batch service
    retries a Task if its

    exit code is nonzero. Note that this value specifically controls the number of
    retries. The

    Batch service will try the Task once, and may then retry up to this limit. For
    example, if the

    maximum retry count is 3, Batch tries the Task up to 4 times (one initial try
    and 3 retries).

    If the maximum retry count is 0, the Batch service does not retry the Task. If
    the maximum

    retry count is -1, the Batch service retries the Task without limit, however this
    is not

    recommended for a start task or any task. The default value is 0 (no retries).'
  signature: 'max_task_retry_count: int | None'
- uid: azure.batch.models.BatchStartTask.resource_files
  name: resource_files
  summary: 'A list of files that the Batch service will download to the Compute Node
    before running the

    command line.  There is a maximum size for the list of resource files. When the
    max size is

    exceeded, the request will fail and the response error code will be RequestEntityTooLarge.
    If

    this occurs, the collection of ResourceFiles must be reduced in size. This can
    be achieved

    using .zip files, Application Packages, or Docker Containers. Files listed under
    this element

    are located in the Task''s working directory.'
  signature: 'resource_files: List[_models.ResourceFile] | None'
- uid: azure.batch.models.BatchStartTask.user_identity
  name: user_identity
  summary: 'The user identity under which the StartTask runs. If omitted, the Task
    runs as a

    non-administrative user unique to the Task.'
  signature: 'user_identity: _models.UserIdentity | None'
- uid: azure.batch.models.BatchStartTask.wait_for_success
  name: wait_for_success
  summary: 'Whether the Batch service should wait for the StartTask to complete successfully
    (that is, to

    exit with exit code 0) before scheduling any Tasks on the Compute Node. If true
    and the

    StartTask fails on a Node, the Batch service retries the StartTask up to its maximum
    retry

    count (maxTaskRetryCount). If the Task has still not completed successfully after
    all retries,

    then the Batch service marks the Node unusable, and will not schedule Tasks to
    it. This

    condition can be detected via the Compute Node state and failure info details.
    If false, the

    Batch service will not wait for the StartTask to complete. In this case, other
    Tasks can start

    executing on the Compute Node while the StartTask is still running; and even if
    the StartTask

    fails, new Tasks will continue to be scheduled on the Compute Node. The default
    is true.'
  signature: 'wait_for_success: bool | None'
