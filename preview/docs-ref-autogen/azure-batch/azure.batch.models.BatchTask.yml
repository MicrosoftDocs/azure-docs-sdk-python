### YamlMime:PythonClass
uid: azure.batch.models.BatchTask
name: BatchTask
fullName: azure.batch.models.BatchTask
module: azure.batch.models
summary: 'Batch will retry Tasks when a recovery operation is triggered on a Node.

  Examples of recovery operations include (but are not limited to) when an

  unhealthy Node is rebooted or a Compute Node disappeared due to host failure.

  Retries due to recovery operations are independent of and are not counted

  against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal

  retry due to a recovery operation may occur. Because of this, all Tasks should

  be idempotent. This means Tasks need to tolerate being interrupted and

  restarted without causing any corruption or duplicate data. The best practice

  for long running Tasks is to use some form of checkpointing.


  Readonly variables are only populated by the server, and will be ignored when sending
  a request.'
constructor:
  syntax: 'BatchTask(*args: Any, **kwargs: Any)'
variables:
- description: 'A string that uniquely identifies the Task within the Job. The ID
    can contain any

    combination of alphanumeric characters including hyphens and underscores, and
    cannot contain

    more than 64 characters.'
  name: id
  types:
  - <xref:str>
- description: 'A display name for the Task. The display name need not be unique and
    can

    contain any Unicode characters up to a maximum length of 1024.'
  name: display_name
  types:
  - <xref:str>
- description: The URL of the Task.
  name: url
  types:
  - <xref:str>
- description: 'The ETag of the Task. This is an opaque string. You can use it to
    detect whether

    the Task has changed between requests. In particular, you can be pass the ETag
    when updating a

    Task to specify that your changes should take effect only if nobody else has modified
    the Task

    in the meantime.'
  name: e_tag
  types:
  - <xref:str>
- description: The last modified time of the Task.
  name: last_modified
  types:
  - <xref:datetime.datetime>
- description: The creation time of the Task.
  name: creation_time
  types:
  - <xref:datetime.datetime>
- description: How the Batch service should respond when the Task completes.
  name: exit_conditions
  types:
  - <xref:azure.batch.models.ExitConditions>
- description: 'The current state of the Task. Known values are: "active", "preparing",
    "running",

    and "completed".'
  name: state
  types:
  - <xref:str>
  - <xref:azure.batch.models.BatchTaskState>
- description: The time at which the Task entered its current state.
  name: state_transition_time
  types:
  - <xref:datetime.datetime>
- description: 'The previous state of the Task. This property is not set if the Task
    is

    in its initial Active state. Known values are: "active", "preparing", "running",
    and

    "completed".'
  name: previous_state
  types:
  - <xref:str>
  - <xref:azure.batch.models.BatchTaskState>
- description: 'The time at which the Task entered its previous state.

    This property is not set if the Task is in its initial Active state.'
  name: previous_state_transition_time
  types:
  - <xref:datetime.datetime>
- description: 'The command line of the Task. For multi-instance Tasks, the command
    line is

    executed as the primary Task, after the primary Task and all subtasks have finished
    executing

    the coordination command line. The command line does not run under a shell, and
    therefore

    cannot take advantage of shell features such as environment variable expansion.
    If you want to

    take advantage of such features, you should invoke the shell in the command line,
    for example

    using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the
    command line

    refers to file paths, it should use a relative path (relative to the Task working
    directory),

    or use the Batch provided environment variable

    ([https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables](https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables)).'
  name: command_line
  types:
  - <xref:str>
- description: 'The settings for the container under which the Task runs. If the Pool

    that will run this Task has containerConfiguration set, this must be set as well.
    If the Pool

    that will run this Task doesn''t have containerConfiguration set, this must not
    be set. When

    this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR
    (the root of

    Azure Batch directories on the node) are mapped into the container, all Task environment

    variables are mapped into the container, and the Task command line is executed
    in the

    container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might
    not be

    reflected to the host disk, meaning that Batch file APIs will not be able to access
    those

    files.'
  name: container_settings
  types:
  - <xref:azure.batch.models.BatchTaskContainerSettings>
- description: 'A list of files that the Batch service will download to the Compute
    Node

    before running the command line. For multi-instance Tasks, the resource files
    will only be

    downloaded to the Compute Node on which the primary Task is executed. There is
    a maximum size

    for the list of resource files.  When the max size is exceeded, the request will
    fail and the

    response error code will be RequestEntityTooLarge. If this occurs, the collection
    of

    ResourceFiles must be reduced in size. This can be achieved using .zip files,
    Application

    Packages, or Docker Containers.'
  name: resource_files
  types:
  - <xref:list>[<xref:azure.batch.models.ResourceFile>]
- description: 'A list of files that the Batch service will upload from the Compute
    Node

    after running the command line. For multi-instance Tasks, the files will only
    be uploaded from

    the Compute Node on which the primary Task is executed.'
  name: output_files
  types:
  - <xref:list>[<xref:azure.batch.models.OutputFile>]
- description: A list of environment variable settings for the Task.
  name: environment_settings
  types:
  - <xref:list>[<xref:azure.batch.models.EnvironmentSetting>]
- description: 'A locality hint that can be used by the Batch service to select a
    Compute

    Node on which to start the new Task.'
  name: affinity_info
  types:
  - <xref:azure.batch.models.AffinityInfo>
- description: The execution constraints that apply to this Task.
  name: constraints
  types:
  - <xref:azure.batch.models.BatchTaskConstraints>
- description: 'The number of scheduling slots that the Task requires to run. The
    default

    is 1. A Task can only be scheduled to run on a compute node if the node has enough
    free

    scheduling slots available. For multi-instance Tasks, this must be 1.'
  name: required_slots
  types:
  - <xref:int>
- description: 'The user identity under which the Task runs. If omitted, the Task
    runs as

    a non-administrative user unique to the Task.'
  name: user_identity
  types:
  - <xref:azure.batch.models.UserIdentity>
- description: Information about the execution of the Task.
  name: execution_info
  types:
  - <xref:azure.batch.models.BatchTaskExecutionInfo>
- description: Information about the Compute Node on which the Task ran.
  name: node_info
  types:
  - <xref:azure.batch.models.BatchNodeInfo>
- description: 'An object that indicates that the Task is a multi-instance Task,

    and contains information about how to run the multi-instance Task.'
  name: multi_instance_settings
  types:
  - <xref:azure.batch.models.MultiInstanceSettings>
- description: Resource usage statistics for the Task.
  name: stats
  types:
  - <xref:azure.batch.models.BatchTaskStatistics>
- description: 'The Tasks that this Task depends on. This Task will not be scheduled
    until

    all Tasks that it depends on have completed successfully. If any of those Tasks
    fail and

    exhaust their retry counts, this Task will never be scheduled.'
  name: depends_on
  types:
  - <xref:azure.batch.models.BatchTaskDependencies>
- description: 'A list of Packages that the Batch service will deploy to

    the Compute Node before running the command line. Application packages are downloaded
    and

    deployed to a shared directory, not the Task working directory. Therefore, if
    a referenced

    package is already on the Node, and is up to date, then it is not re-downloaded;
    the existing

    copy on the Compute Node is used. If a referenced Package cannot be installed,
    for example

    because the package has been deleted or because download failed, the Task fails.'
  name: application_package_references
  types:
  - <xref:list>[<xref:azure.batch.models.BatchApplicationPackageReference>]
- description: 'The settings for an authentication token that the Task can

    use to perform Batch service operations. If this property is set, the Batch service
    provides

    the Task with an authentication token which can be used to authenticate Batch
    service

    operations without requiring an Account access key. The token is provided via
    the

    AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the Task
    can carry out

    using the token depend on the settings. For example, a Task can request Job permissions
    in

    order to add other Tasks to the Job, or check the status of the Job or of other
    Tasks under the

    Job.'
  name: authentication_token_settings
  types:
  - <xref:azure.batch.models.AuthenticationTokenSettings>
methods:
- uid: azure.batch.models.BatchTask.as_dict
  name: as_dict
  summary: Return a dict that can be JSONify using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.BatchTask.clear
  name: clear
  signature: clear() -> None
- uid: azure.batch.models.BatchTask.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.BatchTask.get
  name: get
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.BatchTask.items
  name: items
  signature: items() -> ItemsView[str, Any]
- uid: azure.batch.models.BatchTask.keys
  name: keys
  signature: keys() -> KeysView[str]
- uid: azure.batch.models.BatchTask.pop
  name: pop
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchTask.popitem
  name: popitem
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.BatchTask.setdefault
  name: setdefault
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchTask.update
  name: update
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.BatchTask.values
  name: values
  signature: values() -> ValuesView[Any]
attributes:
- uid: azure.batch.models.BatchTask.affinity_info
  name: affinity_info
  summary: 'A locality hint that can be used by the Batch service to select a Compute
    Node on which to

    start the new Task.'
  signature: 'affinity_info: _models.AffinityInfo | None'
- uid: azure.batch.models.BatchTask.application_package_references
  name: application_package_references
  summary: 'A list of Packages that the Batch service will deploy to the Compute Node
    before running the

    command line. Application packages are downloaded and deployed to a shared directory,
    not the

    Task working directory. Therefore, if a referenced package is already on the Node,
    and is up to

    date, then it is not re-downloaded; the existing copy on the Compute Node is used.
    If a

    referenced Package cannot be installed, for example because the package has been
    deleted or

    because download failed, the Task fails.'
  signature: 'application_package_references: List[_models.BatchApplicationPackageReference]
    | None'
- uid: azure.batch.models.BatchTask.authentication_token_settings
  name: authentication_token_settings
  summary: 'The settings for an authentication token that the Task can use to perform
    Batch service

    operations. If this property is set, the Batch service provides the Task with
    an authentication

    token which can be used to authenticate Batch service operations without requiring
    an Account

    access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment
    variable.

    The operations that the Task can carry out using the token depend on the settings.
    For example,

    a Task can request Job permissions in order to add other Tasks to the Job, or
    check the status

    of the Job or of other Tasks under the Job.'
  signature: 'authentication_token_settings: _models.AuthenticationTokenSettings |
    None'
- uid: azure.batch.models.BatchTask.command_line
  name: command_line
  summary: 'The command line of the Task. For multi-instance Tasks, the command line
    is executed as the

    primary Task, after the primary Task and all subtasks have finished executing
    the coordination

    command line. The command line does not run under a shell, and therefore cannot
    take advantage

    of shell features such as environment variable expansion. If you want to take
    advantage of such

    features, you should invoke the shell in the command line, for example using "cmd
    /c

    MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line
    refers to file

    paths, it should use a relative path (relative to the Task working directory),
    or use the Batch

    provided environment variable

    ([https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables](https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables)).'
  signature: 'command_line: str | None'
- uid: azure.batch.models.BatchTask.constraints
  name: constraints
  summary: The execution constraints that apply to this Task.
  signature: 'constraints: _models.BatchTaskConstraints | None'
- uid: azure.batch.models.BatchTask.container_settings
  name: container_settings
  summary: 'The settings for the container under which the Task runs. If the Pool
    that will run this Task

    has containerConfiguration set, this must be set as well. If the Pool that will
    run this Task

    doesn''t have containerConfiguration set, this must not be set. When this is specified,
    all

    directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch
    directories

    on the node) are mapped into the container, all Task environment variables are
    mapped into the

    container, and the Task command line is executed in the container. Files produced
    in the

    container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host
    disk, meaning

    that Batch file APIs will not be able to access those files.'
  signature: 'container_settings: _models.BatchTaskContainerSettings | None'
- uid: azure.batch.models.BatchTask.creation_time
  name: creation_time
  summary: The creation time of the Task.
  signature: 'creation_time: datetime | None'
- uid: azure.batch.models.BatchTask.depends_on
  name: depends_on
  summary: 'The Tasks that this Task depends on. This Task will not be scheduled until
    all Tasks that it

    depends on have completed successfully. If any of those Tasks fail and exhaust
    their retry

    counts, this Task will never be scheduled.'
  signature: 'depends_on: _models.BatchTaskDependencies | None'
- uid: azure.batch.models.BatchTask.display_name
  name: display_name
  summary: 'A display name for the Task. The display name need not be unique and can
    contain any Unicode

    characters up to a maximum length of 1024.'
  signature: 'display_name: str | None'
- uid: azure.batch.models.BatchTask.e_tag
  name: e_tag
  summary: 'The ETag of the Task. This is an opaque string. You can use it to detect
    whether the Task has

    changed between requests. In particular, you can be pass the ETag when updating
    a Task to

    specify that your changes should take effect only if nobody else has modified
    the Task in the

    meantime.'
  signature: 'e_tag: str | None'
- uid: azure.batch.models.BatchTask.environment_settings
  name: environment_settings
  summary: A list of environment variable settings for the Task.
  signature: 'environment_settings: List[_models.EnvironmentSetting] | None'
- uid: azure.batch.models.BatchTask.execution_info
  name: execution_info
  summary: Information about the execution of the Task.
  signature: 'execution_info: _models.BatchTaskExecutionInfo | None'
- uid: azure.batch.models.BatchTask.exit_conditions
  name: exit_conditions
  summary: How the Batch service should respond when the Task completes.
  signature: 'exit_conditions: _models.ExitConditions | None'
- uid: azure.batch.models.BatchTask.id
  name: id
  summary: 'A string that uniquely identifies the Task within the Job. The ID can
    contain any combination

    of alphanumeric characters including hyphens and underscores, and cannot contain
    more than 64

    characters.'
  signature: 'id: str | None'
- uid: azure.batch.models.BatchTask.last_modified
  name: last_modified
  summary: The last modified time of the Task.
  signature: 'last_modified: datetime | None'
- uid: azure.batch.models.BatchTask.multi_instance_settings
  name: multi_instance_settings
  summary: 'An object that indicates that the Task is a multi-instance Task, and contains
    information about

    how to run the multi-instance Task.'
  signature: 'multi_instance_settings: _models.MultiInstanceSettings | None'
- uid: azure.batch.models.BatchTask.node_info
  name: node_info
  summary: Information about the Compute Node on which the Task ran.
  signature: 'node_info: _models.BatchNodeInfo | None'
- uid: azure.batch.models.BatchTask.output_files
  name: output_files
  summary: 'A list of files that the Batch service will upload from the Compute Node
    after running the

    command line. For multi-instance Tasks, the files will only be uploaded from the
    Compute Node

    on which the primary Task is executed.'
  signature: 'output_files: List[_models.OutputFile] | None'
- uid: azure.batch.models.BatchTask.previous_state
  name: previous_state
  summary: 'The previous state of the Task. This property is not set if the Task is
    in its initial Active

    state. Known values are: "active", "preparing", "running", and "completed".'
  signature: 'previous_state: str | _models.BatchTaskState | None'
- uid: azure.batch.models.BatchTask.previous_state_transition_time
  name: previous_state_transition_time
  summary: 'The time at which the Task entered its previous state. This property is
    not set if the Task is

    in its initial Active state.'
  signature: 'previous_state_transition_time: datetime | None'
- uid: azure.batch.models.BatchTask.required_slots
  name: required_slots
  summary: 'The number of scheduling slots that the Task requires to run. The default
    is 1. A Task can only

    be scheduled to run on a compute node if the node has enough free scheduling slots
    available.

    For multi-instance Tasks, this must be 1.'
  signature: 'required_slots: int | None'
- uid: azure.batch.models.BatchTask.resource_files
  name: resource_files
  summary: 'A list of files that the Batch service will download to the Compute Node
    before running the

    command line. For multi-instance Tasks, the resource files will only be downloaded
    to the

    Compute Node on which the primary Task is executed. There is a maximum size for
    the list of

    resource files.  When the max size is exceeded, the request will fail and the
    response error

    code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles
    must be

    reduced in size. This can be achieved using .zip files, Application Packages,
    or Docker

    Containers.'
  signature: 'resource_files: List[_models.ResourceFile] | None'
- uid: azure.batch.models.BatchTask.state
  name: state
  summary: '"active", "preparing", "running", and

    "completed".'
  signature: 'state: str | _models.BatchTaskState | None'
- uid: azure.batch.models.BatchTask.state_transition_time
  name: state_transition_time
  summary: The time at which the Task entered its current state.
  signature: 'state_transition_time: datetime | None'
- uid: azure.batch.models.BatchTask.stats
  name: stats
  summary: Resource usage statistics for the Task.
  signature: 'stats: _models.BatchTaskStatistics | None'
- uid: azure.batch.models.BatchTask.url
  name: url
  summary: The URL of the Task.
  signature: 'url: str | None'
- uid: azure.batch.models.BatchTask.user_identity
  name: user_identity
  summary: 'The user identity under which the Task runs. If omitted, the Task runs
    as a non-administrative

    user unique to the Task.'
  signature: 'user_identity: _models.UserIdentity | None'
