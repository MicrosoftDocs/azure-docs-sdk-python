### YamlMime:PythonClass
uid: azure.batch.models.BatchTaskCounts
name: BatchTaskCounts
fullName: azure.batch.models.BatchTaskCounts
module: azure.batch.models
summary: 'The Task counts for a Job.


  All required parameters must be populated in order to send to server.'
constructor:
  syntax: 'BatchTaskCounts(*args: Any, **kwargs: Any)'
variables:
- description: The number of Tasks in the active state. Required.
  name: active
  types:
  - <xref:int>
- description: The number of Tasks in the running or preparing state. Required.
  name: running
  types:
  - <xref:int>
- description: The number of Tasks in the completed state. Required.
  name: completed
  types:
  - <xref:int>
- description: 'The number of Tasks which succeeded. A Task succeeds if its result
    (found in

    the executionInfo property) is ''success''. Required.'
  name: succeeded
  types:
  - <xref:int>
- description: 'The number of Tasks which failed. A Task fails if its result (found
    in the

    executionInfo property) is ''failure''. Required.'
  name: failed
  types:
  - <xref:int>
methods:
- uid: azure.batch.models.BatchTaskCounts.as_dict
  name: as_dict
  summary: Return a dict that can be JSONify using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.BatchTaskCounts.clear
  name: clear
  signature: clear() -> None
- uid: azure.batch.models.BatchTaskCounts.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.BatchTaskCounts.get
  name: get
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.BatchTaskCounts.items
  name: items
  signature: items() -> ItemsView[str, Any]
- uid: azure.batch.models.BatchTaskCounts.keys
  name: keys
  signature: keys() -> KeysView[str]
- uid: azure.batch.models.BatchTaskCounts.pop
  name: pop
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchTaskCounts.popitem
  name: popitem
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.BatchTaskCounts.setdefault
  name: setdefault
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchTaskCounts.update
  name: update
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.BatchTaskCounts.values
  name: values
  signature: values() -> ValuesView[Any]
attributes:
- uid: azure.batch.models.BatchTaskCounts.active
  name: active
  summary: The number of Tasks in the active state. Required.
  signature: 'active: int'
- uid: azure.batch.models.BatchTaskCounts.completed
  name: completed
  summary: The number of Tasks in the completed state. Required.
  signature: 'completed: int'
- uid: azure.batch.models.BatchTaskCounts.failed
  name: failed
  summary: 'The number of Tasks which failed. A Task fails if its result (found in
    the executionInfo

    property) is ''failure''. Required.'
  signature: 'failed: int'
- uid: azure.batch.models.BatchTaskCounts.running
  name: running
  summary: The number of Tasks in the running or preparing state. Required.
  signature: 'running: int'
- uid: azure.batch.models.BatchTaskCounts.succeeded
  name: succeeded
  summary: 'The number of Tasks which succeeded. A Task succeeds if its result (found
    in the executionInfo

    property) is ''success''. Required.'
  signature: 'succeeded: int'
