### YamlMime:PythonClass
uid: azure.batch.models.BatchJobSpecification
name: BatchJobSpecification
fullName: azure.batch.models.BatchJobSpecification
module: azure.batch.models
summary: 'Specifies details of the Jobs to be created on a schedule.


  All required parameters must be populated in order to send to server.'
constructor:
  syntax: 'BatchJobSpecification(*args: Any, **kwargs: Any)'
variables:
- description: 'The priority of Jobs created under this schedule. Priority values
    can range

    from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest
    priority.

    The default value is 0. This priority is used as the default for all Jobs under
    the Job

    Schedule. You can update a Job''s priority after it has been created using by
    using the update

    Job API.'
  name: priority
  types:
  - <xref:int>
- description: 'Whether Tasks in this job can be preempted by other high priority

    jobs. If the value is set to True, other high priority jobs submitted to the system
    will take

    precedence and will be able requeue tasks from this job. You can update a job''s

    allowTaskPreemption after it has been created using the update job API.'
  name: allow_task_preemption
  types:
  - <xref:bool>
- description: 'The maximum number of tasks that can be executed in parallel for the

    job. The value of maxParallelTasks must be -1 or greater than 0 if specified.
    If not specified,

    the default value is -1, which means there''s no limit to the number of tasks
    that can be run at

    once. You can update a job''s maxParallelTasks after it has been created using
    the update job

    API.'
  name: max_parallel_tasks
  types:
  - <xref:int>
- description: 'The display name for Jobs created under this schedule. The name need
    not be

    unique and can contain any Unicode characters up to a maximum length of 1024.'
  name: display_name
  types:
  - <xref:str>
- description: 'Whether Tasks in the Job can define dependencies on each other.

    The default is false.'
  name: uses_task_dependencies
  types:
  - <xref:bool>
- description: 'The action the Batch service should take when all Tasks in a Job

    created under this schedule are in the completed state. Note that if a Job contains
    no Tasks,

    then all Tasks are considered complete. This option is therefore most commonly
    used with a Job

    Manager task; if you want to use automatic Job termination without a Job Manager,
    you should

    initially set onAllTasksComplete to noaction and update the Job properties to
    set

    onAllTasksComplete to terminatejob once you have finished adding Tasks. The default
    is

    noaction. Known values are: "noaction" and "terminatejob".'
  name: on_all_tasks_complete
  types:
  - <xref:str>
  - <xref:azure.batch.models.OnAllBatchTasksComplete>
- description: 'The action the Batch service should take when any Task fails in a
    Job

    created under this schedule. A Task is considered to have failed if it have failed
    if has a

    failureInfo. A failureInfo is set if the Task completes with a non-zero exit code
    after

    exhausting its retry count, or if there was an error starting the Task, for example
    due to a

    resource file download error. The default is noaction. Known values are: "noaction"
    and

    "performexitoptionsjobaction".'
  name: on_task_failure
  types:
  - <xref:str>
  - <xref:azure.batch.models.OnBatchTaskFailure>
- description: The network configuration for the Job.
  name: network_configuration
  types:
  - <xref:azure.batch.models.BatchJobNetworkConfiguration>
- description: The execution constraints for Jobs created under this schedule.
  name: constraints
  types:
  - <xref:azure.batch.models.BatchJobConstraints>
- description: 'The details of a Job Manager Task to be launched when a Job is started

    under this schedule. If the Job does not specify a Job Manager Task, the user
    must explicitly

    add Tasks to the Job using the Task API. If the Job does specify a Job Manager
    Task, the Batch

    service creates the Job Manager Task when the Job is created, and will try to
    schedule the Job

    Manager Task before scheduling other Tasks in the Job.'
  name: job_manager_task
  types:
  - <xref:azure.batch.models.BatchJobManagerTask>
- description: 'The Job Preparation Task for Jobs created under this schedule. If
    a

    Job has a Job Preparation Task, the Batch service will run the Job Preparation
    Task on a Node

    before starting any Tasks of that Job on that Compute Node.'
  name: job_preparation_task
  types:
  - <xref:azure.batch.models.BatchJobPreparationTask>
- description: 'The Job Release Task for Jobs created under this schedule. The primary

    purpose of the Job Release Task is to undo changes to Nodes made by the Job Preparation
    Task.

    Example activities include deleting local files, or shutting down services that
    were started as

    part of Job preparation. A Job Release Task cannot be specified without also specifying
    a Job

    Preparation Task for the Job. The Batch service runs the Job Release Task on the
    Compute Nodes

    that have run the Job Preparation Task.'
  name: job_release_task
  types:
  - <xref:azure.batch.models.BatchJobReleaseTask>
- description: 'A list of common environment variable settings. These

    environment variables are set for all Tasks in Jobs created under this schedule
    (including the

    Job Manager, Job Preparation and Job Release Tasks). Individual Tasks can override
    an

    environment setting specified here by specifying the same setting name with a
    different value.'
  name: common_environment_settings
  types:
  - <xref:list>[<xref:azure.batch.models.EnvironmentSetting>]
- description: 'The Pool on which the Batch service runs the Tasks of Jobs created
    under this

    schedule. Required.'
  name: pool_info
  types:
  - <xref:azure.batch.models.BatchPoolInfo>
- description: 'A list of name-value pairs associated with each Job created under
    this schedule

    as metadata. The Batch service does not assign any meaning to metadata; it is
    solely for the

    use of user code.'
  name: metadata
  types:
  - <xref:list>[<xref:azure.batch.models.MetadataItem>]
methods:
- uid: azure.batch.models.BatchJobSpecification.as_dict
  name: as_dict
  summary: Return a dict that can be JSONify using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.BatchJobSpecification.clear
  name: clear
  signature: clear() -> None
- uid: azure.batch.models.BatchJobSpecification.copy
  name: copy
  signature: copy() -> Model
- uid: azure.batch.models.BatchJobSpecification.get
  name: get
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.batch.models.BatchJobSpecification.items
  name: items
  signature: items() -> ItemsView[str, Any]
- uid: azure.batch.models.BatchJobSpecification.keys
  name: keys
  signature: keys() -> KeysView[str]
- uid: azure.batch.models.BatchJobSpecification.pop
  name: pop
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchJobSpecification.popitem
  name: popitem
  signature: popitem() -> Tuple[str, Any]
- uid: azure.batch.models.BatchJobSpecification.setdefault
  name: setdefault
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.batch.models.BatchJobSpecification.update
  name: update
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.batch.models.BatchJobSpecification.values
  name: values
  signature: values() -> ValuesView[Any]
attributes:
- uid: azure.batch.models.BatchJobSpecification.allow_task_preemption
  name: allow_task_preemption
  summary: 'Whether Tasks in this job can be preempted by other high priority jobs.
    If the value is set to

    True, other high priority jobs submitted to the system will take precedence and
    will be able

    requeue tasks from this job. You can update a job''s allowTaskPreemption after
    it has been

    created using the update job API.'
  signature: 'allow_task_preemption: bool | None'
- uid: azure.batch.models.BatchJobSpecification.common_environment_settings
  name: common_environment_settings
  summary: 'A list of common environment variable settings. These environment variables
    are set for all

    Tasks in Jobs created under this schedule (including the Job Manager, Job Preparation
    and Job

    Release Tasks). Individual Tasks can override an environment setting specified
    here by

    specifying the same setting name with a different value.'
  signature: 'common_environment_settings: List[_models.EnvironmentSetting] | None'
- uid: azure.batch.models.BatchJobSpecification.constraints
  name: constraints
  summary: The execution constraints for Jobs created under this schedule.
  signature: 'constraints: _models.BatchJobConstraints | None'
- uid: azure.batch.models.BatchJobSpecification.display_name
  name: display_name
  summary: 'The display name for Jobs created under this schedule. The name need not
    be unique and can

    contain any Unicode characters up to a maximum length of 1024.'
  signature: 'display_name: str | None'
- uid: azure.batch.models.BatchJobSpecification.job_manager_task
  name: job_manager_task
  summary: 'The details of a Job Manager Task to be launched when a Job is started
    under this schedule. If

    the Job does not specify a Job Manager Task, the user must explicitly add Tasks
    to the Job

    using the Task API. If the Job does specify a Job Manager Task, the Batch service
    creates the

    Job Manager Task when the Job is created, and will try to schedule the Job Manager
    Task before

    scheduling other Tasks in the Job.'
  signature: 'job_manager_task: _models.BatchJobManagerTask | None'
- uid: azure.batch.models.BatchJobSpecification.job_preparation_task
  name: job_preparation_task
  summary: 'The Job Preparation Task for Jobs created under this schedule. If a Job
    has a Job Preparation

    Task, the Batch service will run the Job Preparation Task on a Node before starting
    any Tasks

    of that Job on that Compute Node.'
  signature: 'job_preparation_task: _models.BatchJobPreparationTask | None'
- uid: azure.batch.models.BatchJobSpecification.job_release_task
  name: job_release_task
  summary: 'The Job Release Task for Jobs created under this schedule. The primary
    purpose of the Job

    Release Task is to undo changes to Nodes made by the Job Preparation Task. Example
    activities

    include deleting local files, or shutting down services that were started as part
    of Job

    preparation. A Job Release Task cannot be specified without also specifying a
    Job Preparation

    Task for the Job. The Batch service runs the Job Release Task on the Compute Nodes
    that have

    run the Job Preparation Task.'
  signature: 'job_release_task: _models.BatchJobReleaseTask | None'
- uid: azure.batch.models.BatchJobSpecification.max_parallel_tasks
  name: max_parallel_tasks
  summary: 'The maximum number of tasks that can be executed in parallel for the job.
    The value of

    maxParallelTasks must be -1 or greater than 0 if specified. If not specified,
    the default value

    is -1, which means there''s no limit to the number of tasks that can be run at
    once. You can

    update a job''s maxParallelTasks after it has been created using the update job
    API.'
  signature: 'max_parallel_tasks: int | None'
- uid: azure.batch.models.BatchJobSpecification.metadata
  name: metadata
  summary: 'A list of name-value pairs associated with each Job created under this
    schedule as metadata.

    The Batch service does not assign any meaning to metadata; it is solely for the
    use of user

    code.'
  signature: 'metadata: List[_models.MetadataItem] | None'
- uid: azure.batch.models.BatchJobSpecification.network_configuration
  name: network_configuration
  summary: The network configuration for the Job.
  signature: 'network_configuration: _models.BatchJobNetworkConfiguration | None'
- uid: azure.batch.models.BatchJobSpecification.on_all_tasks_complete
  name: on_all_tasks_complete
  summary: 'The action the Batch service should take when all Tasks in a Job created
    under this schedule

    are in the completed state. Note that if a Job contains no Tasks, then all Tasks
    are considered

    complete. This option is therefore most commonly used with a Job Manager task;
    if you want to

    use automatic Job termination without a Job Manager, you should initially set

    onAllTasksComplete to noaction and update the Job properties to set onAllTasksComplete
    to

    terminatejob once you have finished adding Tasks. The default is noaction. Known
    values are:

    "noaction" and "terminatejob".'
  signature: 'on_all_tasks_complete: str | _models.OnAllBatchTasksComplete | None'
- uid: azure.batch.models.BatchJobSpecification.on_task_failure
  name: on_task_failure
  summary: 'The action the Batch service should take when any Task fails in a Job
    created under this

    schedule. A Task is considered to have failed if it have failed if has a failureInfo.
    A

    failureInfo is set if the Task completes with a non-zero exit code after exhausting
    its retry

    count, or if there was an error starting the Task, for example due to a resource
    file download

    error. The default is noaction. Known values are: "noaction" and

    "performexitoptionsjobaction".'
  signature: 'on_task_failure: str | _models.OnBatchTaskFailure | None'
- uid: azure.batch.models.BatchJobSpecification.pool_info
  name: pool_info
  summary: 'The Pool on which the Batch service runs the Tasks of Jobs created under
    this schedule.

    Required.'
  signature: 'pool_info: _models.BatchPoolInfo'
- uid: azure.batch.models.BatchJobSpecification.priority
  name: priority
  summary: 'The priority of Jobs created under this schedule. Priority values can
    range from -1000 to 1000,

    with -1000 being the lowest priority and 1000 being the highest priority. The
    default value is

    0. This priority is used as the default for all Jobs under the Job Schedule. You
    can update a

    Job''s priority after it has been created using by using the update Job API.'
  signature: 'priority: int | None'
- uid: azure.batch.models.BatchJobSpecification.uses_task_dependencies
  name: uses_task_dependencies
  summary: Whether Tasks in the Job can define dependencies on each other. The default
    is false.
  signature: 'uses_task_dependencies: bool | None'
