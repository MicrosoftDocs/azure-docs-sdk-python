### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.clear_legal_hold
  - azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.create
  - azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.create_or_update_immutability_policy
  - azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.delete
  - azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.delete_immutability_policy
  - azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.extend_immutability_policy
  - azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.get
  - azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.get_immutability_policy
  - azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.lease
  - azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.list
  - azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.lock_immutability_policy
  - azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.set_legal_hold
  - azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.update
  - azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.models
  class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: BlobContainersOperations
  summary: 'BlobContainersOperations async operations.


    You should not instantiate this class directly. Instead, you should create a Client
    instance that

    instantiates it for you and attaches it as an attribute.'
  syntax:
    content: BlobContainersOperations(client, config, serializer, deserializer) ->
      None
    parameters:
    - description: Client for service requests.
      id: client
    - description: Configuration of service client.
      id: config
    - description: An object model serializer.
      id: serializer
    - description: An object model deserializer.
      id: deserializer
    variables:
    - description: Alias to model classes used in this operation group.
      id: models
  type: class
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
- class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.clear_legal_hold
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: 'clear_legal_hold(resource_group_name: str, account_name: str, container_name:
    str, legal_hold: azure.mgmt.storage.v2019_04_01.models._models_py3.LegalHold,
    **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.LegalHold'
  namewithoutparameters: clear_legal_hold
  summary: 'Clears legal hold tags. Clearing the same or non-existent tag results
    in an idempotent

    operation. ClearLegalHold clears out only the specified tags in the request.'
  syntax:
    content: 'clear_legal_hold(resource_group_name: str, account_name: str, container_name:
      str, legal_hold: azure.mgmt.storage.v2019_04_01.models._models_py3.LegalHold,
      **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.LegalHold'
    parameters:
    - description: 'The name of the resource group within the user''s subscription.
        The

        name is case insensitive.'
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: 'The name of the storage account within the specified resource
        group.

        Storage account names must be between 3 and 24 characters in length and use
        numbers and lower-

        case letters only.'
      id: account_name
      isRequired: true
      type:
      - str
    - description: 'The name of the blob container within the specified storage account.

        Blob container names must be between 3 and 63 characters in length and use
        numbers, lower-case

        letters and dash (-) only. Every dash (-) character must be immediately preceded
        and followed

        by a letter or number.'
      id: container_name
      isRequired: true
      type:
      - str
    - description: The LegalHold property that will be clear from a blob container.
      id: legal_hold
      isRequired: true
      type:
      - azure.mgmt.storage.v2019_04_01.models.LegalHold
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: LegalHold, or the result of cls(response)
      type:
      - azure.mgmt.storage.v2019_04_01.models.LegalHold
  type: method
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.clear_legal_hold
- class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.create
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: 'create(resource_group_name: str, account_name: str, container_name: str,
    blob_container: azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer,
    **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer'
  namewithoutparameters: create
  summary: 'Creates a new container under the specified account as described by request
    body. The container

    resource includes metadata and properties for that container. It does not include
    a list of the

    blobs contained by the container.'
  syntax:
    content: 'create(resource_group_name: str, account_name: str, container_name:
      str, blob_container: azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer,
      **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer'
    parameters:
    - description: 'The name of the resource group within the user''s subscription.
        The

        name is case insensitive.'
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: 'The name of the storage account within the specified resource
        group.

        Storage account names must be between 3 and 24 characters in length and use
        numbers and lower-

        case letters only.'
      id: account_name
      isRequired: true
      type:
      - str
    - description: 'The name of the blob container within the specified storage account.

        Blob container names must be between 3 and 63 characters in length and use
        numbers, lower-case

        letters and dash (-) only. Every dash (-) character must be immediately preceded
        and followed

        by a letter or number.'
      id: container_name
      isRequired: true
      type:
      - str
    - description: Properties of the blob container to create.
      id: blob_container
      isRequired: true
      type:
      - azure.mgmt.storage.v2019_04_01.models.BlobContainer
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: BlobContainer, or the result of cls(response)
      type:
      - azure.mgmt.storage.v2019_04_01.models.BlobContainer
  type: method
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.create
- class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.create_or_update_immutability_policy
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: 'create_or_update_immutability_policy(resource_group_name: str, account_name:
    str, container_name: str, if_match: typing.Union[str, NoneType] = None, parameters:
    typing.Union[_ForwardRef(''models.ImmutabilityPolicy''), NoneType] = None, **kwargs)
    -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
  namewithoutparameters: create_or_update_immutability_policy
  summary: 'Creates or updates an unlocked immutability policy. ETag in If-Match is
    honored if given but

    not required for this operation.'
  syntax:
    content: 'create_or_update_immutability_policy(resource_group_name: str, account_name:
      str, container_name: str, if_match: typing.Union[str, NoneType] = None, parameters:
      typing.Union[_ForwardRef(''models.ImmutabilityPolicy''), NoneType] = None, **kwargs)
      -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
    parameters:
    - description: 'The name of the resource group within the user''s subscription.
        The

        name is case insensitive.'
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: 'The name of the storage account within the specified resource
        group.

        Storage account names must be between 3 and 24 characters in length and use
        numbers and lower-

        case letters only.'
      id: account_name
      isRequired: true
      type:
      - str
    - description: 'The name of the blob container within the specified storage account.

        Blob container names must be between 3 and 63 characters in length and use
        numbers, lower-case

        letters and dash (-) only. Every dash (-) character must be immediately preceded
        and followed

        by a letter or number.'
      id: container_name
      isRequired: true
      type:
      - str
    - description: 'The entity state (ETag) version of the immutability policy to
        update. A value

        of "*" can be used to apply the operation only if the immutability policy
        already exists. If

        omitted, this operation will always be applied.'
      id: if_match
      isRequired: true
      type:
      - str
    - description: 'The ImmutabilityPolicy Properties that will be created or updated
        to a blob

        container.'
      id: parameters
      isRequired: true
      type:
      - azure.mgmt.storage.v2019_04_01.models.ImmutabilityPolicy
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: ImmutabilityPolicy, or the result of cls(response)
      type:
      - azure.mgmt.storage.v2019_04_01.models.ImmutabilityPolicy
  type: method
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.create_or_update_immutability_policy
- class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.delete
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: 'delete(resource_group_name: str, account_name: str, container_name: str,
    **kwargs) -> None'
  namewithoutparameters: delete
  summary: Deletes specified container under its account.
  syntax:
    content: 'delete(resource_group_name: str, account_name: str, container_name:
      str, **kwargs) -> None'
    parameters:
    - description: 'The name of the resource group within the user''s subscription.
        The

        name is case insensitive.'
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: 'The name of the storage account within the specified resource
        group.

        Storage account names must be between 3 and 24 characters in length and use
        numbers and lower-

        case letters only.'
      id: account_name
      isRequired: true
      type:
      - str
    - description: 'The name of the blob container within the specified storage account.

        Blob container names must be between 3 and 63 characters in length and use
        numbers, lower-case

        letters and dash (-) only. Every dash (-) character must be immediately preceded
        and followed

        by a letter or number.'
      id: container_name
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: None, or the result of cls(response)
      type:
      - None
  type: method
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.delete
- class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.delete_immutability_policy
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: 'delete_immutability_policy(resource_group_name: str, account_name: str, container_name:
    str, if_match: str, **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
  namewithoutparameters: delete_immutability_policy
  summary: 'Aborts an unlocked immutability policy. The response of delete has

    immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for
    this

    operation. Deleting a locked immutability policy is not allowed, only way is to
    delete the

    container after deleting all blobs inside the container.'
  syntax:
    content: 'delete_immutability_policy(resource_group_name: str, account_name: str,
      container_name: str, if_match: str, **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
    parameters:
    - description: 'The name of the resource group within the user''s subscription.
        The

        name is case insensitive.'
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: 'The name of the storage account within the specified resource
        group.

        Storage account names must be between 3 and 24 characters in length and use
        numbers and lower-

        case letters only.'
      id: account_name
      isRequired: true
      type:
      - str
    - description: 'The name of the blob container within the specified storage account.

        Blob container names must be between 3 and 63 characters in length and use
        numbers, lower-case

        letters and dash (-) only. Every dash (-) character must be immediately preceded
        and followed

        by a letter or number.'
      id: container_name
      isRequired: true
      type:
      - str
    - description: 'The entity state (ETag) version of the immutability policy to
        update. A value

        of "*" can be used to apply the operation only if the immutability policy
        already exists. If

        omitted, this operation will always be applied.'
      id: if_match
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: ImmutabilityPolicy, or the result of cls(response)
      type:
      - azure.mgmt.storage.v2019_04_01.models.ImmutabilityPolicy
  type: method
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.delete_immutability_policy
- class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.extend_immutability_policy
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: 'extend_immutability_policy(resource_group_name: str, account_name: str, container_name:
    str, if_match: str, parameters: typing.Union[_ForwardRef(''models.ImmutabilityPolicy''),
    NoneType] = None, **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
  namewithoutparameters: extend_immutability_policy
  summary: 'Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy.
    The only

    action allowed on a Locked policy will be this action. ETag in If-Match is required
    for this

    operation.'
  syntax:
    content: 'extend_immutability_policy(resource_group_name: str, account_name: str,
      container_name: str, if_match: str, parameters: typing.Union[_ForwardRef(''models.ImmutabilityPolicy''),
      NoneType] = None, **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
    parameters:
    - description: 'The name of the resource group within the user''s subscription.
        The

        name is case insensitive.'
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: 'The name of the storage account within the specified resource
        group.

        Storage account names must be between 3 and 24 characters in length and use
        numbers and lower-

        case letters only.'
      id: account_name
      isRequired: true
      type:
      - str
    - description: 'The name of the blob container within the specified storage account.

        Blob container names must be between 3 and 63 characters in length and use
        numbers, lower-case

        letters and dash (-) only. Every dash (-) character must be immediately preceded
        and followed

        by a letter or number.'
      id: container_name
      isRequired: true
      type:
      - str
    - description: 'The entity state (ETag) version of the immutability policy to
        update. A value

        of "*" can be used to apply the operation only if the immutability policy
        already exists. If

        omitted, this operation will always be applied.'
      id: if_match
      isRequired: true
      type:
      - str
    - description: 'The ImmutabilityPolicy Properties that will be extended for a
        blob

        container.'
      id: parameters
      isRequired: true
      type:
      - azure.mgmt.storage.v2019_04_01.models.ImmutabilityPolicy
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: ImmutabilityPolicy, or the result of cls(response)
      type:
      - azure.mgmt.storage.v2019_04_01.models.ImmutabilityPolicy
  type: method
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.extend_immutability_policy
- class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.get
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: 'get(resource_group_name: str, account_name: str, container_name: str, **kwargs)
    -> azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer'
  namewithoutparameters: get
  summary: Gets properties of a specified container.
  syntax:
    content: 'get(resource_group_name: str, account_name: str, container_name: str,
      **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer'
    parameters:
    - description: 'The name of the resource group within the user''s subscription.
        The

        name is case insensitive.'
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: 'The name of the storage account within the specified resource
        group.

        Storage account names must be between 3 and 24 characters in length and use
        numbers and lower-

        case letters only.'
      id: account_name
      isRequired: true
      type:
      - str
    - description: 'The name of the blob container within the specified storage account.

        Blob container names must be between 3 and 63 characters in length and use
        numbers, lower-case

        letters and dash (-) only. Every dash (-) character must be immediately preceded
        and followed

        by a letter or number.'
      id: container_name
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: BlobContainer, or the result of cls(response)
      type:
      - azure.mgmt.storage.v2019_04_01.models.BlobContainer
  type: method
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.get
- class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.get_immutability_policy
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: 'get_immutability_policy(resource_group_name: str, account_name: str, container_name:
    str, if_match: typing.Union[str, NoneType] = None, **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
  namewithoutparameters: get_immutability_policy
  summary: 'Gets the existing immutability policy along with the corresponding ETag
    in response headers and

    body.'
  syntax:
    content: 'get_immutability_policy(resource_group_name: str, account_name: str,
      container_name: str, if_match: typing.Union[str, NoneType] = None, **kwargs)
      -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
    parameters:
    - description: 'The name of the resource group within the user''s subscription.
        The

        name is case insensitive.'
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: 'The name of the storage account within the specified resource
        group.

        Storage account names must be between 3 and 24 characters in length and use
        numbers and lower-

        case letters only.'
      id: account_name
      isRequired: true
      type:
      - str
    - description: 'The name of the blob container within the specified storage account.

        Blob container names must be between 3 and 63 characters in length and use
        numbers, lower-case

        letters and dash (-) only. Every dash (-) character must be immediately preceded
        and followed

        by a letter or number.'
      id: container_name
      isRequired: true
      type:
      - str
    - description: 'The entity state (ETag) version of the immutability policy to
        update. A value

        of "*" can be used to apply the operation only if the immutability policy
        already exists. If

        omitted, this operation will always be applied.'
      id: if_match
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: ImmutabilityPolicy, or the result of cls(response)
      type:
      - azure.mgmt.storage.v2019_04_01.models.ImmutabilityPolicy
  type: method
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.get_immutability_policy
- class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.lease
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: 'lease(resource_group_name: str, account_name: str, container_name: str, parameters:
    typing.Union[_ForwardRef(''models.LeaseContainerRequest''), NoneType] = None,
    **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.LeaseContainerResponse'
  namewithoutparameters: lease
  summary: 'The Lease Container operation establishes and manages a lock on a container
    for delete

    operations. The lock duration can be 15 to 60 seconds, or can be infinite.'
  syntax:
    content: 'lease(resource_group_name: str, account_name: str, container_name: str,
      parameters: typing.Union[_ForwardRef(''models.LeaseContainerRequest''), NoneType]
      = None, **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.LeaseContainerResponse'
    parameters:
    - description: 'The name of the resource group within the user''s subscription.
        The

        name is case insensitive.'
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: 'The name of the storage account within the specified resource
        group.

        Storage account names must be between 3 and 24 characters in length and use
        numbers and lower-

        case letters only.'
      id: account_name
      isRequired: true
      type:
      - str
    - description: 'The name of the blob container within the specified storage account.

        Blob container names must be between 3 and 63 characters in length and use
        numbers, lower-case

        letters and dash (-) only. Every dash (-) character must be immediately preceded
        and followed

        by a letter or number.'
      id: container_name
      isRequired: true
      type:
      - str
    - description: Lease Container request body.
      id: parameters
      isRequired: true
      type:
      - azure.mgmt.storage.v2019_04_01.models.LeaseContainerRequest
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: LeaseContainerResponse, or the result of cls(response)
      type:
      - azure.mgmt.storage.v2019_04_01.models.LeaseContainerResponse
  type: method
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.lease
- class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.list
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: 'list(resource_group_name: str, account_name: str, skip_token: typing.Union[str,
    NoneType] = None, maxpagesize: typing.Union[str, NoneType] = None, filter: typing.Union[str,
    NoneType] = None, **kwargs) -> typing.AsyncIterable[_ForwardRef(''models.ListContainerItems'')]'
  namewithoutparameters: list
  summary: "Lists all containers and does not support a prefix like data plane. Also\
    \ SRP today does not\nreturn continuation token.\n\n      param resource_group_name:\n\
    \         The name of the resource group within the user's subscription. The\n\
    \n   name is case insensitive.\n      type resource_group_name:\n         str\n\
    \n      param account_name:\n         The name of the storage account within the\
    \ specified resource group.\n\n   Storage account names must be between 3 and\
    \ 24 characters in length and use numbers and lower-\n   case letters only.\n\n\
    \      type account_name:\n         str\n\n      param skip_token:\n         Optional.\
    \ Continuation token for the list operation.\n\n      type skip_token:\n     \
    \    str\n\n      param maxpagesize:\n         Optional. Specified maximum number\
    \ of containers that can be included in\n\n   the list.\n      type maxpagesize:\n\
    \         str\n\n      param filter:\n         Optional. When specified, only\
    \ container names starting with the filter will be\n\n   listed.\n      type filter:\n\
    \         str\n\n      keyword callable cls:\n         A custom type or function\
    \ that will be passed the direct response\n\n      return:\n         An iterator\
    \ like instance of either ListContainerItems or the result of cls(response)\n\n\
    \      rtype:\n         ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.storage.v2019_04_01.models.ListContainerItems]\n\
    \n      raises:\n         ~azure.core.exceptions.HttpResponseError"
  syntax:
    content: 'list(resource_group_name: str, account_name: str, skip_token: typing.Union[str,
      NoneType] = None, maxpagesize: typing.Union[str, NoneType] = None, filter: typing.Union[str,
      NoneType] = None, **kwargs) -> typing.AsyncIterable[_ForwardRef(''models.ListContainerItems'')]'
  type: method
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.list
- class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.lock_immutability_policy
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: 'lock_immutability_policy(resource_group_name: str, account_name: str, container_name:
    str, if_match: str, **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
  namewithoutparameters: lock_immutability_policy
  summary: 'Sets the ImmutabilityPolicy to Locked state. The only action allowed on
    a Locked policy is

    ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.'
  syntax:
    content: 'lock_immutability_policy(resource_group_name: str, account_name: str,
      container_name: str, if_match: str, **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
    parameters:
    - description: 'The name of the resource group within the user''s subscription.
        The

        name is case insensitive.'
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: 'The name of the storage account within the specified resource
        group.

        Storage account names must be between 3 and 24 characters in length and use
        numbers and lower-

        case letters only.'
      id: account_name
      isRequired: true
      type:
      - str
    - description: 'The name of the blob container within the specified storage account.

        Blob container names must be between 3 and 63 characters in length and use
        numbers, lower-case

        letters and dash (-) only. Every dash (-) character must be immediately preceded
        and followed

        by a letter or number.'
      id: container_name
      isRequired: true
      type:
      - str
    - description: 'The entity state (ETag) version of the immutability policy to
        update. A value

        of "*" can be used to apply the operation only if the immutability policy
        already exists. If

        omitted, this operation will always be applied.'
      id: if_match
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: ImmutabilityPolicy, or the result of cls(response)
      type:
      - azure.mgmt.storage.v2019_04_01.models.ImmutabilityPolicy
  type: method
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.lock_immutability_policy
- class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.set_legal_hold
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: 'set_legal_hold(resource_group_name: str, account_name: str, container_name:
    str, legal_hold: azure.mgmt.storage.v2019_04_01.models._models_py3.LegalHold,
    **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.LegalHold'
  namewithoutparameters: set_legal_hold
  summary: 'Sets legal hold tags. Setting the same tag results in an idempotent operation.
    SetLegalHold

    follows an append pattern and does not clear out the existing tags that are not
    specified in

    the request.'
  syntax:
    content: 'set_legal_hold(resource_group_name: str, account_name: str, container_name:
      str, legal_hold: azure.mgmt.storage.v2019_04_01.models._models_py3.LegalHold,
      **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.LegalHold'
    parameters:
    - description: 'The name of the resource group within the user''s subscription.
        The

        name is case insensitive.'
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: 'The name of the storage account within the specified resource
        group.

        Storage account names must be between 3 and 24 characters in length and use
        numbers and lower-

        case letters only.'
      id: account_name
      isRequired: true
      type:
      - str
    - description: 'The name of the blob container within the specified storage account.

        Blob container names must be between 3 and 63 characters in length and use
        numbers, lower-case

        letters and dash (-) only. Every dash (-) character must be immediately preceded
        and followed

        by a letter or number.'
      id: container_name
      isRequired: true
      type:
      - str
    - description: The LegalHold property that will be set to a blob container.
      id: legal_hold
      isRequired: true
      type:
      - azure.mgmt.storage.v2019_04_01.models.LegalHold
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: LegalHold, or the result of cls(response)
      type:
      - azure.mgmt.storage.v2019_04_01.models.LegalHold
  type: method
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.set_legal_hold
- class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.update
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: 'update(resource_group_name: str, account_name: str, container_name: str,
    blob_container: azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer,
    **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer'
  namewithoutparameters: update
  summary: 'Updates container properties as specified in request body. Properties
    not mentioned in the

    request will be unchanged. Update fails if the specified container doesn''t already
    exist.'
  syntax:
    content: 'update(resource_group_name: str, account_name: str, container_name:
      str, blob_container: azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer,
      **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer'
    parameters:
    - description: 'The name of the resource group within the user''s subscription.
        The

        name is case insensitive.'
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: 'The name of the storage account within the specified resource
        group.

        Storage account names must be between 3 and 24 characters in length and use
        numbers and lower-

        case letters only.'
      id: account_name
      isRequired: true
      type:
      - str
    - description: 'The name of the blob container within the specified storage account.

        Blob container names must be between 3 and 63 characters in length and use
        numbers, lower-case

        letters and dash (-) only. Every dash (-) character must be immediately preceded
        and followed

        by a letter or number.'
      id: container_name
      isRequired: true
      type:
      - str
    - description: Properties to update for the blob container.
      id: blob_container
      isRequired: true
      type:
      - azure.mgmt.storage.v2019_04_01.models.BlobContainer
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: BlobContainer, or the result of cls(response)
      type:
      - azure.mgmt.storage.v2019_04_01.models.BlobContainer
  type: method
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.update
- class: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.models
  langs:
  - python
  module: azure.mgmt.storage.v2019_04_01.aio.operations_async
  name: models
  syntax:
    content: models = <module 'azure.mgmt.storage.v2019_04_01.models' from 'c:\\hostedtoolcache\\windows\\python\\3.6.8\\x64\\lib\\site-packages\\azure\\mgmt\\storage\\v2019_04_01\\models\\__init__.py'>
  type: attribute
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.models
references:
- fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.clear_legal_hold
  isExternal: false
  name: 'clear_legal_hold(resource_group_name: str, account_name: str, container_name:
    str, legal_hold: azure.mgmt.storage.v2019_04_01.models._models_py3.LegalHold,
    **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.LegalHold'
  parent: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.clear_legal_hold
- fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.create
  isExternal: false
  name: 'create(resource_group_name: str, account_name: str, container_name: str,
    blob_container: azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer,
    **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer'
  parent: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.create
- fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.create_or_update_immutability_policy
  isExternal: false
  name: 'create_or_update_immutability_policy(resource_group_name: str, account_name:
    str, container_name: str, if_match: typing.Union[str, NoneType] = None, parameters:
    typing.Union[_ForwardRef(''models.ImmutabilityPolicy''), NoneType] = None, **kwargs)
    -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
  parent: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.create_or_update_immutability_policy
- fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.delete
  isExternal: false
  name: 'delete(resource_group_name: str, account_name: str, container_name: str,
    **kwargs) -> None'
  parent: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.delete
- fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.delete_immutability_policy
  isExternal: false
  name: 'delete_immutability_policy(resource_group_name: str, account_name: str, container_name:
    str, if_match: str, **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
  parent: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.delete_immutability_policy
- fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.extend_immutability_policy
  isExternal: false
  name: 'extend_immutability_policy(resource_group_name: str, account_name: str, container_name:
    str, if_match: str, parameters: typing.Union[_ForwardRef(''models.ImmutabilityPolicy''),
    NoneType] = None, **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
  parent: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.extend_immutability_policy
- fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.get
  isExternal: false
  name: 'get(resource_group_name: str, account_name: str, container_name: str, **kwargs)
    -> azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer'
  parent: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.get
- fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.get_immutability_policy
  isExternal: false
  name: 'get_immutability_policy(resource_group_name: str, account_name: str, container_name:
    str, if_match: typing.Union[str, NoneType] = None, **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
  parent: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.get_immutability_policy
- fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.lease
  isExternal: false
  name: 'lease(resource_group_name: str, account_name: str, container_name: str, parameters:
    typing.Union[_ForwardRef(''models.LeaseContainerRequest''), NoneType] = None,
    **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.LeaseContainerResponse'
  parent: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.lease
- fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.list
  isExternal: false
  name: 'list(resource_group_name: str, account_name: str, skip_token: typing.Union[str,
    NoneType] = None, maxpagesize: typing.Union[str, NoneType] = None, filter: typing.Union[str,
    NoneType] = None, **kwargs) -> typing.AsyncIterable[_ForwardRef(''models.ListContainerItems'')]'
  parent: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.list
- fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.lock_immutability_policy
  isExternal: false
  name: 'lock_immutability_policy(resource_group_name: str, account_name: str, container_name:
    str, if_match: str, **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.ImmutabilityPolicy'
  parent: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.lock_immutability_policy
- fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.set_legal_hold
  isExternal: false
  name: 'set_legal_hold(resource_group_name: str, account_name: str, container_name:
    str, legal_hold: azure.mgmt.storage.v2019_04_01.models._models_py3.LegalHold,
    **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.LegalHold'
  parent: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.set_legal_hold
- fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.update
  isExternal: false
  name: 'update(resource_group_name: str, account_name: str, container_name: str,
    blob_container: azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer,
    **kwargs) -> azure.mgmt.storage.v2019_04_01.models._models_py3.BlobContainer'
  parent: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.update
- fullName: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.models
  isExternal: false
  name: models
  parent: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations
  uid: azure.mgmt.storage.v2019_04_01.aio.operations_async.BlobContainersOperations.models
