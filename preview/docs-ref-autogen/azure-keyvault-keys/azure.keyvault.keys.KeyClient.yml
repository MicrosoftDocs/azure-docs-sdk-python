### YamlMime:PythonClass
uid: azure.keyvault.keys.KeyClient
name: KeyClient
fullName: azure.keyvault.keys.KeyClient
module: azure.keyvault.keys
inheritances:
- azure.keyvault.keys._shared.client_base.KeyVaultClientBase
summary: A high-level interface for managing a vault's keys.
constructor:
  syntax: 'KeyClient(vault_url: str, credential: TokenCredential, **kwargs)'
  parameters:
  - name: vault_url
    description: 'URL of the vault the client will access. This is also called the
      vault''s "DNS Name".

      You should validate that this URL references a valid Key Vault or Managed HSM
      resource.

      See [https://aka.ms/azsdk/blog/vault-uri](https://aka.ms/azsdk/blog/vault-uri)
      for details.'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'An object which can provide an access token for the vault, such
      as a credential from

      <xref:azure.identity>'
    isRequired: true
    types:
    - <xref:azure.core.credentials.TokenCredential>
  - name: api_version
    description: Version of the service API to use. Defaults to the most recent.
    types:
    - <xref:azure.keyvault.keys.ApiVersion>
  - name: verify_challenge_resource
    description: 'Whether to verify the authentication challenge resource matches
      the Key

      Vault or Managed HSM domain. Defaults to True.'
    types:
    - <xref:bool>
examples:
- "Create a new `KeyClient`<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\
  \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\\
  44\\\\azure-keyvault-keys-4.9.0b1\\\\tests\\\\test_samples_keys.py\", \"xml:space\"\
  : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\":\
  \ {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.identity\
  \ import DefaultAzureCredential\n   from azure.keyvault.keys import KeyClient\n\n\
  \   # Create a KeyClient using default Azure credentials\n   credential = DefaultAzureCredential()\n\
  \   key_client = KeyClient(vault_url, credential)\n\n   ````\n"
methods:
- uid: azure.keyvault.keys.KeyClient.backup_key
  name: backup_key
  summary: 'Back up a key in a protected form useable only by Azure Key Vault.


    Requires keys/backup permission.


    This is intended to allow copying a key from one vault to another. Both vaults
    must be owned by the same Azure

    subscription. Also, backup / restore cannot be performed across geopolitical boundaries.
    For example, a backup

    from a vault in a USA region cannot be restored to a vault in an EU region.'
  signature: 'backup_key(name: str, **kwargs) -> bytes'
  parameters:
  - name: name
    description: The name of the key to back up
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:bytes>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the key doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Get a key backup<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\\
    44\\\\azure-keyvault-keys-4.9.0b1\\\\tests\\\\test_samples_keys.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   # backup key\n\
    \   key_backup = key_client.backup_key(key_name)\n\n   # returns the raw bytes\
    \ of the backed up key\n   print(key_backup)\n\n   ````\n"
- uid: azure.keyvault.keys.KeyClient.begin_delete_key
  name: begin_delete_key
  summary: 'Delete all versions of a key and its cryptographic material.


    Requires keys/delete permission. When this method returns Key Vault has begun
    deleting the key. Deletion may

    take several seconds in a vault with soft-delete enabled. This method therefore
    returns a poller enabling you to

    wait for deletion to complete.'
  signature: 'begin_delete_key(name: str, **kwargs) -> LROPoller[DeletedKey]'
  parameters:
  - name: name
    description: The name of the key to delete.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'A poller for the delete key operation. The poller''s *result* method
      returns the

      <xref:azure.keyvault.keys.DeletedKey> without waiting for deletion to complete.
      If the vault has

      soft-delete enabled and you want to permanently delete the key with <xref:azure.keyvault.keys.KeyClient.purge_deleted_key>,
      call the

      poller''s *wait* method first. It will block until the deletion is complete.
      The *wait* method requires

      keys/get permission.'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.keyvault.keys.DeletedKey>]
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the key doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Delete a key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\44\\\\azure-keyvault-keys-4.9.0b1\\\
    \\tests\\\\test_samples_keys.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   # delete a key\n   deleted_key_poller = key_client.begin_delete_key(key_name)\n\
    \   deleted_key = deleted_key_poller.result()\n\n   print(deleted_key.name)\n\n\
    \   # if the vault has soft-delete enabled, the key's deleted_date,\n   # scheduled\
    \ purge date and recovery id are set\n   print(deleted_key.deleted_date)\n   print(deleted_key.scheduled_purge_date)\n\
    \   print(deleted_key.recovery_id)\n\n   # if you want to block until deletion\
    \ is complete, call wait() on the poller\n   deleted_key_poller.wait()\n\n   ````\n"
- uid: azure.keyvault.keys.KeyClient.begin_recover_deleted_key
  name: begin_recover_deleted_key
  summary: 'Recover a deleted key to its latest version. Possible only in a vault
    with soft-delete enabled.


    Requires keys/recover permission.


    When this method returns Key Vault has begun recovering the key. Recovery may
    take several seconds. This

    method therefore returns a poller enabling you to wait for recovery to complete.
    Waiting is only necessary when

    you want to use the recovered key in another operation immediately.'
  signature: 'begin_recover_deleted_key(name: str, **kwargs) -> LROPoller[KeyVaultKey]'
  parameters:
  - name: name
    description: The name of the deleted key to recover
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'A poller for the recovery operation. The poller''s *result* method
      returns the recovered

      <xref:azure.keyvault.keys.KeyVaultKey> without waiting for recovery to complete.
      If you want to use the

      recovered key immediately, call the poller''s *wait* method, which blocks until
      the key is ready to use. The

      *wait* method requires keys/get permission.'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.keyvault.keys.KeyVaultKey>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Recover a deleted key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\
    \\44\\\\azure-keyvault-keys-4.9.0b1\\\\tests\\\\test_samples_keys.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   # recover\
    \ a deleted key to its latest version (requires soft-delete enabled for the vault)\n\
    \   recover_key_poller = key_client.begin_recover_deleted_key(key_name)\n   recovered_key\
    \ = recover_key_poller.result()\n   print(recovered_key.id)\n   print(recovered_key.name)\n\
    \n   # if you want to block until key is recovered server-side, call wait() on\
    \ the poller\n   recover_key_poller.wait()\n\n   ````\n"
- uid: azure.keyvault.keys.KeyClient.create_ec_key
  name: create_ec_key
  summary: 'Create a new elliptic curve key or, if `name` is already in use, create
    a new version of the key.


    Requires the keys/create permission.'
  signature: 'create_ec_key(name: str, **kwargs) -> KeyVaultKey'
  parameters:
  - name: name
    description: The name for the new key.
    isRequired: true
    types:
    - <xref:str>
  - name: curve
    description: Elliptic curve name. Defaults to the NIST P-256 elliptic curve.
    types:
    - <xref:azure.keyvault.keys.KeyCurveName>
    - <xref:str>
    - <xref:None>
  - name: key_operations
    description: Allowed key operations
    types:
    - <xref:list>[<xref:azure.keyvault.keys.KeyOperation>
    - <xref:str>]
    - <xref:None>
  - name: hardware_protected
    description: 'Whether the key should be created in a hardware security module.

      Defaults to `False`.'
    types:
    - <xref:bool>
    - <xref:None>
  - name: enabled
    description: Whether the key is enabled for use.
    types:
    - <xref:bool>
    - <xref:None>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
    - <xref:None>
  - name: not_before
    description: Not before date of the key in UTC
    types:
    - <xref:datetime.datetime>
    - <xref:None>
  - name: expires_on
    description: Expiry date of the key in UTC
    types:
    - <xref:datetime.datetime>
    - <xref:None>
  - name: exportable
    description: Whether the private key can be exported.
    types:
    - <xref:bool>
    - <xref:None>
  - name: release_policy
    description: The policy rules under which the key can be exported.
    types:
    - <xref:azure.keyvault.keys.KeyReleasePolicy>
    - <xref:None>
  return:
    description: The created key
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Create an elliptic curve key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\
    \\44\\\\azure-keyvault-keys-4.9.0b1\\\\tests\\\\test_samples_keys.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   key_curve\
    \ = \"P-256\"\n\n   # create an EC (Elliptic curve) key with curve specification\n\
    \   # EC key can be created with default curve of 'P-256'\n   ec_key = key_client.create_ec_key(key_name,\
    \ curve=key_curve)\n\n   print(ec_key.id)\n   print(ec_key.properties.version)\n\
    \   print(ec_key.key_type)\n   print(ec_key.key.crv)\n\n   ````\n"
- uid: azure.keyvault.keys.KeyClient.create_key
  name: create_key
  summary: 'Create a key or, if `name` is already in use, create a new version of
    the key.


    Requires keys/create permission.'
  signature: 'create_key(name: str, key_type: str | KeyType, **kwargs) -> KeyVaultKey'
  parameters:
  - name: name
    description: The name of the new key.
    isRequired: true
    types:
    - <xref:str>
  - name: key_type
    description: The type of key to create
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.KeyType>
    - <xref:str>
  - name: size
    description: 'Key size in bits. Applies only to RSA and symmetric keys. Consider
      using

      <xref:azure.keyvault.keys.KeyClient.create_rsa_key> or <xref:azure.keyvault.keys.KeyClient.create_oct_key>
      instead.'
    types:
    - <xref:int>
    - <xref:None>
  - name: curve
    description: 'Elliptic curve name. Applies only to elliptic curve keys. Defaults
      to the NIST P-256

      elliptic curve. To create an elliptic curve key, consider using <xref:azure.keyvault.keys.KeyClient.create_ec_key>
      instead.'
    types:
    - <xref:azure.keyvault.keys.KeyCurveName>
    - <xref:str>
    - <xref:None>
  - name: public_exponent
    description: The RSA public exponent to use. Applies only to RSA keys created
      in a Managed HSM.
    types:
    - <xref:int>
    - <xref:None>
  - name: key_operations
    description: Allowed key operations
    types:
    - <xref:list>[<xref:azure.keyvault.keys.KeyOperation>
    - <xref:str>]
    - <xref:None>
  - name: enabled
    description: Whether the key is enabled for use.
    types:
    - <xref:bool>
    - <xref:None>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
    - <xref:None>
  - name: not_before
    description: Not before date of the key in UTC
    types:
    - <xref:datetime.datetime>
    - <xref:None>
  - name: expires_on
    description: Expiry date of the key in UTC
    types:
    - <xref:datetime.datetime>
    - <xref:None>
  - name: exportable
    description: Whether the private key can be exported.
    types:
    - <xref:bool>
    - <xref:None>
  - name: release_policy
    description: The policy rules under which the key can be exported.
    types:
    - <xref:azure.keyvault.keys.KeyReleasePolicy>
    - <xref:None>
  return:
    description: The created key
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Create a key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\44\\\\azure-keyvault-keys-4.9.0b1\\\
    \\tests\\\\test_samples_keys.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from dateutil import parser as date_parse\n\n\
    \   expires_on = date_parse.parse(\"2050-02-02T08:00:00.000Z\")\n\n   # create\
    \ a key with optional arguments\n   key = key_client.create_key(key_name, KeyType.rsa_hsm,\
    \ expires_on=expires_on)\n\n   print(key.name)\n   print(key.id)\n   print(key.key_type)\n\
    \   print(key.properties.expires_on)\n\n   ````\n"
- uid: azure.keyvault.keys.KeyClient.create_oct_key
  name: create_oct_key
  summary: 'Create a new octet sequence (symmetric) key or, if `name` is in use, create
    a new version of the key.


    Requires the keys/create permission.'
  signature: 'create_oct_key(name: str, **kwargs) -> KeyVaultKey'
  parameters:
  - name: name
    description: The name for the new key.
    isRequired: true
    types:
    - <xref:str>
  - name: size
    description: Key size in bits, for example 128, 192, or 256.
    types:
    - <xref:int>
    - <xref:None>
  - name: key_operations
    description: Allowed key operations.
    types:
    - <xref:list>[<xref:azure.keyvault.keys.KeyOperation>
    - <xref:str>]
    - <xref:None>
  - name: hardware_protected
    description: 'Whether the key should be created in a hardware security module.

      Defaults to `False`.'
    types:
    - <xref:bool>
    - <xref:None>
  - name: enabled
    description: Whether the key is enabled for use.
    types:
    - <xref:bool>
    - <xref:None>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
    - <xref:None>
  - name: not_before
    description: Not before date of the key in UTC
    types:
    - <xref:datetime.datetime>
    - <xref:None>
  - name: expires_on
    description: Expiry date of the key in UTC
    types:
    - <xref:datetime.datetime>
    - <xref:None>
  - name: exportable
    description: Whether the key can be exported.
    types:
    - <xref:bool>
    - <xref:None>
  - name: release_policy
    description: The policy rules under which the key can be exported.
    types:
    - <xref:azure.keyvault.keys.KeyReleasePolicy>
    - <xref:None>
  return:
    description: The created key
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Create an octet sequence (symmetric) key<!--[!code-python[Main](s\\test_samples_keys.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\44\\\\azure-keyvault-keys-4.9.0b1\\\\tests\\\\test_samples_keys.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   key = key_client.create_oct_key(key_name, size=256, hardware_protected=True)\n\
    \n   print(key.id)\n   print(key.name)\n   print(key.key_type)\n\n   ````\n"
- uid: azure.keyvault.keys.KeyClient.create_rsa_key
  name: create_rsa_key
  summary: 'Create a new RSA key or, if `name` is already in use, create a new version
    of the key


    Requires the keys/create permission.'
  signature: 'create_rsa_key(name: str, **kwargs) -> KeyVaultKey'
  parameters:
  - name: name
    description: The name for the new key.
    isRequired: true
    types:
    - <xref:str>
  - name: size
    description: Key size in bits, for example 2048, 3072, or 4096.
    types:
    - <xref:int>
    - <xref:None>
  - name: public_exponent
    description: The RSA public exponent to use. Applies only to RSA keys created
      in a Managed HSM.
    types:
    - <xref:int>
    - <xref:None>
  - name: hardware_protected
    description: 'Whether the key should be created in a hardware security module.

      Defaults to `False`.'
    types:
    - <xref:bool>
    - <xref:None>
  - name: key_operations
    description: Allowed key operations
    types:
    - <xref:list>[<xref:azure.keyvault.keys.KeyOperation>
    - <xref:str>]
    - <xref:None>
  - name: enabled
    description: Whether the key is enabled for use.
    types:
    - <xref:bool>
    - <xref:None>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
    - <xref:None>
  - name: not_before
    description: Not before date of the key in UTC
    types:
    - <xref:datetime.datetime>
    - <xref:None>
  - name: expires_on
    description: Expiry date of the key in UTC
    types:
    - <xref:datetime.datetime>
    - <xref:None>
  - name: exportable
    description: Whether the private key can be exported.
    types:
    - <xref:bool>
    - <xref:None>
  - name: release_policy
    description: The policy rules under which the key can be exported.
    types:
    - <xref:azure.keyvault.keys.KeyReleasePolicy>
    - <xref:None>
  return:
    description: The created key
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Create RSA key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\44\\\\azure-keyvault-keys-4.9.0b1\\\
    \\tests\\\\test_samples_keys.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   key_size = 2048\n   key_ops = [\"encrypt\", \"\
    decrypt\", \"sign\", \"verify\", \"wrapKey\", \"unwrapKey\"]\n\n   # create an\
    \ rsa key with size specification\n   # RSA key can be created with default size\
    \ of '2048'\n   key = key_client.create_rsa_key(key_name, hardware_protected=True,\
    \ size=key_size, key_operations=key_ops)\n\n   print(key.id)\n   print(key.name)\n\
    \   print(key.key_type)\n   print(key.key_operations)\n\n   ````\n"
- uid: azure.keyvault.keys.KeyClient.get_cryptography_client
  name: get_cryptography_client
  summary: Gets a <xref:azure.keyvault.keys.crypto.CryptographyClient> for the given
    key.
  signature: 'get_cryptography_client(key_name: str, **kwargs) -> CryptographyClient'
  parameters:
  - name: key_name
    description: The name of the key used to perform cryptographic operations.
    isRequired: true
    types:
    - <xref:str>
  - name: key_version
    description: Optional version of the key used to perform cryptographic operations.
    types:
    - <xref:str>
  return:
    description: 'A <xref:azure.keyvault.keys.crypto.CryptographyClient> using the
      same options, credentials, and

      HTTP client as this <xref:azure.keyvault.keys.KeyClient>.'
    types:
    - <xref:azure.keyvault.keys.crypto.CryptographyClient>
- uid: azure.keyvault.keys.KeyClient.get_deleted_key
  name: get_deleted_key
  summary: 'Get a deleted key. Possible only in a vault with soft-delete enabled.


    Requires keys/get permission.'
  signature: 'get_deleted_key(name: str, **kwargs) -> DeletedKey'
  parameters:
  - name: name
    description: The name of the key
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The deleted key
    types:
    - <xref:azure.keyvault.keys.DeletedKey>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the key doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Get a deleted key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\\
    44\\\\azure-keyvault-keys-4.9.0b1\\\\tests\\\\test_samples_keys.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   # get a deleted\
    \ key (requires soft-delete enabled for the vault)\n   deleted_key = key_client.get_deleted_key(key_name)\n\
    \   print(deleted_key.name)\n\n   # if the vault has soft-delete enabled, the\
    \ key's deleted_date\n   # scheduled purge date and recovery id are set\n   print(deleted_key.deleted_date)\n\
    \   print(deleted_key.scheduled_purge_date)\n   print(deleted_key.recovery_id)\n\
    \n   ````\n"
- uid: azure.keyvault.keys.KeyClient.get_key
  name: get_key
  summary: 'Get a key''s attributes and, if it''s an asymmetric key, its public material.


    Requires keys/get permission.'
  signature: 'get_key(name: str, version: str | None = None, **kwargs) -> KeyVaultKey'
  parameters:
  - name: name
    description: The name of the key to get.
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: '(optional) A specific version of the key to get. If not specified,
      gets the latest version

      of the key.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:None>
  return:
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the key doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Get a key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\44\\\\azure-keyvault-keys-4.9.0b1\\\
    \\tests\\\\test_samples_keys.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   # get the latest version of a key\n   key = key_client.get_key(key_name)\n\
    \n   # alternatively, specify a version\n   key_version = key.properties.version\n\
    \   key = key_client.get_key(key_name, key_version)\n\n   print(key.id)\n   print(key.name)\n\
    \   print(key.properties.version)\n   print(key.key_type)\n   print(key.properties.vault_url)\n\
    \n   ````\n"
- uid: azure.keyvault.keys.KeyClient.get_key_rotation_policy
  name: get_key_rotation_policy
  summary: Get the rotation policy of a Key Vault key.
  signature: 'get_key_rotation_policy(key_name: str, **kwargs) -> KeyRotationPolicy'
  parameters:
  - name: key_name
    description: The name of the key.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The key rotation policy.
    types:
    - <xref:azure.keyvault.keys.KeyRotationPolicy>
  exceptions:
  - type: '*azure.core.exceptions.HttpResponseError*'
- uid: azure.keyvault.keys.KeyClient.get_random_bytes
  name: get_random_bytes
  summary: Get the requested number of random bytes from a managed HSM.
  signature: 'get_random_bytes(count: int, **kwargs) -> bytes'
  parameters:
  - name: count
    description: The requested number of random bytes.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: The random bytes.
    types:
    - <xref:bytes>
  exceptions:
  - type: azure.keyvault.keys.ValueError
    description: if less than one random byte is requested,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Get random bytes<!--[!code-python[Main](s\\test_key_client.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\44\\\\azure-keyvault-keys-4.9.0b1\\\
    \\tests\\\\test_key_client.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   # get eight random bytes from a managed HSM\n\
    \   random_bytes = client.get_random_bytes(count=8)\n\n   ````\n"
- uid: azure.keyvault.keys.KeyClient.import_key
  name: import_key
  summary: 'Import a key created externally.


    Requires keys/import permission. If `name` is already in use, the key will be
    imported as a new version.'
  signature: 'import_key(name: str, key: JsonWebKey, **kwargs) -> KeyVaultKey'
  parameters:
  - name: name
    description: Name for the imported key
    isRequired: true
    types:
    - <xref:str>
  - name: key
    description: The JSON web key to import
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.JsonWebKey>
  - name: hardware_protected
    description: Whether the key should be backed by a hardware security module
    types:
    - <xref:bool>
    - <xref:None>
  - name: enabled
    description: Whether the key is enabled for use.
    types:
    - <xref:bool>
    - <xref:None>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
    - <xref:None>
  - name: not_before
    description: Not before date of the key in UTC
    types:
    - <xref:datetime.datetime>
    - <xref:None>
  - name: expires_on
    description: Expiry date of the key in UTC
    types:
    - <xref:datetime.datetime>
    - <xref:None>
  - name: exportable
    description: Whether the private key can be exported.
    types:
    - <xref:bool>
    - <xref:None>
  - name: release_policy
    description: The policy rules under which the key can be exported.
    types:
    - <xref:azure.keyvault.keys.KeyReleasePolicy>
    - <xref:None>
  return:
    description: The imported key
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.keyvault.keys.KeyClient.list_deleted_keys
  name: list_deleted_keys
  summary: 'List all deleted keys, including the public part of each. Possible only
    in a vault with soft-delete enabled.


    Requires keys/list permission.'
  signature: list_deleted_keys(**kwargs) -> ItemPaged[DeletedKey]
  return:
    description: An iterator of deleted keys
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.keyvault.keys.DeletedKey>]
  examples:
  - "List all the deleted keys<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\
    \\44\\\\azure-keyvault-keys-4.9.0b1\\\\tests\\\\test_samples_keys.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   # get an iterator\
    \ of deleted keys (requires soft-delete enabled for the vault)\n   deleted_keys\
    \ = key_client.list_deleted_keys()\n\n   for key in deleted_keys:\n       print(key.id)\n\
    \       print(key.name)\n       print(key.scheduled_purge_date)\n       print(key.recovery_id)\n\
    \       print(key.deleted_date)\n\n   ````\n"
- uid: azure.keyvault.keys.KeyClient.list_properties_of_key_versions
  name: list_properties_of_key_versions
  summary: 'List the identifiers and properties of a key''s versions.


    Requires keys/list permission.'
  signature: 'list_properties_of_key_versions(name: str, **kwargs) -> ItemPaged[KeyProperties]'
  parameters:
  - name: name
    description: The name of the key
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterator of keys without their cryptographic material
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.keyvault.keys.KeyProperties>]
  examples:
  - "List all versions of a key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\
    \\44\\\\azure-keyvault-keys-4.9.0b1\\\\tests\\\\test_samples_keys.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   # get an iterator\
    \ of a key's versions\n   key_versions = key_client.list_properties_of_key_versions(\"\
    key-name\")\n\n   for key in key_versions:\n       print(key.id)\n       print(key.name)\n\
    \n   ````\n"
- uid: azure.keyvault.keys.KeyClient.list_properties_of_keys
  name: list_properties_of_keys
  summary: 'List identifiers and properties of all keys in the vault.


    Requires keys/list permission.'
  signature: list_properties_of_keys(**kwargs) -> ItemPaged[KeyProperties]
  return:
    description: An iterator of keys without their cryptographic material or version
      information
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.keyvault.keys.KeyProperties>]
  examples:
  - "List all keys<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\44\\\\azure-keyvault-keys-4.9.0b1\\\
    \\tests\\\\test_samples_keys.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   # get an iterator of keys\n   keys = key_client.list_properties_of_keys()\n\
    \n   for key in keys:\n       print(key.id)\n       print(key.name)\n\n   ````\n"
- uid: azure.keyvault.keys.KeyClient.purge_deleted_key
  name: purge_deleted_key
  summary: 'Permanently deletes a deleted key. Only possible in a vault with soft-delete
    enabled.


    Performs an irreversible deletion of the specified key, without possibility for
    recovery. The operation is not

    available if the <xref:azure.keyvault.keys.KeyProperties.recovery_level> does
    not specify ''Purgeable''.

    This method is only necessary for purging a key before its

    <xref:azure.keyvault.keys.DeletedKey.scheduled_purge_date>.


    Requires keys/purge permission.'
  signature: 'purge_deleted_key(name: str, **kwargs) -> None'
  parameters:
  - name: name
    description: The name of the deleted key to purge
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
    \   # if the vault has soft-delete enabled, purge permanently deletes a deleted\
    \ key\n   # (with soft-delete disabled, begin_delete_key is permanent)\n   key_client.purge_deleted_key(\"\
    key-name\")\n   ````\n"
- uid: azure.keyvault.keys.KeyClient.release_key
  name: release_key
  summary: 'Releases a key.


    The release key operation is applicable to all key types. The target key must
    be marked

    exportable. This operation requires the keys/release permission.'
  signature: 'release_key(name: str, target_attestation_token: str, **kwargs) -> ReleaseKeyResult'
  parameters:
  - name: name
    description: The name of the key to get.
    isRequired: true
    types:
    - <xref:str>
  - name: target_attestation_token
    description: The attestation assertion for the target of the key release.
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: A specific version of the key to release. If unspecified, the latest
      version is released.
    types:
    - <xref:str>
    - <xref:None>
  - name: algorithm
    description: The encryption algorithm to use to protect the released key material.
    types:
    - <xref:str>
    - <xref:azure.keyvault.keys.KeyExportEncryptionAlgorithm>
    - <xref:None>
  - name: nonce
    description: A client-provided nonce for freshness.
    types:
    - <xref:str>
    - <xref:None>
  return:
    description: The result of the key release.
    types:
    - <xref:azure.keyvault.keys.ReleaseKeyResult>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.keyvault.keys.KeyClient.restore_key_backup
  name: restore_key_backup
  summary: 'Restore a key backup to the vault.


    Requires keys/restore permission.


    This imports all versions of the key, with its name, attributes, and access control
    policies. If the key''s name

    is already in use, restoring it will fail. Also, the target vault must be owned
    by the same Microsoft Azure

    subscription as the source vault.'
  signature: 'restore_key_backup(backup: bytes, **kwargs) -> KeyVaultKey'
  parameters:
  - name: backup
    description: A key backup as returned by <xref:azure.keyvault.keys.KeyClient.backup_key>
    isRequired: true
    types:
    - <xref:bytes>
  return:
    description: The restored key
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.ResourceExistsError
    description: if the backed up key's name is already in use,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Restore a key backup<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\
    \\44\\\\azure-keyvault-keys-4.9.0b1\\\\tests\\\\test_samples_keys.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   # restore\
    \ a key backup\n   restored_key = key_client.restore_key_backup(key_backup)\n\
    \   print(restored_key.id)\n   print(restored_key.properties.version)\n\n   ````\n"
- uid: azure.keyvault.keys.KeyClient.rotate_key
  name: rotate_key
  summary: 'Rotate the key based on the key policy by generating a new version of
    the key.


    This operation requires the keys/rotate permission.'
  signature: 'rotate_key(name: str, **kwargs) -> KeyVaultKey'
  parameters:
  - name: name
    description: The name of the key to rotate.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The new version of the rotated key.
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.keyvault.keys.KeyClient.update_key_properties
  name: update_key_properties
  summary: 'Change a key''s properties (not its cryptographic material).


    Requires keys/update permission.'
  signature: 'update_key_properties(name: str, version: str | None = None, **kwargs)
    -> KeyVaultKey'
  parameters:
  - name: name
    description: The name of key to update
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: (optional) The version of the key to update. If unspecified, the
      latest version is updated.
    isRequired: true
    types:
    - <xref:str>
    - <xref:None>
  - name: key_operations
    description: Allowed key operations
    types:
    - <xref:list>[<xref:azure.keyvault.keys.KeyOperation>
    - <xref:str>]
    - <xref:None>
  - name: enabled
    description: Whether the key is enabled for use.
    types:
    - <xref:bool>
    - <xref:None>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
    - <xref:None>
  - name: not_before
    description: Not before date of the key in UTC
    types:
    - <xref:datetime.datetime>
    - <xref:None>
  - name: expires_on
    description: Expiry date of the key in UTC
    types:
    - <xref:datetime.datetime>
    - <xref:None>
  - name: release_policy
    description: The policy rules under which the key can be exported.
    types:
    - <xref:azure.keyvault.keys.KeyReleasePolicy>
    - <xref:None>
  return:
    description: The updated key
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the key doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Update a key's attributes<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\
    \\44\\\\azure-keyvault-keys-4.9.0b1\\\\tests\\\\test_samples_keys.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   # update attributes\
    \ of an existing key\n   expires_on = date_parse.parse(\"2050-01-02T08:00:00.000Z\"\
    )\n   tags = {\"foo\": \"updated tag\"}\n   updated_key = key_client.update_key_properties(key.name,\
    \ expires_on=expires_on, tags=tags)\n\n   print(updated_key.properties.version)\n\
    \   print(updated_key.properties.updated_on)\n   print(updated_key.properties.expires_on)\n\
    \   print(updated_key.properties.tags)\n   print(key.key_type)\n\n   ````\n"
- uid: azure.keyvault.keys.KeyClient.update_key_rotation_policy
  name: update_key_rotation_policy
  summary: 'Updates the rotation policy of a Key Vault key.


    This operation requires the keys/update permission.'
  signature: 'update_key_rotation_policy(key_name: str, policy: KeyRotationPolicy,
    **kwargs) -> KeyRotationPolicy'
  parameters:
  - name: key_name
    description: The name of the key in the given vault.
    isRequired: true
    types:
    - <xref:str>
  - name: policy
    description: The new rotation policy for the key.
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.KeyRotationPolicy>
  - name: lifetime_actions
    description: 'Actions that will be performed by Key Vault over the lifetime of
      a key. This will

      override the lifetime actions of the provided `policy`.'
    types:
    - <xref:list>[<xref:azure.keyvault.keys.KeyRotationLifetimeAction>]
  - name: expires_in
    description: 'The expiry time of the policy that will be applied on new key versions,
      defined as an

      ISO 8601 duration. For example: 90 days is "P90D", 3 months is "P3M", and 48
      hours is "PT48H". See

      [Wikipedia](https://wikipedia.org/wiki/ISO_8601#Durations) for more information
      on ISO 8601 durations.

      This will override the expiry time of the provided `policy`.'
    types:
    - <xref:str>
  return:
    description: The updated rotation policy.
    types:
    - <xref:azure.keyvault.keys.KeyRotationPolicy>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
