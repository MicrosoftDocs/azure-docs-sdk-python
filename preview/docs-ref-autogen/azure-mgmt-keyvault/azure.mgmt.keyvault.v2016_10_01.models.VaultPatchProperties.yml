### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.mgmt.keyvault.v2016_10_01.models.VaultPatchProperties
  fullName: azure.mgmt.keyvault.v2016_10_01.models.VaultPatchProperties
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msrest.serialization.Model
  langs:
  - python
  module: azure.mgmt.keyvault.v2016_10_01.models
  name: VaultPatchProperties
  summary: Properties of the vault.
  syntax:
    content: 'VaultPatchProperties(*, tenant_id: typing.Union[str, NoneType] = None,
      sku: typing.Union[_ForwardRef(''Sku''), NoneType] = None, access_policies: typing.Union[typing.List[_ForwardRef(''AccessPolicyEntry'')],
      NoneType] = None, enabled_for_deployment: typing.Union[bool, NoneType] = None,
      enabled_for_disk_encryption: typing.Union[bool, NoneType] = None, enabled_for_template_deployment:
      typing.Union[bool, NoneType] = None, enable_soft_delete: typing.Union[bool,
      NoneType] = None, create_mode: typing.Union[str, _ForwardRef(''CreateMode''),
      NoneType] = None, enable_purge_protection: typing.Union[bool, NoneType] = None,
      **kwargs)'
    parameters:
    - description: 'The Azure Active Directory tenant ID that should be used for authenticating

        requests to the key vault.'
      id: tenant_id
      type:
      - str
    - description: SKU details.
      id: sku
      type:
      - azure.mgmt.keyvault.v2016_10_01.models.Sku
    - description: 'An array of 0 to 16 identities that have access to the key vault.
        All

        identities in the array must use the same tenant ID as the key vault''s tenant
        ID.'
      id: access_policies
      type:
      - list[azure.mgmt.keyvault.v2016_10_01.models.AccessPolicyEntry]
    - description: 'Property to specify whether Azure Virtual Machines are permitted

        to retrieve certificates stored as secrets from the key vault.'
      id: enabled_for_deployment
      type:
      - bool
    - description: 'Property to specify whether Azure Disk Encryption is

        permitted to retrieve secrets from the vault and unwrap keys.'
      id: enabled_for_disk_encryption
      type:
      - bool
    - description: 'Property to specify whether Azure Resource Manager is

        permitted to retrieve secrets from the key vault.'
      id: enabled_for_template_deployment
      type:
      - bool
    - description: 'Property specifying whether recoverable deletion (''soft'' delete)
        is

        enabled for this key vault. The property may not be set to false.'
      id: enable_soft_delete
      type:
      - bool
    - description: 'The vault''s create mode to indicate whether the vault need to
        be recovered

        or not. Possible values include: "recover", "default".'
      id: create_mode
      type:
      - str
      - azure.mgmt.keyvault.v2016_10_01.models.CreateMode
    - description: 'Property specifying whether protection against purge is enabled

        for this vault; it is only effective if soft delete is also enabled. Once
        activated, the

        property may no longer be reset to false.'
      id: enable_purge_protection
      type:
      - bool
  type: class
  uid: azure.mgmt.keyvault.v2016_10_01.models.VaultPatchProperties
references:
- fullName: list[azure.mgmt.keyvault.v2016_10_01.models.AccessPolicyEntry]
  name: list[AccessPolicyEntry]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.mgmt.keyvault.v2016_10_01.models.AccessPolicyEntry
    name: AccessPolicyEntry
    uid: azure.mgmt.keyvault.v2016_10_01.models.AccessPolicyEntry
  - fullName: ']'
    name: ']'
  uid: list[azure.mgmt.keyvault.v2016_10_01.models.AccessPolicyEntry]
