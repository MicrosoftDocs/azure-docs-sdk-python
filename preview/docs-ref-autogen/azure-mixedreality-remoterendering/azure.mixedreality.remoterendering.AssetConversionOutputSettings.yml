### YamlMime:PythonClass
uid: azure.mixedreality.remoterendering.AssetConversionOutputSettings
name: AssetConversionOutputSettings
fullName: azure.mixedreality.remoterendering.AssetConversionOutputSettings
module: azure.mixedreality.remoterendering
inheritances:
- msrest.serialization.Model
summary: 'Conversion output settings describe the destination of conversion output.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'AssetConversionOutputSettings(*, storage_container_uri: str, storage_container_write_sas:
    str | None = None, blob_prefix: str | None = None, output_asset_filename: str
    | None = None, **kwargs)'
  parameters:
  - name: storage_container_uri
    description: 'Required. The URI of the Azure blob storage container where the

      result of the conversion should be written to.'
    isRequired: true
    types:
    - <xref:str>
  - name: storage_container_write_sas
    description: 'An Azure blob storage container shared access signature

      giving write access to the storage container. Optional. If not provided, the
      Azure Remote

      Rendering account needs to be linked with the storage account containing the
      blob container.

      See [https://docs.microsoft.com/azure/remote-rendering/how-tos/create-an-account#link-storage](https://docs.microsoft.com/azure/remote-rendering/how-tos/create-an-account#link-storage)-

      accounts for details. For security purposes this field will never be filled
      out in responses

      bodies.'
    isRequired: true
    types:
    - <xref:str>
  - name: blob_prefix
    description: 'A prefix which gets prepended in front of all files produced by
      the

      conversion process. Will be treated as a virtual folder. Optional. If not provided,
      output

      files will be stored at the container root.'
    isRequired: true
    types:
    - <xref:str>
  - name: output_asset_filename
    description: 'The file name of the output asset. Must end in ''.arrAsset''.

      Optional. If not provided, file name will the same name as the input asset,
      with ''.arrAsset''

      extension.'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: storage_container_uri
    isRequired: true
  - name: storage_container_write_sas
    isRequired: true
  - name: blob_prefix
    isRequired: true
  - name: output_asset_filename
    isRequired: true
methods:
- uid: azure.mixedreality.remoterendering.AssetConversionOutputSettings.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mixedreality.remoterendering.AssetConversionOutputSettings.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mixedreality.remoterendering.AssetConversionOutputSettings.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.mixedreality.remoterendering.AssetConversionOutputSettings.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.mixedreality.remoterendering.AssetConversionOutputSettings.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.mixedreality.remoterendering.AssetConversionOutputSettings.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.mixedreality.remoterendering.AssetConversionOutputSettings.validate
  name: validate
  summary: Validate this model recursively and return a list of ValidationError.
  signature: validate()
  return:
    description: A list of validation error
    types:
    - <xref:list>
