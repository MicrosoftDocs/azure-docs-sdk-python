### YamlMime:PythonClass
uid: azure.mgmt.machinelearningservices.models.ImageClassification
name: ImageClassification
fullName: azure.mgmt.machinelearningservices.models.ImageClassification
module: azure.mgmt.machinelearningservices.models
inheritances:
- azure.mgmt.machinelearningservices.models._models_py3.ImageClassificationBase
- azure.mgmt.machinelearningservices.models._models_py3.AutoMLVertical
summary: "Image Classification. Multi-class image classification is used when an image\
  \ is classified with only a single label\nfrom a set of classes - e.g. each image\
  \ is classified as either an image of a 'cat' or a 'dog' or a 'duck'.\n\n   All\
  \ required parameters must be populated in order to send to Azure.\n\n   ivar log_verbosity:\n\
  \      Log verbosity for the job. Known values are: \"NotSet\", \"Debug\", \"Info\"\
  ,\n      \"Warning\", \"Error\", and \"Critical\".\n\n   vartype log_verbosity:\n\
  \      str or ~azure.mgmt.machinelearningservices.models.LogVerbosity\n\n   ivar\
  \ target_column_name:\n      Target column name: This is prediction values column.\n\
  \      Also known as label column name in context of classification tasks.\n\n \
  \  vartype target_column_name:\n      str\n\n   ivar task_type:\n      [Required]\
  \ Task type for AutoMLJob. Required. Known values are:\n      \"Classification\"\
  , \"Regression\", \"Forecasting\", \"ImageClassification\",\n      \"ImageClassificationMultilabel\"\
  , \"ImageObjectDetection\", \"ImageInstanceSegmentation\",\n      \"TextClassification\"\
  , \"TextClassificationMultilabel\", and \"TextNER\".\n\n   vartype task_type:\n\
  \      str or ~azure.mgmt.machinelearningservices.models.TaskType\n\n   ivar training_data:\n\
  \      [Required] Training data input. Required.\n\n   vartype training_data:\n\
  \      ~azure.mgmt.machinelearningservices.models.MLTableJobInput\n\n   ivar limit_settings:\n\
  \      [Required] Limit settings for the AutoML job. Required.\n\n   vartype limit_settings:\n\
  \      ~azure.mgmt.machinelearningservices.models.ImageLimitSettings\n\n   ivar\
  \ sweep_settings:\n      Model sweeping and hyperparameter sweeping related settings.\n\
  \n   vartype sweep_settings:\n      ~azure.mgmt.machinelearningservices.models.ImageSweepSettings\n\
  \n   ivar validation_data:\n      Validation data inputs.\n\n   vartype validation_data:\n\
  \      ~azure.mgmt.machinelearningservices.models.MLTableJobInput\n\n   ivar validation_data_size:\n\
  \      The fraction of training dataset that needs to be set aside for\n      validation\
  \ purpose.\n      Values between (0.0 , 1.0)\n      Applied when validation dataset\
  \ is not provided.\n\n   vartype validation_data_size:\n      float\n\n   ivar model_settings:\n\
  \      Settings used for training the model.\n\n   vartype model_settings:\n   \
  \   ~azure.mgmt.machinelearningservices.models.ImageModelSettingsClassification\n\
  \n   ivar search_space:\n      Search space for sampling different combinations\
  \ of models and their\n      hyperparameters.\n\n   vartype search_space:\n    \
  \  list[~azure.mgmt.machinelearningservices.models.ImageModelDistributionSettingsClassification]\n\
  \n   ivar primary_metric:\n      Primary metric to optimize for this task. Known\
  \ values are:\n      \"AUCWeighted\", \"Accuracy\", \"NormMacroRecall\", \"AveragePrecisionScoreWeighted\"\
  , and\n      \"PrecisionScoreWeighted\".\n\n   vartype primary_metric:\n      str\
  \ or\n      ~azure.mgmt.machinelearningservices.models.ClassificationPrimaryMetrics"
constructor:
  syntax: 'ImageClassification(*, training_data: _models.MLTableJobInput, limit_settings:
    _models.ImageLimitSettings, log_verbosity: str | _models.LogVerbosity | None =
    None, target_column_name: str | None = None, sweep_settings: _models.ImageSweepSettings
    | None = None, validation_data: _models.MLTableJobInput | None = None, validation_data_size:
    float | None = None, model_settings: _models.ImageModelSettingsClassification
    | None = None, search_space: List[_models.ImageModelDistributionSettingsClassification]
    | None = None, primary_metric: str | _models.ClassificationPrimaryMetrics | None
    = None, **kwargs)'
