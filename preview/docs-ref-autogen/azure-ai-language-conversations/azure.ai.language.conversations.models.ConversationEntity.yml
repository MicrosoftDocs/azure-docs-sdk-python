### YamlMime:PythonClass
uid: azure.ai.language.conversations.models.ConversationEntity
name: ConversationEntity
fullName: azure.ai.language.conversations.models.ConversationEntity
module: azure.ai.language.conversations.models
summary: The entity extraction result of a Conversation project.
constructor:
  syntax: 'ConversationEntity(*args: Any, **kwargs: Any)'
variables:
- description: The entity category. Required.
  name: category
  types:
  - <xref:str>
- description: The predicted entity text. Required.
  name: text
  types:
  - <xref:str>
- description: The starting index of this entity in the query. Required.
  name: offset
  types:
  - <xref:int>
- description: The length of the text. Required.
  name: length
  types:
  - <xref:int>
- description: The entity confidence score. Required.
  name: confidence
  types:
  - <xref:float>
- description: The collection of entity resolution objects.
  name: resolutions
  types:
  - <xref:list>[<xref:azure.ai.language.conversations.models.ResolutionBase>]
- description: The collection of entity extra information objects.
  name: extra_information
  types:
  - <xref:list>[<xref:azure.ai.language.conversations.models.ConversationEntityExtraInformation>]
methods:
- uid: azure.ai.language.conversations.models.ConversationEntity.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.ai.language.conversations.models.ConversationEntity.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.ai.language.conversations.models.ConversationEntity.copy
  name: copy
  signature: copy() -> Model
- uid: azure.ai.language.conversations.models.ConversationEntity.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.language.conversations.models.ConversationEntity.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.ai.language.conversations.models.ConversationEntity.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.ai.language.conversations.models.ConversationEntity.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.ai.language.conversations.models.ConversationEntity.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.ai.language.conversations.models.ConversationEntity.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.ai.language.conversations.models.ConversationEntity.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.ai.language.conversations.models.ConversationEntity.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.ai.language.conversations.models.ConversationEntity.category
  name: category
  summary: The entity category. Required.
  signature: 'category: str'
- uid: azure.ai.language.conversations.models.ConversationEntity.confidence
  name: confidence
  summary: The entity confidence score. Required.
  signature: 'confidence: float'
- uid: azure.ai.language.conversations.models.ConversationEntity.extra_information
  name: extra_information
  summary: The collection of entity extra information objects.
  signature: 'extra_information: List[_models.ConversationEntityExtraInformation]
    | None'
- uid: azure.ai.language.conversations.models.ConversationEntity.length
  name: length
  summary: The length of the text. Required.
  signature: 'length: int'
- uid: azure.ai.language.conversations.models.ConversationEntity.offset
  name: offset
  summary: The starting index of this entity in the query. Required.
  signature: 'offset: int'
- uid: azure.ai.language.conversations.models.ConversationEntity.resolutions
  name: resolutions
  summary: The collection of entity resolution objects.
  signature: 'resolutions: List[_models.ResolutionBase] | None'
- uid: azure.ai.language.conversations.models.ConversationEntity.text
  name: text
  summary: The predicted entity text. Required.
  signature: 'text: str'
