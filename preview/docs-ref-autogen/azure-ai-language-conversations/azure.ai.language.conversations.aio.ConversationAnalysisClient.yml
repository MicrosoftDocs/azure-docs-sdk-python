### YamlMime:PythonClass
uid: azure.ai.language.conversations.aio.ConversationAnalysisClient
name: ConversationAnalysisClient
fullName: azure.ai.language.conversations.aio.ConversationAnalysisClient
module: azure.ai.language.conversations.aio
inheritances:
- azure.ai.language.conversations.aio.operations._operations.ConversationAnalysisClientOperationsMixin
summary: "This API accepts a request and mediates among multiple language projects,\
  \ such as LUIS Generally Available, Question Answering, Conversation, and then calls\
  \ the best candidate service to handle the request. At last, it returns a response\
  \ with the candidate service's response as a payload.\n\nIn some cases, this API\
  \ needs to forward requests and responses between the caller and an upstream service.\n\
  \n   param endpoint:\n      Supported Cognitive Services endpoint (e.g.,\n     \
  \ [https://](https://)`<resource-name>`.api.cognitiveservices.azure.com).\n\n  \
  \ type endpoint:\n      str\n\n   param credential:\n      Credential needed for\
  \ the client to connect to Azure.\n\n   type credential:\n      ~azure.core.credentials.AzureKeyCredential"
constructor:
  syntax: 'ConversationAnalysisClient(endpoint: str, credential: azure.core.credentials.AzureKeyCredential,
    **kwargs: Any)'
methods:
- uid: azure.ai.language.conversations.aio.ConversationAnalysisClient.close
  name: close
  signature: close() -> None
- uid: azure.ai.language.conversations.aio.ConversationAnalysisClient.send_request
  name: send_request
  summary: 'Runs the network request through the client''s chained policies.



    ```


    >>> from azure.core.rest import HttpRequest

    >>> request = HttpRequest("GET", "https://www.example.org/")

    <HttpRequest [GET], url: ''https://www.example.org/''>

    >>> response = await client.send_request(request)

    <AsyncHttpResponse: 200 OK>

    ```


    For more information on this code flow, see [https://aka.ms/azsdk/python/protocol/quickstart](https://aka.ms/azsdk/python/protocol/quickstart)'
  signature: 'send_request(request: azure.core.rest._rest_py3.HttpRequest, **kwargs:
    Any) -> Awaitable[azure.core.rest._rest_py3.AsyncHttpResponse]'
  parameters:
  - name: request
    description: The network request you want to make. Required.
    isRequired: true
    types:
    - <xref:azure.core.rest.HttpRequest>
  - name: stream
    description: Whether the response payload will be streamed. Defaults to False.
    types:
    - <xref:bool>
  return:
    description: The response of your network call. Does not do error handling on
      your response.
    types:
    - <xref:azure.core.rest.AsyncHttpResponse>
