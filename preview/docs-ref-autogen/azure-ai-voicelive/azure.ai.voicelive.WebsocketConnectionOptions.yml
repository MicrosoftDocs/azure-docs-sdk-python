### YamlMime:PythonClass
uid: azure.ai.voicelive.WebsocketConnectionOptions
name: WebsocketConnectionOptions
fullName: azure.ai.voicelive.WebsocketConnectionOptions
module: azure.ai.voicelive
summary: "Advanced WebSocket connection options for the synchronous VoiceLive API.\n\
  \nThese options are passed directly to <xref:websockets.sync.client.connect>\nand\
  \ control low-level WebSocket behavior.\nAll keys are optional \u2014 if omitted,\
  \ the *websockets* library's defaults apply.\nUnsupported or unknown keys are ignored."
constructor:
  syntax: WebsocketConnectionOptions()
  keywordOnlyParameters:
  - name: extensions
    description: 'WebSocket extensions to negotiate with the server.

      Usually provided by the library; override with caution.'
  - name: subprotocols
    description: 'A list of subprotocols to negotiate during the

      WebSocket handshake.'
  - name: compression
    description: 'Name of the compression method to use, or a

      compression configuration object.

      Set to `None` or an empty string to disable compression.'
  - name: max_size
    description: 'Maximum size in bytes for incoming messages.

      Messages larger than this will close the connection with a

      *PayloadTooBig* exception.'
  - name: max_queue
    description: 'Maximum number of incoming messages to queue before

      processing. Can be:

      - An integer limit.

      - A tuple of `(high_watermark, low_watermark)` integers or None.'
  - name: write_limit
    description: 'TCP write buffer limit. Can be:

      - A single integer limit.

      - A tuple of `(limit, interval)` where `interval` is optional.'
methods:
- uid: azure.ai.voicelive.WebsocketConnectionOptions.clear
  name: clear
  signature: clear() -> None.  Remove all items from D.
- uid: azure.ai.voicelive.WebsocketConnectionOptions.copy
  name: copy
  signature: copy() -> a shallow copy of D
- uid: azure.ai.voicelive.WebsocketConnectionOptions.fromkeys
  name: fromkeys
  summary: Create a new dictionary with keys from iterable and values set to value.
  signature: fromkeys(value=None, /)
  positionalOnlyParameters:
  - name: iterable
    isRequired: true
  - name: value
    defaultValue: None
- uid: azure.ai.voicelive.WebsocketConnectionOptions.get
  name: get
  summary: Return the value for key if key is in the dictionary, else default.
  signature: get(key, default=None, /)
  positionalOnlyParameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.voicelive.WebsocketConnectionOptions.items
  name: items
  signature: items() -> a set-like object providing a view on D's items
- uid: azure.ai.voicelive.WebsocketConnectionOptions.keys
  name: keys
  signature: keys() -> a set-like object providing a view on D's keys
- uid: azure.ai.voicelive.WebsocketConnectionOptions.pop
  name: pop
  summary: 'If the key is not found, return the default if given; otherwise,

    raise a KeyError.'
  signature: pop(k, [d]) -> v, remove specified key and return the corresponding value.
- uid: azure.ai.voicelive.WebsocketConnectionOptions.popitem
  name: popitem
  summary: 'Remove and return a (key, value) pair as a 2-tuple.


    Pairs are returned in LIFO (last-in, first-out) order.

    Raises KeyError if the dict is empty.'
  signature: popitem()
- uid: azure.ai.voicelive.WebsocketConnectionOptions.setdefault
  name: setdefault
  summary: 'Insert key with a value of default if key is not in the dictionary.


    Return the value for key if key is in the dictionary, else default.'
  signature: setdefault(key, default=None, /)
  positionalOnlyParameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.voicelive.WebsocketConnectionOptions.update
  name: update
  summary: 'If E is present and has a .keys() method, then does:  for k in E: D[k]
    = E[k]

    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] =
    v

    In either case, this is followed by: for k in F:  D[k] = F[k]'
  signature: update([E], **F) -> None.  Update D from dict/iterable E and F.
- uid: azure.ai.voicelive.WebsocketConnectionOptions.values
  name: values
  signature: values() -> an object providing a view on D's values
attributes:
- uid: azure.ai.voicelive.WebsocketConnectionOptions.compression
  name: compression
  signature: 'compression: str'
- uid: azure.ai.voicelive.WebsocketConnectionOptions.extensions
  name: extensions
  signature: 'extensions: Sequence[Any]'
- uid: azure.ai.voicelive.WebsocketConnectionOptions.max_queue
  name: max_queue
  signature: 'max_queue: int | Tuple[int | None, int | None]'
- uid: azure.ai.voicelive.WebsocketConnectionOptions.max_size
  name: max_size
  signature: 'max_size: int'
- uid: azure.ai.voicelive.WebsocketConnectionOptions.subprotocols
  name: subprotocols
  signature: 'subprotocols: Sequence[WSSubprotocol]'
- uid: azure.ai.voicelive.WebsocketConnectionOptions.write_limit
  name: write_limit
  signature: 'write_limit: int | Tuple[int, int | None]'
