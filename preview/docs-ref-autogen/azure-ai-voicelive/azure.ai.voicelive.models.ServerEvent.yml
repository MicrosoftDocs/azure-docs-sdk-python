### YamlMime:PythonClass
uid: azure.ai.voicelive.models.ServerEvent
name: ServerEvent
fullName: azure.ai.voicelive.models.ServerEvent
module: azure.ai.voicelive.models
summary: 'A voicelive server event.


  You probably want to use the sub-classes and not this class directly. Known sub-classes
  are:

  ServerEventConversationItemCreated, ServerEventConversationItemDeleted,

  ServerEventConversationItemInputAudioTranscriptionCompleted,

  ServerEventConversationItemInputAudioTranscriptionDelta,

  ServerEventConversationItemInputAudioTranscriptionFailed, ServerEventConversationItemRetrieved,

  ServerEventConversationItemTruncated, ServerEventError, ServerEventInputAudioBufferCleared,

  ServerEventInputAudioBufferCommitted, ServerEventInputAudioBufferSpeechStarted,

  ServerEventInputAudioBufferSpeechStopped, ServerEventResponseAnimationBlendshapeDelta,

  ServerEventResponseAnimationBlendshapeDone, ServerEventResponseAnimationVisemeDelta,

  ServerEventResponseAnimationVisemeDone, ServerEventResponseAudioDelta,

  ServerEventResponseAudioDone, ServerEventResponseAudioTimestampDelta,

  ServerEventResponseAudioTimestampDone, ServerEventResponseAudioTranscriptDelta,

  ServerEventResponseAudioTranscriptDone, ServerEventResponseContentPartAdded,

  ServerEventResponseContentPartDone, ServerEventResponseCreated, ServerEventResponseDone,

  ServerEventResponseEmotionHypothesis, ServerEventResponseFunctionCallArgumentsDelta,

  ServerEventResponseFunctionCallArgumentsDone, ServerEventResponseOutputItemAdded,

  ServerEventResponseOutputItemDone, ServerEventResponseTextDelta, ServerEventResponseTextDone,

  ServerEventSessionAvatarConnecting, ServerEventSessionCreated, ServerEventSessionUpdated'
constructor:
  syntax: 'ServerEvent(*args: Any, **kwargs: Any)'
variables:
- description: 'The type of event. Required. Known values are: "error",

    "session.avatar.connecting", "session.created", "session.updated",

    "conversation.item.input_audio_transcription.completed",

    "conversation.item.input_audio_transcription.delta",

    "conversation.item.input_audio_transcription.failed", "conversation.item.created",

    "conversation.item.retrieved", "conversation.item.truncated", "conversation.item.deleted",

    "input_audio_buffer.committed", "input_audio_buffer.cleared",

    "input_audio_buffer.speech_started", "input_audio_buffer.speech_stopped", "response.created",

    "response.done", "response.output_item.added", "response.output_item.done",

    "response.content_part.added", "response.content_part.done", "response.text.delta",

    "response.text.done", "response.audio_transcript.delta", "response.audio_transcript.done",

    "response.audio.delta", "response.audio.done", "response.animation_blendshapes.delta",

    "response.animation_blendshapes.done", "response.emotion_hypothesis",

    "response.audio_timestamp.delta", "response.audio_timestamp.done",

    "response.animation_viseme.delta", "response.animation_viseme.done",

    "response.function_call_arguments.delta", and "response.function_call_arguments.done".'
  name: type
  types:
  - <xref:str>
  - <xref:azure.ai.voicelive.models.ServerEventType>
- name: event_id
  types:
  - <xref:str>
methods:
- uid: azure.ai.voicelive.models.ServerEvent.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.ai.voicelive.models.ServerEvent.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.ai.voicelive.models.ServerEvent.copy
  name: copy
  signature: copy() -> Model
- uid: azure.ai.voicelive.models.ServerEvent.deserialize
  name: deserialize
  signature: 'deserialize(payload: dict[str, Any]) -> ServerEvent'
  parameters:
  - name: payload
    isRequired: true
- uid: azure.ai.voicelive.models.ServerEvent.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.voicelive.models.ServerEvent.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.ai.voicelive.models.ServerEvent.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.ai.voicelive.models.ServerEvent.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.ai.voicelive.models.ServerEvent.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.ai.voicelive.models.ServerEvent.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.ai.voicelive.models.ServerEvent.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.ai.voicelive.models.ServerEvent.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.ai.voicelive.models.ServerEvent.event_id
  name: event_id
  signature: 'event_id: str | None'
- uid: azure.ai.voicelive.models.ServerEvent.type
  name: type
  summary: '"error", "session.avatar.connecting",

    "session.created", "session.updated",

    "conversation.item.input_audio_transcription.completed",

    "conversation.item.input_audio_transcription.delta",

    "conversation.item.input_audio_transcription.failed", "conversation.item.created",

    "conversation.item.retrieved", "conversation.item.truncated",

    "conversation.item.deleted", "input_audio_buffer.committed",

    "input_audio_buffer.cleared", "input_audio_buffer.speech_started",

    "input_audio_buffer.speech_stopped", "response.created", "response.done",

    "response.output_item.added", "response.output_item.done", "response.content_part.added",

    "response.content_part.done", "response.text.delta", "response.text.done",

    "response.audio_transcript.delta", "response.audio_transcript.done",

    "response.audio.delta", "response.audio.done", "response.animation_blendshapes.delta",

    "response.animation_blendshapes.done", "response.emotion_hypothesis",

    "response.audio_timestamp.delta", "response.audio_timestamp.done",

    "response.animation_viseme.delta", "response.animation_viseme.done",

    "response.function_call_arguments.delta", and "response.function_call_arguments.done".'
  signature: 'type: str'
