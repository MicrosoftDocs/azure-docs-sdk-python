### YamlMime:PythonClass
uid: azure.communication.networktraversal.aio.CommunicationRelayClient
name: CommunicationRelayClient
fullName: azure.communication.networktraversal.aio.CommunicationRelayClient
module: azure.communication.networktraversal.aio
inheritances:
- builtins.object
summary: Azure Communication Services Network Traversal client.
constructor:
  syntax: 'CommunicationRelayClient(endpoint: str, credential: AsyncTokenCredential,
    **kwargs) -> None'
  parameters:
  - name: endpoint
    description: The endpoint url for Azure Communication Service resource.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: The AsyncTokenCredential we use to authenticate against the service.
    isRequired: true
    types:
    - <xref:AsyncTokenCredential>
examples:
- "<!--[!code-python[Main](les\\network_traversal_samples_async.py )]-->\n\n<!-- literal_block\
  \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\":\
  \ [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\71\\\\azure-communication-networktraversal-1.0.0b1\\\
  \\samples\\\\network_traversal_samples_async.py\", \"xml:space\": \"preserve\",\
  \ \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n   : utf-8\n\n   -------------------------------------------------------------------\n\
  \   ght (c) Microsoft Corporation. All rights reserved.\n   ed under the MIT License.\
  \ See License.txt in the project root for\n   e information.\n   --------------------------------------------------------------------\n\
  \n\n   twork_traversal_samples_async.py\n   ION:\n   e samples demonstrate creating\
  \ a user, issuing a token, revoking a token and deleting a user.\n\n\n   on network_traversal_samples.py\n\
  \   the environment variables with your own values before running the sample:\n\
  \   OMMUNICATION_SAMPLES_CONNECTION_STRING - the connection string in your ACS resource\n\
  \   ZURE_CLIENT_ID - the client ID of your active directory application\n   ZURE_CLIENT_SECRET\
  \ - the secret of your active directory application\n   ZURE_TENANT_ID - the tenant\
  \ ID of your active directory application\n\n   s\n   syncio\n   re.communication.networktraversal._shared.utils\
  \ import parse_connection_str\n\n   mmunicationRelayClientSamples(object):\n\n \
  \  __init__(self):\n   self.connection_string = os.getenv('COMMUNICATION_SAMPLES_CONNECTION_STRING')\n\
  \   self.client_id = os.getenv('AZURE_CLIENT_ID')\n   self.client_secret = os.getenv('AZURE_CLIENT_SECRET')\n\
  \   self.tenant_id = os.getenv('AZURE_TENANT_ID')\n\n   c def get_relay_config(self):\n\
  \   from azure.communication.networktraversal.aio import CommunicationRelayClient\n\
  \   from azure.communication.identity.aio import CommunicationIdentityClient\n\n\
  \   if self.client_id is not None and self.client_secret is not None and self.tenant_id\
  \ is not None:\n       from azure.identity.aio import DefaultAzureCredential\n \
  \      endpoint, _ = parse_connection_str(self.connection_string)\n       identity_client\
  \ = CommunicationIdentityClient(endpoint, DefaultAzureCredential())\n       relay_client\
  \ = CommunicationRelayClient(endpoint, DefaultAzureCredential())\n   else:\n   \
  \    identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n\
  \       relay_client = CommunicationRelayClient.from_connection_string(self.connection_string)\n\
  \n   async with identity_client:\n       print(\"Creating new user\")\n       user\
  \ = await identity_client.create_user()\n       print(\"User created with id:\"\
  \ + user.properties.get('id'))\n\n   async with relay_client:\n       print(\"Getting\
  \ relay configuration\")\n       relay_configuration = await relay_client.get_relay_configuration(user)\n\
  \n   for iceServer in relay_configuration.ice_servers:\n       print(\"Icer server:\"\
  )\n       print(iceServer)\n\n   f main():\n   le = CommunicationRelayClientSamples()\n\
  \   t sample.get_relay_config()\n\n   e__ == '__main__':\n    = asyncio.get_event_loop()\n\
  \   .run_until_complete(main())\n\n   ````\n"
methods:
- uid: azure.communication.networktraversal.aio.CommunicationRelayClient.close
  name: close
  summary: 'Close the :class:

    *~azure.communication.networktraversal.aio.CommunicationRelayClient* session.'
  signature: close() -> None
- uid: azure.communication.networktraversal.aio.CommunicationRelayClient.from_connection_string
  name: from_connection_string
  summary: Create CommunicationRelayClient from a Connection String.
  signature: 'from_connection_string(conn_str: str, **kwargs) -> azure.communication.networktraversal.aio._communication_relay_client_async.CommunicationRelayClient'
  parameters:
  - name: conn_str
    description: A connection string to an Azure Communication Service resource.
    isRequired: true
    types:
    - <xref:str>
  - name: conn_str
    isRequired: true
  return:
    description: Instance of CommunicationRelayClient.
    types:
    - <xref:azure.communication.networktraversal.CommunicationRelayClient>
- uid: azure.communication.networktraversal.aio.CommunicationRelayClient.get_relay_configuration
  name: get_relay_configuration
  summary: 'get a Communication Relay configuration.

    :param: CommunicationUserIdentifier user: A user from which we will get an id

    :return: CommunicationRelayConfiguration

    :rtype: ~azure.communication.networktraversal.CommunicationRelayConfiguration'
  signature: 'get_relay_configuration(user: CommunicationUserIdentifier, **kwargs)
    -> CommunicationRelayConfiguration'
