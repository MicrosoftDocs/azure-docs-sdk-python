### YamlMime:PythonClass
uid: azure.identity.SharedTokenCacheCredential
name: SharedTokenCacheCredential
fullName: azure.identity.SharedTokenCacheCredential
module: azure.identity
inheritances:
- builtins.object
summary: Authenticates using tokens in the local cache shared between Microsoft applications.
constructor:
  syntax: 'SharedTokenCacheCredential(username: str | None = None, **kwargs: Any)'
  parameters:
  - name: username
    description: 'Username (typically an email address) of the user to authenticate
      as. This is used when the

      local cache contains tokens for multiple identities.'
    defaultValue: None
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: authority
    description: 'Authority of a Microsoft Entra endpoint, for example ''login.microsoftonline.com'',

      the authority for Azure Public Cloud (which is the default). <xref:azure.identity.AzureAuthorityHosts>

      defines authorities for other clouds.'
    types:
    - <xref:str>
  - name: tenant_id
    description: 'a Microsoft Entra tenant ID. Used to select an account when the
      cache contains

      tokens for multiple identities.'
    types:
    - <xref:str>
  - name: authentication_record
    description: 'an authentication record returned by a user credential such as

      <xref:azure.identity.DeviceCodeCredential> or <xref:azure.identity.InteractiveBrowserCredential>'
    types:
    - <xref:azure.identity.AuthenticationRecord>
  - name: cache_persistence_options
    description: 'configuration for persistent token caching. If not provided, the
      credential

      will use the persistent cache shared by Microsoft development applications'
    types:
    - <xref:azure.identity.TokenCachePersistenceOptions>
methods:
- uid: azure.identity.SharedTokenCacheCredential.close
  name: close
  summary: Close the credential's transport session.
  signature: close() -> None
- uid: azure.identity.SharedTokenCacheCredential.get_token
  name: get_token
  summary: 'Get an access token for *scopes* from the shared cache.


    If no access token is cached, attempt to acquire one using a cached refresh token.


    This method is called automatically by Azure SDK clients.'
  signature: 'get_token(*scopes: str, claims: str | None = None, tenant_id: str |
    None = None, enable_cae: bool = False, **kwargs: Any) -> AccessToken'
  parameters:
  - name: scopes
    description: 'desired scopes for the access token. This method requires at least
      one scope.

      For more information about scopes, see

      [https://learn.microsoft.com/azure/active-directory/develop/scopes-oidc](https://learn.microsoft.com/azure/active-directory/develop/scopes-oidc).'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: claims
    description: 'additional claims required in the token, such as those returned
      in a resource provider''s

      claims challenge following an authorization failure'
    types:
    - <xref:str>
  - name: tenant_id
    description: not used by this credential; any value provided will be ignored.
    types:
    - <xref:str>
  - name: enable_cae
    description: 'indicates whether to enable Continuous Access Evaluation (CAE) for
      the requested

      token. Defaults to False.'
    types:
    - <xref:bool>
  return:
    description: An access token with the desired scopes.
    types:
    - <xref:azure.core.credentials.AccessToken>
  exceptions:
  - type: azure.identity.CredentialUnavailableError
    description: 'the cache is unavailable or contains insufficient user

      information'
  - type: azure.core.exceptions.ClientAuthenticationError
    description: authentication failed. The error's `message` attribute gives a reason.
- uid: azure.identity.SharedTokenCacheCredential.supported
  name: supported
  summary: Whether the shared token cache is supported on the current platform.
  signature: static supported() -> bool
  return:
    description: True if the shared token cache is supported on the current platform,
      otherwise False.
    types:
    - <xref:bool>
