### YamlMime:PythonClass
uid: azure.identity.CertificateCredential
name: CertificateCredential
fullName: azure.identity.CertificateCredential
module: azure.identity
inheritances:
- azure.identity._internal.client_credential_base.ClientCredentialBase
summary: 'Authenticates as a service principal using a certificate.


  The certificate must have an RSA private key, because this credential signs assertions
  using RS256. See

  [Azure Active Directory documentation](https://docs.microsoft.com/azure/active-directory/develop/active-directory-certificate-credentials#register-your-certificate-with-microsoft-identity-platform)

  for more information on configuring certificate authentication.'
constructor:
  syntax: 'CertificateCredential(tenant_id: str, client_id: str, certificate_path:
    str | None = None, **kwargs: Any)'
  parameters:
  - name: tenant_id
    description: ID of the service principal's tenant. Also called its "directory"
      ID.
    isRequired: true
    types:
    - <xref:str>
  - name: client_id
    description: The service principal's client ID
    isRequired: true
    types:
    - <xref:str>
  - name: certificate_path
    description: 'Optional path to a certificate file in PEM or PKCS12 format, including
      the private

      key. If not provided, **certificate_data** is required.'
    defaultValue: None
    types:
    - <xref:str>
  - name: authority
    description: 'Authority of an Azure Active Directory endpoint, for example "login.microsoftonline.com",

      the authority for Azure Public Cloud (which is the default). <xref:azure.identity.AzureAuthorityHosts>

      defines authorities for other clouds.'
    types:
    - <xref:str>
  - name: certificate_data
    description: The bytes of a certificate in PEM or PKCS12 format, including the
      private key
    types:
    - <xref:bytes>
  - name: password
    description: 'The certificate''s password. If a unicode string, it will be encoded
      as UTF-8. If the certificate

      requires a different encoding, pass appropriately encoded bytes instead.'
    types:
    - <xref:str>
    - <xref:bytes>
  - name: send_certificate_chain
    description: 'If True, the credential will send the public certificate chain in
      the x5c

      header of each token request''s JWT. This is required for Subject Name/Issuer
      (SNI) authentication. Defaults to

      False.'
    types:
    - <xref:bool>
  - name: cache_persistence_options
    description: 'Configuration for persistent token caching. If unspecified, the
      credential

      will cache tokens in memory.'
    types:
    - <xref:azure.identity.TokenCachePersistenceOptions>
  - name: disable_instance_discovery
    description: 'Determines whether or not instance discovery is performed when attempting

      to authenticate. Setting this to true will completely disable both instance
      discovery and authority validation.

      This functionality is intended for use in scenarios where the metadata endpoint
      cannot be reached, such as in

      private clouds or Azure Stack. The process of instance discovery entails retrieving
      authority metadata from

      [https://login.microsoft.com/](https://login.microsoft.com/) to validate the
      authority. By setting this to **True**, the validation of the

      authority is disabled. As a result, it is crucial to ensure that the configured
      authority host is valid and

      trustworthy.'
    types:
    - <xref:bool>
  - name: additionally_allowed_tenants
    description: 'Specifies tenants in addition to the specified "tenant_id"

      for which the credential may acquire tokens. Add the wildcard value "*" to allow
      the credential to

      acquire tokens for any tenant the application can access.'
    types:
    - <xref:List>[<xref:str>]
examples:
- "Create a CertificateCredential.<!--[!code-python[Main](les\\credential_creation_code_snippets.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\\
  80\\\\azure-identity-1.14.0b2\\\\samples\\\\credential_creation_code_snippets.py\"\
  , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
  : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.identity\
  \ import CertificateCredential\n\n   credential = CertificateCredential(\n     \
  \  tenant_id=\"<tenant_id>\",\n       client_id=\"<client_id>\",\n       certificate_path=\"\
  <path to PEM/PKCS12 certificate>\",\n       password=\"<certificate password if\
  \ necessary>\",\n   )\n\n   # Certificate/private key byte data can also be passed\
  \ directly\n   credential = CertificateCredential(\n       tenant_id=\"<tenant_id>\"\
  ,\n       client_id=\"<client_id>\",\n       certificate_data=b\"<cert data>\",\n\
  \   )\n\n   ````\n"
