### YamlMime:PythonClass
uid: azure.ai.agents.models.ToolSet
name: ToolSet
fullName: azure.ai.agents.models.ToolSet
module: azure.ai.agents.models
summary: A collection of tools that can be used by an synchronize agent.
constructor:
  syntax: ToolSet()
methods:
- uid: azure.ai.agents.models.ToolSet.add
  name: add
  summary: Add a tool to the tool set.
  signature: 'add(tool: Tool)'
  parameters:
  - name: tool
    description: The tool to add.
    isRequired: true
    types:
    - <xref:azure.ai.agents.models.Tool>
  exceptions:
  - type: ValueError
    description: If a tool of the same type already exists, or if an MCP tool with
      the same server label already exists.
- uid: azure.ai.agents.models.ToolSet.execute_tool_calls
  name: execute_tool_calls
  summary: Execute a tool of the specified type with the provided tool calls.
  signature: 'execute_tool_calls(tool_calls: List[Any]) -> Any'
  parameters:
  - name: tool_calls
    description: A list of tool calls to execute.
    isRequired: true
    types:
    - <xref:typing.List>[<xref:typing.Any>]
  return:
    description: The output of the tool operations.
    types:
    - <xref:typing.Any>
- uid: azure.ai.agents.models.ToolSet.get_definitions_and_resources
  name: get_definitions_and_resources
  summary: Get the definitions and resources for all tools in the tool set.
  signature: get_definitions_and_resources() -> Dict[str, Any]
  return:
    description: A dictionary containing the tool resources and definitions.
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]
- uid: azure.ai.agents.models.ToolSet.get_tool
  name: get_tool
  summary: 'Get a tool of the specified type from the tool set.

    For McpTool, if ''server_label'' is provided, returns the MCP tool with that specific
    server label.

    If there are multiple MCP tools and no server_label is provided, raises an error.

    Otherwise, returns the first (or only) tool of the specified type.'
  signature: 'get_tool(tool_type: Type[ToolT], *, server_label: str | None = None)
    -> ToolT'
  parameters:
  - name: tool_type
    description: The type of tool to get.
    isRequired: true
    types:
    - <xref:typing.Type>[<xref:azure.ai.agents.models.Tool>]
  keywordOnlyParameters:
  - name: server_label
    description: The server label of the specific MCP tool to get.
    defaultValue: None
    types:
    - <xref:typing.Optional>[<xref:str>]
  return:
    description: The tool of the specified type.
    types:
    - <xref:azure.ai.agents.models.Tool>
  exceptions:
  - type: ValueError
    description: If a tool of the specified type is not found, if no McpTool with
      the specified server_label is found, or if there are multiple MCP tools but
      no server_label is provided.
- uid: azure.ai.agents.models.ToolSet.remove
  name: remove
  summary: 'Remove a tool of the specified type from the tool set.

    For OpenApiTool, if ''name'' is provided, removes a specific API definition by
    name.

    For McpTool, if ''server_label'' is provided, removes a specific MCP tool by server
    label.

    For McpTool without server_label, removes ALL MCP tools from the toolset.

    Otherwise, removes the entire tool from the toolset.'
  signature: 'remove(tool_type: Type[Tool], *, name: str | None = None, server_label:
    str | None = None) -> None'
  parameters:
  - name: tool_type
    description: The type of tool to remove.
    isRequired: true
    types:
    - <xref:typing.Type>[<xref:azure.ai.agents.models.Tool>]
  keywordOnlyParameters:
  - name: name
    description: The name of the OpenAPI definition to remove from the tool.
    defaultValue: None
    types:
    - <xref:str>
  - name: server_label
    description: The unique server label identifying the MCP tool to remove.
    defaultValue: None
    types:
    - <xref:typing.Optional>[<xref:str>]
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: ValueError
    description: If a tool of the specified type is not found.
- uid: azure.ai.agents.models.ToolSet.validate_tool_type
  name: validate_tool_type
  summary: Validate the type of the tool.
  signature: 'validate_tool_type(tool: Tool) -> None'
  parameters:
  - name: tool
    description: The type of the tool to validate.
    isRequired: true
    types:
    - <xref:azure.ai.agents.models.Tool>
  exceptions:
  - type: ValueError
    description: If the tool type is not a subclass of Tool.
attributes:
- uid: azure.ai.agents.models.ToolSet.definitions
  name: definitions
  summary: Get the definitions for all tools in the tool set.
  return:
    types:
    - <xref:typing.List>[<xref:azure.ai.agents.models.ToolDefinition>]
- uid: azure.ai.agents.models.ToolSet.resources
  name: resources
  summary: Get the resources for all tools in the tool set.
  return:
    types:
    - <xref:azure.ai.agents.models.ToolResources>
