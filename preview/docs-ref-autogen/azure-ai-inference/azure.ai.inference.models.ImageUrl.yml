### YamlMime:PythonClass
uid: azure.ai.inference.models.ImageUrl
name: ImageUrl
fullName: azure.ai.inference.models.ImageUrl
module: azure.ai.inference.models
constructor:
  syntax: 'ImageUrl(*args: Any, **kwargs: Any)'
methods:
- uid: azure.ai.inference.models.ImageUrl.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.ai.inference.models.ImageUrl.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.ai.inference.models.ImageUrl.copy
  name: copy
  signature: copy() -> Model
- uid: azure.ai.inference.models.ImageUrl.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.inference.models.ImageUrl.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.ai.inference.models.ImageUrl.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.ai.inference.models.ImageUrl.load
  name: load
  summary: 'Create an ImageUrl object from a local image file. The method reads the
    image

    file and encodes it as a base64 string, which together with the image format

    is then used to format the JSON *url* value passed in the request payload.'
  signature: 'load(*, image_file: str, image_format: str, detail: str | ImageDetailLevel
    | None = None) -> Self'
  keywordOnlyParameters:
  - name: image_file
    description: The name of the local image file to load. Required.
    types:
    - <xref:str>
  - name: image_format
    description: 'The MIME type format of the image. For example: "jpeg", "png". Required.'
    types:
    - <xref:str>
  - name: detail
    description: 'The evaluation quality setting to use, which controls relative prioritization
      of

      speed, token consumption, and accuracy. Known values are: "auto", "low", and
      "high".'
    defaultValue: None
    types:
    - <xref:str>
    - <xref:azure.ai.inference.models.ImageDetailLevel>
  return:
    description: An ImageUrl object with the image data encoded as a base64 string.
    types:
    - <xref:azure.ai.inference.models.ImageUrl>
  exceptions:
  - type: FileNotFoundError
    description: when the image file could not be opened.
- uid: azure.ai.inference.models.ImageUrl.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.ai.inference.models.ImageUrl.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> Tuple[str, Any]
- uid: azure.ai.inference.models.ImageUrl.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.ai.inference.models.ImageUrl.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.ai.inference.models.ImageUrl.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.ai.inference.models.ImageUrl.detail
  name: detail
  summary: 'The evaluation quality setting to use, which controls relative prioritization
    of speed, token

    consumption, and

    accuracy. Known values are: "auto", "low", and "high".'
  signature: 'detail: str | ''_models.ImageDetailLevel'' | None'
- uid: azure.ai.inference.models.ImageUrl.url
  name: url
  summary: The URL of the image. Required.
  signature: 'url: str'
