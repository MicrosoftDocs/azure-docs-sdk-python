### YamlMime:PythonClass
uid: azure.cosmos.aio.scripts.ScriptsProxy
name: ScriptsProxy
fullName: azure.cosmos.aio.scripts.ScriptsProxy
module: azure.cosmos.aio.scripts
inheritances:
- builtins.object
summary: 'An interface to interact with stored procedures.


  This class should not be instantiated directly. Instead, use the

  <xref:ContainerProxy.scripts> attribute.'
constructor:
  syntax: 'ScriptsProxy(container: ContainerProxy, client_connection: CosmosClientConnection,
    container_link: str)'
methods:
- uid: azure.cosmos.aio.scripts.ScriptsProxy.create_stored_procedure
  name: create_stored_procedure
  summary: 'Create a new stored procedure in the container.


    To replace an existing sproc, use the <xref:Container.scripts.replace_stored_procedure>
    method.'
  signature: 'create_stored_procedure(body: Dict[str, Any], **kwargs: Any) -> Dict[str,
    Any]'
  parameters:
  - name: body
    description: A dict-like object representing the sproc to create.
    isRequired: true
  return:
    description: A dict representing the new stored procedure.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: If the given stored procedure couldn't be created.
    type: azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.aio.scripts.ScriptsProxy.create_trigger
  name: create_trigger
  summary: 'Create a trigger in the container.


    To replace an existing trigger, use the <xref:ContainerProxy.scripts.replace_trigger>
    method.'
  signature: 'create_trigger(body: Dict[str, Any], **kwargs: Any) -> Dict[str, Any]'
  parameters:
  - name: body
    description: A dict-like object representing the trigger to create.
    isRequired: true
  return:
    description: A dict representing the new trigger.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: If the given trigger couldn't be created.
    type: azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.aio.scripts.ScriptsProxy.create_user_defined_function
  name: create_user_defined_function
  summary: 'Create a user-defined function in the container.


    To replace an existing UDF, use the <xref:ContainerProxy.scripts.replace_user_defined_function>
    method.'
  signature: 'create_user_defined_function(body: Dict[str, Any], **kwargs: Any) ->
    Dict[str, Any]'
  parameters:
  - name: body
    description: A dict-like object representing the udf to create.
    isRequired: true
  return:
    description: A dict representing the new user-defined function.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: If the user-defined function couldn't be created.
    type: azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.aio.scripts.ScriptsProxy.delete_stored_procedure
  name: delete_stored_procedure
  summary: 'Delete a specified stored procedure from the container.


    If the stored procedure does not already exist in the container, an exception
    is raised.'
  signature: 'delete_stored_procedure(sproc: Union[str, Dict[str, Any]], **kwargs:
    Any) -> None'
  parameters:
  - name: sproc
    description: The ID (name) or dict representing stored procedure to be deleted.
    isRequired: true
  return:
    types:
    - <xref:None>
  exceptions:
  - description: The sproc wasn't deleted successfully.
    type: azure.cosmos.exceptions.CosmosHttpResponseError
  - description: The sproc does not exist in the container.
    type: azure.cosmos.exceptions.CosmosResourceNotFoundError
- uid: azure.cosmos.aio.scripts.ScriptsProxy.delete_trigger
  name: delete_trigger
  summary: 'Delete a specified trigger from the container.


    If the trigger does not already exist in the container, an exception is raised.'
  signature: 'delete_trigger(trigger: Union[str, Dict[str, Any]], **kwargs: Any) ->
    None'
  parameters:
  - name: trigger
    description: The ID (name) or dict representing trigger to be deleted.
    isRequired: true
  return:
    types:
    - <xref:None>
  exceptions:
  - description: The trigger wasn't deleted successfully.
    type: azure.cosmos.exceptions.CosmosHttpResponseError
  - description: The trigger does not exist in the container.
    type: azure.cosmos.exceptions.CosmosResourceNotFoundError
- uid: azure.cosmos.aio.scripts.ScriptsProxy.delete_user_defined_function
  name: delete_user_defined_function
  summary: 'Delete a specified user-defined function from the container.


    If the UDF does not already exist in the container, an exception is raised.'
  signature: 'delete_user_defined_function(udf: Union[str, Dict[str, Any]], **kwargs:
    Any) -> None'
  parameters:
  - name: udf
    description: The ID (name) or dict representing udf to be deleted.
    isRequired: true
  return:
    types:
    - <xref:None>
  exceptions:
  - description: The udf wasn't deleted successfully.
    type: azure.cosmos.exceptions.CosmosHttpResponseError
  - description: The UDF does not exist in the container.
    type: azure.cosmos.exceptions.CosmosResourceNotFoundError
- uid: azure.cosmos.aio.scripts.ScriptsProxy.execute_stored_procedure
  name: execute_stored_procedure
  summary: 'Execute a specified stored procedure.


    If the stored procedure does not already exist in the container, an exception
    is raised.'
  signature: 'execute_stored_procedure(sproc: Union[str, Dict[str, Any]], partition_key:
    Optional[str] = None, params: Optional[List[Any]] = None, enable_script_logging:
    Optional[bool] = None, **kwargs: Any) -> Any'
  parameters:
  - name: sproc
    description: The ID (name) or dict representing the stored procedure to be executed.
    isRequired: true
  - name: partition_key
    description: Specifies the partition key to indicate which partition the sproc
      should execute on.
    isRequired: true
  - name: params
    description: List of parameters to be passed to the stored procedure to be executed.
    isRequired: true
  - name: enable_script_logging
    description: Enables or disables script logging for the current request.
    isRequired: true
    types:
    - <xref:bool>
  return:
    description: Result of the executed stored procedure for the given parameters.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: 'If the stored procedure execution failed

      or if the stored procedure with given id does not exists in the container.'
    type: azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.aio.scripts.ScriptsProxy.get_stored_procedure
  name: get_stored_procedure
  summary: Get the stored procedure identified by *id*.
  signature: 'get_stored_procedure(sproc: Union[str, Dict[str, Any]], **kwargs: Any)
    -> Dict[str, Any]'
  parameters:
  - name: sproc
    description: The ID (name) or dict representing stored procedure to retrieve.
    isRequired: true
  return:
    description: A dict representing the retrieved stored procedure.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: If the given stored procedure couldn't be retrieved.
    type: azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.aio.scripts.ScriptsProxy.get_trigger
  name: get_trigger
  summary: Get a trigger identified by *id*.
  signature: 'get_trigger(trigger: Union[str, Dict[str, Any]], **kwargs: Any) -> Dict[str,
    Any]'
  parameters:
  - name: trigger
    description: The ID (name) or dict representing trigger to retrieve.
    isRequired: true
  return:
    description: A dict representing the retrieved trigger.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: If the given trigger couldn't be retrieved.
    type: azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.aio.scripts.ScriptsProxy.get_user_defined_function
  name: get_user_defined_function
  summary: Get a user-defined function identified by *id*.
  signature: 'get_user_defined_function(udf: Union[str, Dict[str, Any]], **kwargs:
    Any) -> Dict[str, Any]'
  parameters:
  - name: udf
    description: The ID (name) or dict representing udf to retrieve.
    isRequired: true
  return:
    description: A dict representing the retrieved user-defined function.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: If the user-defined function couldn't be retrieved.
    type: azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.aio.scripts.ScriptsProxy.list_stored_procedures
  name: list_stored_procedures
  summary: List all stored procedures in the container.
  signature: 'list_stored_procedures(max_item_count: Optional[int] = None, **kwargs:
    Any) -> azure.core.async_paging.AsyncItemPaged[Dict[str, Any]]'
  parameters:
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: An AsyncItemPaged of stored procedures (dicts).
    types:
    - <xref:AsyncItemPaged>[<xref:Dict>[<xref:str>, <xref:Any>]]
- uid: azure.cosmos.aio.scripts.ScriptsProxy.list_triggers
  name: list_triggers
  summary: List all triggers in the container.
  signature: 'list_triggers(max_item_count: Optional[int] = None, **kwargs: Any) ->
    azure.core.async_paging.AsyncItemPaged[Dict[str, Any]]'
  parameters:
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  return:
    description: An AsyncItemPaged of triggers (dicts).
    types:
    - <xref:AsyncItemPaged>[<xref:Dict>[<xref:str>, <xref:Any>]]
- uid: azure.cosmos.aio.scripts.ScriptsProxy.list_user_defined_functions
  name: list_user_defined_functions
  summary: List all the user-defined functions in the container.
  signature: 'list_user_defined_functions(max_item_count: Optional[int] = None, **kwargs:
    Any) -> azure.core.async_paging.AsyncItemPaged[Dict[str, Any]]'
  parameters:
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  return:
    description: An AsyncItemPaged of user-defined functions (dicts).
    types:
    - <xref:AsyncItemPaged>[<xref:Dict>[<xref:str>, <xref:Any>]]
- uid: azure.cosmos.aio.scripts.ScriptsProxy.query_stored_procedures
  name: query_stored_procedures
  summary: Return all stored procedures matching the given *query*.
  signature: 'query_stored_procedures(query: str, parameters: Optional[List[str]]
    = None, max_item_count: Optional[int] = None, **kwargs: Any) -> azure.core.async_paging.AsyncItemPaged[Dict[str,
    Any]]'
  parameters:
  - name: query
    description: The Azure Cosmos DB SQL query to execute.
    isRequired: true
  - name: parameters
    description: Optional array of parameters to the query. Ignored if no query is
      provided.
    isRequired: true
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  return:
    description: An AsyncItemPaged of stored procedures (dicts).
    types:
    - <xref:AsyncItemPaged>[<xref:Dict>[<xref:str>, <xref:Any>]]
- uid: azure.cosmos.aio.scripts.ScriptsProxy.query_triggers
  name: query_triggers
  summary: Return all triggers matching the given *query*.
  signature: 'query_triggers(query: str, parameters: Optional[List[str]] = None, max_item_count:
    Optional[int] = None, **kwargs: Any) -> azure.core.async_paging.AsyncItemPaged[Dict[str,
    Any]]'
  parameters:
  - name: query
    description: The Azure Cosmos DB SQL query to execute.
    isRequired: true
  - name: parameters
    description: Optional array of parameters to the query. Ignored if no query is
      provided.
    isRequired: true
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  return:
    description: An AsyncItemPaged of triggers (dicts).
    types:
    - <xref:AsyncItemPaged>[<xref:Dict>[<xref:str>, <xref:Any>]]
- uid: azure.cosmos.aio.scripts.ScriptsProxy.query_user_defined_functions
  name: query_user_defined_functions
  summary: Return user-defined functions matching a given *query*.
  signature: 'query_user_defined_functions(query: str, parameters: Optional[List[str]]
    = None, max_item_count: Optional[int] = None, **kwargs: Any) -> azure.core.async_paging.AsyncItemPaged[Dict[str,
    Any]]'
  parameters:
  - name: query
    description: The Azure Cosmos DB SQL query to execute.
    isRequired: true
  - name: parameters
    description: Optional array of parameters to the query. Ignored if no query is
      provided.
    isRequired: true
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  return:
    description: An AsyncItemPaged of user-defined functions (dicts).
    types:
    - <xref:AsyncItemPaged>[<xref:Dict>[<xref:str>, <xref:Any>]]
- uid: azure.cosmos.aio.scripts.ScriptsProxy.replace_stored_procedure
  name: replace_stored_procedure
  summary: 'Replace a specified stored procedure in the container.


    If the stored procedure does not already exist in the container, an exception
    is raised.'
  signature: 'replace_stored_procedure(sproc: Union[str, Dict[str, Any]], body: Dict[str,
    Any], **kwargs: Any) -> Dict[str, Any]'
  parameters:
  - name: sproc
    description: The ID (name) or dict representing stored procedure to be replaced.
    isRequired: true
  - name: body
    description: A dict-like object representing the sproc to replace.
    isRequired: true
  return:
    description: A dict representing the stored procedure after replace went through.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: 'If the replace failed or the stored

      procedure with given id does not exist.'
    type: azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.aio.scripts.ScriptsProxy.replace_trigger
  name: replace_trigger
  summary: 'Replace a specified tigger in the container.


    If the trigger does not already exist in the container, an exception is raised.'
  signature: 'replace_trigger(trigger: Union[str, Dict[str, Any]], body: Dict[str,
    Any], **kwargs: Any) -> Dict[str, Any]'
  parameters:
  - name: trigger
    description: The ID (name) or dict representing trigger to be replaced.
    isRequired: true
  - name: body
    description: A dict-like object representing the trigger to replace.
    isRequired: true
  return:
    description: A dict representing the trigger after replace went through.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: 'If the replace failed or the trigger with given

      id does not exist.'
    type: azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.aio.scripts.ScriptsProxy.replace_user_defined_function
  name: replace_user_defined_function
  summary: 'Replace a specified user-defined function in the container.


    If the UDF does not already exist in the container, an exception is raised.'
  signature: 'replace_user_defined_function(udf: Union[str, Dict[str, Any]], body:
    Dict[str, Any], **kwargs: Any) -> Dict[str, Any]'
  parameters:
  - name: udf
    description: The ID (name) or dict representing udf to be replaced.
    isRequired: true
  - name: body
    description: A dict-like object representing the udf to replace.
    isRequired: true
  return:
    description: A dict representing the user-defined function after replace went
      through.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: 'If the replace failed or the user-defined function

      with the given id does not exist.'
    type: azure.cosmos.exceptions.CosmosHttpResponseError
