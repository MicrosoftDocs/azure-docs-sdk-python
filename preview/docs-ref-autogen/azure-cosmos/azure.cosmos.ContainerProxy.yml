### YamlMime:PythonClass
uid: azure.cosmos.ContainerProxy
name: ContainerProxy
fullName: azure.cosmos.ContainerProxy
module: azure.cosmos
inheritances:
- builtins.object
summary: 'An interface to interact with a specific DB Container.


  This class should not be instantiated directly. Instead, use the

  <xref:azure.cosmos.database.DatabaseProxy.get_container_client> method to get an
  existing

  container, or the <xref:azure.cosmos.database.DatabaseProxy.create_container> method
  to create a

  new container.


  A container in an Azure Cosmos DB SQL API database is a collection of

  documents, each of which is represented as an Item.'
constructor:
  syntax: 'ContainerProxy(client_connection: CosmosClientConnection, database_link:
    str, id: str, properties: Dict[str, Any] = None)'
  parameters:
  - name: client_connection
  - name: database_link
  - name: id
  - name: properties
    defaultValue: None
variables:
- description: ID (name) of the container
  name: id
  types:
  - <xref:azure.cosmos.str>
- description: The session token for the container.
  name: session_token
  types:
  - <xref:azure.cosmos.str>
methods:
- uid: azure.cosmos.ContainerProxy.create_item
  name: create_item
  summary: 'Create an item in the container.


    To update or replace an existing item, use the

    <xref:azure.cosmos.ContainerProxy.upsert_item> method.'
  signature: 'create_item(body: Dict[str, Any], populate_query_metrics: bool | None
    = None, pre_trigger_include: str | None = None, post_trigger_include: str | None
    = None, indexing_directive: Any | None = None, **kwargs: Any) -> Dict[str, Any]'
  parameters:
  - name: body
    description: A dict-like object representing the item to create.
    isRequired: true
  - name: pre_trigger_include
    description: trigger id to be used as pre operation trigger.
    isRequired: true
  - name: post_trigger_include
    description: trigger id to be used as post operation trigger.
    isRequired: true
  - name: indexing_directive
    description: Indicate whether the document should be omitted from indexing.
    isRequired: true
  - name: enable_automatic_id_generation
    description: Enable automatic id generation if no id present.
    types:
    - <xref:bool>
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str,str>]
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: A dict representing the new item.
    types:
    - <xref:azure.cosmos.dict>[<xref:azure.cosmos.str>, <xref:azure.cosmos.Any>]
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: Item with the given ID already exists.
- uid: azure.cosmos.ContainerProxy.delete_conflict
  name: delete_conflict
  summary: 'Delete a specified conflict from the container.


    If the conflict does not already exist in the container, an exception is raised.'
  signature: 'delete_conflict(conflict: str | Dict[str, Any], partition_key: Any,
    **kwargs: Any) -> None'
  parameters:
  - name: conflict
    description: The ID (name) or dict representing the conflict to be deleted.
    isRequired: true
  - name: partition_key
    description: Partition key for the conflict to delete.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    types:
    - <xref:azure.cosmos.None>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: The conflict wasn't deleted successfully.
  - type: azure.cosmos.exceptions.CosmosResourceNotFoundError
    description: The conflict does not exist in the container.
- uid: azure.cosmos.ContainerProxy.delete_item
  name: delete_item
  summary: 'Delete the specified item from the container.


    If the item does not already exist in the container, an exception is raised.'
  signature: 'delete_item(item: Dict[str, Any] | str, partition_key: Any, populate_query_metrics:
    bool | None = None, pre_trigger_include: str | None = None, post_trigger_include:
    str | None = None, **kwargs: Any) -> None'
  parameters:
  - name: item
    description: The ID (name) or dict representing item to be deleted.
    isRequired: true
  - name: partition_key
    description: Specifies the partition key value for the item.
    isRequired: true
  - name: pre_trigger_include
    description: trigger id to be used as pre operation trigger.
    isRequired: true
  - name: post_trigger_include
    description: trigger id to be used as post operation trigger.
    isRequired: true
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str,str>]
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    types:
    - <xref:azure.cosmos.None>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: The item wasn't deleted successfully.
  - type: azure.cosmos.exceptions.CosmosResourceNotFoundError
    description: The item does not exist in the container.
- uid: azure.cosmos.ContainerProxy.get_conflict
  name: get_conflict
  summary: Get the conflict identified by *conflict*.
  signature: 'get_conflict(conflict: str | Dict[str, Any], partition_key: Any, **kwargs:
    Any) -> Dict[str, Any]'
  parameters:
  - name: conflict
    description: The ID (name) or dict representing the conflict to retrieve.
    isRequired: true
  - name: partition_key
    description: Partition key for the conflict to retrieve.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: A dict representing the retrieved conflict.
    types:
    - <xref:azure.cosmos.dict>[<xref:azure.cosmos.str>, <xref:azure.cosmos.Any>]
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: The given conflict couldn't be retrieved.
- uid: azure.cosmos.ContainerProxy.get_throughput
  name: get_throughput
  summary: "Get the ThroughputProperties object for this container.\n\nIf no ThroughputProperties\
    \ already exist for the container, an exception is raised.\n:keyword Callable\
    \ response_hook: A callable invoked with the response metadata.\n:returns: Throughput\
    \ for the container.\n:raises ~azure.cosmos.exceptions.CosmosHttpResponseError:\
    \ No throughput properties exists for the container or\n\n   the throughput properties\
    \ could not be retrieved."
  signature: 'get_throughput(**kwargs: Any) -> ThroughputProperties'
  return:
    types:
    - <xref:azure.cosmos.ThroughputProperties>
- uid: azure.cosmos.ContainerProxy.list_conflicts
  name: list_conflicts
  summary: List all the conflicts in the container.
  signature: 'list_conflicts(max_item_count: int | None = None, **kwargs: Any) ->
    Iterable[Dict[str, Any]]'
  parameters:
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: An Iterable of conflicts (dicts).
    types:
    - <xref:azure.cosmos.Iterable>[<xref:azure.cosmos.dict>[<xref:azure.cosmos.str>,
      <xref:azure.cosmos.Any>]]
- uid: azure.cosmos.ContainerProxy.query_conflicts
  name: query_conflicts
  summary: Return all conflicts matching a given *query*.
  signature: 'query_conflicts(query: str, parameters: List[str] | None = None, enable_cross_partition_query:
    bool | None = None, partition_key: Any | None = None, max_item_count: int | None
    = None, **kwargs: Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: query
    description: The Azure Cosmos DB SQL query to execute.
    isRequired: true
  - name: parameters
    description: Optional array of parameters to the query. Ignored if no query is
      provided.
    isRequired: true
  - name: enable_cross_partition_query
    description: 'Allows sending of more than one request to execute

      the query in the Azure Cosmos DB service.

      More than one request is necessary if the query is not scoped to single partition
      key value.'
    isRequired: true
  - name: partition_key
    description: Specifies the partition key value for the item.
    isRequired: true
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: An Iterable of conflicts (dicts).
    types:
    - <xref:azure.cosmos.Iterable>[<xref:azure.cosmos.dict>[<xref:azure.cosmos.str>,
      <xref:azure.cosmos.Any>]]
- uid: azure.cosmos.ContainerProxy.query_items
  name: query_items
  summary: "Return all results matching the given *query*.\n\nYou can use any value\
    \ for the container name in the FROM clause, but\noften the container name is\
    \ used. In the examples below, the container\nname is \"products,\" and is aliased\
    \ as \"p\" for easier referencing in\nthe WHERE clause.\n\nThe max cache staleness\
    \ for the integrated cache in milliseconds.\n   For accounts configured to use\
    \ the integrated cache, using Session or Eventual consistency,\n   responses are\
    \ guaranteed to be no staler than this value."
  signature: 'query_items(query: str, parameters: List[Dict[str, object]] | None =
    None, partition_key: Any | None = None, enable_cross_partition_query: bool | None
    = None, max_item_count: int | None = None, enable_scan_in_query: bool | None =
    None, populate_query_metrics: bool | None = None, **kwargs: Any) -> Iterable[Dict[str,
    Any]]'
  return:
    description: An Iterable of items (dicts).
    types:
    - <xref:azure.cosmos.ItemPaged>[<xref:azure.cosmos.Dict>[<xref:azure.cosmos.str>,
      <xref:azure.cosmos.Any>]]
  examples:
  - "Get all products that have not been discontinued:<!--[!code-python[Main](les\\\
    examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
    : [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\
    \\s\\\\dist_temp\\\\74\\\\azure-cosmos-4.3.1b1\\\\samples\\\\examples.py\", \"\
    xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   import json\n\
    \n   for item in container.query_items(\n       query='SELECT * FROM products\
    \ p WHERE p.productModel <> \"DISCONTINUED\"',\n       enable_cross_partition_query=True,\n\
    \   ):\n       print(json.dumps(item, indent=True))\n\n   ````\n\nParameterized\
    \ query to get all products that have been discontinued:<!--[!code-python[Main](les\\\
    examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
    : [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\
    \\s\\\\dist_temp\\\\74\\\\azure-cosmos-4.3.1b1\\\\samples\\\\examples.py\", \"\
    xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   discontinued_items\
    \ = container.query_items(\n       query='SELECT * FROM products p WHERE p.productModel\
    \ = @model AND p.productName=\"Widget\"',\n       parameters=[dict(name=\"@model\"\
    , value=\"DISCONTINUED\")],\n   )\n   for item in discontinued_items:\n      \
    \ print(json.dumps(item, indent=True))\n\n   ````\n"
- uid: azure.cosmos.ContainerProxy.query_items_change_feed
  name: query_items_change_feed
  summary: Get a sorted list of items that were changed, in the order in which they
    were modified.
  signature: 'query_items_change_feed(partition_key_range_id: str | None = None, is_start_from_beginning:
    bool = False, continuation: str | None = None, max_item_count: int | None = None,
    **kwargs: Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: partition_key_range_id
    description: 'ChangeFeed requests can be executed against specific partition key
      ranges.

      This is used to process the change feed in parallel across multiple consumers.'
    isRequired: true
  - name: partition_key
    description: partition key at which ChangeFeed requests are targetted.
    isRequired: true
  - name: is_start_from_beginning
    description: 'Get whether change feed should start from

      beginning (true) or from current (false). By default it''s start from current
      (false).'
    isRequired: true
  - name: continuation
    description: e_tag value to be used as continuation for reading change feed.
    isRequired: true
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: An Iterable of items (dicts).
    types:
    - <xref:azure.cosmos.Iterable>[<xref:azure.cosmos.dict>[<xref:azure.cosmos.str>,
      <xref:azure.cosmos.Any>]]
- uid: azure.cosmos.ContainerProxy.read
  name: read
  summary: Read the container properties.
  signature: 'read(*, populate_partition_key_range_statistics: bool | None = None,
    populate_quota_info: bool | None = None, **kwargs)'
  parameters:
  - name: populate_partition_key_range_statistics
    description: 'Enable returning partition key

      range statistics in response headers.'
    types:
    - <xref:bool>
  - name: populate_quota_info
    description: Enable returning collection storage quota information in response
      headers.
    types:
    - <xref:bool>
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str,str>]
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: Dict representing the retrieved container.
    types:
    - <xref:azure.cosmos.dict>[<xref:azure.cosmos.str>, <xref:azure.cosmos.Any>]
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: 'Raised if the container couldn''t be retrieved.

      This includes if the container does not exist.'
- uid: azure.cosmos.ContainerProxy.read_all_items
  name: read_all_items
  summary: "List all the items in the container.\n\nThe max cache staleness for the\
    \ integrated cache in milliseconds.\n   For accounts configured to use the integrated\
    \ cache, using Session or Eventual consistency,\n   responses are guaranteed to\
    \ be no staler than this value."
  signature: 'read_all_items(max_item_count: int | None = None, populate_query_metrics:
    bool | None = None, **kwargs: Any) -> Iterable[Dict[str, Any]]'
  return:
    description: An Iterable of items (dicts).
    types:
    - <xref:azure.cosmos.Iterable>[<xref:azure.cosmos.dict>[<xref:azure.cosmos.str>,
      <xref:azure.cosmos.Any>]]
- uid: azure.cosmos.ContainerProxy.read_item
  name: read_item
  summary: "Get the item identified by *item*.\n\nThe max cache staleness for the\
    \ integrated cache in milliseconds.\n   For accounts configured to use the integrated\
    \ cache, using Session or Eventual consistency,\n   responses are guaranteed to\
    \ be no staler than this value."
  signature: 'read_item(item: str | Dict[str, Any], partition_key: Any, populate_query_metrics:
    bool | None = None, post_trigger_include: str | None = None, **kwargs: Any) ->
    Dict[str, Any]'
  return:
    description: Dict representing the item to be retrieved.
    types:
    - <xref:azure.cosmos.dict>[<xref:azure.cosmos.str>, <xref:azure.cosmos.Any>]
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: The given item couldn't be retrieved.
  examples:
  - "Get an item from the database and update one of its properties:<!--[!code-python[Main](les\\\
    examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
    : [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\
    \\s\\\\dist_temp\\\\74\\\\azure-cosmos-4.3.1b1\\\\samples\\\\examples.py\", \"\
    xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   item = container.read_item(\"\
    item2\", partition_key=\"Widget\")\n   item[\"productModel\"] = \"DISCONTINUED\"\
    \n   updated_item = container.upsert_item(item)\n\n   ````\n"
- uid: azure.cosmos.ContainerProxy.read_offer
  name: read_offer
  summary: "Get the ThroughputProperties object for this container.\nIf no ThroughputProperties\
    \ already exist for the container, an exception is raised.\n:keyword Callable\
    \ response_hook: A callable invoked with the response metadata.\n:returns: Throughput\
    \ for the container.\n:raises ~azure.cosmos.exceptions.CosmosHttpResponseError:\
    \ No throughput properties exists for the container or\n\n   the throughput properties\
    \ could not be retrieved."
  signature: 'read_offer(**kwargs: Any) -> Offer'
  return:
    types:
    - <xref:azure.cosmos.ThroughputProperties>
- uid: azure.cosmos.ContainerProxy.replace_item
  name: replace_item
  summary: 'Replaces the specified item if it exists in the container.


    If the item does not already exist in the container, an exception is raised.'
  signature: 'replace_item(item: str | Dict[str, Any], body: Dict[str, Any], populate_query_metrics:
    bool | None = None, pre_trigger_include: str | None = None, post_trigger_include:
    str | None = None, **kwargs: Any) -> Dict[str, Any]'
  parameters:
  - name: item
    description: The ID (name) or dict representing item to be replaced.
    isRequired: true
  - name: body
    description: A dict-like object representing the item to replace.
    isRequired: true
  - name: pre_trigger_include
    description: trigger id to be used as pre operation trigger.
    isRequired: true
  - name: post_trigger_include
    description: trigger id to be used as post operation trigger.
    isRequired: true
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str,str>]
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: A dict representing the item after replace went through.
    types:
    - <xref:azure.cosmos.dict>[<xref:azure.cosmos.str>, <xref:azure.cosmos.Any>]
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: 'The replace failed or the item with

      given id does not exist.'
- uid: azure.cosmos.ContainerProxy.replace_throughput
  name: replace_throughput
  summary: 'Replace the container''s throughput.


    If no ThroughputProperties already exist for the container, an exception is raised.'
  signature: 'replace_throughput(throughput: int | ThroughputProperties | None, **kwargs:
    Any) -> ThroughputProperties'
  parameters:
  - name: throughput
    description: The throughput to be set (an integer).
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: ThroughputProperties for the container, updated with new throughput.
    types:
    - <xref:azure.cosmos.ThroughputProperties>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: 'No throughput properties exist for the container

      or the throughput properties could not be updated.'
- uid: azure.cosmos.ContainerProxy.upsert_item
  name: upsert_item
  summary: 'Insert or update the specified item.


    If the item already exists in the container, it is replaced. If the item

    does not already exist, it is inserted.'
  signature: 'upsert_item(body: Dict[str, Any], populate_query_metrics: bool | None
    = None, pre_trigger_include: str | None = None, post_trigger_include: str | None
    = None, **kwargs: Any) -> Dict[str, Any]'
  parameters:
  - name: body
    description: A dict-like object representing the item to update or insert.
    isRequired: true
  - name: pre_trigger_include
    description: trigger id to be used as pre operation trigger.
    isRequired: true
  - name: post_trigger_include
    description: trigger id to be used as post operation trigger.
    isRequired: true
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str,str>]
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: A dict representing the upserted item.
    types:
    - <xref:azure.cosmos.dict>[<xref:azure.cosmos.str>, <xref:azure.cosmos.Any>]
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: The given item could not be upserted.
attributes:
- uid: azure.cosmos.ContainerProxy.is_system_key
  name: is_system_key
- uid: azure.cosmos.ContainerProxy.scripts
  name: scripts
