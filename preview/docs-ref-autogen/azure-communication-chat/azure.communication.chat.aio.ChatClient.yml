### YamlMime:PythonClass
uid: azure.communication.chat.aio.ChatClient
name: ChatClient
fullName: azure.communication.chat.aio.ChatClient
module: azure.communication.chat.aio
inheritances:
- builtins.object
summary: 'A client to interact with the AzureCommunicationService Chat gateway.


  This client provides operations to create chat thread, delete chat thread,

  get chat thread client by thread id, list chat threads.'
constructor:
  syntax: 'ChatClient(endpoint: str, credential: azure.communication.chat._shared.user_credential_async.CommunicationTokenCredential,
    **kwargs: typing.Any) -> None'
  parameters:
  - name: endpoint
    description: The endpoint of the Azure Communication resource.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: The credentials with which to authenticate.
    isRequired: true
    types:
    - <xref:CommunicationTokenCredential>
examples:
- "Creating the ChatClient from a URL and token.<!--[!code-python[Main](les\\chat_client_sample_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\70\\\\azure-communication-chat-1.1.0b1\\\
  \\samples\\\\chat_client_sample_async.py\", \"xml:space\": \"preserve\", \"language\"\
  : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
  \n````python\n\n   from azure.communication.chat.aio import ChatClient, CommunicationTokenCredential\n\
  \n   # set `endpoint` to an existing ACS endpoint\n   chat_client = ChatClient(endpoint,\
  \ CommunicationTokenCredential(token))\n\n   ````\n"
methods:
- uid: azure.communication.chat.aio.ChatClient.close
  name: close
  signature: close() -> None
- uid: azure.communication.chat.aio.ChatClient.create_chat_thread
  name: create_chat_thread
  summary: Creates a chat thread.
  signature: 'create_chat_thread(topic: str, **kwargs) -> azure.communication.chat._models.CreateChatThreadResult'
  parameters:
  - name: topic
    description: Required. The thread topic.
    isRequired: true
    types:
    - <xref:str>
  - name: thread_participants
    description: Optional. Participants to be added to the thread.
    types:
    - <xref:List>[<xref:azure.communication.chat.ChatParticipant>]
  - name: idempotency_token
    description: 'Optional. If specified, the client directs that the request is

      repeatable; that is, the client can make the request multiple times with the
      same

      Idempotency_Token and get back an appropriate response without the server executing
      the

      request multiple times. The value of the Idempotency_Token is an opaque string

      representing a client-generated, globally unique for all time, identifier for
      the request. If not

      specified, a new unique id would be generated.'
    types:
    - <xref:str>
  return:
    description: CreateChatThreadResult
    types:
    - <xref:azure.communication.chat.CreateChatThreadResult>
  examples:
  - "Creating a new chat thread.<!--[!code-python[Main](les\\chat_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\\chat_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   ````\n"
- uid: azure.communication.chat.aio.ChatClient.delete_chat_thread
  name: delete_chat_thread
  summary: Deletes a chat thread.
  signature: 'delete_chat_thread(thread_id: str, **kwargs) -> None'
  parameters:
  - name: thread_id
    description: Required. Thread id to delete.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Deleting a chat thread.<!--[!code-python[Main](les\\chat_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\\chat_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   ````\n"
- uid: azure.communication.chat.aio.ChatClient.get_chat_thread_client
  name: get_chat_thread_client
  summary: Get ChatThreadClient by providing a thread_id.
  signature: 'get_chat_thread_client(thread_id: str, **kwargs: typing.Any) -> azure.communication.chat.aio._chat_thread_client_async.ChatThreadClient'
  parameters:
  - name: thread_id
    description: Required. The thread id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: ChatThreadClient
    types:
    - <xref:azure.communication.chat.aio.ChatThreadClient>
  examples:
  - "Retrieving the ChatThreadClient from an existing chat thread id.<!--[!code-python[Main](les\\\
    chat_client_sample_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\
    \\chat_client_sample_async.py\", \"xml:space\": \"preserve\", \"language\": \"\
    python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n\
    ````python\n\n   from azure.communication.chat.aio import ChatClient, CommunicationTokenCredential\n\
    \n   # set `endpoint` to an existing ACS endpoint\n   chat_client = ChatClient(endpoint,\
    \ CommunicationTokenCredential(token))\n\n   # set `thread_id` to an existing\
    \ chat thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id)\n\
    \n   ````\n"
- uid: azure.communication.chat.aio.ChatClient.list_chat_threads
  name: list_chat_threads
  summary: Gets the list of chat threads of a user.
  signature: 'list_chat_threads(**kwargs: typing.Any)'
  parameters:
  - name: results_per_page
    description: The maximum number of chat threads to be returned per page.
    types:
    - <xref:int>
  - name: start_time
    description: The earliest point in time to get chat threads up to.
    types:
    - <xref:datetime.datetime>
  return:
    description: An iterator like instance of ChatThreadItem
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.communication.chat.ChatThreadItem>]
  examples:
  - "Listing chat threads.<!--[!code-python[Main](les\\chat_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\\chat_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   ````\n"
