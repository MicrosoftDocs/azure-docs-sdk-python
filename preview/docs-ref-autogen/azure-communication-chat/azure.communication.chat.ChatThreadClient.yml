### YamlMime:PythonClass
uid: azure.communication.chat.ChatThreadClient
name: ChatThreadClient
fullName: azure.communication.chat.ChatThreadClient
module: azure.communication.chat
inheritances:
- builtins.object
summary: 'A client to interact with the AzureCommunicationService Chat gateway.

  Instances of this class is normally retrieved by ChatClient.get_chat_thread_client()


  This client provides operations to add participant(s) to chat thread, remove participant
  from

  chat thread, send message, delete message, update message, send typing notifications,

  send and list read receipt'
constructor:
  syntax: ChatThreadClient(endpoint, credential, thread_id, **kwargs)
  parameters:
  - name: endpoint
    description: The endpoint of the Azure Communication resource.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. The value contains a
      User

      Access Token'
    isRequired: true
    types:
    - <xref:CommunicationTokenCredential>
  - name: thread_id
    description: The unique thread id.
    isRequired: true
    types:
    - <xref:str>
variables:
- description: Chat thread id.
  name: thread_id
  types:
  - <xref:str>
examples:
- "Creating the ChatThreadClient.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\70\\\\azure-communication-chat-1.1.0b1\\\
  \\samples\\\\chat_thread_client_sample.py\", \"xml:space\": \"preserve\", \"language\"\
  : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
  \n````python\n\n   from datetime import datetime\n   from azure.communication.chat\
  \ import (\n       ChatClient,\n       ChatParticipant,\n       CommunicationUserIdentifier,\n\
  \       CommunicationTokenCredential\n   )\n   # retrieve `token` using CommunicationIdentityClient.get_token\
  \ method\n   # set `endpoint` to ACS service endpoint\n   # create `user` using\
  \ CommunicationIdentityClient.create_user method for new users;\n   # else for existing\
  \ users set `user` = CommunicationUserIdentifier(some_user_id)\n   chat_client =\
  \ ChatClient(endpoint, CommunicationTokenCredential(token))\n   topic = \"test topic\"\
  \n   participants = [ChatParticipant(\n       identifier=user,\n       display_name='name',\n\
  \       share_history_time=datetime.utcnow()\n   )]\n   create_chat_thread_result\
  \ = chat_client.create_chat_thread(topic, thread_participants=participants)\n  \
  \ chat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n\
  \n   ````\n"
methods:
- uid: azure.communication.chat.ChatThreadClient.add_participants
  name: add_participants
  summary: 'Adds thread participants to a thread. If participants already exist, no
    change occurs.


    If all participants are added successfully, then an empty list is returned;

    otherwise, a list of tuple(chat_thread_participant, chat_error) is returned,

    of failed participants and its respective error'
  signature: add_participants(thread_participants, **kwargs)
  parameters:
  - name: thread_participants
    description: Thread participants to be added to the thread.
    isRequired: true
    types:
    - <xref:List>[<xref:azure.communication.chat.ChatParticipant>]
  return:
    description: List[Tuple[ChatParticipant, ChatError]]
    types:
    - <xref:List>[<xref:Tuple>[<xref:azure.communication.chat.ChatParticipant>, <xref:azure.communication.chat.ChatError>]]
  examples:
  - "Adding participants to chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.communication.chat\
    \ import ChatParticipant\n   from datetime import datetime\n\n   def decide_to_retry(error):\n\
    \       \"\"\"\n       Custom logic to decide whether to retry to add or not\n\
    \       \"\"\"\n       return True\n\n   # set `thread_id` to an existing thread\
    \ id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   # create `user` using CommunicationIdentityClient.create_user method for\
    \ new users;\n   # else for existing users set `user` = CommunicationUserIdentifier(some_user_id)\n\
    \   new_participant = ChatParticipant(\n       identifier=user,\n       display_name='name',\n\
    \       share_history_time=datetime.utcnow())\n\n   # create list containing one\
    \ or more participants\n   thread_participants = [new_participant]\n   result\
    \ = chat_thread_client.add_participants(thread_participants)\n\n   # list of participants\
    \ which were unsuccessful to be added to chat thread\n   retry = [p for p, e in\
    \ result if decide_to_retry(e)]\n   if retry:\n       chat_thread_client.add_participants(retry)\n\
    \n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.close
  name: close
  signature: close()
- uid: azure.communication.chat.ChatThreadClient.delete_message
  name: delete_message
  summary: Deletes a message.
  signature: delete_message(message_id, **kwargs)
  parameters:
  - name: message_id
    description: Required. The message id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Deleting a message.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   # set `message_id` to an existing message id\n   chat_thread_client.delete_message(message_id)\n\
    \n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.get_message
  name: get_message
  summary: Gets a message by id.
  signature: get_message(message_id, **kwargs)
  parameters:
  - name: message_id
    description: Required. The message id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: ChatMessage
    types:
    - <xref:azure.communication.chat.ChatMessage>
  examples:
  - "Retrieving a message by message id.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   # set `message_id` to an existing message id\n   chat_message = chat_thread_client.get_message(message_id)\n\
    \n   print(\"Message received: ChatMessage: content=\", chat_message.content.message,\
    \ \", id=\", chat_message.id)\n\n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.get_properties
  name: get_properties
  summary: Gets the properties of the chat thread.
  signature: get_properties(**kwargs)
  return:
    description: ChatThreadProperties
    types:
    - <xref:azure.communication.chat.ChatThreadProperties>
  examples:
  - "Retrieving chat thread properties by chat thread id.<!--[!code-python[Main](les\\\
    chat_thread_client_sample.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\
    \\chat_thread_client_sample.py\", \"xml:space\": \"preserve\", \"language\": \"\
    python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n\
    ````python\n\n   from azure.communication.chat import ChatClient, CommunicationTokenCredential\n\
    \n   # set `endpoint` to an existing ACS endpoint\n   chat_client = ChatClient(endpoint,\
    \ CommunicationTokenCredential(token))\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id)\n\
    \   chat_thread_properties = chat_thread_client.get_properties()\n   print('Expected\
    \ Thread Id: ', thread_id, ' Actual Value: ', chat_thread_properties.id)\n\n \
    \  ````\n"
- uid: azure.communication.chat.ChatThreadClient.list_messages
  name: list_messages
  summary: 'Gets a list of messages from a thread.



    The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.

    :return: An iterator like instance of ChatMessage

    :rtype: ~azure.core.paging.ItemPaged[~azure.communication.chat.ChatMessage]

    :raises: ~azure.core.exceptions.HttpResponseError, ValueError'
  signature: list_messages(**kwargs)
  parameters:
  - name: results_per_page
    description: The maximum number of messages to be returned per page.
    types:
    - <xref:int>
  - name: start_time
    description: The earliest point in time to get messages up to.
    types:
    - <xref:datetime.datetime>
  examples:
  - "Listing messages of a chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from datetime\
    \ import datetime, timedelta\n\n   # set `thread_id` to an existing thread id\n\
    \   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   start_time = datetime.utcnow() - timedelta(days=1)\n   chat_messages = chat_thread_client.list_messages(results_per_page=1,\
    \ start_time=start_time)\n\n   print(\"list_messages succeeded with results_per_page\
    \ is 1, and start time is yesterday UTC\")\n   for chat_message_page in chat_messages.by_page():\n\
    \       for chat_message in chat_message_page:\n           print(\"ChatMessage:\
    \ message=\", chat_message.content.message)\n\n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.list_participants
  name: list_participants
  summary: Gets the participants of a thread.
  signature: list_participants(**kwargs)
  parameters:
  - name: results_per_page
    description: The maximum number of participants to be returned per page.
    types:
    - <xref:int>
  - name: skip
    description: Skips participants up to a specified position in response.
    types:
    - <xref:int>
  return:
    description: An iterator like instance of ChatParticipant
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.communication.chat.ChatParticipant>]
  examples:
  - "Listing participants of chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   chat_thread_participants = chat_thread_client.list_participants()\n\n   for\
    \ chat_thread_participant_page in chat_thread_participants.by_page():\n      \
    \ for chat_thread_participant in chat_thread_participant_page:\n           print(\"\
    ChatParticipant: \", chat_thread_participant)\n\n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.list_read_receipts
  name: list_read_receipts
  summary: Gets read receipts for a thread.
  signature: list_read_receipts(**kwargs)
  parameters:
  - name: results_per_page
    description: The maximum number of chat message read receipts to be returned per
      page.
    types:
    - <xref:int>
  - name: skip
    description: Skips chat message read receipts up to a specified position in response.
    types:
    - <xref:int>
  return:
    description: An iterator like instance of ChatMessageReadReceipt
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.communication.chat.ChatMessageReadReceipt>]
  examples:
  - "Listing read receipts.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   read_receipts = chat_thread_client.list_read_receipts()\n\n   for read_receipt_page\
    \ in read_receipts.by_page():\n       for read_receipt in read_receipt_page:\n\
    \           print(read_receipt)\n\n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.remove_participant
  name: remove_participant
  summary: Remove a participant from a thread.
  signature: remove_participant(identifier, **kwargs)
  parameters:
  - name: identifier
    description: Required. Identifier of the thread participant to remove from the
      thread.
    isRequired: true
    types:
    - <xref:azure.communication.chat.CommunicationIdentifier>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Removing participant from chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Option 1 : Iterate\
    \ through all participants, find and delete Fred Flinstone\n   chat_thread_participants\
    \ = chat_thread_client.list_participants()\n\n   for chat_thread_participant_page\
    \ in chat_thread_participants.by_page():\n       for chat_thread_participant in\
    \ chat_thread_participant_page:\n           print(\"ChatParticipant: \", chat_thread_participant)\n\
    \           if chat_thread_participant.identifier.properties['id'] == user1.properties['id']:\n\
    \               print(\"Found Fred!\")\n               chat_thread_client.remove_participant(chat_thread_participant.identifier)\n\
    \               print(\"Fred has been removed from the thread...\")\n        \
    \       break\n\n   # Option 2: Directly remove Wilma Flinstone\n   unique_identifier\
    \ = user2.properties['id'] # in real scenario the identifier would need to be\
    \ retrieved from elsewhere\n   chat_thread_client.remove_participant(CommunicationUserIdentifier(unique_identifier))\n\
    \   print(\"Wilma has been removed from the thread...\")\n\n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.send_message
  name: send_message
  summary: Sends a message to a thread.
  signature: send_message(content, **kwargs)
  parameters:
  - name: content
    description: Required. Chat message content.
    isRequired: true
    types:
    - <xref:str>
  - name: chat_message_type
    description: 'The chat message type. Possible values include: "text", "html".
      Default: ChatMessageType.TEXT'
    types:
    - <xref:Union>[<xref:str>, <xref:azure.communication.chat.ChatMessageType>]
  - name: sender_display_name
    description: 'The display name of the message sender. This property is used to

      populate sender name for push notifications.'
    types:
    - <xref:str>
  - name: str] metadata
    description: Message metadata.
    types:
    - <xref:dict>[<xref:str,>
  return:
    description: SendChatMessageResult
    types:
    - <xref:azure.communication.chat.SendChatMessageResult>
  examples:
  - "Sending a message.<!--[!code-python[Main](les\\chat_thread_client_sample.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\70\\\\\
    azure-communication-chat-1.1.0b1\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.communication.chat\
    \ import ChatMessageType\n\n   # set `thread_id` to an existing thread id\n  \
    \ chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   # Scenario 1: Send message without specifying chat_message_type\n   send_message_result\
    \ = chat_thread_client.send_message(\n       \"Hello! My name is Fred Flinstone\"\
    ,\n       sender_display_name=\"Fred Flinstone\")\n   send_message_result_id =\
    \ send_message_result.id\n\n   # Scenario 2: Send message specifying chat_message_type\n\
    \   send_message_result_w_type = chat_thread_client.send_message(\n       \"Hello!\
    \ My name is Wilma Flinstone\",\n       sender_display_name=\"Wilma Flinstone\"\
    ,\n       chat_message_type=ChatMessageType.TEXT) # equivalent to setting chat_message_type='text'\n\
    \   send_message_result_w_type_id = send_message_result_w_type.id\n   # Verify\
    \ message content\n   print(\"First Message:\", chat_thread_client.get_message(send_message_result_id).content.message)\n\
    \   print(\"Second Message:\", chat_thread_client.get_message(send_message_result_w_type_id).content.message)\n\
    \n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.send_read_receipt
  name: send_read_receipt
  summary: Posts a read receipt event to a chat thread, on behalf of a user.
  signature: send_read_receipt(message_id, **kwargs)
  parameters:
  - name: message_id
    description: Required. Id of the latest message read by current user.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Sending read receipt of a chat message.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   # set `message_id` to an existing message id\n   chat_thread_client.send_read_receipt(message_id)\n\
    \n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.send_typing_notification
  name: send_typing_notification
  summary: Posts a typing event to a thread, on behalf of a user.
  signature: send_typing_notification(**kwargs)
  parameters:
  - name: sender_display_name
    description: 'The display name of the typing notification sender. This property

      is used to populate sender name for push notifications.'
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Send typing notification.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   chat_thread_client.send_typing_notification()\n\n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.update_message
  name: update_message
  summary: Updates a message.
  signature: update_message(message_id, content=None, **kwargs)
  parameters:
  - name: message_id
    description: Required. The message id.
    isRequired: true
    types:
    - <xref:str>
  - name: content
    description: Chat message content.
    isRequired: true
    types:
    - <xref:str>
  - name: str] metadata
    description: Message metadata.
    types:
    - <xref:dict>[<xref:str,>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Updating an already sent message.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   # set `message_id` to an existing message id\n   previous_content = chat_thread_client.get_message(message_id).content.message\n\
    \   content = \"updated content\"\n   chat_thread_client.update_message(message_id,\
    \ content=content)\n\n   current_content = chat_thread_client.get_message(message_id).content.message\n\
    \n   print(\"Chat Message Updated: Previous value: \", previous_content, \", Current\
    \ value: \", current_content)\n\n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.update_topic
  name: update_topic
  summary: Updates a thread's properties.
  signature: update_topic(topic=None, **kwargs)
  parameters:
  - name: topic
    description: 'Thread topic. If topic is not specified, the update will succeed
      but

      chat thread properties will not be changed.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Updating chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\70\\\\azure-communication-chat-1.1.0b1\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \   chat_thread_properties = chat_thread_client.get_properties()\n   previous_topic\
    \ = chat_thread_properties.topic\n\n   topic = \"updated thread topic\"\n   chat_thread_client.update_topic(topic=topic)\n\
    \n   chat_thread_properties = chat_thread_client.get_properties()\n   updated_topic\
    \ = chat_thread_properties.topic\n   print(\"Chat Thread Topic Update: Previous\
    \ value: \", previous_topic, \", Current value: \", updated_topic)\n\n   ````\n"
attributes:
- uid: azure.communication.chat.ChatThreadClient.thread_id
  name: thread_id
  summary: Gets the thread id from the client.
  return:
    types:
    - <xref:str>
