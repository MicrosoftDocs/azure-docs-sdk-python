### YamlMime:PythonClass
uid: azure.mgmt.security.operations.GovernanceAssignmentsOperations
name: GovernanceAssignmentsOperations
fullName: azure.mgmt.security.operations.GovernanceAssignmentsOperations
module: azure.mgmt.security.operations
summary: "> [!WARNING]\n> DO NOT instantiate this class directly.\n>\n> \n>\n> Instead,\
  \ you should access the following operations through\n>\n> <xref:azure.mgmt.security.SecurityCenter>'s\n\
  >\n> <xref:governance_assignments> attribute.\n>"
constructor:
  syntax: GovernanceAssignmentsOperations(*args, **kwargs)
methods:
- uid: azure.mgmt.security.operations.GovernanceAssignmentsOperations.create_or_update
  name: create_or_update
  summary: Creates or updates a governance assignment on the given subscription.
  signature: 'create_or_update(scope: str, assessment_name: str, assignment_key: str,
    governance_assignment: _models.GovernanceAssignment, *, content_type: str = ''application/json'',
    **kwargs: Any) -> _models.GovernanceAssignment'
  parameters:
  - name: scope
    description: 'The scope of the Governance assignments. Valid scopes are: subscription
      (format:

      ''subscriptions/{subscriptionId}''), or security connector (format:

      ''subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})''.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: assessment_name
    description: The Assessment Key - A unique key for the assessment type. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: assignment_key
    description: 'The governance assignment key - the assessment key of the required

      governance assignment. Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: governance_assignment
    description: 'Governance assignment over a subscription scope. Is either a

      GovernanceAssignment type or a IO[bytes] type. Required.'
    isRequired: true
    types:
    - <xref:azure.mgmt.security.models.GovernanceAssignment>
    - <xref:typing.IO>[<xref:bytes>]
  return:
    description: GovernanceAssignment or the result of cls(response)
    types:
    - <xref:azure.mgmt.security.models.GovernanceAssignment>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.security.operations.GovernanceAssignmentsOperations.delete
  name: delete
  summary: Delete a GovernanceAssignment over a given scope.
  signature: 'delete(scope: str, assessment_name: str, assignment_key: str, **kwargs:
    Any) -> None'
  parameters:
  - name: scope
    description: 'The scope of the Governance assignments. Valid scopes are: subscription
      (format:

      ''subscriptions/{subscriptionId}''), or security connector (format:

      ''subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})''.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: assessment_name
    description: The Assessment Key - A unique key for the assessment type. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: assignment_key
    description: 'The governance assignment key - the assessment key of the required

      governance assignment. Required.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None or the result of cls(response)
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.security.operations.GovernanceAssignmentsOperations.get
  name: get
  summary: Get a specific governanceAssignment for the requested scope by AssignmentKey.
  signature: 'get(scope: str, assessment_name: str, assignment_key: str, **kwargs:
    Any) -> GovernanceAssignment'
  parameters:
  - name: scope
    description: 'The scope of the Governance assignments. Valid scopes are: subscription
      (format:

      ''subscriptions/{subscriptionId}''), or security connector (format:

      ''subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})''.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: assessment_name
    description: The Assessment Key - A unique key for the assessment type. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: assignment_key
    description: 'The governance assignment key - the assessment key of the required

      governance assignment. Required.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: GovernanceAssignment or the result of cls(response)
    types:
    - <xref:azure.mgmt.security.models.GovernanceAssignment>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.security.operations.GovernanceAssignmentsOperations.list
  name: list
  summary: Get governance assignments on all of your resources inside a scope.
  signature: 'list(scope: str, assessment_name: str, **kwargs: Any) -> ItemPaged[GovernanceAssignment]'
  parameters:
  - name: scope
    description: 'The scope of the Governance assignments. Valid scopes are: subscription
      (format:

      ''subscriptions/{subscriptionId}''), or security connector (format:

      ''subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})''.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: assessment_name
    description: The Assessment Key - A unique key for the assessment type. Required.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'An iterator like instance of either GovernanceAssignment or the
      result of

      cls(response)'
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.mgmt.security.models.GovernanceAssignment>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
attributes:
- uid: azure.mgmt.security.operations.GovernanceAssignmentsOperations.models
  name: models
  signature: models = <module 'azure.mgmt.security.models' from 'C:\\ToolCache\\Python\\3.11.9\\x64\\Lib\\site-packages\\py2docfx\\venv\\venv229\\Lib\\site-packages\\azure\\mgmt\\security\\models\\__init__.py'>
