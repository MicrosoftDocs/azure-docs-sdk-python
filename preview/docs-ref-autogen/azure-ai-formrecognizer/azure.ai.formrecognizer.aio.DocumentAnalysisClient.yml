### YamlMime:PythonClass
uid: azure.ai.formrecognizer.aio.DocumentAnalysisClient
name: DocumentAnalysisClient
fullName: azure.ai.formrecognizer.aio.DocumentAnalysisClient
module: azure.ai.formrecognizer.aio
inheritances:
- azure.ai.formrecognizer.aio._form_base_client_async.FormRecognizerClientBaseAsync
summary: 'DocumentAnalysisClient analyzes information from documents and images.

  It is the interface to use for analyzing with prebuilt models (receipts, business
  cards,

  invoices, identity documents), analyzing layout from documents, analyzing general

  document types, and analyzing custom documents with built models. It provides different

  methods based on inputs from a URL and inputs from a stream.



  > [!NOTE]

  > DocumentAnalysisClient should be used with API versions

  >

  > 2021-09-30-preview and up. To use API versions <=v2.1, instantiate a FormRecognizerClient.

  >


  New in version 2021-09-30-preview: The *DocumentAnalysisClient* and its client methods.'
constructor:
  syntax: 'DocumentAnalysisClient(endpoint: str, credential: Union[AzureKeyCredential,
    AsyncTokenCredential], **kwargs: Any)'
  parameters:
  - name: endpoint
    description: 'Supported Cognitive Services endpoints (protocol and hostname,

      for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'Credentials needed for the client to connect to Azure.

      This is an instance of AzureKeyCredential if using an API key or a token

      credential from <xref:azure.identity>.'
    isRequired: true
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
    - <xref:azure.core.credentials.TokenCredential>
  - name: api_version
    description: 'The API version of the service to use for requests. It defaults
      to the latest service version.

      Setting to an older version may result in reduced feature compatibility. To
      use API versions

      <=v2.1, instantiate a FormRecognizerClient.'
    types:
    - <xref:str>
    - <xref:azure.ai.formrecognizer.DocumentAnalysisApiVersion>
examples:
- "Creating the DocumentAnalysisClient with an endpoint and API key.<!--[!code-python[Main](les\\\
  v3.2-beta\\async_samples\\sample_authentication_async.py )]-->\n\n<!-- literal_block\
  \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\":\
  \ [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\64\\\\azure-ai-formrecognizer-3.2.0b2\\\
  \\samples\\\\v3.2-beta\\\\async_samples\\\\sample_authentication_async.py\", \"\
  xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
  : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
  \ import AzureKeyCredential\n   from azure.ai.formrecognizer.aio import DocumentAnalysisClient\n\
  \n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
  AZURE_FORM_RECOGNIZER_KEY\"]\n\n   document_analysis_client = DocumentAnalysisClient(endpoint,\
  \ AzureKeyCredential(key))\n\n   ````\n\nCreating the DocumentAnalysisClient with\
  \ a token credential.<!--[!code-python[Main](les\\v3.2-beta\\async_samples\\sample_authentication_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\64\\\\azure-ai-formrecognizer-3.2.0b2\\\
  \\samples\\\\v3.2-beta\\\\async_samples\\\\sample_authentication_async.py\", \"\
  xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
  : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   \"\"\"DefaultAzureCredential\
  \ will use the values from these environment\n   variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,\
  \ AZURE_CLIENT_SECRET\n   \"\"\"\n   from azure.ai.formrecognizer.aio import DocumentAnalysisClient\n\
  \   from azure.identity.aio import DefaultAzureCredential\n\n   endpoint = os.environ[\"\
  AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   credential = DefaultAzureCredential()\n\n\
  \   document_analysis_client = DocumentAnalysisClient(endpoint, credential)\n\n\
  \   ````\n"
methods:
- uid: azure.ai.formrecognizer.aio.DocumentAnalysisClient.begin_analyze_document
  name: begin_analyze_document
  summary: Analyze field text and semantic values from a given document.
  signature: 'begin_analyze_document(model: str, document: Union[bytes, IO[bytes]],
    **kwargs: Any) -> azure.core.polling._async_poller.AsyncLROPoller[azure.ai.formrecognizer._models.AnalyzeResult]'
  parameters:
  - name: model
    description: 'A unique model identifier can be passed in as a string.

      Use this to specify the custom model ID or prebuilt model ID. Prebuilt model
      IDs supported

      can be found here: [https://aka.ms/azsdk/formrecognizer/models](https://aka.ms/azsdk/formrecognizer/models)'
    isRequired: true
    types:
    - <xref:str>
  - name: document
    description: JPEG, PNG, PDF, TIFF, or BMP type file stream or bytes.
    isRequired: true
    types:
    - <xref:bytes>
    - <xref:IO>[<xref:bytes>]
  - name: pages
    description: 'Custom page numbers for multi-page documents(PDF/TIFF). Input the
      page numbers

      and/or ranges of pages you want to get in the result. For a range of pages,
      use a hyphen, like

      *pages="1-3, 5-6"*. Separate each page number or range with a comma.'
    types:
    - <xref:str>
  - name: locale
    description: 'Locale hint of the input document.

      See supported locales here: [https://aka.ms/azsdk/formrecognizer/supportedlocales](https://aka.ms/azsdk/formrecognizer/supportedlocales).'
    types:
    - <xref:str>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a <xref:azure.ai.formrecognizer.AnalyzeResult>.'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:azure.ai.formrecognizer.AnalyzeResult>]
  exceptions:
  - description: ''
    type: azure.core.exceptions.HttpResponseError
  examples:
  - "Analyze an invoice. For more samples see the *samples* folder.<!--[!code-python[Main](les\\\
    v3.2-beta\\async_samples\\sample_analyze_invoices_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\64\\\\azure-ai-formrecognizer-3.2.0b2\\\
    \\samples\\\\v3.2-beta\\\\async_samples\\\\sample_analyze_invoices_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.core.credentials import AzureKeyCredential\n   from azure.ai.formrecognizer.aio\
    \ import DocumentAnalysisClient\n\n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"\
    ]\n   key = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\n\n   document_analysis_client\
    \ = DocumentAnalysisClient(\n       endpoint=endpoint, credential=AzureKeyCredential(key)\n\
    \   )\n   async with document_analysis_client:\n       with open(path_to_sample_documents,\
    \ \"rb\") as f:\n           poller = await document_analysis_client.begin_analyze_document(\n\
    \               \"prebuilt-invoice\", document=f, locale=\"en-US\"\n         \
    \  )\n       invoices = await poller.result()\n\n   for idx, invoice in enumerate(invoices.documents):\n\
    \       print(\"--------Recognizing invoice #{}--------\".format(idx + 1))\n \
    \      vendor_name = invoice.fields.get(\"VendorName\")\n       if vendor_name:\n\
    \           print(\n               \"Vendor Name: {} has confidence: {}\".format(\n\
    \                   vendor_name.value, vendor_name.confidence\n              \
    \ )\n           )\n       vendor_address = invoice.fields.get(\"VendorAddress\"\
    )\n       if vendor_address:\n           print(\n               \"Vendor Address:\
    \ {} has confidence: {}\".format(\n                   vendor_address.value, vendor_address.confidence\n\
    \               )\n           )\n       vendor_address_recipient = invoice.fields.get(\"\
    VendorAddressRecipient\")\n       if vendor_address_recipient:\n           print(\n\
    \               \"Vendor Address Recipient: {} has confidence: {}\".format(\n\
    \                   vendor_address_recipient.value,\n                   vendor_address_recipient.confidence,\n\
    \               )\n           )\n       customer_name = invoice.fields.get(\"\
    CustomerName\")\n       if customer_name:\n           print(\n               \"\
    Customer Name: {} has confidence: {}\".format(\n                   customer_name.value,\
    \ customer_name.confidence\n               )\n           )\n       customer_id\
    \ = invoice.fields.get(\"CustomerId\")\n       if customer_id:\n           print(\n\
    \               \"Customer Id: {} has confidence: {}\".format(\n             \
    \      customer_id.value, customer_id.confidence\n               )\n         \
    \  )\n       customer_address = invoice.fields.get(\"CustomerAddress\")\n    \
    \   if customer_address:\n           print(\n               \"Customer Address:\
    \ {} has confidence: {}\".format(\n                   customer_address.value,\
    \ customer_address.confidence\n               )\n           )\n       customer_address_recipient\
    \ = invoice.fields.get(\"CustomerAddressRecipient\")\n       if customer_address_recipient:\n\
    \           print(\n               \"Customer Address Recipient: {} has confidence:\
    \ {}\".format(\n                   customer_address_recipient.value,\n       \
    \            customer_address_recipient.confidence,\n               )\n      \
    \     )\n       invoice_id = invoice.fields.get(\"InvoiceId\")\n       if invoice_id:\n\
    \           print(\n               \"Invoice Id: {} has confidence: {}\".format(\n\
    \                   invoice_id.value, invoice_id.confidence\n               )\n\
    \           )\n       invoice_date = invoice.fields.get(\"InvoiceDate\")\n   \
    \    if invoice_date:\n           print(\n               \"Invoice Date: {} has\
    \ confidence: {}\".format(\n                   invoice_date.value, invoice_date.confidence\n\
    \               )\n           )\n       invoice_total = invoice.fields.get(\"\
    InvoiceTotal\")\n       if invoice_total:\n           print(\n               \"\
    Invoice Total: {} has confidence: {}\".format(\n                   invoice_total.value,\
    \ invoice_total.confidence\n               )\n           )\n       due_date =\
    \ invoice.fields.get(\"DueDate\")\n       if due_date:\n           print(\n  \
    \             \"Due Date: {} has confidence: {}\".format(\n                  \
    \ due_date.value, due_date.confidence\n               )\n           )\n      \
    \ purchase_order = invoice.fields.get(\"PurchaseOrder\")\n       if purchase_order:\n\
    \           print(\n               \"Purchase Order: {} has confidence: {}\".format(\n\
    \                   purchase_order.value, purchase_order.confidence\n        \
    \       )\n           )\n       billing_address = invoice.fields.get(\"BillingAddress\"\
    )\n       if billing_address:\n           print(\n               \"Billing Address:\
    \ {} has confidence: {}\".format(\n                   billing_address.value, billing_address.confidence\n\
    \               )\n           )\n       billing_address_recipient = invoice.fields.get(\"\
    BillingAddressRecipient\")\n       if billing_address_recipient:\n           print(\n\
    \               \"Billing Address Recipient: {} has confidence: {}\".format(\n\
    \                   billing_address_recipient.value,\n                   billing_address_recipient.confidence,\n\
    \               )\n           )\n       shipping_address = invoice.fields.get(\"\
    ShippingAddress\")\n       if shipping_address:\n           print(\n         \
    \      \"Shipping Address: {} has confidence: {}\".format(\n                 \
    \  shipping_address.value, shipping_address.confidence\n               )\n   \
    \        )\n       shipping_address_recipient = invoice.fields.get(\"ShippingAddressRecipient\"\
    )\n       if shipping_address_recipient:\n           print(\n               \"\
    Shipping Address Recipient: {} has confidence: {}\".format(\n                \
    \   shipping_address_recipient.value,\n                   shipping_address_recipient.confidence,\n\
    \               )\n           )\n       print(\"Invoice items:\")\n       for\
    \ idx, item in enumerate(invoice.fields.get(\"Items\").value):\n           print(\"\
    ...Item #{}\".format(idx + 1))\n           item_description = item.value.get(\"\
    Description\")\n           if item_description:\n               print(\n     \
    \              \"......Description: {} has confidence: {}\".format(\n        \
    \               item_description.value, item_description.confidence\n        \
    \           )\n               )\n           item_quantity = item.value.get(\"\
    Quantity\")\n           if item_quantity:\n               print(\n           \
    \        \"......Quantity: {} has confidence: {}\".format(\n                 \
    \      item_quantity.value, item_quantity.confidence\n                   )\n \
    \              )\n           unit = item.value.get(\"Unit\")\n           if unit:\n\
    \               print(\n                   \"......Unit: {} has confidence: {}\"\
    .format(\n                       unit.value, unit.confidence\n               \
    \    )\n               )\n           unit_price = item.value.get(\"UnitPrice\"\
    )\n           if unit_price:\n               print(\n                   \"......Unit\
    \ Price: {} has confidence: {}\".format(\n                       unit_price.value,\
    \ unit_price.confidence\n                   )\n               )\n           product_code\
    \ = item.value.get(\"ProductCode\")\n           if product_code:\n           \
    \    print(\n                   \"......Product Code: {} has confidence: {}\"\
    .format(\n                       product_code.value, product_code.confidence\n\
    \                   )\n               )\n           item_date = item.value.get(\"\
    Date\")\n           if item_date:\n               print(\n                   \"\
    ......Date: {} has confidence: {}\".format(\n                       item_date.value,\
    \ item_date.confidence\n                   )\n               )\n           tax\
    \ = item.value.get(\"Tax\")\n           if tax:\n               print(\n     \
    \              \"......Tax: {} has confidence: {}\".format(tax.value, tax.confidence)\n\
    \               )\n           amount = item.value.get(\"Amount\")\n          \
    \ if amount:\n               print(\n                   \"......Amount: {} has\
    \ confidence: {}\".format(\n                       amount.value, amount.confidence\n\
    \                   )\n               )\n       subtotal = invoice.fields.get(\"\
    SubTotal\")\n       if subtotal:\n           print(\n               \"Subtotal:\
    \ {} has confidence: {}\".format(\n                   subtotal.value, subtotal.confidence\n\
    \               )\n           )\n       total_tax = invoice.fields.get(\"TotalTax\"\
    )\n       if total_tax:\n           print(\n               \"Total Tax: {} has\
    \ confidence: {}\".format(\n                   total_tax.value, total_tax.confidence\n\
    \               )\n           )\n       previous_unpaid_balance = invoice.fields.get(\"\
    PreviousUnpaidBalance\")\n       if previous_unpaid_balance:\n           print(\n\
    \               \"Previous Unpaid Balance: {} has confidence: {}\".format(\n \
    \                  previous_unpaid_balance.value,\n                   previous_unpaid_balance.confidence,\n\
    \               )\n           )\n       amount_due = invoice.fields.get(\"AmountDue\"\
    )\n       if amount_due:\n           print(\n               \"Amount Due: {} has\
    \ confidence: {}\".format(\n                   amount_due.value, amount_due.confidence\n\
    \               )\n           )\n       service_start_date = invoice.fields.get(\"\
    ServiceStartDate\")\n       if service_start_date:\n           print(\n      \
    \         \"Service Start Date: {} has confidence: {}\".format(\n            \
    \       service_start_date.value, service_start_date.confidence\n            \
    \   )\n           )\n       service_end_date = invoice.fields.get(\"ServiceEndDate\"\
    )\n       if service_end_date:\n           print(\n               \"Service End\
    \ Date: {} has confidence: {}\".format(\n                   service_end_date.value,\
    \ service_end_date.confidence\n               )\n           )\n       service_address\
    \ = invoice.fields.get(\"ServiceAddress\")\n       if service_address:\n     \
    \      print(\n               \"Service Address: {} has confidence: {}\".format(\n\
    \                   service_address.value, service_address.confidence\n      \
    \         )\n           )\n       service_address_recipient = invoice.fields.get(\"\
    ServiceAddressRecipient\")\n       if service_address_recipient:\n           print(\n\
    \               \"Service Address Recipient: {} has confidence: {}\".format(\n\
    \                   service_address_recipient.value,\n                   service_address_recipient.confidence,\n\
    \               )\n           )\n       remittance_address = invoice.fields.get(\"\
    RemittanceAddress\")\n       if remittance_address:\n           print(\n     \
    \          \"Remittance Address: {} has confidence: {}\".format(\n           \
    \        remittance_address.value, remittance_address.confidence\n           \
    \    )\n           )\n       remittance_address_recipient = invoice.fields.get(\"\
    RemittanceAddressRecipient\")\n       if remittance_address_recipient:\n     \
    \      print(\n               \"Remittance Address Recipient: {} has confidence:\
    \ {}\".format(\n                   remittance_address_recipient.value,\n     \
    \              remittance_address_recipient.confidence,\n               )\n  \
    \         )\n\n   ````\n\nAnalyze a custom document. For more samples see the\
    \ *samples* folder.<!--[!code-python[Main](les\\v3.2-beta\\async_samples\\sample_analyze_custom_documents_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\64\\\\azure-ai-formrecognizer-3.2.0b2\\\\samples\\\\v3.2-beta\\\\async_samples\\\
    \\sample_analyze_custom_documents_async.py\", \"xml:space\": \"preserve\", \"\
    force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
    : 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.formrecognizer.aio import DocumentAnalysisClient\n\
    \n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_FORM_RECOGNIZER_KEY\"]\n   model_id = os.getenv(\"CUSTOM_BUILT_MODEL_ID\"\
    , custom_model_id)\n\n   document_analysis_client = DocumentAnalysisClient(\n\
    \       endpoint=endpoint, credential=AzureKeyCredential(key)\n   )\n\n   async\
    \ with document_analysis_client:\n       # Make sure your document's type is included\
    \ in the list of document types the custom model can analyze\n       with open(path_to_sample_documents,\
    \ \"rb\") as f:\n           poller = await document_analysis_client.begin_analyze_document(\n\
    \               model=model_id, document=f\n           )\n       result = await\
    \ poller.result()\n\n   for idx, document in enumerate(result.documents):\n  \
    \     print(\"--------Analyzing document #{}--------\".format(idx + 1))\n    \
    \   print(\"Document has type {}\".format(document.doc_type))\n       print(\"\
    Document has document type confidence {}\".format(document.confidence))\n    \
    \   print(\"Document was analyzed with model with ID {}\".format(result.model_id))\n\
    \       for name, field in document.fields.items():\n           field_value =\
    \ field.value if field.value else field.content\n           print(\"......found\
    \ field of type '{}' with value '{}' and with confidence {}\".format(field.value_type,\
    \ field_value, field.confidence))\n\n   # iterate over tables, lines, and selection\
    \ marks on each page\n   for page in result.pages:\n       print(\"\\nLines found\
    \ on page {}\".format(page.page_number))\n       for line in page.lines:\n   \
    \        print(\"...Line '{}'\".format(line.content))\n       for word in page.words:\n\
    \           print(\n               \"...Word '{}' has a confidence of {}\".format(\n\
    \                   word.content, word.confidence\n               )\n        \
    \   )\n       if page.selection_marks:\n           print(\"\\nSelection marks\
    \ found on page {}\".format(page.page_number))\n           for selection_mark\
    \ in page.selection_marks:\n               print(\n                   \"...Selection\
    \ mark is '{}' and has a confidence of {}\".format(\n                       selection_mark.state,\
    \ selection_mark.confidence\n                   )\n               )\n\n   for\
    \ i, table in enumerate(result.tables):\n       print(\"\\nTable {} can be found\
    \ on page:\".format(i + 1))\n       for region in table.bounding_regions:\n  \
    \         print(\"...{}\".format(i + 1, region.page_number))\n       for cell\
    \ in table.cells:\n           print(\n               \"...Cell[{}][{}] has text\
    \ '{}'\".format(\n                   cell.row_index, cell.column_index, cell.content\n\
    \               )\n           )\n   print(\"-----------------------------------\"\
    )\n\n   ````\n"
- uid: azure.ai.formrecognizer.aio.DocumentAnalysisClient.begin_analyze_document_from_url
  name: begin_analyze_document_from_url
  summary: 'Analyze field text and semantic values from a given document.

    The input must be the location (URL) of the document to be analyzed.'
  signature: 'begin_analyze_document_from_url(model: str, document_url: str, **kwargs:
    Any) -> azure.core.polling._async_poller.AsyncLROPoller[azure.ai.formrecognizer._models.AnalyzeResult]'
  parameters:
  - name: model
    description: 'A unique model identifier can be passed in as a string.

      Use this to specify the custom model ID or prebuilt model ID. Prebuilt model
      IDs supported

      can be found here: [https://aka.ms/azsdk/formrecognizer/models](https://aka.ms/azsdk/formrecognizer/models)'
    isRequired: true
    types:
    - <xref:str>
  - name: document_url
    description: 'The URL of the document to analyze. The input must be a valid, properly

      encoded  (i.e. encode special characters, such as empty spaces), and publicly
      accessible URL

      of one of the supported formats: JPEG, PNG, PDF, TIFF, or BMP.'
    isRequired: true
    types:
    - <xref:str>
  - name: pages
    description: 'Custom page numbers for multi-page documents(PDF/TIFF). Input the
      page numbers

      and/or ranges of pages you want to get in the result. For a range of pages,
      use a hyphen, like

      *pages="1-3, 5-6"*. Separate each page number or range with a comma.'
    types:
    - <xref:str>
  - name: locale
    description: 'Locale hint of the input document.

      See supported locales here: [https://aka.ms/azsdk/formrecognizer/supportedlocales](https://aka.ms/azsdk/formrecognizer/supportedlocales).'
    types:
    - <xref:str>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a <xref:azure.ai.formrecognizer.AnalyzeResult>.'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:azure.ai.formrecognizer.AnalyzeResult>]
  exceptions:
  - description: ''
    type: azure.core.exceptions.HttpResponseError
  examples:
  - "Analyze a receipt. For more samples see the *samples* folder.<!--[!code-python[Main](les\\\
    v3.2-beta\\async_samples\\sample_analyze_receipts_from_url_async.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\64\\\\\
    azure-ai-formrecognizer-3.2.0b2\\\\samples\\\\v3.2-beta\\\\async_samples\\\\sample_analyze_receipts_from_url_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.core.credentials import AzureKeyCredential\n   from azure.ai.formrecognizer.aio\
    \ import DocumentAnalysisClient\n\n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"\
    ]\n   key = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\n\n   document_analysis_client\
    \ = DocumentAnalysisClient(\n       endpoint=endpoint, credential=AzureKeyCredential(key)\n\
    \   )\n   async with document_analysis_client:\n       url = \"https://raw.githubusercontent.com/Azure/azure-sdk-for-python/main/sdk/formrecognizer/azure-ai-formrecognizer/tests/sample_forms/receipt/contoso-receipt.png\"\
    \n       poller = await document_analysis_client.begin_analyze_document_from_url(\n\
    \           \"prebuilt-receipt\", document_url=url\n       )\n       receipts\
    \ = await poller.result()\n\n   for idx, receipt in enumerate(receipts.documents):\n\
    \       print(\"--------Recognizing receipt #{}--------\".format(idx + 1))\n \
    \      receipt_type = receipt.fields.get(\"ReceiptType\")\n       if receipt_type:\n\
    \           print(\n               \"Receipt Type: {} has confidence: {}\".format(\n\
    \                   receipt_type.value, receipt_type.confidence\n            \
    \   )\n           )\n       merchant_name = receipt.fields.get(\"MerchantName\"\
    )\n       if merchant_name:\n           print(\n               \"Merchant Name:\
    \ {} has confidence: {}\".format(\n                   merchant_name.value, merchant_name.confidence\n\
    \               )\n           )\n       transaction_date = receipt.fields.get(\"\
    TransactionDate\")\n       if transaction_date:\n           print(\n         \
    \      \"Transaction Date: {} has confidence: {}\".format(\n                 \
    \  transaction_date.value, transaction_date.confidence\n               )\n   \
    \        )\n       if receipt.fields.get(\"Items\"):\n           print(\"Receipt\
    \ items:\")\n           for idx, item in enumerate(receipt.fields.get(\"Items\"\
    ).value):\n               print(\"...Item #{}\".format(idx + 1))\n           \
    \    item_name = item.value.get(\"Name\")\n               if item_name:\n    \
    \               print(\n                       \"......Item Name: {} has confidence:\
    \ {}\".format(\n                           item_name.value, item_name.confidence\n\
    \                       )\n                   )\n               item_quantity\
    \ = item.value.get(\"Quantity\")\n               if item_quantity:\n         \
    \          print(\n                       \"......Item Quantity: {} has confidence:\
    \ {}\".format(\n                           item_quantity.value, item_quantity.confidence\n\
    \                       )\n                   )\n               item_price = item.value.get(\"\
    Price\")\n               if item_price:\n                   print(\n         \
    \              \"......Individual Item Price: {} has confidence: {}\".format(\n\
    \                           item_price.value, item_price.confidence\n        \
    \               )\n                   )\n               item_total_price = item.value.get(\"\
    TotalPrice\")\n               if item_total_price:\n                   print(\n\
    \                       \"......Total Item Price: {} has confidence: {}\".format(\n\
    \                           item_total_price.value, item_total_price.confidence\n\
    \                       )\n                   )\n       subtotal = receipt.fields.get(\"\
    Subtotal\")\n       if subtotal:\n           print(\n               \"Subtotal:\
    \ {} has confidence: {}\".format(\n                   subtotal.value, subtotal.confidence\n\
    \               )\n           )\n       tax = receipt.fields.get(\"Tax\")\n  \
    \     if tax:\n           print(\"Tax: {} has confidence: {}\".format(tax.value,\
    \ tax.confidence))\n       tip = receipt.fields.get(\"Tip\")\n       if tip:\n\
    \           print(\"Tip: {} has confidence: {}\".format(tip.value, tip.confidence))\n\
    \       total = receipt.fields.get(\"Total\")\n       if total:\n           print(\"\
    Total: {} has confidence: {}\".format(total.value, total.confidence))\n      \
    \ print(\"--------------------------------------\")\n\n   ````\n"
- uid: azure.ai.formrecognizer.aio.DocumentAnalysisClient.close
  name: close
  summary: Close the <xref:azure.ai.formrecognizer.aio.DocumentAnalysisClient> session.
  signature: close() -> None
