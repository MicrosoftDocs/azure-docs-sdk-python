### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.ai.formrecognizer.aio.FormTrainingClient.begin_copy_model
  - azure.ai.formrecognizer.aio.FormTrainingClient.begin_training
  - azure.ai.formrecognizer.aio.FormTrainingClient.close
  - azure.ai.formrecognizer.aio.FormTrainingClient.delete_model
  - azure.ai.formrecognizer.aio.FormTrainingClient.get_account_properties
  - azure.ai.formrecognizer.aio.FormTrainingClient.get_copy_authorization
  - azure.ai.formrecognizer.aio.FormTrainingClient.get_custom_model
  - azure.ai.formrecognizer.aio.FormTrainingClient.get_form_recognizer_client
  - azure.ai.formrecognizer.aio.FormTrainingClient.list_custom_models
  class: azure.ai.formrecognizer.aio.FormTrainingClient
  example:
  - "Creating the FormTrainingClient with an endpoint and API key.<!--[!code-python[Main](les\\\
    async_samples\\sample_authentication_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\9\\\\azure-ai-formrecognizer-1.0.0b4\\\
    \\samples\\\\async_samples\\\\sample_authentication_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials import\
    \ AzureKeyCredential\n   from azure.ai.formrecognizer.aio import FormTrainingClient\n\
    \   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_FORM_RECOGNIZER_KEY\"]\n\n   form_training_client = FormTrainingClient(endpoint,\
    \ AzureKeyCredential(key))\n\n   ````\n\nCreating the FormTrainingClient with\
    \ a token credential.<!--[!code-python[Main](les\\async_samples\\sample_authentication_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\9\\\\azure-ai-formrecognizer-1.0.0b4\\\\samples\\\\async_samples\\\\sample_authentication_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   \"\"\"DefaultAzureCredential\
    \ will use the values from these environment\n   variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,\
    \ AZURE_CLIENT_SECRET\n   \"\"\"\n   from azure.ai.formrecognizer.aio import FormTrainingClient\n\
    \   from azure.identity.aio import DefaultAzureCredential\n\n   endpoint = os.environ[\"\
    AZURE_FORM_RECOGNIZER_AAD_ENDPOINT\"]\n   credential = DefaultAzureCredential()\n\
    \n   form_training_client = FormTrainingClient(endpoint, credential)\n\n   ````\n"
  fullName: azure.ai.formrecognizer.aio.FormTrainingClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.ai.formrecognizer.aio
  name: FormTrainingClient
  summary: 'FormTrainingClient is the Form Recognizer interface to use for creating,

    and managing custom models. It provides methods for training models on the forms

    you provide, as well as methods for viewing and deleting models, accessing

    account properties, and copying a model to another Form Recognizer resource.'
  syntax:
    parameters:
    - description: 'Supported Cognitive Services endpoints (protocol and hostname,

        for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
      id: endpoint
      type:
      - str
    - description: 'Credentials needed for the client to connect to Azure.

        This is an instance of AzureKeyCredential if using an API key or a token

        credential from <xref:azure.identity>.'
      id: credential
      type:
      - azure.core.credentials.AzureKeyCredential
      - azure.core.credentials_async.AsyncTokenCredential
  type: class
  uid: azure.ai.formrecognizer.aio.FormTrainingClient
- class: azure.ai.formrecognizer.aio.FormTrainingClient
  example:
  - "Copy a model from the source resource to the target resource<!--[!code-python[Main](les\\\
    async_samples\\sample_copy_model_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\9\\\\azure-ai-formrecognizer-1.0.0b4\\\\\
    samples\\\\async_samples\\\\sample_copy_model_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   source_client = FormTrainingClient(endpoint=source_endpoint,\
    \ credential=AzureKeyCredential(source_key))\n\n   async with source_client:\n\
    \       poller = await source_client.begin_copy_model(\n           model_id=source_model_id,\n\
    \           target=target  # output from target client's call to get_copy_authorization()\n\
    \       )\n       copied_over_model = await poller.result()\n\n       print(\"\
    Model ID: {}\".format(copied_over_model.model_id))\n       print(\"Status: {}\"\
    .format(copied_over_model.status))\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.formrecognizer.aio.FormTrainingClient.begin_copy_model
  langs:
  - python
  module: azure.ai.formrecognizer.aio
  name: 'begin_copy_model(model_id: str, target: dict, **kwargs: typing.Any) -> azure.core.polling._async_poller.AsyncLROPoller[azure.ai.formrecognizer._models.CustomFormModelInfo]'
  namewithoutparameters: begin_copy_model
  summary: 'Copy a custom model stored in this resource (the source) to the user specified

    target Form Recognizer resource. This should be called with the source Form Recognizer
    resource

    (with the model that is intended to be copied). The *target* parameter should
    be supplied from the

    target resource''s output from calling the <xref:azure.ai.formrecognizer.aio.get_copy_authorization>
    method.'
  syntax:
    content: 'begin_copy_model(model_id: str, target: dict, **kwargs: typing.Any)
      -> azure.core.polling._async_poller.AsyncLROPoller[azure.ai.formrecognizer._models.CustomFormModelInfo]'
    parameters:
    - description: Model identifier of the model to copy to target resource.
      id: model_id
      isRequired: true
      type:
      - str
    - description: 'The copy authorization generated from the target resource''s call
        to

        <xref:azure.ai.formrecognizer.aio.get_copy_authorization>.'
      id: target
      isRequired: true
      type:
      - dict
    - description: 'Default waiting time between two polls for LRO operations if

        no Retry-After header is present.'
      id: polling_interval
      isRequired: true
      type:
      - int
    - description: A continuation token to restart a poller from a saved state.
      id: continuation_token
      isRequired: true
      type:
      - str
    return:
      description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

        object to return a <xref:azure.ai.formrecognizer.CustomFormModelInfo>.'
      type:
      - azure.core.polling.AsyncLROPoller[azure.ai.formrecognizer.CustomFormModelInfo]
  type: method
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.begin_copy_model
- class: azure.ai.formrecognizer.aio.FormTrainingClient
  example:
  - "Training a model with your custom forms.<!--[!code-python[Main](les\\async_samples\\\
    sample_train_model_without_labels_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\9\\\\azure-ai-formrecognizer-1.0.0b4\\\\\
    samples\\\\async_samples\\\\sample_train_model_without_labels_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.formrecognizer.aio\
    \ import FormTrainingClient\n   from azure.core.credentials import AzureKeyCredential\n\
    \n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_FORM_RECOGNIZER_KEY\"]\n   container_sas_url = os.environ[\"CONTAINER_SAS_URL\"\
    ]\n\n   async with FormTrainingClient(\n       endpoint, AzureKeyCredential(key)\n\
    \   ) as form_training_client:\n\n       poller = await form_training_client.begin_training(container_sas_url,\
    \ use_training_labels=False)\n       model = await poller.result()\n\n       #\
    \ Custom model information\n       print(\"Model ID: {}\".format(model.model_id))\n\
    \       print(\"Status: {}\".format(model.status))\n       print(\"Training started\
    \ on: {}\".format(model.training_started_on))\n       print(\"Training completed\
    \ on: {}\".format(model.training_completed_on))\n\n       print(\"Recognized fields:\"\
    )\n       # Looping through the submodels, which contains the fields they were\
    \ trained on\n       for submodel in model.submodels:\n           print(\"...The\
    \ submodel has form type '{}'\".format(submodel.form_type))\n           for name,\
    \ field in submodel.fields.items():\n               print(\"...The model found\
    \ field '{}' to have label '{}'\".format(\n                   name, field.label\n\
    \               ))\n\n   ````\n"
  exceptions:
  - description: 'Note that if the training fails, the exception is raised, but a
      model with an

      "invalid" status is still created. You can delete this model by calling <xref:azure.ai.formrecognizer.aio.delete_model>'
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.formrecognizer.aio.FormTrainingClient.begin_training
  langs:
  - python
  module: azure.ai.formrecognizer.aio
  name: 'begin_training(training_files_url: str, use_training_labels: bool, **kwargs:
    typing.Any) -> azure.core.polling._async_poller.AsyncLROPoller[azure.ai.formrecognizer._models.CustomFormModel]'
  namewithoutparameters: begin_training
  summary: 'Create and train a custom model. The request must include a *training_files_url*
    parameter that is an

    externally accessible Azure storage blob container URI (preferably a Shared Access
    Signature URI). Note that

    a container URI is accepted only when the container is public.

    Models are trained using documents that are of the following content type - ''application/pdf'',

    ''image/jpeg'', ''image/png'', ''image/tiff''. Other type of content in the container
    is ignored.'
  syntax:
    content: 'begin_training(training_files_url: str, use_training_labels: bool, **kwargs:
      typing.Any) -> azure.core.polling._async_poller.AsyncLROPoller[azure.ai.formrecognizer._models.CustomFormModel]'
    parameters:
    - description: 'An Azure Storage blob container''s SAS URI. A container URI can
        be used if the

        container is public.'
      id: training_files_url
      isRequired: true
      type:
      - str
    - description: 'Whether to train with labels or not. Corresponding labeled files
        must

        exist in the blob container.'
      id: use_training_labels
      isRequired: true
      type:
      - bool
    - description: 'A case-sensitive prefix string to filter documents in the source
        path for

        training. For example, when using a Azure storage blob URI, use the prefix
        to restrict sub

        folders for training.'
      id: prefix
      isRequired: true
      type:
      - str
    - description: 'A flag to indicate if sub folders within the set of prefix folders

        will also need to be included when searching for content to be preprocessed.
        Not supported if

        training with labels.'
      id: include_sub_folders
      isRequired: true
      type:
      - bool
    - description: 'Waiting time between two polls for LRO operations

        if no Retry-After header is present. Defaults to 5 seconds.'
      id: polling_interval
      isRequired: true
      type:
      - int
    - description: A continuation token to restart a poller from a saved state.
      id: continuation_token
      isRequired: true
      type:
      - str
    return:
      description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

        object to return a <xref:azure.ai.formrecognizer.CustomFormModel>.'
      type:
      - azure.core.polling.AsyncLROPoller[azure.ai.formrecognizer.CustomFormModel]
  type: method
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.begin_training
- class: azure.ai.formrecognizer.aio.FormTrainingClient
  fullName: azure.ai.formrecognizer.aio.FormTrainingClient.close
  langs:
  - python
  module: azure.ai.formrecognizer.aio
  name: close() -> None
  namewithoutparameters: close
  summary: Close the <xref:azure.ai.formrecognizer.aio.FormTrainingClient> session.
  syntax:
    content: close() -> None
  type: method
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.close
- class: azure.ai.formrecognizer.aio.FormTrainingClient
  example:
  - "Delete a custom model.<!--[!code-python[Main](les\\async_samples\\sample_manage_custom_models_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\9\\\\azure-ai-formrecognizer-1.0.0b4\\\\samples\\\\async_samples\\\\sample_manage_custom_models_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await form_training_client.delete_model(model_id=custom_model.model_id)\n\
    \n   try:\n       await form_training_client.get_custom_model(model_id=custom_model.model_id)\n\
    \   except ResourceNotFoundError:\n       print(\"Successfully deleted model with\
    \ id {}\".format(custom_model.model_id))\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or ~azure.core.exceptions.ResourceNotFoundError
  fullName: azure.ai.formrecognizer.aio.FormTrainingClient.delete_model
  langs:
  - python
  module: azure.ai.formrecognizer.aio
  name: 'delete_model(model_id: str, **kwargs: typing.Any) -> None'
  namewithoutparameters: delete_model
  summary: 'Mark model for deletion. Model artifacts will be permanently

    removed within a predetermined period.'
  syntax:
    content: 'delete_model(model_id: str, **kwargs: typing.Any) -> None'
    parameters:
    - description: Model identifier.
      id: model_id
      isRequired: true
      type:
      - str
    return:
      type:
      - None
  type: method
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.delete_model
- class: azure.ai.formrecognizer.aio.FormTrainingClient
  example:
  - "Get properties for the form recognizer account.<!--[!code-python[Main](les\\\
    async_samples\\sample_manage_custom_models_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\9\\\\azure-ai-formrecognizer-1.0.0b4\\\
    \\samples\\\\async_samples\\\\sample_manage_custom_models_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials import\
    \ AzureKeyCredential\n   from azure.core.exceptions import ResourceNotFoundError\n\
    \   from azure.ai.formrecognizer.aio import FormTrainingClient\n\n   endpoint\
    \ = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"\
    ]\n\n   async with FormTrainingClient(\n       endpoint=endpoint, credential=AzureKeyCredential(key)\n\
    \   ) as form_training_client:\n       # First, we see how many custom models\
    \ we have, and what our limit is\n       account_properties = await form_training_client.get_account_properties()\n\
    \       print(\"Our account has {} custom models, and we can have at most {} custom\
    \ models\".format(\n           account_properties.custom_model_count, account_properties.custom_model_limit\n\
    \       ))\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.formrecognizer.aio.FormTrainingClient.get_account_properties
  langs:
  - python
  module: azure.ai.formrecognizer.aio
  name: 'get_account_properties(**kwargs: typing.Any) -> azure.ai.formrecognizer._models.AccountProperties'
  namewithoutparameters: get_account_properties
  summary: Get information about the models on the form recognizer account.
  syntax:
    content: 'get_account_properties(**kwargs: typing.Any) -> azure.ai.formrecognizer._models.AccountProperties'
    return:
      description: 'Summary of models on account - custom model count,

        custom model limit.'
      type:
      - azure.ai.formrecognizer.AccountProperties
  type: method
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.get_account_properties
- class: azure.ai.formrecognizer.aio.FormTrainingClient
  example:
  - "Authorize the target resource to receive the copied model<!--[!code-python[Main](les\\\
    async_samples\\sample_copy_model_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\9\\\\azure-ai-formrecognizer-1.0.0b4\\\\\
    samples\\\\async_samples\\\\sample_copy_model_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   target_client = FormTrainingClient(endpoint=target_endpoint,\
    \ credential=AzureKeyCredential(target_key))\n\n   async with target_client:\n\
    \       target = await target_client.get_copy_authorization(\n           resource_region=target_region,\n\
    \           resource_id=target_resource_id\n       )\n   # model ID that target\
    \ client will use to access the model once copy is complete\n   print(\"Model\
    \ ID: {}\".format(target[\"modelId\"]))\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.formrecognizer.aio.FormTrainingClient.get_copy_authorization
  langs:
  - python
  module: azure.ai.formrecognizer.aio
  name: 'get_copy_authorization(resource_id: str, resource_region: str, **kwargs:
    typing.Any) -> typing.Dict[str, typing.Union[str, int]]'
  namewithoutparameters: get_copy_authorization
  summary: 'Generate authorization for copying a custom model into the target Form
    Recognizer resource.

    This should be called by the target resource (where the model will be copied to)

    and the output can be passed as the *target* parameter into <xref:azure.ai.formrecognizer.aio.FormTrainingClient.begin_copy_model>.'
  syntax:
    content: 'get_copy_authorization(resource_id: str, resource_region: str, **kwargs:
      typing.Any) -> typing.Dict[str, typing.Union[str, int]]'
    parameters:
    - description: 'Azure Resource Id of the target Form Recognizer resource

        where the model will be copied to.'
      id: resource_id
      isRequired: true
      type:
      - str
    - description: 'Location of the target Form Recognizer resource. A valid Azure

        region name supported by Cognitive Services. For example, ''westus'', ''eastus''
        etc.

        See [https://azure.microsoft.com/global-infrastructure/services/?products=cognitive-services](https://azure.microsoft.com/global-infrastructure/services/?products=cognitive-services)

        for the regional availability of Cognitive Services'
      id: resource_region
      isRequired: true
      type:
      - str
    return:
      description: 'A dictionary with values for the copy authorization -

        "modelId", "accessToken", "resourceId", "resourceRegion", and "expirationDateTimeTicks".'
      type:
      - Dict[str, Union[str, int]]
  type: method
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.get_copy_authorization
- class: azure.ai.formrecognizer.aio.FormTrainingClient
  example:
  - "Get a custom model with a model ID.<!--[!code-python[Main](les\\async_samples\\\
    sample_manage_custom_models_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\9\\\\azure-ai-formrecognizer-1.0.0b4\\\\\
    samples\\\\async_samples\\\\sample_manage_custom_models_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   custom_model = await form_training_client.get_custom_model(model_id=first_model.model_id)\n\
    \   print(\"Model ID: {}\".format(custom_model.model_id))\n   print(\"Status:\
    \ {}\".format(custom_model.status))\n   print(\"Training started on: {}\".format(custom_model.training_started_on))\n\
    \   print(\"Training completed on: {}\".format(custom_model.training_completed_on))\n\
    \n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or ~azure.core.exceptions.ResourceNotFoundError
  fullName: azure.ai.formrecognizer.aio.FormTrainingClient.get_custom_model
  langs:
  - python
  module: azure.ai.formrecognizer.aio
  name: 'get_custom_model(model_id: str, **kwargs: typing.Any) -> azure.ai.formrecognizer._models.CustomFormModel'
  namewithoutparameters: get_custom_model
  summary: 'Get a description of a custom model, including the types of forms

    it can recognize, and the fields it will extract for each form type.'
  syntax:
    content: 'get_custom_model(model_id: str, **kwargs: typing.Any) -> azure.ai.formrecognizer._models.CustomFormModel'
    parameters:
    - description: Model identifier.
      id: model_id
      isRequired: true
      type:
      - str
    return:
      description: CustomFormModel
      type:
      - azure.ai.formrecognizer.CustomFormModel
  type: method
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.get_custom_model
- class: azure.ai.formrecognizer.aio.FormTrainingClient
  fullName: azure.ai.formrecognizer.aio.FormTrainingClient.get_form_recognizer_client
  langs:
  - python
  module: azure.ai.formrecognizer.aio
  name: 'get_form_recognizer_client(**kwargs: typing.Any) -> azure.ai.formrecognizer.aio._form_recognizer_client_async.FormRecognizerClient'
  namewithoutparameters: get_form_recognizer_client
  summary: Get an instance of a FormRecognizerClient from FormTrainingClient.
  syntax:
    content: 'get_form_recognizer_client(**kwargs: typing.Any) -> azure.ai.formrecognizer.aio._form_recognizer_client_async.FormRecognizerClient'
    return:
      description: A FormRecognizerClient
      type:
      - azure.ai.formrecognizer.aio.FormRecognizerClient
  type: method
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.get_form_recognizer_client
- class: azure.ai.formrecognizer.aio.FormTrainingClient
  example:
  - "List model information for each model on the account.<!--[!code-python[Main](les\\\
    async_samples\\sample_manage_custom_models_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\9\\\\azure-ai-formrecognizer-1.0.0b4\\\
    \\samples\\\\async_samples\\\\sample_manage_custom_models_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   custom_models = form_training_client.list_custom_models()\n\
    \n   print(\"We have models with the following ids:\")\n\n   # Let's pull out\
    \ the first model\n   first_model = None\n   async for model in custom_models:\n\
    \       print(model.model_id)\n       if not first_model:\n           first_model\
    \ = model\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  fullName: azure.ai.formrecognizer.aio.FormTrainingClient.list_custom_models
  langs:
  - python
  module: azure.ai.formrecognizer.aio
  name: 'list_custom_models(**kwargs: typing.Any) -> azure.core.async_paging.AsyncItemPaged[azure.ai.formrecognizer._models.CustomFormModelInfo]'
  namewithoutparameters: list_custom_models
  summary: 'List information for each model, including model id,

    model status, and when it was created and last modified.'
  syntax:
    content: 'list_custom_models(**kwargs: typing.Any) -> azure.core.async_paging.AsyncItemPaged[azure.ai.formrecognizer._models.CustomFormModelInfo]'
    return:
      description: AsyncItemPaged[<xref:azure.ai.formrecognizer.CustomFormModelInfo>]
      type:
      - azure.core.async_paging.AsyncItemPaged
  type: method
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.list_custom_models
references:
- fullName: azure.ai.formrecognizer.aio.FormTrainingClient.begin_copy_model
  isExternal: false
  name: 'begin_copy_model(model_id: str, target: dict, **kwargs: typing.Any) -> azure.core.polling._async_poller.AsyncLROPoller[azure.ai.formrecognizer._models.CustomFormModelInfo]'
  parent: azure.ai.formrecognizer.aio.FormTrainingClient
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.begin_copy_model
- fullName: azure.ai.formrecognizer.aio.FormTrainingClient.begin_training
  isExternal: false
  name: 'begin_training(training_files_url: str, use_training_labels: bool, **kwargs:
    typing.Any) -> azure.core.polling._async_poller.AsyncLROPoller[azure.ai.formrecognizer._models.CustomFormModel]'
  parent: azure.ai.formrecognizer.aio.FormTrainingClient
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.begin_training
- fullName: azure.ai.formrecognizer.aio.FormTrainingClient.close
  isExternal: false
  name: close() -> None
  parent: azure.ai.formrecognizer.aio.FormTrainingClient
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.close
- fullName: azure.ai.formrecognizer.aio.FormTrainingClient.delete_model
  isExternal: false
  name: 'delete_model(model_id: str, **kwargs: typing.Any) -> None'
  parent: azure.ai.formrecognizer.aio.FormTrainingClient
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.delete_model
- fullName: azure.ai.formrecognizer.aio.FormTrainingClient.get_account_properties
  isExternal: false
  name: 'get_account_properties(**kwargs: typing.Any) -> azure.ai.formrecognizer._models.AccountProperties'
  parent: azure.ai.formrecognizer.aio.FormTrainingClient
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.get_account_properties
- fullName: azure.ai.formrecognizer.aio.FormTrainingClient.get_copy_authorization
  isExternal: false
  name: 'get_copy_authorization(resource_id: str, resource_region: str, **kwargs:
    typing.Any) -> typing.Dict[str, typing.Union[str, int]]'
  parent: azure.ai.formrecognizer.aio.FormTrainingClient
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.get_copy_authorization
- fullName: azure.ai.formrecognizer.aio.FormTrainingClient.get_custom_model
  isExternal: false
  name: 'get_custom_model(model_id: str, **kwargs: typing.Any) -> azure.ai.formrecognizer._models.CustomFormModel'
  parent: azure.ai.formrecognizer.aio.FormTrainingClient
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.get_custom_model
- fullName: azure.ai.formrecognizer.aio.FormTrainingClient.get_form_recognizer_client
  isExternal: false
  name: 'get_form_recognizer_client(**kwargs: typing.Any) -> azure.ai.formrecognizer.aio._form_recognizer_client_async.FormRecognizerClient'
  parent: azure.ai.formrecognizer.aio.FormTrainingClient
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.get_form_recognizer_client
- fullName: azure.ai.formrecognizer.aio.FormTrainingClient.list_custom_models
  isExternal: false
  name: 'list_custom_models(**kwargs: typing.Any) -> azure.core.async_paging.AsyncItemPaged[azure.ai.formrecognizer._models.CustomFormModelInfo]'
  parent: azure.ai.formrecognizer.aio.FormTrainingClient
  uid: azure.ai.formrecognizer.aio.FormTrainingClient.list_custom_models
- fullName: azure.core.polling.AsyncLROPoller[azure.ai.formrecognizer.CustomFormModelInfo]
  name: AsyncLROPoller[CustomFormModelInfo]
  spec.python:
  - fullName: azure.core.polling.AsyncLROPoller
    name: AsyncLROPoller
    uid: azure.core.polling.AsyncLROPoller
  - fullName: '['
    name: '['
  - fullName: azure.ai.formrecognizer.CustomFormModelInfo
    name: CustomFormModelInfo
    uid: azure.ai.formrecognizer.CustomFormModelInfo
  - fullName: ']'
    name: ']'
  uid: azure.core.polling.AsyncLROPoller[azure.ai.formrecognizer.CustomFormModelInfo]
- fullName: azure.core.polling.AsyncLROPoller[azure.ai.formrecognizer.CustomFormModel]
  name: AsyncLROPoller[CustomFormModel]
  spec.python:
  - fullName: azure.core.polling.AsyncLROPoller
    name: AsyncLROPoller
    uid: azure.core.polling.AsyncLROPoller
  - fullName: '['
    name: '['
  - fullName: azure.ai.formrecognizer.CustomFormModel
    name: CustomFormModel
    uid: azure.ai.formrecognizer.CustomFormModel
  - fullName: ']'
    name: ']'
  uid: azure.core.polling.AsyncLROPoller[azure.ai.formrecognizer.CustomFormModel]
- fullName: Dict[str, Union[str, int]]
  name: Dict[str, Union[str, int]]
  spec.python:
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: int
    name: int
    uid: int
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: Dict[str, Union[str, int]]
