### YamlMime:PythonClass
uid: azure.cognitiveservices.vision.face.models.FaceAttributes
name: FaceAttributes
fullName: azure.cognitiveservices.vision.face.models.FaceAttributes
module: azure.cognitiveservices.vision.face.models
inheritances:
- msrest.serialization.Model
summary: Face Attributes.
constructor:
  syntax: 'FaceAttributes(*, age: float = None, gender=None, smile: float = None,
    facial_hair=None, glasses=None, head_pose=None, emotion=None, hair=None, makeup=None,
    occlusion=None, accessories=None, blur=None, exposure=None, noise=None, mask=None,
    quality_for_recognition=None, **kwargs)'
  parameters:
  - name: age
    description: Age in years
    isRequired: true
    types:
    - <xref:float>
  - name: gender
    description: 'Possible gender of the face. Possible values include:

      ''male'', ''female'''
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.cognitiveservices.vision.face.models.Gender>
  - name: smile
    description: Smile intensity, a number between [0,1]
    isRequired: true
    types:
    - <xref:float>
  - name: facial_hair
    description: Properties describing facial hair attributes.
    isRequired: true
    types:
    - <xref:azure.cognitiveservices.vision.face.models.FacialHair>
  - name: glasses
    description: 'Glasses type if any of the face. Possible values include:

      ''noGlasses'', ''readingGlasses'', ''sunglasses'', ''swimmingGoggles'''
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.cognitiveservices.vision.face.models.GlassesType>
  - name: head_pose
    description: Properties indicating head pose of the face.
    isRequired: true
    types:
    - <xref:azure.cognitiveservices.vision.face.models.HeadPose>
  - name: emotion
    description: 'Properties describing facial emotion in form of confidence

      ranging from 0 to 1.'
    isRequired: true
    types:
    - <xref:azure.cognitiveservices.vision.face.models.Emotion>
  - name: hair
    description: Properties describing hair attributes.
    isRequired: true
    types:
    - <xref:azure.cognitiveservices.vision.face.models.Hair>
  - name: makeup
    description: 'Properties describing the presence of makeup on a given

      face.'
    isRequired: true
    types:
    - <xref:azure.cognitiveservices.vision.face.models.Makeup>
  - name: occlusion
    description: Properties describing occlusions on a given face.
    isRequired: true
    types:
    - <xref:azure.cognitiveservices.vision.face.models.Occlusion>
  - name: accessories
    description: Properties describing any accessories on a given face.
    isRequired: true
    types:
    - <xref:list>[<xref:azure.cognitiveservices.vision.face.models.Accessory>]
  - name: blur
    description: Properties describing any presence of blur within the image.
    isRequired: true
    types:
    - <xref:azure.cognitiveservices.vision.face.models.Blur>
  - name: exposure
    description: Properties describing exposure level of the image.
    isRequired: true
    types:
    - <xref:azure.cognitiveservices.vision.face.models.Exposure>
  - name: noise
    description: Properties describing noise level of the image.
    isRequired: true
    types:
    - <xref:azure.cognitiveservices.vision.face.models.Noise>
  - name: mask
    description: Properties describing the presence of a mask on a given face.
    isRequired: true
    types:
    - <xref:azure.cognitiveservices.vision.face.models.Mask>
  - name: quality_for_recognition
    description: 'Properties describing the overall image

      quality regarding whether the image being used in the detection is of

      sufficient quality to attempt face recognition on. Possible values

      include: ''Low'', ''Medium'', ''High'''
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.cognitiveservices.vision.face.models.QualityForRecognition>
  keywordOnlyParameters:
  - name: age
    isRequired: true
  - name: gender
    isRequired: true
  - name: smile
    isRequired: true
  - name: facial_hair
    isRequired: true
  - name: glasses
    isRequired: true
  - name: head_pose
    isRequired: true
  - name: emotion
    isRequired: true
  - name: hair
    isRequired: true
  - name: makeup
    isRequired: true
  - name: occlusion
    isRequired: true
  - name: accessories
    isRequired: true
  - name: blur
    isRequired: true
  - name: exposure
    isRequired: true
  - name: noise
    isRequired: true
  - name: mask
    isRequired: true
  - name: quality_for_recognition
    isRequired: true
methods:
- uid: azure.cognitiveservices.vision.face.models.FaceAttributes.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.cognitiveservices.vision.face.models.FaceAttributes.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.cognitiveservices.vision.face.models.FaceAttributes.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.cognitiveservices.vision.face.models.FaceAttributes.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.cognitiveservices.vision.face.models.FaceAttributes.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.cognitiveservices.vision.face.models.FaceAttributes.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.cognitiveservices.vision.face.models.FaceAttributes.validate
  name: validate
  summary: Validate this model recursively and return a list of ValidationError.
  signature: validate()
  return:
    description: A list of validation error
    types:
    - <xref:list>
