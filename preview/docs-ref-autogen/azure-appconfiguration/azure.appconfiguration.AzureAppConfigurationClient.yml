### YamlMime:PythonClass
uid: azure.appconfiguration.AzureAppConfigurationClient
name: AzureAppConfigurationClient
fullName: azure.appconfiguration.AzureAppConfigurationClient
module: azure.appconfiguration
inheritances:
- builtins.object
summary: Represents a client that calls restful API of Azure App Configuration service.
constructor:
  syntax: 'AzureAppConfigurationClient(base_url: str, credential: TokenCredential,
    **kwargs)'
  parameters:
  - name: base_url
    description: Base url of the service.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: An object which can provide secrets for the app configuration service
    isRequired: true
    types:
    - <xref:azure.appconfiguration.AppConfigConnectionStringCredential>
    - <xref:azure.core.credentials.TokenCredential>
  - name: api_version
    description: 'Api Version. Default value is "2022-11-01-preview". Note that overriding
      this default

      value may result in unsupported behavior.'
    types:
    - <xref:str>
methods:
- uid: azure.appconfiguration.AzureAppConfigurationClient.add_configuration_setting
  name: add_configuration_setting
  summary: "Add a ConfigurationSetting instance into the Azure App Configuration service.\n\
    \nExample\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {}, \"linenos\": false}\
    \ -->\n\n````python\n\n   config_setting = ConfigurationSetting(\n       key=\"\
    MyKey\",\n       label=\"MyLabel\",\n       value=\"my value\",\n       content_type=\"\
    my content type\",\n       tags={\"my tag\": \"my tag value\"}\n   )\n   added_config_setting\
    \ = client.add_configuration_setting(config_setting)\n   ````"
  signature: 'add_configuration_setting(configuration_setting: ConfigurationSetting,
    **kwargs) -> ConfigurationSetting'
  parameters:
  - name: configuration_setting
    description: the ConfigurationSetting object to be added
    isRequired: true
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  return:
    description: The ConfigurationSetting object returned from the App Configuration
      service
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ClientAuthenticationError
  - type: azure.core.exceptions.ResourceExistsError
- uid: azure.appconfiguration.AzureAppConfigurationClient.archive_snapshot
  name: archive_snapshot
  summary: 'Archive a configuration setting snapshot. It will update the status of
    a snapshot from "ready" to "archived".

    The retention period will start to count, the snapshot will expire when the entire
    retention period elapses.'
  signature: 'archive_snapshot(name: str, *, match_condition: MatchConditions = MatchConditions.Unconditionally,
    etag: str | None = None, **kwargs) -> Snapshot'
  parameters:
  - name: name
    description: The name of the configuration setting snapshot to archive.
    isRequired: true
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
  - name: etag
    description: Check if the Snapshot is changed. Set None to skip checking etag.
    types:
    - <xref:str>
  return:
    description: The Snapshot returned from the service.
    types:
    - <xref:azure.appconfiguration.Snapshot>
- uid: azure.appconfiguration.AzureAppConfigurationClient.begin_create_snapshot
  name: begin_create_snapshot
  summary: Create a snapshot of the configuration settings.
  signature: 'begin_create_snapshot(name: str, filters: List[ConfigurationSettingFilter],
    *, composition_type: Literal[''key'', ''key_label''] | None = None, retention_period:
    int | None = None, tags: Dict[str, str] | None = None, **kwargs) -> LROPoller[Snapshot]'
  parameters:
  - name: name
    description: The name of the snapshot to create.
    isRequired: true
    types:
    - <xref:str>
  - name: filters
    description: 'A list of filters used to filter the configuration settings by key
      field and label field

      included in the snapshot.'
    isRequired: true
    types:
    - <xref:list>[<xref:azure.appconfiguration.ConfigurationSettingFilter>]
  - name: composition_type
    description: 'The composition type describes how the key-values

      within the snapshot are composed. Known values are: "key" and "key_label". The
      "key" composition type

      ensures there are no two key-values containing the same key. The ''key_label''
      composition type ensures

      there are no two key-values containing the same key and label.'
    types:
    - <xref:str>
  - name: retention_period
    description: 'The amount of time, in seconds, that a snapshot will remain in the

      archived state before expiring. This property is only writable during the creation
      of a

      snapshot. If not specified, will set to 2592000(30 days). If specified, should
      be

      in range 3600(1 hour) to 7776000(90 days).'
    types:
    - <xref:int>
  - name: tags
    description: The tags of the snapshot.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  return:
    description: 'A poller for create snapshot operation. Call *result()* on this
      object to wait for the

      operation to complete and get the created snapshot.'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.appconfiguration.Snapshot>]
- uid: azure.appconfiguration.AzureAppConfigurationClient.close
  name: close
  summary: Close all connections made by the client
  signature: close() -> None
- uid: azure.appconfiguration.AzureAppConfigurationClient.delete_configuration_setting
  name: delete_configuration_setting
  summary: "Delete a ConfigurationSetting if it exists\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   deleted_config_setting\
    \ = client.delete_configuration_setting(\n       key=\"MyKey\", label=\"MyLabel\"\
    \n   )\n   ````"
  signature: 'delete_configuration_setting(key: str, label: str | None = None, **kwargs)
    -> ConfigurationSetting'
  parameters:
  - name: key
    description: key used to identify the ConfigurationSetting
    isRequired: true
    types:
    - <xref:str>
  - name: label
    description: label used to identify the ConfigurationSetting. Default is *None*.
    isRequired: true
    types:
    - <xref:str>
  - name: etag
    description: check if the ConfigurationSetting is changed. Set None to skip checking
      etag
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag
    types:
    - <xref:azure.core.MatchConditions>
  return:
    description: The deleted ConfigurationSetting returned from the service, or None
      if it doesn't exist.
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ClientAuthenticationError
  - type: azure.core.exceptions.ResourceReadOnlyError
  - type: azure.core.exceptions.ResourceModifiedError
  - type: azure.core.exceptions.ResourceNotModifiedError
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.ResourceExistsError
- uid: azure.appconfiguration.AzureAppConfigurationClient.from_connection_string
  name: from_connection_string
  summary: "Create AzureAppConfigurationClient from a Connection String.\n\nExample\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
    \   from azure.appconfiguration import AzureAppConfigurationClient\n   connection_str\
    \ = \"<my connection string>\"\n   client = AzureAppConfigurationClient.from_connection_string(connection_str)\n\
    \   ````"
  signature: 'from_connection_string(connection_string: str, **kwargs) -> AzureAppConfigurationClient'
  parameters:
  - name: connection_string
    description: 'Connection String

      (one of the access keys of the Azure App Configuration resource)

      used to access the Azure App Configuration.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An AzureAppConfigurationClient authenticated with the connection
      string
    types:
    - <xref:azure.appconfiguration.AzureAppConfigurationClient>
- uid: azure.appconfiguration.AzureAppConfigurationClient.get_configuration_setting
  name: get_configuration_setting
  summary: "Get the matched ConfigurationSetting from Azure App Configuration service\n\
    \nExample\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {}, \"linenos\": false}\
    \ -->\n\n````python\n\n   fetched_config_setting = client.get_configuration_setting(\n\
    \       key=\"MyKey\", label=\"MyLabel\"\n   )\n   ````"
  signature: 'get_configuration_setting(key: str, label: str | None = None, etag:
    str | None = ''*'', match_condition: MatchConditions = MatchConditions.Unconditionally,
    **kwargs) -> None | ConfigurationSetting'
  parameters:
  - name: key
    description: key of the ConfigurationSetting
    isRequired: true
    types:
    - <xref:str>
  - name: label
    description: label used to identify the ConfigurationSetting. Default is *None*.
    isRequired: true
    types:
    - <xref:str>
  - name: etag
    description: check if the ConfigurationSetting is changed. Set None to skip checking
      etag
    isRequired: true
    types:
    - <xref:str>
    - <xref:None>
  - name: match_condition
    description: The match condition to use upon the etag
    isRequired: true
    types:
    - <xref:azure.core.MatchConditions>
  - name: accept_datetime
    description: retrieve ConfigurationSetting existed at this datetime
    types:
    - <xref:str>
  return:
    description: The matched ConfigurationSetting object
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ClientAuthenticationError
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.ResourceModifiedError
  - type: azure.core.exceptions.ResourceExistsError
- uid: azure.appconfiguration.AzureAppConfigurationClient.get_snapshot
  name: get_snapshot
  summary: Get a configuration setting snapshot.
  signature: 'get_snapshot(name: str, *, fields: List[str] | None = None, **kwargs)
    -> Snapshot'
  parameters:
  - name: name
    description: The name of the configuration setting snapshot to retrieve.
    isRequired: true
    types:
    - <xref:str>
  - name: fields
    description: Specify which fields to include in the results. Leave None to include
      all fields.
    types:
    - <xref:list>[<xref:str>]
  return:
    description: The Snapshot returned from the service.
    types:
    - <xref:azure.appconfiguration.Snapshot>
- uid: azure.appconfiguration.AzureAppConfigurationClient.list_configuration_settings
  name: list_configuration_settings
  summary: "List the configuration settings stored in the configuration service, optionally\
    \ filtered by\nkey, label and accept_datetime.\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   from datetime\
    \ import datetime, timedelta\n\n   accept_datetime = datetime.utcnow() + timedelta(days=-1)\n\
    \n   all_listed = client.list_configuration_settings()\n   for item in all_listed:\n\
    \       pass  # do something\n\n   filtered_listed = client.list_configuration_settings(\n\
    \       label_filter=\"Labe*\", key_filter=\"Ke*\", accept_datetime=str(accept_datetime)\n\
    \   )\n   for item in filtered_listed:\n       pass  # do something\n   ````"
  signature: 'list_configuration_settings(key_filter: str | None = None, label_filter:
    str | None = None, **kwargs) -> ItemPaged[ConfigurationSetting]'
  parameters:
  - name: key_filter
    description: 'filter results based on their keys. ''*'' can be

      used as wildcard in the beginning or end of the filter'
    isRequired: true
    types:
    - <xref:str>
  - name: label_filter
    description: 'filter results based on their label. ''*'' can be

      used as wildcard in the beginning or end of the filter'
    isRequired: true
    types:
    - <xref:str>
  - name: accept_datetime
    description: retrieve ConfigurationSetting existed at this datetime
    types:
    - <xref:str>
  - name: fields
    description: specify which fields to include in the results. Leave None to include
      all fields
    types:
    - <xref:list>[<xref:str>]
  return:
    description: An iterator of <xref:azure.appconfiguration.ConfigurationSetting>
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.appconfiguration.ConfigurationSetting>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ClientAuthenticationError
- uid: azure.appconfiguration.AzureAppConfigurationClient.list_revisions
  name: list_revisions
  summary: "Find the ConfigurationSetting revision history, optionally filtered by\
    \ key, label and accept_datetime.\n\nExample\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {}, \"linenos\": false} -->\n\n````python\n\n   from datetime import datetime,\
    \ timedelta\n\n   accept_datetime = datetime.utcnow() + timedelta(days=-1)\n\n\
    \   all_revisions = client.list_revisions()\n   for item in all_revisions:\n \
    \      pass  # do something\n\n   filtered_revisions = client.list_revisions(\n\
    \       label_filter=\"Labe*\", key_filter=\"Ke*\", accept_datetime=str(accept_datetime)\n\
    \   )\n   for item in filtered_revisions:\n       pass  # do something\n   ````"
  signature: 'list_revisions(key_filter: str | None = None, label_filter: str | None
    = None, **kwargs) -> ItemPaged[ConfigurationSetting]'
  parameters:
  - name: key_filter
    description: 'filter results based on their keys. ''*'' can be

      used as wildcard in the beginning or end of the filter'
    isRequired: true
    types:
    - <xref:str>
  - name: label_filter
    description: 'filter results based on their label. ''*'' can be

      used as wildcard in the beginning or end of the filter'
    isRequired: true
    types:
    - <xref:str>
  - name: accept_datetime
    description: retrieve ConfigurationSetting existed at this datetime
    types:
    - <xref:str>
  - name: fields
    description: specify which fields to include in the results. Leave None to include
      all fields
    types:
    - <xref:list>[<xref:str>]
  return:
    description: An iterator of <xref:azure.appconfiguration.ConfigurationSetting>
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.appconfiguration.ConfigurationSetting>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ClientAuthenticationError
- uid: azure.appconfiguration.AzureAppConfigurationClient.list_snapshot_configuration_settings
  name: list_snapshot_configuration_settings
  summary: 'List the configuration settings stored under a snapshot in the configuration
    service, optionally filtered by

    accept_datetime and fields to present in return.'
  signature: 'list_snapshot_configuration_settings(name: str, *, accept_datetime:
    str | None = None, fields: List[str] | None = None, **kwargs) -> ItemPaged[ConfigurationSetting]'
  parameters:
  - name: name
    description: The snapshot name.
    isRequired: true
    types:
    - <xref:str>
  - name: accept_datetime
    description: Filter out ConfigurationSetting created after this datetime
    types:
    - <xref:str>
  - name: fields
    description: Specify which fields to include in the results. Leave None to include
      all fields
    types:
    - <xref:list>[<xref:str>]
  return:
    description: An iterator of <xref:azure.appconfiguration.ConfigurationSetting>
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.appconfiguration.ConfigurationSetting>]
- uid: azure.appconfiguration.AzureAppConfigurationClient.list_snapshots
  name: list_snapshots
  summary: 'List the configuration setting snapshots stored in the configuration service,
    optionally filtered by

    snapshot name, snapshot status and fields to present in return.'
  signature: 'list_snapshots(*, name: str | None = None, fields: List[str] | None
    = None, status: List[str] | None = None, **kwargs) -> ItemPaged[Snapshot]'
  parameters:
  - name: name
    description: Filter results based on snapshot name.
    types:
    - <xref:str>
  - name: fields
    description: Specify which fields to include in the results. Leave None to include
      all fields.
    types:
    - <xref:list>[<xref:str>]
  - name: status
    description: Filter results based on snapshot keys.
    types:
    - <xref:list>[<xref:str>]
  return:
    description: An iterator of <xref:azure.appconfiguration.Snapshot>
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.appconfiguration.Snapshot>]
- uid: azure.appconfiguration.AzureAppConfigurationClient.recover_snapshot
  name: recover_snapshot
  summary: Recover a configuration setting snapshot. It will update the status of
    a snapshot from "archived" to "ready".
  signature: 'recover_snapshot(name: str, *, match_condition: MatchConditions = MatchConditions.Unconditionally,
    etag: str | None = None, **kwargs) -> Snapshot'
  parameters:
  - name: name
    description: The name of the configuration setting snapshot to recover.
    isRequired: true
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
  - name: etag
    description: Check if the Snapshot is changed. Set None to skip checking etag.
    types:
    - <xref:str>
  return:
    description: The Snapshot returned from the service.
    types:
    - <xref:azure.appconfiguration.Snapshot>
- uid: azure.appconfiguration.AzureAppConfigurationClient.set_configuration_setting
  name: set_configuration_setting
  summary: "Add or update a ConfigurationSetting.\nIf the configuration setting identified\
    \ by key and label does not exist, this is a create.\nOtherwise this is an update.\n\
    \nExample\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {}, \"linenos\": false}\
    \ -->\n\n````python\n\n   config_setting = ConfigurationSetting(\n       key=\"\
    MyKey\",\n       label=\"MyLabel\",\n       value=\"my set value\",\n       content_type=\"\
    my set content type\",\n       tags={\"my set tag\": \"my set tag value\"}\n \
    \  )\n   returned_config_setting = client.set_configuration_setting(config_setting)\n\
    \   ````"
  signature: 'set_configuration_setting(configuration_setting: ConfigurationSetting,
    match_condition: MatchConditions = MatchConditions.Unconditionally, **kwargs)
    -> ConfigurationSetting'
  parameters:
  - name: configuration_setting
    description: the ConfigurationSetting to be added (if not exists)             or
      updated (if exists) to the service
    isRequired: true
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  - name: match_condition
    description: The match condition to use upon the etag
    isRequired: true
    types:
    - <xref:azure.core.MatchConditions>
  - name: etag
    description: check if the ConfigurationSetting is changed. Set None to skip checking
      etag
    types:
    - <xref:str>
  return:
    description: The ConfigurationSetting returned from the service
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ClientAuthenticationError
  - type: azure.core.exceptions.ResourceReadOnlyError
  - type: azure.core.exceptions.ResourceModifiedError
  - type: azure.core.exceptions.ResourceNotModifiedError
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.ResourceExistsError
- uid: azure.appconfiguration.AzureAppConfigurationClient.set_read_only
  name: set_read_only
  summary: "Set a configuration setting read only\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   config_setting\
    \ = client.get_configuration_setting(\n       key=\"MyKey\", label=\"MyLabel\"\
    \n   )\n\n   read_only_config_setting = client.set_read_only(config_setting)\n\
    \   read_only_config_setting = client.set_read_only(config_setting, read_only=False)\n\
    \   ````"
  signature: 'set_read_only(configuration_setting: ConfigurationSetting, read_only:
    bool = True, **kwargs) -> ConfigurationSetting'
  parameters:
  - name: configuration_setting
    description: the ConfigurationSetting to be set read only
    isRequired: true
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  - name: read_only
    description: set the read only setting if true, else clear the read only setting
    isRequired: true
    types:
    - <xref:bool>
  - name: match_condition
    description: The match condition to use upon the etag
    types:
    - <xref:azure.core.MatchConditions>
  - name: etag
    description: check if the ConfigurationSetting is changed. Set None to skip checking
      etag
    types:
    - <xref:str>
  return:
    description: The ConfigurationSetting returned from the service
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ClientAuthenticationError
  - type: azure.core.exceptions.ResourceNotFoundError
- uid: azure.appconfiguration.AzureAppConfigurationClient.update_sync_token
  name: update_sync_token
  summary: Add a sync token to the internal list of tokens.
  signature: 'update_sync_token(token: str) -> None'
  parameters:
  - name: token
    description: The sync token to be added to the internal list of tokens
    isRequired: true
    types:
    - <xref:str>
