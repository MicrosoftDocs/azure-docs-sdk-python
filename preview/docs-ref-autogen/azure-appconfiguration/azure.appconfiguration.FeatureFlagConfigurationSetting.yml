### YamlMime:PythonClass
uid: azure.appconfiguration.FeatureFlagConfigurationSetting
name: FeatureFlagConfigurationSetting
fullName: azure.appconfiguration.FeatureFlagConfigurationSetting
module: azure.appconfiguration
inheritances:
- azure.appconfiguration._models.ConfigurationSetting
summary: A configuration setting that stores a feature flag value.
constructor:
  syntax: 'FeatureFlagConfigurationSetting(feature_id: str, *, enabled: bool = False,
    filters: List[Dict[str, Any]] | None = None, **kwargs: Any)'
  parameters:
  - name: feature_id
    description: The identity of the configuration setting.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: enabled
    description: 'The value indicating whether the feature flag is enabled.

      A feature is OFF if enabled is false. If enabled is true, then the feature is
      ON

      if there are no conditions or if all conditions are satisfied. Default value
      of this property is False.'
    types:
    - <xref:bool>
  - name: filters
    description: 'Filters that must run on the client and be evaluated as true for
      the feature

      to be considered enabled.'
    types:
    - <xref:list>[<xref:dict>[<xref:str>, <xref:typing.Any>]]
    - <xref:None>
methods:
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to server from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
attributes:
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.content_type
  name: content_type
  summary: The content_type of the configuration setting.
  signature: 'content_type: str = None'
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.description
  name: description
  summary: The description of the feature.
  signature: 'description: str'
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.display_name
  name: display_name
  summary: The name for the feature to use for display rather than the ID.
  signature: 'display_name: str'
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.enabled
  name: enabled
  summary: 'The value indicating whether the feature flag is enabled. A feature is
    OFF if enabled is false.

    If enabled is true, then the feature is ON if there are no conditions or if all
    conditions are satisfied.'
  signature: 'enabled: bool'
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.etag
  name: etag
  summary: A value representing the current state of the resource.
  signature: 'etag: str'
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.feature_id
  name: feature_id
  summary: The identity of the configuration setting.
  signature: 'feature_id: str'
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.filters
  name: filters
  summary: 'Filters that must run on the client and be evaluated as true for the feature

    to be considered enabled.'
  signature: 'filters: List[Dict[str, Any]] | None'
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.key
  name: key
  summary: The key of the configuration setting.
  signature: 'key: str'
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.label
  name: label
  summary: The label used to group this configuration setting with others.
  signature: 'label: str'
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.last_modified
  name: last_modified
  summary: A date representing the last time the key-value was modified.
  signature: 'last_modified: datetime'
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.read_only
  name: read_only
  summary: Indicates whether the key-value is locked.
  signature: 'read_only: bool'
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.tags
  name: tags
  summary: The tags assigned to the configuration setting.
  signature: 'tags: Dict[str, str]'
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.value
  name: value
  summary: The value of the configuration setting.
  return:
    types:
    - <xref:str>
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.additional_properties
  name: additional_properties
  signature: 'additional_properties: Dict[str, Any] | None'
- uid: azure.appconfiguration.FeatureFlagConfigurationSetting.kind
  name: kind
  signature: kind = 'FeatureFlag'
