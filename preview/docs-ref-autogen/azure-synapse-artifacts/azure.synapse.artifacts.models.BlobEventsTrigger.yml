### YamlMime:PythonClass
uid: azure.synapse.artifacts.models.BlobEventsTrigger
name: BlobEventsTrigger
fullName: azure.synapse.artifacts.models.BlobEventsTrigger
module: azure.synapse.artifacts.models
inheritances:
- azure.synapse.artifacts.models._models_py3.MultiplePipelineTrigger
summary: 'Trigger that runs every time a Blob event occurs.


  Variables are only populated by the server, and will be ignored when sending a request.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'BlobEventsTrigger(*, events: List[str | _models.BlobEventType], scope:
    str, additional_properties: Dict[str, MutableMapping[str, Any]] | None = None,
    description: str | None = None, annotations: List[MutableMapping[str, Any]] |
    None = None, pipelines: List[_models.TriggerPipelineReference] | None = None,
    blob_path_begins_with: str | None = None, blob_path_ends_with: str | None = None,
    ignore_empty_blobs: bool | None = None, **kwargs: Any)'
  keywordOnlyParameters:
  - name: additional_properties
    description: 'Unmatched properties from the message are deserialized to this

      collection.'
    types:
    - <xref:dict>[<xref:str>, <xref:JSON>]
  - name: description
    description: Trigger description.
    types:
    - <xref:str>
  - name: annotations
    description: List of tags that can be used for describing the trigger.
    types:
    - <xref:list>[<xref:JSON>]
  - name: pipelines
    description: Pipelines that need to be started.
    types:
    - <xref:list>[<xref:azure.synapse.artifacts.models.TriggerPipelineReference>]
  - name: blob_path_begins_with
    description: 'The blob path must begin with the pattern provided for trigger

      to fire. For example, ''/records/blobs/december/'' will only fire the trigger
      for blobs in the

      december folder under the records container. At least one of these must be provided:

      blobPathBeginsWith, blobPathEndsWith.'
    types:
    - <xref:str>
  - name: blob_path_ends_with
    description: 'The blob path must end with the pattern provided for trigger to

      fire. For example, ''december/boxes.csv'' will only fire the trigger for blobs
      named boxes in a

      december folder. At least one of these must be provided: blobPathBeginsWith,
      blobPathEndsWith.'
    types:
    - <xref:str>
  - name: ignore_empty_blobs
    description: If set to true, blobs with zero bytes will be ignored.
    types:
    - <xref:bool>
  - name: events
    description: The type of events that cause this trigger to fire. Required.
    types:
    - <xref:list>[<xref:str>
    - <xref:azure.synapse.artifacts.models.BlobEventType>]
  - name: scope
    description: The ARM resource ID of the Storage Account. Required.
    types:
    - <xref:str>
variables:
- description: 'Unmatched properties from the message are deserialized to this

    collection.'
  name: additional_properties
  types:
  - <xref:dict>[<xref:str>, <xref:JSON>]
- description: Trigger type. Required.
  name: type
  types:
  - <xref:str>
- description: Trigger description.
  name: description
  types:
  - <xref:str>
- description: 'Indicates if trigger is running or not. Updated when Start/Stop APIs
    are

    called on the Trigger. Known values are: "Started", "Stopped", and "Disabled".'
  name: runtime_state
  types:
  - <xref:str>
  - <xref:azure.synapse.artifacts.models.TriggerRuntimeState>
- description: List of tags that can be used for describing the trigger.
  name: annotations
  types:
  - <xref:list>[<xref:JSON>]
- description: Pipelines that need to be started.
  name: pipelines
  types:
  - <xref:list>[<xref:azure.synapse.artifacts.models.TriggerPipelineReference>]
- description: 'The blob path must begin with the pattern provided for trigger to

    fire. For example, ''/records/blobs/december/'' will only fire the trigger for
    blobs in the

    december folder under the records container. At least one of these must be provided:

    blobPathBeginsWith, blobPathEndsWith.'
  name: blob_path_begins_with
  types:
  - <xref:str>
- description: 'The blob path must end with the pattern provided for trigger to

    fire. For example, ''december/boxes.csv'' will only fire the trigger for blobs
    named boxes in a

    december folder. At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.'
  name: blob_path_ends_with
  types:
  - <xref:str>
- description: If set to true, blobs with zero bytes will be ignored.
  name: ignore_empty_blobs
  types:
  - <xref:bool>
- description: The type of events that cause this trigger to fire. Required.
  name: events
  types:
  - <xref:list>[<xref:str>
  - <xref:azure.synapse.artifacts.models.BlobEventType>]
- description: The ARM resource ID of the Storage Account. Required.
  name: scope
  types:
  - <xref:str>
methods:
- uid: azure.synapse.artifacts.models.BlobEventsTrigger.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.synapse.artifacts.models.BlobEventsTrigger.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.synapse.artifacts.models.BlobEventsTrigger.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.synapse.artifacts.models.BlobEventsTrigger.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.synapse.artifacts.models.BlobEventsTrigger.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.synapse.artifacts.models.BlobEventsTrigger.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
