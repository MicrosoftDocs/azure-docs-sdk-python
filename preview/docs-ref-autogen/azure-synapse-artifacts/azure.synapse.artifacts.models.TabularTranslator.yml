### YamlMime:PythonClass
uid: azure.synapse.artifacts.models.TabularTranslator
name: TabularTranslator
fullName: azure.synapse.artifacts.models.TabularTranslator
module: azure.synapse.artifacts.models
inheritances:
- azure.synapse.artifacts.models._models_py3.CopyTranslator
summary: 'A copy activity tabular translator.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'TabularTranslator(*, additional_properties: Dict[str, MutableMapping[str,
    Any]] | None = None, column_mappings: MutableMapping[str, Any] | None = None,
    schema_mapping: MutableMapping[str, Any] | None = None, collection_reference:
    MutableMapping[str, Any] | None = None, map_complex_values_to_string: MutableMapping[str,
    Any] | None = None, mappings: MutableMapping[str, Any] | None = None, type_conversion:
    MutableMapping[str, Any] | None = None, type_conversion_settings: _models.TypeConversionSettings
    | None = None, **kwargs: Any)'
  keywordOnlyParameters:
  - name: additional_properties
    description: 'Unmatched properties from the message are deserialized to this

      collection.'
    types:
    - <xref:dict>[<xref:str>, <xref:JSON>]
  - name: column_mappings
    description: 'Column mappings. Example: "UserId: MyUserId, Group: MyGroup, Name:

      MyName" Type: string (or Expression with resultType string). This property will
      be retired.

      Please use mappings property.'
    types:
    - <xref:JSON>
  - name: schema_mapping
    description: 'The schema mapping to map between tabular data and hierarchical
      data.

      Example: {"Column1": "$.Column1", "Column2": "$.Column2.Property1", "Column3":

      "$.Column2.Property2"}. Type: object (or Expression with resultType object).
      This property will

      be retired. Please use mappings property.'
    types:
    - <xref:JSON>
  - name: collection_reference
    description: 'The JSON Path of the Nested Array that is going to do

      cross-apply. Type: object (or Expression with resultType object).'
    types:
    - <xref:JSON>
  - name: map_complex_values_to_string
    description: 'Whether to map complex (array and object) values to

      simple strings in json format. Type: boolean (or Expression with resultType
      boolean).'
    types:
    - <xref:JSON>
  - name: mappings
    description: 'Column mappings with logical types. Tabular->tabular example:

      [{"source":{"name":"CustomerName","type":"String"},"sink":{"name":"ClientName","type":"String"}},{"source":{"name":"CustomerAddress","type":"String"},"sink":{"name":"ClientAddress","type":"String"}}].  #
      pylint: disable=line-too-long

      Hierarchical->tabular example:

      [{"source":{"path":"$.CustomerName","type":"String"},"sink":{"name":"ClientName","type":"String"}},{"source":{"path":"$.CustomerAddress","type":"String"},"sink":{"name":"ClientAddress","type":"String"}}].  #
      pylint: disable=line-too-long

      Type: object (or Expression with resultType object).'
    types:
    - <xref:JSON>
  - name: type_conversion
    description: 'Whether to enable the advanced type conversion feature in the Copy

      activity. Type: boolean (or Expression with resultType boolean).'
    types:
    - <xref:JSON>
  - name: type_conversion_settings
    description: Type conversion settings.
    types:
    - <xref:azure.synapse.artifacts.models.TypeConversionSettings>
variables:
- description: 'Unmatched properties from the message are deserialized to this

    collection.'
  name: additional_properties
  types:
  - <xref:dict>[<xref:str>, <xref:JSON>]
- description: Copy translator type. Required.
  name: type
  types:
  - <xref:str>
- description: 'Column mappings. Example: "UserId: MyUserId, Group: MyGroup, Name:

    MyName" Type: string (or Expression with resultType string). This property will
    be retired.

    Please use mappings property.'
  name: column_mappings
  types:
  - <xref:JSON>
- description: 'The schema mapping to map between tabular data and hierarchical data.

    Example: {"Column1": "$.Column1", "Column2": "$.Column2.Property1", "Column3":

    "$.Column2.Property2"}. Type: object (or Expression with resultType object). This
    property will

    be retired. Please use mappings property.'
  name: schema_mapping
  types:
  - <xref:JSON>
- description: 'The JSON Path of the Nested Array that is going to do cross-apply.

    Type: object (or Expression with resultType object).'
  name: collection_reference
  types:
  - <xref:JSON>
- description: 'Whether to map complex (array and object) values to simple

    strings in json format. Type: boolean (or Expression with resultType boolean).'
  name: map_complex_values_to_string
  types:
  - <xref:JSON>
- description: 'Column mappings with logical types. Tabular->tabular example:

    [{"source":{"name":"CustomerName","type":"String"},"sink":{"name":"ClientName","type":"String"}},{"source":{"name":"CustomerAddress","type":"String"},"sink":{"name":"ClientAddress","type":"String"}}].  #
    pylint: disable=line-too-long

    Hierarchical->tabular example:

    [{"source":{"path":"$.CustomerName","type":"String"},"sink":{"name":"ClientName","type":"String"}},{"source":{"path":"$.CustomerAddress","type":"String"},"sink":{"name":"ClientAddress","type":"String"}}].  #
    pylint: disable=line-too-long

    Type: object (or Expression with resultType object).'
  name: mappings
  types:
  - <xref:JSON>
- description: 'Whether to enable the advanced type conversion feature in the Copy

    activity. Type: boolean (or Expression with resultType boolean).'
  name: type_conversion
  types:
  - <xref:JSON>
- description: Type conversion settings.
  name: type_conversion_settings
  types:
  - <xref:azure.synapse.artifacts.models.TypeConversionSettings>
methods:
- uid: azure.synapse.artifacts.models.TabularTranslator.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.synapse.artifacts.models.TabularTranslator.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.synapse.artifacts.models.TabularTranslator.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.synapse.artifacts.models.TabularTranslator.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.synapse.artifacts.models.TabularTranslator.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.synapse.artifacts.models.TabularTranslator.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
