### YamlMime:PythonClass
uid: azure.keyvault.administration.KeyVaultBackupClient
name: KeyVaultBackupClient
fullName: azure.keyvault.administration.KeyVaultBackupClient
module: azure.keyvault.administration
inheritances:
- azure.keyvault.administration._internal.client_base.KeyVaultClientBase
summary: Performs Key Vault backup and restore operations.
constructor:
  syntax: 'KeyVaultBackupClient(vault_url: str, credential: TokenCredential, **kwargs)'
  parameters:
  - name: vault_url
    description: 'URL of the vault on which the client will operate. This is also
      called the vault''s "DNS Name".

      You should validate that this URL references a valid Key Vault or Managed HSM
      resource.

      See [https://aka.ms/azsdk/blog/vault-uri](https://aka.ms/azsdk/blog/vault-uri)
      for details.'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'An object which can provide an access token for the vault, such
      as a credential from

      <xref:azure.identity>'
    isRequired: true
    types:
    - <xref:azure.core.credentials.TokenCredential>
  - name: api_version
    description: Version of the service API to use. Defaults to the most recent.
    types:
    - <xref:azure.keyvault.administration.ApiVersion>
  - name: verify_challenge_resource
    description: 'Whether to verify the authentication challenge resource matches
      the Key

      Vault or Managed HSM domain. Defaults to True.'
    types:
    - <xref:bool>
methods:
- uid: azure.keyvault.administration.KeyVaultBackupClient.begin_backup
  name: begin_backup
  summary: Begin a full backup of the Key Vault.
  signature: 'begin_backup(blob_storage_url: str, sas_token: str, **kwargs) -> LROPoller[KeyVaultBackupResult]'
  parameters:
  - name: blob_storage_url
    description: 'URL of the blob storage container in which the backup will be stored,
      for example

      [https:/](https:/)/<account>.blob.core.windows.net/backup'
    isRequired: true
    types:
    - <xref:str>
  - name: sas_token
    description: a Shared Access Signature (SAS) token authorizing access to the blob
      storage resource
    isRequired: true
    types:
    - <xref:str>
  - name: continuation_token
    description: a continuation token to restart polling from a saved state
    types:
    - <xref:str>
  return:
    description: 'An <xref:azure.core.polling.LROPoller> instance. Call *result()*
      on this object to wait for the

      operation to complete and get a <xref:azure.keyvault.administration.KeyVaultBackupResult>.'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.keyvault.administration.KeyVaultBackupResult>]
  examples:
  - "Create a vault backup<!--[!code-python[Main](s\\test_examples_administration.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\52\\\\azure-keyvault-administration-4.4.0b1\\\\tests\\\\test_examples_administration.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # begin a vault backup\n   backup_poller = backup_client.begin_backup(container_uri,\
    \ sas_token)\n\n   # check if the backup completed\n   done = backup_poller.done()\n\
    \n   # block until the backup completes\n   # result() returns an object with\
    \ a URL of the backup\n   backup_operation = backup_poller.result()\n\n   ````\n"
- uid: azure.keyvault.administration.KeyVaultBackupClient.begin_restore
  name: begin_restore
  summary: 'Restore a Key Vault backup.


    This method restores either a complete Key Vault backup or when `key_name` has
    a value, a single key.'
  signature: 'begin_restore(folder_url: str, sas_token: str, **kwargs) -> LROPoller'
  parameters:
  - name: folder_url
    description: 'URL of the blob holding the backup. This would be the *folder_url*
      of a

      <xref:azure.keyvault.administration.KeyVaultBackupResult> returned by <xref:azure.keyvault.administration.KeyVaultBackupClient.begin_backup>,
      for example

      [https:/](https:/)/<account>.blob.core.windows.net/backup/mhsm-account-2020090117323313'
    isRequired: true
    types:
    - <xref:str>
  - name: sas_token
    description: a Shared Access Signature (SAS) token authorizing access to the blob
      storage resource
    isRequired: true
    types:
    - <xref:str>
  - name: continuation_token
    description: a continuation token to restart polling from a saved state
    types:
    - <xref:str>
  - name: key_name
    description: name of a single key in the backup. When set, only this key will
      be restored.
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.core.polling.LROPoller>
  examples:
  - "Restore a vault backup<!--[!code-python[Main](s\\test_examples_administration.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\52\\\\azure-keyvault-administration-4.4.0b1\\\\tests\\\\test_examples_administration.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # begin a full vault restore\n   restore_poller = backup_client.begin_restore(folder_url,\
    \ sas_token)\n\n   # check if the restore completed\n   done = restore_poller.done()\n\
    \n   # wait for the restore to complete\n   restore_poller.wait()\n\n   ````\n\
    \nRestore a single key<!--[!code-python[Main](s\\test_examples_administration.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\52\\\\azure-keyvault-administration-4.4.0b1\\\\tests\\\\test_examples_administration.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # begin a restore of a single key from a backed up vault\n   restore_poller\
    \ = backup_client.begin_restore(folder_url, sas_token, key_name=key_name)\n\n\
    \   # check if the restore completed\n   done = restore_poller.done()\n\n   #\
    \ wait for the restore to complete\n   restore_poller.wait()\n\n   ````\n"
