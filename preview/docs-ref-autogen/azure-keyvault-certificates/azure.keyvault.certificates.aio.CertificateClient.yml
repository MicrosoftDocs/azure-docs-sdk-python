### YamlMime:PythonClass
uid: azure.keyvault.certificates.aio.CertificateClient
name: CertificateClient
fullName: azure.keyvault.certificates.aio.CertificateClient
module: azure.keyvault.certificates.aio
inheritances:
- azure.keyvault.certificates._shared.async_client_base.AsyncKeyVaultClientBase
summary: A high-level asynchronous interface for managing a vault's certificates.
constructor:
  syntax: 'CertificateClient(vault_url: str, credential: AsyncTokenCredential, **kwargs)'
  parameters:
  - name: vault_url
    description: 'URL of the vault the client will access. This is also called the
      vault''s "DNS Name".

      You should validate that this URL references a valid Key Vault resource. See
      [https://aka.ms/azsdk/blog/vault-uri](https://aka.ms/azsdk/blog/vault-uri)

      for details.'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'An object which can provide an access token for the vault, such
      as a credential from

      <xref:azure.identity.aio>'
    isRequired: true
    types:
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
  - name: api_version
    description: Version of the service API to use. Defaults to the most recent.
    types:
    - <xref:azure.keyvault.certificates.ApiVersion>
  - name: verify_challenge_resource
    description: 'Whether to verify the authentication challenge resource matches
      the Key

      Vault domain. Defaults to True.'
    types:
    - <xref:bool>
examples:
- "Creates a new instance of the Certificate client<!--[!code-python[Main](s\\test_examples_certificates_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\\
  50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
  , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
  : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.identity.aio\
  \ import DefaultAzureCredential\n   from azure.keyvault.certificates.aio import\
  \ CertificateClient\n\n   # Create a KeyVaultCertificate using default Azure credentials\n\
  \   credential = DefaultAzureCredential()\n   certificate_client = CertificateClient(vault_url=vault_url,\
  \ credential=credential)\n\n   # the client and credential should be closed when\
  \ no longer needed\n   # (both are also async context managers)\n   await certificate_client.close()\n\
  \   await credential.close()\n\n   ````\n"
methods:
- uid: azure.keyvault.certificates.aio.CertificateClient.backup_certificate
  name: backup_certificate
  summary: 'Back up a certificate in a protected form useable only by Azure Key Vault.


    Requires certificates/backup permission. This is intended to allow copying a certificate
    from one vault to

    another. Both vaults must be owned by the same Azure subscription. Also, backup
    / restore cannot be performed

    across geopolitical boundaries. For example, a backup from a vault in a USA region
    cannot be restored to a vault

    in an EU region.'
  signature: 'async backup_certificate(certificate_name: str, **kwargs) -> bytes'
  parameters:
  - name: certificate_name
    description: The name of the certificate.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The backup blob containing the backed up certificate.
    types:
    - <xref:bytes>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the certificate doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Get a certificate backup<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # backup certificate\n   certificate_backup = await certificate_client.backup_certificate(cert_name)\n\
    \n   # returns the raw bytes of the backed up certificate\n   print(certificate_backup)\n\
    \n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.cancel_certificate_operation
  name: cancel_certificate_operation
  summary: Cancels an in-progress certificate operation. Requires the certificates/update
    permission.
  signature: 'async cancel_certificate_operation(certificate_name: str, **kwargs)
    -> CertificateOperation'
  parameters:
  - name: certificate_name
    description: The name of the certificate.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The cancelled certificate operation
    types:
    - <xref:azure.keyvault.certificates.CertificateOperation>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.keyvault.certificates.aio.CertificateClient.create_certificate
  name: create_certificate
  summary: 'Creates a new certificate.


    If this is the first version, the certificate resource is created. This operation
    requires the

    certificates/create permission. The poller requires the certificates/get permission,
    otherwise raises an

    <xref:azure.core.exceptions.HttpResponseError>'
  signature: 'async create_certificate(certificate_name: str, policy: CertificatePolicy,
    **kwargs) -> KeyVaultCertificate | CertificateOperation'
  parameters:
  - name: certificate_name
    description: The name of the certificate.
    isRequired: true
    types:
    - <xref:str>
  - name: policy
    description: 'The management policy for the certificate. Either subject or one
      of the subject alternative

      name properties are required.'
    isRequired: true
    types:
    - <xref:azure.keyvault.certificates.CertificatePolicy>
  - name: enabled
    description: Whether the certificate is enabled for use.
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  return:
    description: 'A coroutine for the creation of the certificate. Awaiting the coroutine
      returns the created

      KeyVaultCertificate if creation is successful, or the CertificateOperation if
      not.'
    types:
    - <xref:azure.keyvault.certificates.KeyVaultCertificate>
    - <xref:azure.keyvault.certificates.CertificateOperation>
  exceptions:
  - type: azure.keyvault.certificates.aio.ValueError
    description: if the certificate policy is invalid,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors.
  examples:
  - "Create a certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.keyvault.certificates import CertificatePolicy, CertificateContentType,\
    \ WellKnownIssuerNames\n\n   # specify the certificate policy\n   cert_policy\
    \ = CertificatePolicy(\n       issuer_name=WellKnownIssuerNames.self,\n      \
    \ subject=\"CN=*.microsoft.com\",\n       san_dns_names=[\"sdk.azure-int.net\"\
    ],\n       exportable=True,\n       key_type=\"RSA\",\n       key_size=2048,\n\
    \       reuse_key=False,\n       content_type=CertificateContentType.pkcs12,\n\
    \       validity_in_months=24,\n   )\n\n   certificate = await certificate_client.create_certificate(certificate_name=cert_name,\
    \ policy=cert_policy)\n\n   print(certificate.id)\n   print(certificate.name)\n\
    \   print(certificate.policy.issuer_name)\n\n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.create_issuer
  name: create_issuer
  summary: Sets the specified certificate issuer. Requires certificates/setissuers
    permission.
  signature: 'async create_issuer(issuer_name: str, provider: str, **kwargs) -> CertificateIssuer'
  parameters:
  - name: issuer_name
    description: The name of the issuer.
    isRequired: true
    types:
    - <xref:str>
  - name: provider
    description: The issuer provider.
    isRequired: true
    types:
    - <xref:str>
  - name: enabled
    description: Whether the issuer is enabled for use.
    types:
    - <xref:bool>
  - name: account_id
    description: The user name/account name/account id.
    types:
    - <xref:str>
  - name: password
    description: The password/secret/account key.
    types:
    - <xref:str>
  - name: organization_id
    description: Id of the organization
    types:
    - <xref:str>
  - name: admin_contacts
    description: 'Contact details of the organization administrators of the

      certificate issuer.'
    types:
    - <xref:list>[<xref:azure.keyvault.certificates.AdministratorContact>]
  return:
    description: The created CertificateIssuer
    types:
    - <xref:azure.keyvault.certificates.CertificateIssuer>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Create an issuer<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.keyvault.certificates import AdministratorContact\n\n   # First\
    \ we specify the AdministratorContact for a issuer.\n   admin_contacts = [\n \
    \      AdministratorContact(first_name=\"John\", last_name=\"Doe\", email=\"admin@microsoft.com\"\
    , phone=\"4255555555\")\n   ]\n\n   issuer = await certificate_client.create_issuer(\n\
    \       issuer_name=\"issuer1\",\n       provider=\"Test\",\n       account_id=\"\
    keyvaultuser\",\n       admin_contacts=admin_contacts,\n       enabled=True,\n\
    \   )\n\n   print(issuer.name)\n   print(issuer.provider)\n   print(issuer.account_id)\n\
    \n   for contact in issuer.admin_contacts:\n       print(contact.first_name)\n\
    \       print(contact.last_name)\n       print(contact.email)\n       print(contact.phone)\n\
    \n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.delete_certificate
  name: delete_certificate
  summary: 'Delete all versions of a certificate. Requires certificates/delete permission.


    If the vault has soft-delete enabled, deletion may take several seconds to complete.'
  signature: 'async delete_certificate(certificate_name: str, **kwargs) -> DeletedCertificate'
  parameters:
  - name: certificate_name
    description: The name of the certificate.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The deleted certificate
    types:
    - <xref:azure.keyvault.certificates.DeletedCertificate>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the certificate doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Delete a certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # delete a certificate\n   deleted_certificate = await certificate_client.delete_certificate(cert_name)\n\
    \n   print(deleted_certificate.name)\n\n   # if the vault has soft-delete enabled,\
    \ the certificate's\n   # scheduled purge date, deleted_on, and recovery id are\
    \ available\n   print(deleted_certificate.deleted_on)\n   print(deleted_certificate.scheduled_purge_date)\n\
    \   print(deleted_certificate.recovery_id)\n\n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.delete_certificate_operation
  name: delete_certificate_operation
  summary: 'Deletes and stops the creation operation for a specific certificate.


    Requires the certificates/update permission.'
  signature: 'async delete_certificate_operation(certificate_name: str, **kwargs)
    -> CertificateOperation'
  parameters:
  - name: certificate_name
    description: The name of the certificate.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The deleted CertificateOperation
    types:
    - <xref:azure.keyvault.certificates.CertificateOperation>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the operation doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
- uid: azure.keyvault.certificates.aio.CertificateClient.delete_contacts
  name: delete_contacts
  summary: Deletes the certificate contacts for the key vault. Requires the certificates/managecontacts
    permission.
  signature: async delete_contacts(**kwargs) -> List[CertificateContact]
  return:
    description: The deleted contacts for the key vault.
    types:
    - <xref:list>[<xref:azure.keyvault.certificates.CertificateContact>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Delete contacts<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   deleted_contacts = await certificate_client.delete_contacts()\n\n   for deleted_contact\
    \ in deleted_contacts:\n       print(deleted_contact.name)\n       print(deleted_contact.email)\n\
    \       print(deleted_contact.phone)\n\n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.delete_issuer
  name: delete_issuer
  summary: 'Deletes the specified certificate issuer.


    Requires certificates/manageissuers/deleteissuers permission.'
  signature: 'async delete_issuer(issuer_name: str, **kwargs) -> CertificateIssuer'
  parameters:
  - name: issuer_name
    description: The name of the issuer.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: CertificateIssuer
    types:
    - <xref:azure.keyvault.certificates.CertificateIssuer>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Delete an issuer<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   deleted_issuer = await certificate_client.delete_issuer(\"issuer1\")\n\n\
    \   print(deleted_issuer.name)\n   print(deleted_issuer.provider)\n   print(deleted_issuer.account_id)\n\
    \n   for contact in deleted_issuer.admin_contacts:\n       print(contact.first_name)\n\
    \       print(contact.last_name)\n       print(contact.email)\n       print(contact.phone)\n\
    \n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate
  name: get_certificate
  summary: 'Gets a certificate with its management policy attached. Requires certificates/get
    permission.


    Does not accept the version of the certificate as a parameter. To get a specific
    version of the

    certificate, call <xref:azure.keyvault.certificates.aio.CertificateClient.get_certificate_version>.'
  signature: 'async get_certificate(certificate_name: str, **kwargs) -> KeyVaultCertificate'
  parameters:
  - name: certificate_name
    description: The name of the certificate in the given vault.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An instance of KeyVaultCertificate
    types:
    - <xref:azure.keyvault.certificates.KeyVaultCertificate>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the certificate doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Get a certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # get the latest version of a certificate\n   certificate = await certificate_client.get_certificate(cert_name)\n\
    \n   print(certificate.id)\n   print(certificate.name)\n   print(certificate.policy.issuer_name)\n\
    \n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate_operation
  name: get_certificate_operation
  summary: Gets the creation operation of a certificate. Requires the certificates/get
    permission.
  signature: 'async get_certificate_operation(certificate_name: str, **kwargs) ->
    CertificateOperation'
  parameters:
  - name: certificate_name
    description: The name of the certificate.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The created CertificateOperation
    types:
    - <xref:azure.keyvault.certificates.CertificateOperation>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the certificate doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
- uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate_policy
  name: get_certificate_policy
  summary: 'Gets the policy for a certificate. Requires certificates/get permission.


    Returns the specified certificate policy resources in the key vault.'
  signature: 'async get_certificate_policy(certificate_name: str, **kwargs) -> CertificatePolicy'
  parameters:
  - name: certificate_name
    description: The name of the certificate in a given key vault.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The certificate policy
    types:
    - <xref:azure.keyvault.certificates.CertificatePolicy>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate_version
  name: get_certificate_version
  summary: 'Gets a specific version of a certificate without returning its management
    policy.


    Requires certificates/get permission. To get the latest version of the certificate,
    or to get the certificate''s

    policy as well, call <xref:azure.keyvault.certificates.aio.CertificateClient.get_certificate>.'
  signature: 'async get_certificate_version(certificate_name: str, version: str, **kwargs)
    -> KeyVaultCertificate'
  parameters:
  - name: certificate_name
    description: The name of the certificate in the given vault.
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: The version of the certificate.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An instance of KeyVaultCertificate
    types:
    - <xref:azure.keyvault.certificates.KeyVaultCertificate>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the certificate doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Get a certificate with a specific version<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   certificate = await certificate_client.get_certificate_version(cert_name,\
    \ version)\n\n   print(certificate.id)\n   print(certificate.properties.version)\n\
    \n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.get_contacts
  name: get_contacts
  summary: Gets the certificate contacts for the key vault. Requires the certificates/managecontacts
    permission.
  signature: async get_contacts(**kwargs) -> List[CertificateContact]
  return:
    description: The certificate contacts for the key vault.
    types:
    - <xref:list>[<xref:azure.keyvault.certificates.CertificateContact>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get contacts<!--[!code-python[Main](s\\test_examples_certificates_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\
    \\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   contacts = await certificate_client.get_contacts()\n\n   # Loop through the\
    \ certificate contacts for this key vault.\n   for contact in contacts:\n    \
    \   print(contact.name)\n       print(contact.email)\n       print(contact.phone)\n\
    \n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.get_deleted_certificate
  name: get_deleted_certificate
  summary: 'Get a deleted certificate. Possible only in a vault with soft-delete enabled.


    Requires certificates/get permission. Retrieves the deleted certificate information
    plus its attributes, such as

    retention interval, scheduled permanent deletion, and the current deletion recovery
    level.'
  signature: 'async get_deleted_certificate(certificate_name: str, **kwargs) -> DeletedCertificate'
  parameters:
  - name: certificate_name
    description: The name of the certificate.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The deleted certificate
    types:
    - <xref:azure.keyvault.certificates.DeletedCertificate>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the certificate doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Get a deleted certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # get a deleted certificate (requires soft-delete enabled for the vault)\n\
    \   deleted_certificate = await certificate_client.get_deleted_certificate(cert_name)\n\
    \   print(deleted_certificate.name)\n\n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.get_issuer
  name: get_issuer
  summary: Gets the specified certificate issuer. Requires certificates/manageissuers/getissuers
    permission.
  signature: 'async get_issuer(issuer_name: str, **kwargs) -> CertificateIssuer'
  parameters:
  - name: issuer_name
    description: The name of the issuer.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The specified certificate issuer.
    types:
    - <xref:azure.keyvault.certificates.CertificateIssuer>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the issuer doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Get an issuer<!--[!code-python[Main](s\\test_examples_certificates_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\
    \\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   issuer = await certificate_client.get_issuer(\"issuer1\")\n\n   print(issuer.name)\n\
    \   print(issuer.provider)\n   print(issuer.account_id)\n\n   for contact in issuer.admin_contacts:\n\
    \       print(contact.first_name)\n       print(contact.last_name)\n       print(contact.email)\n\
    \       print(contact.phone)\n\n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.import_certificate
  name: import_certificate
  summary: 'Import a certificate created externally. Requires certificates/import
    permission.


    Imports an existing valid certificate, containing a private key, into Azure Key
    Vault. The certificate to be

    imported can be in either PFX or PEM format. If the certificate is in PEM format
    the PEM file must contain the

    key as well as x509 certificates, and you must provide a `policy` with

    <xref:azure.keyvault.certificates.CertificatePolicy.content_type> of

    <xref:azure.keyvault.certificates.CertificateContentType.pem>.'
  signature: 'async import_certificate(certificate_name: str, certificate_bytes: bytes,
    **kwargs) -> KeyVaultCertificate'
  parameters:
  - name: certificate_name
    description: The name of the certificate.
    isRequired: true
    types:
    - <xref:str>
  - name: certificate_bytes
    description: 'Bytes of the certificate object to import.

      This certificate needs to contain the private key.'
    isRequired: true
    types:
    - <xref:bytes>
  - name: enabled
    description: Whether the certificate is enabled for use.
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: password
    description: 'If the private key in the passed in certificate is encrypted, it

      is the password used for encryption.'
    types:
    - <xref:str>
  - name: policy
    description: 'The management policy for the certificate. Required if importing
      a PEM-format certificate,

      with <xref:azure.keyvault.certificates.CertificatePolicy.content_type> set to

      <xref:azure.keyvault.certificates.CertificateContentType.pem>.'
    types:
    - <xref:azure.keyvault.certificates.CertificatePolicy>
  return:
    description: The imported KeyVaultCertificate
    types:
    - <xref:azure.keyvault.certificates.KeyVaultCertificate>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.keyvault.certificates.aio.CertificateClient.list_deleted_certificates
  name: list_deleted_certificates
  summary: 'Lists the currently-recoverable deleted certificates. Possible only if
    vault is soft-delete enabled.


    Requires certificates/get/list permission. Retrieves the certificates in the current
    vault which are in a

    deleted state and ready for recovery or purging. This operation includes deletion-specific
    information.'
  signature: list_deleted_certificates(**kwargs) -> AsyncItemPaged[DeletedCertificate]
  parameters:
  - name: include_pending
    description: 'Specifies whether to include certificates which are not completely
      deleted.

      Only available for API versions v7.0 and up.'
    types:
    - <xref:bool>
  return:
    description: An iterator-like instance of DeletedCertificate
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.keyvault.certificates.DeletedCertificate>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "List all the deleted certificates<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # get an iterator of deleted certificates (requires soft-delete enabled for\
    \ the vault)\n   deleted_certificates = certificate_client.list_deleted_certificates()\n\
    \n   async for certificate in deleted_certificates:\n       print(certificate.id)\n\
    \       print(certificate.name)\n       print(certificate.scheduled_purge_date)\n\
    \       print(certificate.recovery_id)\n       print(certificate.deleted_on)\n\
    \n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificate_versions
  name: list_properties_of_certificate_versions
  summary: 'List the identifiers and properties of a certificate''s versions.


    Requires certificates/list permission.'
  signature: 'list_properties_of_certificate_versions(certificate_name: str, **kwargs)
    -> AsyncItemPaged[CertificateProperties]'
  parameters:
  - name: certificate_name
    description: The name of the certificate.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterator-like instance of CertificateProperties
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.keyvault.certificates.CertificateProperties>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "List all versions of a certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # get an iterator of all versions of a certificate\n   certificate_versions\
    \ = certificate_client.list_properties_of_certificate_versions(certificate_name)\n\
    \n   async for certificate in certificate_versions:\n       print(certificate.id)\n\
    \       print(certificate.updated_on)\n       print(certificate.version)\n\n \
    \  ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificates
  name: list_properties_of_certificates
  summary: 'List identifiers and properties of all certificates in the vault.


    Requires certificates/list permission.'
  signature: list_properties_of_certificates(**kwargs) -> AsyncItemPaged[CertificateProperties]
  parameters:
  - name: include_pending
    description: 'Specifies whether to include certificates which are not completely
      provisioned.

      Only available for API versions v7.0 and up.'
    types:
    - <xref:bool>
  return:
    description: An iterator-like instance of CertificateProperties
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.keyvault.certificates.CertificateProperties>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "List all certificates<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # list certificates\n   certificates = certificate_client.list_properties_of_certificates()\n\
    \n   async for certificate in certificates:\n       print(certificate.id)\n  \
    \     print(certificate.created_on)\n       print(certificate.name)\n       print(certificate.updated_on)\n\
    \       print(certificate.enabled)\n\n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_issuers
  name: list_properties_of_issuers
  summary: 'Lists properties of the certificate issuers for the key vault.


    Requires the certificates/manageissuers/getissuers permission.'
  signature: list_properties_of_issuers(**kwargs) -> AsyncItemPaged[IssuerProperties]
  return:
    description: An iterator-like instance of Issuers
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.keyvault.certificates.CertificateIssuer>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "List issuers of a vault<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   issuers = certificate_client.list_properties_of_issuers()\n\n   async for\
    \ issuer in issuers:\n       print(issuer.name)\n       print(issuer.provider)\n\
    \n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.merge_certificate
  name: merge_certificate
  summary: 'Merges a certificate or a certificate chain with a key pair existing on
    the server.


    Requires the certificates/create permission. Performs the merging of a certificate
    or certificate chain with a

    key pair currently available in the service. Make sure when creating the certificate
    to merge using

    <xref:azure.keyvault.certificates.aio.begin_create_certificate> that you set its
    issuer to ''Unknown''. This way Key Vault knows that the

    certificate will not be signed by an issuer known to it.'
  signature: 'async merge_certificate(certificate_name: str, x509_certificates: List[bytes],
    **kwargs) -> KeyVaultCertificate'
  parameters:
  - name: certificate_name
    description: The name of the certificate
    isRequired: true
    types:
    - <xref:str>
  - name: x509_certificates
    description: The certificate or the certificate chain to merge.
    isRequired: true
    types:
    - <xref:list>[<xref:bytes>]
  - name: enabled
    description: Whether the certificate is enabled for use.
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  return:
    description: The merged certificate operation
    types:
    - <xref:azure.keyvault.certificates.CertificateOperation>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.keyvault.certificates.aio.CertificateClient.purge_deleted_certificate
  name: purge_deleted_certificate
  summary: 'Permanently deletes a deleted certificate. Possible only in vaults with
    soft-delete enabled.


    Requires certificates/purge permission. Performs an irreversible deletion of the
    specified certificate, without

    possibility for recovery. The operation is not available if the

    <xref:azure.keyvault.certificates.CertificateProperties.recovery_level> does not
    specify ''Purgeable''.

    This method is only necessary for purging a certificate before its

    <xref:azure.keyvault.certificates.DeletedCertificate.scheduled_purge_date>.'
  signature: 'async purge_deleted_certificate(certificate_name: str, **kwargs) ->
    None'
  parameters:
  - name: certificate_name
    description: The name of the certificate
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.keyvault.certificates.aio.CertificateClient.recover_deleted_certificate
  name: recover_deleted_certificate
  summary: 'Recover a deleted certificate to its latest version. Possible only in
    a vault with soft-delete enabled.


    Requires certificates/recover permission. If the vault does not have soft-delete
    enabled,

    <xref:azure.keyvault.certificates.aio.CertificateClient.delete_certificate> is
    permanent, and this method will raise an error. Attempting to recover a

    non-deleted certificate will also raise an error.'
  signature: 'async recover_deleted_certificate(certificate_name: str, **kwargs) ->
    KeyVaultCertificate'
  parameters:
  - name: certificate_name
    description: The name of the deleted certificate
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The recovered certificate
    types:
    - <xref:azure.keyvault.certificates.KeyVaultCertificate>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Recover a deleted certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # recover deleted certificate to its latest version (requires soft-delete\
    \ enabled for the vault)\n   recovered_certificate = await certificate_client.recover_deleted_certificate(cert_name)\n\
    \   print(recovered_certificate.id)\n   print(recovered_certificate.name)\n\n\
    \   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.restore_certificate_backup
  name: restore_certificate_backup
  summary: 'Restore a certificate backup to the vault. Requires certificates/restore
    permission.


    This restores all versions of the certificate, with its name, attributes, and
    access control policies. If the

    certificate''s name is already in use, restoring it will fail. Also, the target
    vault must be owned by the same

    Microsoft Azure subscription as the source vault.'
  signature: 'async restore_certificate_backup(backup: bytes, **kwargs) -> KeyVaultCertificate'
  parameters:
  - name: backup
    description: The backup blob associated with a certificate bundle.
    isRequired: true
    types:
    - <xref:bytes>
  return:
    description: The restored KeyVaultCertificate
    types:
    - <xref:azure.keyvault.certificates.KeyVaultCertificate>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Restore a certificate backup<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # restores a certificate backup\n   restored_certificate = await certificate_client.restore_certificate_backup(certificate_backup)\n\
    \   print(restored_certificate.id)\n   print(restored_certificate.name)\n   print(restored_certificate.properties.version)\n\
    \n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.set_contacts
  name: set_contacts
  summary: Sets the certificate contacts for the key vault. Requires certificates/managecontacts
    permission.
  signature: 'async set_contacts(contacts: List[CertificateContact], **kwargs) ->
    List[CertificateContact]'
  parameters:
  - name: contacts
    description: The contact list for the vault certificates.
    isRequired: true
    types:
    - <xref:list>[<xref:azure.keyvault.certificates.CertificateContact>]
  return:
    description: The created list of contacts
    types:
    - <xref:list>[<xref:azure.keyvault.certificates.CertificateContact>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Create contacts<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.keyvault.certificates import CertificateContact\n\n   # Create\
    \ a list of the contacts that you want to set for this key vault.\n   contact_list\
    \ = [\n       CertificateContact(email=\"admin@contoso.com\", name=\"John Doe\"\
    , phone=\"1111111111\"),\n       CertificateContact(email=\"admin2@contoso.com\"\
    , name=\"John Doe2\", phone=\"2222222222\"),\n   ]\n\n   contacts = await certificate_client.set_contacts(contact_list)\n\
    \   for contact in contacts:\n       print(contact.name)\n       print(contact.email)\n\
    \       print(contact.phone)\n\n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.update_certificate_policy
  name: update_certificate_policy
  summary: 'Updates the policy for a certificate. Requires certificates/update permission.


    Set specified members in the certificate policy. Leaves others as null.'
  signature: 'async update_certificate_policy(certificate_name: str, policy: CertificatePolicy,
    **kwargs) -> CertificatePolicy'
  parameters:
  - name: certificate_name
    description: The name of the certificate in the given vault.
    isRequired: true
    types:
    - <xref:str>
  - name: policy
    description: The policy for the certificate.
    isRequired: true
    types:
    - <xref:azure.keyvault.certificates.CertificatePolicy>
  return:
    description: The certificate policy
    types:
    - <xref:azure.keyvault.certificates.CertificatePolicy>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.keyvault.certificates.aio.CertificateClient.update_certificate_properties
  name: update_certificate_properties
  summary: Change a certificate's properties. Requires certificates/update permission.
  signature: 'async update_certificate_properties(certificate_name: str, version:
    str | None = None, **kwargs) -> KeyVaultCertificate'
  parameters:
  - name: certificate_name
    description: The name of the certificate in the given key vault.
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: The version of the certificate.
    isRequired: true
    types:
    - <xref:str>
  - name: enabled
    description: Whether the certificate is enabled for use.
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  return:
    description: The updated KeyVaultCertificate
    types:
    - <xref:azure.keyvault.certificates.KeyVaultCertificate>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Update a certificate's attributes<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\50\\\\azure-keyvault-certificates-4.8.0b1\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # update attributes of an existing certificate\n   tags = {\"foo\": \"updated\
    \ tag\"}\n   updated_certificate = await certificate_client.update_certificate_properties(\n\
    \       certificate_name=certificate.name, tags=tags\n   )\n\n   print(updated_certificate.properties.version)\n\
    \   print(updated_certificate.properties.updated_on)\n   print(updated_certificate.properties.tags)\n\
    \n   ````\n"
- uid: azure.keyvault.certificates.aio.CertificateClient.update_issuer
  name: update_issuer
  summary: Updates the specified certificate issuer. Requires certificates/setissuers
    permission.
  signature: 'async update_issuer(issuer_name: str, **kwargs) -> CertificateIssuer'
  parameters:
  - name: issuer_name
    description: The name of the issuer.
    isRequired: true
    types:
    - <xref:str>
  - name: enabled
    description: Whether the issuer is enabled for use.
    types:
    - <xref:bool>
  - name: provider
    description: The issuer provider
    types:
    - <xref:str>
  - name: account_id
    description: The user name/account name/account id.
    types:
    - <xref:str>
  - name: password
    description: The password/secret/account key.
    types:
    - <xref:str>
  - name: organization_id
    description: Id of the organization
    types:
    - <xref:str>
  - name: admin_contacts
    description: 'Contact details of the organization administrators of

      the certificate issuer'
    types:
    - <xref:list>[<xref:azure.keyvault.certificates.AdministratorContact>]
  return:
    description: The updated issuer
    types:
    - <xref:azure.keyvault.certificates.CertificateIssuer>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
