### YamlMime:PythonClass
uid: azure.core.experimental.transport.AsyncHttpXTransport
name: AsyncHttpXTransport
fullName: azure.core.experimental.transport.AsyncHttpXTransport
module: azure.core.experimental.transport
inheritances:
- azure.core.pipeline.transport._base_async.AsyncHttpTransport
summary: Implements a basic async httpx HTTP sender
constructor:
  syntax: 'AsyncHttpXTransport(*, client: AsyncClient | None = None, client_owner:
    bool = True, use_env_settings: bool = True, **kwargs: Any)'
  keywordOnlyParameters:
  - name: client
    description: HTTPX client to use instead of the default one
    types:
    - <xref:httpx.AsyncClient>
  - name: client_owner
    description: Decide if the client provided by user is owned by this transport.
      Default to True.
    defaultValue: 'True'
    types:
    - <xref:bool>
  - name: use_env_settings
    description: Uses proxy settings from environment. Defaults to True.
    defaultValue: 'True'
    types:
    - <xref:bool>
methods:
- uid: azure.core.experimental.transport.AsyncHttpXTransport.close
  name: close
  signature: async close() -> None
- uid: azure.core.experimental.transport.AsyncHttpXTransport.open
  name: open
  signature: async open() -> None
- uid: azure.core.experimental.transport.AsyncHttpXTransport.send
  name: send
  summary: Send the request using this HTTP sender.
  signature: 'async send(request: HttpRequest | HttpRequest, **kwargs) -> AsyncHttpXTransportResponse'
  parameters:
  - name: request
    description: The request object to be sent.
    isRequired: true
    types:
    - <xref:azure.core.rest.HttpRequest>
    - <xref:LegacyHttpRequest>
  keywordOnlyParameters:
  - name: stream
    description: Whether to stream the response. Defaults to False.
    types:
    - <xref:bool>
  return:
    description: The response object.
    types:
    - <xref:azure.core.experimental.transport.AsyncHttpXTransportResponse>
- uid: azure.core.experimental.transport.AsyncHttpXTransport.sleep
  name: sleep
  summary: 'Sleep for the specified duration.


    You should always ask the transport to sleep, and not call directly

    the stdlib. This is mostly important in async, as the transport

    may not use asyncio but other implementation like trio and they their own

    way to sleep, but to keep design

    consistent, it''s cleaner to always ask the transport to sleep and let the transport

    implementor decide how to do it.

    By default, this method will use "asyncio", and don''t need to be overridden

    if your transport does too.'
  signature: 'async sleep(duration: float) -> None'
  parameters:
  - name: duration
    description: The number of seconds to sleep.
    isRequired: true
    types:
    - <xref:float>
