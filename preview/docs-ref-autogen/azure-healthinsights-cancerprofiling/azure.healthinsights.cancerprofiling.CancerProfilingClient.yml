### YamlMime:PythonClass
uid: azure.healthinsights.cancerprofiling.CancerProfilingClient
name: CancerProfilingClient
fullName: azure.healthinsights.cancerprofiling.CancerProfilingClient
module: azure.healthinsights.cancerprofiling
inheritances:
- azure.healthinsights.cancerprofiling._operations._operations.CancerProfilingClientOperationsMixin
summary: CancerProfilingClient.
constructor:
  syntax: 'CancerProfilingClient(endpoint: str, credential: AzureKeyCredential, **kwargs:
    Any)'
  parameters:
  - name: endpoint
    description: 'Supported Cognitive Services endpoints (protocol and hostname, for
      example:

      [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).
      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: Credential needed for the client to connect to Azure. Required.
    isRequired: true
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
  keywordOnlyParameters:
  - name: api_version
    description: 'The API version to use for this operation. Default value is

      "2023-03-01-preview". Note that overriding this default value may result in
      unsupported

      behavior.'
    types:
    - <xref:str>
  - name: polling_interval
    description: 'Default waiting time between two polls for LRO operations if no

      Retry-After header is present.'
    types:
    - <xref:int>
methods:
- uid: azure.healthinsights.cancerprofiling.CancerProfilingClient.begin_infer_cancer_profile
  name: begin_infer_cancer_profile
  summary: 'Create Onco Phenotype job.


    Creates an Onco Phenotype job with the given request body.'
  signature: 'begin_infer_cancer_profile(body: OncoPhenotypeData | MutableMapping[str,
    Any] | IO, *, repeatability_request_id: str | None = None, repeatability_first_sent:
    datetime | None = None, **kwargs: Any) -> LROPoller[OncoPhenotypeResult]'
  parameters:
  - name: body
    description: 'Is one of the following types: OncoPhenotypeData, JSON, IO Required.'
    isRequired: true
    types:
    - <xref:azure.healthinsights.cancerprofiling.models.OncoPhenotypeData>
    - <xref:JSON>
    - <xref:typing.IO>
  keywordOnlyParameters:
  - name: repeatability_request_id
    description: 'An opaque, globally-unique, client-generated string

      identifier for the request. Default value is None.'
    types:
    - <xref:str>
  - name: repeatability_first_sent
    description: 'Specifies the date and time at which the request was first

      created. Default value is None.'
    types:
    - <xref:datetime.datetime>
  - name: content_type
    description: 'Body parameter Content-Type. Known values are: application/json.
      Default

      value is None.'
    types:
    - <xref:str>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  - name: polling
    description: 'By default, your polling method will be LROBasePolling. Pass in
      False for

      this operation to not poll, or pass in your own initialized polling object for
      a personal

      polling strategy.'
    types:
    - <xref:bool>
    - <xref:azure.core.polling.PollingMethod>
  - name: polling_interval
    description: 'Default waiting time between two polls for LRO operations if no

      Retry-After header is present.'
    types:
    - <xref:int>
  return:
    description: 'An instance of LROPoller that returns OncoPhenotypeResult. The OncoPhenotypeResult
      is

      compatible with MutableMapping'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.healthinsights.cancerprofiling.models.OncoPhenotypeResult>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.healthinsights.cancerprofiling.CancerProfilingClient.close
  name: close
  signature: close() -> None
- uid: azure.healthinsights.cancerprofiling.CancerProfilingClient.send_request
  name: send_request
  summary: 'Runs the network request through the client''s chained policies.


    ```


    >>> from azure.core.rest import HttpRequest

    >>> request = HttpRequest("GET", "https://www.example.org/")

    <HttpRequest [GET], url: ''https://www.example.org/''>

    >>> response = client.send_request(request)

    <HttpResponse: 200 OK>

    ```


    For more information on this code flow, see [https://aka.ms/azsdk/dpcodegen/python/send_request](https://aka.ms/azsdk/dpcodegen/python/send_request)'
  signature: 'send_request(request: HttpRequest, **kwargs: Any) -> HttpResponse'
  parameters:
  - name: request
    description: The network request you want to make. Required.
    isRequired: true
    types:
    - <xref:azure.core.rest.HttpRequest>
  keywordOnlyParameters:
  - name: stream
    description: Whether the response payload will be streamed. Defaults to False.
    types:
    - <xref:bool>
  return:
    description: The response of your network call. Does not do error handling on
      your response.
    types:
    - <xref:azure.core.rest.HttpResponse>
