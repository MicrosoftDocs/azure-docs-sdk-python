### YamlMime:PythonClass
uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes
name: RadiologyCodeWithTypes
fullName: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes
module: azure.healthinsights.radiologyinsights.models
inheritances:
- azure.healthinsights.radiologyinsights._model_base.Model
summary: 'Radiology code with types : used in imaging procedure recommendation for
  contrast and view.


  All required parameters must be populated in order to send to server.'
constructor:
  syntax: 'RadiologyCodeWithTypes(*args: Any, **kwargs: Any)'
variables:
- description: 'The SNOMED CT code indicates whether imaging was conducted with or
    without contrast

    in the case of contrast, and in the case of views, it denotes the number of views.
    Required.'
  name: code
  types:
  - <xref:azure.healthinsights.radiologyinsights.models.CodeableConcept>
- description: 'The collection of types will indicate the contrast substance used
    in the case of

    contrast and, in the case of views, it will specify the types of views, such as
    lateral and

    frontal, etc. Required.'
  name: types
  types:
  - <xref:list>[<xref:azure.healthinsights.radiologyinsights.models.CodeableConcept>]
methods:
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.as_dict
  name: as_dict
  summary: Return a dict that can be JSONify using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.clear
  name: clear
  signature: clear() -> None
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.copy
  name: copy
  signature: copy() -> Model
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.get
  name: get
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.items
  name: items
  signature: items() -> ItemsView[str, Any]
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.keys
  name: keys
  signature: keys() -> KeysView[str]
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.pop
  name: pop
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.popitem
  name: popitem
  signature: popitem() -> Tuple[str, Any]
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.setdefault
  name: setdefault
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.update
  name: update
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.values
  name: values
  signature: values() -> ValuesView[Any]
attributes:
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.code
  name: code
  summary: 'The SNOMED CT code indicates whether imaging was conducted with or without
    contrast in the case

    of contrast, and in the case of views, it denotes the number of views. Required.'
  signature: 'code: _models.CodeableConcept'
- uid: azure.healthinsights.radiologyinsights.models.RadiologyCodeWithTypes.types
  name: types
  summary: 'The collection of types will indicate the contrast substance used in the
    case of contrast and,

    in the case of views, it will specify the types of views, such as lateral and
    frontal, etc.

    Required.'
  signature: 'types: List[_models.CodeableConcept]'
