### YamlMime:PythonClass
uid: azure.keyvault.secrets.aio.SecretClient
name: SecretClient
fullName: azure.keyvault.secrets.aio.SecretClient
module: azure.keyvault.secrets.aio
inheritances:
- azure.keyvault.secrets._shared.async_client_base.AsyncKeyVaultClientBase
summary: A high-level asynchronous interface for managing a vault's secrets.
constructor:
  syntax: 'SecretClient(vault_url: str, credential: AsyncTokenCredential, **kwargs)'
  parameters:
  - name: vault_url
    description: 'URL of the vault the client will access. This is also called the
      vault''s "DNS Name".

      You should validate that this URL references a valid Key Vault resource. See
      [https://aka.ms/azsdk/blog/vault-uri](https://aka.ms/azsdk/blog/vault-uri)

      for details.'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'An object which can provide an access token for the vault, such
      as a credential from

      <xref:azure.identity.aio>'
    isRequired: true
    types:
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
  - name: api_version
    description: Version of the service API to use. Defaults to the most recent.
    types:
    - <xref:azure.keyvault.secrets.ApiVersion>
  - name: verify_challenge_resource
    description: 'Whether to verify the authentication challenge resource matches
      the Key

      Vault domain. Defaults to True.'
    types:
    - <xref:bool>
examples:
- "Create a new `SecretClient`<!--[!code-python[Main](s\\test_samples_secrets_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\\
  51\\\\azure-keyvault-secrets-4.8.0b1\\\\tests\\\\test_samples_secrets_async.py\"\
  , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
  : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.identity.aio\
  \ import DefaultAzureCredential\n   from azure.keyvault.secrets.aio import SecretClient\n\
  \n   # Create a SecretClient using default Azure credentials\n   credential = DefaultAzureCredential()\n\
  \   secret_client = SecretClient(vault_url, credential)\n\n   # the client and credential\
  \ should be closed when no longer needed\n   # (both are also async context managers)\n\
  \   await secret_client.close()\n   await credential.close()\n\n   ````\n"
methods:
- uid: azure.keyvault.secrets.aio.SecretClient.backup_secret
  name: backup_secret
  summary: Back up a secret in a protected form useable only by Azure Key Vault. Requires
    secrets/backup permission.
  signature: 'async backup_secret(name: str, **kwargs) -> bytes'
  parameters:
  - name: name
    description: Name of the secret to back up
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:bytes>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the secret doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Back up a secret<!--[!code-python[Main](s\\test_samples_secrets_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\
    \\51\\\\azure-keyvault-secrets-4.8.0b1\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       # backup secret\n       secret_backup = await secret_client.backup_secret(secret_name)\n\
    \n       # returns the raw bytes of the backed up secret\n       print(secret_backup)\n\
    \n   ````\n"
- uid: azure.keyvault.secrets.aio.SecretClient.delete_secret
  name: delete_secret
  summary: 'Delete all versions of a secret. Requires secrets/delete permission.


    If the vault has soft-delete enabled, deletion may take several seconds to complete.'
  signature: 'async delete_secret(name: str, **kwargs) -> DeletedSecret'
  parameters:
  - name: name
    description: Name of the secret to delete.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.keyvault.secrets.DeletedSecret>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the secret doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Delete a secret<!--[!code-python[Main](s\\test_samples_secrets_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\
    \\51\\\\azure-keyvault-secrets-4.8.0b1\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       # delete a secret\n       deleted_secret = await secret_client.delete_secret(secret_name)\n\
    \n       print(deleted_secret.name)\n\n       # if the vault has soft-delete enabled,\
    \ the secret's deleted_date,\n       # scheduled purge date and recovery id are\
    \ set\n       print(deleted_secret.deleted_date)\n       print(deleted_secret.scheduled_purge_date)\n\
    \       print(deleted_secret.recovery_id)\n\n   ````\n"
- uid: azure.keyvault.secrets.aio.SecretClient.get_deleted_secret
  name: get_deleted_secret
  summary: Get a deleted secret. Possible only in vaults with soft-delete enabled.
    Requires secrets/get permission.
  signature: 'async get_deleted_secret(name: str, **kwargs) -> DeletedSecret'
  parameters:
  - name: name
    description: Name of the deleted secret
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.keyvault.secrets.DeletedSecret>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the deleted secret doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Get a deleted secret<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\51\\\\azure-keyvault-secrets-4.8.0b1\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       # gets a deleted secret (requires soft-delete enabled for the vault)\n\
    \       deleted_secret = await secret_client.get_deleted_secret(secret_name)\n\
    \       print(deleted_secret.name)\n\n   ````\n"
- uid: azure.keyvault.secrets.aio.SecretClient.get_secret
  name: get_secret
  summary: Get a secret. Requires the secrets/get permission.
  signature: 'async get_secret(name: str, version: str | None = None, **kwargs) ->
    KeyVaultSecret'
  parameters:
  - name: name
    description: The name of the secret
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: (optional) Version of the secret to get. If unspecified, gets the
      latest version.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.keyvault.secrets.KeyVaultSecret>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the secret doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Get a secret<!--[!code-python[Main](s\\test_samples_secrets_async.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\
    \\51\\\\azure-keyvault-secrets-4.8.0b1\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       # get the latest version of a secret\n       secret = await secret_client.get_secret(secret_name)\n\
    \n       # alternatively, specify a version\n       secret = await secret_client.get_secret(secret_name,\
    \ secret_version)\n\n       print(secret.id)\n       print(secret.name)\n    \
    \   print(secret.properties.version)\n       print(secret.properties.vault_url)\n\
    \n   ````\n"
- uid: azure.keyvault.secrets.aio.SecretClient.list_deleted_secrets
  name: list_deleted_secrets
  summary: 'Lists all deleted secrets. Possible only in vaults with soft-delete enabled.


    Requires secrets/list permission.'
  signature: list_deleted_secrets(**kwargs) -> AsyncItemPaged[DeletedSecret]
  return:
    description: An iterator of deleted secrets, excluding their values
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.keyvault.secrets.DeletedSecret>]
  examples:
  - "Lists deleted secrets<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\51\\\\azure-keyvault-secrets-4.8.0b1\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       # gets a list of deleted secrets (requires soft-delete enabled for the\
    \ vault)\n       deleted_secrets = secret_client.list_deleted_secrets()\n\n  \
    \     async for secret in deleted_secrets:\n           # the list doesn't include\
    \ values or versions of the deleted secrets\n           print(secret.id)\n   \
    \        print(secret.name)\n           print(secret.scheduled_purge_date)\n \
    \          print(secret.recovery_id)\n           print(secret.deleted_date)\n\n\
    \   ````\n"
- uid: azure.keyvault.secrets.aio.SecretClient.list_properties_of_secret_versions
  name: list_properties_of_secret_versions
  summary: 'List properties of all versions of a secret, excluding their values. Requires
    secrets/list permission.


    List items don''t include secret values. Use <xref:azure.keyvault.secrets.aio.SecretClient.get_secret>
    to get a secret''s value.'
  signature: 'list_properties_of_secret_versions(name: str, **kwargs) -> AsyncItemPaged[SecretProperties]'
  parameters:
  - name: name
    description: Name of the secret
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterator of secrets, excluding their values
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.keyvault.secrets.SecretProperties>]
  examples:
  - "List all versions of a secret<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\51\\\\azure-keyvault-secrets-4.8.0b1\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       # gets a list of all versions of a secret\n       secret_versions = secret_client.list_properties_of_secret_versions(\"\
    secret-name\")\n\n       async for secret in secret_versions:\n           # the\
    \ list doesn't include the versions' values\n           print(secret.id)\n   \
    \        print(secret.enabled)\n           print(secret.updated_on)\n\n   ````\n"
- uid: azure.keyvault.secrets.aio.SecretClient.list_properties_of_secrets
  name: list_properties_of_secrets
  summary: 'List identifiers and attributes of all secrets in the vault. Requires
    secrets/list permission.


    List items don''t include secret values. Use <xref:azure.keyvault.secrets.aio.SecretClient.get_secret>
    to get a secret''s value.'
  signature: list_properties_of_secrets(**kwargs) -> AsyncItemPaged[SecretProperties]
  return:
    description: An iterator of secrets
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.keyvault.secrets.SecretProperties>]
  examples:
  - "Lists all secrets<!--[!code-python[Main](s\\test_samples_secrets_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\
    \\51\\\\azure-keyvault-secrets-4.8.0b1\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       # gets a list of secrets in the vault\n       secrets = secret_client.list_properties_of_secrets()\n\
    \n       async for secret in secrets:\n           # the list doesn't include values\
    \ or versions of the secrets\n           print(secret.id)\n           print(secret.name)\n\
    \           print(secret.enabled)\n\n   ````\n"
- uid: azure.keyvault.secrets.aio.SecretClient.purge_deleted_secret
  name: purge_deleted_secret
  summary: 'Permanently delete a deleted secret. Possible only in vaults with soft-delete
    enabled.


    Performs an irreversible deletion of the specified secret, without possibility
    for recovery. The operation is

    not available if the <xref:azure.keyvault.secrets.SecretProperties.recovery_level>
    does not specify

    ''Purgeable''. This method is only necessary for purging a secret before its

    <xref:azure.keyvault.secrets.DeletedSecret.scheduled_purge_date>.


    Requires secrets/purge permission.'
  signature: 'async purge_deleted_secret(name: str, **kwargs) -> None'
  parameters:
  - name: name
    description: Name of the deleted secret to purge
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
    \   # if the vault has soft-delete enabled, purge permanently deletes the secret\n\
    \   # (with soft-delete disabled, delete_secret is permanent)\n   await secret_client.purge_deleted_secret(\"\
    secret-name\")\n   ````\n"
- uid: azure.keyvault.secrets.aio.SecretClient.recover_deleted_secret
  name: recover_deleted_secret
  summary: 'Recover a deleted secret to its latest version. This is possible only
    in vaults with soft-delete enabled.


    Requires the secrets/recover permission. If the vault does not have soft-delete
    enabled, <xref:azure.keyvault.secrets.aio.SecretClient.delete_secret>

    is permanent, and this method will raise an error. Attempting to recover a non-deleted
    secret will also raise an

    error.'
  signature: 'async recover_deleted_secret(name: str, **kwargs) -> SecretProperties'
  parameters:
  - name: name
    description: Name of the deleted secret to recover
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.keyvault.secrets.SecretProperties>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Recover a deleted secret<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\51\\\\azure-keyvault-secrets-4.8.0b1\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       # recover deleted secret to the latest version\n       recovered_secret\
    \ = await secret_client.recover_deleted_secret(secret_name)\n       print(recovered_secret.id)\n\
    \       print(recovered_secret.name)\n\n   ````\n"
- uid: azure.keyvault.secrets.aio.SecretClient.restore_secret_backup
  name: restore_secret_backup
  summary: Restore a backed up secret. Requires the secrets/restore permission.
  signature: 'async restore_secret_backup(backup: bytes, **kwargs) -> SecretProperties'
  parameters:
  - name: backup
    description: A secret backup as returned by <xref:azure.keyvault.secrets.aio.SecretClient.backup_secret>
    isRequired: true
    types:
    - <xref:bytes>
  return:
    description: The restored secret
    types:
    - <xref:azure.keyvault.secrets.SecretProperties>
  exceptions:
  - type: azure.core.exceptions.ResourceExistsError
    description: if the secret's name is already in use,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Restore a backed up secret<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\51\\\\azure-keyvault-secrets-4.8.0b1\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       # restores a backed up secret\n       restored_secret = await secret_client.restore_secret_backup(secret_backup)\n\
    \       print(restored_secret.id)\n       print(restored_secret.version)\n\n \
    \  ````\n"
- uid: azure.keyvault.secrets.aio.SecretClient.set_secret
  name: set_secret
  summary: 'Set a secret value. If *name* is in use, create a new version of the secret.
    If not, create a new secret.


    Requires secrets/set permission.'
  signature: 'async set_secret(name: str, value: str, **kwargs) -> KeyVaultSecret'
  parameters:
  - name: name
    description: The name of the secret
    isRequired: true
    types:
    - <xref:str>
  - name: value
    description: The value of the secret
    isRequired: true
    types:
    - <xref:str>
  - name: enabled
    description: Whether the secret is enabled for use.
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:Dict>[<xref:str>, <xref:str>]
    - <xref:None>
  - name: content_type
    description: An arbitrary string indicating the type of the secret, e.g. 'password'
    types:
    - <xref:str>
  - name: not_before
    description: Not before date of the secret in UTC
    types:
    - <xref:datetime.datetime>
  - name: expires_on
    description: Expiry date of the secret in UTC
    types:
    - <xref:datetime.datetime>
  return:
    types:
    - <xref:azure.keyvault.secrets.KeyVaultSecret>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Set a secret's value<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\51\\\\azure-keyvault-secrets-4.8.0b1\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from dateutil import parser as date_parse\n\n   expires_on = date_parse.parse(\"\
    2050-02-02T08:00:00.000Z\")\n   async with secret_client:\n       # create a secret,\
    \ setting optional arguments\n       secret = await secret_client.set_secret(secret_name,\
    \ \"secret-value\", enabled=True, expires_on=expires_on)\n\n       print(secret.id)\n\
    \       print(secret.name)\n       print(secret.properties.enabled)\n       print(secret.properties.expires_on)\n\
    \n   ````\n"
- uid: azure.keyvault.secrets.aio.SecretClient.update_secret_properties
  name: update_secret_properties
  summary: 'Update properties of a secret other than its value. Requires secrets/set
    permission.


    This method updates properties of the secret, such as whether it''s enabled, but
    can''t change the secret''s

    value. Use <xref:azure.keyvault.secrets.aio.SecretClient.set_secret> to change
    the secret''s value.'
  signature: 'async update_secret_properties(name: str, version: str | None = None,
    **kwargs) -> SecretProperties'
  parameters:
  - name: name
    description: Name of the secret
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: (optional) Version of the secret to update. If unspecified, the latest
      version is updated.
    isRequired: true
    types:
    - <xref:str>
  - name: enabled
    description: Whether the secret is enabled for use.
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:Dict>[<xref:str>, <xref:str>]
    - <xref:None>
  - name: content_type
    description: An arbitrary string indicating the type of the secret, e.g. 'password'
    types:
    - <xref:str>
  - name: not_before
    description: Not before date of the secret in UTC
    types:
    - <xref:datetime.datetime>
  - name: expires_on
    description: Expiry date of the secret in UTC
    types:
    - <xref:datetime.datetime>
  return:
    types:
    - <xref:azure.keyvault.secrets.SecretProperties>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
    description: if the secret doesn't exist,
  - type: azure.core.exceptions.HttpResponseError
    description: for other errors
  examples:
  - "Updates a secret's attributes<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\51\\\\azure-keyvault-secrets-4.8.0b1\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       # update attributes of an existing secret\n       content_type = \"text/plain\"\
    \n       tags = {\"foo\": \"updated tag\"}\n       updated_secret_properties =\
    \ await secret_client.update_secret_properties(\n           secret_name, content_type=content_type,\
    \ tags=tags\n       )\n\n       print(updated_secret_properties.version)\n   \
    \    print(updated_secret_properties.updated_on)\n       print(updated_secret_properties.content_type)\n\
    \       print(updated_secret_properties.tags)\n\n   ````\n"
