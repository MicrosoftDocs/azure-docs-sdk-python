### YamlMime:PythonClass
uid: azure.ai.textanalytics.aio.TextAnalyticsClient
name: TextAnalyticsClient
fullName: azure.ai.textanalytics.aio.TextAnalyticsClient
module: azure.ai.textanalytics.aio
inheritances:
- azure.ai.textanalytics.aio._base_client_async.AsyncTextAnalyticsClientBase
summary: 'The Text Analytics API is a suite of text analytics web services built with
  best-in-class

  Microsoft machine learning algorithms. The API can be used to analyze unstructured
  text for

  tasks such as sentiment analysis, key phrase extraction, entities recognition,

  and language detection. No training data is needed to use this API - just bring
  your text data.

  This API uses advanced natural language processing techniques to deliver best in
  class predictions.


  Further documentation can be found in

  [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview)'
constructor:
  syntax: 'TextAnalyticsClient(endpoint: str, credential: Union[AzureKeyCredential,
    AsyncTokenCredential], **kwargs: Any) -> None'
  parameters:
  - name: endpoint
    description: 'Supported Cognitive Services or Text Analytics resource

      endpoints (protocol and hostname, for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'Credentials needed for the client to connect to Azure.

      This can be the an instance of AzureKeyCredential if using a

      cognitive services/text analytics API key or a token credential

      from <xref:azure.identity>.'
    isRequired: true
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
  - name: default_country_hint
    description: 'Sets the default country_hint to use for all operations.

      Defaults to "US". If you don''t want to use a country hint, pass the string
      "none".'
    types:
    - <xref:str>
  - name: default_language
    description: 'Sets the default language to use for all operations.

      Defaults to "en".'
    types:
    - <xref:str>
  - name: api_version
    description: 'The API version of the service to use for requests. It defaults
      to the

      latest service version. Setting to an older version may result in reduced feature
      compatibility.'
    types:
    - <xref:str>
    - <xref:azure.ai.textanalytics.TextAnalyticsApiVersion>
examples:
- "Creating the TextAnalyticsClient with endpoint and API key.<!--[!code-python[Main](les\\\
  async_samples\\sample_authentication_async.py )]-->\n\n<!-- literal_block {\"ids\"\
  : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\68\\\\azure-ai-textanalytics-5.2.0b1\\\\samples\\\
  \\async_samples\\\\sample_authentication_async.py\", \"xml:space\": \"preserve\"\
  , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials import\
  \ AzureKeyCredential\n   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\
  \   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
  AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint,\
  \ AzureKeyCredential(key))\n\n   ````\n\nCreating the TextAnalyticsClient with endpoint\
  \ and token credential from Azure Active Directory.<!--[!code-python[Main](les\\\
  async_samples\\sample_authentication_async.py )]-->\n\n<!-- literal_block {\"ids\"\
  : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\68\\\\azure-ai-textanalytics-5.2.0b1\\\\samples\\\
  \\async_samples\\\\sample_authentication_async.py\", \"xml:space\": \"preserve\"\
  , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.textanalytics.aio\
  \ import TextAnalyticsClient\n   from azure.identity.aio import DefaultAzureCredential\n\
  \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   credential = DefaultAzureCredential()\n\
  \n   text_analytics_client = TextAnalyticsClient(endpoint, credential=credential)\n\
  \n   ````\n"
methods:
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.analyze_sentiment
  name: analyze_sentiment
  summary: 'Analyze sentiment for a batch of documents. Turn on opinion mining with
    *show_opinion_mining*.


    Returns a sentiment prediction, as well as sentiment scores for

    each sentiment class (Positive, Negative, and Neutral) for the document

    and each sentence within it.


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/concepts/data-limits?tabs=version-3](https://docs.microsoft.com/azure/cognitive-services/text-analytics/concepts/data-limits?tabs=version-3)

    for document length limits, maximum batch size, and supported text encoding.


    New in version v3.1: The *show_opinion_mining*, *disable_service_logs*, and *string_index_type*
    keyword arguments.'
  signature: 'analyze_sentiment(documents: Union[List[str], List[azure.ai.textanalytics._models.TextDocumentInput],
    List[Dict[str, str]]], **kwargs: Any) -> List[Union[azure.ai.textanalytics._models.AnalyzeSentimentResult,
    azure.ai.textanalytics._models.DocumentError]]'
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and language on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a list
      of

      dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

      *{"id": "1", "language": "en", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.TextDocumentInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: show_opinion_mining
    description: 'Whether to mine the opinions of a sentence and conduct more

      granular analysis around the aspects of a product or service (also known as

      aspect-based sentiment analysis). If set to true, the returned

      <xref:azure.ai.textanalytics.SentenceSentiment> objects

      will have property *mined_opinions* containing the result of this analysis.
      Only available for

      API version v3.1 and up.'
    types:
    - <xref:bool>
  - name: language
    description: 'The 2 letter ISO 639-1 representation of language for the

      entire batch. For example, use "en" for English; "es" for Spanish etc.

      If not set, uses "en" for English as default. Per-document language will

      take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
      for

      supported languages in Text Analytics API.'
    types:
    - <xref:str>
  - name: model_version
    description: 'This value indicates which model will

      be used for scoring, e.g. "latest", "2019-10-01". If a model-version

      is not specified, the API will default to the latest, non-preview version.

      See here for more info: [https://aka.ms/text-analytics-model-versioning](https://aka.ms/text-analytics-model-versioning)'
    types:
    - <xref:str>
  - name: show_stats
    description: 'If set to true, response will contain document

      level statistics in the *statistics* field of the document-level response.'
    types:
    - <xref:bool>
  - name: string_index_type
    description: 'Specifies the method used to interpret string offsets.

      *UnicodeCodePoint*, the Python encoding, is the default. To override the Python
      default,

      you can also pass in *Utf16CodePoint* or *TextElement_v8*. For additional information

      see [https://aka.ms/text-analytics-offsets](https://aka.ms/text-analytics-offsets)'
    types:
    - <xref:str>
  - name: disable_service_logs
    description: 'If set to true, you opt-out of having your text input

      logged on the service side for troubleshooting. By default, Text Analytics logs
      your

      input text for 48 hours, solely to allow for troubleshooting issues in providing
      you with

      the Text Analytics natural language processing functions. Setting this parameter
      to true,

      disables input logging and may limit our ability to remediate issues that occur.
      Please see

      Cognitive Services Compliance and Privacy notes at [https://aka.ms/cs-compliance](https://aka.ms/cs-compliance)
      for

      additional details, and Microsoft Responsible AI principles at

      [https://www.microsoft.com/ai/responsible-ai](https://www.microsoft.com/ai/responsible-ai).'
    types:
    - <xref:bool>
  return:
    description: 'The combined list of <xref:azure.ai.textanalytics.AnalyzeSentimentResult>
      and

      <xref:azure.ai.textanalytics.DocumentError> in the order the original documents
      were

      passed in.'
    types:
    - <xref:list>[<xref:azure.ai.textanalytics.AnalyzeSentimentResult,azure.ai.textanalytics.DocumentError>]
  exceptions:
  - description: ''
    type: azure.core.exceptions.HttpResponseError or TypeError or ValueError
  examples:
  - "Analyze sentiment in a batch of documents.<!--[!code-python[Main](les\\async_samples\\\
    sample_analyze_sentiment_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\68\\\\azure-ai-textanalytics-5.2.0b1\\\\\
    samples\\\\async_samples\\\\sample_analyze_sentiment_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n\n   documents = [\n       \"\"\"I had\
    \ the best day of my life. I decided to go sky-diving and it made me appreciate\
    \ my whole life so much more.\n       I developed a deep-connection with my instructor\
    \ as well, and I feel as if I've made a life-long friend in her.\"\"\",\n    \
    \   \"\"\"This was a waste of my time. All of the views on this drop are extremely\
    \ boring, all I saw was grass. 0/10 would\n       not recommend to any divers,\
    \ even first timers.\"\"\",\n       \"\"\"This was pretty good! The sights were\
    \ ok, and I had fun with my instructors! Can't complain too much about my experience\"\
    \"\",\n       \"\"\"I only have one word for my experience: WOW!!! I can't believe\
    \ I have had such a wonderful skydiving company right\n       in my backyard this\
    \ whole time! I will definitely be a repeat customer, and I want to take my grandmother\
    \ skydiving too,\n       I know she'll love it!\"\"\"\n   ]\n\n   async with text_analytics_client:\n\
    \       result = await text_analytics_client.analyze_sentiment(documents)\n\n\
    \   docs = [doc for doc in result if not doc.is_error]\n\n   print(\"Let's visualize\
    \ the sentiment of each of these documents\")\n   for idx, doc in enumerate(docs):\n\
    \       print(\"Document text: {}\".format(documents[idx]))\n       print(\"Overall\
    \ sentiment: {}\".format(doc.sentiment))\n\n   ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.begin_analyze_actions
  name: begin_analyze_actions
  summary: 'Start a long-running operation to perform a variety of text analysis actions
    over a batch of documents.


    We recommend you use this function if you''re looking to analyze larger documents,
    and / or

    combine multiple Text Analytics actions into one call. Otherwise, we recommend
    you use

    the action specific endpoints, for example <xref:azure.ai.textanalytics.aio.TextAnalyticsClient.analyze_sentiment>.


    New in version v3.1: The *begin_analyze_actions* client method.


    New in version v3.2-preview: The *ExtractSummaryAction* input option and *ExtractSummaryResult*
    result object'
  signature: 'begin_analyze_actions(documents: Union[List[str], List[azure.ai.textanalytics._models.TextDocumentInput],
    List[Dict[str, str]]], actions: List[Union[azure.ai.textanalytics._models.RecognizeEntitiesAction,
    azure.ai.textanalytics._models.RecognizeLinkedEntitiesAction, azure.ai.textanalytics._models.RecognizePiiEntitiesAction,
    azure.ai.textanalytics._models.ExtractKeyPhrasesAction, azure.ai.textanalytics._models.AnalyzeSentimentAction,
    azure.ai.textanalytics._models.ExtractSummaryAction]], **kwargs: Any) -> azure.ai.textanalytics.aio._lro_async.AsyncAnalyzeActionsLROPoller[azure.core.async_paging.AsyncItemPaged[List[Union[azure.ai.textanalytics._models.RecognizeEntitiesResult,
    azure.ai.textanalytics._models.RecognizeLinkedEntitiesResult, azure.ai.textanalytics._models.RecognizePiiEntitiesResult,
    azure.ai.textanalytics._models.ExtractKeyPhrasesResult, azure.ai.textanalytics._models.AnalyzeSentimentResult,
    azure.ai.textanalytics._models.ExtractSummaryResult, azure.ai.textanalytics._models.DocumentError]]]]'
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and language on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a list
      of

      dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

      *{"id": "1", "language": "en", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.TextDocumentInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: actions
    description: 'A heterogeneous list of actions to perform on the input documents.

      Each action object encapsulates the parameters used for the particular action
      type.

      The action results will be in the same order of the input actions.

      Duplicate actions in list not supported.'
    isRequired: true
    types:
    - <xref:list>[<xref:azure.ai.textanalytics.RecognizeEntitiesAction>
    - <xref:azure.ai.textanalytics.RecognizePiiEntitiesAction>
    - <xref:azure.ai.textanalytics.ExtractKeyPhrasesAction>
    - <xref:azure.ai.textanalytics.RecognizeLinkedEntitiesAction>
    - <xref:azure.ai.textanalytics.AnalyzeSentimentAction>,
    - <xref:azure.ai.textanalytics.ExtractSummaryAction>]
  - name: display_name
    description: An optional display name to set for the requested analysis.
    types:
    - <xref:str>
  - name: language
    description: 'The 2 letter ISO 639-1 representation of language for the

      entire batch. For example, use "en" for English; "es" for Spanish etc.

      If not set, uses "en" for English as default. Per-document language will

      take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
      for

      supported languages in Text Analytics API.'
    types:
    - <xref:str>
  - name: show_stats
    description: If set to true, response will contain document level statistics.
    types:
    - <xref:bool>
  - name: polling_interval
    description: 'Waiting time between two polls for LRO operations

      if no Retry-After header is present. Defaults to 5 seconds.'
    types:
    - <xref:int>
  return:
    description: 'An instance of an AsyncAnalyzeActionsLROPoller. Call *result()*
      on the poller

      object to return a pageable heterogeneous list of lists. This list of lists
      is first ordered

      by the documents you input, then ordered by the actions you input. For example,

      if you have documents input ["Hello", "world"], and actions

      <xref:azure.ai.textanalytics.RecognizeEntitiesAction> and

      <xref:azure.ai.textanalytics.AnalyzeSentimentAction>, when iterating over the
      list of lists,

      you will first iterate over the action results for the "Hello" document, getting
      the

      <xref:azure.ai.textanalytics.RecognizeEntitiesResult> of "Hello",

      then the <xref:azure.ai.textanalytics.AnalyzeSentimentResult> of "Hello".

      Then, you will get the <xref:azure.ai.textanalytics.RecognizeEntitiesResult>
      and

      <xref:azure.ai.textanalytics.AnalyzeSentimentResult> of "world".'
    types:
    - <xref:azure.ai.textanalytics.aio.AsyncAnalyzeActionsLROPoller>[<xref:azure.core.async_paging.AsyncItemPaged>[<xref:list>[<xref:Union>[<xref:azure.ai.textanalytics.RecognizeEntitiesResult>,
      <xref:azure.ai.textanalytics.RecognizeLinkedEntitiesResult>, <xref:azure.ai.textanalytics.RecognizePiiEntitiesResult,azure.ai.textanalytics.ExtractKeyPhrasesResult>,
      <xref:azure.ai.textanalytics.AnalyzeSentimentResult>, <xref:azure.ai.textanalytics.ExtractSummaryResult>,
      <xref:azure.ai.textanalytics.DocumentError>]]]]
  exceptions:
  - description: ''
    type: azure.core.exceptions.HttpResponseError or TypeError or ValueError or NotImplementedError
  examples:
  - "Start a long-running operation to perform a variety of text analysis actions\
    \ over\na batch of documents.<!--[!code-python[Main](les\\async_samples\\sample_analyze_actions_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\68\\\\azure-ai-textanalytics-5.2.0b1\\\\samples\\\\async_samples\\\\sample_analyze_actions_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.core.credentials import AzureKeyCredential\n   from azure.ai.textanalytics.aio\
    \ import TextAnalyticsClient\n   from azure.ai.textanalytics import (\n      \
    \ RecognizeEntitiesAction,\n       RecognizeLinkedEntitiesAction,\n       RecognizePiiEntitiesAction,\n\
    \       ExtractKeyPhrasesAction,\n       AnalyzeSentimentAction,\n   )\n\n   endpoint\
    \ = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"AZURE_TEXT_ANALYTICS_KEY\"\
    ]\n\n   text_analytics_client = TextAnalyticsClient(\n       endpoint=endpoint,\n\
    \       credential=AzureKeyCredential(key),\n   )\n\n   documents = [\n      \
    \ 'We went to Contoso Steakhouse located at midtown NYC last week for a dinner\
    \ party, and we adore the spot! '\n       'They provide marvelous food and they\
    \ have a great menu. The chief cook happens to be the owner (I think his name\
    \ is John Doe) '\n       'and he is super nice, coming out of the kitchen and\
    \ greeted us all.'\n       ,\n\n       'We enjoyed very much dining in the place!\
    \ '\n       'The Sirloin steak I ordered was tender and juicy, and the place was\
    \ impeccably clean. You can even pre-order from their '\n       'online menu at\
    \ www.contososteakhouse.com, call 312-555-0176 or send email to order@contososteakhouse.com!\
    \ '\n       'The only complaint I have is the food didn\\'t come fast enough.\
    \ Overall I highly recommend it!'\n   ]\n\n   async with text_analytics_client:\n\
    \       poller = await text_analytics_client.begin_analyze_actions(\n        \
    \   documents,\n           display_name=\"Sample Text Analysis\",\n          \
    \ actions=[\n               RecognizeEntitiesAction(),\n               RecognizePiiEntitiesAction(),\n\
    \               ExtractKeyPhrasesAction(),\n               RecognizeLinkedEntitiesAction(),\n\
    \               AnalyzeSentimentAction(),\n           ]\n       )\n\n       pages\
    \ = await poller.result()\n\n       # To enumerate / zip for async, unless you\
    \ install a third party library,\n       # you have to read in all of the elements\
    \ into memory first.\n       # If you're not looking to enumerate / zip, we recommend\
    \ you just asynchronously\n       # loop over it immediately, without going through\
    \ this step of reading them into memory\n       document_results = []\n      \
    \ async for page in pages:\n           document_results.append(page)\n\n     \
    \  for doc, action_results in zip(documents, document_results):\n           print(\"\
    \\nDocument text: {}\".format(doc))\n           recognize_entities_result = action_results[0]\n\
    \           print(\"...Results of Recognize Entities Action:\")\n           if\
    \ recognize_entities_result.is_error:\n               print(\"...Is an error with\
    \ code '{}' and message '{}'\".format(\n                   recognize_entities_result.code,\
    \ recognize_entities_result.message\n               ))\n           else:\n   \
    \            for entity in recognize_entities_result.entities:\n             \
    \      print(\"......Entity: {}\".format(entity.text))\n                   print(\"\
    .........Category: {}\".format(entity.category))\n                   print(\"\
    .........Confidence Score: {}\".format(entity.confidence_score))\n           \
    \        print(\".........Offset: {}\".format(entity.offset))\n\n           recognize_pii_entities_result\
    \ = action_results[1]\n           print(\"...Results of Recognize PII Entities\
    \ action:\")\n           if recognize_pii_entities_result.is_error:\n        \
    \       print(\"...Is an error with code '{}' and message '{}'\".format(\n   \
    \                recognize_pii_entities_result.code, recognize_pii_entities_result.message\n\
    \               ))\n           else:\n               for entity in recognize_pii_entities_result.entities:\n\
    \                   print(\"......Entity: {}\".format(entity.text))\n        \
    \           print(\".........Category: {}\".format(entity.category))\n       \
    \            print(\".........Confidence Score: {}\".format(entity.confidence_score))\n\
    \n           extract_key_phrases_result = action_results[2]\n           print(\"\
    ...Results of Extract Key Phrases action:\")\n           if extract_key_phrases_result.is_error:\n\
    \               print(\"...Is an error with code '{}' and message '{}'\".format(\n\
    \                   extract_key_phrases_result.code, extract_key_phrases_result.message\n\
    \               ))\n           else:\n               print(\"......Key Phrases:\
    \ {}\".format(extract_key_phrases_result.key_phrases))\n\n           recognize_linked_entities_result\
    \ = action_results[3]\n           print(\"...Results of Recognize Linked Entities\
    \ action:\")\n           if recognize_linked_entities_result.is_error:\n     \
    \          print(\"...Is an error with code '{}' and message '{}'\".format(\n\
    \                   recognize_linked_entities_result.code, recognize_linked_entities_result.message\n\
    \               ))\n           else:\n               for linked_entity in recognize_linked_entities_result.entities:\n\
    \                   print(\"......Entity name: {}\".format(linked_entity.name))\n\
    \                   print(\".........Data source: {}\".format(linked_entity.data_source))\n\
    \                   print(\".........Data source language: {}\".format(linked_entity.language))\n\
    \                   print(\".........Data source entity ID: {}\".format(linked_entity.data_source_entity_id))\n\
    \                   print(\".........Data source URL: {}\".format(linked_entity.url))\n\
    \                   print(\".........Document matches:\")\n                  \
    \ for match in linked_entity.matches:\n                       print(\"............Match\
    \ text: {}\".format(match.text))\n                       print(\"............Confidence\
    \ Score: {}\".format(match.confidence_score))\n                       print(\"\
    ............Offset: {}\".format(match.offset))\n                       print(\"\
    ............Length: {}\".format(match.length))\n\n           analyze_sentiment_result\
    \ = action_results[4]\n           print(\"...Results of Analyze Sentiment action:\"\
    )\n           if analyze_sentiment_result.is_error:\n               print(\"...Is\
    \ an error with code '{}' and message '{}'\".format(\n                   analyze_sentiment_result.code,\
    \ analyze_sentiment_result.message\n               ))\n           else:\n    \
    \           print(\"......Overall sentiment: {}\".format(analyze_sentiment_result.sentiment))\n\
    \               print(\"......Scores: positive={}; neutral={}; negative={} \\\
    n\".format(\n                   analyze_sentiment_result.confidence_scores.positive,\n\
    \                   analyze_sentiment_result.confidence_scores.neutral,\n    \
    \               analyze_sentiment_result.confidence_scores.negative,\n       \
    \        ))\n           print(\"------------------------------------------\")\n\
    \n   ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.begin_analyze_healthcare_entities
  name: begin_analyze_healthcare_entities
  summary: 'Analyze healthcare entities and identify relationships between these entities
    in a batch of documents.


    Entities are associated with references that can be found in existing knowledge
    bases,

    such as UMLS, CHV, MSH, etc.


    We also extract the relations found between entities, for example in "The subject
    took 100 mg of ibuprofen",

    we would extract the relationship between the "100 mg" dosage and the "ibuprofen"
    medication.


    New in version v3.1: The *begin_analyze_healthcare_entities* client method.'
  signature: 'begin_analyze_healthcare_entities(documents: Union[List[str], List[azure.ai.textanalytics._models.TextDocumentInput],
    List[Dict[str, str]]], **kwargs: Any) -> azure.ai.textanalytics.aio._lro_async.AsyncAnalyzeHealthcareEntitiesLROPoller[azure.core.async_paging.AsyncItemPaged[Union[azure.ai.textanalytics._models.AnalyzeHealthcareEntitiesResult,
    azure.ai.textanalytics._models.DocumentError]]]'
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and language on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a list
      of

      dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

      *{"id": "1", "language": "en", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.TextDocumentInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: model_version
    description: 'This value indicates which model will

      be used for scoring, e.g. "latest", "2019-10-01". If a model-version

      is not specified, the API will default to the latest, non-preview version.

      See here for more info: [https://aka.ms/text-analytics-model-versioning](https://aka.ms/text-analytics-model-versioning)'
    types:
    - <xref:str>
  - name: show_stats
    description: If set to true, response will contain document level statistics.
    types:
    - <xref:bool>
  - name: string_index_type
    description: 'Specifies the method used to interpret string offsets.

      Can be one of ''UnicodeCodePoint'' (default), ''Utf16CodePoint'', or ''TextElement_v8''.

      For additional information see [https://aka.ms/text-analytics-offsets](https://aka.ms/text-analytics-offsets)'
    types:
    - <xref:str>
  - name: polling_interval
    description: 'Waiting time between two polls for LRO operations

      if no Retry-After header is present. Defaults to 5 seconds.'
    types:
    - <xref:int>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  - name: disable_service_logs
    description: 'Defaults to true, meaning that Text Analytics will not log your

      input text on the service side for troubleshooting. If set to False, Text Analytics
      logs your

      input text for 48 hours, solely to allow for troubleshooting issues in providing
      you with

      the Text Analytics natural language processing functions. Please see

      Cognitive Services Compliance and Privacy notes at [https://aka.ms/cs-compliance](https://aka.ms/cs-compliance)
      for

      additional details, and Microsoft Responsible AI principles at

      [https://www.microsoft.com/ai/responsible-ai](https://www.microsoft.com/ai/responsible-ai).'
    types:
    - <xref:bool>
  return:
    description: 'An instance of an AsyncAnalyzeHealthcareEntitiesLROPoller. Call
      *result()* on the poller

      object to return a heterogeneous pageable of

      <xref:azure.ai.textanalytics.AnalyzeHealthcareEntitiesResult> and

      <xref:azure.ai.textanalytics.DocumentError>.'
    types:
    - <xref:azure.ai.textanalytics.aio.AsyncAnalyzeHealthcareEntitiesLROPoller>[<xref:azure.core.paging.AsyncItemPaged>[<xref:Union>[<xref:azure.ai.textanalytics.AnalyzeHealthcareEntitiesResult>,
      <xref:azure.ai.textanalytics.DocumentError>]]]
  exceptions:
  - description: ''
    type: azure.core.exceptions.HttpResponseError or TypeError or ValueError or NotImplementedError
  examples:
  - "Analyze healthcare entities in a batch of documents.<!--[!code-python[Main](les\\\
    async_samples\\sample_analyze_healthcare_entities_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\68\\\\azure-ai-textanalytics-5.2.0b1\\\
    \\samples\\\\async_samples\\\\sample_analyze_healthcare_entities_async.py\", \"\
    xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   import os\n\
    \   from azure.core.credentials import AzureKeyCredential\n   from azure.ai.textanalytics\
    \ import HealthcareEntityRelation\n   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(\n\
    \       endpoint=endpoint,\n       credential=AzureKeyCredential(key),\n   )\n\
    \n   documents = [\n       \"\"\"\n       Patient needs to take 100 mg of ibuprofen,\
    \ and 3 mg of potassium. Also needs to take\n       10 mg of Zocor.\n       \"\
    \"\",\n       \"\"\"\n       Patient needs to take 50 mg of ibuprofen, and 2 mg\
    \ of Coumadin.\n       \"\"\"\n   ]\n\n   async with text_analytics_client:\n\
    \       poller = await text_analytics_client.begin_analyze_healthcare_entities(documents)\n\
    \       result = await poller.result()\n       docs = [doc async for doc in result\
    \ if not doc.is_error]\n\n   print(\"Let's first visualize the outputted healthcare\
    \ result:\")\n   for idx, doc in enumerate(docs):\n       for entity in doc.entities:\n\
    \           print(\"Entity: {}\".format(entity.text))\n           print(\"...Normalized\
    \ Text: {}\".format(entity.normalized_text))\n           print(\"...Category:\
    \ {}\".format(entity.category))\n           print(\"...Subcategory: {}\".format(entity.subcategory))\n\
    \           print(\"...Offset: {}\".format(entity.offset))\n           print(\"\
    ...Confidence score: {}\".format(entity.confidence_score))\n           if entity.data_sources\
    \ is not None:\n               print(\"...Data Sources:\")\n               for\
    \ data_source in entity.data_sources:\n                   print(\"......Entity\
    \ ID: {}\".format(data_source.entity_id))\n                   print(\"......Name:\
    \ {}\".format(data_source.name))\n           if entity.assertion is not None:\n\
    \               print(\"...Assertion:\")\n               print(\"......Conditionality:\
    \ {}\".format(entity.assertion.conditionality))\n               print(\"......Certainty:\
    \ {}\".format(entity.assertion.certainty))\n               print(\"......Association:\
    \ {}\".format(entity.assertion.association))\n       for relation in doc.entity_relations:\n\
    \           print(\"Relation of type: {} has the following roles\".format(relation.relation_type))\n\
    \           for role in relation.roles:\n               print(\"...Role '{}' with\
    \ entity '{}'\".format(role.name, role.entity.text))\n       print(\"------------------------------------------\"\
    )\n\n   print(\"Now, let's get all of medication dosage relations from the documents\"\
    )\n   dosage_of_medication_relations = [\n       entity_relation\n       for doc\
    \ in docs\n       for entity_relation in doc.entity_relations if entity_relation.relation_type\
    \ == HealthcareEntityRelation.DOSAGE_OF_MEDICATION\n   ]\n\n   ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.detect_language
  name: detect_language
  summary: 'Detect language for a batch of documents.


    Returns the detected language and a numeric score between zero and

    one. Scores close to one indicate 100% certainty that the identified

    language is true. See [https://aka.ms/talangs](https://aka.ms/talangs) for the
    list of enabled languages.


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/concepts/data-limits?tabs=version-3](https://docs.microsoft.com/azure/cognitive-services/text-analytics/concepts/data-limits?tabs=version-3)

    for document length limits, maximum batch size, and supported text encoding.


    New in version v3.1: The *disable_service_logs* keyword argument.'
  signature: 'detect_language(documents: Union[List[str], List[azure.ai.textanalytics._models.DetectLanguageInput],
    List[Dict[str, str]]], **kwargs: Any) -> List[Union[azure.ai.textanalytics._models.DetectLanguageResult,
    azure.ai.textanalytics._models.DocumentError]]'
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and country_hint on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.DetectLanguageInput>] or a
      list of

      dict representations of <xref:azure.ai.textanalytics.DetectLanguageInput>, like

      *{"id": "1", "country_hint": "us", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.DetectLanguageInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: country_hint
    description: 'Country of origin hint for the entire batch. Accepts two

      letter country codes specified by ISO 3166-1 alpha-2. Per-document

      country hints will take precedence over whole batch hints. Defaults to

      "US". If you don''t want to use a country hint, pass the string "none".'
    types:
    - <xref:str>
  - name: model_version
    description: 'This value indicates which model will

      be used for scoring, e.g. "latest", "2019-10-01". If a model-version

      is not specified, the API will default to the latest, non-preview version.

      See here for more info: [https://aka.ms/text-analytics-model-versioning](https://aka.ms/text-analytics-model-versioning)'
    types:
    - <xref:str>
  - name: show_stats
    description: 'If set to true, response will contain document

      level statistics in the *statistics* field of the document-level response.'
    types:
    - <xref:bool>
  - name: disable_service_logs
    description: 'If set to true, you opt-out of having your text input

      logged on the service side for troubleshooting. By default, Text Analytics logs
      your

      input text for 48 hours, solely to allow for troubleshooting issues in providing
      you with

      the Text Analytics natural language processing functions. Setting this parameter
      to true,

      disables input logging and may limit our ability to remediate issues that occur.
      Please see

      Cognitive Services Compliance and Privacy notes at [https://aka.ms/cs-compliance](https://aka.ms/cs-compliance)
      for

      additional details, and Microsoft Responsible AI principles at

      [https://www.microsoft.com/ai/responsible-ai](https://www.microsoft.com/ai/responsible-ai).'
    types:
    - <xref:bool>
  return:
    description: 'The combined list of <xref:azure.ai.textanalytics.DetectLanguageResult>

      and <xref:azure.ai.textanalytics.DocumentError> in the order the original documents

      were passed in.'
    types:
    - <xref:list>[<xref:azure.ai.textanalytics.DetectLanguageResult,azure.ai.textanalytics.DocumentError>]
  exceptions:
  - description: ''
    type: azure.core.exceptions.HttpResponseError or TypeError or ValueError
  examples:
  - "Detecting language in a batch of documents.<!--[!code-python[Main](les\\async_samples\\\
    sample_detect_language_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\68\\\\azure-ai-textanalytics-5.2.0b1\\\\samples\\\\\
    async_samples\\\\sample_detect_language_async.py\", \"xml:space\": \"preserve\"\
    , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
    : 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n   documents = [\n       \"\"\"\n     \
    \  The concierge Paulette was extremely helpful. Sadly when we arrived the elevator\
    \ was broken, but with Paulette's help we barely noticed this inconvenience.\n\
    \       She arranged for our baggage to be brought up to our room with no extra\
    \ charge and gave us a free meal to refurbish all of the calories we lost from\n\
    \       walking up the stairs :). Can't say enough good things about my experience!\n\
    \       \"\"\",\n       \"\"\"\n       \u6700\u8FD1\u7531\u4E8E\u5DE5\u4F5C\u538B\
    \u529B\u592A\u5927\uFF0C\u6211\u4EEC\u51B3\u5B9A\u53BB\u5BCC\u9152\u5E97\u5EA6\
    \u5047\u3002\u90A3\u513F\u7684\u6E29\u6CC9\u5B9E\u5728\u592A\u8212\u670D\u4E86\
    \uFF0C\u6211\u8DDF\u6211\u4E08\u592B\u90FD\u5B8C\u5168\u6062\u590D\u4E86\u5DE5\
    \u4F5C\u524D\u7684\u9752\u6625\u7CBE\u795E\uFF01\u52A0\u6CB9\uFF01\n       \"\"\
    \"\n   ]\n   async with text_analytics_client:\n       result = await text_analytics_client.detect_language(documents)\n\
    \n   reviewed_docs = [doc for doc in result if not doc.is_error]\n\n   print(\"\
    Let's see what language each review is in!\")\n\n   for idx, doc in enumerate(reviewed_docs):\n\
    \       print(\"Review #{} is in '{}', which has ISO639-1 name '{}'\\n\".format(\n\
    \           idx, doc.primary_language.name, doc.primary_language.iso6391_name\n\
    \       ))\n       if doc.is_error:\n           print(doc.id, doc.error)\n\n \
    \  ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.extract_key_phrases
  name: extract_key_phrases
  summary: 'Extract key phrases from a batch of documents.


    Returns a list of strings denoting the key phrases in the input

    text. For example, for the input text "The food was delicious and there

    were wonderful staff", the API returns the main talking points: "food"

    and "wonderful staff"


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/concepts/data-limits?tabs=version-3](https://docs.microsoft.com/azure/cognitive-services/text-analytics/concepts/data-limits?tabs=version-3)

    for document length limits, maximum batch size, and supported text encoding.


    New in version v3.1: The *disable_service_logs* keyword argument.'
  signature: 'extract_key_phrases(documents: Union[List[str], List[azure.ai.textanalytics._models.TextDocumentInput],
    List[Dict[str, str]]], **kwargs: Any) -> List[Union[azure.ai.textanalytics._models.ExtractKeyPhrasesResult,
    azure.ai.textanalytics._models.DocumentError]]'
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and language on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a list
      of

      dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

      *{"id": "1", "language": "en", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.TextDocumentInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: language
    description: 'The 2 letter ISO 639-1 representation of language for the

      entire batch. For example, use "en" for English; "es" for Spanish etc.

      If not set, uses "en" for English as default. Per-document language will

      take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
      for

      supported languages in Text Analytics API.'
    types:
    - <xref:str>
  - name: model_version
    description: 'This value indicates which model will

      be used for scoring, e.g. "latest", "2019-10-01". If a model-version

      is not specified, the API will default to the latest, non-preview version.

      See here for more info: [https://aka.ms/text-analytics-model-versioning](https://aka.ms/text-analytics-model-versioning)'
    types:
    - <xref:str>
  - name: show_stats
    description: 'If set to true, response will contain document

      level statistics in the *statistics* field of the document-level response.'
    types:
    - <xref:bool>
  - name: disable_service_logs
    description: 'If set to true, you opt-out of having your text input

      logged on the service side for troubleshooting. By default, Text Analytics logs
      your

      input text for 48 hours, solely to allow for troubleshooting issues in providing
      you with

      the Text Analytics natural language processing functions. Setting this parameter
      to true,

      disables input logging and may limit our ability to remediate issues that occur.
      Please see

      Cognitive Services Compliance and Privacy notes at [https://aka.ms/cs-compliance](https://aka.ms/cs-compliance)
      for

      additional details, and Microsoft Responsible AI principles at

      [https://www.microsoft.com/ai/responsible-ai](https://www.microsoft.com/ai/responsible-ai).'
    types:
    - <xref:bool>
  return:
    description: 'The combined list of <xref:azure.ai.textanalytics.ExtractKeyPhrasesResult>
      and

      <xref:azure.ai.textanalytics.DocumentError> in the order the original documents
      were

      passed in.'
    types:
    - <xref:list>[<xref:azure.ai.textanalytics.ExtractKeyPhrasesResult,azure.ai.textanalytics.DocumentError>]
  exceptions:
  - description: ''
    type: azure.core.exceptions.HttpResponseError or TypeError or ValueError
  examples:
  - "Extract the key phrases in a batch of documents.<!--[!code-python[Main](les\\\
    async_samples\\sample_extract_key_phrases_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\68\\\\azure-ai-textanalytics-5.2.0b1\\\
    \\samples\\\\async_samples\\\\sample_extract_key_phrases_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n   articles = [\n       \"\"\"\n      \
    \ Washington, D.C. Autumn in DC is a uniquely beautiful season. The leaves fall\
    \ from the trees\n       in a city chockful of forrests, leaving yellow leaves\
    \ on the ground and a clearer view of the\n       blue sky above...\n       \"\
    \"\",\n       \"\"\"\n       Redmond, WA. In the past few days, Microsoft has\
    \ decided to further postpone the start date of\n       its United States workers,\
    \ due to the pandemic that rages with no end in sight...\n       \"\"\",\n   \
    \    \"\"\"\n       Redmond, WA. Employees at Microsoft can be excited about the\
    \ new coffee shop that will open on campus\n       once workers no longer have\
    \ to work remotely...\n       \"\"\"\n   ]\n\n   async with text_analytics_client:\n\
    \       result = await text_analytics_client.extract_key_phrases(articles)\n\n\
    \   for idx, doc in enumerate(result):\n       if not doc.is_error:\n        \
    \   print(\"Key phrases in article #{}: {}\".format(\n               idx + 1,\n\
    \               \", \".join(doc.key_phrases)\n           ))\n\n   ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.recognize_entities
  name: recognize_entities
  summary: 'Recognize entities for a batch of documents.


    Identifies and categorizes entities in your text as people, places,

    organizations, date/time, quantities, percentages, currencies, and more.

    For the list of supported entity types, check: [https://aka.ms/taner](https://aka.ms/taner)


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/concepts/data-limits?tabs=version-3](https://docs.microsoft.com/azure/cognitive-services/text-analytics/concepts/data-limits?tabs=version-3)

    for document length limits, maximum batch size, and supported text encoding.


    New in version v3.1: The *disable_service_logs* and *string_index_type* keyword
    arguments.'
  signature: 'recognize_entities(documents: Union[List[str], List[azure.ai.textanalytics._models.TextDocumentInput],
    List[Dict[str, str]]], **kwargs: Any) -> List[Union[azure.ai.textanalytics._models.RecognizeEntitiesResult,
    azure.ai.textanalytics._models.DocumentError]]'
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and language on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a list
      of

      dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

      *{"id": "1", "language": "en", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.TextDocumentInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: language
    description: 'The 2 letter ISO 639-1 representation of language for the

      entire batch. For example, use "en" for English; "es" for Spanish etc.

      If not set, uses "en" for English as default. Per-document language will

      take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
      for

      supported languages in Text Analytics API.'
    types:
    - <xref:str>
  - name: model_version
    description: 'This value indicates which model will

      be used for scoring, e.g. "latest", "2019-10-01". If a model-version

      is not specified, the API will default to the latest, non-preview version.

      See here for more info: [https://aka.ms/text-analytics-model-versioning](https://aka.ms/text-analytics-model-versioning)'
    types:
    - <xref:str>
  - name: show_stats
    description: 'If set to true, response will contain document

      level statistics in the *statistics* field of the document-level response.'
    types:
    - <xref:bool>
  - name: string_index_type
    description: 'Specifies the method used to interpret string offsets.

      *UnicodeCodePoint*, the Python encoding, is the default. To override the Python
      default,

      you can also pass in *Utf16CodePoint* or TextElement_v8`. For additional information

      see [https://aka.ms/text-analytics-offsets](https://aka.ms/text-analytics-offsets)'
    types:
    - <xref:str>
  - name: disable_service_logs
    description: 'If set to true, you opt-out of having your text input

      logged on the service side for troubleshooting. By default, Text Analytics logs
      your

      input text for 48 hours, solely to allow for troubleshooting issues in providing
      you with

      the Text Analytics natural language processing functions. Setting this parameter
      to true,

      disables input logging and may limit our ability to remediate issues that occur.
      Please see

      Cognitive Services Compliance and Privacy notes at [https://aka.ms/cs-compliance](https://aka.ms/cs-compliance)
      for

      additional details, and Microsoft Responsible AI principles at

      [https://www.microsoft.com/ai/responsible-ai](https://www.microsoft.com/ai/responsible-ai).'
    types:
    - <xref:bool>
  return:
    description: 'The combined list of <xref:azure.ai.textanalytics.RecognizeEntitiesResult>
      and

      <xref:azure.ai.textanalytics.DocumentError> in the order the original documents
      were

      passed in.'
    types:
    - <xref:list>[<xref:azure.ai.textanalytics.RecognizeEntitiesResult,azure.ai.textanalytics.DocumentError>]
  exceptions:
  - description: ''
    type: azure.core.exceptions.HttpResponseError or TypeError or ValueError
  examples:
  - "Recognize entities in a batch of documents.<!--[!code-python[Main](les\\async_samples\\\
    sample_recognize_entities_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\68\\\\azure-ai-textanalytics-5.2.0b1\\\\\
    samples\\\\async_samples\\\\sample_recognize_entities_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n   reviews = [\n       \"\"\"I work for\
    \ Foo Company, and we hired Contoso for our annual founding ceremony. The food\n\
    \       was amazing and we all can't say enough good words about the quality and\
    \ the level of service.\"\"\",\n       \"\"\"We at the Foo Company re-hired Contoso\
    \ after all of our past successes with the company.\n       Though the food was\
    \ still great, I feel there has been a quality drop since their last time\n  \
    \     catering for us. Is anyone else running into the same problem?\"\"\",\n\
    \       \"\"\"Bar Company is over the moon about the service we received from\
    \ Contoso, the best sliders ever!!!!\"\"\"\n   ]\n\n   async with text_analytics_client:\n\
    \       result = await text_analytics_client.recognize_entities(reviews)\n\n \
    \  result = [review for review in result if not review.is_error]\n\n   for idx,\
    \ review in enumerate(result):\n       for entity in review.entities:\n      \
    \     print(\"Entity '{}' has category '{}'\".format(entity.text, entity.category))\n\
    \n   ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.recognize_linked_entities
  name: recognize_linked_entities
  summary: 'Recognize linked entities from a well-known knowledge base for a batch
    of documents.


    Identifies and disambiguates the identity of each entity found in text (for example,

    determining whether an occurrence of the word Mars refers to the planet, or to
    the

    Roman god of war). Recognized entities are associated with URLs to a well-known

    knowledge base, like Wikipedia.


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/concepts/data-limits?tabs=version-3](https://docs.microsoft.com/azure/cognitive-services/text-analytics/concepts/data-limits?tabs=version-3)

    for document length limits, maximum batch size, and supported text encoding.


    New in version v3.1: The *disable_service_logs* and *string_index_type* keyword
    arguments.'
  signature: 'recognize_linked_entities(documents: Union[List[str], List[azure.ai.textanalytics._models.TextDocumentInput],
    List[Dict[str, str]]], **kwargs: Any) -> List[Union[azure.ai.textanalytics._models.RecognizeLinkedEntitiesResult,
    azure.ai.textanalytics._models.DocumentError]]'
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and language on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a list
      of

      dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

      *{"id": "1", "language": "en", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.TextDocumentInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: language
    description: 'The 2 letter ISO 639-1 representation of language for the

      entire batch. For example, use "en" for English; "es" for Spanish etc.

      If not set, uses "en" for English as default. Per-document language will

      take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
      for

      supported languages in Text Analytics API.'
    types:
    - <xref:str>
  - name: model_version
    description: 'This value indicates which model will

      be used for scoring, e.g. "latest", "2019-10-01". If a model-version

      is not specified, the API will default to the latest, non-preview version.

      See here for more info: [https://aka.ms/text-analytics-model-versioning](https://aka.ms/text-analytics-model-versioning)'
    types:
    - <xref:str>
  - name: show_stats
    description: 'If set to true, response will contain document

      level statistics in the *statistics* field of the document-level response.'
    types:
    - <xref:bool>
  - name: string_index_type
    description: 'Specifies the method used to interpret string offsets.

      *UnicodeCodePoint*, the Python encoding, is the default. To override the Python
      default,

      you can also pass in *Utf16CodePoint* or *TextElement_v8*. For additional information

      see [https://aka.ms/text-analytics-offsets](https://aka.ms/text-analytics-offsets)'
    types:
    - <xref:str>
  - name: disable_service_logs
    description: 'If set to true, you opt-out of having your text input

      logged on the service side for troubleshooting. By default, Text Analytics logs
      your

      input text for 48 hours, solely to allow for troubleshooting issues in providing
      you with

      the Text Analytics natural language processing functions. Setting this parameter
      to true,

      disables input logging and may limit our ability to remediate issues that occur.
      Please see

      Cognitive Services Compliance and Privacy notes at [https://aka.ms/cs-compliance](https://aka.ms/cs-compliance)
      for

      additional details, and Microsoft Responsible AI principles at

      [https://www.microsoft.com/ai/responsible-ai](https://www.microsoft.com/ai/responsible-ai).'
    types:
    - <xref:bool>
  return:
    description: 'The combined list of <xref:azure.ai.textanalytics.RecognizeLinkedEntitiesResult>

      and <xref:azure.ai.textanalytics.DocumentError> in the order the original documents

      were passed in.'
    types:
    - <xref:list>[<xref:azure.ai.textanalytics.RecognizeLinkedEntitiesResult,azure.ai.textanalytics.DocumentError>]
  exceptions:
  - description: ''
    type: azure.core.exceptions.HttpResponseError or TypeError or ValueError
  examples:
  - "Recognize linked entities in a batch of documents.<!--[!code-python[Main](les\\\
    async_samples\\sample_recognize_linked_entities_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\68\\\\azure-ai-textanalytics-5.2.0b1\\\
    \\samples\\\\async_samples\\\\sample_recognize_linked_entities_async.py\", \"\
    xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n   documents = [\n       \"\"\"\n     \
    \  Microsoft was founded by Bill Gates with some friends he met at Harvard. One\
    \ of his friends,\n       Steve Ballmer, eventually became CEO after Bill Gates\
    \ as well. Steve Ballmer eventually stepped\n       down as CEO of Microsoft,\
    \ and was succeeded by Satya Nadella.\n       Microsoft originally moved its headquarters\
    \ to Bellevue, Wahsington in Januaray 1979, but is now\n       headquartered in\
    \ Redmond.\n       \"\"\"\n   ]\n\n   async with text_analytics_client:\n    \
    \   result = await text_analytics_client.recognize_linked_entities(documents)\n\
    \n   docs = [doc for doc in result if not doc.is_error]\n\n   print(\n       \"\
    Let's map each entity to it's Wikipedia article. I also want to see how many times\
    \ each \"\n       \"entity is mentioned in a document\\n\\n\"\n   )\n   entity_to_url\
    \ = {}\n   for doc in docs:\n       for entity in doc.entities:\n           print(\"\
    Entity '{}' has been mentioned '{}' time(s)\".format(\n               entity.name,\
    \ len(entity.matches)\n           ))\n           if entity.data_source == \"Wikipedia\"\
    :\n               entity_to_url[entity.name] = entity.url\n\n   ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.recognize_pii_entities
  name: recognize_pii_entities
  summary: 'Recognize entities containing personal information for a batch of documents.


    Returns a list of personal information entities ("SSN",

    "Bank Account", etc) in the document.  For the list of supported entity types,

    check [https://aka.ms/tanerpii](https://aka.ms/tanerpii)


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/concepts/data-limits?tabs=version-3](https://docs.microsoft.com/azure/cognitive-services/text-analytics/concepts/data-limits?tabs=version-3)

    for document length limits, maximum batch size, and supported text encoding.


    New in version v3.1: The *recognize_pii_entities* client method.'
  signature: 'recognize_pii_entities(documents: Union[List[str], List[azure.ai.textanalytics._models.TextDocumentInput],
    List[Dict[str, str]]], **kwargs: Any) -> List[Union[azure.ai.textanalytics._models.RecognizePiiEntitiesResult,
    azure.ai.textanalytics._models.DocumentError]]'
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and language on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a list
      of

      dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

      *{"id": "1", "language": "en", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.TextDocumentInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: language
    description: 'The 2 letter ISO 639-1 representation of language for the

      entire batch. For example, use "en" for English; "es" for Spanish etc.

      If not set, uses "en" for English as default. Per-document language will

      take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
      for

      supported languages in Text Analytics API.'
    types:
    - <xref:str>
  - name: model_version
    description: 'This value indicates which model will

      be used for scoring, e.g. "latest", "2019-10-01". If a model-version

      is not specified, the API will default to the latest, non-preview version.

      See here for more info: [https://aka.ms/text-analytics-model-versioning](https://aka.ms/text-analytics-model-versioning)'
    types:
    - <xref:str>
  - name: show_stats
    description: 'If set to true, response will contain document

      level statistics in the *statistics* field of the document-level response.'
    types:
    - <xref:bool>
  - name: domain_filter
    description: 'Filters the response entities to ones only included in the specified
      domain.

      I.e., if set to ''phi'', will only return entities in the Protected Healthcare
      Information domain.

      See [https://aka.ms/tanerpii](https://aka.ms/tanerpii) for more information.'
    types:
    - <xref:str>
    - <xref:azure.ai.textanalytics.PiiEntityDomain>
  - name: categories_filter
    description: 'Instead of filtering over all PII entity categories, you can pass
      in a list of

      the specific PII entity categories you want to filter out. For example, if you
      only want to filter out

      U.S. social security numbers in a document, you can pass in

      *[PiiEntityCategory.US_SOCIAL_SECURITY_NUMBER]* for this kwarg.'
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.PiiEntityCategory>]
  - name: string_index_type
    description: 'Specifies the method used to interpret string offsets.

      *UnicodeCodePoint*, the Python encoding, is the default. To override the Python
      default,

      you can also pass in *Utf16CodePoint* or *TextElement_v8*. For additional information

      see [https://aka.ms/text-analytics-offsets](https://aka.ms/text-analytics-offsets)'
    types:
    - <xref:str>
  - name: disable_service_logs
    description: 'Defaults to true, meaning that Text Analytics will not log your

      input text on the service side for troubleshooting. If set to False, Text Analytics
      logs your

      input text for 48 hours, solely to allow for troubleshooting issues in providing
      you with

      the Text Analytics natural language processing functions. Please see

      Cognitive Services Compliance and Privacy notes at [https://aka.ms/cs-compliance](https://aka.ms/cs-compliance)
      for

      additional details, and Microsoft Responsible AI principles at

      [https://www.microsoft.com/ai/responsible-ai](https://www.microsoft.com/ai/responsible-ai).'
    types:
    - <xref:bool>
  return:
    description: 'The combined list of <xref:azure.ai.textanalytics.RecognizePiiEntitiesResult>

      and <xref:azure.ai.textanalytics.DocumentError> in the order the original documents

      were passed in.'
    types:
    - <xref:list>[<xref:azure.ai.textanalytics.RecognizePiiEntitiesResult,azure.ai.textanalytics.DocumentError>]
  exceptions:
  - description: ''
    type: azure.core.exceptions.HttpResponseError or TypeError or ValueError
  examples:
  - "Recognize personally identifiable information entities in a batch of documents.<!--[!code-python[Main](les\\\
    sample_recognize_pii_entities.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\68\\\\azure-ai-textanalytics-5.2.0b1\\\\\
    samples\\\\sample_recognize_pii_entities.py\", \"xml:space\": \"preserve\", \"\
    force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
    : 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.textanalytics import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(\n\
    \       endpoint=endpoint, credential=AzureKeyCredential(key)\n   )\n   documents\
    \ = [\n       \"\"\"Parker Doe has repaid all of their loans as of 2020-04-25.\n\
    \       Their SSN is 859-98-0987. To contact them, use their phone number\n  \
    \     555-555-5555. They are originally from Brazil and have Brazilian CPF number\
    \ 998.214.865-68\"\"\"\n   ]\n\n   result = text_analytics_client.recognize_pii_entities(documents)\n\
    \   docs = [doc for doc in result if not doc.is_error]\n\n   print(\n       \"\
    Let's compare the original document with the documents after redaction. \"\n \
    \      \"I also want to comb through all of the entities that got redacted\"\n\
    \   )\n   for idx, doc in enumerate(docs):\n       print(\"Document text: {}\"\
    .format(documents[idx]))\n       print(\"Redacted document text: {}\".format(doc.redacted_text))\n\
    \       for entity in doc.entities:\n           print(\"...Entity '{}' with category\
    \ '{}' got redacted\".format(\n               entity.text, entity.category\n \
    \          ))\n\n\n   ````\n"
