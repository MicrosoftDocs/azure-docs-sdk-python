### YamlMime:PythonClass
uid: azure.ai.textanalytics.aio.TextAnalyticsClient
name: TextAnalyticsClient
fullName: azure.ai.textanalytics.aio.TextAnalyticsClient
module: azure.ai.textanalytics.aio
inheritances:
- azure.ai.textanalytics.aio._base_client_async.AsyncTextAnalyticsClientBase
summary: 'The Text Analytics API is a suite of text analytics web services built with
  best-in-class

  Microsoft machine learning algorithms. The API can be used to analyze unstructured
  text for

  tasks such as sentiment analysis, key phrase extraction, and language detection.
  No training data

  is needed to use this API - just bring your text data. This API uses advanced natural
  language

  processing techniques to deliver best in class predictions.


  Further documentation can be found in

  [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview)'
constructor:
  parameters:
  - name: endpoint
    description: 'Supported Cognitive Services or Text Analytics resource

      endpoints (protocol and hostname, for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
    types:
    - <xref:str>
  - name: credential
    description: 'Credentials needed for the client to connect to Azure.

      This can be the an instance of AzureKeyCredential if using a

      cognitive services/text analytics API key or a token credential

      from <xref:azure.identity>.'
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
  - name: default_country_hint
    description: 'Sets the default country_hint to use for all operations.

      Defaults to "US". If you don''t want to use a country hint, pass the string
      "none".'
    types:
    - <xref:str>
  - name: default_language
    description: 'Sets the default language to use for all operations.

      Defaults to "en".'
    types:
    - <xref:str>
  - name: api_version
    description: 'The API version of the service to use for requests. It defaults
      to the

      latest service version. Setting to an older version may result in reduced feature
      compatibility.'
    types:
    - <xref:str>
    - <xref:azure.ai.textanalytics.TextAnalyticsApiVersion>
examples:
- "Creating the TextAnalyticsClient with endpoint and API key.<!--[!code-python[Main](les\\\
  async_samples\\sample_authentication_async.py )]-->\n\n<!-- literal_block {\"ids\"\
  : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\23\\\\azure-ai-textanalytics-5.1.0b4\\\\samples\\\
  \\async_samples\\\\sample_authentication_async.py\", \"xml:space\": \"preserve\"\
  , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
  : 1}} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
  \   from azure.ai.textanalytics.aio import TextAnalyticsClient\n   endpoint = os.environ[\"\
  AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"AZURE_TEXT_ANALYTICS_KEY\"\
  ]\n\n   text_analytics_client = TextAnalyticsClient(endpoint, AzureKeyCredential(key))\n\
  \n   ````\n\nCreating the TextAnalyticsClient with endpoint and token credential\
  \ from Azure Active Directory.<!--[!code-python[Main](les\\async_samples\\sample_authentication_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\23\\\\azure-ai-textanalytics-5.1.0b4\\\
  \\samples\\\\async_samples\\\\sample_authentication_async.py\", \"xml:space\": \"\
  preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"\
  linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.textanalytics.aio import\
  \ TextAnalyticsClient\n   from azure.identity.aio import DefaultAzureCredential\n\
  \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   credential = DefaultAzureCredential()\n\
  \n   text_analytics_client = TextAnalyticsClient(endpoint, credential=credential)\n\
  \n   ````\n"
methods:
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.analyze_sentiment
  name: analyze_sentiment
  summary: 'Analyze sentiment for a batch of documents. Turn on opinion mining with
    *show_opinion_mining*.


    Returns a sentiment prediction, as well as sentiment scores for

    each sentiment class (Positive, Negative, and Neutral) for the document

    and each sentence within it.


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits)

    for document length limits, maximum batch size, and supported text encoding.



    New in version v3.1-preview: The *show_opinion_mining* parameter.'
  signature: 'analyze_sentiment(documents: typing.Union[typing.List[str], typing.List[azure.ai.textanalytics._models.TextDocumentInput],
    typing.List[typing.Dict[str, str]]], **kwargs: typing.Any) -> typing.List[typing.Union[azure.ai.textanalytics._models.AnalyzeSentimentResult,
    azure.ai.textanalytics._models.DocumentError]]'
  return:
    description: 'The combined list of <xref:azure.ai.textanalytics.AnalyzeSentimentResult>
      and

      <xref:azure.ai.textanalytics.DocumentError> in the order the original documents
      were

      passed in.'
    types:
    - <xref:list>[<xref:azure.ai.textanalytics.AnalyzeSentimentResult,azure.ai.textanalytics.DocumentError>]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or TypeError or ValueError
  examples:
  - "Analyze sentiment in a batch of documents.<!--[!code-python[Main](les\\async_samples\\\
    sample_analyze_sentiment_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\23\\\\azure-ai-textanalytics-5.1.0b4\\\\\
    samples\\\\async_samples\\\\sample_analyze_sentiment_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials import\
    \ AzureKeyCredential\n   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n\n   documents = [\n       \"\"\"I had\
    \ the best day of my life. I decided to go sky-diving and it made me appreciate\
    \ my whole life so much more.\n       I developed a deep-connection with my instructor\
    \ as well, and I feel as if I've made a life-long friend in her.\"\"\",\n    \
    \   \"\"\"This was a waste of my time. All of the views on this drop are extremely\
    \ boring, all I saw was grass. 0/10 would\n       not recommend to any divers,\
    \ even first timers.\"\"\",\n       \"\"\"This was pretty good! The sights were\
    \ ok, and I had fun with my instructors! Can't complain too much about my experience\"\
    \"\",\n       \"\"\"I only have one word for my experience: WOW!!! I can't believe\
    \ I have had such a wonderful skydiving company right\n       in my backyard this\
    \ whole time! I will definitely be a repeat customer, and I want to take my grandmother\
    \ skydiving too,\n       I know she'll love it!\"\"\"\n   ]\n\n   async with text_analytics_client:\n\
    \       result = await text_analytics_client.analyze_sentiment(documents)\n\n\
    \   docs = [doc for doc in result if not doc.is_error]\n\n   print(\"Let's visualize\
    \ the sentiment of each of these documents\")\n   for idx, doc in enumerate(docs):\n\
    \       print(\"Document text: {}\".format(documents[idx]))\n       print(\"Overall\
    \ sentiment: {}\".format(doc.sentiment))\n\n   ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.begin_analyze
  name: begin_analyze
  summary: Start a long-running operation to perform a variety of text analysis tasks
    over a batch of documents.
  signature: begin_analyze(documents, entities_recognition_tasks=None, pii_entities_recognition_tasks=None,
    key_phrase_extraction_tasks=None, **kwargs)
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and language on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a list
      of

      dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

      *{"id": "1", "language": "en", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.TextDocumentInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: tasks
    description: 'A list of tasks to include in the analysis.  Each task object encapsulates
      the parameters

      used for the particular task type.'
    isRequired: true
    types:
    - <xref:list>[<xref:Union>[<xref:azure.ai.textanalytics.EntitiesRecognitionTask,azure.ai.textanalytics.PiiEntitiesRecognitionTask>,
      <xref:azure.ai.textanalytics.EntityLinkingTask,azure.ai.textanalytics.KeyPhraseExtractionTask>,
      <xref:azure.ai.textanalytics.SentimentAnalysisTask>]]
  - name: display_name
    description: An optional display name to set for the requested analysis.
    isRequired: true
    types:
    - <xref:str>
  - name: language
    description: 'The 2 letter ISO 639-1 representation of language for the

      entire batch. For example, use "en" for English; "es" for Spanish etc.

      If not set, uses "en" for English as default. Per-document language will

      take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
      for

      supported languages in Text Analytics API.'
    isRequired: true
    types:
    - <xref:str>
  - name: show_stats
    description: If set to true, response will contain document level statistics.
    isRequired: true
    types:
    - <xref:bool>
  - name: polling_interval
    description: 'Waiting time between two polls for LRO operations

      if no Retry-After header is present. Defaults to 30 seconds.'
    isRequired: true
    types:
    - <xref:int>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return an instance of TextAnalysisResult.'
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or TypeError or ValueError or NotImplementedError
  examples:
  - "Start a long-running operation to perform a variety of text analysis tasks over\n\
    a batch of documents.<!--[!code-python[Main](les\\async_samples\\sample_analyze_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\23\\\\azure-ai-textanalytics-5.1.0b4\\\\samples\\\\async_samples\\\\sample_analyze_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\
    \   from azure.ai.textanalytics import EntitiesRecognitionTask, \\\n       PiiEntitiesRecognitionTask,\
    \ \\\n       KeyPhraseExtractionTask\n\n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"\
    ]\n   key = os.environ[\"AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client\
    \ = TextAnalyticsClient(\n       endpoint=endpoint, \n       credential=AzureKeyCredential(key),\n\
    \       api_version=\"v3.1-preview.3\"\n   )\n\n   documents = [\n       \"We\
    \ went to Contoso Steakhouse located at midtown NYC last week for a dinner party,\
    \ and we adore the spot! \\\n       They provide marvelous food and they have\
    \ a great menu. The chief cook happens to be the owner (I think his name is John\
    \ Doe) \\\n       and he is super nice, coming out of the kitchen and greeted\
    \ us all. We enjoyed very much dining in the place! \\\n       The Sirloin steak\
    \ I ordered was tender and juicy, and the place was impeccably clean. You can\
    \ even pre-order from their \\\n       online menu at www.contososteakhouse.com,\
    \ call 312-555-0176 or send email to order@contososteakhouse.com! \\\n       The\
    \ only complaint I have is the food didn't come fast enough. Overall I highly\
    \ recommend it!\"\n   ]\n\n   async with text_analytics_client:\n       poller\
    \ = await text_analytics_client.begin_analyze(\n           documents,\n      \
    \     display_name=\"Sample Text Analysis\",\n           entities_recognition_tasks=[EntitiesRecognitionTask()],\n\
    \           pii_entities_recognition_tasks=[PiiEntitiesRecognitionTask()],\n \
    \          key_phrase_extraction_tasks=[KeyPhraseExtractionTask()]\n       )\n\
    \n       result = await poller.result()\n\n       async for page in result:\n\
    \           for task in page.entities_recognition_results:\n               print(\"\
    Results of Entities Recognition task:\")\n               \n               docs\
    \ = [doc for doc in task.results if not doc.is_error]\n               for idx,\
    \ doc in enumerate(docs):\n                   print(\"\\nDocument text: {}\".format(documents[idx]))\n\
    \                   for entity in doc.entities:\n                       print(\"\
    Entity: {}\".format(entity.text))\n                       print(\"...Category:\
    \ {}\".format(entity.category))\n                       print(\"...Confidence\
    \ Score: {}\".format(entity.confidence_score))\n                       print(\"\
    ...Offset: {}\".format(entity.offset))\n                   print(\"------------------------------------------\"\
    )\n\n           for task in page.pii_entities_recognition_results:\n         \
    \      print(\"Results of PII Entities Recognition task:\")\n\n              \
    \ docs = [doc for doc in task.results if not doc.is_error]\n               for\
    \ idx, doc in enumerate(docs):\n                   print(\"Document text: {}\"\
    .format(documents[idx]))\n                   for entity in doc.entities:\n   \
    \                    print(\"Entity: {}\".format(entity.text))\n             \
    \          print(\"Category: {}\".format(entity.category))\n                 \
    \      print(\"Confidence Score: {}\\n\".format(entity.confidence_score))\n  \
    \                 print(\"------------------------------------------\")\n\n  \
    \         for task in page.key_phrase_extraction_results:\n               print(\"\
    Results of Key Phrase Extraction task:\")\n\n               docs = [doc for doc\
    \ in task.results if not doc.is_error]\n               for idx, doc in enumerate(docs):\n\
    \                   print(\"Document text: {}\\n\".format(documents[idx]))\n \
    \                  print(\"Key Phrases: {}\\n\".format(doc.key_phrases))\n   \
    \                print(\"------------------------------------------\")\n\n\n \
    \  ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.begin_analyze_healthcare
  name: begin_analyze_healthcare
  summary: 'Analyze healthcare entities and identify relationships between these entities
    in a batch of documents.


    Entities are associated with references that can be found in existing knowledge
    bases,

    such as UMLS, CHV, MSH, etc.


    Relations are comprised of a pair of entities and a directional relationship.'
  signature: begin_analyze_healthcare(documents, **kwargs)
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and language on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a list
      of

      dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

      *{"id": "1", "language": "en", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.TextDocumentInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: model_version
    description: 'This value indicates which model will

      be used for scoring, e.g. "latest", "2019-10-01". If a model-version

      is not specified, the API will default to the latest, non-preview version.'
    isRequired: true
    types:
    - <xref:str>
  - name: show_stats
    description: If set to true, response will contain document level statistics.
    isRequired: true
    types:
    - <xref:bool>
  - name: polling_interval
    description: 'Waiting time between two polls for LRO operations

      if no Retry-After header is present. Defaults to 5 seconds.'
    isRequired: true
    types:
    - <xref:int>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.textanalytics.AnalyzeHealthcareResultItem>].'
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or TypeError or ValueError or NotImplementedError
  examples:
  - "Analyze healthcare entities in a batch of documents.<!--[!code-python[Main](les\\\
    async_samples\\sample_analyze_healthcare_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\23\\\\azure-ai-textanalytics-5.1.0b4\\\
    \\samples\\\\async_samples\\\\sample_analyze_healthcare_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials import\
    \ AzureKeyCredential\n   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(\n\
    \       endpoint=endpoint, \n       credential=AzureKeyCredential(key),\n    \
    \   api_version=\"v3.1-preview.3\")\n\n   documents = [\n       \"Subject is taking\
    \ 100mg of ibuprofen twice daily\"\n   ]\n\n   async with text_analytics_client:\n\
    \       poller = await text_analytics_client.begin_analyze_healthcare(documents)\n\
    \       result = await poller.result()\n       docs = [doc async for doc in result\
    \ if not doc.is_error]\n\n   print(\"Results of Healthcare Analysis:\")\n   for\
    \ idx, doc in enumerate(docs):\n       print(\"Document text: {}\\n\".format(documents[idx]))\n\
    \       for entity in doc.entities:\n           print(\"Entity: {}\".format(entity.text))\n\
    \           print(\"...Category: {}\".format(entity.category))\n           print(\"\
    ...Subcategory: {}\".format(entity.subcategory))\n           print(\"...Offset:\
    \ {}\".format(entity.offset))\n           print(\"...Confidence score: {}\".format(entity.confidence_score))\n\
    \           if entity.links is not None:\n               print(\"...Links:\")\n\
    \               for link in entity.links:\n                   print(\"......ID:\
    \ {}\".format(link.id))\n                   print(\"......Data source: {}\".format(link.data_source))\n\
    \       for relation in doc.relations:\n           print(\"Relation:\")\n    \
    \       print(\"...Source: {}\".format(relation.source.text))\n           print(\"\
    ...Target: {}\".format(relation.target.text))\n           print(\"...Type: {}\"\
    .format(relation.relation_type))\n           print(\"...Bidirectional: {}\".format(relation.is_bidirectional))\n\
    \       print(\"------------------------------------------\")\n\n\n   ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.begin_cancel_analyze_healthcare
  name: begin_cancel_analyze_healthcare
  summary: Cancel an existing health operation.
  signature: begin_cancel_analyze_healthcare(poller, **kwargs)
  parameters:
  - name: poller
    description: The LRO poller object associated with the health operation.
    isRequired: true
  return:
    description: An instance of an LROPoller that returns None.
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:None>]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or TypeError or ValueError or NotImplementedError
  examples:
  - "Cancel an existing health operation.<!--[!code-python[Main](les\\async_samples\\\
    sample_health_with_cancellation_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\23\\\\azure-ai-textanalytics-5.1.0b4\\\\\
    samples\\\\async_samples\\\\sample_health_with_cancellation_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials import\
    \ AzureKeyCredential\n   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(\n\
    \       endpoint=endpoint,\n       credential=AzureKeyCredential(key),\n     \
    \  api_version=\"v3.1-preview.3\")\n\n   documents = [\n       \"RECORD #333582770390100\
    \ | MH | 85986313 | | 054351 | 2/14/2001 12:00:00 AM | \\\n       CORONARY ARTERY\
    \ DISEASE | Signed | DIS | Admission Date: 5/22/2001 \\\n       Report Status:\
    \ Signed Discharge Date: 4/24/2001 ADMISSION DIAGNOSIS: \\\n       CORONARY ARTERY\
    \ DISEASE. HISTORY OF PRESENT ILLNESS: \\\n       The patient is a 54-year-old\
    \ gentleman with a history of progressive angina over the past several months.\
    \ \\\n       The patient had a cardiac catheterization in July of this year revealing\
    \ total occlusion of the RCA and \\\n       50% left main disease , with a strong\
    \ family history of coronary artery disease with a brother dying at \\\n     \
    \  the age of 52 from a myocardial infarction and another brother who is status\
    \ post coronary artery bypass grafting. \\\n       The patient had a stress echocardiogram\
    \ done on July , 2001 , which showed no wall motion abnormalities ,\\\n      \
    \ but this was a difficult study due to body habitus. The patient went for six\
    \ minutes with minimal ST depressions \\\n       in the anterior lateral leads\
    \ , thought due to fatigue and wrist pain , his anginal equivalent. Due to the\
    \ patient's \\\n       increased symptoms and family history and history left\
    \ main disease with total occasional of his RCA was referred \\\n       for revascularization\
    \ with open heart surgery.\"\n   ]\n\n   async with text_analytics_client:\n \
    \      poller = await text_analytics_client.begin_analyze_healthcare(documents)\n\
    \       poller = await text_analytics_client.begin_cancel_analyze_healthcare(poller)\n\
    \n   await poller.wait()\n\n\n   ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.detect_language
  name: detect_language
  summary: 'Detect language for a batch of documents.


    Returns the detected language and a numeric score between zero and

    one. Scores close to one indicate 100% certainty that the identified

    language is true. See [https://aka.ms/talangs](https://aka.ms/talangs) for the
    list of enabled languages.


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits)

    for document length limits, maximum batch size, and supported text encoding.'
  signature: 'detect_language(documents: typing.Union[typing.List[str], typing.List[azure.ai.textanalytics._models.DetectLanguageInput],
    typing.List[typing.Dict[str, str]]], **kwargs: typing.Any) -> typing.List[typing.Union[azure.ai.textanalytics._models.DetectLanguageResult,
    azure.ai.textanalytics._models.DocumentError]]'
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and country_hint on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.DetectLanguageInput>] or a
      list of

      dict representations of <xref:azure.ai.textanalytics.DetectLanguageInput>, like

      *{"id": "1", "country_hint": "us", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.DetectLanguageInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: country_hint
    description: 'Country of origin hint for the entire batch. Accepts two

      letter country codes specified by ISO 3166-1 alpha-2. Per-document

      country hints will take precedence over whole batch hints. Defaults to

      "US". If you don''t want to use a country hint, pass the string "none".'
    isRequired: true
    types:
    - <xref:str>
  - name: model_version
    description: 'This value indicates which model will

      be used for scoring, e.g. "latest", "2019-10-01". If a model-version

      is not specified, the API will default to the latest, non-preview version.'
    isRequired: true
    types:
    - <xref:str>
  - name: show_stats
    description: 'If set to true, response will contain document

      level statistics in the *statistics* field of the document-level response.'
    isRequired: true
    types:
    - <xref:bool>
  return:
    description: 'The combined list of <xref:azure.ai.textanalytics.DetectLanguageResult>

      and <xref:azure.ai.textanalytics.DocumentError> in the order the original documents

      were passed in.'
    types:
    - <xref:list>[<xref:azure.ai.textanalytics.DetectLanguageResult,azure.ai.textanalytics.DocumentError>]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or TypeError or ValueError
  examples:
  - "Detecting language in a batch of documents.<!--[!code-python[Main](les\\async_samples\\\
    sample_detect_language_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\23\\\\azure-ai-textanalytics-5.1.0b4\\\\samples\\\\\
    async_samples\\\\sample_detect_language_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
    \   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\n   endpoint\
    \ = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"AZURE_TEXT_ANALYTICS_KEY\"\
    ]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\
    \   documents = [\n       \"\"\"\n       The concierge Paulette was extremely\
    \ helpful. Sadly when we arrived the elevator was broken, but with Paulette's\
    \ help we barely noticed this inconvenience.\n       She arranged for our baggage\
    \ to be brought up to our room with no extra charge and gave us a free meal to\
    \ refurbish all of the calories we lost from\n       walking up the stairs :).\
    \ Can't say enough good things about my experience!\n       \"\"\",\n       \"\
    \"\"\n       \u6700\u8FD1\u7531\u4E8E\u5DE5\u4F5C\u538B\u529B\u592A\u5927\uFF0C\
    \u6211\u4EEC\u51B3\u5B9A\u53BB\u5BCC\u9152\u5E97\u5EA6\u5047\u3002\u90A3\u513F\
    \u7684\u6E29\u6CC9\u5B9E\u5728\u592A\u8212\u670D\u4E86\uFF0C\u6211\u8DDF\u6211\
    \u4E08\u592B\u90FD\u5B8C\u5168\u6062\u590D\u4E86\u5DE5\u4F5C\u524D\u7684\u9752\
    \u6625\u7CBE\u795E\uFF01\u52A0\u6CB9\uFF01\n       \"\"\"\n   ]\n   async with\
    \ text_analytics_client:\n       result = await text_analytics_client.detect_language(documents)\n\
    \n   reviewed_docs = [doc for doc in result if not doc.is_error]\n\n   print(\"\
    Let's see what language each review is in!\")\n\n   for idx, doc in enumerate(reviewed_docs):\n\
    \       print(\"Review #{} is in '{}', which has ISO639-1 name '{}'\\n\".format(\n\
    \           idx, doc.primary_language.name, doc.primary_language.iso6391_name\n\
    \       ))\n       if doc.is_error:\n           print(doc.id, doc.error)\n\n \
    \  ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.extract_key_phrases
  name: extract_key_phrases
  summary: 'Extract key phrases from a batch of documents.


    Returns a list of strings denoting the key phrases in the input

    text. For example, for the input text "The food was delicious and there

    were wonderful staff", the API returns the main talking points: "food"

    and "wonderful staff"


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits)

    for document length limits, maximum batch size, and supported text encoding.'
  signature: 'extract_key_phrases(documents: typing.Union[typing.List[str], typing.List[azure.ai.textanalytics._models.TextDocumentInput],
    typing.List[typing.Dict[str, str]]], **kwargs: typing.Any) -> typing.List[typing.Union[azure.ai.textanalytics._models.ExtractKeyPhrasesResult,
    azure.ai.textanalytics._models.DocumentError]]'
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and language on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a list
      of

      dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

      *{"id": "1", "language": "en", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.TextDocumentInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: language
    description: 'The 2 letter ISO 639-1 representation of language for the

      entire batch. For example, use "en" for English; "es" for Spanish etc.

      If not set, uses "en" for English as default. Per-document language will

      take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
      for

      supported languages in Text Analytics API.'
    isRequired: true
    types:
    - <xref:str>
  - name: model_version
    description: 'This value indicates which model will

      be used for scoring, e.g. "latest", "2019-10-01". If a model-version

      is not specified, the API will default to the latest, non-preview version.'
    isRequired: true
    types:
    - <xref:str>
  - name: show_stats
    description: 'If set to true, response will contain document

      level statistics in the *statistics* field of the document-level response.'
    isRequired: true
    types:
    - <xref:bool>
  return:
    description: 'The combined list of <xref:azure.ai.textanalytics.ExtractKeyPhrasesResult>
      and

      <xref:azure.ai.textanalytics.DocumentError> in the order the original documents
      were

      passed in.'
    types:
    - <xref:list>[<xref:azure.ai.textanalytics.ExtractKeyPhrasesResult,azure.ai.textanalytics.DocumentError>]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or TypeError or ValueError
  examples:
  - "Extract the key phrases in a batch of documents.<!--[!code-python[Main](les\\\
    async_samples\\sample_extract_key_phrases_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\23\\\\azure-ai-textanalytics-5.1.0b4\\\
    \\samples\\\\async_samples\\\\sample_extract_key_phrases_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials import\
    \ AzureKeyCredential\n   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n   articles = [\n       \"\"\"\n      \
    \ Washington, D.C. Autumn in DC is a uniquely beautiful season. The leaves fall\
    \ from the trees\n       in a city chockful of forrests, leaving yellow leaves\
    \ on the ground and a clearer view of the\n       blue sky above...\n       \"\
    \"\",\n       \"\"\"\n       Redmond, WA. In the past few days, Microsoft has\
    \ decided to further postpone the start date of\n       its United States workers,\
    \ due to the pandemic that rages with no end in sight...\n       \"\"\",\n   \
    \    \"\"\"\n       Redmond, WA. Employees at Microsoft can be excited about the\
    \ new coffee shop that will open on campus\n       once workers no longer have\
    \ to work remotely...\n       \"\"\"\n   ]\n\n   async with text_analytics_client:\n\
    \       result = await text_analytics_client.extract_key_phrases(articles)\n\n\
    \   for idx, doc in enumerate(result):\n       if not doc.is_error:\n        \
    \   print(\"Key phrases in article #{}: {}\".format(\n               idx + 1,\n\
    \               \", \".join(doc.key_phrases)\n           ))\n\n   ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.recognize_entities
  name: recognize_entities
  summary: 'Recognize entities for a batch of documents.


    Identifies and categorizes entities in your text as people, places,

    organizations, date/time, quantities, percentages, currencies, and more.

    For the list of supported entity types, check: [https://aka.ms/taner](https://aka.ms/taner)


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits)

    for document length limits, maximum batch size, and supported text encoding.'
  signature: 'recognize_entities(documents: typing.Union[typing.List[str], typing.List[azure.ai.textanalytics._models.TextDocumentInput],
    typing.List[typing.Dict[str, str]]], **kwargs: typing.Any) -> typing.List[typing.Union[azure.ai.textanalytics._models.RecognizeEntitiesResult,
    azure.ai.textanalytics._models.DocumentError]]'
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and language on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a list
      of

      dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

      *{"id": "1", "language": "en", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.TextDocumentInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: language
    description: 'The 2 letter ISO 639-1 representation of language for the

      entire batch. For example, use "en" for English; "es" for Spanish etc.

      If not set, uses "en" for English as default. Per-document language will

      take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
      for

      supported languages in Text Analytics API.'
    isRequired: true
    types:
    - <xref:str>
  - name: model_version
    description: 'This value indicates which model will

      be used for scoring, e.g. "latest", "2019-10-01". If a model-version

      is not specified, the API will default to the latest, non-preview version.'
    isRequired: true
    types:
    - <xref:str>
  - name: show_stats
    description: 'If set to true, response will contain document

      level statistics in the *statistics* field of the document-level response.'
    isRequired: true
    types:
    - <xref:bool>
  return:
    description: 'The combined list of <xref:azure.ai.textanalytics.RecognizeEntitiesResult>
      and

      <xref:azure.ai.textanalytics.DocumentError> in the order the original documents
      were

      passed in.'
    types:
    - <xref:list>[<xref:azure.ai.textanalytics.RecognizeEntitiesResult,azure.ai.textanalytics.DocumentError>]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or TypeError or ValueError
  examples:
  - "Recognize entities in a batch of documents.<!--[!code-python[Main](les\\async_samples\\\
    sample_recognize_entities_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\23\\\\azure-ai-textanalytics-5.1.0b4\\\\\
    samples\\\\async_samples\\\\sample_recognize_entities_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials import\
    \ AzureKeyCredential\n   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n   reviews = [\n       \"\"\"I work for\
    \ Foo Company, and we hired Contoso for our annual founding ceremony. The food\n\
    \       was amazing and we all can't say enough good words about the quality and\
    \ the level of service.\"\"\",\n       \"\"\"We at the Foo Company re-hired Contoso\
    \ after all of our past successes with the company.\n       Though the food was\
    \ still great, I feel there has been a quality drop since their last time\n  \
    \     catering for us. Is anyone else running into the same problem?\"\"\",\n\
    \       \"\"\"Bar Company is over the moon about the service we received from\
    \ Contoso, the best sliders ever!!!!\"\"\"\n   ]\n\n   async with text_analytics_client:\n\
    \       result = await text_analytics_client.recognize_entities(reviews)\n\n \
    \  result = [review for review in result if not review.is_error]\n\n   for idx,\
    \ review in enumerate(result):\n       for entity in review.entities:\n      \
    \     print(\"Entity '{}' has category '{}'\".format(entity.text, entity.category))\n\
    \n   ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.recognize_linked_entities
  name: recognize_linked_entities
  summary: 'Recognize linked entities from a well-known knowledge base for a batch
    of documents.


    Identifies and disambiguates the identity of each entity found in text (for example,

    determining whether an occurrence of the word Mars refers to the planet, or to
    the

    Roman god of war). Recognized entities are associated with URLs to a well-known

    knowledge base, like Wikipedia.


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits)

    for document length limits, maximum batch size, and supported text encoding.'
  signature: 'recognize_linked_entities(documents: typing.Union[typing.List[str],
    typing.List[azure.ai.textanalytics._models.TextDocumentInput], typing.List[typing.Dict[str,
    str]]], **kwargs: typing.Any) -> typing.List[typing.Union[azure.ai.textanalytics._models.RecognizeLinkedEntitiesResult,
    azure.ai.textanalytics._models.DocumentError]]'
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and language on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a list
      of

      dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

      *{"id": "1", "language": "en", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.TextDocumentInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: language
    description: 'The 2 letter ISO 639-1 representation of language for the

      entire batch. For example, use "en" for English; "es" for Spanish etc.

      If not set, uses "en" for English as default. Per-document language will

      take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
      for

      supported languages in Text Analytics API.'
    isRequired: true
    types:
    - <xref:str>
  - name: model_version
    description: 'This value indicates which model will

      be used for scoring, e.g. "latest", "2019-10-01". If a model-version

      is not specified, the API will default to the latest, non-preview version.'
    isRequired: true
    types:
    - <xref:str>
  - name: show_stats
    description: 'If set to true, response will contain document

      level statistics in the *statistics* field of the document-level response.'
    isRequired: true
    types:
    - <xref:bool>
  return:
    description: 'The combined list of <xref:azure.ai.textanalytics.RecognizeLinkedEntitiesResult>

      and <xref:azure.ai.textanalytics.DocumentError> in the order the original documents

      were passed in.'
    types:
    - <xref:list>[<xref:azure.ai.textanalytics.RecognizeLinkedEntitiesResult,azure.ai.textanalytics.DocumentError>]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or TypeError or ValueError
  examples:
  - "Recognize linked entities in a batch of documents.<!--[!code-python[Main](les\\\
    async_samples\\sample_recognize_linked_entities_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\23\\\\azure-ai-textanalytics-5.1.0b4\\\
    \\samples\\\\async_samples\\\\sample_recognize_linked_entities_async.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials import\
    \ AzureKeyCredential\n   from azure.ai.textanalytics.aio import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n   documents = [\n       \"\"\"\n     \
    \  Microsoft was founded by Bill Gates with some friends he met at Harvard. One\
    \ of his friends,\n       Steve Ballmer, eventually became CEO after Bill Gates\
    \ as well. Steve Ballmer eventually stepped\n       down as CEO of Microsoft,\
    \ and was succeeded by Satya Nadella.\n       Microsoft originally moved its headquarters\
    \ to Bellevue, Wahsington in Januaray 1979, but is now\n       headquartered in\
    \ Redmond.\n       \"\"\"\n   ]\n\n   async with text_analytics_client:\n    \
    \   result = await text_analytics_client.recognize_linked_entities(documents)\n\
    \n   docs = [doc for doc in result if not doc.is_error]\n\n   print(\n       \"\
    Let's map each entity to it's Wikipedia article. I also want to see how many times\
    \ each \"\n       \"entity is mentioned in a document\\n\\n\"\n   )\n   entity_to_url\
    \ = {}\n   for doc in docs:\n       for entity in doc.entities:\n           print(\"\
    Entity '{}' has been mentioned '{}' time(s)\".format(\n               entity.name,\
    \ len(entity.matches)\n           ))\n           if entity.data_source == \"Wikipedia\"\
    :\n               entity_to_url[entity.name] = entity.url\n\n   ````\n"
- uid: azure.ai.textanalytics.aio.TextAnalyticsClient.recognize_pii_entities
  name: recognize_pii_entities
  summary: 'Recognize entities containing personal information for a batch of documents.


    Returns a list of personal information entities ("SSN",

    "Bank Account", etc) in the document.  For the list of supported entity types,

    check [https://aka.ms/tanerpii](https://aka.ms/tanerpii)


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits)

    for document length limits, maximum batch size, and supported text encoding.'
  signature: 'recognize_pii_entities(documents: typing.Union[typing.List[str], typing.List[azure.ai.textanalytics._models.TextDocumentInput],
    typing.List[typing.Dict[str, str]]], **kwargs: typing.Any) -> typing.List[typing.Union[azure.ai.textanalytics._models.RecognizePiiEntitiesResult,
    azure.ai.textanalytics._models.DocumentError]]'
  parameters:
  - name: documents
    description: 'The set of documents to process as part of this batch.

      If you wish to specify the ID and language on a per-item basis you must

      use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a list
      of

      dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

      *{"id": "1", "language": "en", "text": "hello world"}*.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:list>[<xref:azure.ai.textanalytics.TextDocumentInput>]
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: language
    description: 'The 2 letter ISO 639-1 representation of language for the

      entire batch. For example, use "en" for English; "es" for Spanish etc.

      If not set, uses "en" for English as default. Per-document language will

      take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
      for

      supported languages in Text Analytics API.'
    isRequired: true
    types:
    - <xref:str>
  - name: model_version
    description: 'This value indicates which model will

      be used for scoring, e.g. "latest", "2019-10-01". If a model-version

      is not specified, the API will default to the latest, non-preview version.'
    isRequired: true
    types:
    - <xref:str>
  - name: show_stats
    description: 'If set to true, response will contain document

      level statistics in the *statistics* field of the document-level response.'
    isRequired: true
    types:
    - <xref:bool>
  - name: domain_filter
    description: 'Filters the response entities to ones only included in the specified
      domain.

      I.e., if set to ''PHI'', will only return entities in the Protected Healthcare
      Information domain.

      See [https://aka.ms/tanerpii](https://aka.ms/tanerpii) for more information.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.ai.textanalytics.PiiEntityDomainType>
  return:
    description: 'The combined list of <xref:azure.ai.textanalytics.RecognizePiiEntitiesResult>

      and <xref:azure.ai.textanalytics.DocumentError> in the order the original documents

      were passed in.'
    types:
    - <xref:list>[<xref:azure.ai.textanalytics.RecognizePiiEntitiesResult,azure.ai.textanalytics.DocumentError>]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or TypeError or ValueError
  examples:
  - "Recognize personally identifiable information entities in a batch of documents.<!--[!code-python[Main](les\\\
    sample_recognize_pii_entities.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\23\\\\azure-ai-textanalytics-5.1.0b4\\\\\
    samples\\\\sample_recognize_pii_entities.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
    \   from azure.ai.textanalytics import TextAnalyticsClient\n\n   endpoint = os.environ[\"\
    AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"AZURE_TEXT_ANALYTICS_KEY\"\
    ]\n\n   text_analytics_client = TextAnalyticsClient(\n       endpoint=endpoint,\
    \ credential=AzureKeyCredential(key)\n   )\n   documents = [\n       \"\"\"Parker\
    \ Doe has repaid all of their loans as of 2020-04-25.\n       Their SSN is 859-98-0987.\
    \ To contact them, use their phone number\n       555-555-5555. They are originally\
    \ from Brazil and have Brazilian CPF number 998.214.865-68\"\"\"\n   ]\n\n   result\
    \ = text_analytics_client.recognize_pii_entities(documents)\n   docs = [doc for\
    \ doc in result if not doc.is_error]\n\n   print(\n       \"Let's compare the\
    \ original document with the documents after redaction. \"\n       \"I also want\
    \ to comb through all of the entities that got redacted\"\n   )\n   for idx, doc\
    \ in enumerate(docs):\n       print(\"Document text: {}\".format(documents[idx]))\n\
    \       print(\"Redacted document text: {}\".format(doc.redacted_text))\n    \
    \   for entity in doc.entities:\n           print(\"...Entity '{}' with category\
    \ '{}' got redacted\".format(\n               entity.text, entity.category\n \
    \          ))\n\n\n   ````\n"
