### YamlMime:PythonClass
uid: azure.ai.textanalytics.models.MatchLongestEntityPolicyType
name: MatchLongestEntityPolicyType
fullName: azure.ai.textanalytics.models.MatchLongestEntityPolicyType
module: azure.ai.textanalytics.models
summary: 'Represents the Match longest overlap policy. No overlapping entities as
  far as it is possible.

  1. If there are overlapping entities, the longest one will be returned. 2. If the
  set of

  characters predicted for 2 or more entities are exactly the same, select the entity
  that has

  the higher confidence score.3. If the entity scores are identical, return all entities
  that are

  still present after applying the previous rules. 3. If there is partial overlap
  (as in Hello

  Text Analytics) follow the above steps starting from 1.'
constructor:
  syntax: 'MatchLongestEntityPolicyType(*args: Any, **kwargs: Any)'
variables:
- description: 'The entity OverlapPolicy object kind. Required. Represents

    MatchLongestEntityPolicyType'
  name: policy_kind
  types:
  - <xref:str>
  - <xref:azure.ai.textanalytics.models.MATCH_LONGEST>
methods:
- uid: azure.ai.textanalytics.models.MatchLongestEntityPolicyType.as_dict
  name: as_dict
  summary: Return a dict that can be turned into json using json.dump.
  signature: 'as_dict(*, exclude_readonly: bool = False) -> dict[str, Any]'
  keywordOnlyParameters:
  - name: exclude_readonly
    description: Whether to remove the readonly properties.
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.ai.textanalytics.models.MatchLongestEntityPolicyType.clear
  name: clear
  summary: Remove all items from D.
  signature: clear() -> None
- uid: azure.ai.textanalytics.models.MatchLongestEntityPolicyType.copy
  name: copy
  signature: copy() -> Model
- uid: azure.ai.textanalytics.models.MatchLongestEntityPolicyType.get
  name: get
  summary: 'Get the value for key if key is in the dictionary, else default.

    :param str key: The key to look up.

    :param any default: The value to return if key is not in the dictionary. Defaults
    to None

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'get(key: str, default: Any = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.textanalytics.models.MatchLongestEntityPolicyType.items
  name: items
  signature: items() -> ItemsView[str, Any]
  return:
    description: set-like object providing a view on D's items
    types:
    - <xref:typing.ItemsView>
- uid: azure.ai.textanalytics.models.MatchLongestEntityPolicyType.keys
  name: keys
  signature: keys() -> KeysView[str]
  return:
    description: a set-like object providing a view on D's keys
    types:
    - <xref:typing.KeysView>
- uid: azure.ai.textanalytics.models.MatchLongestEntityPolicyType.pop
  name: pop
  summary: 'Removes specified key and return the corresponding value.

    :param str key: The key to pop.

    :param any default: The value to return if key is not in the dictionary

    :returns: The value corresponding to the key.

    :rtype: any

    :raises KeyError: If key is not found and default is not given.'
  signature: 'pop(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.ai.textanalytics.models.MatchLongestEntityPolicyType.popitem
  name: popitem
  summary: 'Removes and returns some (key, value) pair

    :returns: The (key, value) pair.

    :rtype: tuple

    :raises KeyError: if D is empty.'
  signature: popitem() -> tuple[str, Any]
- uid: azure.ai.textanalytics.models.MatchLongestEntityPolicyType.setdefault
  name: setdefault
  summary: 'Same as calling D.get(k, d), and setting D[k]=d if k not found

    :param str key: The key to look up.

    :param any default: The value to set if key is not in the dictionary

    :returns: D[k] if k in D, else d.

    :rtype: any'
  signature: 'setdefault(key: str, default: ~typing.Any = <object object>) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.ai.textanalytics.models.MatchLongestEntityPolicyType.update
  name: update
  summary: 'Updates D from mapping/iterable E and F.

    :param any args: Either a mapping object or an iterable of key-value pairs.'
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.ai.textanalytics.models.MatchLongestEntityPolicyType.values
  name: values
  signature: values() -> ValuesView[Any]
  return:
    description: an object providing a view on D's values
    types:
    - <xref:typing.ValuesView>
attributes:
- uid: azure.ai.textanalytics.models.MatchLongestEntityPolicyType.policy_kind
  name: policy_kind
  summary: The entity OverlapPolicy object kind. Required. Represents MatchLongestEntityPolicyType
  signature: 'policy_kind: MATCH_LONGEST: ''matchLongest''>]'
