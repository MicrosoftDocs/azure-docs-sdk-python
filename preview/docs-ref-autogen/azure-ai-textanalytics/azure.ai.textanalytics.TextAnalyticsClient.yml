### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.ai.textanalytics.TextAnalyticsClient.analyze_sentiment
  - azure.ai.textanalytics.TextAnalyticsClient.detect_language
  - azure.ai.textanalytics.TextAnalyticsClient.extract_key_phrases
  - azure.ai.textanalytics.TextAnalyticsClient.recognize_entities
  - azure.ai.textanalytics.TextAnalyticsClient.recognize_linked_entities
  class: azure.ai.textanalytics.TextAnalyticsClient
  example:
  - "Creating the TextAnalyticsClient with endpoint and API key.<!--[!code-python[Main](les\\\
    sample_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\1\\\\azure-ai-textanalytics-1.0.0\\\\samples\\\\sample_authentication.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.textanalytics import TextAnalyticsClient\n\
    \   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint,\
    \ AzureKeyCredential(key))\n\n   ````\n\nCreating the TextAnalyticsClient with\
    \ endpoint and token credential from Azure Active Directory.<!--[!code-python[Main](les\\\
    sample_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\1\\\\azure-ai-textanalytics-1.0.0\\\\samples\\\\sample_authentication.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.ai.textanalytics\
    \ import TextAnalyticsClient\n   from azure.identity import DefaultAzureCredential\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   credential =\
    \ DefaultAzureCredential()\n\n   text_analytics_client = TextAnalyticsClient(endpoint,\
    \ credential=credential)\n\n   ````\n"
  fullName: azure.ai.textanalytics.TextAnalyticsClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.ai.textanalytics._base_client.TextAnalyticsClientBase
  langs:
  - python
  module: azure.ai.textanalytics
  name: TextAnalyticsClient
  summary: 'The Text Analytics API is a suite of text analytics web services built
    with best-in-class

    Microsoft machine learning algorithms. The API can be used to analyze unstructured
    text for

    tasks such as sentiment analysis, key phrase extraction, and language detection.
    No training data

    is needed to use this API - just bring your text data. This API uses advanced
    natural language

    processing techniques to deliver best in class predictions.


    Further documentation can be found in

    [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview)'
  syntax:
    content: TextAnalyticsClient(endpoint, credential, **kwargs)
    parameters:
    - description: 'Supported Cognitive Services or Text Analytics resource

        endpoints (protocol and hostname, for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
      id: endpoint
      type:
      - str
    - description: 'Credentials needed for the client to connect to Azure.

        This can be the an instance of AzureKeyCredential if using a

        cognitive services/text analytics API key or a token credential

        from <xref:azure.identity>.'
      id: credential
      type:
      - azure.core.credentials.AzureKeyCredential
      - azure.core.credentials.TokenCredential
    - description: 'Sets the default country_hint to use for all operations.

        Defaults to "US". If you don''t want to use a country hint, pass the string
        "none".'
      id: default_country_hint
      type:
      - str
    - description: 'Sets the default language to use for all operations.

        Defaults to "en".'
      id: default_language
      type:
      - str
  type: class
  uid: azure.ai.textanalytics.TextAnalyticsClient
- class: azure.ai.textanalytics.TextAnalyticsClient
  example:
  - "Analyze sentiment in a batch of documents.<!--[!code-python[Main](les\\sample_analyze_sentiment.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-ai-textanalytics-1.0.0\\\\samples\\\\sample_analyze_sentiment.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.textanalytics import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n   documents = [\n       \"I had the best\
    \ day of my life.\",\n       \"This was a waste of my time. The speaker put me\
    \ to sleep.\",\n       \"No tengo dinero ni nada que dar...\",\n       \"L'h\xF4\
    tel n'\xE9tait pas tr\xE8s confortable. L'\xE9clairage \xE9tait trop sombre.\"\
    \n   ]\n\n   result = text_analytics_client.analyze_sentiment(documents)\n   docs\
    \ = [doc for doc in result if not doc.is_error]\n\n   for idx, doc in enumerate(docs):\n\
    \       print(\"Document text: {}\".format(documents[idx]))\n       print(\"Overall\
    \ sentiment: {}\".format(doc.sentiment))\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or TypeError or ValueError
  fullName: azure.ai.textanalytics.TextAnalyticsClient.analyze_sentiment
  langs:
  - python
  module: azure.ai.textanalytics
  name: analyze_sentiment(documents, **kwargs)
  namewithoutparameters: analyze_sentiment
  summary: 'Analyze sentiment for a batch of documents.


    Returns a sentiment prediction, as well as sentiment scores for

    each sentiment class (Positive, Negative, and Neutral) for the document

    and each sentence within it.


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits)

    for document length limits, maximum batch size, and supported text encoding.'
  syntax:
    content: analyze_sentiment(documents, **kwargs)
    parameters:
    - description: 'The set of documents to process as part of this batch.

        If you wish to specify the ID and language on a per-item basis you must

        use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a
        list of

        dict representations of  <xref:azure.ai.textanalytics.TextDocumentInput>,
        like

        *{"id": "1", "language": "en", "text": "hello world"}*.'
      id: documents
      isRequired: true
      type:
      - list[str]
      - list[azure.ai.textanalytics.TextDocumentInput]
      - list[dict[str, str]]
    - description: 'The 2 letter ISO 639-1 representation of language for the

        entire batch. For example, use "en" for English; "es" for Spanish etc.

        If not set, uses "en" for English as default. Per-document language will

        take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
        for

        supported languages in Text Analytics API.'
      id: language
      isRequired: true
      type:
      - str
    - description: 'This value indicates which model will

        be used for scoring, e.g. "latest", "2019-10-01". If a model-version

        is not specified, the API will default to the latest, non-preview version.'
      id: model_version
      isRequired: true
      type:
      - str
    - description: If set to true, response will contain document level statistics.
      id: show_stats
      isRequired: true
      type:
      - bool
    return:
      description: 'The combined list of <xref:azure.ai.textanalytics.AnalyzeSentimentResult>
        and

        <xref:azure.ai.textanalytics.DocumentError> in the order the original documents
        were

        passed in.'
      type:
      - list[azure.ai.textanalytics.AnalyzeSentimentResult,azure.ai.textanalytics.DocumentError]
  type: method
  uid: azure.ai.textanalytics.TextAnalyticsClient.analyze_sentiment
- class: azure.ai.textanalytics.TextAnalyticsClient
  example:
  - "Detecting language in a batch of documents.<!--[!code-python[Main](les\\sample_detect_language.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-ai-textanalytics-1.0.0\\\\samples\\\\sample_detect_language.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.textanalytics import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n   documents = [\n       \"This document\
    \ is written in English.\",\n       \"Este es un document escrito en Espa\xF1\
    ol.\",\n       \"\u8FD9\u662F\u4E00\u4E2A\u7528\u4E2D\u6587\u5199\u7684\u6587\u4EF6\
    \",\n       \"Dies ist ein Dokument in deutsche Sprache.\",\n       \"Detta \xE4\
    r ett dokument skrivet p\xE5 engelska.\"\n   ]\n\n   result = text_analytics_client.detect_language(documents)\n\
    \n   for idx, doc in enumerate(result):\n       if not doc.is_error:\n       \
    \    print(\"Document text: {}\".format(documents[idx]))\n           print(\"\
    Language detected: {}\".format(doc.primary_language.name))\n           print(\"\
    ISO6391 name: {}\".format(doc.primary_language.iso6391_name))\n           print(\"\
    Confidence score: {}\\n\".format(doc.primary_language.confidence_score))\n   \
    \    if doc.is_error:\n           print(doc.id, doc.error)\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or TypeError or ValueError
  fullName: azure.ai.textanalytics.TextAnalyticsClient.detect_language
  langs:
  - python
  module: azure.ai.textanalytics
  name: detect_language(documents, **kwargs)
  namewithoutparameters: detect_language
  summary: 'Detect language for a batch of documents.


    Returns the detected language and a numeric score between zero and

    one. Scores close to one indicate 100% certainty that the identified

    language is true. See [https://aka.ms/talangs](https://aka.ms/talangs) for the
    list of enabled languages.


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits)

    for document length limits, maximum batch size, and supported text encoding.'
  syntax:
    content: detect_language(documents, **kwargs)
    parameters:
    - description: 'The set of documents to process as part of this batch.

        If you wish to specify the ID and country_hint on a per-item basis you must

        use as input a list[<xref:azure.ai.textanalytics.DetectLanguageInput>] or
        a list of

        dict representations of <xref:azure.ai.textanalytics.DetectLanguageInput>,
        like

        *{"id": "1", "country_hint": "us", "text": "hello world"}*.'
      id: documents
      isRequired: true
      type:
      - list[str]
      - list[azure.ai.textanalytics.DetectLanguageInput]
      - list[dict[str, str]]
    - description: 'A country hint for the entire batch. Accepts two

        letter country codes specified by ISO 3166-1 alpha-2. Per-document

        country hints will take precedence over whole batch hints. Defaults to

        "US". If you don''t want to use a country hint, pass the string "none".'
      id: country_hint
      isRequired: true
      type:
      - str
    - description: 'This value indicates which model will

        be used for scoring, e.g. "latest", "2019-10-01". If a model-version

        is not specified, the API will default to the latest, non-preview version.'
      id: model_version
      isRequired: true
      type:
      - str
    - description: 'If set to true, response will contain document

        level statistics.'
      id: show_stats
      isRequired: true
      type:
      - bool
    return:
      description: 'The combined list of <xref:azure.ai.textanalytics.DetectLanguageResult>
        and

        <xref:azure.ai.textanalytics.DocumentError> in the order the original documents
        were

        passed in.'
      type:
      - list[azure.ai.textanalytics.DetectLanguageResult,azure.ai.textanalytics.DocumentError]
  type: method
  uid: azure.ai.textanalytics.TextAnalyticsClient.detect_language
- class: azure.ai.textanalytics.TextAnalyticsClient
  example:
  - "Extract the key phrases in a batch of documents.<!--[!code-python[Main](les\\\
    sample_extract_key_phrases.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\1\\\\azure-ai-textanalytics-1.0.0\\\\samples\\\\sample_extract_key_phrases.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.textanalytics import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n   documents = [\n       \"Redmond is a\
    \ city in King County, Washington, United States, located 15 miles east of Seattle.\"\
    ,\n       \"I need to take my cat to the veterinarian.\",\n       \"I will travel\
    \ to South America in the summer.\",\n   ]\n\n   result = text_analytics_client.extract_key_phrases(documents)\n\
    \   for doc in result:\n       if not doc.is_error:\n           print(doc.key_phrases)\n\
    \       if doc.is_error:\n           print(doc.id, doc.error)\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or TypeError or ValueError
  fullName: azure.ai.textanalytics.TextAnalyticsClient.extract_key_phrases
  langs:
  - python
  module: azure.ai.textanalytics
  name: extract_key_phrases(documents, **kwargs)
  namewithoutparameters: extract_key_phrases
  summary: 'Extract key phrases from a batch of documents.


    Returns a list of strings denoting the key phrases in the input

    text. For example, for the input text "The food was delicious and there

    were wonderful staff", the API returns the main talking points: "food"

    and "wonderful staff"


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits)

    for document length limits, maximum batch size, and supported text encoding.'
  syntax:
    content: extract_key_phrases(documents, **kwargs)
    parameters:
    - description: 'The set of documents to process as part of this batch.

        If you wish to specify the ID and language on a per-item basis you must

        use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a
        list of

        dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

        *{"id": "1", "language": "en", "text": "hello world"}*.'
      id: documents
      isRequired: true
      type:
      - list[str]
      - list[azure.ai.textanalytics.TextDocumentInput]
      - list[dict[str, str]]
    - description: 'The 2 letter ISO 639-1 representation of language for the

        entire batch. For example, use "en" for English; "es" for Spanish etc.

        If not set, uses "en" for English as default. Per-document language will

        take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
        for

        supported languages in Text Analytics API.'
      id: language
      isRequired: true
      type:
      - str
    - description: 'This value indicates which model will

        be used for scoring, e.g. "latest", "2019-10-01". If a model-version

        is not specified, the API will default to the latest, non-preview version.'
      id: model_version
      isRequired: true
      type:
      - str
    - description: If set to true, response will contain document level statistics.
      id: show_stats
      isRequired: true
      type:
      - bool
    return:
      description: 'The combined list of <xref:azure.ai.textanalytics.ExtractKeyPhrasesResult>
        and

        <xref:azure.ai.textanalytics.DocumentError> in the order the original documents
        were

        passed in.'
      type:
      - list[azure.ai.textanalytics.ExtractKeyPhrasesResult,azure.ai.textanalytics.DocumentError]
  type: method
  uid: azure.ai.textanalytics.TextAnalyticsClient.extract_key_phrases
- class: azure.ai.textanalytics.TextAnalyticsClient
  example:
  - "Recognize entities in a batch of documents.<!--[!code-python[Main](les\\sample_recognize_entities.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\1\\\\azure-ai-textanalytics-1.0.0\\\\samples\\\\sample_recognize_entities.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.textanalytics import TextAnalyticsClient\n\
    \n   endpoint = os.environ[\"AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_TEXT_ANALYTICS_KEY\"]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n   documents = [\n       \"Microsoft was\
    \ founded by Bill Gates and Paul Allen.\",\n       \"I had a wonderful trip to\
    \ Seattle last week.\",\n       \"I visited the Space Needle 2 times.\",\n   ]\n\
    \n   result = text_analytics_client.recognize_entities(documents)\n   docs = [doc\
    \ for doc in result if not doc.is_error]\n\n   for idx, doc in enumerate(docs):\n\
    \       print(\"\\nDocument text: {}\".format(documents[idx]))\n       for entity\
    \ in doc.entities:\n           print(\"Entity: \\t\", entity.text, \"\\tCategory:\
    \ \\t\", entity.category,\n                 \"\\tConfidence Score: \\t\", entity.confidence_score)\n\
    \n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or TypeError or ValueError
  fullName: azure.ai.textanalytics.TextAnalyticsClient.recognize_entities
  langs:
  - python
  module: azure.ai.textanalytics
  name: recognize_entities(documents, **kwargs)
  namewithoutparameters: recognize_entities
  summary: 'Recognize entities for a batch of documents.


    Identifies and categorizes entities in your text as people, places,

    organizations, date/time, quantities, percentages, currencies, and more.

    For the list of supported entity types, check: [https://aka.ms/taner](https://aka.ms/taner)


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits)

    for document length limits, maximum batch size, and supported text encoding.'
  syntax:
    content: recognize_entities(documents, **kwargs)
    parameters:
    - description: 'The set of documents to process as part of this batch.

        If you wish to specify the ID and language on a per-item basis you must

        use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a
        list

        of dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>,

        like *{"id": "1", "language": "en", "text": "hello world"}*.'
      id: documents
      isRequired: true
      type:
      - list[str]
      - list[azure.ai.textanalytics.TextDocumentInput]
      - list[dict[str, str]]
    - description: 'The 2 letter ISO 639-1 representation of language for the

        entire batch. For example, use "en" for English; "es" for Spanish etc.

        If not set, uses "en" for English as default. Per-document language will

        take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
        for

        supported languages in Text Analytics API.'
      id: language
      isRequired: true
      type:
      - str
    - description: 'This value indicates which model will

        be used for scoring, e.g. "latest", "2019-10-01". If a model-version

        is not specified, the API will default to the latest, non-preview version.'
      id: model_version
      isRequired: true
      type:
      - str
    - description: If set to true, response will contain document level statistics.
      id: show_stats
      isRequired: true
      type:
      - bool
    return:
      description: 'The combined list of <xref:azure.ai.textanalytics.RecognizeEntitiesResult>
        and

        <xref:azure.ai.textanalytics.DocumentError> in the order the original documents

        were passed in.'
      type:
      - list[azure.ai.textanalytics.RecognizeEntitiesResult,azure.ai.textanalytics.DocumentError]
  type: method
  uid: azure.ai.textanalytics.TextAnalyticsClient.recognize_entities
- class: azure.ai.textanalytics.TextAnalyticsClient
  example:
  - "Recognize linked entities in a batch of documents.<!--[!code-python[Main](les\\\
    sample_recognize_linked_entities.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\1\\\\azure-ai-textanalytics-1.0.0\\\\samples\\\
    \\sample_recognize_linked_entities.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   from azure.core.credentials import AzureKeyCredential\n   from\
    \ azure.ai.textanalytics import TextAnalyticsClient\n\n   endpoint = os.environ[\"\
    AZURE_TEXT_ANALYTICS_ENDPOINT\"]\n   key = os.environ[\"AZURE_TEXT_ANALYTICS_KEY\"\
    ]\n\n   text_analytics_client = TextAnalyticsClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\
    \   documents = [\n       \"Microsoft moved its headquarters to Bellevue, Washington\
    \ in January 1979.\",\n       \"Steve Ballmer stepped down as CEO of Microsoft\
    \ and was succeeded by Satya Nadella.\",\n       \"Microsoft super\xF3 a Apple\
    \ Inc. como la compa\xF1\xEDa m\xE1s valiosa que cotiza en bolsa en el mundo.\"\
    ,\n   ]\n\n   result = text_analytics_client.recognize_linked_entities(documents)\n\
    \   docs = [doc for doc in result if not doc.is_error]\n\n   for idx, doc in enumerate(docs):\n\
    \       print(\"Document text: {}\\n\".format(documents[idx]))\n       for entity\
    \ in doc.entities:\n           print(\"Entity: {}\".format(entity.name))\n   \
    \        print(\"Url: {}\".format(entity.url))\n           print(\"Data Source:\
    \ {}\".format(entity.data_source))\n           for match in entity.matches:\n\
    \               print(\"Confidence Score: {}\".format(match.confidence_score))\n\
    \               print(\"Entity as appears in request: {}\".format(match.text))\n\
    \       print(\"------------------------------------------\")\n\n   ````\n"
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError or TypeError or ValueError
  fullName: azure.ai.textanalytics.TextAnalyticsClient.recognize_linked_entities
  langs:
  - python
  module: azure.ai.textanalytics
  name: recognize_linked_entities(documents, **kwargs)
  namewithoutparameters: recognize_linked_entities
  summary: 'Recognize linked entities from a well-known knowledge base for a batch
    of documents.


    Identifies and disambiguates the identity of each entity found in text (for example,

    determining whether an occurrence of the word Mars refers to the planet, or to
    the

    Roman god of war). Recognized entities are associated with URLs to a well-known

    knowledge base, like Wikipedia.


    See [https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits](https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits)

    for document length limits, maximum batch size, and supported text encoding.'
  syntax:
    content: recognize_linked_entities(documents, **kwargs)
    parameters:
    - description: 'The set of documents to process as part of this batch.

        If you wish to specify the ID and language on a per-item basis you must

        use as input a list[<xref:azure.ai.textanalytics.TextDocumentInput>] or a
        list of

        dict representations of <xref:azure.ai.textanalytics.TextDocumentInput>, like

        *{"id": "1", "language": "en", "text": "hello world"}*.'
      id: documents
      isRequired: true
      type:
      - list[str]
      - list[azure.ai.textanalytics.TextDocumentInput]
      - list[dict[str, str]]
    - description: 'The 2 letter ISO 639-1 representation of language for the

        entire batch. For example, use "en" for English; "es" for Spanish etc.

        If not set, uses "en" for English as default. Per-document language will

        take precedence over whole batch language. See [https://aka.ms/talangs](https://aka.ms/talangs)
        for

        supported languages in Text Analytics API.'
      id: language
      isRequired: true
      type:
      - str
    - description: 'This value indicates which model will

        be used for scoring, e.g. "latest", "2019-10-01". If a model-version

        is not specified, the API will default to the latest, non-preview version.'
      id: model_version
      isRequired: true
      type:
      - str
    - description: If set to true, response will contain document level statistics.
      id: show_stats
      isRequired: true
      type:
      - bool
    return:
      description: 'The combined list of <xref:azure.ai.textanalytics.RecognizeLinkedEntitiesResult>

        and <xref:azure.ai.textanalytics.DocumentError> in the order the original
        documents

        were passed in.'
      type:
      - list[azure.ai.textanalytics.RecognizeLinkedEntitiesResult,azure.ai.textanalytics.DocumentError]
  type: method
  uid: azure.ai.textanalytics.TextAnalyticsClient.recognize_linked_entities
references:
- fullName: azure.ai.textanalytics.TextAnalyticsClient.analyze_sentiment
  isExternal: false
  name: analyze_sentiment(documents, **kwargs)
  parent: azure.ai.textanalytics.TextAnalyticsClient
  uid: azure.ai.textanalytics.TextAnalyticsClient.analyze_sentiment
- fullName: azure.ai.textanalytics.TextAnalyticsClient.detect_language
  isExternal: false
  name: detect_language(documents, **kwargs)
  parent: azure.ai.textanalytics.TextAnalyticsClient
  uid: azure.ai.textanalytics.TextAnalyticsClient.detect_language
- fullName: azure.ai.textanalytics.TextAnalyticsClient.extract_key_phrases
  isExternal: false
  name: extract_key_phrases(documents, **kwargs)
  parent: azure.ai.textanalytics.TextAnalyticsClient
  uid: azure.ai.textanalytics.TextAnalyticsClient.extract_key_phrases
- fullName: azure.ai.textanalytics.TextAnalyticsClient.recognize_entities
  isExternal: false
  name: recognize_entities(documents, **kwargs)
  parent: azure.ai.textanalytics.TextAnalyticsClient
  uid: azure.ai.textanalytics.TextAnalyticsClient.recognize_entities
- fullName: azure.ai.textanalytics.TextAnalyticsClient.recognize_linked_entities
  isExternal: false
  name: recognize_linked_entities(documents, **kwargs)
  parent: azure.ai.textanalytics.TextAnalyticsClient
  uid: azure.ai.textanalytics.TextAnalyticsClient.recognize_linked_entities
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
- fullName: list[azure.ai.textanalytics.TextDocumentInput]
  name: list[TextDocumentInput]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.ai.textanalytics.TextDocumentInput
    name: TextDocumentInput
    uid: azure.ai.textanalytics.TextDocumentInput
  - fullName: ']'
    name: ']'
  uid: list[azure.ai.textanalytics.TextDocumentInput]
- fullName: list[dict[str, str]]
  name: list[dict[str, str]]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: list[dict[str, str]]
- fullName: list[azure.ai.textanalytics.AnalyzeSentimentResult,azure.ai.textanalytics.DocumentError]
  name: list[DocumentError]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.ai.textanalytics.AnalyzeSentimentResult,azure.ai.textanalytics.DocumentError
    name: DocumentError
    uid: azure.ai.textanalytics.AnalyzeSentimentResult,azure.ai.textanalytics.DocumentError
  - fullName: ']'
    name: ']'
  uid: list[azure.ai.textanalytics.AnalyzeSentimentResult,azure.ai.textanalytics.DocumentError]
- fullName: list[azure.ai.textanalytics.DetectLanguageInput]
  name: list[DetectLanguageInput]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.ai.textanalytics.DetectLanguageInput
    name: DetectLanguageInput
    uid: azure.ai.textanalytics.DetectLanguageInput
  - fullName: ']'
    name: ']'
  uid: list[azure.ai.textanalytics.DetectLanguageInput]
- fullName: list[azure.ai.textanalytics.DetectLanguageResult,azure.ai.textanalytics.DocumentError]
  name: list[DocumentError]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.ai.textanalytics.DetectLanguageResult,azure.ai.textanalytics.DocumentError
    name: DocumentError
    uid: azure.ai.textanalytics.DetectLanguageResult,azure.ai.textanalytics.DocumentError
  - fullName: ']'
    name: ']'
  uid: list[azure.ai.textanalytics.DetectLanguageResult,azure.ai.textanalytics.DocumentError]
- fullName: list[azure.ai.textanalytics.ExtractKeyPhrasesResult,azure.ai.textanalytics.DocumentError]
  name: list[DocumentError]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.ai.textanalytics.ExtractKeyPhrasesResult,azure.ai.textanalytics.DocumentError
    name: DocumentError
    uid: azure.ai.textanalytics.ExtractKeyPhrasesResult,azure.ai.textanalytics.DocumentError
  - fullName: ']'
    name: ']'
  uid: list[azure.ai.textanalytics.ExtractKeyPhrasesResult,azure.ai.textanalytics.DocumentError]
- fullName: list[azure.ai.textanalytics.RecognizeEntitiesResult,azure.ai.textanalytics.DocumentError]
  name: list[DocumentError]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.ai.textanalytics.RecognizeEntitiesResult,azure.ai.textanalytics.DocumentError
    name: DocumentError
    uid: azure.ai.textanalytics.RecognizeEntitiesResult,azure.ai.textanalytics.DocumentError
  - fullName: ']'
    name: ']'
  uid: list[azure.ai.textanalytics.RecognizeEntitiesResult,azure.ai.textanalytics.DocumentError]
- fullName: list[azure.ai.textanalytics.RecognizeLinkedEntitiesResult,azure.ai.textanalytics.DocumentError]
  name: list[DocumentError]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.ai.textanalytics.RecognizeLinkedEntitiesResult,azure.ai.textanalytics.DocumentError
    name: DocumentError
    uid: azure.ai.textanalytics.RecognizeLinkedEntitiesResult,azure.ai.textanalytics.DocumentError
  - fullName: ']'
    name: ']'
  uid: list[azure.ai.textanalytics.RecognizeLinkedEntitiesResult,azure.ai.textanalytics.DocumentError]
