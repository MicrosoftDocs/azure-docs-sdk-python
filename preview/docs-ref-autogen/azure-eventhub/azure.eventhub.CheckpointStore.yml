### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.CheckpointStore.claim_ownership
  - azure.eventhub.CheckpointStore.list_checkpoints
  - azure.eventhub.CheckpointStore.list_ownership
  - azure.eventhub.CheckpointStore.update_checkpoint
  class: azure.eventhub.CheckpointStore
  fullName: azure.eventhub.CheckpointStore
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.eventhub
  name: CheckpointStore
  summary: 'CheckpointStore deals with the interaction with the chosen storage service.


    It can list and claim partition ownerships as well as list and save checkpoints.'
  syntax: {}
  type: class
  uid: azure.eventhub.CheckpointStore
- class: azure.eventhub.CheckpointStore
  fullName: azure.eventhub.CheckpointStore.claim_ownership
  langs:
  - python
  module: azure.eventhub
  name: claim_ownership(ownership_list)
  namewithoutparameters: claim_ownership
  summary: Tries to claim ownership for a list of specified partitions.
  syntax:
    content: claim_ownership(ownership_list)
    parameters:
    - description: Iterable of dictionaries containing all the ownerships to claim.
      id: ownership_list
      isRequired: true
      type:
      - Iterable[Dict[str,Any]]
    return:
      type:
      - 'Iterable[Dict[str,Any]], Iterable of dictionaries containing partition ownership
        information:* *fully_qualified_namespace* (str): The fully qualified namespace
        that the Event Hub belongs to. The format is like "<namespace>.servicebus.windows.net".
        * *eventhub_name* (str): The name of the specific Event Hub the checkpoint
        is associated with, relative to the Event Hubs namespace that contains it.
        * *consumer_group* (str): The name of the consumer group the ownership are
        associated with. * *partition_id* (str): The partition ID which the checkpoint
        is created for. * *owner_id* (str): A UUID representing the owner attempting
        to claim this partition. * *last_modified_time* (UTC datetime.datetime): The
        last time this ownership was claimed. * *etag* (str): The Etag value for the
        last time this ownership was modified. Optional depending on storage implementation. '
  type: method
  uid: azure.eventhub.CheckpointStore.claim_ownership
- class: azure.eventhub.CheckpointStore
  fullName: azure.eventhub.CheckpointStore.list_checkpoints
  langs:
  - python
  module: azure.eventhub
  name: list_checkpoints(fully_qualified_namespace, eventhub_name, consumer_group)
  namewithoutparameters: list_checkpoints
  summary: List the updated checkpoints from the store.
  syntax:
    content: list_checkpoints(fully_qualified_namespace, eventhub_name, consumer_group)
    parameters:
    - description: 'The fully qualified namespace that the Event Hub belongs to.

        The format is like "<namespace>.servicebus.windows.net".'
      id: fully_qualified_namespace
      isRequired: true
      type:
      - str
    - description: 'The name of the specific Event Hub the checkpoints are associated
        with, relative to

        the Event Hubs namespace that contains it.'
      id: eventhub_name
      isRequired: true
      type:
      - str
    - description: The name of the consumer group the checkpoints are associated with.
      id: consumer_group
      isRequired: true
      type:
      - str
    return:
      type:
      - 'Iterable[Dict[str,Any]], Iterable of dictionaries containing partition checkpoint
        information:* *fully_qualified_namespace* (str): The fully qualified namespace
        that the Event Hub belongs to. The format is like "<namespace>.servicebus.windows.net".
        * *eventhub_name* (str): The name of the specific Event Hub the checkpoints
        are associated with, relative to the Event Hubs namespace that contains it.
        * *consumer_group* (str): The name of the consumer group the checkpoints are
        associated with. * *partition_id* (str): The partition ID which the checkpoint
        is created for. * *sequence_number* (int): The sequence number of the <xref:azure.eventhub.EventData>.
        * *offset* (str): The offset of the <xref:azure.eventhub.EventData>. '
  type: method
  uid: azure.eventhub.CheckpointStore.list_checkpoints
- class: azure.eventhub.CheckpointStore
  fullName: azure.eventhub.CheckpointStore.list_ownership
  langs:
  - python
  module: azure.eventhub
  name: list_ownership(fully_qualified_namespace, eventhub_name, consumer_group)
  namewithoutparameters: list_ownership
  summary: Retrieves a complete ownership list from the chosen storage service.
  syntax:
    content: list_ownership(fully_qualified_namespace, eventhub_name, consumer_group)
    parameters:
    - description: 'The fully qualified namespace that the Event Hub belongs to.

        The format is like "<namespace>.servicebus.windows.net".'
      id: fully_qualified_namespace
      isRequired: true
      type:
      - str
    - description: 'The name of the specific Event Hub the partition ownerships are
        associated with,

        relative to the Event Hubs namespace that contains it.'
      id: eventhub_name
      isRequired: true
      type:
      - str
    - description: The name of the consumer group the ownerships are associated with.
      id: consumer_group
      isRequired: true
      type:
      - str
    return:
      type:
      - 'Iterable[Dict[str, Any]], Iterable of dictionaries containing partition ownership
        information:* *fully_qualified_namespace* (str): The fully qualified namespace
        that the Event Hub belongs to. The format is like "<namespace>.servicebus.windows.net".
        * *eventhub_name* (str): The name of the specific Event Hub the checkpoint
        is associated with, relative to the Event Hubs namespace that contains it.
        * *consumer_group* (str): The name of the consumer group the ownership are
        associated with. * *partition_id* (str): The partition ID which the checkpoint
        is created for. * *owner_id* (str): A UUID representing the current owner
        of this partition. * *last_modified_time* (UTC datetime.datetime): The last
        time this ownership was claimed. * *etag* (str): The Etag value for the last
        time this ownership was modified. Optional depending on storage implementation. '
  type: method
  uid: azure.eventhub.CheckpointStore.list_ownership
- class: azure.eventhub.CheckpointStore
  fullName: azure.eventhub.CheckpointStore.update_checkpoint
  langs:
  - python
  module: azure.eventhub
  name: update_checkpoint(checkpoint)
  namewithoutparameters: update_checkpoint
  summary: 'Updates the checkpoint using the given information for the offset, associated
    partition and

    consumer group in the chosen storage service.


    Note: If you plan to implement a custom checkpoint store with the intention of
    running between

    cross-language EventHubs SDKs, it is recommended to persist the offset value as
    an integer.'
  syntax:
    content: update_checkpoint(checkpoint)
    parameters:
    - description: "A dict containing checkpoint information:\n\n* *fully_qualified_namespace*\
        \ (str): The fully qualified namespace that the Event Hub belongs to. The\
        \ format is like \"<namespace>.servicebus.windows.net\". \n\n* *eventhub_name*\
        \ (str): The name of the specific Event Hub the checkpoint is associated with,\
        \ relative to the Event Hubs namespace that contains it. \n\n* *consumer_group*\
        \ (str): The name of the consumer group the checkpoint is associated with.\
        \ \n\n* *partition_id* (str): The partition ID which the checkpoint is created\
        \ for. \n\n* *sequence_number* (int): The sequence number of the <xref:azure.eventhub.EventData>\
        \ the new checkpoint will be associated with. \n\n* *offset* (str): The offset\
        \ of the <xref:azure.eventhub.EventData> the new checkpoint will be associated\
        \ with."
      id: checkpoint
      isRequired: true
      type:
      - Dict[str,Any]
    return:
      type:
      - None
  type: method
  uid: azure.eventhub.CheckpointStore.update_checkpoint
references:
- fullName: azure.eventhub.CheckpointStore.claim_ownership
  isExternal: false
  name: claim_ownership(ownership_list)
  parent: azure.eventhub.CheckpointStore
  uid: azure.eventhub.CheckpointStore.claim_ownership
- fullName: azure.eventhub.CheckpointStore.list_checkpoints
  isExternal: false
  name: list_checkpoints(fully_qualified_namespace, eventhub_name, consumer_group)
  parent: azure.eventhub.CheckpointStore
  uid: azure.eventhub.CheckpointStore.list_checkpoints
- fullName: azure.eventhub.CheckpointStore.list_ownership
  isExternal: false
  name: list_ownership(fully_qualified_namespace, eventhub_name, consumer_group)
  parent: azure.eventhub.CheckpointStore
  uid: azure.eventhub.CheckpointStore.list_ownership
- fullName: azure.eventhub.CheckpointStore.update_checkpoint
  isExternal: false
  name: update_checkpoint(checkpoint)
  parent: azure.eventhub.CheckpointStore
  uid: azure.eventhub.CheckpointStore.update_checkpoint
- fullName: Iterable[Dict[str,Any]]
  name: Iterable[Dict[str,Any]]
  spec.python:
  - fullName: Iterable
    name: Iterable
    uid: Iterable
  - fullName: '['
    name: '['
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str,Any
    name: str,Any
    uid: str,Any
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: Iterable[Dict[str,Any]]
- fullName: 'Iterable[Dict[str,Any]], Iterable of dictionaries containing partition
    ownership information:* *fully_qualified_namespace* (str): The fully qualified
    namespace that the Event Hub belongs to. The format is like "<namespace>.servicebus.windows.net".
    * *eventhub_name* (str): The name of the specific Event Hub the checkpoint is
    associated with, relative to the Event Hubs namespace that contains it. * *consumer_group*
    (str): The name of the consumer group the ownership are associated with. * *partition_id*
    (str): The partition ID which the checkpoint is created for. * *owner_id* (str):
    A UUID representing the owner attempting to claim this partition. * *last_modified_time*
    (UTC datetime.datetime): The last time this ownership was claimed. * *etag* (str):
    The Etag value for the last time this ownership was modified. Optional depending
    on storage implementation. '
  name: 'Iterable[Dict[str,Any]], Iterable of dictionaries containing partition ownership
    information:* *fully_qualified_namespace* (str) * *eventhub_name* (str): The name
    of the specific Event Hub the checkpoint is associated with,  * *consumer_group*
    (str) * *partition_id* (str) * *owner_id* (str) * *last_modified_time* (datetime)
    * *etag* (str) '
  spec.python:
  - fullName: Iterable
    name: Iterable
    uid: Iterable
  - fullName: '['
    name: '['
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str,Any
    name: str,Any
    uid: str,Any
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  - fullName: ', '
    name: ', '
  - fullName: 'Iterable of dictionaries containing partition ownership information:*
      *fully_qualified_namespace* '
    name: 'Iterable of dictionaries containing partition ownership information:* *fully_qualified_namespace* '
    uid: 'Iterable of dictionaries containing partition ownership information:* *fully_qualified_namespace* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The fully qualified namespace that the Event Hub belongs to. The
      format is like "<namespace>.servicebus.windows.net". * *eventhub_name* '
    name: ' * *eventhub_name* '
    uid: ': The fully qualified namespace that the Event Hub belongs to. The format
      is like "<namespace>.servicebus.windows.net". * *eventhub_name* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The name of the specific Event Hub the checkpoint is associated with'
    name: ': The name of the specific Event Hub the checkpoint is associated with'
    uid: ': The name of the specific Event Hub the checkpoint is associated with'
  - fullName: ', '
    name: ', '
  - fullName: 'relative to the Event Hubs namespace that contains it. * *consumer_group* '
    name: ' * *consumer_group* '
    uid: 'relative to the Event Hubs namespace that contains it. * *consumer_group* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The name of the consumer group the ownership are associated with.
      * *partition_id* '
    name: ' * *partition_id* '
    uid: ': The name of the consumer group the ownership are associated with. * *partition_id* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The partition ID which the checkpoint is created for. * *owner_id* '
    name: ' * *owner_id* '
    uid: ': The partition ID which the checkpoint is created for. * *owner_id* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': A UUID representing the owner attempting to claim this partition.
      * *last_modified_time* '
    name: ' * *last_modified_time* '
    uid: ': A UUID representing the owner attempting to claim this partition. * *last_modified_time* '
  - fullName: (
    name: (
  - fullName: UTC datetime.datetime
    name: datetime
    uid: UTC datetime.datetime
  - fullName: )
    name: )
  - fullName: ': The last time this ownership was claimed. * *etag* '
    name: ' * *etag* '
    uid: ': The last time this ownership was claimed. * *etag* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The Etag value for the last time this ownership was modified. Optional
      depending on storage implementation. '
    name: ' '
    uid: ': The Etag value for the last time this ownership was modified. Optional
      depending on storage implementation. '
  uid: 'Iterable[Dict[str,Any]], Iterable of dictionaries containing partition ownership
    information:* *fully_qualified_namespace* (str): The fully qualified namespace
    that the Event Hub belongs to. The format is like "<namespace>.servicebus.windows.net".
    * *eventhub_name* (str): The name of the specific Event Hub the checkpoint is
    associated with, relative to the Event Hubs namespace that contains it. * *consumer_group*
    (str): The name of the consumer group the ownership are associated with. * *partition_id*
    (str): The partition ID which the checkpoint is created for. * *owner_id* (str):
    A UUID representing the owner attempting to claim this partition. * *last_modified_time*
    (UTC datetime.datetime): The last time this ownership was claimed. * *etag* (str):
    The Etag value for the last time this ownership was modified. Optional depending
    on storage implementation. '
- fullName: 'Iterable[Dict[str,Any]], Iterable of dictionaries containing partition
    checkpoint information:* *fully_qualified_namespace* (str): The fully qualified
    namespace that the Event Hub belongs to. The format is like "<namespace>.servicebus.windows.net".
    * *eventhub_name* (str): The name of the specific Event Hub the checkpoints are
    associated with, relative to the Event Hubs namespace that contains it. * *consumer_group*
    (str): The name of the consumer group the checkpoints are associated with. * *partition_id*
    (str): The partition ID which the checkpoint is created for. * *sequence_number*
    (int): The sequence number of the <xref:azure.eventhub.EventData>. * *offset*
    (str): The offset of the <xref:azure.eventhub.EventData>. '
  name: 'Iterable[Dict[str,Any]], Iterable of dictionaries containing partition checkpoint
    information:* *fully_qualified_namespace* (str) * *eventhub_name* (str): The name
    of the specific Event Hub the checkpoints are associated with,  * *consumer_group*
    (str) * *partition_id* (str) * *sequence_number* (int) * *offset* (str) '
  spec.python:
  - fullName: Iterable
    name: Iterable
    uid: Iterable
  - fullName: '['
    name: '['
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str,Any
    name: str,Any
    uid: str,Any
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  - fullName: ', '
    name: ', '
  - fullName: 'Iterable of dictionaries containing partition checkpoint information:*
      *fully_qualified_namespace* '
    name: 'Iterable of dictionaries containing partition checkpoint information:*
      *fully_qualified_namespace* '
    uid: 'Iterable of dictionaries containing partition checkpoint information:* *fully_qualified_namespace* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The fully qualified namespace that the Event Hub belongs to. The
      format is like "<namespace>.servicebus.windows.net". * *eventhub_name* '
    name: ' * *eventhub_name* '
    uid: ': The fully qualified namespace that the Event Hub belongs to. The format
      is like "<namespace>.servicebus.windows.net". * *eventhub_name* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The name of the specific Event Hub the checkpoints are associated
      with'
    name: ': The name of the specific Event Hub the checkpoints are associated with'
    uid: ': The name of the specific Event Hub the checkpoints are associated with'
  - fullName: ', '
    name: ', '
  - fullName: 'relative to the Event Hubs namespace that contains it. * *consumer_group* '
    name: ' * *consumer_group* '
    uid: 'relative to the Event Hubs namespace that contains it. * *consumer_group* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The name of the consumer group the checkpoints are associated with.
      * *partition_id* '
    name: ' * *partition_id* '
    uid: ': The name of the consumer group the checkpoints are associated with. *
      *partition_id* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The partition ID which the checkpoint is created for. * *sequence_number* '
    name: ' * *sequence_number* '
    uid: ': The partition ID which the checkpoint is created for. * *sequence_number* '
  - fullName: (
    name: (
  - fullName: int
    name: int
    uid: int
  - fullName: )
    name: )
  - fullName: ': The sequence number of the <xref:azure.eventhub.EventData>. * *offset* '
    name: ' * *offset* '
    uid: ': The sequence number of the <xref:azure.eventhub.EventData>. * *offset* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The offset of the <xref:azure.eventhub.EventData>. '
    name: ' '
    uid: ': The offset of the <xref:azure.eventhub.EventData>. '
  uid: 'Iterable[Dict[str,Any]], Iterable of dictionaries containing partition checkpoint
    information:* *fully_qualified_namespace* (str): The fully qualified namespace
    that the Event Hub belongs to. The format is like "<namespace>.servicebus.windows.net".
    * *eventhub_name* (str): The name of the specific Event Hub the checkpoints are
    associated with, relative to the Event Hubs namespace that contains it. * *consumer_group*
    (str): The name of the consumer group the checkpoints are associated with. * *partition_id*
    (str): The partition ID which the checkpoint is created for. * *sequence_number*
    (int): The sequence number of the <xref:azure.eventhub.EventData>. * *offset*
    (str): The offset of the <xref:azure.eventhub.EventData>. '
- fullName: 'Iterable[Dict[str, Any]], Iterable of dictionaries containing partition
    ownership information:* *fully_qualified_namespace* (str): The fully qualified
    namespace that the Event Hub belongs to. The format is like "<namespace>.servicebus.windows.net".
    * *eventhub_name* (str): The name of the specific Event Hub the checkpoint is
    associated with, relative to the Event Hubs namespace that contains it. * *consumer_group*
    (str): The name of the consumer group the ownership are associated with. * *partition_id*
    (str): The partition ID which the checkpoint is created for. * *owner_id* (str):
    A UUID representing the current owner of this partition. * *last_modified_time*
    (UTC datetime.datetime): The last time this ownership was claimed. * *etag* (str):
    The Etag value for the last time this ownership was modified. Optional depending
    on storage implementation. '
  name: 'Iterable[Dict[str, Any]], Iterable of dictionaries containing partition ownership
    information:* *fully_qualified_namespace* (str) * *eventhub_name* (str): The name
    of the specific Event Hub the checkpoint is associated with,  * *consumer_group*
    (str) * *partition_id* (str) * *owner_id* (str) * *last_modified_time* (datetime)
    * *etag* (str) '
  spec.python:
  - fullName: Iterable
    name: Iterable
    uid: Iterable
  - fullName: '['
    name: '['
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  - fullName: ', '
    name: ', '
  - fullName: 'Iterable of dictionaries containing partition ownership information:*
      *fully_qualified_namespace* '
    name: 'Iterable of dictionaries containing partition ownership information:* *fully_qualified_namespace* '
    uid: 'Iterable of dictionaries containing partition ownership information:* *fully_qualified_namespace* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The fully qualified namespace that the Event Hub belongs to. The
      format is like "<namespace>.servicebus.windows.net". * *eventhub_name* '
    name: ' * *eventhub_name* '
    uid: ': The fully qualified namespace that the Event Hub belongs to. The format
      is like "<namespace>.servicebus.windows.net". * *eventhub_name* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The name of the specific Event Hub the checkpoint is associated with'
    name: ': The name of the specific Event Hub the checkpoint is associated with'
    uid: ': The name of the specific Event Hub the checkpoint is associated with'
  - fullName: ', '
    name: ', '
  - fullName: 'relative to the Event Hubs namespace that contains it. * *consumer_group* '
    name: ' * *consumer_group* '
    uid: 'relative to the Event Hubs namespace that contains it. * *consumer_group* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The name of the consumer group the ownership are associated with.
      * *partition_id* '
    name: ' * *partition_id* '
    uid: ': The name of the consumer group the ownership are associated with. * *partition_id* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The partition ID which the checkpoint is created for. * *owner_id* '
    name: ' * *owner_id* '
    uid: ': The partition ID which the checkpoint is created for. * *owner_id* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': A UUID representing the current owner of this partition. * *last_modified_time* '
    name: ' * *last_modified_time* '
    uid: ': A UUID representing the current owner of this partition. * *last_modified_time* '
  - fullName: (
    name: (
  - fullName: UTC datetime.datetime
    name: datetime
    uid: UTC datetime.datetime
  - fullName: )
    name: )
  - fullName: ': The last time this ownership was claimed. * *etag* '
    name: ' * *etag* '
    uid: ': The last time this ownership was claimed. * *etag* '
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  - fullName: ': The Etag value for the last time this ownership was modified. Optional
      depending on storage implementation. '
    name: ' '
    uid: ': The Etag value for the last time this ownership was modified. Optional
      depending on storage implementation. '
  uid: 'Iterable[Dict[str, Any]], Iterable of dictionaries containing partition ownership
    information:* *fully_qualified_namespace* (str): The fully qualified namespace
    that the Event Hub belongs to. The format is like "<namespace>.servicebus.windows.net".
    * *eventhub_name* (str): The name of the specific Event Hub the checkpoint is
    associated with, relative to the Event Hubs namespace that contains it. * *consumer_group*
    (str): The name of the consumer group the ownership are associated with. * *partition_id*
    (str): The partition ID which the checkpoint is created for. * *owner_id* (str):
    A UUID representing the current owner of this partition. * *last_modified_time*
    (UTC datetime.datetime): The last time this ownership was claimed. * *etag* (str):
    The Etag value for the last time this ownership was modified. Optional depending
    on storage implementation. '
- fullName: Dict[str,Any]
  name: Dict[str,Any]
  spec.python:
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str,Any
    name: str,Any
    uid: str,Any
  - fullName: ']'
    name: ']'
  uid: Dict[str,Any]
