### YamlMime:PythonClass
uid: azure.eventhub.aio.EventHubProducerClient
name: EventHubProducerClient
fullName: azure.eventhub.aio.EventHubProducerClient
module: azure.eventhub.aio
inheritances:
- azure.eventhub.aio._client_base_async.ClientBaseAsync
summary: 'The EventHubProducerClient class defines a high level interface for

  sending events to the Azure Event Hubs service.'
constructor:
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified host name for the Event Hubs namespace.

      This is likely to be similar to <yournamespace>.servicebus.windows.net'
    types:
    - <xref:str>
  - name: eventhub_name
    description: The path of the specific Event Hub to connect the client to.
    types:
    - <xref:str>
  - name: credential
    description: 'The credential object used for authentication which

      implements a particular interface for getting tokens. It accepts

      <xref:azure.eventhub.aio.EventHubSharedKeyCredential>, or credential objects

      generated by the azure-identity library and objects that implement the *get_token(self,
      *scopes)* method.'
    types:
    - <xref:azure.core.credentials.TokenCredential>
  - name: logging_enable
    description: Whether to output network trace logs to the logger. Default is *False*.
    types:
    - <xref:bool>
  - name: auth_timeout
    description: 'The time in seconds to wait for a token to be authorized by the
      service.

      The default value is 60 seconds. If set to 0, no timeout will be enforced from
      the client.'
    types:
    - <xref:float>
  - name: user_agent
    description: The user agent that should be appended to the built-in user agent
      string.
    types:
    - <xref:str>
  - name: retry_total
    description: 'The total number of attempts to redo a failed operation when an
      error occurs. Default

      value is 3.'
    types:
    - <xref:int>
  - name: idle_timeout
    description: 'Timeout, in seconds, after which this client will close the underlying
      connection

      if there is no activity. By default the value is None, meaning that the client
      will not shutdown due to inactivity

      unless initiated by the service.'
    types:
    - <xref:float>
  - name: transport_type
    description: 'The type of transport protocol that will be used for communicating
      with

      the Event Hubs service. Default is *TransportType.Amqp*.'
    types:
    - <xref:azure.eventhub.TransportType>
  - name: http_proxy
    description: 'HTTP proxy settings. This must be a dictionary with the following

      keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

      Additionally the following keys may also be present: *''username'', ''password''*.'
    types:
    - <xref:dict>
examples:
- "Create a new instance of the EventHubProducerClient.<!--[!code-python[Main](les\\\
  async_samples\\sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\"\
  : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-eventhub-5.2.1\\\\samples\\\\\
  async_samples\\\\sample_code_eventhub_async.py\", \"xml:space\": \"preserve\", \"\
  language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
  : 1}} -->\n\n````python\n\n   import os\n   from azure.eventhub.aio import EventHubProducerClient,\
  \ EventHubSharedKeyCredential\n\n   fully_qualified_namespace = os.environ['EVENT_HUB_HOSTNAME']\n\
  \   eventhub_name = os.environ['EVENT_HUB_NAME']\n   shared_access_policy = os.environ['EVENT_HUB_SAS_POLICY']\n\
  \   shared_access_key = os.environ['EVENT_HUB_SAS_KEY']\n\n   producer = EventHubProducerClient(fully_qualified_namespace=fully_qualified_namespace,\n\
  \                                     eventhub_name=eventhub_name,\n           \
  \                          credential=EventHubSharedKeyCredential(shared_access_policy,\
  \ shared_access_key))\n\n   ````\n"
methods:
- uid: azure.eventhub.aio.EventHubProducerClient.close
  name: close
  summary: Close the Producer client underlying AMQP connection and links.
  signature: close() -> None
  return:
    types:
    - <xref:None>
  examples:
  - "Close down the handler.<!--[!code-python[Main](les\\async_samples\\sample_code_eventhub_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\17\\\\azure-eventhub-5.2.1\\\\samples\\\\async_samples\\\\sample_code_eventhub_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n  \
    \ from azure.eventhub.aio import EventHubProducerClient\n   from azure.eventhub\
    \ import EventData\n\n   event_hub_connection_str = os.environ['EVENT_HUB_CONN_STR']\n\
    \   eventhub_name = os.environ['EVENT_HUB_NAME']\n\n   producer = EventHubProducerClient.from_connection_string(\n\
    \       conn_str=event_hub_connection_str,\n       eventhub_name=eventhub_name\
    \  # EventHub name should be specified if it doesn't show up in connection string.\n\
    \   )\n   try:\n       event_data_batch = await producer.create_batch()\n    \
    \   while True:\n           try:\n               event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n           except ValueError:\n               # The\
    \ EventDataBatch object reaches its max_size.\n               # You can send the\
    \ full EventDataBatch object and create a new one here.\n               break\n\
    \       await producer.send_batch(event_data_batch)\n   finally:\n       # Close\
    \ down the producer handler.\n       await producer.close()\n\n   ````\n"
- uid: azure.eventhub.aio.EventHubProducerClient.create_batch
  name: create_batch
  summary: 'Create an EventDataBatch object with the max size of all content being
    constrained by max_size_in_bytes.


    The max_size_in_bytes should be no greater than the max allowed message size defined
    by the service.'
  signature: 'create_batch(*, partition_id: typing.Union[str, NoneType] = None, partition_key:
    typing.Union[str, NoneType] = None, max_size_in_bytes: typing.Union[int, NoneType]
    = None) -> azure.eventhub._common.EventDataBatch'
  parameters:
  - name: partition_id
    description: 'The specific partition ID to send to. Default is None, in which
      case the service

      will assign to all partitions using round-robin.'
    isRequired: true
    types:
    - <xref:str>
  - name: partition_key
    description: 'With the given partition_key, event data will be sent to

      a particular partition of the Event Hub decided by the service.

      If both partition_id and partition_key are provided, the partition_id will take
      precedence.'
    isRequired: true
    types:
    - <xref:str>
  - name: max_size_in_bytes
    description: 'The maximum size of bytes data that an EventDataBatch object can
      hold. By

      default, the value is determined by your Event Hubs tier.'
    isRequired: true
    types:
    - <xref:int>
  return:
    types:
    - <xref:azure.eventhub.EventDataBatch>
  examples:
  - "Create EventDataBatch object within limited size<!--[!code-python[Main](les\\\
    async_samples\\sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-eventhub-5.2.1\\\\samples\\\\\
    async_samples\\\\sample_code_eventhub_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n       from azure.eventhub import EventData\n     \
    \  event_data_batch = await producer.create_batch()\n       while True:\n    \
    \       try:\n               event_data_batch.add(EventData('Message inside EventBatchData'))\n\
    \           except ValueError:\n               # The EventDataBatch object reaches\
    \ its max_size.\n               # You can send the full EventDataBatch object\
    \ and create a new one here.\n               break\n\n   ````\n"
- uid: azure.eventhub.aio.EventHubProducerClient.from_connection_string
  name: from_connection_string
  summary: Create an EventHubProducerClient from a connection string.
  parameters:
  - name: conn_str
    description: The connection string of an Event Hub.
    isRequired: true
    types:
    - <xref:str>
  - name: eventhub_name
    description: The path of the specific Event Hub to connect the client to.
    isRequired: true
    types:
    - <xref:str>
  - name: logging_enable
    description: Whether to output network trace logs to the logger. Default is *False*.
    isRequired: true
    types:
    - <xref:bool>
  - name: http_proxy
    description: 'HTTP proxy settings. This must be a dictionary with the following

      keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

      Additionally the following keys may also be present: *''username'', ''password''*.'
    isRequired: true
    types:
    - <xref:dict>
  - name: auth_timeout
    description: 'The time in seconds to wait for a token to be authorized by the
      service.

      The default value is 60 seconds. If set to 0, no timeout will be enforced from
      the client.'
    isRequired: true
    types:
    - <xref:float>
  - name: user_agent
    description: The user agent that should be appended to the built-in user agent
      string.
    isRequired: true
    types:
    - <xref:str>
  - name: retry_total
    description: 'The total number of attempts to redo a failed operation when an
      error occurs.

      Default value is 3.'
    isRequired: true
    types:
    - <xref:int>
  - name: idle_timeout
    description: 'Timeout, in seconds, after which this client will close the underlying
      connection

      if there is no activity. By default the value is None, meaning that the client
      will not shutdown due to

      inactivity unless initiated by the service.'
    isRequired: true
    types:
    - <xref:float>
  - name: transport_type
    description: 'The type of transport protocol that will be used for communicating
      with

      the Event Hubs service. Default is *TransportType.Amqp*.'
    isRequired: true
    types:
    - <xref:azure.eventhub.TransportType>
  return:
    types:
    - <xref:azure.eventhub.aio.EventHubProducerClient>
  examples:
  - "Create a new instance of the EventHubProducerClient from connection string.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-eventhub-5.2.1\\\\samples\\\\\
    async_samples\\\\sample_code_eventhub_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   import os\n   from azure.eventhub.aio import EventHubProducerClient\n\
    \   event_hub_connection_str = os.environ['EVENT_HUB_CONN_STR']\n   eventhub_name\
    \ = os.environ['EVENT_HUB_NAME']\n   producer = EventHubProducerClient.from_connection_string(\n\
    \       conn_str=event_hub_connection_str,\n       eventhub_name=eventhub_name\
    \  # EventHub name should be specified if it doesn't show up in connection string.\n\
    \   )\n\n   ````\n"
- uid: azure.eventhub.aio.EventHubProducerClient.get_eventhub_properties
  name: get_eventhub_properties
  summary: "Get properties of the Event Hub.\n\nKeys in the returned dictionary include:\n\
    \n   * *eventhub_name* (str) \n\n   * *created_at* (UTC datetime.datetime) \n\n\
    \   * *partition_ids* (list[str])"
  signature: get_eventhub_properties() -> typing.Dict[str, typing.Any]
  return:
    types:
    - <xref:dict>
- uid: azure.eventhub.aio.EventHubProducerClient.get_partition_ids
  name: get_partition_ids
  summary: Get partition IDs of the Event Hub.
  signature: get_partition_ids() -> typing.List[str]
  return:
    types:
    - <xref:list>[<xref:str>]
- uid: azure.eventhub.aio.EventHubProducerClient.get_partition_properties
  name: get_partition_properties
  summary: "Get properties of the specified partition.\n\nKeys in the properties dictionary\
    \ include:\n\n   * *eventhub_name* (str) \n\n   * *id* (str) \n\n   * *beginning_sequence_number*\
    \ (int) \n\n   * *last_enqueued_sequence_number* (int) \n\n   * *last_enqueued_offset*\
    \ (str) \n\n   * *last_enqueued_time_utc* (UTC datetime.datetime) \n\n   * *is_empty*\
    \ (bool)"
  signature: 'get_partition_properties(partition_id: str) -> typing.Dict[str, typing.Any]'
  parameters:
  - name: partition_id
    description: The target partition ID.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:dict>
  exceptions:
  - type: azure.eventhub.exceptions.EventHubError
- uid: azure.eventhub.aio.EventHubProducerClient.send_batch
  name: send_batch
  summary: 'Sends event data and blocks until acknowledgement is received or operation
    times out.


    If you''re sending a finite list of *EventData* and you know it''s within the
    event hub

    frame size limit, you can send them with a *send_batch* call. Otherwise, use <xref:azure.eventhub.aio.EventHubProducerClient.create_batch>

    to create *EventDataBatch* and add *EventData* into the batch one by one until
    the size limit,

    and then call this method to send out the batch.'
  signature: 'send_batch(event_data_batch: typing.Union[azure.eventhub._common.EventDataBatch,
    typing.List[azure.eventhub._common.EventData]], *, timeout: typing.Union[int,
    float, NoneType] = None, **kwargs) -> None'
  parameters:
  - name: event_data_batch
    description: 'The *EventDataBatch* object to be sent or a list of *EventData*
      to be sent

      in a batch. All *EventData* in the list or *EventDataBatch* will land on the
      same partition.'
    isRequired: true
    types:
    - <xref:Union>[<xref:azure.eventhub.EventDataBatch>, <xref:List>[<xref:azure.eventhub.EventData>]]
  - name: timeout
    description: 'The maximum wait time to send the event data.

      If not specified, the default wait time specified when the producer was created
      will be used.'
    isRequired: true
    types:
    - <xref:float>
  - name: partition_id
    description: 'The specific partition ID to send to. Default is None, in which
      case the service

      will assign to all partitions using round-robin.

      A *TypeError* will be raised if partition_id is specified and event_data_batch
      is an *EventDataBatch* because

      *EventDataBatch* itself has partition_id.'
    isRequired: true
    types:
    - <xref:str>
  - name: partition_key
    description: 'With the given partition_key, event data will be sent to

      a particular partition of the Event Hub decided by the service.

      A *TypeError* will be raised if partition_key is specified and event_data_batch
      is an *EventDataBatch* because

      *EventDataBatch* itself has partition_key.

      If both partition_id and partition_key are provided, the partition_id will take
      precedence.'
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:None>
  exceptions:
  - type: azure.eventhub.exceptions.AuthenticationError
  - type: azure.eventhub.exceptions.AuthenticationError
  examples:
  - "Asynchronously sends event data<!--[!code-python[Main](les\\async_samples\\sample_code_eventhub_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\17\\\\azure-eventhub-5.2.1\\\\samples\\\\async_samples\\\\sample_code_eventhub_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n       async with\
    \ producer:\n           event_data_batch = await producer.create_batch()\n   \
    \        while True:\n               try:\n                   event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n               except ValueError:\n              \
    \     # The EventDataBatch object reaches its max_size.\n                   #\
    \ You can send the full EventDataBatch object and create a new one here.\n   \
    \                break\n           await producer.send_batch(event_data_batch)\n\
    \n   ````\n"
