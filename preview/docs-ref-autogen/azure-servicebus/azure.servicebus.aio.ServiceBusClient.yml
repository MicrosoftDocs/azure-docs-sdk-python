### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.aio.ServiceBusClient.close
  - azure.servicebus.aio.ServiceBusClient.from_connection_string
  - azure.servicebus.aio.ServiceBusClient.get_queue_deadletter_receiver
  - azure.servicebus.aio.ServiceBusClient.get_queue_receiver
  - azure.servicebus.aio.ServiceBusClient.get_queue_sender
  - azure.servicebus.aio.ServiceBusClient.get_queue_session_receiver
  - azure.servicebus.aio.ServiceBusClient.get_subscription_deadletter_receiver
  - azure.servicebus.aio.ServiceBusClient.get_subscription_receiver
  - azure.servicebus.aio.ServiceBusClient.get_subscription_session_receiver
  - azure.servicebus.aio.ServiceBusClient.get_topic_sender
  class: azure.servicebus.aio.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusClient.<!--[!code-python[Main](les\\async_samples\\\
    sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b4\\\\samples\\\\async_samples\\\
    \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   import os\n   from azure.servicebus.aio import ServiceBusClient,\
    \ ServiceBusSharedKeyCredential\n   fully_qualified_namespace = os.environ['SERVICE_BUS_FULLY_QUALIFIED_NAMESPACE']\n\
    \   shared_access_policy = os.environ['SERVICE_BUS_SAS_POLICY']\n   shared_access_key\
    \ = os.environ['SERVICE_BUS_SAS_KEY']\n   servicebus_client = ServiceBusClient(\n\
    \       fully_qualified_namespace=fully_qualified_namespace,\n       credential=ServiceBusSharedKeyCredential(\n\
    \           shared_access_policy,\n           shared_access_key\n       )\n  \
    \ )\n\n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.servicebus.aio
  name: ServiceBusClient
  summary: 'The ServiceBusClient class defines a high level interface for

    getting ServiceBusSender and ServiceBusReceiver.'
  syntax:
    content: ServiceBusClient(fully_qualified_namespace, credential, **kwargs)
    parameters:
    - description: 'The fully qualified host name for the Service Bus namespace.

        The namespace format is: *<yournamespace>.servicebus.windows.net*.'
      id: fully_qualified_namespace
      type:
      - str
    - description: 'The credential object used for authentication which

        implements a particular interface for getting tokens. It accepts

        <xref:azure.servicebus.ServiceBusSharedKeyCredential>, or credential objects

        generated by the azure-identity library and objects that implement the *get_token(self,
        *scopes)* method.'
      id: credential
      type:
      - azure.core.credentials.TokenCredential
    - description: 'Optional entity name, this can be the name of Queue or Topic.

        It must be specified if the credential is for specific Queue or Topic.'
      id: entity_name
      type:
      - str
    - description: Whether to output network trace logs to the logger. Default is
        *False*.
      id: logging_enable
      type:
      - bool
    - description: 'The type of transport protocol that will be used for communicating
        with

        the Service Bus service. Default is *TransportType.Amqp*.'
      id: transport_type
      type:
      - azure.servicebus.TransportType
    - description: 'HTTP proxy settings. This must be a dictionary with the following

        keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

        Additionally the following keys may also be present: *''username'', ''password''*.'
      id: http_proxy
      type:
      - dict
    variables:
    - description: 'The fully qualified host name for the Service Bus namespace.

        The namespace format is: *<yournamespace>.servicebus.windows.net*.'
      id: fully_qualified_namespace
      type:
      - str
  type: class
  uid: azure.servicebus.aio.ServiceBusClient
- class: azure.servicebus.aio.ServiceBusClient
  fullName: azure.servicebus.aio.ServiceBusClient.close
  langs:
  - python
  module: azure.servicebus.aio
  name: close()
  namewithoutparameters: close
  summary: Close down the ServiceBus client.
  syntax:
    content: close()
    parameters: []
    return:
      description: None
  type: method
  uid: azure.servicebus.aio.ServiceBusClient.close
- class: azure.servicebus.aio.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusClient from connection string.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b4\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus.aio\
    \ import ServiceBusClient\n   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n\
    \   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusClient.from_connection_string
  langs:
  - python
  module: azure.servicebus.aio
  name: from_connection_string(conn_str, **kwargs)
  namewithoutparameters: from_connection_string
  summary: Create a ServiceBusClient from a connection string.
  syntax:
    content: from_connection_string(conn_str, **kwargs)
    parameters:
    - description: The connection string of a Service Bus.
      id: conn_str
      isRequired: true
    - description: 'Optional entity name, this can be the name of Queue or Topic.

        It must be specified if the credential is for specific Queue or Topic.'
      id: entity_name
      isRequired: true
      type:
      - str
    - description: Whether to output network trace logs to the logger. Default is
        *False*.
      id: logging_enable
      isRequired: true
      type:
      - bool
    - description: 'The type of transport protocol that will be used for communicating
        with

        the Service Bus service. Default is *TransportType.Amqp*.'
      id: transport_type
      isRequired: true
      type:
      - azure.servicebus.TransportType
    - description: 'HTTP proxy settings. This must be a dictionary with the following

        keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

        Additionally the following keys may also be present: *''username'', ''password''*.'
      id: http_proxy
      isRequired: true
      type:
      - dict
    return:
      type:
      - azure.servicebus.aio.ServiceBusClient
  type: method
  uid: azure.servicebus.aio.ServiceBusClient.from_connection_string
- class: azure.servicebus.aio.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusReceiver for Dead Letter Queue from ServiceBusClient.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b4\\\\samples\\\
    \\sync_samples\\\\sample_code_servicebus.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n\n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusClient.get_queue_deadletter_receiver
  langs:
  - python
  module: azure.servicebus.aio
  name: get_queue_deadletter_receiver(queue_name, **kwargs)
  namewithoutparameters: get_queue_deadletter_receiver
  summary: "Get ServiceBusReceiver for the dead-letter queue which is the secondary\
    \ subqueue provided by\n   the specific Queue, it holds messages that can't be\
    \ delivered to any receiver or messages that can't\n   be processed."
  syntax:
    content: get_queue_deadletter_receiver(queue_name, **kwargs)
    parameters:
    - description: The path of specific Service Bus Queue the client connects to.
      id: queue_name
      isRequired: true
      type:
      - str
    - description: 'The mode with which messages will be retrieved from the entity.
        The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the queue. Messages received
        with ReceiveAndDelete

        will be immediately removed from the queue, and cannot be subsequently rejected
        or re-received if

        the client fails to process the message. The default mode is PeekLock.'
      id: mode
      isRequired: true
      type:
      - azure.servicebus.ReceiveSettleMode
    - description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically shutdown. The default value is 0, meaning no timeout.'
      id: idle_timeout
      isRequired: true
      type:
      - float
    - description: 'The total number of attempts to redo a failed operation when an
        error occurs.

        Default value is 3.'
      id: retry_total
      isRequired: true
      type:
      - int
    - description: 'Delta back-off internal in the unit of second between retries.

        Default value is 0.8.'
      id: retry_backoff_factor
      isRequired: true
      type:
      - float
    - description: Maximum back-off interval in the unit of second. Default value
        is 120.
      id: retry_backoff_max
      isRequired: true
      type:
      - float
    - description: 'Whether to connect to the transfer dead-letter queue, or the standard

        dead-letter queue. The transfer dead letter queue holds messages that have
        failed to be transferred in

        ForwardTo or SendVia scenarios. Default is False, using the standard dead-letter
        endpoint.'
      id: transfer_deadletter
      isRequired: true
      type:
      - bool
    - description: 'The maximum number of messages to cache with each request to the
        service.

        This setting is only for advanced performance tuning. Increasing this value
        will improve message throughput

        performance but increase the chance that messages will expire while they are
        cached if they''re not

        processed fast enough.

        The default value is 0, meaning messages will be received from the service
        and processed one at a time.

        In the case of prefetch being 0, *ServiceBusReceiver.receive* would try to
        cache *max_batch_size* (if provided)

        within its request to the service.'
      id: prefetch
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.servicebus.aio.ServiceBusReceiver
  type: method
  uid: azure.servicebus.aio.ServiceBusClient.get_queue_deadletter_receiver
- class: azure.servicebus.aio.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusSender from ServiceBusClient.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b4\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus.aio\
    \ import ServiceBusClient\n   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n\
    \   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n   servicebus_client =\
    \ ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   async with servicebus_client:\n       queue_receiver = servicebus_client.get_queue_receiver(queue_name=queue_name)\n\
    \n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusClient.get_queue_receiver
  langs:
  - python
  module: azure.servicebus.aio
  name: get_queue_receiver(queue_name, **kwargs)
  namewithoutparameters: get_queue_receiver
  summary: Get ServiceBusReceiver for the specific queue.
  syntax:
    content: get_queue_receiver(queue_name, **kwargs)
    parameters:
    - description: The path of specific Service Bus Queue the client connects to.
      id: queue_name
      isRequired: true
      type:
      - str
    - description: 'The mode with which messages will be retrieved from the entity.
        The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the queue. Messages received
        with ReceiveAndDelete

        will be immediately removed from the queue, and cannot be subsequently rejected
        or re-received if

        the client fails to process the message. The default mode is PeekLock.'
      id: mode
      isRequired: true
      type:
      - azure.servicebus.ReceiveSettleMode
    - description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically shutdown. The default value is 0, meaning no timeout.'
      id: idle_timeout
      isRequired: true
      type:
      - float
    - description: 'The total number of attempts to redo a failed operation when an
        error occurs.

        Default value is 3.'
      id: retry_total
      isRequired: true
      type:
      - int
    - description: 'The maximum number of messages to cache with each request to the
        service.

        This setting is only for advanced performance tuning. Increasing this value
        will improve message throughput

        performance but increase the chance that messages will expire while they are
        cached if they''re not

        processed fast enough.

        The default value is 0, meaning messages will be received from the service
        and processed one at a time.

        In the case of prefetch being 0, *ServiceBusReceiver.receive* would try to
        cache *max_batch_size* (if provided)

        within its request to the service.'
      id: prefetch
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.servicebus.aio.ServiceBusReceiver
  type: method
  uid: azure.servicebus.aio.ServiceBusClient.get_queue_receiver
- class: azure.servicebus.aio.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusClient from connection string.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b4\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus.aio\
    \ import ServiceBusClient\n   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n\
    \   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n   servicebus_client =\
    \ ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   async with servicebus_client:\n       queue_sender = servicebus_client.get_queue_sender(queue_name=queue_name)\n\
    \n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusClient.get_queue_sender
  langs:
  - python
  module: azure.servicebus.aio
  name: get_queue_sender(queue_name, **kwargs)
  namewithoutparameters: get_queue_sender
  summary: Get ServiceBusSender for the specific queue.
  syntax:
    content: get_queue_sender(queue_name, **kwargs)
    parameters:
    - description: The path of specific Service Bus Queue the client connects to.
      id: queue_name
      isRequired: true
      type:
      - str
    - description: 'The total number of attempts to redo a failed operation when an
        error occurs.

        Default value is 3.'
      id: retry_total
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.servicebus.aio.ServiceBusSender
  type: method
  uid: azure.servicebus.aio.ServiceBusClient.get_queue_sender
- class: azure.servicebus.aio.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusSender from ServiceBusClient.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b4\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus.aio\
    \ import ServiceBusClient\n   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n\
    \   queue_name = os.environ['SERVICE_BUS_QUEUE_NAME']\n   servicebus_client =\
    \ ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   async with servicebus_client:\n       queue_sender = servicebus_client.get_queue_sender(queue_name=queue_name)\n\
    \n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusClient.get_queue_session_receiver
  langs:
  - python
  module: azure.servicebus.aio
  name: get_queue_session_receiver(queue_name, session_id=None, **kwargs)
  namewithoutparameters: get_queue_session_receiver
  summary: Get ServiceBusSessionReceiver for the specific queue.
  syntax:
    content: get_queue_session_receiver(queue_name, session_id=None, **kwargs)
    parameters:
    - description: The path of specific Service Bus Queue the client connects to.
      id: queue_name
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: 'A specific session from which to receive. This must be specified
        for a

        sessionful entity, otherwise it must be None. In order to receive messages
        from the next available

        session, set this to None.  The default is None.'
      id: session_id
      type:
      - str
    - description: 'The mode with which messages will be retrieved from the entity.
        The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the queue. Messages received
        with ReceiveAndDelete

        will be immediately removed from the queue, and cannot be subsequently rejected
        or re-received if

        the client fails to process the message. The default mode is PeekLock.'
      id: mode
      isRequired: true
      type:
      - azure.servicebus.ReceiveSettleMode
    - description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically shutdown. The default value is 0, meaning no timeout.'
      id: idle_timeout
      isRequired: true
      type:
      - float
    - description: 'The total number of attempts to redo a failed operation when an
        error occurs.

        Default value is 3.'
      id: retry_total
      isRequired: true
      type:
      - int
    - description: 'The maximum number of messages to cache with each request to the
        service.

        This setting is only for advanced performance tuning. Increasing this value
        will improve message throughput

        performance but increase the chance that messages will expire while they are
        cached if they''re not

        processed fast enough.

        The default value is 0, meaning messages will be received from the service
        and processed one at a time.

        In the case of prefetch being 0, *ServiceBusReceiver.receive* would try to
        cache *max_batch_size* (if provided)

        within its request to the service.'
      id: prefetch
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.servicebus.aio.ServiceBusSessionReceiver
  type: method
  uid: azure.servicebus.aio.ServiceBusClient.get_queue_session_receiver
- class: azure.servicebus.aio.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusReceiver for Dead Letter Queue from ServiceBusClient.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b4\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus\
    \ import ServiceBusClient\n   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n\
    \   topic_name = os.environ[\"SERVICE_BUS_TOPIC_NAME\"]\n   subscription_name\
    \ = os.environ[\"SERVICE_BUS_SUBSCRIPTION_NAME\"]\n   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   async with servicebus_client:\n       subscription_receiver = servicebus_client.get_subscription_deadletter_receiver(\n\
    \           topic_name=topic_name,\n           subscription_name=subscription_name,\n\
    \       )\n\n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusClient.get_subscription_deadletter_receiver
  langs:
  - python
  module: azure.servicebus.aio
  name: get_subscription_deadletter_receiver(topic_name, subscription_name, **kwargs)
  namewithoutparameters: get_subscription_deadletter_receiver
  summary: "Get ServiceBusReceiver for the dead-letter queue which is the secondary\
    \ subqueue provided by\n   the specific topic subscription, it holds messages\
    \ that can't be delivered to any receiver or messages that\n   can't be processed."
  syntax:
    content: get_subscription_deadletter_receiver(topic_name, subscription_name, **kwargs)
    parameters:
    - description: The name of specific Service Bus Topic the client connects to.
      id: topic_name
      isRequired: true
      type:
      - str
    - description: 'The name of specific Service Bus Subscription

        under the given Service Bus Topic.'
      id: subscription_name
      isRequired: true
      type:
      - str
    - description: 'The mode with which messages will be retrieved from the entity.
        The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the subscription. Messages received
        with ReceiveAndDelete

        will be immediately removed from the subscription, and cannot be subsequently
        rejected or re-received if

        the client fails to process the message. The default mode is PeekLock.'
      id: mode
      isRequired: true
      type:
      - azure.servicebus.ReceiveSettleMode
    - description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically shutdown. The default value is 0, meaning no timeout.'
      id: idle_timeout
      isRequired: true
      type:
      - float
    - description: 'The total number of attempts to redo a failed operation when an
        error occurs.

        Default value is 3.'
      id: retry_total
      isRequired: true
      type:
      - int
    - description: 'Delta back-off internal in the unit of second between retries.

        Default value is 0.8.'
      id: retry_backoff_factor
      isRequired: true
      type:
      - float
    - description: Maximum back-off interval in the unit of second. Default value
        is 120.
      id: retry_backoff_max
      isRequired: true
      type:
      - float
    - description: 'Whether to connect to the transfer dead-letter queue, or the standard

        dead-letter queue. The transfer dead letter queue holds messages that have
        failed to be transferred in

        ForwardTo or SendVia scenarios. Default is False, using the standard dead-letter
        endpoint.'
      id: transfer_deadletter
      isRequired: true
      type:
      - bool
    - description: 'The maximum number of messages to cache with each request to the
        service.

        This setting is only for advanced performance tuning. Increasing this value
        will improve message throughput

        performance but increase the chance that messages will expire while they are
        cached if they''re not

        processed fast enough.

        The default value is 0, meaning messages will be received from the service
        and processed one at a time.

        In the case of prefetch being 0, *ServiceBusReceiver.receive* would try to
        cache *max_batch_size* (if provided)

        within its request to the service.'
      id: prefetch
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.servicebus.aio.ServiceBusReceiver
  type: method
  uid: azure.servicebus.aio.ServiceBusClient.get_subscription_deadletter_receiver
- class: azure.servicebus.aio.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusReceiver from ServiceBusClient.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b4\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus\
    \ import ServiceBusClient\n   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n\
    \   topic_name = os.environ[\"SERVICE_BUS_TOPIC_NAME\"]\n   subscription_name\
    \ = os.environ[\"SERVICE_BUS_SUBSCRIPTION_NAME\"]\n   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   async with servicebus_client:\n       subscription_receiver = servicebus_client.get_subscription_receiver(\n\
    \           topic_name=topic_name,\n           subscription_name=subscription_name,\n\
    \       )\n\n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusClient.get_subscription_receiver
  langs:
  - python
  module: azure.servicebus.aio
  name: get_subscription_receiver(topic_name, subscription_name, **kwargs)
  namewithoutparameters: get_subscription_receiver
  summary: Get ServiceBusReceiver for the specific subscription under the topic.
  syntax:
    content: get_subscription_receiver(topic_name, subscription_name, **kwargs)
    parameters:
    - description: The name of specific Service Bus Topic the client connects to.
      id: topic_name
      isRequired: true
      type:
      - str
    - description: 'The name of specific Service Bus Subscription

        under the given Service Bus Topic.'
      id: subscription_name
      isRequired: true
      type:
      - str
    - description: 'The mode with which messages will be retrieved from the entity.
        The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the subscription. Messages received
        with ReceiveAndDelete

        will be immediately removed from the subscription, and cannot be subsequently
        rejected or re-received if

        the client fails to process the message. The default mode is PeekLock.'
      id: mode
      isRequired: true
      type:
      - azure.servicebus.ReceiveSettleMode
    - description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically shutdown. The default value is 0, meaning no timeout.'
      id: idle_timeout
      isRequired: true
      type:
      - float
    - description: 'The total number of attempts to redo a failed operation when an
        error occurs.

        Default value is 3.'
      id: retry_total
      isRequired: true
      type:
      - int
    - description: 'Delta back-off internal in the unit of second between retries.

        Default value is 0.8.'
      id: retry_backoff_factor
      isRequired: true
      type:
      - float
    - description: Maximum back-off interval in the unit of second. Default value
        is 120.
      id: retry_backoff_max
      isRequired: true
      type:
      - float
    - description: 'The maximum number of messages to cache with each request to the
        service.

        This setting is only for advanced performance tuning. Increasing this value
        will improve message throughput

        performance but increase the chance that messages will expire while they are
        cached if they''re not

        processed fast enough.

        The default value is 0, meaning messages will be received from the service
        and processed one at a time.

        In the case of prefetch being 0, *ServiceBusReceiver.receive* would try to
        cache *max_batch_size* (if provided)

        within its request to the service.'
      id: prefetch
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.servicebus.aio.ServiceBusReceiver
  type: method
  uid: azure.servicebus.aio.ServiceBusClient.get_subscription_receiver
- class: azure.servicebus.aio.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusReceiver from ServiceBusClient.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b4\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus\
    \ import ServiceBusClient\n   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n\
    \   topic_name = os.environ[\"SERVICE_BUS_TOPIC_NAME\"]\n   subscription_name\
    \ = os.environ[\"SERVICE_BUS_SUBSCRIPTION_NAME\"]\n   servicebus_client = ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   async with servicebus_client:\n       subscription_receiver = servicebus_client.get_subscription_receiver(\n\
    \           topic_name=topic_name,\n           subscription_name=subscription_name,\n\
    \       )\n\n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusClient.get_subscription_session_receiver
  langs:
  - python
  module: azure.servicebus.aio
  name: get_subscription_session_receiver(topic_name, subscription_name, session_id=None,
    **kwargs)
  namewithoutparameters: get_subscription_session_receiver
  summary: Get ServiceBusReceiver for the specific subscription under the topic.
  syntax:
    content: get_subscription_session_receiver(topic_name, subscription_name, session_id=None,
      **kwargs)
    parameters:
    - description: The name of specific Service Bus Topic the client connects to.
      id: topic_name
      isRequired: true
      type:
      - str
    - description: 'The name of specific Service Bus Subscription

        under the given Service Bus Topic.'
      id: subscription_name
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: 'A specific session from which to receive. This must be specified
        for a

        sessionful entity, otherwise it must be None. In order to receive messages
        from the next available

        session, set this to None.  The default is None.'
      id: session_id
      type:
      - str
    - description: 'The mode with which messages will be retrieved from the entity.
        The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the subscription. Messages received
        with ReceiveAndDelete

        will be immediately removed from the subscription, and cannot be subsequently
        rejected or re-received if

        the client fails to process the message. The default mode is PeekLock.'
      id: mode
      isRequired: true
      type:
      - azure.servicebus.ReceiveSettleMode
    - description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically shutdown. The default value is 0, meaning no timeout.'
      id: idle_timeout
      isRequired: true
      type:
      - float
    - description: 'The total number of attempts to redo a failed operation when an
        error occurs.

        Default value is 3.'
      id: retry_total
      isRequired: true
      type:
      - int
    - description: 'Delta back-off internal in the unit of second between retries.

        Default value is 0.8.'
      id: retry_backoff_factor
      isRequired: true
      type:
      - float
    - description: Maximum back-off interval in the unit of second. Default value
        is 120.
      id: retry_backoff_max
      isRequired: true
      type:
      - float
    - description: 'The maximum number of messages to cache with each request to the
        service.

        This setting is only for advanced performance tuning. Increasing this value
        will improve message throughput

        performance but increase the chance that messages will expire while they are
        cached if they''re not

        processed fast enough.

        The default value is 0, meaning messages will be received from the service
        and processed one at a time.

        In the case of prefetch being 0, *ServiceBusReceiver.receive* would try to
        cache *max_batch_size* (if provided)

        within its request to the service.'
      id: prefetch
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.servicebus.aio.ServiceBusSessionReceiver
  type: method
  uid: azure.servicebus.aio.ServiceBusClient.get_subscription_session_receiver
- class: azure.servicebus.aio.ServiceBusClient
  example:
  - "Create a new instance of the ServiceBusSender from ServiceBusClient.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\8\\\\azure-servicebus-7.0.0b4\\\
    \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n   from azure.servicebus\
    \ import ServiceBusClient\n   servicebus_connection_str = os.environ['SERVICE_BUS_CONNECTION_STR']\n\
    \   topic_name = os.environ['SERVICE_BUS_TOPIC_NAME']\n   servicebus_client =\
    \ ServiceBusClient.from_connection_string(conn_str=servicebus_connection_str)\n\
    \   async with servicebus_client:\n       topic_sender = servicebus_client.get_topic_sender(topic_name=topic_name)\n\
    \n   ````\n"
  fullName: azure.servicebus.aio.ServiceBusClient.get_topic_sender
  langs:
  - python
  module: azure.servicebus.aio
  name: get_topic_sender(topic_name, **kwargs)
  namewithoutparameters: get_topic_sender
  summary: Get ServiceBusSender for the specific topic.
  syntax:
    content: get_topic_sender(topic_name, **kwargs)
    parameters:
    - description: The path of specific Service Bus Topic the client connects to.
      id: topic_name
      isRequired: true
      type:
      - str
    - description: 'The total number of attempts to redo a failed operation when an
        error occurs.

        Default value is 3.'
      id: retry_total
      isRequired: true
      type:
      - int
    - description: 'Delta back-off internal in the unit of second between retries.

        Default value is 0.8.'
      id: retry_backoff_factor
      isRequired: true
      type:
      - float
    - description: Maximum back-off interval in the unit of second. Default value
        is 120.
      id: retry_backoff_max
      isRequired: true
      type:
      - float
    return:
      type:
      - azure.servicebus.aio.ServiceBusSender
  type: method
  uid: azure.servicebus.aio.ServiceBusClient.get_topic_sender
references:
- fullName: azure.servicebus.aio.ServiceBusClient.close
  isExternal: false
  name: close()
  parent: azure.servicebus.aio.ServiceBusClient
  uid: azure.servicebus.aio.ServiceBusClient.close
- fullName: azure.servicebus.aio.ServiceBusClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, **kwargs)
  parent: azure.servicebus.aio.ServiceBusClient
  uid: azure.servicebus.aio.ServiceBusClient.from_connection_string
- fullName: azure.servicebus.aio.ServiceBusClient.get_queue_deadletter_receiver
  isExternal: false
  name: get_queue_deadletter_receiver(queue_name, **kwargs)
  parent: azure.servicebus.aio.ServiceBusClient
  uid: azure.servicebus.aio.ServiceBusClient.get_queue_deadletter_receiver
- fullName: azure.servicebus.aio.ServiceBusClient.get_queue_receiver
  isExternal: false
  name: get_queue_receiver(queue_name, **kwargs)
  parent: azure.servicebus.aio.ServiceBusClient
  uid: azure.servicebus.aio.ServiceBusClient.get_queue_receiver
- fullName: azure.servicebus.aio.ServiceBusClient.get_queue_sender
  isExternal: false
  name: get_queue_sender(queue_name, **kwargs)
  parent: azure.servicebus.aio.ServiceBusClient
  uid: azure.servicebus.aio.ServiceBusClient.get_queue_sender
- fullName: azure.servicebus.aio.ServiceBusClient.get_queue_session_receiver
  isExternal: false
  name: get_queue_session_receiver(queue_name, session_id=None, **kwargs)
  parent: azure.servicebus.aio.ServiceBusClient
  uid: azure.servicebus.aio.ServiceBusClient.get_queue_session_receiver
- fullName: azure.servicebus.aio.ServiceBusClient.get_subscription_deadletter_receiver
  isExternal: false
  name: get_subscription_deadletter_receiver(topic_name, subscription_name, **kwargs)
  parent: azure.servicebus.aio.ServiceBusClient
  uid: azure.servicebus.aio.ServiceBusClient.get_subscription_deadletter_receiver
- fullName: azure.servicebus.aio.ServiceBusClient.get_subscription_receiver
  isExternal: false
  name: get_subscription_receiver(topic_name, subscription_name, **kwargs)
  parent: azure.servicebus.aio.ServiceBusClient
  uid: azure.servicebus.aio.ServiceBusClient.get_subscription_receiver
- fullName: azure.servicebus.aio.ServiceBusClient.get_subscription_session_receiver
  isExternal: false
  name: get_subscription_session_receiver(topic_name, subscription_name, session_id=None,
    **kwargs)
  parent: azure.servicebus.aio.ServiceBusClient
  uid: azure.servicebus.aio.ServiceBusClient.get_subscription_session_receiver
- fullName: azure.servicebus.aio.ServiceBusClient.get_topic_sender
  isExternal: false
  name: get_topic_sender(topic_name, **kwargs)
  parent: azure.servicebus.aio.ServiceBusClient
  uid: azure.servicebus.aio.ServiceBusClient.get_topic_sender
