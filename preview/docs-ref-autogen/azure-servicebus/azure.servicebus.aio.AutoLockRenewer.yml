### YamlMime:PythonClass
uid: azure.servicebus.aio.AutoLockRenewer
name: AutoLockRenewer
fullName: azure.servicebus.aio.AutoLockRenewer
module: azure.servicebus.aio
inheritances:
- builtins.object
summary: 'Auto lock renew.


  An asynchronous AutoLockRenewer handler for renewing the lock

  tokens of messages and/or sessions in the background.'
constructor:
  syntax: 'AutoLockRenewer(max_lock_renewal_duration: float = 300, on_lock_renew_failure:
    typing.Union[typing.Callable[[typing.Union[azure.servicebus.aio._servicebus_session_async.ServiceBusSession,
    azure.servicebus._common.message.ServiceBusReceivedMessage], typing.Union[Exception,
    NoneType]], typing.Awaitable[NoneType]], NoneType] = None, loop: typing.Union[asyncio.events.AbstractEventLoop,
    NoneType] = None) -> None'
  parameters:
  - name: max_lock_renewal_duration
    description: 'A time in seconds that locks registered to this renewer

      should be maintained for. Default value is 300 (5 minutes).'
    types:
    - <xref:float>
  - name: on_lock_renew_failure
    description: 'A callback may be specified to be called when the lock is lost on
      the renewable

      that is being registered. Default value is None (no callback).'
    types:
    - <xref:Optional>[<xref:LockRenewFailureCallback>]
  - name: loop
    description: An async event loop.
    types:
    - <xref:Optional>[<xref:asyncio.AbstractEventLoop>]
examples:
- "Automatically renew a message lock<!--[!code-python[Main](les\\async_samples\\\
  sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\
  \\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.1\\\\samples\\\\async_samples\\\
  \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"language\":\
  \ \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
  \n````python\n\n   from azure.servicebus.aio import AutoLockRenewer\n\n   lock_renewal\
  \ = AutoLockRenewer()\n   async with servicebus_receiver:\n       async for message\
  \ in servicebus_receiver:\n           lock_renewal.register(servicebus_receiver,\
  \ message, max_lock_renewal_duration=60)\n           await process_message(message)\n\
  \           await servicebus_receiver.complete_message(message)\n\n   ````\n\nAutomatically\
  \ renew a session lock<!--[!code-python[Main](les\\async_samples\\sample_code_servicebus_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\5\\\\azure-servicebus-7.0.1\\\
  \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\":\
  \ \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
  : {\"linenostart\": 1}} -->\n\n````python\n\n       from azure.servicebus.aio import\
  \ AutoLockRenewer\n\n       lock_renewal = AutoLockRenewer()\n       async with\
  \ servicebus_client.get_queue_receiver(queue_name=queue_name, session_id=session_id)\
  \ as receiver:\n           session = receiver.session\n           # Auto renew session\
  \ lock for 2 minutes\n           lock_renewal.register(receiver, session, max_lock_renewal_duration=120)\n\
  \           async for message in receiver:\n               await process_message(message)\n\
  \               await receiver.complete_message(message)\n\n   ````\n"
methods:
- uid: azure.servicebus.aio.AutoLockRenewer.close
  name: close
  summary: Cease autorenewal by cancelling any remaining open lock renewal futures.
  signature: close() -> None
- uid: azure.servicebus.aio.AutoLockRenewer.register
  name: register
  summary: Register a renewable entity for automatic lock renewal.
  signature: 'register(receiver: azure.servicebus.aio._servicebus_receiver_async.ServiceBusReceiver,
    renewable: typing.Union[azure.servicebus._common.message.ServiceBusReceivedMessage,
    azure.servicebus.aio._servicebus_session_async.ServiceBusSession], max_lock_renewal_duration:
    typing.Union[float, NoneType] = None, on_lock_renew_failure: typing.Union[typing.Callable[[typing.Union[azure.servicebus.aio._servicebus_session_async.ServiceBusSession,
    azure.servicebus._common.message.ServiceBusReceivedMessage], typing.Union[Exception,
    NoneType]], typing.Awaitable[NoneType]], NoneType] = None) -> None'
  parameters:
  - name: receiver
    description: 'The ServiceBusReceiver instance that is associated with the message
      or the session to

      be auto-lock-renewed.'
    isRequired: true
    types:
    - <xref:azure.servicebus.aio.ServiceBusReceiver>
  - name: renewable
    description: A locked entity that needs to be renewed.
    isRequired: true
    types:
    - <xref:Union>[<xref:azure.servicebus.aio.ServiceBusReceivedMessage,azure.servicebus.aio.ServiceBusSession>]
  - name: max_lock_renewal_duration
    description: 'A time in seconds that locks registered to this renewer

      should be maintained for. Default value is 300 (5 minutes).'
    defaultValue: None
    types:
    - <xref:Optional>[<xref:float>]
  - name: on_lock_renew_failure
    description: 'An async callback may be specified to be called when the lock is
      lost on the renewable being registered.

      Default value is None (no callback).

      :rtype: None'
    defaultValue: None
    types:
    - <xref:Optional>[<xref:AsyncLockRenewFailureCallback>]
