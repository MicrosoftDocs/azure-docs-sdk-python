### YamlMime:PythonClass
uid: corehttp.credentials.AsyncTokenCredential
name: AsyncTokenCredential
fullName: corehttp.credentials.AsyncTokenCredential
module: corehttp.credentials
inheritances:
- typing_extensions.Protocol
- contextlib.AbstractAsyncContextManager
- typing.Generic
summary: Protocol for classes able to provide OAuth tokens.
constructor:
  syntax: AsyncTokenCredential(*args, **kwargs)
methods:
- uid: corehttp.credentials.AsyncTokenCredential.close
  name: close
  signature: async close() -> None
- uid: corehttp.credentials.AsyncTokenCredential.get_token
  name: get_token
  summary: Request an access token for *scopes*.
  signature: 'async get_token(*scopes: str, claims: str | None = None, **kwargs: Any)
    -> AccessToken'
  parameters:
  - name: scopes
    description: The type of access needed.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: claims
    description: 'Additional claims required in the token, such as those returned
      in a resource

      provider''s claims challenge following an authorization failure.'
    types:
    - <xref:str>
  return:
    description: An AccessToken instance containing the token string and its expiration
      time in Unix time.
    types:
    - <xref:corehttp.credentials.AccessToken>
