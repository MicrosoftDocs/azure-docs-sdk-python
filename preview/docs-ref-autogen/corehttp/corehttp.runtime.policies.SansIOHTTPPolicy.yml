### YamlMime:PythonClass
uid: corehttp.runtime.policies.SansIOHTTPPolicy
name: SansIOHTTPPolicy
fullName: corehttp.runtime.policies.SansIOHTTPPolicy
module: corehttp.runtime.policies
inheritances:
- typing.Generic
summary: 'Represents a sans I/O policy.


  SansIOHTTPPolicy is a base class for policies that only modify or

  mutate a request based on the HTTP specification, and do not depend

  on the specifics of any particular transport. SansIOHTTPPolicy

  subclasses will function in either a Pipeline or an AsyncPipeline,

  and can act either before the request is done, or after.

  You can optionally make these methods coroutines (or return awaitable objects)

  but they will then be tied to AsyncPipeline usage.'
constructor:
  syntax: SansIOHTTPPolicy()
methods:
- uid: corehttp.runtime.policies.SansIOHTTPPolicy.on_request
  name: on_request
  summary: Is executed before sending the request from next policy.
  signature: 'on_request(request: PipelineRequest[HTTPRequestType]) -> None | Awaitable[None]'
  parameters:
  - name: request
    description: Request to be modified before sent from next policy.
    isRequired: true
    types:
    - <xref:<xref:corehttp.runtime.pipeline#corehttp.runtime.pipeline.PipelineRequest>>
- uid: corehttp.runtime.policies.SansIOHTTPPolicy.on_response
  name: on_response
  summary: Is executed after the request comes back from the policy.
  signature: 'on_response(request: PipelineRequest[HTTPRequestType], response: PipelineResponse[HTTPRequestType,
    HTTPResponseType]) -> None | Awaitable[None]'
  parameters:
  - name: request
    description: Request to be modified after returning from the policy.
    isRequired: true
    types:
    - <xref:<xref:corehttp.runtime.pipeline#corehttp.runtime.pipeline.PipelineRequest>>
  - name: response
    description: Pipeline response object
    isRequired: true
    types:
    - <xref:<xref:corehttp.runtime.pipeline#corehttp.runtime.pipeline.PipelineResponse>>
