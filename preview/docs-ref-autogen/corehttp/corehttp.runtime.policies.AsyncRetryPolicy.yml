### YamlMime:PythonClass
uid: corehttp.runtime.policies.AsyncRetryPolicy
name: AsyncRetryPolicy
fullName: corehttp.runtime.policies.AsyncRetryPolicy
module: corehttp.runtime.policies
inheritances:
- corehttp.runtime.policies._retry.RetryPolicyBase
- corehttp.runtime.policies._base_async.AsyncHTTPPolicy
summary: 'Async flavor of the retry policy.


  The async retry policy in the pipeline can be configured directly, or tweaked on
  a per-call basis.'
constructor:
  syntax: 'AsyncRetryPolicy(**kwargs: Any)'
  keywordOnlyParameters:
  - name: retry_total
    description: 'Total number of retries to allow. Takes precedence over other counts.

      Default value is 10.'
    types:
    - <xref:int>
  - name: retry_connect
    description: 'How many connection-related errors to retry on.

      These are errors raised before the request is sent to the remote server,

      which we assume has not triggered the server to process the request. Default
      value is 3.'
    types:
    - <xref:int>
  - name: retry_read
    description: 'How many times to retry on read errors.

      These errors are raised after the request was sent to the server, so the

      request may have side-effects. Default value is 3.'
    types:
    - <xref:int>
  - name: retry_status
    description: How many times to retry on bad status codes. Default value is 3.
    types:
    - <xref:int>
  - name: retry_backoff_factor
    description: 'A backoff factor to apply between attempts after the second try

      (most errors are resolved immediately by a second try without a delay).

      Retry policy will sleep for: *{backoff factor} * (2 ** ({number of total retries}
      - 1))*

      seconds. If the backoff_factor is 0.1, then the retry will sleep

      for [0.0s, 0.2s, 0.4s, ...] between retries. The default value is 0.8.'
    types:
    - <xref:float>
  - name: retry_backoff_max
    description: The maximum back off time. Default value is 120 seconds (2 minutes).
    types:
    - <xref:int>
methods:
- uid: corehttp.runtime.policies.AsyncRetryPolicy.configure_retries
  name: configure_retries
  summary: Configures the retry settings.
  signature: 'configure_retries(options: Dict[str, Any]) -> Dict[str, Any]'
  parameters:
  - name: options
    description: keyword arguments from context.
    isRequired: true
    types:
    - <xref:dict>
  return:
    description: A dict containing settings and history for retries.
    types:
    - <xref:dict>
- uid: corehttp.runtime.policies.AsyncRetryPolicy.get_backoff_time
  name: get_backoff_time
  summary: Returns the current backoff time.
  signature: 'get_backoff_time(settings: Dict[str, Any]) -> float'
  parameters:
  - name: settings
    description: The retry settings.
    isRequired: true
    types:
    - <xref:dict>
  return:
    description: The current backoff value.
    types:
    - <xref:float>
- uid: corehttp.runtime.policies.AsyncRetryPolicy.get_retry_after
  name: get_retry_after
  summary: Get the value of Retry-After in seconds.
  signature: 'get_retry_after(response: PipelineResponse[Any, AllHttpResponseType])
    -> float | None'
  parameters:
  - name: response
    description: The PipelineResponse object
    isRequired: true
    types:
    - <xref:<xref:corehttp.runtime.pipeline#corehttp.runtime.pipeline.PipelineResponse>>
  return:
    description: Value of Retry-After in seconds.
    types:
    - <xref:float>
    - <xref:None>
- uid: corehttp.runtime.policies.AsyncRetryPolicy.increment
  name: increment
  summary: Increment the retry counters.
  signature: 'increment(settings: Dict[str, Any], response: PipelineRequest[HttpRequest]
    | PipelineResponse[HttpRequest, AllHttpResponseType] | None = None, error: Exception
    | None = None) -> bool'
  parameters:
  - name: settings
    description: The retry settings.
    isRequired: true
    types:
    - <xref:dict>
  - name: response
    description: A pipeline response object.
    defaultValue: None
    types:
    - <xref:<xref:corehttp.runtime.pipeline#corehttp.runtime.pipeline.PipelineResponse>>
  - name: error
    description: 'An error encountered during the request, or

      None if the response was received successfully.'
    defaultValue: None
    types:
    - <xref:<xref:corehttp#corehttp.exceptions.BaseError>>
  return:
    description: 'Whether any retry attempt is available

      True if more retry attempts available, False otherwise'
    types:
    - <xref:bool>
- uid: corehttp.runtime.policies.AsyncRetryPolicy.is_exhausted
  name: is_exhausted
  summary: Checks if any retries left.
  signature: 'is_exhausted(settings: Dict[str, Any]) -> bool'
  parameters:
  - name: settings
    description: the retry settings
    isRequired: true
    types:
    - <xref:dict>
  return:
    description: False if have more retries. True if retries exhausted.
    types:
    - <xref:bool>
- uid: corehttp.runtime.policies.AsyncRetryPolicy.is_retry
  name: is_retry
  summary: 'Checks if method/status code is retryable.


    Based on allowlists and control variables such as the number of

    total retries to allow, whether to respect the Retry-After header,

    whether this header is present, and whether the returned status

    code is on the list of status codes to be retried upon on the

    presence of the aforementioned header.


    The behavior is:

    -       If status_code < 400: don''t retry

    -       Else if Retry-After present: retry

    -       Else: retry based on the safe status code list ([408, 429, 500, 502, 503,
    504])'
  signature: 'is_retry(settings: Dict[str, Any], response: PipelineResponse[HttpRequest,
    AllHttpResponseType]) -> bool'
  parameters:
  - name: settings
    description: The retry settings.
    isRequired: true
    types:
    - <xref:dict>
  - name: response
    description: The PipelineResponse object
    isRequired: true
    types:
    - <xref:<xref:corehttp.runtime.pipeline#corehttp.runtime.pipeline.PipelineResponse>>
  return:
    description: True if method/status code is retryable. False if not retryable.
    types:
    - <xref:bool>
- uid: corehttp.runtime.policies.AsyncRetryPolicy.no_retries
  name: no_retries
  summary: Disable retries.
  signature: no_retries() -> ClsRetryPolicy
  return:
    description: A retry policy with retries disabled.
    types:
    - <xref:corehttp.runtime.policies.RetryPolicy>
    - <xref:corehttp.runtime.policies.AsyncRetryPolicy>
- uid: corehttp.runtime.policies.AsyncRetryPolicy.parse_retry_after
  name: parse_retry_after
  summary: Helper to parse Retry-After and get value in seconds.
  signature: 'parse_retry_after(retry_after: str) -> float'
  parameters:
  - name: retry_after
    description: Retry-After header
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Value of Retry-After in seconds.
    types:
    - <xref:float>
- uid: corehttp.runtime.policies.AsyncRetryPolicy.send
  name: send
  summary: Uses the configured retry policy to send the request to the next policy
    in the pipeline.
  signature: 'async send(request: PipelineRequest[HttpRequest]) -> PipelineResponse[HttpRequest,
    AsyncHttpResponse]'
  parameters:
  - name: request
    description: The PipelineRequest object
    isRequired: true
    types:
    - <xref:<xref:corehttp.runtime.pipeline#corehttp.runtime.pipeline.PipelineRequest>>
  return:
    description: Returns the PipelineResponse or raises error if maximum retries exceeded.
    types:
    - <xref:corehttp.runtime.pipeline.PipelineResponse>
- uid: corehttp.runtime.policies.AsyncRetryPolicy.sleep
  name: sleep
  summary: 'Sleep between retry attempts.


    This method will respect a server''s `Retry-After` response header

    and sleep the duration of the time requested. If that is not present, it

    will use an exponential backoff. By default, the backoff factor is 0 and

    this method will return immediately.'
  signature: 'async sleep(settings: Dict[str, Any], transport: AsyncHttpTransport[HttpRequest,
    AsyncHttpResponse], response: PipelineResponse[HttpRequest, AsyncHttpResponse]
    | None = None) -> None'
  parameters:
  - name: settings
    description: The retry settings.
    isRequired: true
    types:
    - <xref:dict>
  - name: transport
    description: The HTTP transport type.
    isRequired: true
    types:
    - <xref:<xref:corehttp.transport#corehttp.transport.AsyncHttpTransport>>
  - name: response
    description: The PipelineResponse object.
    defaultValue: None
    types:
    - <xref:<xref:corehttp.runtime.pipeline#corehttp.runtime.pipeline.PipelineResponse>>
- uid: corehttp.runtime.policies.AsyncRetryPolicy.update_context
  name: update_context
  summary: Updates retry history in pipeline context.
  signature: 'update_context(context: PipelineContext, retry_settings: Dict[str, Any])
    -> None'
  parameters:
  - name: context
    description: The pipeline context.
    isRequired: true
    types:
    - <xref:<xref:corehttp.runtime.pipeline#corehttp.runtime.pipeline.PipelineContext>>
  - name: retry_settings
    description: The retry settings.
    isRequired: true
    types:
    - <xref:dict>
attributes:
- uid: corehttp.runtime.policies.AsyncRetryPolicy.BACKOFF_MAX
  name: BACKOFF_MAX
  summary: Maximum backoff time.
  signature: BACKOFF_MAX = 120
- uid: corehttp.runtime.policies.AsyncRetryPolicy.next
  name: next
  summary: Pointer to the next policy or a transport (wrapped as a policy). Will be
    set at pipeline creation.
  signature: 'next: AsyncHTTPPolicy[HTTPRequestType, AsyncHTTPResponseType]'
