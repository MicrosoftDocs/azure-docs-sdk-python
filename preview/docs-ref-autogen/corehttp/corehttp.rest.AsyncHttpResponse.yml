### YamlMime:PythonClass
uid: corehttp.rest.AsyncHttpResponse
name: AsyncHttpResponse
fullName: corehttp.rest.AsyncHttpResponse
module: corehttp.rest
inheritances:
- corehttp.rest._rest_py3._HttpResponseBase
- contextlib.AbstractAsyncContextManager
- typing.Generic
summary: 'Abstract base class for Async HTTP responses.


  Use this abstract base class to create your own transport responses.


  Responses implementing this ABC are returned from your async client''s *send_request*

  method if you pass in an <xref:corehttp.rest.HttpRequest>


  ```


  >>> from corehttp.rest import HttpRequest

  >>> request = HttpRequest(''GET'', ''http://www.example.com'')

  <HttpRequest [GET], url: ''http://www.example.com''>

  >>> response = await client.send_request(request)

  <AsyncHttpResponse: 200 OK>

  ```'
constructor:
  syntax: AsyncHttpResponse()
methods:
- uid: corehttp.rest.AsyncHttpResponse.close
  name: close
  signature: abstract async close() -> None
- uid: corehttp.rest.AsyncHttpResponse.iter_bytes
  name: iter_bytes
  summary: Asynchronously iterates over the response's bytes. Will decompress in the
    process.
  signature: 'abstract async iter_bytes(**kwargs: Any) -> AsyncIterator[bytes]'
  return:
    description: An async iterator of bytes from the response
    types:
    - <xref:typing.AsyncIterator>[<xref:bytes>]
- uid: corehttp.rest.AsyncHttpResponse.iter_raw
  name: iter_raw
  summary: Asynchronously iterates over the response's bytes. Will not decompress
    in the process.
  signature: 'abstract async iter_raw(**kwargs: Any) -> AsyncIterator[bytes]'
  return:
    description: An async iterator of bytes from the response
    types:
    - <xref:typing.AsyncIterator>[<xref:bytes>]
- uid: corehttp.rest.AsyncHttpResponse.json
  name: json
  summary: Returns the whole body as a json object.
  signature: abstract json() -> Any
  return:
    description: The JSON deserialized response body
    types:
    - <xref:any>
  exceptions:
  - type: json.decoder.JSONDecodeError
  - type: ValueError
  - type: in python 2.7
  - type: if object is not JSON decodable
- uid: corehttp.rest.AsyncHttpResponse.raise_for_status
  name: raise_for_status
  summary: 'Raises an HttpResponseError if the response has an error status code.


    If response is good, does nothing.'
  signature: abstract raise_for_status() -> None
  exceptions:
  - type: '[](<xref:corehttp.HttpResponseError if the object has an error status code.>)'
- uid: corehttp.rest.AsyncHttpResponse.read
  name: read
  summary: Read the response's bytes into memory.
  signature: abstract async read() -> bytes
  return:
    description: The response's bytes
    types:
    - <xref:bytes>
- uid: corehttp.rest.AsyncHttpResponse.text
  name: text
  summary: Returns the response body as a string.
  signature: 'abstract text(encoding: str | None = None) -> str'
  parameters:
  - name: encoding
    description: 'The encoding you want to decode the text with. Can

      also be set independently through our encoding property'
    defaultValue: None
    types:
    - <xref:optional>[<xref:str>]
  return:
    description: The response's content decoded as a string.
    types:
    - <xref:str>
attributes:
- uid: corehttp.rest.AsyncHttpResponse.content
  name: content
- uid: corehttp.rest.AsyncHttpResponse.content_type
  name: content_type
- uid: corehttp.rest.AsyncHttpResponse.encoding
  name: encoding
- uid: corehttp.rest.AsyncHttpResponse.headers
  name: headers
- uid: corehttp.rest.AsyncHttpResponse.is_closed
  name: is_closed
- uid: corehttp.rest.AsyncHttpResponse.is_stream_consumed
  name: is_stream_consumed
- uid: corehttp.rest.AsyncHttpResponse.reason
  name: reason
- uid: corehttp.rest.AsyncHttpResponse.request
  name: request
- uid: corehttp.rest.AsyncHttpResponse.status_code
  name: status_code
- uid: corehttp.rest.AsyncHttpResponse.url
  name: url
