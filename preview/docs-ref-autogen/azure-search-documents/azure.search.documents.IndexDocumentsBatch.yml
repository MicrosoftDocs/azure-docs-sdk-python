### YamlMime:PythonClass
uid: azure.search.documents.IndexDocumentsBatch
name: IndexDocumentsBatch
fullName: azure.search.documents.IndexDocumentsBatch
module: azure.search.documents
inheritances:
- builtins.object
summary: 'Represent a batch of update operations for documents in an Azure

  Search index.


  Index operations are performed in the order in which they are added

  to the batch.'
constructor:
  syntax: IndexDocumentsBatch()
methods:
- uid: azure.search.documents.IndexDocumentsBatch.add_delete_actions
  name: add_delete_actions
  summary: 'Add documents to delete to the Azure search index.


    Delete removes the specified document from the index. Any field you

    specify in a delete operation, other than the key field, will be

    ignored. If you want to remove an individual field from a document, use

    *merge_documents* instead and set the field explicitly to None.


    Delete operations are idempotent. That is, even if a document key does

    not exist in the index, attempting a delete operation with that key will

    result in a 200 status code.'
  signature: 'add_delete_actions(*documents: List[Dict] | List[List[Dict]], **kwargs:
    Any) -> List[IndexAction]'
  parameters:
  - name: documents
    description: 'Documents to delete from an Azure search index. May be

      a single list of documents, or documents as individual parameters.'
    isRequired: true
    types:
    - <xref:Dict>
    - <xref:List>[<xref:Dict>]
  return:
    description: the added actions
    types:
    - <xref:List>[<xref:azure.search.documents.models.IndexAction>]
- uid: azure.search.documents.IndexDocumentsBatch.add_merge_actions
  name: add_merge_actions
  summary: 'Add documents to merge in to existing documents in the Azure search

    index.


    Merge updates an existing document with the specified fields. If the

    document doesn''t exist, the merge will fail. Any field you specify in a

    merge will replace the existing field in the document. This also applies

    to collections of primitive and complex types.'
  signature: 'add_merge_actions(*documents: List[Dict] | List[List[Dict]], **kwargs:
    Any) -> List[IndexAction]'
  parameters:
  - name: documents
    description: 'Documents to merge into an Azure search index. May be

      a single list of documents, or documents as individual parameters.'
    isRequired: true
    types:
    - <xref:Dict>
    - <xref:List>[<xref:Dict>]
  return:
    description: the added actions
    types:
    - <xref:List>[<xref:azure.search.documents.models.IndexAction>]
- uid: azure.search.documents.IndexDocumentsBatch.add_merge_or_upload_actions
  name: add_merge_or_upload_actions
  summary: 'Add documents to merge in to existing documents in the Azure search

    index, or upload if they do not yet exist.


    This action behaves like *merge* if a document with the given key

    already exists in the index. If the document does not exist, it behaves

    like *upload* with a new document.'
  signature: 'add_merge_or_upload_actions(*documents: List[Dict] | List[List[Dict]],
    **kwargs: Any) -> List[IndexAction]'
  parameters:
  - name: documents
    description: 'Documents to merge or upload into an Azure search

      index. May be a single list of documents, or documents as individual

      parameters.'
    isRequired: true
    types:
    - <xref:Dict>
    - <xref:List>[<xref:Dict>]
  return:
    description: the added actions
    types:
    - <xref:List>[<xref:azure.search.documents.models.IndexAction>]
- uid: azure.search.documents.IndexDocumentsBatch.add_upload_actions
  name: add_upload_actions
  summary: 'Add documents to upload to the Azure search index.


    An upload action is similar to an "upsert" where the document will be

    inserted if it is new and updated/replaced if it exists. All fields are

    replaced in the update case.'
  signature: 'add_upload_actions(*documents: List[Dict] | List[List[Dict]]) -> List[IndexAction]'
  parameters:
  - name: documents
    description: 'Documents to upload to an Azure search index. May be

      a single list of documents, or documents as individual parameters.'
    isRequired: true
    types:
    - <xref:Dict>
    - <xref:List>[<xref:Dict>]
  return:
    description: the added actions
    types:
    - <xref:List>[<xref:azure.search.documents.models.IndexAction>]
- uid: azure.search.documents.IndexDocumentsBatch.dequeue_actions
  name: dequeue_actions
  summary: Get the list of currently configured index actions and clear it.
  signature: 'dequeue_actions(**kwargs: Any) -> List[IndexAction]'
  return:
    description: the current actions
    types:
    - <xref:List>[<xref:azure.search.documents.models.IndexAction>]
- uid: azure.search.documents.IndexDocumentsBatch.enqueue_actions
  name: enqueue_actions
  summary: Enqueue a list of index actions to index.
  signature: 'enqueue_actions(new_actions: IndexAction | List[IndexAction], **kwargs:
    Any) -> None'
  parameters:
  - name: new_actions
    description: the actions to enqueue
    isRequired: true
    types:
    - <xref:azure.search.documents.models.IndexAction>
    - <xref:List>[<xref:azure.search.documents.models.IndexAction>]
attributes:
- uid: azure.search.documents.IndexDocumentsBatch.actions
  name: actions
  summary: The list of currently index actions to index.
  return:
    types:
    - <xref:List>[<xref:azure.search.documents.models.IndexAction>]
