### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.search.documents.IndexDocumentsBatch.actions
  - azure.search.documents.IndexDocumentsBatch.add_delete_actions
  - azure.search.documents.IndexDocumentsBatch.add_merge_actions
  - azure.search.documents.IndexDocumentsBatch.add_merge_or_upload_actions
  - azure.search.documents.IndexDocumentsBatch.add_upload_actions
  - azure.search.documents.IndexDocumentsBatch.dequeue_actions
  - azure.search.documents.IndexDocumentsBatch.enqueue_action
  - azure.search.documents.IndexDocumentsBatch.enqueue_actions
  class: azure.search.documents.IndexDocumentsBatch
  fullName: azure.search.documents.IndexDocumentsBatch
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.search.documents
  name: IndexDocumentsBatch
  summary: 'Represent a batch of upate operations for documents in an Azure

    Search index.


    Index operations are performed in the order in which they are added

    to the batch.'
  syntax:
    content: IndexDocumentsBatch()
  type: class
  uid: azure.search.documents.IndexDocumentsBatch
- class: azure.search.documents.IndexDocumentsBatch
  fullName: azure.search.documents.IndexDocumentsBatch.actions
  langs:
  - python
  module: azure.search.documents
  name: actions
  summary: The list of currently index actions to index.
  syntax:
    return:
      type:
      - List[IndexAction]
  type: attribute
  uid: azure.search.documents.IndexDocumentsBatch.actions
- class: azure.search.documents.IndexDocumentsBatch
  fullName: azure.search.documents.IndexDocumentsBatch.add_delete_actions
  langs:
  - python
  module: azure.search.documents
  name: add_delete_actions(*documents)
  namewithoutparameters: add_delete_actions
  summary: 'Add documents to delete to the Azure search index.


    Delete removes the specified document from the index. Any field you

    specify in a delete operation, other than the key field, will be

    ignored. If you want to remove an individual field from a document, use

    *merge_documents* instead and set the field explicitly to None.


    Delete operations are idempotent. That is, even if a document key does

    not exist in the index, attempting a delete operation with that key will

    result in a 200 status code.'
  syntax:
    content: add_delete_actions(*documents)
    parameters:
    - description: 'Documents to delete from an Azure search index. May be

        a single list of documents, or documents as individual parameters.'
      id: documents
      isRequired: true
      type:
      - dict
      - list[dict]
    return:
      description: the added actions
      type:
      - List[IndexAction]
  type: method
  uid: azure.search.documents.IndexDocumentsBatch.add_delete_actions
- class: azure.search.documents.IndexDocumentsBatch
  fullName: azure.search.documents.IndexDocumentsBatch.add_merge_actions
  langs:
  - python
  module: azure.search.documents
  name: add_merge_actions(*documents)
  namewithoutparameters: add_merge_actions
  summary: 'Add documents to merge in to existing documets in the Azure search

    index.


    Merge updates an existing document with the specified fields. If the

    document doesn''t exist, the merge will fail. Any field you specify in a

    merge will replace the existing field in the document. This also applies

    to collections of primitive and complex types.'
  syntax:
    content: add_merge_actions(*documents)
    parameters:
    - description: 'Documents to merge into an Azure search index. May be

        a single list of documents, or documents as individual parameters.'
      id: documents
      isRequired: true
      type:
      - dict
      - list[dict]
    return:
      description: the added actions
      type:
      - List[IndexAction]
  type: method
  uid: azure.search.documents.IndexDocumentsBatch.add_merge_actions
- class: azure.search.documents.IndexDocumentsBatch
  fullName: azure.search.documents.IndexDocumentsBatch.add_merge_or_upload_actions
  langs:
  - python
  module: azure.search.documents
  name: add_merge_or_upload_actions(*documents)
  namewithoutparameters: add_merge_or_upload_actions
  summary: 'Add documents to merge in to existing documets in the Azure search

    index, or upload if they do not yet exist.


    This action behaves like *merge* if a document with the given key

    already exists in the index. If the document does not exist, it behaves

    like *upload* with a new document.'
  syntax:
    content: add_merge_or_upload_actions(*documents)
    parameters:
    - description: 'Documents to merge or uplaod into an Azure search

        index. May be a single list of documents, or documents as individual

        parameters.'
      id: documents
      isRequired: true
      type:
      - dict
      - list[dict]
    return:
      description: the added actions
      type:
      - List[IndexAction]
  type: method
  uid: azure.search.documents.IndexDocumentsBatch.add_merge_or_upload_actions
- class: azure.search.documents.IndexDocumentsBatch
  fullName: azure.search.documents.IndexDocumentsBatch.add_upload_actions
  langs:
  - python
  module: azure.search.documents
  name: add_upload_actions(*documents)
  namewithoutparameters: add_upload_actions
  summary: 'Add documents to upload to the Azure search index.


    An upload action is similar to an "upsert" where the document will be

    inserted if it is new and updated/replaced if it exists. All fields are

    replaced in the update case.'
  syntax:
    content: add_upload_actions(*documents)
    parameters:
    - description: 'Documents to upload to an Azure search index. May be

        a single list of documents, or documents as individual parameters.'
      id: documents
      isRequired: true
      type:
      - dict
      - list[dict]
    return:
      description: the added actions
      type:
      - List[IndexAction]
  type: method
  uid: azure.search.documents.IndexDocumentsBatch.add_upload_actions
- class: azure.search.documents.IndexDocumentsBatch
  fullName: azure.search.documents.IndexDocumentsBatch.dequeue_actions
  langs:
  - python
  module: azure.search.documents
  name: dequeue_actions()
  namewithoutparameters: dequeue_actions
  summary: Get the list of currently configured index actions and clear it.
  syntax:
    content: dequeue_actions()
    parameters: []
    return:
      type:
      - List[IndexAction]
  type: method
  uid: azure.search.documents.IndexDocumentsBatch.dequeue_actions
- class: azure.search.documents.IndexDocumentsBatch
  fullName: azure.search.documents.IndexDocumentsBatch.enqueue_action
  langs:
  - python
  module: azure.search.documents
  name: enqueue_action(new_action)
  namewithoutparameters: enqueue_action
  summary: Enqueue a single index action
  syntax:
    content: enqueue_action(new_action)
    parameters:
    - id: new_action
      isRequired: true
  type: method
  uid: azure.search.documents.IndexDocumentsBatch.enqueue_action
- class: azure.search.documents.IndexDocumentsBatch
  fullName: azure.search.documents.IndexDocumentsBatch.enqueue_actions
  langs:
  - python
  module: azure.search.documents
  name: enqueue_actions(new_actions)
  namewithoutparameters: enqueue_actions
  summary: Enqueue a list of index actions to index.
  syntax:
    content: enqueue_actions(new_actions)
    parameters:
    - id: new_actions
      isRequired: true
  type: method
  uid: azure.search.documents.IndexDocumentsBatch.enqueue_actions
references:
- fullName: azure.search.documents.IndexDocumentsBatch.actions
  isExternal: false
  name: actions
  parent: azure.search.documents.IndexDocumentsBatch
  uid: azure.search.documents.IndexDocumentsBatch.actions
- fullName: azure.search.documents.IndexDocumentsBatch.add_delete_actions
  isExternal: false
  name: add_delete_actions(*documents)
  parent: azure.search.documents.IndexDocumentsBatch
  uid: azure.search.documents.IndexDocumentsBatch.add_delete_actions
- fullName: azure.search.documents.IndexDocumentsBatch.add_merge_actions
  isExternal: false
  name: add_merge_actions(*documents)
  parent: azure.search.documents.IndexDocumentsBatch
  uid: azure.search.documents.IndexDocumentsBatch.add_merge_actions
- fullName: azure.search.documents.IndexDocumentsBatch.add_merge_or_upload_actions
  isExternal: false
  name: add_merge_or_upload_actions(*documents)
  parent: azure.search.documents.IndexDocumentsBatch
  uid: azure.search.documents.IndexDocumentsBatch.add_merge_or_upload_actions
- fullName: azure.search.documents.IndexDocumentsBatch.add_upload_actions
  isExternal: false
  name: add_upload_actions(*documents)
  parent: azure.search.documents.IndexDocumentsBatch
  uid: azure.search.documents.IndexDocumentsBatch.add_upload_actions
- fullName: azure.search.documents.IndexDocumentsBatch.dequeue_actions
  isExternal: false
  name: dequeue_actions()
  parent: azure.search.documents.IndexDocumentsBatch
  uid: azure.search.documents.IndexDocumentsBatch.dequeue_actions
- fullName: azure.search.documents.IndexDocumentsBatch.enqueue_action
  isExternal: false
  name: enqueue_action(new_action)
  parent: azure.search.documents.IndexDocumentsBatch
  uid: azure.search.documents.IndexDocumentsBatch.enqueue_action
- fullName: azure.search.documents.IndexDocumentsBatch.enqueue_actions
  isExternal: false
  name: enqueue_actions(new_actions)
  parent: azure.search.documents.IndexDocumentsBatch
  uid: azure.search.documents.IndexDocumentsBatch.enqueue_actions
- fullName: List[IndexAction]
  name: List[IndexAction]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: IndexAction
    name: IndexAction
    uid: IndexAction
  - fullName: ']'
    name: ']'
  uid: List[IndexAction]
- fullName: list[dict]
  name: list[dict]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: ']'
    name: ']'
  uid: list[dict]
