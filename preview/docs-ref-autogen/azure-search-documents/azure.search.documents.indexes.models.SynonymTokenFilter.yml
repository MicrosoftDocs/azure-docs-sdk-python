### YamlMime:PythonClass
uid: azure.search.documents.indexes.models.SynonymTokenFilter
name: SynonymTokenFilter
fullName: azure.search.documents.indexes.models.SynonymTokenFilter
module: azure.search.documents.indexes.models
inheritances:
- azure.search.documents.indexes._generated.models._models_py3.TokenFilter
summary: 'Matches single or multi-word synonyms in a token stream. This token filter
  is implemented using

  Apache Lucene.


  All required parameters must be populated in order to send to server.'
constructor:
  syntax: 'SynonymTokenFilter(*, name: str, synonyms: List[str], ignore_case: bool
    = False, expand: bool = True, **kwargs: Any)'
  keywordOnlyParameters:
  - name: name
    description: 'The name of the token filter. It must only contain letters, digits,
      spaces,

      dashes or underscores, can only start and end with alphanumeric characters,
      and is limited to

      128 characters. Required.'
    types:
    - <xref:str>
  - name: synonyms
    description: 'A list of synonyms in following one of two formats: 1. incredible,

      unbelievable, fabulous => amazing - all terms on the left side of => symbol
      will be replaced

      with all terms on its right side; 2. incredible, unbelievable, fabulous, amazing
      - comma

      separated list of equivalent words. Set the expand option to change how this
      list is

      interpreted. Required.'
    types:
    - <xref:list>[<xref:str>]
  - name: ignore_case
    description: 'A value indicating whether to case-fold input for matching. Default
      is

      false.'
    types:
    - <xref:bool>
  - name: expand
    description: 'A value indicating whether all words in the list of synonyms (if
      => notation

      is not used) will map to one another. If true, all words in the list of synonyms
      (if =>

      notation is not used) will map to one another. The following list: incredible,
      unbelievable,

      fabulous, amazing is equivalent to: incredible, unbelievable, fabulous, amazing
      => incredible,

      unbelievable, fabulous, amazing. If false, the following list: incredible, unbelievable,

      fabulous, amazing will be equivalent to: incredible, unbelievable, fabulous,
      amazing =>

      incredible. Default is true.'
    defaultValue: 'True'
    types:
    - <xref:bool>
variables:
- description: A URI fragment specifying the type of token filter. Required.
  name: odata_type
  types:
  - <xref:str>
- description: 'The name of the token filter. It must only contain letters, digits,
    spaces, dashes

    or underscores, can only start and end with alphanumeric characters, and is limited
    to 128

    characters. Required.'
  name: name
  types:
  - <xref:str>
- description: 'A list of synonyms in following one of two formats: 1. incredible,

    unbelievable, fabulous => amazing - all terms on the left side of => symbol will
    be replaced

    with all terms on its right side; 2. incredible, unbelievable, fabulous, amazing
    - comma

    separated list of equivalent words. Set the expand option to change how this list
    is

    interpreted. Required.'
  name: synonyms
  types:
  - <xref:list>[<xref:str>]
- description: 'A value indicating whether to case-fold input for matching. Default
    is

    false.'
  name: ignore_case
  types:
  - <xref:bool>
- description: 'A value indicating whether all words in the list of synonyms (if =>
    notation is

    not used) will map to one another. If true, all words in the list of synonyms
    (if => notation

    is not used) will map to one another. The following list: incredible, unbelievable,
    fabulous,

    amazing is equivalent to: incredible, unbelievable, fabulous, amazing => incredible,

    unbelievable, fabulous, amazing. If false, the following list: incredible, unbelievable,

    fabulous, amazing will be equivalent to: incredible, unbelievable, fabulous, amazing
    =>

    incredible. Default is true.'
  name: expand
  types:
  - <xref:bool>
methods:
- uid: azure.search.documents.indexes.models.SynonymTokenFilter.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.search.documents.indexes.models.SynonymTokenFilter.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.search.documents.indexes.models.SynonymTokenFilter.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.search.documents.indexes.models.SynonymTokenFilter.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.search.documents.indexes.models.SynonymTokenFilter.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.search.documents.indexes.models.SynonymTokenFilter.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to server from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
