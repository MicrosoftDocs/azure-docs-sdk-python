### YamlMime:PythonClass
uid: azure.search.documents.indexes.models.SearchIndexKnowledgeSource
name: SearchIndexKnowledgeSource
fullName: azure.search.documents.indexes.models.SearchIndexKnowledgeSource
module: azure.search.documents.indexes.models
summary: 'Knowledge Source targeting a search index.


  All required parameters must be populated in order to send to server.'
constructor:
  syntax: 'SearchIndexKnowledgeSource(*, name: str, search_index_parameters: _models.SearchIndexKnowledgeSourceParameters,
    description: str | None = None, e_tag: str | None = None, encryption_key: _models.SearchResourceEncryptionKey
    | None = None, **kwargs: Any)'
  keywordOnlyParameters:
  - name: name
    description: The name of the knowledge source. Required.
    types:
    - <xref:str>
  - name: description
    description: Optional user-defined description.
    defaultValue: None
    types:
    - <xref:str>
  - name: e_tag
    description: The ETag of the agent.
    defaultValue: None
    types:
    - <xref:str>
  - name: encryption_key
    description: 'A description of an encryption key that you create in Azure Key
      Vault.

      This key is used to provide an additional level of encryption-at-rest for your
      agent definition

      when you want full assurance that no one, not even Microsoft, can decrypt them.
      Once you have

      encrypted your agent definition, it will always remain encrypted. The search
      service will

      ignore attempts to set this property to null. You can change this property as
      needed if you

      want to rotate your encryption key; Your agent definition will be unaffected.
      Encryption with

      customer-managed keys is not available for free search services, and is only
      available for paid

      services created on or after January 1, 2019.'
    defaultValue: None
    types:
    - <xref:azure.search.documents.indexes.models.SearchResourceEncryptionKey>
  - name: search_index_parameters
    description: The parameters for the knowledge source. Required.
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexKnowledgeSourceParameters>
variables:
- description: The name of the knowledge source. Required.
  name: name
  types:
  - <xref:str>
- description: Optional user-defined description.
  name: description
  types:
  - <xref:str>
- description: 'The type of the knowledge source. Required. Known values are: "searchIndex"
    and

    "azureBlob".'
  name: kind
  types:
  - <xref:str>
  - <xref:azure.search.documents.indexes.models.KnowledgeSourceKind>
- description: The ETag of the agent.
  name: e_tag
  types:
  - <xref:str>
- description: 'A description of an encryption key that you create in Azure Key Vault.

    This key is used to provide an additional level of encryption-at-rest for your
    agent definition

    when you want full assurance that no one, not even Microsoft, can decrypt them.
    Once you have

    encrypted your agent definition, it will always remain encrypted. The search service
    will

    ignore attempts to set this property to null. You can change this property as
    needed if you

    want to rotate your encryption key; Your agent definition will be unaffected.
    Encryption with

    customer-managed keys is not available for free search services, and is only available
    for paid

    services created on or after January 1, 2019.'
  name: encryption_key
  types:
  - <xref:azure.search.documents.indexes.models.SearchResourceEncryptionKey>
- description: The parameters for the knowledge source. Required.
  name: search_index_parameters
  types:
  - <xref:azure.search.documents.indexes.models.SearchIndexKnowledgeSourceParameters>
methods:
- uid: azure.search.documents.indexes.models.SearchIndexKnowledgeSource.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    dict[str, typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'True'
    types:
    - <xref:bool>
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.search.documents.indexes.models.SearchIndexKnowledgeSource.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> Self'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
    types:
    - <xref:typing.Self>
  exceptions:
  - type: DeserializationError
    description: if something went wrong
- uid: azure.search.documents.indexes.models.SearchIndexKnowledgeSource.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.search.documents.indexes.models.SearchIndexKnowledgeSource.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> Self'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: key_extractors
    description: A key extractor function.
    defaultValue: None
    types:
    - <xref:function>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
    types:
    - <xref:typing.Self>
  exceptions:
  - type: DeserializationError
    description: if something went wrong
- uid: azure.search.documents.indexes.models.SearchIndexKnowledgeSource.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.search.documents.indexes.models.SearchIndexKnowledgeSource.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to server from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
