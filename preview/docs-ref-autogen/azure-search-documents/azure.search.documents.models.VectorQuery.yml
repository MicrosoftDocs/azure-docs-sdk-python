### YamlMime:PythonClass
uid: azure.search.documents.models.VectorQuery
name: VectorQuery
fullName: azure.search.documents.models.VectorQuery
module: azure.search.documents.models
summary: 'The query parameters for vector and hybrid search queries.


  You probably want to use the sub-classes and not this class directly. Known sub-classes
  are:

  VectorizableImageBinaryQuery, VectorizableImageUrlQuery, VectorizableTextQuery,
  VectorizedQuery


  All required parameters must be populated in order to send to server.'
constructor:
  syntax: 'VectorQuery(*, k_nearest_neighbors: int | None = None, fields: str | None
    = None, exhaustive: bool | None = None, oversampling: float | None = None, weight:
    float | None = None, threshold: _models.VectorThreshold | None = None, filter_override:
    str | None = None, **kwargs: Any)'
  keywordOnlyParameters:
  - name: k_nearest_neighbors
    description: Number of nearest neighbors to return as top hits.
    defaultValue: None
    types:
    - <xref:int>
  - name: fields
    description: 'Vector Fields of type Collection(Edm.Single) to be included in the
      vector

      searched.'
    defaultValue: None
    types:
    - <xref:str>
  - name: exhaustive
    description: 'When true, triggers an exhaustive k-nearest neighbor search across
      all

      vectors within the vector index. Useful for scenarios where exact matches are
      critical, such as

      determining ground truth values.'
    defaultValue: None
    types:
    - <xref:bool>
  - name: oversampling
    description: 'Oversampling factor. Minimum value is 1. It overrides the

      ''defaultOversampling'' parameter configured in the index definition. It can
      be set only when

      ''rerankWithOriginalVectors'' is true. This parameter is only permitted when
      a compression method

      is used on the underlying vector field.'
    defaultValue: None
    types:
    - <xref:float>
  - name: weight
    description: 'Relative weight of the vector query when compared to other vector
      query and/or

      the text query within the same search request. This value is used when combining
      the results of

      multiple ranking lists produced by the different vector queries and/or the results
      retrieved

      through the text query. The higher the weight, the higher the documents that
      matched that query

      will be in the final ranking. Default is 1.0 and the value needs to be a positive
      number larger

      than zero.'
    defaultValue: None
    types:
    - <xref:float>
  - name: threshold
    description: 'The threshold used for vector queries. Note this can only be set
      if all

      ''fields'' use the same similarity metric.'
    defaultValue: None
    types:
    - <xref:azure.search.documents.models.VectorThreshold>
  - name: filter_override
    description: 'The OData filter expression to apply to this specific vector query.

      If no filter expression is defined at the vector level, the expression defined
      in the top level

      filter parameter is used instead.'
    defaultValue: None
    types:
    - <xref:str>
variables:
- description: 'The kind of vector query being performed. Required. Known values are:
    "vector",

    "text", "imageUrl", and "imageBinary".'
  name: kind
  types:
  - <xref:str>
  - <xref:azure.search.documents.models.VectorQueryKind>
- description: Number of nearest neighbors to return as top hits.
  name: k_nearest_neighbors
  types:
  - <xref:int>
- description: 'Vector Fields of type Collection(Edm.Single) to be included in the
    vector

    searched.'
  name: fields
  types:
  - <xref:str>
- description: 'When true, triggers an exhaustive k-nearest neighbor search across
    all

    vectors within the vector index. Useful for scenarios where exact matches are
    critical, such as

    determining ground truth values.'
  name: exhaustive
  types:
  - <xref:bool>
- description: 'Oversampling factor. Minimum value is 1. It overrides the

    ''defaultOversampling'' parameter configured in the index definition. It can be
    set only when

    ''rerankWithOriginalVectors'' is true. This parameter is only permitted when a
    compression method

    is used on the underlying vector field.'
  name: oversampling
  types:
  - <xref:float>
- description: 'Relative weight of the vector query when compared to other vector
    query and/or

    the text query within the same search request. This value is used when combining
    the results of

    multiple ranking lists produced by the different vector queries and/or the results
    retrieved

    through the text query. The higher the weight, the higher the documents that matched
    that query

    will be in the final ranking. Default is 1.0 and the value needs to be a positive
    number larger

    than zero.'
  name: weight
  types:
  - <xref:float>
- description: 'The threshold used for vector queries. Note this can only be set if
    all

    ''fields'' use the same similarity metric.'
  name: threshold
  types:
  - <xref:azure.search.documents.models.VectorThreshold>
- description: 'The OData filter expression to apply to this specific vector query.
    If

    no filter expression is defined at the vector level, the expression defined in
    the top level

    filter parameter is used instead.'
  name: filter_override
  types:
  - <xref:str>
methods:
- uid: azure.search.documents.models.VectorQuery.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'True'
    types:
    - <xref:bool>
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.search.documents.models.VectorQuery.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> Self'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
    types:
    - <xref:typing.Self>
  exceptions:
  - type: DeserializationError
    description: if something went wrong
- uid: azure.search.documents.models.VectorQuery.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.search.documents.models.VectorQuery.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> Self'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: key_extractors
    description: A key extractor function.
    defaultValue: None
    types:
    - <xref:function>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
    types:
    - <xref:typing.Self>
  exceptions:
  - type: DeserializationError
    description: if something went wrong
- uid: azure.search.documents.models.VectorQuery.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.search.documents.models.VectorQuery.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to server from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
