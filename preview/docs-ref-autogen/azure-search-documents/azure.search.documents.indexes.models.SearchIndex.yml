### YamlMime:PythonClass
uid: azure.search.documents.indexes.models.SearchIndex
name: SearchIndex
fullName: azure.search.documents.indexes.models.SearchIndex
module: azure.search.documents.indexes.models
inheritances:
- builtins.object
summary: 'Represents a search index definition, which describes the fields and search
  behavior of an index.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: SearchIndex(**kwargs)
variables:
- description: Required. The name of the index.
  name: name
  types:
  - <xref:str>
- description: Required. The fields of the index.
  name: fields
  types:
  - <xref:list>[<xref:azure.search.documents.indexes.models.SearchField>]
- description: The scoring profiles for the index.
  name: scoring_profiles
  types:
  - <xref:list>[<xref:azure.search.documents.indexes.models.ScoringProfile>]
- description: 'The name of the scoring profile to use if none is specified in

    the query. If this property is not set and no scoring profile is specified in
    the query, then

    default scoring (tf-idf) will be used.'
  name: default_scoring_profile
  types:
  - <xref:str>
- description: Options to control Cross-Origin Resource Sharing (CORS) for the index.
  name: cors_options
  types:
  - <xref:azure.search.documents.indexes.models.CorsOptions>
- description: The suggesters for the index.
  name: suggesters
  types:
  - <xref:list>[<xref:azure.search.documents.indexes.models.SearchSuggester>]
- description: The analyzers for the index.
  name: analyzers
  types:
  - <xref:list>[<xref:azure.search.documents.indexes.models.LexicalAnalyzer>]
- description: The tokenizers for the index.
  name: tokenizers
  types:
  - <xref:list>[<xref:azure.search.documents.indexes.models.LexicalTokenizer>]
- description: The token filters for the index.
  name: token_filters
  types:
  - <xref:list>[<xref:azure.search.documents.indexes.models.TokenFilter>]
- description: The character filters for the index.
  name: char_filters
  types:
  - <xref:list>[<xref:azure.search.documents.indexes.models.CharFilter>]
- description: The normalizers for the index.
  name: normalizers
  types:
  - <xref:list>[<xref:azure.search.documents.indexes.models.LexicalNormalizer>]
- description: 'A description of an encryption key that you create in Azure Key Vault.

    This key is used to provide an additional level of encryption-at-rest for your
    data when you

    want full assurance that no one, not even Microsoft, can decrypt your data in
    Azure Cognitive

    Search. Once you have encrypted your data, it will always remain encrypted. Azure
    Cognitive

    Search will ignore attempts to set this property to null. You can change this
    property as

    needed if you want to rotate your encryption key; Your data will be unaffected.
    Encryption with

    customer-managed keys is not available for free search services, and is only available
    for paid

    services created on or after January 1, 2019.'
  name: encryption_key
  types:
  - <xref:azure.search.documents.indexes.models.SearchResourceEncryptionKey>
- description: 'The type of similarity algorithm to be used when scoring and ranking
    the

    documents matching a search query. The similarity algorithm can only be defined
    at index

    creation time and cannot be modified on existing indexes. If null, the ClassicSimilarity

    algorithm is used.'
  name: similarity
  types:
  - <xref:azure.search.documents.indexes.models.SimilarityAlgorithm>
- description: Defines parameters for a search index that influence semantic capabilities.
  name: semantic_search
  types:
  - <xref:azure.search.documents.indexes.models.SemanticSearch>
- description: Defines parameters for a search index that influence scoring in a vector
    space.
  name: vector_search
  types:
  - <xref:azure.search.documents.indexes.models.VectorSearch>
- description: The ETag of the index.
  name: e_tag
  types:
  - <xref:str>
methods:
- uid: azure.search.documents.indexes.models.SearchIndex.as_dict
  name: as_dict
  summary: Return a dict that can be serialized using json.dump.
  signature: 'as_dict(keep_readonly: bool = True, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'True'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.search.documents.indexes.models.SearchIndex.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a SearchIndex instance.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> SearchIndex'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: A SearchIndex instance
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndex>
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.search.documents.indexes.models.SearchIndex.from_dict
  name: from_dict
  summary: Parse a dict using given key extractor return a model.
  signature: 'from_dict(data: Any, content_type: str | None = None) -> SearchIndex'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: A SearchIndex instance
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndex>
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.search.documents.indexes.models.SearchIndex.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to server from this model.

    :param bool keep_readonly: If you want to serialize the readonly attributes

    :returns: A dict JSON compatible object

    :rtype: dict'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    defaultValue: 'False'
