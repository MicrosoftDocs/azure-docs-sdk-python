### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.search.documents.indexes.SearchIndexClient.analyze_text
  - azure.search.documents.indexes.SearchIndexClient.close
  - azure.search.documents.indexes.SearchIndexClient.create_index
  - azure.search.documents.indexes.SearchIndexClient.create_or_update_index
  - azure.search.documents.indexes.SearchIndexClient.create_or_update_synonym_map
  - azure.search.documents.indexes.SearchIndexClient.create_synonym_map
  - azure.search.documents.indexes.SearchIndexClient.delete_index
  - azure.search.documents.indexes.SearchIndexClient.delete_synonym_map
  - azure.search.documents.indexes.SearchIndexClient.get_index
  - azure.search.documents.indexes.SearchIndexClient.get_index_statistics
  - azure.search.documents.indexes.SearchIndexClient.get_search_client
  - azure.search.documents.indexes.SearchIndexClient.get_service_statistics
  - azure.search.documents.indexes.SearchIndexClient.get_synonym_map
  - azure.search.documents.indexes.SearchIndexClient.get_synonym_map_names
  - azure.search.documents.indexes.SearchIndexClient.get_synonym_maps
  - azure.search.documents.indexes.SearchIndexClient.list_index_names
  - azure.search.documents.indexes.SearchIndexClient.list_indexes
  class: azure.search.documents.indexes.SearchIndexClient
  fullName: azure.search.documents.indexes.SearchIndexClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.search.documents._headers_mixin.HeadersMixin
  langs:
  - python
  module: azure.search.documents.indexes
  name: SearchIndexClient
  summary: A client to interact with Azure search service index.
  syntax:
    content: SearchIndexClient(endpoint, credential, **kwargs)
    parameters:
    - description: The URL endpoint of an Azure search service
      id: endpoint
      type:
      - str
    - description: A credential to authorize search client requests
      id: credential
      type:
      - azure.core.credentials.AzureKeyCredential
    - description: The Search API version to use for requests.
      id: api_version
      type:
      - str
  type: class
  uid: azure.search.documents.indexes.SearchIndexClient
- class: azure.search.documents.indexes.SearchIndexClient
  example:
  - "Analyze text<!--[!code-python[Main](les\\sample_analyze_text.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\3\\\\azure-search-documents-11.1.0b2\\\
    \\samples\\\\sample_analyze_text.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   from azure.core.credentials import AzureKeyCredential\n   from\
    \ azure.search.documents.indexes import SearchIndexClient\n   from azure.search.documents.indexes.models\
    \ import AnalyzeTextOptions\n\n   client = SearchIndexClient(service_endpoint,\
    \ AzureKeyCredential(key))\n\n   analyze_request = AnalyzeTextOptions(text=\"\
    One's <two/>\", analyzer_name=\"standard.lucene\")\n\n   result = client.analyze_text(index_name,\
    \ analyze_request)\n   print(result.as_dict())\n\n   ````\n"
  fullName: azure.search.documents.indexes.SearchIndexClient.analyze_text
  langs:
  - python
  module: azure.search.documents.indexes
  name: analyze_text(index_name, analyze_request, **kwargs)
  namewithoutparameters: analyze_text
  summary: Shows how an analyzer breaks text into tokens.
  syntax:
    content: analyze_text(index_name, analyze_request, **kwargs)
    parameters:
    - description: The name of the index for which to test an analyzer.
      id: index_name
      isRequired: true
      type:
      - str
    - description: The text and analyzer or analysis components to test.
      id: analyze_request
      isRequired: true
      type:
      - azure.search.documents.indexes.models.AnalyzeTextOptions
    return:
      description: AnalyzeResult
      type:
      - azure.search.documents.indexes.models.AnalyzeResult
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.analyze_text
- class: azure.search.documents.indexes.SearchIndexClient
  fullName: azure.search.documents.indexes.SearchIndexClient.close
  langs:
  - python
  module: azure.search.documents.indexes
  name: close()
  namewithoutparameters: close
  summary: Close the <xref:azure.search.documents.indexes.SearchIndexClient> session.
  syntax:
    content: close()
    parameters: []
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.close
- class: azure.search.documents.indexes.SearchIndexClient
  example:
  - "Creating a new index.<!--[!code-python[Main](les\\sample_index_crud_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\3\\\\azure-search-documents-11.1.0b2\\\\samples\\\\sample_index_crud_operations.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   name = \"hotels\"\
    \n   fields = [\n       SimpleField(name=\"hotelId\", type=SearchFieldDataType.String,\
    \ key=True),\n       SimpleField(name=\"baseRate\", type=SearchFieldDataType.Double),\n\
    \       SearchableField(name=\"description\", type=SearchFieldDataType.String),\n\
    \       ComplexField(name=\"address\", fields=[\n           SimpleField(name=\"\
    streetAddress\", type=SearchFieldDataType.String),\n           SimpleField(name=\"\
    city\", type=SearchFieldDataType.String),\n       ])\n   ]\n   cors_options =\
    \ CorsOptions(allowed_origins=[\"*\"], max_age_in_seconds=60)\n   scoring_profiles\
    \ = []\n   index = SearchIndex(\n       name=name,\n       fields=fields,\n  \
    \     scoring_profiles=scoring_profiles,\n       cors_options=cors_options)\n\n\
    \   result = client.create_index(index)\n\n   ````\n"
  fullName: azure.search.documents.indexes.SearchIndexClient.create_index
  langs:
  - python
  module: azure.search.documents.indexes
  name: create_index(index, **kwargs)
  namewithoutparameters: create_index
  summary: Creates a new search index.
  syntax:
    content: create_index(index, **kwargs)
    parameters:
    - description: The index object.
      id: index
      isRequired: true
      type:
      - azure.search.documents.indexes.models.SearchIndex
    return:
      description: The index created
      type:
      - azure.search.documents.indexes.models.SearchIndex
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.create_index
- class: azure.search.documents.indexes.SearchIndexClient
  example:
  - "Update an index.<!--[!code-python[Main](les\\sample_index_crud_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\3\\\\azure-search-documents-11.1.0b2\\\\samples\\\\sample_index_crud_operations.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   name = \"hotels\"\
    \n   fields = [\n       SimpleField(name=\"hotelId\", type=SearchFieldDataType.String,\
    \ key=True),\n       SimpleField(name=\"baseRate\", type=SearchFieldDataType.Double),\n\
    \       SearchableField(name=\"description\", type=SearchFieldDataType.String),\n\
    \       SearchableField(name=\"hotelName\", type=SearchFieldDataType.String),\n\
    \       ComplexField(name=\"address\", fields=[\n           SimpleField(name=\"\
    streetAddress\", type=SearchFieldDataType.String),\n           SimpleField(name=\"\
    city\", type=SearchFieldDataType.String),\n           SimpleField(name=\"state\"\
    , type=SearchFieldDataType.String),\n       ])\n   ]\n   cors_options = CorsOptions(allowed_origins=[\"\
    *\"], max_age_in_seconds=60)\n   scoring_profile = ScoringProfile(\n       name=\"\
    MyProfile\"\n   )\n   scoring_profiles = []\n   scoring_profiles.append(scoring_profile)\n\
    \   index = SearchIndex(\n       name=name,\n       fields=fields,\n       scoring_profiles=scoring_profiles,\n\
    \       cors_options=cors_options)\n\n   result = client.create_or_update_index(index=index)\n\
    \n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.search.documents.indexes.SearchIndexClient.create_or_update_index
  langs:
  - python
  module: azure.search.documents.indexes
  name: create_or_update_index(index, allow_index_downtime=None, **kwargs)
  namewithoutparameters: create_or_update_index
  summary: Creates a new search index or updates an index if it already exists.
  syntax:
    content: create_or_update_index(index, allow_index_downtime=None, **kwargs)
    parameters:
    - description: The index object.
      id: index
      isRequired: true
      type:
      - azure.search.documents.indexes.models.SearchIndex
    - description: 'Allows new analyzers, tokenizers, token filters, or char filters

        to be added to an index by taking the index offline for at least a few seconds.
        This

        temporarily causes indexing and query requests to fail. Performance and write
        availability of

        the index can be impaired for several minutes after the index is updated,
        or longer for very

        large indexes.'
      id: allow_index_downtime
      isRequired: true
      type:
      - bool
    - description: The match condition to use upon the etag
      id: match_condition
      isRequired: true
    return:
      description: The index created or updated
      type:
      - azure.search.documents.indexes.models.SearchIndex
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.create_or_update_index
- class: azure.search.documents.indexes.SearchIndexClient
  fullName: azure.search.documents.indexes.SearchIndexClient.create_or_update_synonym_map
  langs:
  - python
  module: azure.search.documents.indexes
  name: create_or_update_synonym_map(synonym_map, **kwargs)
  namewithoutparameters: create_or_update_synonym_map
  summary: 'Create a new Synonym Map in an Azure Search service, or update an

    existing one.'
  syntax:
    content: create_or_update_synonym_map(synonym_map, **kwargs)
    parameters:
    - description: The Synonym Map object
      id: synonym_map
      isRequired: true
      type:
      - azure.search.documents.indexes.models.SynonymMap
    - description: The match condition to use upon the etag
      id: match_condition
      isRequired: true
    return:
      description: The created or updated Synonym Map
      type:
      - azure.search.documents.indexes.models.SynonymMap
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.create_or_update_synonym_map
- class: azure.search.documents.indexes.SearchIndexClient
  example:
  - "Create a Synonym Map<!--[!code-python[Main](les\\sample_synonym_map_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\3\\\\azure-search-documents-11.1.0b2\\\\samples\\\\sample_synonym_map_operations.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   solr_format_synonyms\
    \ = \"\\n\".join([\n       \"USA, United States, United States of America\",\n\
    \       \"Washington, Wash. => WA\",\n   ])\n   synonym_map = SynonymMap(name=\"\
    test-syn-map\", synonyms=solr_format_synonyms)\n   result = client.create_synonym_map(synonym_map)\n\
    \   print(\"Create new Synonym Map 'test-syn-map succeeded\")\n\n   ````\n"
  fullName: azure.search.documents.indexes.SearchIndexClient.create_synonym_map
  langs:
  - python
  module: azure.search.documents.indexes
  name: create_synonym_map(synonym_map, **kwargs)
  namewithoutparameters: create_synonym_map
  summary: Create a new Synonym Map in an Azure Search service
  syntax:
    content: create_synonym_map(synonym_map, **kwargs)
    parameters:
    - description: The Synonym Map object
      id: synonym_map
      isRequired: true
      type:
      - azure.search.documents.indexes.models.SynonymMap
    return:
      description: The created Synonym Map
      type:
      - azure.search.documents.indexes.models.SynonymMap
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.create_synonym_map
- class: azure.search.documents.indexes.SearchIndexClient
  example:
  - "Delete an index.<!--[!code-python[Main](les\\sample_index_crud_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\3\\\\azure-search-documents-11.1.0b2\\\\samples\\\\sample_index_crud_operations.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   name = \"hotels\"\
    \n   client.delete_index(name)\n\n   ````\n"
  fullName: azure.search.documents.indexes.SearchIndexClient.delete_index
  langs:
  - python
  module: azure.search.documents.indexes
  name: delete_index(index, **kwargs)
  namewithoutparameters: delete_index
  summary: 'Deletes a search index and all the documents it contains. The model must
    be

    provided instead of the name to use the access conditions.'
  syntax:
    content: delete_index(index, **kwargs)
    parameters:
    - description: The index to retrieve.
      id: index
      isRequired: true
      type:
      - str
      - azure.search.documents.indexes.models.SearchIndex
    - description: The match condition to use upon the etag
      id: match_condition
      isRequired: true
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.delete_index
- class: azure.search.documents.indexes.SearchIndexClient
  example:
  - "Delete a Synonym Map<!--[!code-python[Main](les\\sample_synonym_map_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\3\\\\azure-search-documents-11.1.0b2\\\\samples\\\\sample_synonym_map_operations.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   client.delete_synonym_map(\"\
    test-syn-map\")\n   print(\"Synonym Map 'test-syn-map' deleted\")\n\n   ````\n"
  fullName: azure.search.documents.indexes.SearchIndexClient.delete_synonym_map
  langs:
  - python
  module: azure.search.documents.indexes
  name: delete_synonym_map(synonym_map, **kwargs)
  namewithoutparameters: delete_synonym_map
  summary: 'Delete a named Synonym Map in an Azure Search service. To use access conditions,

    the SynonymMap model must be provided instead of the name. It is enough to provide

    the name of the synonym map to delete unconditionally.'
  syntax:
    content: delete_synonym_map(synonym_map, **kwargs)
    parameters:
    - description: The Synonym Map to delete
      id: name
      isRequired: true
      type:
      - str
      - azure.search.documents.indexes.models.SynonymMap
    - description: The match condition to use upon the etag
      id: match_condition
      isRequired: true
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.delete_synonym_map
- class: azure.search.documents.indexes.SearchIndexClient
  example:
  - "Get an index.<!--[!code-python[Main](les\\sample_index_crud_operations.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\3\\\\\
    azure-search-documents-11.1.0b2\\\\samples\\\\sample_index_crud_operations.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   name = \"hotels\"\
    \n   result = client.get_index(name)\n\n   ````\n"
  fullName: azure.search.documents.indexes.SearchIndexClient.get_index
  langs:
  - python
  module: azure.search.documents.indexes
  name: get_index(name, **kwargs)
  namewithoutparameters: get_index
  syntax:
    content: get_index(name, **kwargs)
    parameters:
    - description: The name of the index to retrieve.
      id: name
      isRequired: true
      type:
      - str
    return:
      description: SearchIndex object
      type:
      - azure.search.documents.indexes.models.SearchIndex
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.get_index
- class: azure.search.documents.indexes.SearchIndexClient
  fullName: azure.search.documents.indexes.SearchIndexClient.get_index_statistics
  langs:
  - python
  module: azure.search.documents.indexes
  name: get_index_statistics(index_name, **kwargs)
  namewithoutparameters: get_index_statistics
  summary: 'Returns statistics for the given index, including a document count

    and storage usage.'
  syntax:
    content: get_index_statistics(index_name, **kwargs)
    parameters:
    - description: The name of the index to retrieve.
      id: index_name
      isRequired: true
      type:
      - str
    return:
      description: Statistics for the given index, including a document count and
        storage usage.
      type:
      - dict
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.get_index_statistics
- class: azure.search.documents.indexes.SearchIndexClient
  fullName: azure.search.documents.indexes.SearchIndexClient.get_search_client
  langs:
  - python
  module: azure.search.documents.indexes
  name: get_search_client(index_name, **kwargs)
  namewithoutparameters: get_search_client
  summary: Return a client to perform operations on Search
  syntax:
    content: get_search_client(index_name, **kwargs)
    parameters:
    - description: The name of the Search Index
      id: index_name
      isRequired: true
      type:
      - str
    return:
      type:
      - azure.search.documents.SearchClient
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.get_search_client
- class: azure.search.documents.indexes.SearchIndexClient
  fullName: azure.search.documents.indexes.SearchIndexClient.get_service_statistics
  langs:
  - python
  module: azure.search.documents.indexes
  name: get_service_statistics(**kwargs)
  namewithoutparameters: get_service_statistics
  summary: Get service level statistics for a search service.
  syntax:
    content: get_service_statistics(**kwargs)
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.get_service_statistics
- class: azure.search.documents.indexes.SearchIndexClient
  example:
  - "Get a Synonym Map<!--[!code-python[Main](les\\sample_synonym_map_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\3\\\\azure-search-documents-11.1.0b2\\\\samples\\\\sample_synonym_map_operations.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   result = client.get_synonym_map(\"\
    test-syn-map\")\n   print(\"Retrived Synonym Map 'test-syn-map' with synonyms\"\
    )\n   for syn in result.synonyms:\n       print(\"    {}\".format(syn))\n\n  \
    \ ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.search.documents.indexes.SearchIndexClient.get_synonym_map
  langs:
  - python
  module: azure.search.documents.indexes
  name: get_synonym_map(name, **kwargs)
  namewithoutparameters: get_synonym_map
  summary: Retrieve a named Synonym Map in an Azure Search service
  syntax:
    content: get_synonym_map(name, **kwargs)
    parameters:
    - description: The name of the Synonym Map to get
      id: name
      isRequired: true
      type:
      - str
    return:
      description: The retrieved Synonym Map
      type:
      - azure.search.documents.indexes.models.SynonymMap
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.get_synonym_map
- class: azure.search.documents.indexes.SearchIndexClient
  fullName: azure.search.documents.indexes.SearchIndexClient.get_synonym_map_names
  langs:
  - python
  module: azure.search.documents.indexes
  name: get_synonym_map_names(**kwargs)
  namewithoutparameters: get_synonym_map_names
  summary: List the Synonym Map names in an Azure Search service.
  syntax:
    content: get_synonym_map_names(**kwargs)
    return:
      description: List of synonym maps
      type:
      - list[str]
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.get_synonym_map_names
- class: azure.search.documents.indexes.SearchIndexClient
  example:
  - "List Synonym Maps<!--[!code-python[Main](les\\sample_synonym_map_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\3\\\\azure-search-documents-11.1.0b2\\\\samples\\\\sample_synonym_map_operations.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   result = client.get_synonym_maps()\n\
    \   names = [x.name for x in result]\n   print(\"Found {} Synonym Maps in the\
    \ service: {}\".format(len(result), \", \".join(names)))\n\n   ````\n"
  fullName: azure.search.documents.indexes.SearchIndexClient.get_synonym_maps
  langs:
  - python
  module: azure.search.documents.indexes
  name: get_synonym_maps(**kwargs)
  namewithoutparameters: get_synonym_maps
  summary: List the Synonym Maps in an Azure Search service.
  syntax:
    content: get_synonym_maps(**kwargs)
    return:
      description: List of synonym maps
      type:
      - list[azure.search.documents.indexes.models.SynonymMap]
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.get_synonym_maps
- class: azure.search.documents.indexes.SearchIndexClient
  fullName: azure.search.documents.indexes.SearchIndexClient.list_index_names
  langs:
  - python
  module: azure.search.documents.indexes
  name: list_index_names(**kwargs)
  namewithoutparameters: list_index_names
  summary: List the index names in an Azure Search service.
  syntax:
    content: list_index_names(**kwargs)
    return:
      description: List of index names
      type:
      - list[str]
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.list_index_names
- class: azure.search.documents.indexes.SearchIndexClient
  fullName: azure.search.documents.indexes.SearchIndexClient.list_indexes
  langs:
  - python
  module: azure.search.documents.indexes
  name: list_indexes(**kwargs)
  namewithoutparameters: list_indexes
  summary: List the indexes in an Azure Search service.
  syntax:
    content: list_indexes(**kwargs)
    return:
      description: List of indexes
      type:
      - list[azure.search.documents.indexes.models.SearchIndex]
  type: method
  uid: azure.search.documents.indexes.SearchIndexClient.list_indexes
references:
- fullName: azure.search.documents.indexes.SearchIndexClient.analyze_text
  isExternal: false
  name: analyze_text(index_name, analyze_request, **kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.analyze_text
- fullName: azure.search.documents.indexes.SearchIndexClient.close
  isExternal: false
  name: close()
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.close
- fullName: azure.search.documents.indexes.SearchIndexClient.create_index
  isExternal: false
  name: create_index(index, **kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.create_index
- fullName: azure.search.documents.indexes.SearchIndexClient.create_or_update_index
  isExternal: false
  name: create_or_update_index(index, allow_index_downtime=None, **kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.create_or_update_index
- fullName: azure.search.documents.indexes.SearchIndexClient.create_or_update_synonym_map
  isExternal: false
  name: create_or_update_synonym_map(synonym_map, **kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.create_or_update_synonym_map
- fullName: azure.search.documents.indexes.SearchIndexClient.create_synonym_map
  isExternal: false
  name: create_synonym_map(synonym_map, **kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.create_synonym_map
- fullName: azure.search.documents.indexes.SearchIndexClient.delete_index
  isExternal: false
  name: delete_index(index, **kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.delete_index
- fullName: azure.search.documents.indexes.SearchIndexClient.delete_synonym_map
  isExternal: false
  name: delete_synonym_map(synonym_map, **kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.delete_synonym_map
- fullName: azure.search.documents.indexes.SearchIndexClient.get_index
  isExternal: false
  name: get_index(name, **kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.get_index
- fullName: azure.search.documents.indexes.SearchIndexClient.get_index_statistics
  isExternal: false
  name: get_index_statistics(index_name, **kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.get_index_statistics
- fullName: azure.search.documents.indexes.SearchIndexClient.get_search_client
  isExternal: false
  name: get_search_client(index_name, **kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.get_search_client
- fullName: azure.search.documents.indexes.SearchIndexClient.get_service_statistics
  isExternal: false
  name: get_service_statistics(**kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.get_service_statistics
- fullName: azure.search.documents.indexes.SearchIndexClient.get_synonym_map
  isExternal: false
  name: get_synonym_map(name, **kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.get_synonym_map
- fullName: azure.search.documents.indexes.SearchIndexClient.get_synonym_map_names
  isExternal: false
  name: get_synonym_map_names(**kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.get_synonym_map_names
- fullName: azure.search.documents.indexes.SearchIndexClient.get_synonym_maps
  isExternal: false
  name: get_synonym_maps(**kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.get_synonym_maps
- fullName: azure.search.documents.indexes.SearchIndexClient.list_index_names
  isExternal: false
  name: list_index_names(**kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.list_index_names
- fullName: azure.search.documents.indexes.SearchIndexClient.list_indexes
  isExternal: false
  name: list_indexes(**kwargs)
  parent: azure.search.documents.indexes.SearchIndexClient
  uid: azure.search.documents.indexes.SearchIndexClient.list_indexes
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
- fullName: list[azure.search.documents.indexes.models.SynonymMap]
  name: list[SynonymMap]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.search.documents.indexes.models.SynonymMap
    name: SynonymMap
    uid: azure.search.documents.indexes.models.SynonymMap
  - fullName: ']'
    name: ']'
  uid: list[azure.search.documents.indexes.models.SynonymMap]
- fullName: list[azure.search.documents.indexes.models.SearchIndex]
  name: list[SearchIndex]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.search.documents.indexes.models.SearchIndex
    name: SearchIndex
    uid: azure.search.documents.indexes.models.SearchIndex
  - fullName: ']'
    name: ']'
  uid: list[azure.search.documents.indexes.models.SearchIndex]
