### YamlMime:PythonClass
uid: azure.search.documents.SearchClient
name: SearchClient
fullName: azure.search.documents.SearchClient
module: azure.search.documents
inheritances:
- azure.search.documents._headers_mixin.HeadersMixin
summary: A client to interact with an existing Azure search index.
constructor:
  syntax: 'SearchClient(endpoint: str, index_name: str, credential: AzureKeyCredential
    | TokenCredential, **kwargs: Any)'
  parameters:
  - name: endpoint
    description: The URL endpoint of an Azure search service
    isRequired: true
    types:
    - <xref:str>
  - name: index_name
    description: The name of the index to connect to
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: A credential to authorize search client requests
    isRequired: true
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
    - <xref:azure.core.credentials.TokenCredential>
  keywordOnlyParameters:
  - name: api_version
    description: The Search API version to use for requests.
    types:
    - <xref:str>
  - name: audience
    description: 'sets the Audience to use for authentication with Azure Active Directory
      (AAD). The

      audience is not considered when using a shared key. If audience is not provided,
      the public cloud audience

      will be assumed.'
    types:
    - <xref:str>
examples:
- "Creating the SearchClient with an API key.<!--[!code-python[Main](les\\sample_authentication.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
  \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\200\\\\azure-search-documents-11.6.0b3\\\
  \\samples\\\\sample_authentication.py\", \"xml:space\": \"preserve\", \"force\"\
  : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
  linenos\": false} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
  \   from azure.search.documents import SearchClient\n\n   service_endpoint = os.environ[\"\
  AZURE_SEARCH_SERVICE_ENDPOINT\"]\n   index_name = os.environ[\"AZURE_SEARCH_INDEX_NAME\"\
  ]\n   key = os.environ[\"AZURE_SEARCH_API_KEY\"]\n\n   search_client = SearchClient(service_endpoint,\
  \ index_name, AzureKeyCredential(key))\n\n   ````\n"
methods:
- uid: azure.search.documents.SearchClient.autocomplete
  name: autocomplete
  summary: Get search auto-completion results from the Azure search index.
  signature: 'autocomplete(search_text: str, suggester_name: str, *, mode: str | AutocompleteMode
    | None = None, filter: str | None = None, use_fuzzy_matching: bool | None = None,
    highlight_post_tag: str | None = None, highlight_pre_tag: str | None = None, minimum_coverage:
    float | None = None, search_fields: List[str] | None = None, top: int | None =
    None, **kwargs) -> List[Dict]'
  parameters:
  - name: search_text
    description: The search text on which to base autocomplete results.
    isRequired: true
    types:
    - <xref:str>
  - name: suggester_name
    description: 'The name of the suggester as specified in the suggesters

      collection that''s part of the index definition.'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: mode
    description: 'Specifies the mode for Autocomplete. The default is ''oneTerm''.
      Use

      ''twoTerms'' to get shingles and ''oneTermWithContext'' to use the current context
      while producing

      auto-completed terms. Possible values include: ''oneTerm'', ''twoTerms'', ''oneTermWithContext''.'
    types:
    - <xref:str>
    - <xref:azure.search.documents.models.AutocompleteMode>
  - name: filter
    description: 'An OData expression that filters the documents used to produce completed
      terms

      for the Autocomplete result.'
    types:
    - <xref:str>
  - name: use_fuzzy_matching
    description: 'A value indicating whether to use fuzzy matching for the

      autocomplete query. Default is false. When set to true, the query will find
      terms even if

      there''s a substituted or missing character in the search text. While this provides
      a better

      experience in some scenarios, it comes at a performance cost as fuzzy autocomplete
      queries are

      slower and consume more resources.'
    types:
    - <xref:bool>
  - name: highlight_post_tag
    description: 'A string tag that is appended to hit highlights. Must be set with

      highlightPreTag. If omitted, hit highlighting is disabled.'
    types:
    - <xref:str>
  - name: highlight_pre_tag
    description: 'A string tag that is prepended to hit highlights. Must be set with

      highlightPostTag. If omitted, hit highlighting is disabled.'
    types:
    - <xref:str>
  - name: minimum_coverage
    description: 'A number between 0 and 100 indicating the percentage of the index
      that

      must be covered by an autocomplete query in order for the query to be reported
      as a success.

      This parameter can be useful for ensuring search availability even for services
      with only one

      replica. The default is 80.'
    types:
    - <xref:float>
  - name: search_fields
    description: 'The list of field names to consider when querying for auto-completed

      terms. Target fields must be included in the specified suggester.'
    types:
    - <xref:list>[<xref:str>]
  - name: top
    description: 'The number of auto-completed terms to retrieve. This must be a value
      between 1 and

      100. The default is 5.'
    types:
    - <xref:int>
  return:
    description: List of auto-completion results.
    types:
    - <xref:list>[<xref:dict>]
  examples:
  - "Get a auto-completions.<!--[!code-python[Main](les\\sample_autocomplete.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\200\\\\azure-search-documents-11.6.0b3\\\
    \\samples\\\\sample_autocomplete.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
    \   from azure.search.documents import SearchClient\n\n   search_client = SearchClient(service_endpoint,\
    \ index_name, AzureKeyCredential(key))\n\n   results = search_client.autocomplete(search_text=\"\
    bo\", suggester_name=\"sg\")\n\n   print(\"Autocomplete suggestions for 'bo'\"\
    )\n   for result in results:\n       print(\"    Completion: {}\".format(result[\"\
    text\"]))\n\n   ````\n"
- uid: azure.search.documents.SearchClient.close
  name: close
  summary: 'Close the session.

    :return: None

    :rtype: None'
  signature: close() -> None
- uid: azure.search.documents.SearchClient.delete_documents
  name: delete_documents
  summary: 'Delete documents from the Azure search index


    Delete removes the specified document from the index. Any field you

    specify in a delete operation, other than the key field, will be

    ignored. If you want to remove an individual field from a document, use

    *merge_documents* instead and set the field explicitly to None.


    Delete operations are idempotent. That is, even if a document key does

    not exist in the index, attempting a delete operation with that key will

    result in a 200 status code.'
  signature: 'delete_documents(documents: List[Dict], **kwargs: Any) -> List[IndexingResult]'
  parameters:
  - name: documents
    description: A list of documents to delete.
    isRequired: true
    types:
    - <xref:list>[<xref:dict>]
  return:
    description: List of IndexingResult
    types:
    - <xref:list>[<xref:azure.search.documents.models.IndexingResult>]
  examples:
  - "Delete existing documents to an index<!--[!code-python[Main](les\\sample_crud_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    200\\\\azure-search-documents-11.6.0b3\\\\samples\\\\sample_crud_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   result = search_client.delete_documents(documents=[{\"hotelId\": \"1000\"\
    }])\n\n   print(\"Delete new document succeeded: {}\".format(result[0].succeeded))\n\
    \n   ````\n"
- uid: azure.search.documents.SearchClient.get_document
  name: get_document
  summary: Retrieve a document from the Azure search index by its key.
  signature: 'get_document(key: str, selected_fields: List[str] | None = None, **kwargs:
    Any) -> Dict'
  parameters:
  - name: key
    description: The primary key value for the document to retrieve
    isRequired: true
    types:
    - <xref:str>
  - name: selected_fields
    description: an allow-list of fields to include in the results
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
  return:
    description: The document as stored in the Azure search index
    types:
    - <xref:dict>
  examples:
  - "Get a specific document from the search index.<!--[!code-python[Main](les\\sample_get_document.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    200\\\\azure-search-documents-11.6.0b3\\\\samples\\\\sample_get_document.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.core.credentials import AzureKeyCredential\n   from azure.search.documents\
    \ import SearchClient\n\n   search_client = SearchClient(service_endpoint, index_name,\
    \ AzureKeyCredential(key))\n\n   result = search_client.get_document(key=\"23\"\
    )\n\n   print(\"Details for hotel '23' are:\")\n   print(\"        Name: {}\"\
    .format(result[\"hotelName\"]))\n   print(\"      Rating: {}\".format(result[\"\
    rating\"]))\n   print(\"    Category: {}\".format(result[\"category\"]))\n\n \
    \  ````\n"
- uid: azure.search.documents.SearchClient.get_document_count
  name: get_document_count
  summary: Return the number of documents in the Azure search index.
  signature: 'get_document_count(**kwargs: Any) -> int'
  return:
    description: The count of documents in the index
    types:
    - <xref:int>
- uid: azure.search.documents.SearchClient.index_documents
  name: index_documents
  summary: 'Specify a document operations to perform as a batch.


    :raises ~azure.search.documents.RequestEntityTooLargeError'
  signature: 'index_documents(batch: IndexDocumentsBatch, **kwargs: Any) -> List[IndexingResult]'
  parameters:
  - name: batch
    description: A batch of document operations to perform.
    isRequired: true
    types:
    - <xref:azure.search.documents.IndexDocumentsBatch>
  return:
    description: List of IndexingResult
    types:
    - <xref:list>[<xref:azure.search.documents.models.IndexingResult>]
- uid: azure.search.documents.SearchClient.merge_documents
  name: merge_documents
  summary: 'Merge documents in to existing documents in the Azure search index.


    Merge updates an existing document with the specified fields. If the

    document doesn''t exist, the merge will fail. Any field you specify in a

    merge will replace the existing field in the document. This also applies

    to collections of primitive and complex types.'
  signature: 'merge_documents(documents: List[Dict], **kwargs: Any) -> List[IndexingResult]'
  parameters:
  - name: documents
    description: A list of documents to merge.
    isRequired: true
    types:
    - <xref:list>[<xref:dict>]
  return:
    description: List of IndexingResult
    types:
    - <xref:list>[<xref:azure.search.documents.models.IndexingResult>]
  examples:
  - "Merge fields into existing documents to an index<!--[!code-python[Main](les\\\
    sample_crud_operations.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\200\\\\azure-search-documents-11.6.0b3\\\\samples\\\
    \\sample_crud_operations.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   result = search_client.merge_documents(documents=[{\"\
    hotelId\": \"1000\", \"rating\": 4.5}])\n\n   print(\"Merge into new document\
    \ succeeded: {}\".format(result[0].succeeded))\n\n   ````\n"
- uid: azure.search.documents.SearchClient.merge_or_upload_documents
  name: merge_or_upload_documents
  summary: 'Merge documents in to existing documents in the Azure search index,

    or upload them if they do not yet exist.


    This action behaves like *merge_documents* if a document with the given

    key already exists in the index. If the document does not exist, it

    behaves like *upload_documents* with a new document.'
  signature: 'merge_or_upload_documents(documents: List[Dict], **kwargs: Any) -> List[IndexingResult]'
  parameters:
  - name: documents
    description: A list of documents to merge or upload.
    isRequired: true
    types:
    - <xref:list>[<xref:dict>]
  return:
    description: List of IndexingResult
    types:
    - <xref:list>[<xref:azure.search.documents.models.IndexingResult>]
- uid: azure.search.documents.SearchClient.search
  name: search
  summary: Search the Azure search index for documents.
  signature: 'search(search_text: str | None = None, *, include_total_count: bool
    | None = None, facets: List[str] | None = None, filter: str | None = None, highlight_fields:
    str | None = None, highlight_post_tag: str | None = None, highlight_pre_tag: str
    | None = None, minimum_coverage: float | None = None, order_by: List[str] | None
    = None, query_type: str | QueryType | None = None, scoring_parameters: List[str]
    | None = None, scoring_profile: str | None = None, semantic_query: str | None
    = None, search_fields: List[str] | None = None, search_mode: str | SearchMode
    | None = None, query_language: str | QueryLanguage | None = None, query_speller:
    str | QuerySpellerType | None = None, query_answer: str | QueryAnswerType | None
    = None, query_answer_count: int | None = None, query_answer_threshold: float |
    None = None, query_caption: str | QueryCaptionType | None = None, query_caption_highlight_enabled:
    bool | None = None, semantic_fields: List[str] | None = None, semantic_configuration_name:
    str | None = None, select: List[str] | None = None, skip: int | None = None, top:
    int | None = None, scoring_statistics: str | ScoringStatistics | None = None,
    session_id: str | None = None, vector_queries: List[VectorQuery] | None = None,
    vector_filter_mode: str | VectorFilterMode | None = None, semantic_error_mode:
    str | SemanticErrorMode | None = None, semantic_max_wait_in_milliseconds: int
    | None = None, debug: str | QueryDebugMode | None = None, **kwargs: Any) -> SearchItemPaged[Dict]'
  parameters:
  - name: search_text
    description: 'A full-text search query expression; Use "*" or omit this parameter
      to

      match all documents.'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: include_total_count
    description: 'A value that specifies whether to fetch the total count of

      results. Default is false. Setting this value to true may have a performance
      impact. Note that

      the count returned is an approximation.'
    types:
    - <xref:bool>
  - name: facets
    description: 'The list of facet expressions to apply to the search query. Each
      facet

      expression contains a field name, optionally followed by a comma-separated list
      of name:value

      pairs.'
    types:
    - <xref:list>[<xref:str>]
  - name: filter
    description: The OData $filter expression to apply to the search query.
    types:
    - <xref:str>
  - name: highlight_fields
    description: 'The comma-separated list of field names to use for hit highlights.

      Only searchable fields can be used for hit highlighting.'
    types:
    - <xref:str>
  - name: highlight_post_tag
    description: 'A string tag that is appended to hit highlights. Must be set with

      highlightPreTag. Default is </em>.'
    types:
    - <xref:str>
  - name: highlight_pre_tag
    description: 'A string tag that is prepended to hit highlights. Must be set with

      highlightPostTag. Default is <em>.'
    types:
    - <xref:str>
  - name: minimum_coverage
    description: 'A number between 0 and 100 indicating the percentage of the index
      that

      must be covered by a search query in order for the query to be reported as a
      success. This

      parameter can be useful for ensuring search availability even for services with
      only one

      replica. The default is 100.'
    types:
    - <xref:float>
  - name: order_by
    description: 'The list of OData $orderby expressions by which to sort the results.
      Each

      expression can be either a field name or a call to either the geo.distance()
      or the

      search.score() functions. Each expression can be followed by asc to indicate
      ascending, and

      desc to indicate descending. The default is ascending order. Ties will be broken
      by the match

      scores of documents. If no OrderBy is specified, the default sort order is descending
      by

      document match score. There can be at most 32 $orderby clauses.'
    types:
    - <xref:list>[<xref:str>]
  - name: query_type
    description: 'A value that specifies the syntax of the search query. The default
      is

      ''simple''. Use ''full'' if your query uses the Lucene query syntax. Possible
      values include:

      ''simple'', ''full'', "semantic".'
    types:
    - <xref:str>
    - <xref:azure.search.documents.models.QueryType>
  - name: scoring_parameters
    description: "The list of parameter values to be used in scoring functions (for\n\
      example, referencePointParameter) using the format name-values. For example,\
      \ if the scoring\nprofile defines a function with a parameter called 'mylocation'\
      \ the parameter string would be\n\"mylocation\u2013122.2,44.8\" (without the\
      \ quotes)."
    types:
    - <xref:list>[<xref:str>]
  - name: scoring_profile
    description: 'The name of a scoring profile to evaluate match scores for matching

      documents in order to sort the results.'
    types:
    - <xref:str>
  - name: semantic_query
    description: 'Allows setting a separate search query that will be solely used
      for

      semantic reranking, semantic captions and semantic answers. Is useful for scenarios
      where there

      is a need to use different queries between the base retrieval and ranking phase,
      and the L2

      semantic phase.'
    types:
    - <xref:str>
  - name: search_fields
    description: 'The list of field names to which to scope the full-text search.
      When

      using fielded search (fieldName:searchExpression) in a full Lucene query, the
      field names of

      each fielded search expression take precedence over any field names listed in
      this parameter.'
    types:
    - <xref:list>[<xref:str>]
  - name: search_mode
    description: 'A value that specifies whether any or all of the search terms must
      be

      matched in order to count the document as a match. Possible values include:
      ''any'', ''all''.'
    types:
    - <xref:str>
    - <xref:azure.search.documents.models.SearchMode>
  - name: query_language
    description: 'The language of the search query. Possible values include: "none",
      "en-us",

      "en-gb", "en-in", "en-ca", "en-au", "fr-fr", "fr-ca", "de-de", "es-es", "es-mx",
      "zh-cn",

      "zh-tw", "pt-br", "pt-pt", "it-it", "ja-jp", "ko-kr", "ru-ru", "cs-cz", "nl-be",
      "nl-nl",

      "hu-hu", "pl-pl", "sv-se", "tr-tr", "hi-in", "ar-sa", "ar-eg", "ar-ma", "ar-kw",
      "ar-jo",

      "da-dk", "no-no", "bg-bg", "hr-hr", "hr-ba", "ms-my", "ms-bn", "sl-sl", "ta-in",
      "vi-vn",

      "el-gr", "ro-ro", "is-is", "id-id", "th-th", "lt-lt", "uk-ua", "lv-lv", "et-ee",
      "ca-es",

      "fi-fi", "sr-ba", "sr-me", "sr-rs", "sk-sk", "nb-no", "hy-am", "bn-in", "eu-es",
      "gl-es",

      "gu-in", "he-il", "ga-ie", "kn-in", "ml-in", "mr-in", "fa-ae", "pa-in", "te-in",
      "ur-pk".'
    types:
    - <xref:str>
    - <xref:azure.search.documents.models.QueryLanguage>
  - name: query_speller
    description: 'A value that specified the type of the speller to use to spell-correct

      individual search query terms. Possible values include: "none", "lexicon".'
    types:
    - <xref:str>
    - <xref:azure.search.documents.models.QuerySpellerType>
  - name: query_answer
    description: 'This parameter is only valid if the query type is ''semantic''.
      If set,

      the query returns answers extracted from key passages in the highest ranked
      documents.

      Possible values include: "none", "extractive".'
    types:
    - <xref:str>
    - <xref:azure.search.documents.models.QueryAnswerType>
  - name: query_answer_count
    description: 'This parameter is only valid if the query type is ''semantic'' and

      query answer is ''extractive''. Configures the number of answers returned. Default
      count is 1.'
    types:
    - <xref:int>
  - name: query_answer_threshold
    description: 'This parameter is only valid if the query type is ''semantic'' and

      query answer is ''extractive''. Configures the number of confidence threshold.
      Default count is 0.7.'
    types:
    - <xref:float>
  - name: query_caption
    description: 'This parameter is only valid if the query type is ''semantic''.
      If set, the

      query returns captions extracted from key passages in the highest ranked documents.

      Defaults to ''None''. Possible values include: "none", "extractive".'
    types:
    - <xref:str>
    - <xref:azure.search.documents.models.QueryCaptionType>
  - name: query_caption_highlight_enabled
    description: 'This parameter is only valid if the query type is ''semantic'' when

      query caption is set to ''extractive''. Determines whether highlighting is enabled.

      Defaults to ''true''.'
    types:
    - <xref:bool>
  - name: semantic_fields
    description: The list of field names used for semantic search.
    types:
    - <xref:list>[<xref:str>]
  - name: semantic_configuration_name
    description: 'The name of the semantic configuration that will be used when

      processing documents for queries of type semantic.'
    types:
    - <xref:str>
  - name: select
    description: 'The list of fields to retrieve. If unspecified, all fields marked
      as retrievable

      in the schema are included.'
    types:
    - <xref:list>[<xref:str>]
  - name: skip
    description: 'The number of search results to skip. This value cannot be greater
      than 100,000.

      If you need to scan documents in sequence, but cannot use $skip due to this
      limitation,

      consider using $orderby on a totally-ordered key and $filter with a range query
      instead.'
    types:
    - <xref:int>
  - name: top
    description: 'The number of search results to retrieve. This can be used in conjunction
      with

      $skip to implement client-side paging of search results. If results are truncated
      due to

      server-side paging, the response will include a continuation token that can
      be used to issue

      another Search request for the next page of results.'
    types:
    - <xref:int>
  - name: scoring_statistics
    description: 'A value that specifies whether we want to calculate scoring

      statistics (such as document frequency) globally for more consistent scoring,
      or locally, for

      lower latency. The default is ''local''. Use ''global'' to aggregate scoring
      statistics globally

      before scoring. Using global scoring statistics can increase latency of search
      queries.

      Possible values include: "local", "global".'
    types:
    - <xref:str>
    - <xref:azure.search.documents.models.ScoringStatistics>
  - name: session_id
    description: 'A value to be used to create a sticky session, which can help getting
      more

      consistent results. As long as the same sessionId is used, a best-effort attempt
      will be made

      to target the same replica set. Be wary that reusing the same sessionID values
      repeatedly can

      interfere with the load balancing of the requests across replicas and adversely
      affect the

      performance of the search service. The value used as sessionId cannot start
      with a ''_''

      character.'
    types:
    - <xref:str>
  - name: semantic_error_mode
    description: 'Allows the user to choose whether a semantic call should fail

      completely (default / current behavior), or to return partial results. Known
      values are:

      "partial" and "fail".'
    types:
    - <xref:str>
    - <xref:azure.search.documents.models.SemanticErrorMode>
  - name: semantic_max_wait_in_milliseconds
    description: 'Allows the user to set an upper bound on the amount of

      time it takes for semantic enrichment to finish processing before the request
      fails.'
    types:
    - <xref:int>
  - name: debug
    description: 'Enables a debugging tool that can be used to further explore your
      Semantic search

      results. Known values are: "disabled", "speller", "semantic", and "all".'
    types:
    - <xref:str>
    - <xref:azure.search.documents.models.QueryDebugMode>
  - name: vector_queries
    description: The query parameters for vector and hybrid search queries.
    types:
    - <xref:list>[<xref:azure.search.documents.models.VectorQuery>]
  - name: vector_filter_mode
    description: 'Determines whether or not filters are applied before or after the

      vector search is performed. Default is ''preFilter''. Known values are: "postFilter"
      and "preFilter".'
    types:
    - <xref:str>
    - <xref:azure.search.documents.models.VectorFilterMode>
  return:
    description: List of search results.
    types:
    - <xref:azure.search.documents.SearchItemPaged>[<xref:dict>]
  examples:
  - "Get search result facets.<!--[!code-python[Main](les\\sample_facet_query.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\200\\\\azure-search-documents-11.6.0b3\\\
    \\samples\\\\sample_facet_query.py\", \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
    \   from azure.search.documents import SearchClient\n\n   search_client = SearchClient(service_endpoint,\
    \ index_name, AzureKeyCredential(key))\n\n   results = search_client.search(search_text=\"\
    WiFi\", facets=[\"category,count:3\", \"parkingIncluded\"])\n\n   facets: Dict[str,\
    \ List[str]] = cast(Dict[str, List[str]], results.get_facets())\n\n   print(\"\
    Catgory facet counts for hotels:\")\n   for facet in facets[\"category\"]:\n \
    \      print(\"    {}\".format(facet))\n\n   ````\n"
- uid: azure.search.documents.SearchClient.send_request
  name: send_request
  summary: Runs a network request using the client's existing pipeline.
  signature: 'send_request(request: HttpRequest, *, stream: bool = False, **kwargs)
    -> HttpResponse'
  parameters:
  - name: request
    description: The network request you want to make.
    isRequired: true
    types:
    - <xref:azure.core.rest.HttpRequest>
  keywordOnlyParameters:
  - name: stream
    description: Whether the response payload will be streamed. Defaults to False.
    types:
    - <xref:bool>
  return:
    description: The response of your network call. Does not do error handling on
      your response.
    types:
    - <xref:azure.core.rest.HttpResponse>
- uid: azure.search.documents.SearchClient.suggest
  name: suggest
  summary: Get search suggestion results from the Azure search index.
  signature: 'suggest(search_text: str, suggester_name: str, *, filter: str | None
    = None, use_fuzzy_matching: bool | None = None, highlight_post_tag: str | None
    = None, highlight_pre_tag: str | None = None, minimum_coverage: float | None =
    None, order_by: List[str] | None = None, search_fields: List[str] | None = None,
    select: List[str] | None = None, top: int | None = None, **kwargs) -> List[Dict]'
  parameters:
  - name: search_text
    description: 'Required. The search text to use to suggest documents. Must be at
      least 1

      character, and no more than 100 characters.'
    isRequired: true
    types:
    - <xref:str>
  - name: suggester_name
    description: 'Required. The name of the suggester as specified in the suggesters

      collection that''s part of the index definition.'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: filter
    description: An OData expression that filters the documents considered for suggestions.
    types:
    - <xref:str>
  - name: use_fuzzy_matching
    description: 'A value indicating whether to use fuzzy matching for the suggestions

      query. Default is false. When set to true, the query will find terms even if
      there''s a

      substituted or missing character in the search text. While this provides a better
      experience in

      some scenarios, it comes at a performance cost as fuzzy suggestions queries
      are slower and

      consume more resources.'
    types:
    - <xref:bool>
  - name: highlight_post_tag
    description: 'A string tag that is appended to hit highlights. Must be set with

      highlightPreTag. If omitted, hit highlighting of suggestions is disabled.'
    types:
    - <xref:str>
  - name: highlight_pre_tag
    description: 'A string tag that is prepended to hit highlights. Must be set with

      highlightPostTag. If omitted, hit highlighting of suggestions is disabled.'
    types:
    - <xref:str>
  - name: minimum_coverage
    description: 'A number between 0 and 100 indicating the percentage of the index
      that

      must be covered by a suggestions query in order for the query to be reported
      as a success. This

      parameter can be useful for ensuring search availability even for services with
      only one

      replica. The default is 80.'
    types:
    - <xref:float>
  - name: order_by
    description: 'The list of OData $orderby expressions by which to sort the results.
      Each

      expression can be either a field name or a call to either the geo.distance()
      or the

      search.score() functions. Each expression can be followed by asc to indicate
      ascending, or desc

      to indicate descending. The default is ascending order. Ties will be broken
      by the match scores

      of documents. If no $orderby is specified, the default sort order is descending
      by document

      match score. There can be at most 32 $orderby clauses.'
    types:
    - <xref:list>[<xref:str>]
  - name: search_fields
    description: 'The list of field names to search for the specified search text.
      Target

      fields must be included in the specified suggester.'
    types:
    - <xref:list>[<xref:str>]
  - name: select
    description: 'The list of fields to retrieve. If unspecified, only the key field
      will be

      included in the results.'
    types:
    - <xref:list>[<xref:str>]
  - name: top
    description: 'The number of suggestions to retrieve. The value must be a number
      between 1 and

      100. The default is 5.'
    types:
    - <xref:int>
  return:
    description: List of suggestion results.
    types:
    - <xref:list>[<xref:dict>]
  examples:
  - "Get search suggestions.<!--[!code-python[Main](les\\sample_suggestions.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\200\\\\azure-search-documents-11.6.0b3\\\
    \\samples\\\\sample_suggestions.py\", \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
    \   from azure.search.documents import SearchClient\n\n   search_client = SearchClient(service_endpoint,\
    \ index_name, AzureKeyCredential(key))\n\n   results = search_client.suggest(search_text=\"\
    coffee\", suggester_name=\"sg\")\n\n   print(\"Search suggestions for 'coffee'\"\
    )\n   for result in results:\n       hotel = search_client.get_document(key=result[\"\
    hotelId\"])\n       print(\"    Text: {} for Hotel: {}\".format(repr(result[\"\
    text\"]), hotel[\"hotelName\"]))\n\n   ````\n"
- uid: azure.search.documents.SearchClient.upload_documents
  name: upload_documents
  summary: 'Upload documents to the Azure search index.


    An upload action is similar to an "upsert" where the document will be

    inserted if it is new and updated/replaced if it exists. All fields are

    replaced in the update case.'
  signature: 'upload_documents(documents: List[Dict], **kwargs: Any) -> List[IndexingResult]'
  parameters:
  - name: documents
    description: A list of documents to upload.
    isRequired: true
    types:
    - <xref:list>[<xref:dict>]
  return:
    description: List of IndexingResult
    types:
    - <xref:list>[<xref:azure.search.documents.models.IndexingResult>]
  examples:
  - "Upload new documents to an index<!--[!code-python[Main](les\\sample_crud_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    200\\\\azure-search-documents-11.6.0b3\\\\samples\\\\sample_crud_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   DOCUMENT = {\n       \"category\": \"Hotel\",\n       \"hotelId\": \"1000\"\
    ,\n       \"rating\": 4.0,\n       \"rooms\": [],\n       \"hotelName\": \"Azure\
    \ Inn\",\n   }\n\n   result = search_client.upload_documents(documents=[DOCUMENT])\n\
    \n   print(\"Upload of new document succeeded: {}\".format(result[0].succeeded))\n\
    \n   ````\n"
