### YamlMime:PythonClass
uid: azure.search.documents.indexes.models.CommonGramTokenFilter
name: CommonGramTokenFilter
fullName: azure.search.documents.indexes.models.CommonGramTokenFilter
module: azure.search.documents.indexes.models
inheritances:
- azure.search.documents.indexes._generated.models._models_py3.TokenFilter
summary: 'Construct bigrams for frequently occurring terms while indexing. Single
  terms are still indexed

  too, with bigrams overlaid. This token filter is implemented using Apache Lucene.


  All required parameters must be populated in order to send to server.'
constructor:
  syntax: 'CommonGramTokenFilter(*, name: str, common_words: List[str], ignore_case:
    bool = False, use_query_mode: bool = False, **kwargs: Any)'
  keywordOnlyParameters:
  - name: name
    description: 'The name of the token filter. It must only contain letters, digits,
      spaces,

      dashes or underscores, can only start and end with alphanumeric characters,
      and is limited to

      128 characters. Required.'
    types:
    - <xref:str>
  - name: common_words
    description: The set of common words. Required.
    types:
    - <xref:list>[<xref:str>]
  - name: ignore_case
    description: 'A value indicating whether common words matching will be case

      insensitive. Default is false.'
    types:
    - <xref:bool>
  - name: use_query_mode
    description: 'A value that indicates whether the token filter is in query mode.
      When

      in query mode, the token filter generates bigrams and then removes common words
      and single

      terms followed by a common word. Default is false.'
    types:
    - <xref:bool>
variables:
- description: A URI fragment specifying the type of token filter. Required.
  name: odata_type
  types:
  - <xref:str>
- description: 'The name of the token filter. It must only contain letters, digits,
    spaces, dashes

    or underscores, can only start and end with alphanumeric characters, and is limited
    to 128

    characters. Required.'
  name: name
  types:
  - <xref:str>
- description: The set of common words. Required.
  name: common_words
  types:
  - <xref:list>[<xref:str>]
- description: 'A value indicating whether common words matching will be case insensitive.

    Default is false.'
  name: ignore_case
  types:
  - <xref:bool>
- description: 'A value that indicates whether the token filter is in query mode.
    When in

    query mode, the token filter generates bigrams and then removes common words and
    single terms

    followed by a common word. Default is false.'
  name: use_query_mode
  types:
  - <xref:bool>
methods:
- uid: azure.search.documents.indexes.models.CommonGramTokenFilter.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.search.documents.indexes.models.CommonGramTokenFilter.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.search.documents.indexes.models.CommonGramTokenFilter.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.search.documents.indexes.models.CommonGramTokenFilter.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.search.documents.indexes.models.CommonGramTokenFilter.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.search.documents.indexes.models.CommonGramTokenFilter.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to server from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
