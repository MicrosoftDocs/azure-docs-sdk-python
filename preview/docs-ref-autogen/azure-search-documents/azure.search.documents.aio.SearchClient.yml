### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.search.documents.aio.SearchClient.autocomplete
  - azure.search.documents.aio.SearchClient.close
  - azure.search.documents.aio.SearchClient.delete_documents
  - azure.search.documents.aio.SearchClient.get_document
  - azure.search.documents.aio.SearchClient.get_document_count
  - azure.search.documents.aio.SearchClient.index_documents
  - azure.search.documents.aio.SearchClient.merge_documents
  - azure.search.documents.aio.SearchClient.merge_or_upload_documents
  - azure.search.documents.aio.SearchClient.search
  - azure.search.documents.aio.SearchClient.suggest
  - azure.search.documents.aio.SearchClient.upload_documents
  class: azure.search.documents.aio.SearchClient
  example:
  - "Creating the SearchClient with an API key.<!--[!code-python[Main](les\\async_samples\\\
    sample_authentication_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\3\\\\azure-search-documents-11.1.0b2\\\\samples\\\\\
    async_samples\\\\sample_authentication_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
    \   from azure.search.documents.aio import SearchClient\n   service_endpoint =\
    \ os.getenv(\"AZURE_SEARCH_SERVICE_ENDPOINT\")\n   index_name = os.getenv(\"AZURE_SEARCH_INDEX_NAME\"\
    )\n   key = os.getenv(\"AZURE_SEARCH_API_KEY\")\n\n   search_client = SearchClient(service_endpoint,\
    \ index_name, AzureKeyCredential(key))\n\n   ````\n"
  fullName: azure.search.documents.aio.SearchClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.search.documents._headers_mixin.HeadersMixin
  langs:
  - python
  module: azure.search.documents.aio
  name: SearchClient
  summary: A client to interact with an existing Azure search index.
  syntax:
    content: SearchClient(endpoint, index_name, credential, **kwargs)
    parameters:
    - description: The URL endpoint of an Azure search service
      id: endpoint
      type:
      - str
    - description: The name of the index to connect to
      id: index_name
      type:
      - str
    - description: A credential to authorize search client requests
      id: credential
      type:
      - azure.core.credentials.AzureKeyCredential
    - description: The Search API version to use for requests.
      id: api_version
      type:
      - str
  type: class
  uid: azure.search.documents.aio.SearchClient
- class: azure.search.documents.aio.SearchClient
  example:
  - "Get a auto-completions.<!--[!code-python[Main](les\\async_samples\\sample_autocomplete_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\3\\\\azure-search-documents-11.1.0b2\\\\samples\\\\async_samples\\\\sample_autocomplete_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.search.documents.aio import SearchClient\n\
    \n   search_client = SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\n\
    \n   async with search_client:\n       results = await search_client.autocomplete(search_text=\"\
    bo\", suggester_name=\"sg\")\n\n       print(\"Autocomplete suggestions for 'bo'\"\
    )\n       for result in results:\n           print(\"    Completion: {}\".format(result[\"\
    text\"]))\n\n   ````\n"
  fullName: azure.search.documents.aio.SearchClient.autocomplete
  langs:
  - python
  module: azure.search.documents.aio
  name: autocomplete(search_text, suggester_name, **kwargs)
  namewithoutparameters: autocomplete
  summary: "Get search auto-completion results from the Azure search index.\n\n\n\
    collection that's part of the index definition.\n:keyword mode: Specifies the\
    \ mode for Autocomplete. The default is 'oneTerm'. Use\n\n\n   'twoTerms' to get\
    \ shingles and 'oneTermWithContext' to use the current context while producing\n\
    \   auto-completed terms. Possible values include: 'oneTerm', 'twoTerms', 'oneTermWithContext'."
  syntax:
    content: autocomplete(search_text, suggester_name, **kwargs)
    parameters:
    - description: 'An OData expression that filters the documents used to produce
        completed terms

        for the Autocomplete result.'
      id: filter
      isRequired: true
      type:
      - str
    - description: 'A value indicating whether to use fuzzy matching for the

        autocomplete query. Default is false. When set to true, the query will find
        terms even if

        there''s a substituted or missing character in the search text. While this
        provides a better

        experience in some scenarios, it comes at a performance cost as fuzzy autocomplete
        queries are

        slower and consume more resources.'
      id: use_fuzzy_matching
      isRequired: true
      type:
      - bool
    - description: 'A string tag that is appended to hit highlights. Must be set with

        highlightPreTag. If omitted, hit highlighting is disabled.'
      id: highlight_post_tag
      isRequired: true
      type:
      - str
    - description: 'A string tag that is prepended to hit highlights. Must be set
        with

        highlightPostTag. If omitted, hit highlighting is disabled.'
      id: highlight_pre_tag
      isRequired: true
      type:
      - str
    - description: 'A number between 0 and 100 indicating the percentage of the index
        that

        must be covered by an autocomplete query in order for the query to be reported
        as a success.

        This parameter can be useful for ensuring search availability even for services
        with only one

        replica. The default is 80.'
      id: minimum_coverage
      isRequired: true
      type:
      - float
    - description: 'The list of field names to consider when querying for auto-completed

        terms. Target fields must be included in the specified suggester.'
      id: search_fields
      isRequired: true
      type:
      - list[str]
    - description: 'The number of auto-completed terms to retrieve. This must be a
        value between 1 and

        100. The default is 5.'
      id: top
      isRequired: true
      type:
      - int
    return:
      type:
      - List[dict]
  type: method
  uid: azure.search.documents.aio.SearchClient.autocomplete
- class: azure.search.documents.aio.SearchClient
  fullName: azure.search.documents.aio.SearchClient.close
  langs:
  - python
  module: azure.search.documents.aio
  name: close()
  namewithoutparameters: close
  summary: Close the <xref:azure.search.documents.aio.SearchClient> session.
  syntax:
    content: close()
    parameters: []
  type: method
  uid: azure.search.documents.aio.SearchClient.close
- class: azure.search.documents.aio.SearchClient
  example:
  - "Delete existing documents to an index<!--[!code-python[Main](les\\async_samples\\\
    sample_crud_operations_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\3\\\\azure-search-documents-11.1.0b2\\\\samples\\\\\
    async_samples\\\\sample_crud_operations_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   result = await search_client.upload_documents(documents=[{\"\
    HotelId\": \"1000\"}])\n\n   print(\"Delete new document succeeded: {}\".format(result[0].succeeded))\n\
    \n   ````\n"
  fullName: azure.search.documents.aio.SearchClient.delete_documents
  langs:
  - python
  module: azure.search.documents.aio
  name: delete_documents(documents, **kwargs)
  namewithoutparameters: delete_documents
  summary: 'Delete documents from the Azure search index


    Delete removes the specified document from the index. Any field you

    specify in a delete operation, other than the key field, will be

    ignored. If you want to remove an individual field from a document, use

    *merge_documents* instead and set the field explicitly to None.


    Delete operations are idempotent. That is, even if a document key does

    not exist in the index, attempting a delete operation with that key will

    result in a 200 status code.'
  syntax:
    content: delete_documents(documents, **kwargs)
    parameters:
    - description: A list of documents to delete.
      id: documents
      isRequired: true
      type:
      - List[dict]
    return:
      type:
      - List[IndexingResult]
  type: method
  uid: azure.search.documents.aio.SearchClient.delete_documents
- class: azure.search.documents.aio.SearchClient
  example:
  - "Get a specific document from the search index.<!--[!code-python[Main](les\\async_samples\\\
    sample_get_document_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\3\\\\azure-search-documents-11.1.0b2\\\\samples\\\\\
    async_samples\\\\sample_get_document_async.py\", \"xml:space\": \"preserve\",\
    \ \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
    \   from azure.search.documents.aio import SearchClient\n\n   search_client =\
    \ SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\n\n   async\
    \ with search_client:\n       result = await search_client.get_document(key=\"\
    23\")\n\n       print(\"Details for hotel '23' are:\")\n       print(\"      \
    \  Name: {}\".format(result[\"HotelName\"]))\n       print(\"      Rating: {}\"\
    .format(result[\"Rating\"]))\n       print(\"    Category: {}\".format(result[\"\
    Category\"]))\n\n   ````\n"
  fullName: azure.search.documents.aio.SearchClient.get_document
  langs:
  - python
  module: azure.search.documents.aio
  name: get_document(key, selected_fields=None, **kwargs)
  namewithoutparameters: get_document
  summary: Retrieve a document from the Azure search index by its key.
  syntax:
    content: get_document(key, selected_fields=None, **kwargs)
    parameters:
    - description: The primary key value for the document to retrieve
      id: key
      isRequired: true
      type:
      - str
    - description: a whitelist of fields to include in the results
      id: selected_fields
      isRequired: true
      type:
      - List[str]
    return:
      type:
      - dict
  type: method
  uid: azure.search.documents.aio.SearchClient.get_document
- class: azure.search.documents.aio.SearchClient
  fullName: azure.search.documents.aio.SearchClient.get_document_count
  langs:
  - python
  module: azure.search.documents.aio
  name: get_document_count(**kwargs)
  namewithoutparameters: get_document_count
  summary: Return the number of documents in the Azure search index.
  syntax:
    content: get_document_count(**kwargs)
    return:
      type:
      - int
  type: method
  uid: azure.search.documents.aio.SearchClient.get_document_count
- class: azure.search.documents.aio.SearchClient
  fullName: azure.search.documents.aio.SearchClient.index_documents
  langs:
  - python
  module: azure.search.documents.aio
  name: index_documents(batch, **kwargs)
  namewithoutparameters: index_documents
  summary: 'Specify a document operations to perform as a batch.



    :raises <xref:azure.search.documents.RequestEntityTooLargeError>'
  syntax:
    content: index_documents(batch, **kwargs)
    parameters:
    - description: A batch of document operations to perform.
      id: batch
      isRequired: true
      type:
      - IndexDocumentsBatch
    return:
      type:
      - List[IndexingResult]
  type: method
  uid: azure.search.documents.aio.SearchClient.index_documents
- class: azure.search.documents.aio.SearchClient
  example:
  - "Merge fields into existing documents to an index<!--[!code-python[Main](les\\\
    async_samples\\sample_crud_operations_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\3\\\\azure-search-documents-11.1.0b2\\\
    \\samples\\\\async_samples\\\\sample_crud_operations_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   result = await search_client.upload_documents(documents=[{\"\
    HotelId\": \"1000\", \"Rating\": 4.5}])\n\n   print(\"Merge into new document\
    \ succeeded: {}\".format(result[0].succeeded))\n\n   ````\n"
  fullName: azure.search.documents.aio.SearchClient.merge_documents
  langs:
  - python
  module: azure.search.documents.aio
  name: merge_documents(documents, **kwargs)
  namewithoutparameters: merge_documents
  summary: 'Merge documents in to existing documents in the Azure search index.


    Merge updates an existing document with the specified fields. If the

    document doesn''t exist, the merge will fail. Any field you specify in a

    merge will replace the existing field in the document. This also applies

    to collections of primitive and complex types.'
  syntax:
    content: merge_documents(documents, **kwargs)
    parameters:
    - description: A list of documents to merge.
      id: documents
      isRequired: true
      type:
      - List[dict]
    return:
      type:
      - List[IndexingResult]
  type: method
  uid: azure.search.documents.aio.SearchClient.merge_documents
- class: azure.search.documents.aio.SearchClient
  fullName: azure.search.documents.aio.SearchClient.merge_or_upload_documents
  langs:
  - python
  module: azure.search.documents.aio
  name: merge_or_upload_documents(documents, **kwargs)
  namewithoutparameters: merge_or_upload_documents
  summary: 'Merge documents in to existing documents in the Azure search index,

    or upload them if they do not yet exist.


    This action behaves like *merge_documents* if a document with the given

    key already exists in the index. If the document does not exist, it

    behaves like *upload_documents* with a new document.'
  syntax:
    content: merge_or_upload_documents(documents, **kwargs)
    parameters:
    - description: A list of documents to merge or upload.
      id: documents
      isRequired: true
      type:
      - List[dict]
    return:
      type:
      - List[IndexingResult]
  type: method
  uid: azure.search.documents.aio.SearchClient.merge_or_upload_documents
- class: azure.search.documents.aio.SearchClient
  example:
  - "Get search result facets.<!--[!code-python[Main](les\\async_samples\\sample_facet_query_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\3\\\\azure-search-documents-11.1.0b2\\\\samples\\\\async_samples\\\\sample_facet_query_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.search.documents.aio import SearchClient\n\
    \n   search_client = SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\n\
    \n   async with search_client:\n       results = await search_client.search(search_text=\"\
    WiFi\", facets=[\"Category\"], top=0)\n\n       facets = await results.get_facets()\n\
    \n       print(\"Catgory facet counts for hotels:\")\n       for facet in facets[\"\
    Category\"]:\n           print(\"    {}\".format(facet))\n\n   ````\n"
  fullName: azure.search.documents.aio.SearchClient.search
  langs:
  - python
  module: azure.search.documents.aio
  name: search(search_text, **kwargs)
  namewithoutparameters: search
  summary: "Search the Azure search index for documents.\n\n\nmatch all documents.\n\
    :keyword bool include_total_count: A value that specifies whether to fetch the\
    \ total count of\nresults. Default is false. Setting this value to true may have\
    \ a performance impact. Note that\nthe count returned is an approximation.\n:keyword\
    \ list[str] facets: The list of facet expressions to apply to the search query.\
    \ Each facet\n\n\n   expression contains a field name, optionally followed by\
    \ a comma-separated list of name:value\n   pairs."
  syntax:
    content: search(search_text, **kwargs)
    parameters:
    - description: The OData $filter expression to apply to the search query.
      id: filter
      isRequired: true
      type:
      - str
    - description: 'The list of field names to use for hit highlights. Only searchable

        fields can be used for hit highlighting.'
      id: highlight_fields
      isRequired: true
      type:
      - list[str]
    - description: 'A string tag that is appended to hit highlights. Must be set with

        highlightPreTag. Default is &lt;/em&gt;.'
      id: highlight_post_tag
      isRequired: true
      type:
      - str
    - description: 'A string tag that is prepended to hit highlights. Must be set
        with

        highlightPostTag. Default is &lt;em&gt;.'
      id: highlight_pre_tag
      isRequired: true
      type:
      - str
    - description: 'A number between 0 and 100 indicating the percentage of the index
        that

        must be covered by a search query in order for the query to be reported as
        a success. This

        parameter can be useful for ensuring search availability even for services
        with only one

        replica. The default is 100.'
      id: minimum_coverage
      isRequired: true
      type:
      - float
    - description: 'The list of OData $orderby expressions by which to sort the results.
        Each

        expression can be either a field name or a call to either the geo.distance()
        or the

        search.score() functions. Each expression can be followed by asc to indicate
        ascending, and

        desc to indicate descending. The default is ascending order. Ties will be
        broken by the match

        scores of documents. If no OrderBy is specified, the default sort order is
        descending by

        document match score. There can be at most 32 $orderby clauses.'
      id: order_by
      isRequired: true
      type:
      - list[str]
    - description: 'A value that specifies the syntax of the search query. The default
        is

        ''simple''. Use ''full'' if your query uses the Lucene query syntax. Possible
        values include:

        ''simple'', ''full''.'
      id: query_type
      isRequired: true
      type:
      - str
      - search_index_client.models.QueryType
    - description: 'The list of parameter values to be used in scoring functions (for

        example, referencePointParameter) using the format name-values. For example,
        if the scoring

        profile defines a function with a parameter called ''mylocation'' the parameter
        string would be

        "mylocation--122.2,44.8" (without the quotes).'
      id: scoring_parameters
      isRequired: true
      type:
      - list[str]
    - description: 'The name of a scoring profile to evaluate match scores for matching

        documents in order to sort the results.'
      id: scoring_profile
      isRequired: true
      type:
      - str
    - description: 'The list of field names to which to scope the full-text search.
        When

        using fielded search (fieldName:searchExpression) in a full Lucene query,
        the field names of

        each fielded search expression take precedence over any field names listed
        in this parameter.'
      id: search_fields
      isRequired: true
      type:
      - list[str]
    - description: 'A value that specifies whether any or all of the search terms
        must be

        matched in order to count the document as a match. Possible values include:
        ''any'', ''all''.'
      id: search_mode
      isRequired: true
      type:
      - str
      - search_index_client.models.SearchMode
    - description: 'The list of fields to retrieve. If unspecified, all fields marked
        as retrievable

        in the schema are included.'
      id: select
      isRequired: true
      type:
      - list[str]
    - description: 'The number of search results to skip. This value cannot be greater
        than 100,000.

        If you need to scan documents in sequence, but cannot use $skip due to this
        limitation,

        consider using $orderby on a totally-ordered key and $filter with a range
        query instead.'
      id: skip
      isRequired: true
      type:
      - int
    - description: 'The number of search results to retrieve. This can be used in
        conjunction with

        $skip to implement client-side paging of search results. If results are truncated
        due to

        server-side paging, the response will include a continuation token that can
        be used to issue

        another Search request for the next page of results.'
      id: top
      isRequired: true
      type:
      - int
    return:
      type:
      - AsyncSearchItemPaged[dict]
  type: method
  uid: azure.search.documents.aio.SearchClient.search
- class: azure.search.documents.aio.SearchClient
  example:
  - "Get search suggestions.<!--[!code-python[Main](les\\async_samples\\sample_suggestions_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\3\\\\azure-search-documents-11.1.0b2\\\\samples\\\\async_samples\\\\sample_suggestions_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.search.documents.aio import SearchClient\n\
    \n   search_client = SearchClient(service_endpoint, index_name, AzureKeyCredential(key))\n\
    \n   async with search_client:\n       results = await search_client.suggest(search_text=\"\
    coffee\", suggester_name=\"sg\")\n\n       print(\"Search suggestions for 'coffee'\"\
    )\n       for result in results:\n           hotel = await search_client.get_document(key=result[\"\
    HotelId\"])\n           print(\"    Text: {} for Hotel: {}\".format(repr(result[\"\
    text\"]), hotel[\"HotelName\"]))\n\n   ````\n"
  fullName: azure.search.documents.aio.SearchClient.suggest
  langs:
  - python
  module: azure.search.documents.aio
  name: suggest(search_text, suggester_name, **kwargs)
  namewithoutparameters: suggest
  summary: "Get search suggestion results from the Azure search index.\n\n\ncharacter,\
    \ and no more than 100 characters.\n:param str suggester_name: Required. The name\
    \ of the suggester as specified in the suggesters\ncollection that's part of the\
    \ index definition.\n:keyword str filter: An OData expression that filters the\
    \ documents considered for suggestions.\n:keyword bool use_fuzzy_matching: A value\
    \ indicating whether to use fuzzy matching for the suggestions\n\n\n   query.\
    \ Default is false. When set to true, the query will find terms even if there's\
    \ a\n   substituted or missing character in the search text. While this provides\
    \ a better experience in\n   some scenarios, it comes at a performance cost as\
    \ fuzzy suggestions queries are slower and\n   consume more resources."
  syntax:
    content: suggest(search_text, suggester_name, **kwargs)
    parameters:
    - description: 'A string tag that is appended to hit highlights. Must be set with

        highlightPreTag. If omitted, hit highlighting of suggestions is disabled.'
      id: highlight_post_tag
      isRequired: true
      type:
      - str
    - description: 'A string tag that is prepended to hit highlights. Must be set
        with

        highlightPostTag. If omitted, hit highlighting of suggestions is disabled.'
      id: highlight_pre_tag
      isRequired: true
      type:
      - str
    - description: 'A number between 0 and 100 indicating the percentage of the index
        that

        must be covered by a suggestions query in order for the query to be reported
        as a success. This

        parameter can be useful for ensuring search availability even for services
        with only one

        replica. The default is 80.'
      id: minimum_coverage
      isRequired: true
      type:
      - float
    - description: 'The list of OData $orderby expressions by which to sort the results.
        Each

        expression can be either a field name or a call to either the geo.distance()
        or the

        search.score() functions. Each expression can be followed by asc to indicate
        ascending, or desc

        to indicate descending. The default is ascending order. Ties will be broken
        by the match scores

        of documents. If no $orderby is specified, the default sort order is descending
        by document

        match score. There can be at most 32 $orderby clauses.'
      id: order_by
      isRequired: true
      type:
      - list[str]
    - description: 'The list of field names to search for the specified search text.
        Target

        fields must be included in the specified suggester.'
      id: search_fields
      isRequired: true
      type:
      - list[str]
    - description: 'The list of fields to retrieve. If unspecified, only the key field
        will be

        included in the results.'
      id: select
      isRequired: true
      type:
      - list[str]
    - description: 'The number of suggestions to retrieve. The value must be a number
        between 1 and

        100. The default is 5.'
      id: top
      isRequired: true
      type:
      - int
    return:
      type:
      - List[dict]
  type: method
  uid: azure.search.documents.aio.SearchClient.suggest
- class: azure.search.documents.aio.SearchClient
  example:
  - "Upload new documents to an index<!--[!code-python[Main](les\\async_samples\\\
    sample_crud_operations_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\3\\\\azure-search-documents-11.1.0b2\\\\samples\\\\\
    async_samples\\\\sample_crud_operations_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   DOCUMENT = {\n       'Category': 'Hotel',\n    \
    \   'HotelId': '1000',\n       'Rating': 4.0,\n       'Rooms': [],\n       'HotelName':\
    \ 'Azure Inn',\n   }\n\n   result = await search_client.upload_documents(documents=[DOCUMENT])\n\
    \n   print(\"Upload of new document succeeded: {}\".format(result[0].succeeded))\n\
    \n   ````\n"
  fullName: azure.search.documents.aio.SearchClient.upload_documents
  langs:
  - python
  module: azure.search.documents.aio
  name: upload_documents(documents, **kwargs)
  namewithoutparameters: upload_documents
  summary: 'Upload documents to the Azure search index.


    An upload action is similar to an "upsert" where the document will be

    inserted if it is new and updated/replaced if it exists. All fields are

    replaced in the update case.'
  syntax:
    content: upload_documents(documents, **kwargs)
    parameters:
    - description: A list of documents to upload.
      id: documents
      isRequired: true
      type:
      - List[dict]
    return:
      type:
      - List[IndexingResult]
  type: method
  uid: azure.search.documents.aio.SearchClient.upload_documents
references:
- fullName: azure.search.documents.aio.SearchClient.autocomplete
  isExternal: false
  name: autocomplete(search_text, suggester_name, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.autocomplete
- fullName: azure.search.documents.aio.SearchClient.close
  isExternal: false
  name: close()
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.close
- fullName: azure.search.documents.aio.SearchClient.delete_documents
  isExternal: false
  name: delete_documents(documents, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.delete_documents
- fullName: azure.search.documents.aio.SearchClient.get_document
  isExternal: false
  name: get_document(key, selected_fields=None, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.get_document
- fullName: azure.search.documents.aio.SearchClient.get_document_count
  isExternal: false
  name: get_document_count(**kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.get_document_count
- fullName: azure.search.documents.aio.SearchClient.index_documents
  isExternal: false
  name: index_documents(batch, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.index_documents
- fullName: azure.search.documents.aio.SearchClient.merge_documents
  isExternal: false
  name: merge_documents(documents, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.merge_documents
- fullName: azure.search.documents.aio.SearchClient.merge_or_upload_documents
  isExternal: false
  name: merge_or_upload_documents(documents, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.merge_or_upload_documents
- fullName: azure.search.documents.aio.SearchClient.search
  isExternal: false
  name: search(search_text, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.search
- fullName: azure.search.documents.aio.SearchClient.suggest
  isExternal: false
  name: suggest(search_text, suggester_name, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.suggest
- fullName: azure.search.documents.aio.SearchClient.upload_documents
  isExternal: false
  name: upload_documents(documents, **kwargs)
  parent: azure.search.documents.aio.SearchClient
  uid: azure.search.documents.aio.SearchClient.upload_documents
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
- fullName: List[dict]
  name: List[dict]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: ']'
    name: ']'
  uid: List[dict]
- fullName: List[IndexingResult]
  name: List[IndexingResult]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: IndexingResult
    name: IndexingResult
    uid: IndexingResult
  - fullName: ']'
    name: ']'
  uid: List[IndexingResult]
- fullName: List[str]
  name: List[str]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: List[str]
- fullName: AsyncSearchItemPaged[dict]
  name: AsyncSearchItemPaged[dict]
  spec.python:
  - fullName: AsyncSearchItemPaged
    name: AsyncSearchItemPaged
    uid: AsyncSearchItemPaged
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: ']'
    name: ']'
  uid: AsyncSearchItemPaged[dict]
