### YamlMime:PythonClass
uid: azure.search.documents.models.HybridSearch
name: HybridSearch
fullName: azure.search.documents.models.HybridSearch
module: azure.search.documents.models
summary: TThe query parameters to configure hybrid search behaviors.
constructor:
  syntax: 'HybridSearch(*, max_text_recall_size: int | None = None, count_and_facet_mode:
    str | _models.HybridCountAndFacetMode | None = None, **kwargs: Any)'
  keywordOnlyParameters:
  - name: max_text_recall_size
    description: 'Determines the maximum number of documents to be retrieved by

      the text query portion of a hybrid search request. Those documents will be combined
      with the

      documents matching the vector queries to produce a single final list of results.
      Choosing a

      larger maxTextRecallSize value will allow retrieving and paging through more
      documents (using

      the top and skip parameters), at the cost of higher resource utilization and
      higher latency.

      The value needs to be between 1 and 10,000. Default is 1000.'
    defaultValue: None
    types:
    - <xref:int>
  - name: count_and_facet_mode
    description: 'Determines whether the count and facets should includes all

      documents that matched the search query, or only the documents that are retrieved
      within the

      ''maxTextRecallSize'' window. Known values are: "countRetrievableResults" and
      "countAllResults".'
    defaultValue: None
    types:
    - <xref:str>
    - <xref:azure.search.documents.models.HybridCountAndFacetMode>
variables:
- description: 'Determines the maximum number of documents to be retrieved by the

    text query portion of a hybrid search request. Those documents will be combined
    with the

    documents matching the vector queries to produce a single final list of results.
    Choosing a

    larger maxTextRecallSize value will allow retrieving and paging through more documents
    (using

    the top and skip parameters), at the cost of higher resource utilization and higher
    latency.

    The value needs to be between 1 and 10,000. Default is 1000.'
  name: max_text_recall_size
  types:
  - <xref:int>
- description: 'Determines whether the count and facets should includes all

    documents that matched the search query, or only the documents that are retrieved
    within the

    ''maxTextRecallSize'' window. Known values are: "countRetrievableResults" and
    "countAllResults".'
  name: count_and_facet_mode
  types:
  - <xref:str>
  - <xref:azure.search.documents.models.HybridCountAndFacetMode>
methods:
- uid: azure.search.documents.models.HybridSearch.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'True'
    types:
    - <xref:bool>
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.search.documents.models.HybridSearch.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> Self'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
    types:
    - <xref:typing.Self>
  exceptions:
  - type: DeserializationError
    description: if something went wrong
- uid: azure.search.documents.models.HybridSearch.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.search.documents.models.HybridSearch.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> Self'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: key_extractors
    description: A key extractor function.
    defaultValue: None
    types:
    - <xref:function>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
    types:
    - <xref:typing.Self>
  exceptions:
  - type: DeserializationError
    description: if something went wrong
- uid: azure.search.documents.models.HybridSearch.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.search.documents.models.HybridSearch.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to server from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
