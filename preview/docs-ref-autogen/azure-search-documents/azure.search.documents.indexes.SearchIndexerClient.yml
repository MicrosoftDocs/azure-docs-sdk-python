### YamlMime:PythonClass
uid: azure.search.documents.indexes.SearchIndexerClient
name: SearchIndexerClient
fullName: azure.search.documents.indexes.SearchIndexerClient
module: azure.search.documents.indexes
inheritances:
- azure.search.documents._headers_mixin.HeadersMixin
summary: A client to interact with Azure search service Indexers.
constructor:
  syntax: 'SearchIndexerClient(endpoint: str, credential: AzureKeyCredential | TokenCredential,
    **kwargs: Any)'
  parameters:
  - name: endpoint
    description: The URL endpoint of an Azure search service
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: A credential to authorize search client requests
    isRequired: true
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
    - <xref:azure.core.credentials.TokenCredential>
  keywordOnlyParameters:
  - name: api_version
    description: The Search API version to use for requests.
    types:
    - <xref:str>
  - name: audience
    description: 'sets the Audience to use for authentication with Azure Active Directory
      (AAD). The

      audience is not considered when using a shared key. If audience is not provided,
      the public cloud audience

      will be assumed.'
    types:
    - <xref:str>
methods:
- uid: azure.search.documents.indexes.SearchIndexerClient.close
  name: close
  summary: 'Close the session.

    :return: None

    :rtype: None'
  signature: close() -> None
- uid: azure.search.documents.indexes.SearchIndexerClient.create_data_source_connection
  name: create_data_source_connection
  summary: Creates a new data source connection.
  signature: 'create_data_source_connection(data_source_connection: SearchIndexerDataSourceConnection,
    **kwargs: Any) -> SearchIndexerDataSourceConnection'
  parameters:
  - name: data_source_connection
    description: The definition of the data source connection to create.
    isRequired: true
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>
  return:
    description: The created SearchIndexerDataSourceConnection
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>
  examples:
  - "Create a Data Source<!--[!code-python[Main](les\\sample_data_source_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    200\\\\azure-search-documents-11.6.0b3\\\\samples\\\\sample_data_source_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   container = SearchIndexerDataContainer(name=\"searchcontainer\")\n   data_source_connection\
    \ = SearchIndexerDataSourceConnection(\n       name=\"sample-data-source-connection\"\
    , type=\"azureblob\", connection_string=connection_string, container=container\n\
    \   )\n   result = client.create_data_source_connection(data_source_connection)\n\
    \   print(result)\n   print(\"Create new Data Source Connection - sample-data-source-connection\"\
    )\n\n   ````\n"
- uid: azure.search.documents.indexes.SearchIndexerClient.create_indexer
  name: create_indexer
  summary: Creates a new SearchIndexer.
  signature: 'create_indexer(indexer: SearchIndexer, **kwargs: Any) -> SearchIndexer'
  parameters:
  - name: indexer
    description: The definition of the indexer to create.
    isRequired: true
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexer>
  return:
    description: The created SearchIndexer
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexer>
  examples:
  - "Create a SearchIndexer<!--[!code-python[Main](les\\sample_indexers_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    200\\\\azure-search-documents-11.6.0b3\\\\samples\\\\sample_indexers_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # create a datasource\n   container = SearchIndexerDataContainer(name=\"\
    searchcontainer\")\n   data_source_connection = SearchIndexerDataSourceConnection(\n\
    \       name=\"indexer-datasource\", type=\"azureblob\", connection_string=connection_string,\
    \ container=container\n   )\n   data_source = indexers_client.create_data_source_connection(data_source_connection)\n\
    \n   # create an indexer\n   indexer = SearchIndexer(\n       name=\"sample-indexer\"\
    , data_source_name=\"indexer-datasource\", target_index_name=\"indexer-hotels\"\
    \n   )\n   result = indexers_client.create_indexer(indexer)\n   print(\"Create\
    \ new Indexer - sample-indexer\")\n\n   ````\n"
- uid: azure.search.documents.indexes.SearchIndexerClient.create_or_update_data_source_connection
  name: create_or_update_data_source_connection
  summary: 'Creates a new data source connection or updates a data source connection
    if it already exists.

    :param data_source_connection: The definition of the data source connection to
    create or update.

    :type data_source_connection: ~azure.search.documents.indexes.models.SearchIndexerDataSourceConnection

    :keyword match_condition: The match condition to use upon the etag

    :paramtype match_condition: ~azure.core.MatchConditions

    :keyword skip_indexer_reset_requirement_for_cache: Ignores cache reset requirements.

    :paramtype skip_indexer_reset_requirement_for_cache: bool

    :return: The created SearchIndexerDataSourceConnection

    :rtype: ~azure.search.documents.indexes.models.SearchIndexerDataSourceConnection'
  signature: 'create_or_update_data_source_connection(data_source_connection: SearchIndexerDataSourceConnection,
    *, match_condition: MatchConditions = MatchConditions.Unconditionally, skip_indexer_reset_requirement_for_cache:
    bool | None = None, **kwargs: Any) -> SearchIndexerDataSourceConnection'
- uid: azure.search.documents.indexes.SearchIndexerClient.create_or_update_indexer
  name: create_or_update_indexer
  summary: Creates a new indexer or updates an indexer if it already exists.
  signature: 'create_or_update_indexer(indexer: SearchIndexer, *, match_condition:
    MatchConditions = MatchConditions.Unconditionally, skip_indexer_reset_requirement_for_cache:
    bool | None = None, disable_cache_reprocessing_change_detection: bool | None =
    None, **kwargs: Any) -> SearchIndexer'
  parameters:
  - name: indexer
    description: The definition of the indexer to create or update.
    isRequired: true
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexer>
  keywordOnlyParameters:
  - name: match_condition
    description: The match condition to use upon the etag
    types:
    - <xref:azure.core.MatchConditions>
  - name: skip_indexer_reset_requirement_for_cache
    description: Ignores cache reset requirements.
    types:
    - <xref:bool>
  - name: disable_cache_reprocessing_change_detection
    description: 'Disables cache reprocessing change

      detection.'
    types:
    - <xref:bool>
  return:
    description: The created SearchIndexer
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexer>
- uid: azure.search.documents.indexes.SearchIndexerClient.create_or_update_skillset
  name: create_or_update_skillset
  summary: 'Create a new SearchIndexerSkillset in an Azure Search service, or update
    an

    existing one.'
  signature: 'create_or_update_skillset(skillset: SearchIndexerSkillset, *, match_condition:
    MatchConditions = MatchConditions.Unconditionally, skip_indexer_reset_requirement_for_cache:
    bool | None = None, disable_cache_reprocessing_change_detection: bool | None =
    None, **kwargs: Any) -> SearchIndexerSkillset'
  parameters:
  - name: skillset
    description: The SearchIndexerSkillset object to create or update
    isRequired: true
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexerSkillset>
  keywordOnlyParameters:
  - name: match_condition
    description: The match condition to use upon the etag
    types:
    - <xref:azure.core.MatchConditions>
  - name: skip_indexer_reset_requirement_for_cache
    description: Ignores cache reset requirements.
    types:
    - <xref:bool>
  - name: disable_cache_reprocessing_change_detection
    description: 'Disables cache reprocessing change

      detection.'
    types:
    - <xref:bool>
  return:
    description: The created or updated SearchIndexerSkillset
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexerSkillset>
- uid: azure.search.documents.indexes.SearchIndexerClient.create_skillset
  name: create_skillset
  summary: Create a new SearchIndexerSkillset in an Azure Search service
  signature: 'create_skillset(skillset: SearchIndexerSkillset, **kwargs: Any) -> SearchIndexerSkillset'
  parameters:
  - name: skillset
    description: The SearchIndexerSkillset object to create
    isRequired: true
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexerSkillset>
  return:
    description: The created SearchIndexerSkillset
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexerSkillset>
- uid: azure.search.documents.indexes.SearchIndexerClient.delete_data_source_connection
  name: delete_data_source_connection
  summary: 'Deletes a data source connection. To use access conditions, the SearchIndexerDataSourceConnection

    model must be provided instead of the name. It is enough to provide the name of
    the data source connection

    to delete unconditionally'
  signature: 'delete_data_source_connection(data_source_connection: str | SearchIndexerDataSourceConnection,
    *, match_condition: MatchConditions = MatchConditions.Unconditionally, **kwargs:
    Any) -> None'
  parameters:
  - name: data_source_connection
    description: The data source connection to delete.
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>
  keywordOnlyParameters:
  - name: match_condition
    description: The match condition to use upon the etag
    types:
    - <xref:azure.core.MatchConditions>
  examples:
  - "Delete a SearchIndexerDataSourceConnection<!--[!code-python[Main](les\\sample_data_source_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    200\\\\azure-search-documents-11.6.0b3\\\\samples\\\\sample_data_source_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   client.delete_data_source_connection(\"sample-data-source-connection\")\n\
    \   print(\"Data Source Connection 'sample-data-source-connection' successfully\
    \ deleted\")\n\n   ````\n"
- uid: azure.search.documents.indexes.SearchIndexerClient.delete_indexer
  name: delete_indexer
  summary: 'Deletes an indexer. To use access conditions, the SearchIndexer model

    must be provided instead of the name. It is enough to provide

    the name of the indexer to delete unconditionally.'
  signature: 'delete_indexer(indexer: str | SearchIndexer, *, match_condition: MatchConditions
    = MatchConditions.Unconditionally, **kwargs: Any) -> None'
  parameters:
  - name: indexer
    description: The indexer to delete.
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.search.documents.indexes.models.SearchIndexer>
  keywordOnlyParameters:
  - name: match_condition
    description: The match condition to use upon the etag
    types:
    - <xref:azure.core.MatchConditions>
  examples:
  - "Delete a SearchIndexer<!--[!code-python[Main](les\\sample_indexers_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    200\\\\azure-search-documents-11.6.0b3\\\\samples\\\\sample_indexers_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   indexers_client.delete_indexer(\"sample-indexer\")\n   print(\"Indexer 'sample-indexer'\
    \ successfully deleted\")\n\n   ````\n"
- uid: azure.search.documents.indexes.SearchIndexerClient.delete_skillset
  name: delete_skillset
  summary: 'Delete a named SearchIndexerSkillset in an Azure Search service. To use
    access conditions,

    the SearchIndexerSkillset model must be provided instead of the name. It is enough
    to provide

    the name of the skillset to delete unconditionally'
  signature: 'delete_skillset(skillset: str | SearchIndexerSkillset, *, match_condition:
    MatchConditions = MatchConditions.Unconditionally, **kwargs: Any) -> None'
  parameters:
  - name: skillset
    description: The SearchIndexerSkillset to delete
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.search.documents.indexes.models.SearchIndexerSkillset>
  keywordOnlyParameters:
  - name: match_condition
    description: The match condition to use upon the etag
    types:
    - <xref:azure.core.MatchConditions>
- uid: azure.search.documents.indexes.SearchIndexerClient.get_data_source_connection
  name: get_data_source_connection
  summary: Retrieves a data source connection definition.
  signature: 'get_data_source_connection(name: str, **kwargs: Any) -> SearchIndexerDataSourceConnection'
  parameters:
  - name: name
    description: The name of the data source connection to retrieve.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The SearchIndexerDataSourceConnection that is fetched.
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>
  examples:
  - "Retrieve a SearchIndexerDataSourceConnection<!--[!code-python[Main](les\\sample_data_source_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    200\\\\azure-search-documents-11.6.0b3\\\\samples\\\\sample_data_source_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   result = client.get_data_source_connection(\"sample-data-source-connection\"\
    )\n   print(\"Retrived Data Source Connection 'sample-data-source-connection'\"\
    )\n\n   ````\n"
- uid: azure.search.documents.indexes.SearchIndexerClient.get_data_source_connection_names
  name: get_data_source_connection_names
  summary: Lists all data source connection names available for a search service.
  signature: 'get_data_source_connection_names(**kwargs: Any) -> Sequence[str]'
  return:
    description: List of all the data source connection names.
    types:
    - <xref:list>[<xref:str>]
- uid: azure.search.documents.indexes.SearchIndexerClient.get_data_source_connections
  name: get_data_source_connections
  summary: Lists all data source connections available for a search service.
  signature: 'get_data_source_connections(*, select: List[str] | None = None, **kwargs:
    Any) -> Sequence[SearchIndexerDataSourceConnection]'
  keywordOnlyParameters:
  - name: select
    description: 'Selects which top-level properties of the skillsets to retrieve.
      Specified as a

      list of JSON property names, or ''*'' for all properties. The default is all

      properties.'
    types:
    - <xref:list>[<xref:str>]
  return:
    description: List of all the data source connections.
    types:
    - <xref:list>[<xref:azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>]
  examples:
  - "List all the SearchIndexerDataSourceConnections<!--[!code-python[Main](les\\\
    sample_data_source_operations.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\200\\\\azure-search-documents-11.6.0b3\\\\samples\\\
    \\sample_data_source_operations.py\", \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   result = client.get_data_source_connections()\n\
    \   names = [ds.name for ds in result]\n   print(\"Found {} Data Source Connections\
    \ in the service: {}\".format(len(result), \", \".join(names)))\n\n   ````\n"
- uid: azure.search.documents.indexes.SearchIndexerClient.get_indexer
  name: get_indexer
  summary: Retrieves an indexer definition.
  signature: 'get_indexer(name: str, **kwargs: Any) -> SearchIndexer'
  parameters:
  - name: name
    description: The name of the indexer to retrieve.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The SearchIndexer that is fetched.
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexer>
  examples:
  - "Retrieve a SearchIndexer<!--[!code-python[Main](les\\sample_indexers_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    200\\\\azure-search-documents-11.6.0b3\\\\samples\\\\sample_indexers_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   result = indexers_client.get_indexer(\"sample-indexer\")\n   print(\"Retrived\
    \ Indexer 'sample-indexer'\")\n   return result\n\n   ````\n"
- uid: azure.search.documents.indexes.SearchIndexerClient.get_indexer_names
  name: get_indexer_names
  summary: Lists all indexer names available for a search service.
  signature: 'get_indexer_names(**kwargs: Any) -> Sequence[str]'
  return:
    description: List of all the SearchIndexers.
    types:
    - <xref:list>[<xref:str>]
  examples:
  - "List all the SearchIndexers<!--[!code-python[Main](les\\sample_indexers_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    200\\\\azure-search-documents-11.6.0b3\\\\samples\\\\sample_indexers_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   result = indexers_client.get_indexers()\n   names = [x.name for x in result]\n\
    \   print(\"Found {} Indexers in the service: {}\".format(len(result), \", \"\
    .join(names)))\n\n   ````\n"
- uid: azure.search.documents.indexes.SearchIndexerClient.get_indexer_status
  name: get_indexer_status
  summary: Get the status of the indexer.
  signature: 'get_indexer_status(name: str, **kwargs: Any) -> SearchIndexerStatus'
  parameters:
  - name: name
    description: The name of the indexer to fetch the status.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: SearchIndexerStatus
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexerStatus>
  examples:
  - "Get a SearchIndexer's status<!--[!code-python[Main](les\\sample_indexers_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    200\\\\azure-search-documents-11.6.0b3\\\\samples\\\\sample_indexers_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   result = indexers_client.get_indexer_status(\"sample-indexer\")\n   print(\"\
    Retrived Indexer status for 'sample-indexer'\")\n   return result\n\n   ````\n"
- uid: azure.search.documents.indexes.SearchIndexerClient.get_indexers
  name: get_indexers
  summary: Lists all indexers available for a search service.
  signature: 'get_indexers(*, select: List[str] | None = None, **kwargs: Any) -> Sequence[SearchIndexer]'
  keywordOnlyParameters:
  - name: select
    description: 'Selects which top-level properties of the skillsets to retrieve.
      Specified as a

      list of JSON property names, or ''*'' for all properties. The default is all

      properties.'
    types:
    - <xref:list>[<xref:str>]
  return:
    description: List of all the SearchIndexers.
    types:
    - <xref:list>[<xref:azure.search.documents.indexes.models.SearchIndexer>]
  examples:
  - "List all the SearchIndexers<!--[!code-python[Main](les\\sample_indexers_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    200\\\\azure-search-documents-11.6.0b3\\\\samples\\\\sample_indexers_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   result = indexers_client.get_indexers()\n   names = [x.name for x in result]\n\
    \   print(\"Found {} Indexers in the service: {}\".format(len(result), \", \"\
    .join(names)))\n\n   ````\n"
- uid: azure.search.documents.indexes.SearchIndexerClient.get_skillset
  name: get_skillset
  summary: Retrieve a named SearchIndexerSkillset in an Azure Search service
  signature: 'get_skillset(name: str, **kwargs: Any) -> SearchIndexerSkillset'
  parameters:
  - name: name
    description: The name of the SearchIndexerSkillset to get
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The retrieved SearchIndexerSkillset
    types:
    - <xref:azure.search.documents.indexes.models.SearchIndexerSkillset>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
- uid: azure.search.documents.indexes.SearchIndexerClient.get_skillset_names
  name: get_skillset_names
  summary: List the SearchIndexerSkillset names in an Azure Search service.
  signature: 'get_skillset_names(**kwargs: Any) -> List[str]'
  return:
    description: List of SearchIndexerSkillset names
    types:
    - <xref:list>[<xref:str>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.search.documents.indexes.SearchIndexerClient.get_skillsets
  name: get_skillsets
  summary: List the SearchIndexerSkillsets in an Azure Search service.
  signature: 'get_skillsets(*, select: List[str] | None = None, **kwargs: Any) ->
    List[SearchIndexerSkillset]'
  keywordOnlyParameters:
  - name: select
    description: 'Selects which top-level properties of the skillsets to retrieve.
      Specified as a

      list of JSON property names, or ''*'' for all properties. The default is all

      properties.'
    types:
    - <xref:list>[<xref:str>]
  return:
    description: List of SearchIndexerSkillsets
    types:
    - <xref:list>[<xref:azure.search.documents.indexes.models.SearchIndexerSkillset>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.search.documents.indexes.SearchIndexerClient.reset_documents
  name: reset_documents
  summary: Resets specific documents in the datasource to be selectively re-ingested
    by the indexer.
  signature: 'reset_documents(indexer: str | SearchIndexer, keys_or_ids: DocumentKeysOrIds,
    *, overwrite: bool = False, **kwargs: Any) -> None'
  parameters:
  - name: indexer
    description: The indexer to reset documents for.
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.search.documents.indexes.models.SearchIndexer>
  - name: keys_or_ids
    isRequired: true
    types:
    - <xref:azure.search.documents.indexes.models.DocumentKeysOrIds>
  keywordOnlyParameters:
  - name: overwrite
    description: 'If false, keys or ids will be appended to existing ones. If true,
      only the

      keys or ids in this payload will be queued to be re-ingested. The default is
      false.'
    types:
    - <xref:bool>
  return:
    description: None, or the result of cls(response)
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.search.documents.indexes.SearchIndexerClient.reset_indexer
  name: reset_indexer
  summary: Resets the change tracking state associated with an indexer.
  signature: 'reset_indexer(name: str, **kwargs: Any) -> None'
  parameters:
  - name: name
    description: The name of the indexer to reset.
    isRequired: true
    types:
    - <xref:str>
  examples:
  - "Reset a SearchIndexer's change tracking state<!--[!code-python[Main](les\\sample_indexers_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    200\\\\azure-search-documents-11.6.0b3\\\\samples\\\\sample_indexers_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   result = indexers_client.reset_indexer(\"sample-indexer\")\n   print(\"Reset\
    \ the Indexer 'sample-indexer'\")\n   return result\n\n   ````\n"
- uid: azure.search.documents.indexes.SearchIndexerClient.reset_skills
  name: reset_skills
  summary: Reset an existing skillset in a search service.
  signature: 'reset_skills(skillset: str | SearchIndexerSkillset, skill_names: List[str],
    **kwargs: Any) -> None'
  parameters:
  - name: skillset
    description: The SearchIndexerSkillset to reset
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.search.documents.indexes.models.SearchIndexerSkillset>
  - name: skill_names
    description: the names of skills to be reset.
    isRequired: true
    types:
    - <xref:typing.List>[<xref:str>]
  return:
    description: None, or the result of cls(response)
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.search.documents.indexes.SearchIndexerClient.run_indexer
  name: run_indexer
  summary: Run an indexer.
  signature: 'run_indexer(name: str, **kwargs: Any) -> None'
  parameters:
  - name: name
    description: The name of the indexer to run.
    isRequired: true
    types:
    - <xref:str>
  examples:
  - "Run a SearchIndexer<!--[!code-python[Main](les\\sample_indexers_operations.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    200\\\\azure-search-documents-11.6.0b3\\\\samples\\\\sample_indexers_operations.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   result = indexers_client.run_indexer(\"sample-indexer\")\n   print(\"Ran\
    \ the Indexer 'sample-indexer'\")\n   return result\n\n   ````\n"
