### YamlMime:PythonClass
uid: azure.search.documents.indexes.models.DictionaryDecompounderTokenFilter
name: DictionaryDecompounderTokenFilter
fullName: azure.search.documents.indexes.models.DictionaryDecompounderTokenFilter
module: azure.search.documents.indexes.models
inheritances:
- azure.search.documents.indexes._generated.models._models_py3.TokenFilter
summary: 'Decomposes compound words found in many Germanic languages. This token filter
  is implemented

  using Apache Lucene.


  All required parameters must be populated in order to send to server.'
constructor:
  syntax: 'DictionaryDecompounderTokenFilter(*, name: str, word_list: List[str], min_word_size:
    int = 5, min_subword_size: int = 2, max_subword_size: int = 15, only_longest_match:
    bool = False, **kwargs: Any)'
  keywordOnlyParameters:
  - name: name
    description: 'The name of the token filter. It must only contain letters, digits,
      spaces,

      dashes or underscores, can only start and end with alphanumeric characters,
      and is limited to

      128 characters. Required.'
    types:
    - <xref:str>
  - name: word_list
    description: The list of words to match against. Required.
    types:
    - <xref:list>[<xref:str>]
  - name: min_word_size
    description: 'The minimum word size. Only words longer than this get processed.

      Default is 5. Maximum is 300.'
    defaultValue: '5'
    types:
    - <xref:int>
  - name: min_subword_size
    description: 'The minimum subword size. Only subwords longer than this are

      outputted. Default is 2. Maximum is 300.'
    defaultValue: '2'
    types:
    - <xref:int>
  - name: max_subword_size
    description: 'The maximum subword size. Only subwords shorter than this are

      outputted. Default is 15. Maximum is 300.'
    defaultValue: '15'
    types:
    - <xref:int>
  - name: only_longest_match
    description: 'A value indicating whether to add only the longest matching

      subword to the output. Default is false.'
    types:
    - <xref:bool>
variables:
- description: A URI fragment specifying the type of token filter. Required.
  name: odata_type
  types:
  - <xref:str>
- description: 'The name of the token filter. It must only contain letters, digits,
    spaces, dashes

    or underscores, can only start and end with alphanumeric characters, and is limited
    to 128

    characters. Required.'
  name: name
  types:
  - <xref:str>
- description: The list of words to match against. Required.
  name: word_list
  types:
  - <xref:list>[<xref:str>]
- description: 'The minimum word size. Only words longer than this get processed.
    Default

    is 5. Maximum is 300.'
  name: min_word_size
  types:
  - <xref:int>
- description: 'The minimum subword size. Only subwords longer than this are outputted.

    Default is 2. Maximum is 300.'
  name: min_subword_size
  types:
  - <xref:int>
- description: 'The maximum subword size. Only subwords shorter than this are

    outputted. Default is 15. Maximum is 300.'
  name: max_subword_size
  types:
  - <xref:int>
- description: 'A value indicating whether to add only the longest matching subword

    to the output. Default is false.'
  name: only_longest_match
  types:
  - <xref:bool>
methods:
- uid: azure.search.documents.indexes.models.DictionaryDecompounderTokenFilter.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.search.documents.indexes.models.DictionaryDecompounderTokenFilter.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.search.documents.indexes.models.DictionaryDecompounderTokenFilter.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.search.documents.indexes.models.DictionaryDecompounderTokenFilter.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.search.documents.indexes.models.DictionaryDecompounderTokenFilter.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.search.documents.indexes.models.DictionaryDecompounderTokenFilter.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to server from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
