### YamlMime:PythonClass
uid: azure.maps.route.models.RouteDirectionParameters
name: RouteDirectionParameters
fullName: azure.maps.route.models.RouteDirectionParameters
module: azure.maps.route.models
summary: Post body parameters for Route directions.
constructor:
  syntax: 'RouteDirectionParameters(*, supporting_points: _models.GeoJsonGeometryCollection
    | None = None, avoid_vignette: List[str] | None = None, allow_vignette: List[str]
    | None = None, avoid_areas: _models.GeoJsonMultiPolygon | None = None, **kwargs:
    Any)'
  keywordOnlyParameters:
  - name: supporting_points
    description: "A GeoJSON Geometry collection representing sequence of coordinates\n\
      used as input for route reconstruction and for calculating zero or more alternative\
      \ routes to\nthis reference route.\n\n* The provided sequence of supporting\
      \ points is used as input for route reconstruction. \n\n* The alternative routes\
      \ are calculated between the origin and destination points specified in the\
      \ base path parameter locations. \n\n* If both *minDeviationDistance* and *minDeviationTime*\
      \ are set to zero, then these origin and destination points are expected to\
      \ be at (or very near) the beginning and end of the reference route, respectively.\
      \ \n\n* Intermediate locations (*waypoints*) are not supported when using `<_supportingPoints_>`.\
      \ \n\n* The reference route may contain traffic incidents of type _ROAD*CLOSURE*,\
      \ which are ignored for the calculation of the reference route's travel time\
      \ and traffic delay. Please refer to [Supporting Points](https://docs.microsoft.com/azure/azure-maps/how-to-use-best-practices-for-routing#calculate-and-bias-alternative-routes-using-supporting-points)\
      \  # pylint: disable=line-too-long for details."
    defaultValue: None
    types:
    - <xref:azure.maps.route.models.GeoJsonGeometryCollection>
  - name: avoid_vignette
    description: 'This is a list of 3-character, ISO 3166-1, alpha-3 country codes
      of

      countries in which all toll roads with vignettes are to be avoided, e.g. "AUS,CHE".
      Toll roads

      with vignettes in countries not in the list are unaffected. Note: It is an error
      to specify

      both **avoidVignette** and **allowVignette**.'
    defaultValue: None
    types:
    - <xref:list>[<xref:str>]
  - name: allow_vignette
    description: 'This is a list of 3-character, ISO 3166-1, alpha-3 country codes
      of

      countries in which toll roads with vignettes are allowed, e.g. "AUS,CHE". Specifying

      **allowVignette** with some countries X is equivalent to specifying **avoidVignette**
      with all

      countries but X. Specifying **allowVignette** with an empty list is the same
      as avoiding all

      toll roads with vignettes. Note: It is an error to specify both **avoidVignette**
      and

      **allowVignette**.'
    defaultValue: None
    types:
    - <xref:list>[<xref:str>]
  - name: avoid_areas
    description: 'A GeoJSON MultiPolygon representing list of areas to avoid. Only

      rectangle polygons are supported. The maximum size of a rectangle is about 160x160
      km. Maximum

      number of avoided areas is **10**. It cannot cross the 180th meridian. It must
      be between -80

      and +80 degrees of latitude.'
    defaultValue: None
    types:
    - <xref:azure.maps.route.models.GeoJsonMultiPolygon>
variables:
- description: "A GeoJSON Geometry collection representing sequence of coordinates\n\
    used as input for route reconstruction and for calculating zero or more alternative\
    \ routes to\nthis reference route.\n\n* The provided sequence of supporting points\
    \ is used as input for route reconstruction. \n\n* The alternative routes are\
    \ calculated between the origin and destination points specified in the base path\
    \ parameter locations. \n\n* If both *minDeviationDistance* and *minDeviationTime*\
    \ are set to zero, then these origin and destination points are expected to be\
    \ at (or very near) the beginning and end of the reference route, respectively.\
    \ \n\n* Intermediate locations (*waypoints*) are not supported when using `<_supportingPoints_>`.\
    \ \n\n* The reference route may contain traffic incidents of type _ROAD*CLOSURE*,\
    \ which are ignored for the calculation of the reference route's travel time and\
    \ traffic delay. Please refer to [Supporting Points](https://docs.microsoft.com/azure/azure-maps/how-to-use-best-practices-for-routing#calculate-and-bias-alternative-routes-using-supporting-points)\
    \  # pylint: disable=line-too-long for details."
  name: supporting_points
  types:
  - <xref:azure.maps.route.models.GeoJsonGeometryCollection>
- description: 'This is a list of 3-character, ISO 3166-1, alpha-3 country codes of

    countries in which all toll roads with vignettes are to be avoided, e.g. "AUS,CHE".
    Toll roads

    with vignettes in countries not in the list are unaffected. Note: It is an error
    to specify

    both **avoidVignette** and **allowVignette**.'
  name: avoid_vignette
  types:
  - <xref:list>[<xref:str>]
- description: 'This is a list of 3-character, ISO 3166-1, alpha-3 country codes of

    countries in which toll roads with vignettes are allowed, e.g. "AUS,CHE". Specifying

    **allowVignette** with some countries X is equivalent to specifying **avoidVignette**
    with all

    countries but X. Specifying **allowVignette** with an empty list is the same as
    avoiding all

    toll roads with vignettes. Note: It is an error to specify both **avoidVignette**
    and

    **allowVignette**.'
  name: allow_vignette
  types:
  - <xref:list>[<xref:str>]
- description: 'A GeoJSON MultiPolygon representing list of areas to avoid. Only rectangle

    polygons are supported. The maximum size of a rectangle is about 160x160 km. Maximum
    number of

    avoided areas is **10**. It cannot cross the 180th meridian. It must be between
    -80 and +80

    degrees of latitude.'
  name: avoid_areas
  types:
  - <xref:azure.maps.route.models.GeoJsonMultiPolygon>
methods:
- uid: azure.maps.route.models.RouteDirectionParameters.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'True'
    types:
    - <xref:bool>
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.maps.route.models.RouteDirectionParameters.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
    types:
    - <xref:ModelType>
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.maps.route.models.RouteDirectionParameters.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.maps.route.models.RouteDirectionParameters.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: key_extractors
    description: A key extractor function.
    defaultValue: None
    types:
    - <xref:function>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
    types:
    - <xref:ModelType>
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.maps.route.models.RouteDirectionParameters.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.maps.route.models.RouteDirectionParameters.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to server from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
