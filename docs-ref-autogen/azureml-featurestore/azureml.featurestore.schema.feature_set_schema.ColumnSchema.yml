### YamlMime:PythonClass
uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema
name: ColumnSchema
fullName: azureml.featurestore.schema.feature_set_schema.ColumnSchema
module: azureml.featurestore.schema.feature_set_schema
inheritances:
- azure.ai.ml._schema.core.schema_meta.PatchedBaseSchema
constructor:
  syntax: 'ColumnSchema(*, only: Sequence[str] | AbstractSet[str] | None = None, exclude:
    Sequence[str] | AbstractSet[str] = (), many: bool = False, context: dict | None
    = None, load_only: Sequence[str] | AbstractSet[str] = (), dump_only: Sequence[str]
    | AbstractSet[str] = (), partial: bool | Sequence[str] | AbstractSet[str] | None
    = None, unknown: str | None = None)'
  keywordOnlyParameters:
  - name: only
    isRequired: true
  - name: exclude
    isRequired: true
  - name: many
    isRequired: true
  - name: context
    isRequired: true
  - name: load_only
    isRequired: true
  - name: dump_only
    isRequired: true
  - name: partial
    isRequired: true
  - name: unknown
    isRequired: true
methods:
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.dump
  name: dump
  summary: "Serialize an object to native Python data types according to this\nSchema's\
    \ fields.\n\n*New in version 1.0.0.* \n\n*Changed in version 3.0.0b7:* This method\
    \ returns the serialized data rather than a `(data, errors)` duple.\nA <xref:marshmallow.exceptions.ValidationError>\
    \ is raised\nif `obj` is invalid.\n\n*Changed in version 3.0.0rc9:* Validation\
    \ no longer occurs upon serialization."
  signature: 'dump(obj: Any, *, many: bool | None = None)'
  parameters:
  - name: obj
    description: The object to serialize.
    isRequired: true
  - name: many
    description: 'Whether to serialize *obj* as a collection. If *None*, the value

      for *self.many* is used.'
    isRequired: true
  keywordOnlyParameters:
  - name: many
    isRequired: true
  return:
    description: Serialized data
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.dumps
  name: dumps
  summary: "Same as <xref:azureml.featurestore.schema.feature_set_schema.ColumnSchema.dump>,\
    \ except return a JSON-encoded string.\n\n*New in version 1.0.0.* \n\n*Changed\
    \ in version 3.0.0b7:* This method returns the serialized data rather than a `(data,\
    \ errors)` duple.\nA <xref:marshmallow.exceptions.ValidationError> is raised\n\
    if `obj` is invalid."
  signature: 'dumps(obj: Any, *args, many: bool | None = None, **kwargs)'
  parameters:
  - name: obj
    description: The object to serialize.
    isRequired: true
  - name: many
    description: 'Whether to serialize *obj* as a collection. If *None*, the value

      for *self.many* is used.'
    isRequired: true
  keywordOnlyParameters:
  - name: many
    isRequired: true
  return:
    description: A `json` string
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.from_dict
  name: from_dict
  summary: "Generate a *Schema* class given a dictionary of fields.\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   from marshmallow\
    \ import Schema, fields\n\n   PersonSchema = Schema.from_dict({\"name\": fields.Str()})\n\
    \   print(PersonSchema().load({\"name\": \"David\"}))  # => {'name': 'David'}\n\
    \   ````\n\nGenerated schemas are not added to the class registry and therefore\
    \ cannot\nbe referred to by name in *Nested* fields.\n\n*New in version 3.0.0.*"
  signature: 'from_dict(fields: dict[str, marshmallow.fields.Field | type], *, name:
    str = ''GeneratedSchema'') -> type'
  parameters:
  - name: fields
    description: Dictionary mapping field names to field instances.
    isRequired: true
    types:
    - <xref:dict>
  - name: name
    description: 'Optional name for the class, which will appear in

      the `repr` for the class.'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: name
    defaultValue: GeneratedSchema
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.get_attribute
  name: get_attribute
  summary: "Defines how to pull values from an object to serialize.\n\n*New in version\
    \ 2.0.0.* \n\n*Changed in version 3.0.0a1:* Changed position of `obj` and `attr`."
  signature: 'get_attribute(obj: Any, attr: str, default: Any)'
  parameters:
  - name: obj
    isRequired: true
  - name: attr
    isRequired: true
  - name: default
    isRequired: true
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.handle_error
  name: handle_error
  summary: "Custom error handler function for the schema.\n\n*New in version 2.0.0.*\
    \ \n\n*Changed in version 3.0.0rc9:* Receives *many* and *partial* (on deserialization)\
    \ as keyword arguments."
  signature: 'handle_error(error: ValidationError, data: Any, *, many: bool, **kwargs)'
  parameters:
  - name: error
    description: The *ValidationError* raised during (de)serialization.
    isRequired: true
  - name: data
    description: The original input data.
    isRequired: true
  - name: many
    description: Value of `many` on dump or load.
    isRequired: true
  - name: partial
    description: Value of `partial` on load.
    isRequired: true
  keywordOnlyParameters:
  - name: many
    isRequired: true
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.load
  name: load
  summary: "Deserialize a data structure to an object defined by this Schema's fields.\n\
    \n*New in version 1.0.0.* \n\n*Changed in version 3.0.0b7:* This method returns\
    \ the deserialized data rather than a `(data, errors)` duple.\nA <xref:marshmallow.exceptions.ValidationError>\
    \ is raised\nif invalid data are passed."
  signature: 'load(data: Mapping[str, Any] | Iterable[Mapping[str, Any]], *, many:
    bool | None = None, partial: bool | Sequence[str] | AbstractSet[str] | None =
    None, unknown: str | None = None)'
  parameters:
  - name: data
    description: The data to deserialize.
    isRequired: true
  - name: many
    description: 'Whether to deserialize *data* as a collection. If *None*, the

      value for *self.many* is used.'
    isRequired: true
  - name: partial
    description: 'Whether to ignore missing fields and not require

      any fields declared. Propagates down to `Nested` fields as well. If

      its value is an iterable, only missing fields listed in that iterable

      will be ignored. Use dot delimiters to specify nested fields.'
    isRequired: true
  - name: unknown
    description: 'Whether to exclude, include, or raise an error for unknown

      fields in the data. Use *EXCLUDE*, *INCLUDE* or *RAISE*.

      If *None*, the value for *self.unknown* is used.'
    isRequired: true
  keywordOnlyParameters:
  - name: many
    isRequired: true
  - name: partial
    isRequired: true
  - name: unknown
    isRequired: true
  return:
    description: Deserialized data
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.loads
  name: loads
  summary: "Same as <xref:azureml.featurestore.schema.feature_set_schema.ColumnSchema.load>,\
    \ except it takes a JSON string as input.\n\n*New in version 1.0.0.* \n\n*Changed\
    \ in version 3.0.0b7:* This method returns the deserialized data rather than a\
    \ `(data, errors)` duple.\nA <xref:marshmallow.exceptions.ValidationError> is\
    \ raised\nif invalid data are passed."
  signature: 'loads(json_data: str, *, many: bool | None = None, partial: bool | Sequence[str]
    | AbstractSet[str] | None = None, unknown: str | None = None, **kwargs)'
  parameters:
  - name: json_data
    description: A JSON string of the data to deserialize.
    isRequired: true
  - name: many
    description: 'Whether to deserialize *obj* as a collection. If *None*, the

      value for *self.many* is used.'
    isRequired: true
  - name: partial
    description: 'Whether to ignore missing fields and not require

      any fields declared. Propagates down to `Nested` fields as well. If

      its value is an iterable, only missing fields listed in that iterable

      will be ignored. Use dot delimiters to specify nested fields.'
    isRequired: true
  - name: unknown
    description: 'Whether to exclude, include, or raise an error for unknown

      fields in the data. Use *EXCLUDE*, *INCLUDE* or *RAISE*.

      If *None*, the value for *self.unknown* is used.'
    isRequired: true
  keywordOnlyParameters:
  - name: many
    isRequired: true
  - name: partial
    isRequired: true
  - name: unknown
    isRequired: true
  return:
    description: Deserialized data
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.make
  name: make
  signature: make(data, **kwargs)
  parameters:
  - name: data
    isRequired: true
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.on_bind_field
  name: on_bind_field
  summary: 'Hook to modify a field when it is bound to the *Schema*.


    No-op by default.'
  signature: 'on_bind_field(field_name: str, field_obj: Field) -> None'
  parameters:
  - name: field_name
    isRequired: true
  - name: field_obj
    isRequired: true
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.remove_none
  name: remove_none
  summary: Prevents from dumping attributes that are None, thus making the dump more
    compact.
  signature: remove_none(data, **kwargs)
  parameters:
  - name: data
    isRequired: true
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.validate
  name: validate
  summary: 'Validate *data* against the schema, returning a dictionary of

    validation errors.


    *New in version 1.1.0.*'
  signature: 'validate(data: Mapping[str, Any] | Iterable[Mapping[str, Any]], *, many:
    bool | None = None, partial: bool | Sequence[str] | AbstractSet[str] | None =
    None) -> dict[str, list[str]]'
  parameters:
  - name: data
    description: The data to validate.
    isRequired: true
  - name: many
    description: 'Whether to validate *data* as a collection. If *None*, the

      value for *self.many* is used.'
    isRequired: true
  - name: partial
    description: 'Whether to ignore missing fields and not require

      any fields declared. Propagates down to `Nested` fields as well. If

      its value is an iterable, only missing fields listed in that iterable

      will be ignored. Use dot delimiters to specify nested fields.'
    isRequired: true
  keywordOnlyParameters:
  - name: many
    isRequired: true
  - name: partial
    isRequired: true
  return:
    description: A dictionary of validation errors.
attributes:
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.dict_class
  name: dict_class
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.error_messages
  name: error_messages
  summary: Overrides for default schema-level error messages
  signature: 'error_messages: Dict[str, str] = {}'
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.fields
  name: fields
  summary: Dictionary mapping field_names -> <xref:azureml.featurestore.schema.feature_set_schema.Field>
    objects
  signature: 'fields: Dict[str, ma_fields.Field]'
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.TYPE_MAPPING
  name: TYPE_MAPPING
  signature: 'TYPE_MAPPING: Dict[type, Type[ma_fields.Field]] = {<class ''str''>:
    <class ''marshmallow.fields.String''>, <class ''bytes''>: <class ''marshmallow.fields.String''>,
    <class ''datetime.datetime''>: <class ''marshmallow.fields.DateTime''>, <class
    ''float''>: <class ''marshmallow.fields.Float''>, <class ''bool''>: <class ''marshmallow.fields.Boolean''>,
    <class ''tuple''>: <class ''marshmallow.fields.Raw''>, <class ''list''>: <class
    ''marshmallow.fields.Raw''>, <class ''set''>: <class ''marshmallow.fields.Raw''>,
    <class ''int''>: <class ''marshmallow.fields.Integer''>, <class ''uuid.UUID''>:
    <class ''marshmallow.fields.UUID''>, <class ''datetime.time''>: <class ''marshmallow.fields.Time''>,
    <class ''datetime.date''>: <class ''marshmallow.fields.Date''>, <class ''datetime.timedelta''>:
    <class ''marshmallow.fields.TimeDelta''>, <class ''decimal.Decimal''>: <class
    ''marshmallow.fields.Decimal''>}'
- uid: azureml.featurestore.schema.feature_set_schema.ColumnSchema.opts
  name: opts
  signature: 'opts: SchemaOpts = <marshmallow.schema.SchemaOpts object>'
