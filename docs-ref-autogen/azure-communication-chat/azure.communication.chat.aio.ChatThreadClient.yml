### YamlMime:PythonClass
uid: azure.communication.chat.aio.ChatThreadClient
name: ChatThreadClient
fullName: azure.communication.chat.aio.ChatThreadClient
module: azure.communication.chat.aio
inheritances:
- builtins.object
summary: "A client to interact with the AzureCommunicationService Chat gateway.\n\
  Instances of this class is normally retrieved by ChatClient.get_chat_thread_client()\n\
  \nThis client provides operations to add participant(s) to chat thread, remove participant\
  \ from\n   chat thread, send message, delete message, update message, send typing\
  \ notifications,\n   send and list read receipt"
constructor:
  syntax: 'ChatThreadClient(endpoint: str, credential: CommunicationTokenCredential,
    thread_id: str, **kwargs: Any)'
  parameters:
  - name: endpoint
    description: The endpoint of the Azure Communication resource.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. The value contains a
      User

      Access Token'
    isRequired: true
    types:
    - <xref:azure.communication.chat.aio.CommunicationTokenCredential>
  - name: thread_id
    description: The unique thread id.
    isRequired: true
    types:
    - <xref:str>
variables:
- description: Chat thread id.
  name: thread_id
  types:
  - <xref:str>
examples:
- "Creating the ChatThreadClient.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
  \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\26\\\\azure-communication-chat-1.3.0\\\
  \\samples\\\\chat_thread_client_sample_async.py\", \"xml:space\": \"preserve\",\
  \ \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n   from datetime import datetime\n\
  \   from azure.communication.chat.aio import ChatClient, CommunicationTokenCredential\n\
  \   from azure.communication.chat import ChatParticipant, CommunicationUserIdentifier\n\
  \   # set `endpoint` to an existing ACS endpoint\n   chat_client = ChatClient(endpoint,\
  \ CommunicationTokenCredential(token))\n\n   async with chat_client:\n       topic\
  \ = \"test topic\"\n       participants = [ChatParticipant(\n           identifier=user,\n\
  \           display_name='name',\n           share_history_time=datetime.utcnow()\n\
  \       )]\n       create_chat_thread_result = await chat_client.create_chat_thread(topic,\
  \ thread_participants=participants)\n       chat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n\
  \n   ````\n"
methods:
- uid: azure.communication.chat.aio.ChatThreadClient.add_participants
  name: add_participants
  summary: 'Adds thread participants to a thread. If participants already exist, no
    change occurs.


    If all participants are added successfully, then an empty list is returned;

    otherwise, a list of tuple(chat_thread_participant, chat_error) is returned,

    of failed participants and its respective error'
  signature: 'async add_participants(thread_participants: List[ChatParticipant], **kwargs)
    -> List[Tuple[ChatParticipant, ChatError]]'
  parameters:
  - name: thread_participants
    description: Thread participants to be added to the thread.
    isRequired: true
    types:
    - <xref:typing.List>[<xref:azure.communication.chat.ChatParticipant>]
  return:
    description: List[Tuple[ChatParticipant, ChatError]]
    types:
    - <xref:typing.List>[<xref:typing.Tuple>[<xref:azure.communication.chat.ChatParticipant>,
      <xref:azure.communication.chat.ChatError>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Adding participants to chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    26\\\\azure-communication-chat-1.3.0\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   def decide_to_retry(error):\n       \"\"\"\n       Custom logic to decide\
    \ whether to retry to add or not\n       \"\"\"\n       return True\n\n   async\
    \ with chat_client:\n       # set `thread_id` to an existing thread id\n     \
    \  chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \       async with chat_thread_client:\n           from azure.communication.chat\
    \ import ChatParticipant\n           from datetime import datetime\n         \
    \  new_participant = ChatParticipant(\n                   identifier=self.new_user,\n\
    \                   display_name='name',\n                   share_history_time=datetime.utcnow())\n\
    \           thread_participants = [new_participant]\n           result = await\
    \ chat_thread_client.add_participants(thread_participants)\n\n           # list\
    \ of participants which were unsuccessful to be added to chat thread\n       \
    \    retry = [p for p, e in result if decide_to_retry(e)]\n           if retry:\n\
    \               await chat_thread_client.add_participants(retry)\n\n\n   ````\n"
- uid: azure.communication.chat.aio.ChatThreadClient.close
  name: close
  signature: async close() -> None
- uid: azure.communication.chat.aio.ChatThreadClient.delete_message
  name: delete_message
  summary: Deletes a message.
  signature: 'async delete_message(message_id: str, **kwargs) -> None'
  parameters:
  - name: message_id
    description: Required. The message id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Deleting a message.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    26\\\\azure-communication-chat-1.3.0\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   async with chat_client:\n       # set `thread_id` to an existing thread id\n\
    \       chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \       async with chat_thread_client:\n           # set `message_id` to an existing\
    \ message id\n           await chat_thread_client.delete_message(message_id)\n\
    \n   ````\n"
- uid: azure.communication.chat.aio.ChatThreadClient.get_message
  name: get_message
  summary: Gets a message by id.
  signature: 'async get_message(message_id: str, **kwargs) -> ChatMessage'
  parameters:
  - name: message_id
    description: Required. The message id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: ChatMessage
    types:
    - <xref:azure.communication.chat.ChatMessage>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Retrieving a message by message id.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    26\\\\azure-communication-chat-1.3.0\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   async with chat_client:\n       # set `thread_id` to an existing thread id\n\
    \       chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \       async with chat_thread_client:\n           # set `message_id` to an existing\
    \ message id\n           chat_message = await chat_thread_client.get_message(message_id)\n\
    \n           print(\"Message received: ChatMessage: content=\", chat_message.content.message,\
    \ \", id=\", chat_message.id)\n\n   ````\n"
- uid: azure.communication.chat.aio.ChatThreadClient.get_properties
  name: get_properties
  summary: Gets the properties of the chat thread.
  signature: async get_properties(**kwargs) -> ChatThreadProperties
  return:
    description: ChatThreadProperties
    types:
    - <xref:azure.communication.chat.ChatThreadProperties>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Retrieving chat thread properties by chat thread id.<!--[!code-python[Main](les\\\
    chat_thread_client_sample_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\26\\\\azure-communication-chat-1.3.0\\\\samples\\\\\
    chat_thread_client_sample_async.py\", \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.communication.chat.aio import\
    \ ChatClient, CommunicationTokenCredential\n\n   # set `endpoint` to an existing\
    \ ACS endpoint\n   chat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\n\
    \   async with chat_client:\n       chat_thread_client = chat_client.get_chat_thread_client(thread_id)\n\
    \n       async with chat_thread_client:\n           chat_thread_properties = chat_thread_client.get_properties()\n\
    \           print('Expected Thread Id: ', thread_id, ' Actual Value: ', chat_thread_properties.id)\n\
    \n   ````\n"
- uid: azure.communication.chat.aio.ChatThreadClient.list_messages
  name: list_messages
  summary: Gets a list of messages from a thread.
  signature: 'list_messages(**kwargs: Any) -> AsyncItemPaged[ChatMessage]'
  keywordOnlyParameters:
  - name: results_per_page
    description: The maximum number of messages to be returned per page.
    types:
    - <xref:int>
  - name: start_time
    description: The start time where the range query.
    types:
    - <xref:datetime.datetime>
  return:
    description: An iterator like instance of ChatMessage
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.communication.chat.ChatMessage>]
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Listing messages of a chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    26\\\\azure-communication-chat-1.3.0\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from datetime import datetime, timedelta\n   async with chat_client:\n  \
    \     # set `thread_id` to an existing thread id\n       chat_thread_client =\
    \ chat_client.get_chat_thread_client(thread_id=thread_id)\n       async with chat_thread_client:\n\
    \           start_time = datetime.utcnow() - timedelta(days=1)\n           chat_messages\
    \ = chat_thread_client.list_messages(results_per_page=1, start_time=start_time)\n\
    \           print(\"list_messages succeeded with results_per_page is 1, and start\
    \ time is yesterday UTC\")\n           async for chat_message_page in chat_messages.by_page():\n\
    \               async for chat_message in chat_message_page:\n               \
    \    print(\"ChatMessage: message=\", chat_message.content.message)\n        \
    \           for attachment in chat_message.content.attachments:\n            \
    \           if attachment.type == \"image\":\n                           print(\"\
    image attachment: \", attachment.name, \" with ID: \", attachment.id, \"received.\"\
    )\n                           # render `attachment.preview_url` as the thumbnail\n\
    \                           # render `attachment.url` as the full image\n    \
    \                   elif attachment.type == \"file\":\n                      \
    \     print(\"file attachment: \", attachment.name, \" with ID: \", attachment.id,\
    \ \"received.\")\n                           # render a button that will navigate\
    \ user to the URL provided in `attachment.preview_url`\n\n   ````\n"
- uid: azure.communication.chat.aio.ChatThreadClient.list_participants
  name: list_participants
  summary: Gets the participants of a thread.
  signature: 'list_participants(**kwargs: Any) -> AsyncItemPaged[ChatParticipant]'
  keywordOnlyParameters:
  - name: results_per_page
    description: The maximum number of participants to be returned per page.
    types:
    - <xref:int>
  - name: skip
    description: Skips participants up to a specified position in response.
    types:
    - <xref:int>
  return:
    description: An iterator like instance of ChatParticipant
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.communication.chat.ChatParticipant>]
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Listing participants of chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    26\\\\azure-communication-chat-1.3.0\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   async with chat_client:\n       # set `thread_id` to an existing thread id\n\
    \       chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \       async with chat_thread_client:\n           chat_thread_participants =\
    \ chat_thread_client.list_participants()\n           print(\"list_participants\
    \ succeeded, participants:\")\n           async for chat_thread_participant_page\
    \ in chat_thread_participants.by_page():\n               async for chat_thread_participant\
    \ in chat_thread_participant_page:\n                   print(\"ChatParticipant:\
    \ \", chat_thread_participant)\n\n   ````\n"
- uid: azure.communication.chat.aio.ChatThreadClient.list_read_receipts
  name: list_read_receipts
  summary: Gets read receipts for a thread.
  signature: 'list_read_receipts(**kwargs: Any) -> AsyncItemPaged[ChatMessageReadReceipt]'
  keywordOnlyParameters:
  - name: results_per_page
    description: The maximum number of chat message read receipts to be returned per
      page.
    types:
    - <xref:int>
  - name: skip
    description: Skips chat message read receipts up to a specified position in response.
    types:
    - <xref:int>
  return:
    description: An iterator like instance of ChatMessageReadReceipt
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.communication.chat.ChatMessageReadReceipt>]
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Listing read receipts.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    26\\\\azure-communication-chat-1.3.0\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   async with chat_client:\n       # set `thread_id` to an existing thread id\n\
    \       chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \       async with chat_thread_client:\n           read_receipts = chat_thread_client.list_read_receipts()\n\
    \           print(\"list_read_receipts succeeded, receipts:\")\n           async\
    \ for read_receipt_page in read_receipts.by_page():\n               async for\
    \ read_receipt in read_receipt_page:\n                   print(read_receipt)\n\
    \n   ````\n"
- uid: azure.communication.chat.aio.ChatThreadClient.remove_participant
  name: remove_participant
  summary: Remove a participant from a thread.
  signature: 'async remove_participant(identifier: CommunicationIdentifier, **kwargs)
    -> None'
  parameters:
  - name: identifier
    description: Required. Identifier of the thread participant to remove from the
      thread.
    isRequired: true
    types:
    - <xref:azure.communication.chat.CommunicationIdentifier>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Removing participant from chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    26\\\\azure-communication-chat-1.3.0\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       # Option 1 : Iterate through all participants, find and delete Fred Flinstone\n\
    \       chat_thread_participants = chat_thread_client.list_participants()\n\n\
    \       async for chat_thread_participant_page in chat_thread_participants.by_page():\n\
    \           async for chat_thread_participant in chat_thread_participant_page:\n\
    \               print(\"ChatParticipant: \", chat_thread_participant)\n      \
    \         if chat_thread_participant.identifier.properties['id'] == user1.properties['id']:\n\
    \                   print(\"Found Fred!\")\n                   await chat_thread_client.remove_participant(chat_thread_participant.identifier)\n\
    \                   print(\"Fred has been removed from the thread...\")\n    \
    \               break\n\n       # Option 2: Directly remove Wilma Flinstone\n\
    \       unique_identifier = user2.properties['id']  # in real scenario the identifier\
    \ would need to be retrieved from elsewhere\n       await chat_thread_client.remove_participant(CommunicationUserIdentifier(unique_identifier))\n\
    \       print(\"Wilma has been removed from the thread...\")\n\n   ````\n"
- uid: azure.communication.chat.aio.ChatThreadClient.send_message
  name: send_message
  summary: Sends a message to a thread.
  signature: 'async send_message(content: str, *, metadata: Dict[str, str] = None,
    **kwargs) -> SendChatMessageResult'
  parameters:
  - name: content
    description: Required. Chat message content.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: chat_message_type
    description: 'The chat message type. Possible values include: "text", "html".
      Default: ChatMessageType.TEXT'
    types:
    - <xref:typing.Union>[<xref:str>, <xref:azure.communication.chat.ChatMessageType>]
  - name: sender_display_name
    description: 'The display name of the message sender. This property is used to

      populate sender name for push notifications.'
    types:
    - <xref:str>
  - name: metadata
    description: Message metadata.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  return:
    description: SendChatMessageResult
    types:
    - <xref:azure.communication.chat.SendChatMessageResult>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Sending a message.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    26\\\\azure-communication-chat-1.3.0\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.communication.chat import ChatMessageType\n   async with chat_client:\n\
    \       chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \       async with chat_thread_client:\n           # Scenario 1: Send message\
    \ without specifying chat_message_type\n           send_message_result = await\
    \ chat_thread_client.send_message(\n               \"Hello! My name is Fred Flinstone\"\
    ,\n               sender_display_name=\"Fred Flinstone\",\n               metadata={\"\
    tags\": \"tags\"})\n           send_message_result_id = send_message_result.id\n\
    \n           # Scenario 2: Send message specifying chat_message_type\n       \
    \    send_message_result_w_type = await chat_thread_client.send_message(\n   \
    \            \"Hello! My name is Wilma Flinstone\",\n               sender_display_name=\"\
    Wilma Flinstone\",\n               chat_message_type=ChatMessageType.TEXT)  #\
    \ equivalent to setting chat_message_type='text'\n           send_message_result_w_type_id\
    \ = send_message_result_w_type.id\n\n           # Verify message content\n   \
    \        chat_message_1 = await chat_thread_client.get_message(send_message_result_id)\n\
    \           print(\"First Message:\", chat_message_1.content.message, chat_message_1.metadata)\n\
    \           print(\"Second Message:\", (await chat_thread_client.get_message(send_message_result_w_type_id)).content.message)\n\
    \n   ````\n"
- uid: azure.communication.chat.aio.ChatThreadClient.send_read_receipt
  name: send_read_receipt
  summary: Posts a read receipt event to a chat thread, on behalf of a user.
  signature: 'async send_read_receipt(message_id: str, **kwargs) -> None'
  parameters:
  - name: message_id
    description: Required. Id of the latest message read by current user.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Sending read receipt of a chat message.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    26\\\\azure-communication-chat-1.3.0\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   async with chat_client:\n       # set `thread_id` to an existing thread id\n\
    \       chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \       async with chat_thread_client:\n           # set `message_id` to an existing\
    \ message id\n           await chat_thread_client.send_read_receipt(message_id)\n\
    \n   ````\n"
- uid: azure.communication.chat.aio.ChatThreadClient.send_typing_notification
  name: send_typing_notification
  summary: Posts a typing event to a thread, on behalf of a user.
  signature: 'async send_typing_notification(*, sender_display_name: str | None =
    None, **kwargs) -> None'
  keywordOnlyParameters:
  - name: sender_display_name
    description: 'The display name of the typing notification sender. This property

      is used to populate sender name for push notifications.'
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Send typing notification.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    26\\\\azure-communication-chat-1.3.0\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   async with chat_client:\n       # set `thread_id` to an existing thread id\n\
    \       chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \       async with chat_thread_client:\n           await chat_thread_client.send_typing_notification()\n\
    \n   ````\n"
- uid: azure.communication.chat.aio.ChatThreadClient.update_message
  name: update_message
  summary: Updates a message.
  signature: 'async update_message(message_id: str, content: str = None, *, metadata:
    Dict[str, str] = None, **kwargs) -> None'
  parameters:
  - name: message_id
    description: Required. The message id.
    isRequired: true
    types:
    - <xref:str>
  - name: content
    description: Chat message content
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: metadata
    description: Message metadata.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Updating an already sent message.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    26\\\\azure-communication-chat-1.3.0\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   async with chat_client:\n       # set `thread_id` to an existing thread id\n\
    \       chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \       async with chat_thread_client:\n           # set `message_id` to an existing\
    \ message id\n           previous_content = (await chat_thread_client.get_message(message_id)).content.message\n\
    \n           content = \"updated message content\"\n           await chat_thread_client.update_message(self._message_id,\
    \ content=content)\n\n           current_content = (await chat_thread_client.get_message(message_id)).content.message\n\
    \n           print(\"Chat Message Updated: Previous value: \", previous_content,\
    \ \", Current value: \", current_content)\n\n   ````\n"
- uid: azure.communication.chat.aio.ChatThreadClient.update_topic
  name: update_topic
  summary: Updates a thread's properties.
  signature: 'async update_topic(topic: str = None, **kwargs) -> None'
  parameters:
  - name: topic
    description: 'Thread topic. If topic is not specified, the update will succeed
      but

      chat thread properties will not be changed.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Updating chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    26\\\\azure-communication-chat-1.3.0\\\\samples\\\\chat_thread_client_sample_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # set `thread_id` to an existing thread id\n   async with chat_client:\n\
    \       chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n       async with chat_thread_client:\n           chat_thread_properties = await\
    \ chat_thread_client.get_properties()\n           previous_topic = chat_thread_properties.topic\n\
    \n           topic = \"updated thread topic\"\n           await chat_thread_client.update_topic(topic=topic)\n\
    \n           chat_thread_properties = await chat_thread_client.get_properties()\n\
    \           updated_topic = chat_thread_properties.topic\n\n           print(\"\
    Chat Thread Topic Update: Previous value: \", previous_topic, \", Current value:\
    \ \", updated_topic)\n\n   ````\n"
attributes:
- uid: azure.communication.chat.aio.ChatThreadClient.thread_id
  name: thread_id
  summary: Gets the thread id from the client.
  return:
    types:
    - <xref:str>
