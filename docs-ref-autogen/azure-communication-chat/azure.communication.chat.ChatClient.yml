### YamlMime:PythonClass
uid: azure.communication.chat.ChatClient
name: ChatClient
fullName: azure.communication.chat.ChatClient
module: azure.communication.chat
inheritances:
- builtins.object
summary: 'A client to interact with the AzureCommunicationService Chat gateway.


  This client provides operations to create chat thread, delete chat thread,

  get chat thread client by thread id, list chat threads.'
constructor:
  syntax: 'ChatClient(endpoint: str, credential: CommunicationTokenCredential, **kwargs:
    Any)'
  parameters:
  - name: endpoint
    description: The endpoint of the Azure Communication resource.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: The credentials with which to authenticate.
    isRequired: true
    types:
    - <xref:azure.communication.chat.CommunicationTokenCredential>
examples:
- "Creating the ChatClient from a URL and token.<!--[!code-python[Main](les\\chat_client_sample.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
  \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\26\\\\azure-communication-chat-1.3.0\\\
  \\samples\\\\chat_client_sample.py\", \"xml:space\": \"preserve\", \"force\": false,\
  \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
  : false} -->\n\n````python\n\n   from azure.communication.chat import ChatClient,\
  \ CommunicationTokenCredential\n\n   # set `endpoint` to an existing ACS endpoint\n\
  \   chat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\n\n\
  \   ````\n"
methods:
- uid: azure.communication.chat.ChatClient.close
  name: close
  signature: close() -> None
- uid: azure.communication.chat.ChatClient.create_chat_thread
  name: create_chat_thread
  summary: Creates a chat thread.
  signature: 'create_chat_thread(topic: str, **kwargs: Any) -> CreateChatThreadResult'
  parameters:
  - name: topic
    description: Required. The thread topic.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: thread_participants
    description: Optional. Participants to be added to the thread.
    types:
    - <xref:typing.List>[<xref:azure.communication.chat.ChatParticipant>]
  - name: idempotency_token
    description: 'Optional. If specified, the client directs that the request is

      repeatable; that is, the client can make the request multiple times with the
      same

      Idempotency_Token and get back an appropriate response without the server executing
      the

      request multiple times. The value of the Idempotency_Token is an opaque string

      representing a client-generated, globally unique for all time, identifier for
      the request. If not

      specified, a new unique id would be generated.'
    types:
    - <xref:str>
  return:
    description: CreateChatThreadResult
    types:
    - <xref:azure.communication.chat.CreateChatThreadResult>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Creating a new chat thread.<!--[!code-python[Main](les\\chat_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    26\\\\azure-communication-chat-1.3.0\\\\samples\\\\chat_client_sample.py\", \"\
    xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from datetime\
    \ import datetime\n\n   from azure.communication.chat import(\n       ChatClient,\n\
    \       ChatParticipant,\n       CommunicationUserIdentifier,\n       CommunicationTokenCredential\n\
    \   )\n\n   # set `endpoint` to an existing ACS endpoint\n   chat_client = ChatClient(endpoint,\
    \ CommunicationTokenCredential(token))\n\n   topic = \"test topic\"\n   participants\
    \ = [ChatParticipant(\n       identifier=user,\n       display_name='name',\n\
    \       share_history_time=datetime.utcnow()\n   )]\n\n   # creates a new chat_thread\
    \ everytime\n   create_chat_thread_result = chat_client.create_chat_thread(topic,\
    \ thread_participants=participants)\n\n   # creates a new chat_thread if not exists\n\
    \   idempotency_token = 'b66d6031-fdcc-41df-8306-e524c9f226b8' # unique identifier\n\
    \   create_chat_thread_result_w_repeatability_id = chat_client.create_chat_thread(\n\
    \       topic,\n       thread_participants=participants,\n       idempotency_token=idempotency_token\n\
    \   )\n\n   ````\n"
- uid: azure.communication.chat.ChatClient.delete_chat_thread
  name: delete_chat_thread
  summary: Deletes a chat thread.
  signature: 'delete_chat_thread(thread_id: str, **kwargs: Any) -> None'
  parameters:
  - name: thread_id
    description: Required. Thread id to delete.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Deleting a chat thread.<!--[!code-python[Main](les\\chat_client_sample.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\26\\\\azure-communication-chat-1.3.0\\\
    \\samples\\\\chat_client_sample.py\", \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.communication.chat import\
    \ ChatClient, CommunicationTokenCredential\n\n   # set `endpoint` to an existing\
    \ ACS endpoint\n   chat_client = ChatClient(endpoint, CommunicationTokenCredential(token))\n\
    \n   # set `thread_id` to an existing chat thread id\n   chat_client.delete_chat_thread(thread_id)\n\
    \n   ````\n"
- uid: azure.communication.chat.ChatClient.get_chat_thread_client
  name: get_chat_thread_client
  summary: Get ChatThreadClient by providing a thread_id.
  signature: 'get_chat_thread_client(thread_id: str, **kwargs: Any) -> ChatThreadClient'
  parameters:
  - name: thread_id
    description: Required. The thread id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: ChatThreadClient
    types:
    - <xref:azure.communication.chat.ChatThreadClient>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Retrieving the ChatThreadClient from an existing chat thread id.<!--[!code-python[Main](les\\\
    chat_client_sample.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
    \\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.3.0\\\\samples\\\\chat_client_sample.py\",\
    \ \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.communication.chat import ChatClient, CommunicationTokenCredential\n\
    \n   # set `endpoint` to an existing ACS endpoint\n   chat_client = ChatClient(endpoint,\
    \ CommunicationTokenCredential(token))\n\n   # set `thread_id` to an existing\
    \ chat thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id)\n\
    \n   ````\n"
- uid: azure.communication.chat.ChatClient.list_chat_threads
  name: list_chat_threads
  summary: Gets the list of chat threads of a user.
  signature: list_chat_threads(**kwargs) -> ItemPaged[ChatThreadItem]
  keywordOnlyParameters:
  - name: results_per_page
    description: The maximum number of chat threads returned per page.
    types:
    - <xref:int>
  - name: start_time
    description: The earliest point in time to get chat threads up to.
    types:
    - <xref:datetime.datetime>
  return:
    description: An iterator like instance of ChatThreadItem
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.communication.chat.ChatThreadItem>]
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Listing chat threads.<!--[!code-python[Main](les\\chat_client_sample.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\26\\\\azure-communication-chat-1.3.0\\\
    \\samples\\\\chat_client_sample.py\", \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.communication.chat import\
    \ ChatClient, CommunicationTokenCredential\n   from datetime import datetime,\
    \ timedelta\n\n   # set `endpoint` to an existing ACS endpoint\n   chat_client\
    \ = ChatClient(endpoint, CommunicationTokenCredential(token))\n   start_time =\
    \ datetime.utcnow() - timedelta(days=2)\n   chat_threads = chat_client.list_chat_threads(results_per_page=5,\
    \ start_time=start_time)\n\n   print(\"list_threads succeeded with results_per_page\
    \ is 5, and were created since 2 days ago.\")\n   for chat_thread_item_page in\
    \ chat_threads.by_page():\n       for chat_thread_item in chat_thread_item_page:\n\
    \           print(\"thread id:\", chat_thread_item.id)\n\n   ````\n"
