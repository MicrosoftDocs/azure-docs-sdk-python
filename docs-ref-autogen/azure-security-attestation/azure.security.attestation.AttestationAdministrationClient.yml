### YamlMime:PythonClass
uid: azure.security.attestation.AttestationAdministrationClient
name: AttestationAdministrationClient
fullName: azure.security.attestation.AttestationAdministrationClient
module: azure.security.attestation
inheritances:
- builtins.object
summary: "Provides administrative APIs for managing an instance of the Attestation\
  \ Service.\n\nThe <xref:azure.security.attestation.AttestationAdministrationClient>\
  \ object implements the policy\nmanagement and policy certificate management functions.\n\
  \nIf the *signing_key* and *signing_certificate* parameters\nare provided, they\
  \ will be applied to the following APIs:\n\n* <xref:azure.security.attestation.AttestationAdministrationClient.set_policy>\
  \ \n\n* <xref:azure.security.attestation.AttestationAdministrationClient.reset_policy>\
  \ \n\n* <xref:azure.security.attestation.AttestationAdministrationClient.add_policy_management_certificate>\
  \ \n\n* <xref:azure.security.attestation.AttestationAdministrationClient.remove_policy_management_certificate>\
  \ \n\n> [!NOTE]\n> The signing_key and signing_certificate parameters are a pair.\
  \ If one\n>\n> is present, the other must also be provided. In addition, the public\
  \ key\n>\n> in the signing_key and the public key in the signing_certificate must\n\
  >\n> match to ensure that the signing_certificate can be used to validate an\n>\n\
  > object signed by signing_key.\n>\n\n> [!TIP]\n> The validate_token, validation_callback,\
  \ validate_signature,\n>\n> validate_expiration, validate_not_before_time, validate_issuer,\
  \ and\n>\n> issuer keyword arguments are default values applied to each API call\
  \ within\n>\n> the <xref:azure.security.attestation.AttestationAdministrationClient>\
  \ class. These values can be\n>\n> overridden on individual API calls as needed.\n\
  >\n\nFor additional client creation configuration options, please see [Python Request\n\
  Options](https://aka.ms/azsdk/python/options)."
constructor:
  syntax: 'AttestationAdministrationClient(endpoint: str, credential: TokenCredential,
    **kwargs: Any)'
  parameters:
  - name: endpoint
    description: The attestation instance base URI, for example [https://mytenant.attest.azure.net](https://mytenant.attest.azure.net).
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: Credentials for the caller used to interact with the service.
    isRequired: true
    types:
    - <xref:azure.core.credentials.TokenCredential>
  keywordOnlyParameters:
  - name: signing_key
    description: 'PEM encoded signing key to be used for all

      operations.'
    types:
    - <xref:str>
  - name: signing_certificate
    description: 'PEM encoded X.509 certificate to be used for all

      operations.'
    types:
    - <xref:str>
  - name: validate_token
    description: If True, validate the token, otherwise return the token unvalidated.
    types:
    - <xref:bool>
  - name: validation_callback
    description: 'Function callback to allow clients to perform custom validation
      of the token.

      if the token is invalid, the *validation_callback* function should throw

      an exception.'
    types:
    - <xref:typing.Callable>[[<xref:azure.security.attestation.AttestationToken>,
      <xref:azure.security.attestation.AttestationSigner>], <xref:None>]
  - name: validate_signature
    description: If True, validate the signature of the token being validated.
    types:
    - <xref:bool>
  - name: validate_expiration
    description: If True, validate the expiration time of the token being validated.
    types:
    - <xref:bool>
  - name: issuer
    description: Expected issuer, used if *validate_issuer* is true.
    types:
    - <xref:str>
  - name: validation_slack
    description: 'Slack time for validation - tolerance applied

      to help account for clock drift between the issuer and the current machine.'
    types:
    - <xref:float>
  - name: validate_issuer
    description: If True, validate that the issuer of the token matches the expected
      issuer.
    types:
    - <xref:bool>
  - name: validate_not_before_time
    description: If true, validate the "Not Before" time in the token.
    types:
    - <xref:bool>
methods:
- uid: azure.security.attestation.AttestationAdministrationClient.add_policy_management_certificate
  name: add_policy_management_certificate
  summary: 'Adds a new policy management certificate to the set of policy management
    certificates for the instance.


    The <xref:azure.security.attestation.AttestationPolicyCertificatesResult> response
    to the

    <xref:azure.security.attestation.AttestationAdministrationClient.add_policy_management_certificate>
    API contains two attributes

    of interest.


    The first is *certificate_resolution*, which indicates

    whether the certificate in question is present in the set of policy

    management certificates after the operation has completed, or if it is

    absent.


    The second is the *thumbprint* of the certificate added. The *thumbprint*

    for the certificate is the SHA1 hash of the DER encoding of the

    certificate.'
  signature: 'add_policy_management_certificate(*args: str, **kwargs: Any) -> Tuple[AttestationPolicyCertificateResult,
    AttestationToken]'
  parameters:
  - name: certificate_to_add
    description: 'Required. PEM encoded X.509 certificate to add to

      the list of attestation policy management certificates.'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: signing_key
    description: 'PEM encoded signing Key representing the key

      associated with one of the *existing* attestation signing certificates.'
    types:
    - <xref:str>
  - name: signing_certificate
    description: 'PEM encoded signing certificate which is one of

      the *existing* attestation signing certificates.'
    types:
    - <xref:str>
  - name: validate_token
    description: If True, validate the token, otherwise return the token unvalidated.
    types:
    - <xref:bool>
  - name: validation_callback
    description: 'Function callback to allow clients to perform custom validation
      of the token.

      if the token is invalid, the *validation_callback* function should throw

      an exception.'
    types:
    - <xref:typing.Callable>[[<xref:azure.security.attestation.AttestationToken>,
      <xref:azure.security.attestation.AttestationSigner>], <xref:None>]
  - name: validate_signature
    description: If True, validate the signature of the token being validated.
    types:
    - <xref:bool>
  - name: validate_expiration
    description: If True, validate the expiration time of the token being validated.
    types:
    - <xref:bool>
  - name: issuer
    description: Expected issuer, used if *validate_issuer* is true.
    types:
    - <xref:str>
  - name: validation_slack
    description: 'Slack time for validation - tolerance applied

      to help account for clock drift between the issuer and the current machine.'
    types:
    - <xref:float>
  - name: validate_issuer
    description: If True, validate that the issuer of the token matches the expected
      issuer.
    types:
    - <xref:bool>
  - name: validate_not_before_time
    description: If true, validate the "Not Before" time in the token.
    types:
    - <xref:bool>
  return:
    description: 'AttestationPolicyCertificateResult object describing the status

      of the add request and the token sent from the service which

      contained the response.'
    types:
    - <xref:typing.Tuple>[<xref:azure.security.attestation.AttestationPolicyCertificateResult>,
      <xref:azure.security.attestation.AttestationToken>]
  examples:
  - "Adding a policy management certificate.<!--[!code-python[Main](les\\sample_get_set_policy.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    220\\\\azure-security-attestation-1.0.0\\\\samples\\\\sample_get_set_policy.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   new_key = create_rsa_key()\n   new_certificate = create_x509_certificate(new_key,\
    \ u\"NewCertificateName\")\n\n   # Add the new certificate to the list. Specify\
    \ a validation slack of\n   # 1.0 to test passing in validation parameters to\
    \ this method.\n   add_result, _ = admin_client.add_policy_management_certificate(\n\
    \       new_certificate,\n       signing_key=self.isolated_key,\n       signing_certificate=self.isolated_certificate,\n\
    \       validation_slack=1.0,\n   )\n   if add_result.certificate_resolution !=\
    \ CertificateModification.IS_PRESENT:\n       raise Exception(\"Certificate was\
    \ not added!\")\n\n\n   ````\n"
- uid: azure.security.attestation.AttestationAdministrationClient.close
  name: close
  signature: close() -> None
- uid: azure.security.attestation.AttestationAdministrationClient.get_policy
  name: get_policy
  summary: 'Retrieves the attestation policy for a specified attestation type.


    > [!NOTE]

    > The Azure Attestation Policy language is defined [here](https://docs.microsoft.com/azure/attestation/author-sign-policy)

    >'
  signature: 'get_policy(attestation_type: str | AttestationType, **kwargs: Any) ->
    Tuple[str, AttestationToken]'
  parameters:
  - name: attestation_type
    description: '<xref:azure.security.attestation.AttestationType> for

      which to retrieve the policy.'
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:azure.security.attestation.AttestationType>]
  keywordOnlyParameters:
  - name: validate_token
    description: If True, validate the token, otherwise return the token unvalidated.
    types:
    - <xref:bool>
  - name: validation_callback
    description: 'Function callback to allow clients to perform custom validation
      of the token.

      if the token is invalid, the *validation_callback* function should throw

      an exception.'
    types:
    - <xref:typing.Callable>[[<xref:azure.security.attestation.AttestationToken>,
      <xref:azure.security.attestation.AttestationSigner>], <xref:None>]
  - name: validate_signature
    description: If True, validate the signature of the token being validated.
    types:
    - <xref:bool>
  - name: validate_expiration
    description: If True, validate the expiration time of the token being validated.
    types:
    - <xref:bool>
  - name: issuer
    description: Expected issuer, used if *validate_issuer* is true.
    types:
    - <xref:str>
  - name: validation_slack
    description: 'Slack time for validation - tolerance applied

      to help account for clock drift between the issuer and the current machine.'
    types:
    - <xref:float>
  - name: validate_issuer
    description: If True, validate that the issuer of the token matches the expected
      issuer.
    types:
    - <xref:bool>
  - name: validate_not_before_time
    description: If true, validate the "Not Before" time in the token.
    types:
    - <xref:bool>
  return:
    description: 'A tuple containing the attestation policy and the token returned

      by the service..'
    types:
    - <xref:typing.Tuple>[<xref:str>, <xref:azure.security.attestation.AttestationToken>]
  exceptions:
  - type: azure.security.attestation.AttestationTokenValidationException
    description: 'Raised

      when an attestation token is invalid.'
  examples:
  - "Getting the current policy document.<!--[!code-python[Main](les\\sample_get_set_policy.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    220\\\\azure-security-attestation-1.0.0\\\\samples\\\\sample_get_set_policy.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   with AttestationAdministrationClient(\n       os.environ.get(\"ATTESTATION_AAD_URL\"\
    ), DefaultAzureCredential()\n   ) as admin_client:\n       policy, _ = admin_client.get_policy(AttestationType.SGX_ENCLAVE)\n\
    \       print(\"Current instance SGX Policy is: \", policy)\n\n   ````\n"
- uid: azure.security.attestation.AttestationAdministrationClient.get_policy_management_certificates
  name: get_policy_management_certificates
  summary: 'Retrieves the set of policy management certificates for the instance.


    The list of policy management certificates will only have values if the

    attestation service instance is in Isolated mode.'
  signature: 'get_policy_management_certificates(**kwargs: Any) -> Tuple[List[List[str]],
    AttestationToken]'
  keywordOnlyParameters:
  - name: validate_token
    description: 'If True, validate the token, otherwise

      return the token unvalidated.'
    types:
    - <xref:bool>
  - name: validation_callback
    description: 'Function callback to allow clients to

      perform custom validation of the token. If the token is invalid,

      the *validation_callback* function should throw an exception to cause

      the API call to fail.'
    types:
    - <xref:typing.Callable>[[<xref:azure.security.attestation.AttestationToken>,
      <xref:azure.security.attestation.AttestationSigner>], <xref:None>]
  - name: validate_signature
    description: 'If True, validate the signature of the

      token being validated.'
    types:
    - <xref:bool>
  - name: validate_expiration
    description: 'If True, validate the expiration time

      of the token being validated.'
    types:
    - <xref:bool>
  - name: validation_slack
    description: 'Slack time for validation - tolerance

      applied to help account for clock drift between the issuer and

      the current machine.'
    types:
    - <xref:float>
  - name: issuer
    description: Expected issuer, used if *validate_issuer* is true.
    types:
    - <xref:str>
  - name: validate_issuer
    description: 'If True, validate that the issuer of the

      token matches the expected issuer.'
    types:
    - <xref:bool>
  - name: validate_not_before_time
    description: 'If true, validate the

      "Not Before" time in the token.'
    types:
    - <xref:bool>
  return:
    description: A tuple containing the list of PEM encoded X.509 certificate chains
      and an attestation token.
    types:
    - <xref:typing.Tuple>[<xref:typing.List>[<xref:typing.List>[<xref:str>]], <xref:azure.security.attestation.AttestationToken>]
  examples:
  - "Retrieving the policy management certificates.<!--[!code-python[Main](les\\sample_get_set_policy.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    220\\\\azure-security-attestation-1.0.0\\\\samples\\\\sample_get_set_policy.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   print(\"Get the policy management certificates for a isolated instance.\"\
    )\n\n   endpoint = os.environ.get(\"ATTESTATION_ISOLATED_URL\")\n   with AttestationAdministrationClient(\n\
    \       endpoint, DefaultAzureCredential()\n   ) as admin_client:\n       certificates,\
    \ _ = admin_client.get_policy_management_certificates(\n           validation_slack=1.0\n\
    \       )\n       print(\"Isolated instance has\", len(certificates), \"certificates\"\
    )\n\n       # An Isolated attestation instance should have at least one signing\n\
    \       # certificate which is configured when the instance is created.\n    \
    \   #\n       # Note that the certificate list returned is an array of certificate\
    \ chains.\n       for cert_chain in certificates:\n           print(\"Certificate\
    \ chain has \", len(cert_chain), \" elements.\")\n           i = 1\n         \
    \  for cert in cert_chain:\n               # load_pem_x509_certifcate takes a\
    \ bytes, not str, so convert.\n               certificate = load_pem_x509_certificate(cert.encode(\"\
    ascii\"))\n               print(\"    Certificate\", i, \"subject:\", certificate.subject)\n\
    \               i += 1\n\n\n   ````\n"
- uid: azure.security.attestation.AttestationAdministrationClient.remove_policy_management_certificate
  name: remove_policy_management_certificate
  summary: 'Removes a policy management certificate from the set of policy management
    certificates for the instance.


    The <xref:azure.security.attestation.AttestationPolicyCertificateResult> response
    to the

    <xref:azure.security.attestation.AttestationAdministrationClient.remove_policy_management_certificate>
    API contains two attributes

    of interest.


    The first is *certificate_resolution*, which indicates

    whether the certificate in question is present in the set of policy

    management certificates after the operation has completed, or if it is

    absent.


    The second is the *thumbprint* of the certificate added. The *thumbprint*

    for the certificate is the SHA1 hash of the DER encoding of the

    certificate.'
  signature: 'remove_policy_management_certificate(*args: str, **kwargs: Any) -> Tuple[AttestationPolicyCertificateResult,
    AttestationToken]'
  parameters:
  - name: certificate_to_remove
    description: 'Required. PEM encoded X.509 certificate to remove from

      the list of attestation policy management certificates.'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: signing_key
    description: 'PEM encoded signing Key representing the key

      associated with one of the *existing* attestation signing certificates.'
    types:
    - <xref:str>
  - name: signing_certificate
    description: 'PEM encoded signing certificate which is one of

      the *existing* attestation signing certificates.'
    types:
    - <xref:str>
  - name: validate_token
    description: If True, validate the token, otherwise return the token unvalidated.
    types:
    - <xref:bool>
  - name: validation_callback
    description: 'Function callback to allow clients to perform custom validation
      of the token.

      if the token is invalid, the *validation_callback* function should throw

      an exception.'
    types:
    - <xref:typing.Callable>[[<xref:azure.security.attestation.AttestationToken>,
      <xref:azure.security.attestation.AttestationSigner>], <xref:None>]
  - name: validate_signature
    description: If True, validate the signature of the token being validated.
    types:
    - <xref:bool>
  - name: validate_expiration
    description: If True, validate the expiration time of the token being validated.
    types:
    - <xref:bool>
  - name: issuer
    description: Expected issuer, used if *validate_issuer* is true.
    types:
    - <xref:str>
  - name: validation_slack
    description: 'Slack time for validation - tolerance applied

      to help account for clock drift between the issuer and the current machine.'
    types:
    - <xref:float>
  - name: validate_issuer
    description: If True, validate that the issuer of the token matches the expected
      issuer.
    types:
    - <xref:bool>
  - name: validate_not_before_time
    description: If true, validate the "Not Before" time in the token.
    types:
    - <xref:bool>
  return:
    description: Result describing the outcome of the certificate removal.
    types:
    - <xref:typing.Tuple>[<xref:azure.security.attestation.AttestationPolicyCertificateResult>,
      <xref:azure.security.attestation.AttestationToken>]
  examples:
  - "Removing a policy management certificate.<!--[!code-python[Main](les\\sample_get_set_policy.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    220\\\\azure-security-attestation-1.0.0\\\\samples\\\\sample_get_set_policy.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   with AttestationAdministrationClient(\n       endpoint, DefaultAzureCredential()\n\
    \   ) as admin_client:\n       # Now remove the certificate we just added.\n \
    \      print(\"Remove the newly added certificate.\")\n       remove_result, _\
    \ = admin_client.remove_policy_management_certificate(\n           new_certificate,\n\
    \           signing_key=self.isolated_key,\n           signing_certificate=self.isolated_certificate,\n\
    \       )\n\n       if (\n           remove_result.certificate_resolution\n  \
    \         != CertificateModification.IS_ABSENT\n       ):\n           raise Exception(\"\
    Certificate was not removed!\")\n\n   ````\n"
- uid: azure.security.attestation.AttestationAdministrationClient.reset_policy
  name: reset_policy
  summary: "Resets the attestation policy for the specified attestation type to the\
    \ default value.\n\n> [!NOTE]\n> If the attestation instance is in Isolated mode,\
    \ then the\n>\n> signing_key parameter MUST be a signing key containing one of\
    \ the\n>\n> certificates returned by <xref:azure.security.attestation.AttestationAdministrationClient.get_policy_management_certificates>.\n\
    >\n> \n>\n> If the attestation instance is in AAD mode, then the signing_key\n\
    >\n> parameter does not need to be provided.\n>"
  signature: 'reset_policy(attestation_type: str | AttestationType, **kwargs: Dict[str,
    Any]) -> Tuple[AttestationPolicyResult, AttestationToken]'
  parameters:
  - name: attestation_type
    description: '<xref:azure.security.attestation.AttestationType> for

      which to set the policy.'
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:azure.security.attestation.AttestationType>]
  keywordOnlyParameters:
  - name: signing_key
    description: 'PEM encoded signing key to be used to sign the policy

      before sending it to the service.'
    types:
    - <xref:str>
  - name: signing_certificate
    description: 'PEM encoded X.509 certificate to be sent to the

      service along with the policy.'
    types:
    - <xref:str>
  - name: validate_token
    description: If True, validate the token, otherwise return the token unvalidated.
    types:
    - <xref:bool>
  - name: validation_callback
    description: 'Function callback to allow clients to perform custom validation
      of the token.

      if the token is invalid, the *validation_callback* function should throw

      an exception.'
    types:
    - <xref:typing.Callable>[[<xref:azure.security.attestation.AttestationToken>,
      <xref:azure.security.attestation.AttestationSigner>], <xref:None>]
  - name: validate_signature
    description: If True, validate the signature of the token being validated.
    types:
    - <xref:bool>
  - name: validate_expiration
    description: If True, validate the expiration time of the token being validated.
    types:
    - <xref:bool>
  - name: issuer
    description: Expected issuer, used if *validate_issuer* is true.
    types:
    - <xref:str>
  - name: validation_slack
    description: 'Slack time for validation - tolerance applied

      to help account for clock drift between the issuer and the current machine.'
    types:
    - <xref:float>
  - name: validate_issuer
    description: If True, validate that the issuer of the token matches the expected
      issuer.
    types:
    - <xref:bool>
  - name: validate_not_before_time
    description: If true, validate the "Not Before" time in the token.
    types:
    - <xref:bool>
  return:
    description: 'A policy set result reflecting the outcome of the policy removal
      and

      the token which contained the result.'
    types:
    - <xref:typing.Tuple>[<xref:azure.security.attestation.AttestationPolicyResult>,
      <xref:azure.security.attestation.AttestationToken>]
  exceptions:
  - type: azure.security.attestation.AttestationTokenValidationException
    description: 'Raised

      when an attestation token is invalid.'
  examples:
  - "Resetting an AAD mode attestation instance.<!--[!code-python[Main](les\\sample_get_set_policy.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    220\\\\azure-security-attestation-1.0.0\\\\samples\\\\sample_get_set_policy.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   print(\"Set Secured Policy on an Isolated mode attestation instance.\")\n\
    \   # < Load the PEM encoded isolated signing certificate and  key >\n   with\
    \ AttestationAdministrationClient(\n       os.environ.get(\"ATTESTATION_ISOLATED_URL\"\
    ), DefaultAzureCredential()\n   ) as admin_client:\n       set_result, _ = admin_client.reset_policy(\n\
    \           AttestationType.SGX_ENCLAVE,\n           signing_key=isolated_key,\n\
    \           signing_certificate=isolated_certificate,\n       )\n       print(\"\
    Policy Set Resolution: \", set_result.policy_resolution)\n\n   ````\n"
- uid: azure.security.attestation.AttestationAdministrationClient.set_policy
  name: set_policy
  summary: "Sets the attestation policy for the specified attestation type.\n\n> [!NOTE]\n\
    > If the attestation instance is in Isolated mode, then the\n>\n> signing_key\
    \ parameter MUST be a signing key containing one of the\n>\n> certificates returned\
    \ by <xref:azure.security.attestation.AttestationAdministrationClient.get_policy_management_certificates>.\n\
    >\n> \n>\n> If the attestation instance is in AAD mode, then the signing_key\n\
    >\n> parameter does not need to be provided.\n>"
  signature: 'set_policy(attestation_type: str | AttestationType, attestation_policy:
    str, **kwargs: Any) -> Tuple[AttestationPolicyResult, AttestationToken]'
  parameters:
  - name: attestation_type
    description: '<xref:azure.security.attestation.AttestationType> for

      which to set the policy.'
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:azure.security.attestation.AttestationType>]
  - name: attestation_policy
    description: Attestation policy to be set.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: signing_key
    description: 'PEM encoded signing key to be used to sign the policy

      before sending it to the service.'
    types:
    - <xref:str>
  - name: signing_certificate
    description: 'PEM encoded X.509 certificate to be sent to the

      service along with the policy.'
    types:
    - <xref:str>
  - name: validate_token
    description: If True, validate the token, otherwise return the token unvalidated.
    types:
    - <xref:bool>
  - name: validation_callback
    description: 'Function callback to allow clients to perform custom validation
      of the token.

      if the token is invalid, the *validation_callback* function should throw

      an exception.'
    types:
    - <xref:typing.Callable>[[<xref:azure.security.attestation.AttestationToken>,
      <xref:azure.security.attestation.AttestationSigner>], <xref:None>]
  - name: validate_signature
    description: If True, validate the signature of the token being validated.
    types:
    - <xref:bool>
  - name: validate_expiration
    description: If True, validate the expiration time of the token being validated.
    types:
    - <xref:bool>
  - name: issuer
    description: Expected issuer, used if *validate_issuer* is true.
    types:
    - <xref:str>
  - name: validation_slack
    description: 'Slack time for validation - tolerance applied

      to help account for clock drift between the issuer and the current machine.'
    types:
    - <xref:float>
  - name: validate_issuer
    description: If True, validate that the issuer of the token matches the expected
      issuer.
    types:
    - <xref:bool>
  - name: validate_not_before_time
    description: If true, validate the "Not Before" time in the token.
    types:
    - <xref:bool>
  return:
    description: Result of set policy operation.
    types:
    - <xref:typing.Tuple>[<xref:azure.security.attestation.AttestationPolicyResult>,
      <xref:azure.security.attestation.AttestationToken>]
  exceptions:
  - type: azure.security.attestation.AttestationTokenValidationException
    description: 'Raised

      when an attestation token is invalid.'
  examples:
  - "Setting the attestation policy with hash verification.<!--[!code-python[Main](les\\\
    sample_get_set_policy.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\220\\\\azure-security-attestation-1.0.0\\\\samples\\\
    \\sample_get_set_policy.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n           from cryptography.hazmat.primitives import\
    \ hashes\n\n           write_banner(\"set_policy_aad_secured\")\n           print(\"\
    Set Secured Policy on an AAD mode attestation instance.\")\n           with AttestationAdministrationClient(\n\
    \               os.environ.get(\"ATTESTATION_AAD_URL\"), DefaultAzureCredential()\n\
    \           ) as admin_client:\n               # Create an RSA Key and wrap an\
    \ X.509 certificate around\n               # the public key for that certificate.\n\
    \               rsa_key = create_rsa_key()\n               cert = create_x509_certificate(rsa_key,\
    \ u\"TestCertificate\")\n\n               # Set a minimal policy.\n          \
    \     policy_to_set = \"\"\"\n   version= 1.0;\n   authorizationrules{=> permit();};\n\
    \   issuancerules {};\n   \"\"\"\n               set_result, _ = admin_client.set_policy(\n\
    \                   AttestationType.SGX_ENCLAVE,\n                   policy_to_set,\n\
    \                   signing_key=rsa_key,\n                   signing_certificate=cert,\n\
    \               )\n               print(\"Policy Set Resolution: \", set_result.policy_resolution)\n\
    \               print(\"Resulting policy signer should match the input certificate:\"\
    )\n               print(\"Policy Signer: \", set_result.policy_signer.certificates[0])\n\
    \               print(\"Certificate:   \", cert)\n\n               # Create an\
    \ Attestation Token object representing the\n               # attestation policy.\n\
    \               expected_policy = AttestationPolicyToken(\n                  \
    \ policy_to_set, signing_key=rsa_key, signing_certificate=cert\n             \
    \  )\n\n               # Generate the Sha256 hash of the attestation token.\n\
    \               hasher = hashes.Hash(hashes.SHA256(), backend=default_backend())\n\
    \               hasher.update(expected_policy.to_jwt_string().encode(\"utf-8\"\
    ))\n               expected_hash = hasher.finalize()\n\n               print(\"\
    Expected hash should match returned hash.\")\n               print(\"Expected\
    \ hash: \", expected_hash)\n               print(\"Returned hash: \", set_result.policy_token_hash)\n\
    \n\n   ````\n"
