### YamlMime:PythonClass
uid: azure.security.attestation.aio.AttestationClient
name: AttestationClient
fullName: azure.security.attestation.aio.AttestationClient
module: azure.security.attestation.aio
inheritances:
- builtins.object
summary: 'Provides access to the Attestation family of APIs for trusted environment
  attestation.


  > [!TIP]

  > The validate_token, validation_callback, validate_signature,

  >

  > validate_expiration, validate_not_before_time, validate_issuer, and

  >

  > issuer keyword arguments are default values applied to each API call within

  >

  > the <xref:azure.security.attestation.aio.AttestationClient> class. These values
  can be

  >

  > overridden on individual API calls as needed.

  >


  For additional client creation configuration options, please see [Python Request

  Options](https://aka.ms/azsdk/python/options).'
constructor:
  syntax: 'AttestationClient(endpoint: str, credential: AsyncTokenCredential, **kwargs:
    Any)'
  parameters:
  - name: credential
    description: Credentials for the caller used to interact with the service.
    isRequired: true
    types:
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
  - name: endpoint
    description: The attestation instance base URI, for example [https://mytenant.attest.azure.net](https://mytenant.attest.azure.net).
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: validate_token
    description: If True, validate the token, otherwise return the token unvalidated.
    types:
    - <xref:bool>
  - name: validation_callback
    description: 'Function callback to allow clients to perform custom validation
      of the token.

      if the token is invalid, the *validation_callback* function should throw

      an exception.'
    types:
    - <xref:typing.Callable>[[<xref:azure.security.attestation.AttestationToken>,
      <xref:azure.security.attestation.AttestationSigner>], <xref:None>]
  - name: validate_signature
    description: If True, validate the signature of the token being validated.
    types:
    - <xref:bool>
  - name: validate_expiration
    description: If True, validate the expiration time of the token being validated.
    types:
    - <xref:bool>
  - name: issuer
    description: Expected issuer, used if *validate_issuer* is true.
    types:
    - <xref:str>
  - name: validation_slack
    description: 'Slack time for validation - tolerance applied

      to help account for clock drift between the issuer and the current machine.'
    types:
    - <xref:float>
  - name: validate_issuer
    description: If True, validate that the issuer of the token matches the expected
      issuer.
    types:
    - <xref:bool>
  - name: validate_not_before_time
    description: If true, validate the "Not Before" time in the token.
    types:
    - <xref:bool>
methods:
- uid: azure.security.attestation.aio.AttestationClient.attest_open_enclave
  name: attest_open_enclave
  summary: 'Attests the validity of an Open Enclave report.


    > [!NOTE]

    > Note that if the draft_policy parameter is provided, the resulting

    >

    > attestation token will be an unsecured attestation token.

    >


    For additional request configuration options, please see [Python Request

    Options](https://aka.ms/azsdk/python/options).'
  signature: 'async attest_open_enclave(report: bytes, *, inittime_json: bytes = None,
    inittime_data: bytes = None, runtime_json: bytes = None, runtime_data: bytes =
    None, **kwargs: Any) -> Tuple[AttestationResult, AttestationToken]'
  parameters:
  - name: report
    description: An open_enclave report generated from an Intel(tm) SGX enclave
    isRequired: true
    types:
    - <xref:bytes>
  - name: runtime_json
    description: 'Data presented at the time that the open_enclave

      report was created. JSON Encoded.'
    isRequired: true
    types:
    - <xref:bytes>
  keywordOnlyParameters:
  - name: inittime_data
    description: 'Data presented at the time that the SGX

      enclave was initialized.'
    types:
    - <xref:bytes>
  - name: inittime_json
    description: 'Data presented at the time that the SGX

      enclave was initialized, JSON encoded.'
    types:
    - <xref:bytes>
  - name: runtime_data
    description: 'Data presented at the time that the open_enclave

      report was created.'
    types:
    - <xref:bytes>
  - name: draft_policy
    description: '"draft" or "experimental" policy to be used with

      this attestation request. If this parameter is provided, then this

      policy document will be used for the attestation request.

      This allows a caller to test various policy documents against actual data

      before applying the policy document via the set_policy API.'
    types:
    - <xref:str>
  - name: validate_token
    description: If True, validate the token, otherwise return the token unvalidated.
    types:
    - <xref:bool>
  - name: validation_callback
    description: 'Function callback to allow clients to perform custom validation
      of the token.

      if the token is invalid, the *validation_callback* function should throw

      an exception.'
    types:
    - <xref:typing.Callable>[[<xref:azure.security.attestation.AttestationToken>,
      <xref:azure.security.attestation.AttestationSigner>], <xref:None>]
  - name: validate_signature
    description: If True, validate the signature of the token being validated.
    types:
    - <xref:bool>
  - name: validate_expiration
    description: If True, validate the expiration time of the token being validated.
    types:
    - <xref:bool>
  - name: issuer
    description: Expected issuer, used if *validate_issuer* is true.
    types:
    - <xref:str>
  - name: validation_slack
    description: 'Slack time for validation - tolerance applied

      to help account for clock drift between the issuer and the current machine.'
    types:
    - <xref:float>
  - name: validate_issuer
    description: If True, validate that the issuer of the token matches the expected
      issuer.
    types:
    - <xref:bool>
  - name: validate_not_before_time
    description: If true, validate the "Not Before" time in the token.
    types:
    - <xref:bool>
  return:
    description: <xref:azure.security.attestation.aio.AttestationResult> containing
      the claims in the returned attestation token.
    types:
    - <xref:typing.Tuple>[<xref:azure.security.attestation.AttestationResult>, <xref:azure.security.attestation.AttestationToken>]
  examples:
  - "Attesting using a draft attestation policy.<!--[!code-python[Main](les\\sample_attest_enclave_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    220\\\\azure-security-attestation-1.0.0\\\\samples\\\\sample_attest_enclave_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   draft_policy = \"\"\"\n   version= 1.0;\n   authorizationrules\n   {\n  \
    \     [ type==\"x-ms-sgx-is-debuggable\", value==false ] &&\n       [ type==\"\
    x-ms-sgx-product-id\", value==1 ] &&\n       [ type==\"x-ms-sgx-svn\", value>=\
    \ 0 ] &&\n       [ type==\"x-ms-sgx-mrsigner\", value==\"2c1a44952ae8207135c6c29b75b8c029372ee94b677e15c20bd42340f10d41aa\"\
    ]\n           => permit();\n   };\n   issuancerules {\n       c:[type==\"x-ms-sgx-mrsigner\"\
    ] => issue(type=\"My-MrSigner\", value=c.value);\n   };\n   \"\"\"\n   print(\"\
    Attest Open enclave using \", self.shared_url)\n   print(\"Using draft policy:\"\
    , draft_policy)\n   async with DefaultAzureCredential() as credential, AttestationClient(\n\
    \       self.shared_url, credential\n   ) as attest_client:\n       response,\
    \ token = await attest_client.attest_open_enclave(\n           oe_report, runtime_data=runtime_data,\
    \ draft_policy=draft_policy\n       )\n\n       print(\"Token algorithm\", token.algorithm)\n\
    \       print(\"Issuer of token is: \", response.issuer)\n\n   ````\n"
- uid: azure.security.attestation.aio.AttestationClient.attest_sgx_enclave
  name: attest_sgx_enclave
  summary: 'Attests the validity of an SGX quote.


    > [!NOTE]

    > Note that if the draft_policy parameter is provided, the resulting

    >

    > attestation token will be an unsecured attestation token.

    >


    For additional request configuration options, please see [Python Request

    Options](https://aka.ms/azsdk/python/options).'
  signature: 'async attest_sgx_enclave(quote: bytes, *, inittime_json: bytes = None,
    inittime_data: bytes = None, runtime_json: bytes = None, runtime_data: bytes =
    None, **kwargs: Any) -> Tuple[AttestationResult, AttestationToken]'
  parameters:
  - name: quote
    description: An SGX quote generated from an Intel(tm) SGX enclave
    isRequired: true
    types:
    - <xref:bytes>
  keywordOnlyParameters:
  - name: inittime_data
    description: 'Data presented at the time that the SGX

      enclave was initialized.'
    types:
    - <xref:bytes>
  - name: inittime_json
    description: 'Data presented at the time that the SGX

      enclave was initialized, JSON encoded.'
    types:
    - <xref:bytes>
  - name: runtime_data
    description: 'Data presented at the time that the open_enclave

      report was created.'
    types:
    - <xref:bytes>
  - name: runtime_json
    description: 'Data presented at the time that the open_enclave

      report was created. JSON Encoded.'
    types:
    - <xref:bytes>
  - name: draft_policy
    description: '"draft" or "experimental" policy to be used with

      this attestation request. If this parameter is provided, then this

      policy document will be used for the attestation request.

      This allows a caller to test various policy documents against actual data

      before applying the policy document via the set_policy API'
    types:
    - <xref:str>
  - name: validate_token
    description: If True, validate the token, otherwise return the token unvalidated.
    types:
    - <xref:bool>
  - name: validation_callback
    description: 'Function callback to allow clients to perform custom validation
      of the token.

      if the token is invalid, the *validation_callback* function should throw

      an exception.'
    types:
    - <xref:typing.Callable>[[<xref:azure.security.attestation.AttestationToken>,
      <xref:azure.security.attestation.AttestationSigner>], <xref:None>]
  - name: validate_signature
    description: If True, validate the signature of the token being validated.
    types:
    - <xref:bool>
  - name: validate_expiration
    description: If True, validate the expiration time of the token being validated.
    types:
    - <xref:bool>
  - name: issuer
    description: Expected issuer, used if *validate_issuer* is true.
    types:
    - <xref:str>
  - name: validation_slack
    description: 'Slack time for validation - tolerance applied

      to help account for clock drift between the issuer and the current machine.'
    types:
    - <xref:float>
  - name: validate_issuer
    description: If True, validate that the issuer of the token matches the expected
      issuer.
    types:
    - <xref:bool>
  - name: validate_not_before_time
    description: If true, validate the "Not Before" time in the token.
    types:
    - <xref:bool>
  return:
    description: <xref:azure.security.attestation.aio.AttestationResult> containing
      the claims in the returned attestation token.
    types:
    - <xref:typing.Tuple>[<xref:azure.security.attestation.AttestationResult>, <xref:azure.security.attestation.AttestationToken>]
  examples:
  - "Attesting an SGX Enclave<!--[!code-python[Main](les\\sample_attest_enclave_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    220\\\\azure-security-attestation-1.0.0\\\\samples\\\\sample_attest_enclave_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   print(\"\\nAttest SGX enclave using {}\".format(self.shared_url))\n   async\
    \ with DefaultAzureCredential() as credential, AttestationClient(\n       self.shared_url,\
    \ credential\n   ) as attest_client:\n       response, _ = await attest_client.attest_sgx_enclave(\n\
    \           quote, runtime_data=runtime_data\n       )\n\n   print(\"Issuer of\
    \ token is: \", response.issuer)\n\n   ````\n"
- uid: azure.security.attestation.aio.AttestationClient.attest_tpm
  name: attest_tpm
  summary: 'Attest a TPM based enclave.


    See the [TPM Attestation Protocol Reference](https://docs.microsoft.com/en-us/azure/attestation/virtualization-based-security-protocol)

    for more information.'
  signature: 'async attest_tpm(content: str, **kwargs: Any) -> str'
  parameters:
  - name: content
    description: Data to send to the TPM attestation service.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A structure containing the response from the TPM attestation.
    types:
    - <xref:str>
- uid: azure.security.attestation.aio.AttestationClient.close
  name: close
  signature: async close() -> None
- uid: azure.security.attestation.aio.AttestationClient.get_open_id_metadata
  name: get_open_id_metadata
  summary: "Retrieves the OpenID metadata configuration document for this attestation\
    \ instance.\n\nThe metadata configuration document is defined in the [OpenID Connect\n\
    Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse)\n\
    specification.\n\nThe attestation service currently returns the following fields:\n\
    \n* issuer \n\n* jwks_uri \n\n* claims_supported"
  signature: 'async get_open_id_metadata(**kwargs: Any) -> Dict[str, Any]'
  return:
    description: OpenID metadata configuration
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]
- uid: azure.security.attestation.aio.AttestationClient.get_signing_certificates
  name: get_signing_certificates
  summary: 'Returns the set of signing certificates used to sign attestation tokens.


    For additional request configuration options, please see [Python Request

    Options](https://aka.ms/azsdk/python/options).'
  signature: 'async get_signing_certificates(**kwargs: Any) -> List[AttestationSigner]'
  return:
    description: A list of <xref:azure.security.attestation.AttestationSigner> objects.
    types:
    - <xref:list>[<xref:azure.security.attestation.AttestationSigner>]
