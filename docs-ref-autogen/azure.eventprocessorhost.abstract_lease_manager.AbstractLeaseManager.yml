### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.acquire_lease_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_if_not_exists_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_store_if_not_exists_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_store_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_all_leases
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_lease_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.release_lease_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.renew_lease_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.update_lease_async
  class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  inheritance:
  - inheritance:
    - type: builtins.object
    type: abc.ABC
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: AbstractLeaseManager
  source:
    id: AbstractLeaseManager
    path: azure\eventprocessorhost\abstract_lease_manager.py
    remote:
      branch: develop
      path: azure\eventprocessorhost\abstract_lease_manager.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 11
  summary: 'If you wish to have EventProcessorHost store leases somewhere other than
    Azure Storage,

    you can write your own lease manager using this abstract class. The Azure Storage
    managers

    use the same storage for both lease and checkpoints, so both interfaces are implemented
    by

    the same class.You are free to do the same thing if you have  a unified store
    for both

    types of data.











    '
  syntax:
    content: AbstractLeaseManager(lease_renew_interval, lease_duration)
  type: class
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.acquire_lease_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: acquire_lease_async
  source:
    id: acquire_lease_async
    path: azure\eventprocessorhost\abstract_lease_manager.py
    remote:
      branch: develop
      path: azure\eventprocessorhost\abstract_lease_manager.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 80
  summary: 'Acquire the lease on the desired partition for this EventProcessorHost.

    Note that it is legal to acquire a lease that is already owned by another host.

    Lease-stealing is how partitions are redistributed when additional hosts are started.

    :param lease: The lease to be acquired.

    :type lease: ~azure.eventprocessorhost.Lease

    :returns: *True* if the lease was acquired successfully, *False* if not.

    '
  syntax:
    content: acquire_lease_async(lease)
    parameters:
    - id: lease
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.acquire_lease_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_if_not_exists_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: create_lease_if_not_exists_async
  source:
    id: create_lease_if_not_exists_async
    path: azure\eventprocessorhost\abstract_lease_manager.py
    remote:
      branch: develop
      path: azure\eventprocessorhost\abstract_lease_manager.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 59
  summary: 'Create in the store the lease info for the given partition, if it does
    not exist.

    Do nothing if it does exist in the store already.

    :param partition_id: The ID of a given partition.

    :type parition_id: str

    :returns: The existing or newly-created lease info for the partition.

    '
  syntax:
    content: create_lease_if_not_exists_async(partition_id)
    parameters:
    - id: partition_id
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_if_not_exists_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_store_if_not_exists_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: create_lease_store_if_not_exists_async
  source:
    id: create_lease_store_if_not_exists_async
    path: azure\eventprocessorhost\abstract_lease_manager.py
    remote:
      branch: develop
      path: azure\eventprocessorhost\abstract_lease_manager.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 24
  summary: 'Create the lease store if it does not exist, do nothing if it does exist.

    :returns: *True* if the lease store already exists or was created successfully,
    *False* if not.

    '
  syntax:
    content: create_lease_store_if_not_exists_async()
    parameters: []
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_store_if_not_exists_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: delete_lease_async
  source:
    id: delete_lease_async
    path: azure\eventprocessorhost\abstract_lease_manager.py
    remote:
      branch: develop
      path: azure\eventprocessorhost\abstract_lease_manager.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 70
  summary: 'Delete the lease info for the given partition from the store.

    If there is no stored lease for the given partition, that is treated as success.

    :param lease: The lease to be deleted.

    :type lease: ~azure.eventprocessorhost.Lease

    '
  syntax:
    content: delete_lease_async(lease)
    parameters:
    - id: lease
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_store_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: delete_lease_store_async
  source:
    id: delete_lease_store_async
    path: azure\eventprocessorhost\abstract_lease_manager.py
    remote:
      branch: develop
      path: azure\eventprocessorhost\abstract_lease_manager.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 32
  summary: 'Not used by EventProcessorHost, but a convenient function to have for
    testing.

    :returns: *True* if the lease store was deleted successfully, *False* if not.

    '
  syntax:
    content: delete_lease_store_async()
    parameters: []
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_store_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_all_leases
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: get_all_leases
  source:
    id: get_all_leases
    path: azure\eventprocessorhost\abstract_lease_manager.py
    remote:
      branch: develop
      path: azure\eventprocessorhost\abstract_lease_manager.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 50
  summary: 'Return the lease info for all partitions.

    A typical implementation could just call get_lease_async() on all partitions.

    :returns: list of lease info.

    '
  syntax:
    content: get_all_leases()
    parameters: []
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_all_leases
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_lease_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: get_lease_async
  source:
    id: get_lease_async
    path: azure\eventprocessorhost\abstract_lease_manager.py
    remote:
      branch: develop
      path: azure\eventprocessorhost\abstract_lease_manager.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 40
  summary: 'Return the lease info for the specified partition.

    Can return null if no lease has been created in the store for the specified partition.

    :param partition_id: The ID of a given partition.

    :type parition_id: str

    :returns: lease info for the partition, or *None*.

    '
  syntax:
    content: get_lease_async(partition_id)
    parameters:
    - id: partition_id
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_lease_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.release_lease_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: release_lease_async
  source:
    id: release_lease_async
    path: azure\eventprocessorhost\abstract_lease_manager.py
    remote:
      branch: develop
      path: azure\eventprocessorhost\abstract_lease_manager.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 104
  summary: 'Give up a lease currently held by this host. If the lease has been stolen,
    or expired,

    releasing it is unnecessary, and will fail if attempted.

    :param lease: The lease to be released.

    :type lease: ~azure.eventprocessorhost.Lease

    :returns: *True* if the lease was released successfully, *False* if not.

    '
  syntax:
    content: release_lease_async(lease)
    parameters:
    - id: lease
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.release_lease_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.renew_lease_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: renew_lease_async
  source:
    id: renew_lease_async
    path: azure\eventprocessorhost\abstract_lease_manager.py
    remote:
      branch: develop
      path: azure\eventprocessorhost\abstract_lease_manager.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 92
  summary: 'Renew a lease currently held by this host.

    If the lease has been stolen, or expired, or released, it is not possible to renew
    it.

    You will have to call get_lease_async() and then acquire_lease_async() again.

    :param lease: The lease to be renewed.

    :type lease: ~azure.eventprocessorhost.Lease

    :returns: *True* if the lease was renewed successfully, *False* if not.

    '
  syntax:
    content: renew_lease_async(lease)
    parameters:
    - id: lease
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.renew_lease_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.update_lease_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: update_lease_async
  source:
    id: update_lease_async
    path: azure\eventprocessorhost\abstract_lease_manager.py
    remote:
      branch: develop
      path: azure\eventprocessorhost\abstract_lease_manager.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 115
  summary: 'Update the store with the information in the provided lease. It is necessary
    to currently

    hold a lease in order to update it. If the lease has been stolen, or expired,
    or released,

    it cannot be updated. Updating should renew the lease before performing the update
    to

    avoid lease expiration during the process.

    :param lease: The lease to be updated.

    :type lease: ~azure.eventprocessorhost.Lease

    :returns: *True* if the updated was performed successfully, *False* if not.

    '
  syntax:
    content: update_lease_async(lease)
    parameters:
    - id: lease
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.update_lease_async
references:
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.acquire_lease_async
  isExternal: false
  name: acquire_lease_async
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.acquire_lease_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_if_not_exists_async
  isExternal: false
  name: create_lease_if_not_exists_async
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_if_not_exists_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_store_if_not_exists_async
  isExternal: false
  name: create_lease_store_if_not_exists_async
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_store_if_not_exists_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_async
  isExternal: false
  name: delete_lease_async
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_store_async
  isExternal: false
  name: delete_lease_store_async
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_store_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_all_leases
  isExternal: false
  name: get_all_leases
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_all_leases
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_lease_async
  isExternal: false
  name: get_lease_async
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_lease_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.release_lease_async
  isExternal: false
  name: release_lease_async
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.release_lease_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.renew_lease_async
  isExternal: false
  name: renew_lease_async
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.renew_lease_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.update_lease_async
  isExternal: false
  name: update_lease_async
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.update_lease_async
