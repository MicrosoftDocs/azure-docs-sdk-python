### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.EventHubClient.add_epoch_receiver
  - azure.eventhub.EventHubClient.add_receiver
  - azure.eventhub.EventHubClient.add_sender
  - azure.eventhub.EventHubClient.from_connection_string
  - azure.eventhub.EventHubClient.get_eventhub_info
  - azure.eventhub.EventHubClient.run
  - azure.eventhub.EventHubClient.stop
  class: azure.eventhub.EventHubClient
  fullName: azure.eventhub.EventHubClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.eventhub
  name: EventHubClient
  source:
    id: EventHubClient
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 65
  summary: 'The EventHubClient class defines a high level interface for sending

    events to and receiving events from the Azure Event Hubs service.








    '
  syntax:
    content: EventHubClient(address, username=None, password=None, debug=False)
  type: class
  uid: azure.eventhub.EventHubClient
- class: azure.eventhub.EventHubClient
  fullName: azure.eventhub.EventHubClient.add_epoch_receiver
  langs:
  - python
  module: azure.eventhub
  name: add_epoch_receiver
  source:
    id: add_epoch_receiver
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 259
  summary: 'Add a receiver to the client with an epoch value. Only a single epoch
    receiver

    can connect to a partition at any given time - additional epoch receivers must
    have

    a higher epoch value or they will be rejected. If a 2nd epoch receiver has

    connected, the first will be closed.

    :param consumer_group: The name of the consumer group.

    :type consumer_group: str

    :param partition: The ID of the partition.

    :type partition: str

    :param epoch: The epoch value for the receiver.

    :type epoch: int

    :param prefetch: The message prefetch count of the receiver. Default is 300.

    :type prefetch: int

    :returns: ~azure.eventhub.Receiver

    '
  syntax:
    content: add_epoch_receiver(consumer_group, partition, epoch, prefetch=300)
    parameters:
    - id: consumer_group
    - id: partition
    - id: epoch
    - defaultValue: '300'
      id: prefetch
  type: method
  uid: azure.eventhub.EventHubClient.add_epoch_receiver
- class: azure.eventhub.EventHubClient
  fullName: azure.eventhub.EventHubClient.add_receiver
  langs:
  - python
  module: azure.eventhub
  name: add_receiver
  source:
    id: add_receiver
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 237
  summary: 'Add a receiver to the client for a particular consumer group and partition.

    :param consumer_group: The name of the consumer group.

    :type consumer_group: str

    :param partition: The ID of the partition.

    :type partition: str

    :param offset: The offset from which to start receiving.

    :type offset: ~azure.eventhub.Offset

    :param prefetch: The message prefetch count of the receiver. Default is 300.

    :type prefetch: int

    :returns: ~azure.eventhub.Receiver

    '
  syntax:
    content: add_receiver(consumer_group, partition, offset=None, prefetch=300)
    parameters:
    - id: consumer_group
    - id: partition
    - defaultValue: None
      id: offset
    - defaultValue: '300'
      id: prefetch
  type: method
  uid: azure.eventhub.EventHubClient.add_receiver
- class: azure.eventhub.EventHubClient
  fullName: azure.eventhub.EventHubClient.add_sender
  langs:
  - python
  module: azure.eventhub
  name: add_sender
  source:
    id: add_sender
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 281
  summary: "Add a sender to the client to send ~azure.eventhub.EventData object\n\
    to an EventHub.\n:param partition: Optionally specify a particular partition to\
    \ send to.\n\n\n   If omitted, the events will be distributed to available partitions\
    \ via\n   round-robin\n\n"
  syntax:
    content: add_sender(partition=None)
    parameters:
    - defaultValue: None
      id: partition
    return:
      description: '~azure.eventhub.Sender

        '
  type: method
  uid: azure.eventhub.EventHubClient.add_sender
- class: azure.eventhub.EventHubClient
  fullName: azure.eventhub.EventHubClient.from_connection_string
  langs:
  - python
  module: azure.eventhub
  name: from_connection_string
  source:
    id: from_connection_string
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 105
  summary: "Create an EventHubClient from a connection string.\n:param conn_str: The\
    \ connection string.\n:type conn_str: str\n:param eventhub: The name of the EventHub,\
    \ if the EntityName is\n\n\n   not included in the connection string.\n"
  syntax:
    content: from_connection_string(conn_str, eventhub=None, **kwargs)
    parameters:
    - id: cls
    - id: conn_str
    - defaultValue: None
      id: eventhub
  type: method
  uid: azure.eventhub.EventHubClient.from_connection_string
- class: azure.eventhub.EventHubClient
  fullName: azure.eventhub.EventHubClient.get_eventhub_info
  langs:
  - python
  module: azure.eventhub
  name: get_eventhub_info
  source:
    id: get_eventhub_info
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 199
  summary: "Get details on the specified EventHub.\nKeys in the details dictionary\
    \ include:\n\n\n   -'name'\n   -'type'\n   -'created_at'\n   -'partition_count'\n\
    \   -'partition_ids'\n\n"
  syntax:
    content: get_eventhub_info()
    parameters: []
    return:
      description: 'dict

        '
  type: method
  uid: azure.eventhub.EventHubClient.get_eventhub_info
- class: azure.eventhub.EventHubClient
  fullName: azure.eventhub.EventHubClient.run
  langs:
  - python
  module: azure.eventhub
  name: run
  source:
    id: run
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 177
  summary: 'Run the EventHubClient in blocking mode.

    Opens the connection and starts running all Sender/Receiver clients.

    '
  syntax:
    content: run()
    parameters: []
    return:
      description: '~azure.eventhub.EventHubClient

        '
  type: method
  uid: azure.eventhub.EventHubClient.run
- class: azure.eventhub.EventHubClient
  fullName: azure.eventhub.EventHubClient.stop
  langs:
  - python
  module: azure.eventhub
  name: stop
  source:
    id: stop
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 190
  summary: 'Stop the EventHubClient and all its Sender/Receiver clients.

    '
  syntax:
    content: stop()
    parameters: []
  type: method
  uid: azure.eventhub.EventHubClient.stop
references:
- fullName: azure.eventhub.EventHubClient.add_epoch_receiver
  isExternal: false
  name: add_epoch_receiver
  parent: azure.eventhub.EventHubClient
  uid: azure.eventhub.EventHubClient.add_epoch_receiver
- fullName: azure.eventhub.EventHubClient.add_receiver
  isExternal: false
  name: add_receiver
  parent: azure.eventhub.EventHubClient
  uid: azure.eventhub.EventHubClient.add_receiver
- fullName: azure.eventhub.EventHubClient.add_sender
  isExternal: false
  name: add_sender
  parent: azure.eventhub.EventHubClient
  uid: azure.eventhub.EventHubClient.add_sender
- fullName: azure.eventhub.EventHubClient.from_connection_string
  isExternal: false
  name: from_connection_string
  parent: azure.eventhub.EventHubClient
  uid: azure.eventhub.EventHubClient.from_connection_string
- fullName: azure.eventhub.EventHubClient.get_eventhub_info
  isExternal: false
  name: get_eventhub_info
  parent: azure.eventhub.EventHubClient
  uid: azure.eventhub.EventHubClient.get_eventhub_info
- fullName: azure.eventhub.EventHubClient.run
  isExternal: false
  name: run
  parent: azure.eventhub.EventHubClient
  uid: azure.eventhub.EventHubClient.run
- fullName: azure.eventhub.EventHubClient.stop
  isExternal: false
  name: stop
  parent: azure.eventhub.EventHubClient
  uid: azure.eventhub.EventHubClient.stop
