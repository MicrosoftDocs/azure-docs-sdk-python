### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.mgmt.batch.models.StartTask
  fullName: azure.mgmt.batch.models.StartTask
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msrest.serialization.Model
  langs:
  - python
  module: azure.mgmt.batch.models
  name: StartTask
  summary: 'A task which is run when a compute node joins a pool in the Azure Batch

    service, or when the compute node is rebooted or reimaged.


    In some cases the start task may be re-run even though the node was not

    rebooted. Due to this, start tasks should be idempotent and exit gracefully

    if the setup they''re performing has already been done. Special care should

    be taken to avoid start tasks which create breakaway process or

    install/launch services from the start task working directory, as this will

    block Batch from being able to re-run the start task.'
  syntax:
    content: 'StartTask(*, command_line: str = None, resource_files=None, environment_settings=None,
      user_identity=None, max_task_retry_count: int = None, wait_for_success: bool
      = None, container_settings=None, **kwargs) -> None'
    parameters:
    - description: 'The command line does not run under a shell, and

        therefore cannot take advantage of shell features such as environment

        variable expansion. If you want to take advantage of such features, you

        should invoke the shell in the command line, for example using "cmd /c

        MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any

        other properties of the startTask are specified.'
      id: command_line
      type:
      - str
    - description: ''
      id: resource_files
      type:
      - list[azure.mgmt.batch.models.ResourceFile]
    - description: ''
      id: environment_settings
      type:
      - list[azure.mgmt.batch.models.EnvironmentSetting]
    - description: 'The user identity under which the start task runs.

        If omitted, the task runs as a non-administrative user unique to the task.'
      id: user_identity
      type:
      - azure.mgmt.batch.models.UserIdentity
    - description: 'The maximum number of times the task may be

        retried. The Batch service retries a task if its exit code is nonzero.

        Note that this value specifically controls the number of retries. The

        Batch service will try the task once, and may then retry up to this limit.

        For example, if the maximum retry count is 3, Batch tries the task up to 4

        times (one initial try and 3 retries). If the maximum retry count is 0,

        the Batch service does not retry the task. If the maximum retry count is

        -1, the Batch service retries the task without limit.'
      id: max_task_retry_count
      type:
      - int
    - description: 'Whether the Batch service should wait for the

        start task to complete successfully (that is, to exit with exit code 0)

        before scheduling any tasks on the compute node. If true and the start

        task fails on a compute node, the Batch service retries the start task up

        to its maximum retry count (maxTaskRetryCount). If the task has still not

        completed successfully after all retries, then the Batch service marks the

        compute node unusable, and will not schedule tasks to it. This condition

        can be detected via the node state and scheduling error detail. If false,

        the Batch service will not wait for the start task to complete. In this

        case, other tasks can start executing on the compute node while the start

        task is still running; and even if the start task fails, new tasks will

        continue to be scheduled on the node. The default is true.'
      id: wait_for_success
      type:
      - bool
    - description: 'The settings for the container under which the

        start task runs. When this is specified, all directories recursively below

        the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the

        node) are mapped into the container, all task environment variables are

        mapped into the container, and the task command line is executed in the

        container.'
      id: container_settings
      type:
      - azure.mgmt.batch.models.TaskContainerSettings
  type: class
  uid: azure.mgmt.batch.models.StartTask
references:
- fullName: list[azure.mgmt.batch.models.ResourceFile]
  name: list[ResourceFile]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.mgmt.batch.models.ResourceFile
    name: ResourceFile
    uid: azure.mgmt.batch.models.ResourceFile
  - fullName: ']'
    name: ']'
  uid: list[azure.mgmt.batch.models.ResourceFile]
- fullName: list[azure.mgmt.batch.models.EnvironmentSetting]
  name: list[EnvironmentSetting]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.mgmt.batch.models.EnvironmentSetting
    name: EnvironmentSetting
    uid: azure.mgmt.batch.models.EnvironmentSetting
  - fullName: ']'
    name: ']'
  uid: list[azure.mgmt.batch.models.EnvironmentSetting]
