### YamlMime:PythonClass
uid: azure.monitor.query.aio.MetricsQueryClient
name: MetricsQueryClient
fullName: azure.monitor.query.aio.MetricsQueryClient
module: azure.monitor.query.aio
inheritances:
- builtins.object
constructor:
  syntax: 'MetricsQueryClient(credential: AsyncTokenCredential, **kwargs: Any)'
  parameters:
  - name: credential
    description: The credential to authenticate the client
    isRequired: true
    types:
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
  keywordOnlyParameters:
  - name: endpoint
    description: The endpoint to connect to. Defaults to '[https://management.azure.com](https://management.azure.com)'.
    types:
    - <xref:typing.Optional>[<xref:str>]
examples:
- "Creating the MetricsQueryClient for use with a sovereign cloud (i.e. non-public\
  \ cloud).<!--[!code-python[Main](les\\async_samples\\sample_authentication_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
  \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\216\\\\azure-monitor-query-1.3.0\\\
  \\samples\\\\async_samples\\\\sample_authentication_async.py\", \"xml:space\": \"\
  preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\": {\"\
  linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.identity\
  \ import AzureAuthorityHosts\n   from azure.identity.aio import DefaultAzureCredential\n\
  \   from azure.monitor.query.aio import MetricsQueryClient\n\n   credential = DefaultAzureCredential(authority=AzureAuthorityHosts.AZURE_GOVERNMENT)\n\
  \   client = MetricsQueryClient(credential, endpoint=\"https://management.usgovcloudapi.net\"\
  )\n\n   ````\n"
methods:
- uid: azure.monitor.query.aio.MetricsQueryClient.close
  name: close
  summary: Close the <xref:azure.monitor.query.aio.MetricsQueryClient> session.
  signature: async close() -> None
- uid: azure.monitor.query.aio.MetricsQueryClient.list_metric_definitions
  name: list_metric_definitions
  summary: Lists the metric definitions for the resource.
  signature: 'list_metric_definitions(resource_uri: str, *, namespace: str | None
    = None, **kwargs: Any) -> AsyncItemPaged[MetricDefinition]'
  parameters:
  - name: resource_uri
    description: The identifier of the resource.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: namespace
    description: Metric namespace to query metric definitions for.
    types:
    - <xref:typing.Optional>[<xref:str>]
  return:
    description: An iterator like instance of either MetricDefinition or the result
      of cls(response)
    types:
    - <xref:azure.core.paging.AsyncItemPaged>[<xref:azure.monitor.query.MetricDefinition>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get a response for a single metric definitions query.<!--[!code-python[Main](les\\\
    async_samples\\sample_metric_definitions_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\216\\\\azure-monitor-query-1.3.0\\\
    \\samples\\\\async_samples\\\\sample_metric_definitions_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   import os\n\
    \n   from azure.core.exceptions import HttpResponseError\n   from azure.identity.aio\
    \ import DefaultAzureCredential\n   from azure.monitor.query.aio import MetricsQueryClient\n\
    \n\n   async def list_definitions():\n       credential = DefaultAzureCredential()\n\
    \       client = MetricsQueryClient(credential)\n\n       metrics_uri = os.environ[\"\
    METRICS_RESOURCE_URI\"]\n       async with client:\n           try:\n        \
    \       response = client.list_metric_definitions(metrics_uri)\n             \
    \  async for item in response:\n                   print(item.name)\n        \
    \           for availability in item.metric_availabilities:\n                \
    \       print(availability.granularity)\n           except HttpResponseError as\
    \ err:\n               print(\"something fatal happened\")\n               print(err)\n\
    \       await credential.close()\n\n\n   ````\n"
- uid: azure.monitor.query.aio.MetricsQueryClient.list_metric_namespaces
  name: list_metric_namespaces
  summary: Lists the metric namespaces for the resource.
  signature: 'list_metric_namespaces(resource_uri: str, *, start_time: datetime |
    None = None, **kwargs: Any) -> AsyncItemPaged[MetricNamespace]'
  parameters:
  - name: resource_uri
    description: The identifier of the resource.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: start_time
    description: 'The start time from which to query for metric

      namespaces. This should be provided as a datetime object.'
    types:
    - <xref:typing.Optional>[<xref:datetime.datetime>]
  return:
    description: An iterator like instance of either MetricNamespace or the result
      of cls(response)
    types:
    - <xref:azure.core.paging.AsyncItemPaged>[<xref:azure.monitor.query.MetricNamespace>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get a response for a single metric namespaces query.<!--[!code-python[Main](les\\\
    async_samples\\sample_metric_namespaces_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\\
    Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\216\\\\azure-monitor-query-1.3.0\\\
    \\samples\\\\async_samples\\\\sample_metric_namespaces_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   import os\n\
    \n   from azure.core.exceptions import HttpResponseError\n   from azure.identity.aio\
    \ import DefaultAzureCredential\n   from azure.monitor.query.aio import MetricsQueryClient\n\
    \n\n   async def list_namespaces():\n       credential = DefaultAzureCredential()\n\
    \       client = MetricsQueryClient(credential)\n\n       metrics_uri = os.environ[\"\
    METRICS_RESOURCE_URI\"]\n       async with client:\n           try:\n        \
    \       response = client.list_metric_namespaces(metrics_uri)\n              \
    \ async for item in response:\n                   print(item.fully_qualified_namespace)\n\
    \                   print(item.type)\n           except HttpResponseError as err:\n\
    \               print(\"something fatal happened\")\n               print(err)\n\
    \       await credential.close()\n\n\n   ````\n"
- uid: azure.monitor.query.aio.MetricsQueryClient.query_resource
  name: query_resource
  summary: 'Lists the metric values for a resource.


    **Note**: Although the start_time, end_time, duration are optional parameters,
    it is highly

    recommended to specify the timespan. If not, the entire dataset is queried.'
  signature: 'async query_resource(resource_uri: str, metric_names: Sequence[str],
    *, timespan: timedelta | Tuple[datetime, timedelta] | Tuple[datetime, datetime]
    | None = None, granularity: timedelta | None = None, aggregations: Sequence[str]
    | None = None, max_results: int | None = None, order_by: str | None = None, filter:
    str | None = None, metric_namespace: str | None = None, **kwargs: Any) -> MetricsQueryResult'
  parameters:
  - name: resource_uri
    description: The identifier of the resource.
    isRequired: true
    types:
    - <xref:str>
  - name: metric_names
    description: The names of the metrics to retrieve.
    isRequired: true
    types:
    - <xref:list>
  keywordOnlyParameters:
  - name: timespan
    description: 'The timespan for which to query the data. This can be a timedelta,

      a timedelta and a start datetime, or a start datetime/end datetime.'
    types:
    - <xref:typing.Optional>[<xref:typing.Union>[<xref:datetime.timedelta>, <xref:tuple>[<xref:datetime.datetime>,
      <xref:datetime.timedelta>], <xref:tuple>[<xref:datetime.datetime>, <xref:datetime.datetime>]]]
  - name: granularity
    description: The interval (i.e. timegrain) of the query.
    types:
    - <xref:typing.Optional>[<xref:datetime.timedelta>]
  - name: aggregations
    description: 'The list of aggregation types to retrieve.

      Use *azure.monitor.query.MetricAggregationType* enum to get each aggregation
      type.'
    types:
    - <xref:typing.Optional>[<xref:list>[<xref:str>]]
  - name: max_results
    description: 'The maximum number of records to retrieve.

      Valid only if ''filter'' is specified.

      Defaults to 10.'
    types:
    - <xref:typing.Optional>[<xref:int>]
  - name: order_by
    description: 'The aggregation to use for sorting results and the direction of
      the sort.

      Only one order can be specified.

      Examples: sum asc.'
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: filter
    description: "The **filter** is used to reduce the set of metric data returned.\
      \ Default value is None.\n\nExample: Metric contains metadata A, B and C.\n\n\
      * Return all time series of C where A = a1 and B = b1 or b2: \n\n  **filter=\"\
      A eq 'a1' and B eq 'b1' or B eq 'b2' and C eq '*'\"**\n\n* Invalid variant:\
      \ \n\n  **filter=\"A eq 'a1' and B eq 'b1' and C eq '*' or B = 'b2'\"**. This\
      \ is invalid because the\n  logical 'or' operator cannot separate two different\
      \ metadata names.\n\n* Return all time series where A = a1, B = b1 and C = c1:\
      \ \n\n  **filter=\"A eq 'a1' and B eq 'b1' and C eq 'c1'\"**\n\n* Return all\
      \ time series where A = a1: \n\n  **filter=\"A eq 'a1' and B eq '*' and C eq\
      \ '*'\"**\n\n* Special case: When dimension name or dimension value uses round\
      \ brackets. Example: When dimension name is **dim (test) 1**, instead of using\
      \ **filter=\"dim (test) 1 eq '*'\"** use **filter=\"dim %2528test%2529 1 eq\
      \ '*'\"**. \n\n  When dimension name is **dim (test) 3** and dimension value\
      \ is\n  **dim3 (test) val**, instead of using **filter=\"dim (test) 3 eq 'dim3\
      \ (test) val'\"**, use **filter=\"dim\n  %2528test%2529 3 eq 'dim3 %2528test%2529\
      \ val'\"**."
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: metric_namespace
    description: Metric namespace to query metric definitions for.
    types:
    - <xref:typing.Optional>[<xref:str>]
  return:
    description: A MetricsQueryResult object.
    types:
    - <xref:azure.monitor.query.MetricsQueryResult>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get a response for a single metrics query.<!--[!code-python[Main](les\\async_samples\\\
    sample_metrics_query_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\216\\\\azure-monitor-query-1.3.0\\\\samples\\\\async_samples\\\
    \\sample_metrics_query_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from datetime import timedelta\n   import os\n\
    \n   from azure.core.exceptions import HttpResponseError\n   from azure.identity.aio\
    \ import DefaultAzureCredential\n   from azure.monitor.query.aio import MetricsQueryClient\n\
    \   from azure.monitor.query import MetricAggregationType\n\n\n   async def query_metrics():\n\
    \       credential = DefaultAzureCredential()\n       client = MetricsQueryClient(credential)\n\
    \n       metrics_uri = os.environ[\"METRICS_RESOURCE_URI\"]\n       async with\
    \ client:\n           try:\n               response = await client.query_resource(\n\
    \                   metrics_uri,\n                   metric_names=[\"Ingress\"\
    ],\n                   timespan=timedelta(hours=2),\n                   granularity=timedelta(minutes=15),\n\
    \                   aggregations=[MetricAggregationType.AVERAGE],\n          \
    \     )\n\n               for metric in response.metrics:\n                  \
    \ print(metric.name)\n                   for time_series_element in metric.timeseries:\n\
    \                       for metric_value in time_series_element.data:\n      \
    \                     print(metric_value.timestamp)\n           except HttpResponseError\
    \ as err:\n               print(\"something fatal happened\")\n              \
    \ print(err)\n       await credential.close()\n\n\n   ````\n"
