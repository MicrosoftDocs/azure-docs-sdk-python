### YamlMime:PythonClass
uid: azure.monitor.query.aio.MetricsClient
name: MetricsClient
fullName: azure.monitor.query.aio.MetricsClient
module: azure.monitor.query.aio
inheritances:
- builtins.object
summary: 'MetricsClient should be used for performing metrics queries on multiple
  monitored resources in the

  same region. A credential with authorization at the subscription level is required
  when using this client.'
constructor:
  syntax: 'MetricsClient(endpoint: str, credential: AsyncTokenCredential, **kwargs:
    Any)'
  parameters:
  - name: endpoint
    description: 'The regional endpoint to use, for example

      [https://eastus.metrics.monitor.azure.com](https://eastus.metrics.monitor.azure.com).
      The region should match the region of the requested

      resources. For global resources, the region should be ''global''. Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: The credential to authenticate the client.
    isRequired: true
    types:
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
methods:
- uid: azure.monitor.query.aio.MetricsClient.close
  name: close
  summary: Close the client session.
  signature: async close() -> None
- uid: azure.monitor.query.aio.MetricsClient.query_resources
  name: query_resources
  summary: Lists the metric values for multiple resources.
  signature: 'async query_resources(*, resource_ids: Sequence[str], metric_namespace:
    str, metric_names: Sequence[str], timespan: timedelta | Tuple[datetime, timedelta]
    | Tuple[datetime, datetime] | None = None, granularity: timedelta | None = None,
    aggregations: Sequence[MetricAggregationType | str] | None = None, max_results:
    int | None = None, order_by: str | None = None, filter: str | None = None, roll_up_by:
    str | None = None, **kwargs: Any) -> List[MetricsQueryResult]'
  keywordOnlyParameters:
  - name: resource_ids
    description: A list of resource IDs to query metrics for. Required.
    types:
    - <xref:list>[<xref:str>]
  - name: metric_namespace
    description: Metric namespace that contains the requested metric names. Required.
    types:
    - <xref:str>
  - name: metric_names
    description: The names of the metrics to retrieve. Required.
    types:
    - <xref:list>[<xref:str>]
  - name: timespan
    description: 'The timespan for which to query the data. This can be a timedelta,

      a tuple of a start datetime with timedelta, or a tuple with start and end datetimes.'
    types:
    - <xref:typing.Optional>[<xref:typing.Union>[<xref:datetime.timedelta>, <xref:tuple>[<xref:datetime.datetime>,
      <xref:datetime.timedelta>], <xref:tuple>[<xref:datetime.datetime>, <xref:datetime.datetime>]]]
  - name: granularity
    description: The granularity (i.e. timegrain) of the query.
    types:
    - <xref:typing.Optional>[<xref:datetime.timedelta>]
  - name: aggregations
    description: 'The list of aggregation types to retrieve. Use

      *azure.monitor.query.MetricAggregationType* enum to get each aggregation type.'
    types:
    - <xref:typing.Optional>[<xref:list>[<xref:typing.Union>[<xref:azure.monitor.query.MetricAggregationType>,
      <xref:str>]]]
  - name: max_results
    description: 'The maximum number of records to retrieve.

      Valid only if ''filter'' is specified. Defaults to 10.'
    types:
    - <xref:typing.Optional>[<xref:int>]
  - name: order_by
    description: 'The aggregation to use for sorting results and the direction of
      the sort.

      Only one order can be specified. Examples: ''sum asc'', ''maximum desc''.'
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: filter
    description: "The **filter** is used to reduce the set of metric data returned.\
      \ Default value is None.\n\nExample: Metric contains metadata A, B and C.\n\n\
      * Return all time series of C where A = a1 and B = b1 or b2: \n\n  **filter=\"\
      A eq 'a1' and B eq 'b1' or B eq 'b2' and C eq '*'\"**\n\n* Invalid variant:\
      \ \n\n  **filter=\"A eq 'a1' and B eq 'b1' and C eq '*' or B = 'b2'\"**. This\
      \ is invalid because the\n  logical 'or' operator cannot separate two different\
      \ metadata names.\n\n* Return all time series where A = a1, B = b1 and C = c1:\
      \ \n\n  **filter=\"A eq 'a1' and B eq 'b1' and C eq 'c1'\"**\n\n* Return all\
      \ time series where A = a1: \n\n  **filter=\"A eq 'a1' and B eq '*' and C eq\
      \ '*'\"**\n\n* Special case: When dimension name or dimension value uses round\
      \ brackets. Example: When dimension name is **dim (test) 1**, instead of using\
      \ **filter=\"dim (test) 1 eq '*'\"** use **filter=\"dim %2528test%2529 1 eq\
      \ '*'\"**. \n\n  When dimension name is **dim (test) 3** and dimension value\
      \ is\n  **dim3 (test) val**, instead of using **filter=\"dim (test) 3 eq 'dim3\
      \ (test) val'\"**, use **filter=\"dim\n  %2528test%2529 3 eq 'dim3 %2528test%2529\
      \ val'\"**."
    types:
    - <xref:str>
  - name: roll_up_by
    description: 'Dimension name(s) to rollup results by. For example if you only
      want to see

      metric values with a filter like ''City eq Seattle or City eq Tacoma'' but don''t
      want to see

      separate values for each city, you can specify ''City'' to see the results for
      Seattle

      and Tacoma rolled up into one timeseries.'
    types:
    - <xref:str>
  return:
    description: A list of MetricsQueryResult objects.
    types:
    - <xref:list>[<xref:azure.monitor.query.MetricsQueryResult>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get a response for a batch metrics query.<!--[!code-python[Main](les\\async_samples\\\
    sample_metrics_query_multiple_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\216\\\\azure-monitor-query-1.3.0\\\\samples\\\\async_samples\\\
    \\sample_metrics_query_multiple_async.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from datetime import timedelta\n   import\
    \ os\n\n   from azure.core.exceptions import HttpResponseError\n   from azure.identity.aio\
    \ import DefaultAzureCredential\n   from azure.monitor.query import MetricAggregationType\n\
    \   from azure.monitor.query.aio import MetricsClient\n\n\n   async def query_metrics_batch():\n\
    \       endpoint = os.environ[\"AZURE_METRICS_ENDPOINT\"]\n\n       credential\
    \ = DefaultAzureCredential()\n       client = MetricsClient(endpoint, credential)\n\
    \n       resource_ids = [\n           '/subscriptions/<id>/resourceGroups/<rg>/providers/Microsoft.Storage/storageAccounts/<account-1>',\n\
    \           '/subscriptions/<id>/resourceGroups/<rg>/providers/Microsoft.Storage/storageAccounts/<account-2>'\n\
    \       ]\n       async with client:\n           try:\n               response\
    \ = await client.query_resources(\n                   resource_ids=resource_ids,\n\
    \                   metric_namespace=\"Microsoft.Storage/storageAccounts\",\n\
    \                   metric_names=[\"Ingress\"],\n                   timespan=timedelta(hours=2),\n\
    \                   granularity=timedelta(minutes=5),\n                   aggregations=[MetricAggregationType.AVERAGE],\n\
    \               )\n\n               for metrics_query_result in response:\n  \
    \                 for metric in metrics_query_result.metrics:\n              \
    \         print(metric.name + \" -- \" + metric.display_description)\n       \
    \                for time_series_element in metric.timeseries:\n             \
    \              for metric_value in time_series_element.data:\n               \
    \                print(\"The ingress at {} is {}\".format(metric_value.timestamp,\
    \ metric_value.average))\n           except HttpResponseError as err:\n      \
    \         print(\"something fatal happened\")\n               print(err)\n   \
    \    await credential.close()\n\n   ````\n"
