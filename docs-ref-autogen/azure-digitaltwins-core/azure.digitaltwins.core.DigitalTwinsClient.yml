### YamlMime:PythonClass
uid: azure.digitaltwins.core.DigitalTwinsClient
name: DigitalTwinsClient
fullName: azure.digitaltwins.core.DigitalTwinsClient
module: azure.digitaltwins.core
inheritances:
- builtins.object
summary: Creates an instance of the Digital Twins client.
constructor:
  syntax: 'DigitalTwinsClient(endpoint: str, credential: TokenCredential, **kwargs:
    Any)'
  parameters:
  - name: endpoint
    description: The URL endpoint of an Azure search service
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: A credential to authenticate requests to the service
    isRequired: true
    types:
    - <xref:azure.core.credentials.TokenCredential>
methods:
- uid: azure.digitaltwins.core.DigitalTwinsClient.create_models
  name: create_models
  summary: Create one or more models. When any error occurs, no models are uploaded.
  signature: 'create_models(dtdl_models: List[Dict[str, object]], **kwargs: Any) ->
    List[DigitalTwinsModelData]'
  parameters:
  - name: model_list
    description: 'The set of models to create.

      Each dict corresponds to exactly one model.'
    isRequired: true
    types:
    - <xref:typing.List>[<xref:typing.Dict>[<xref:str>,<xref:object>]]
  return:
    description: The list of created models.
    types:
    - <xref:typing.List>[<xref:azure.digitaltwins.core.DigitalTwinsModelData>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceExistsError
    description: 'One or more of

      the provided models already exist.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.decommission_model
  name: decommission_model
  summary: Decommissions a model.
  signature: 'decommission_model(model_id: str, **kwargs: Any) -> None'
  parameters:
  - name: model_id
    description: The ID for the model. The ID is globally unique and case sensitive.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'There is no model

      with the provided ID.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.delete_digital_twin
  name: delete_digital_twin
  summary: Delete a digital twin.
  signature: 'delete_digital_twin(digital_twin_id: str, **kwargs: Any) -> None'
  parameters:
  - name: digital_twin_id
    description: The ID of the digital twin.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: match_condition
    description: The condition under which to perform the operation.
    types:
    - <xref:azure.core.MatchConditions>
  - name: etag
    description: 'Only perform the operation if the entity''s etag matches the value
      provided

      according to the *match_condition*.'
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: If there is no digital twin with the provided ID.
- uid: azure.digitaltwins.core.DigitalTwinsClient.delete_event_route
  name: delete_event_route
  summary: Delete an event route.
  signature: 'delete_event_route(event_route_id: str, **kwargs: Any) -> None'
  parameters:
  - name: event_route_id
    description: The ID of the event route to delete.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'There is no

      event route with the provided ID.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.delete_model
  name: delete_model
  summary: Delete a model.
  signature: 'delete_model(model_id: str, **kwargs: Any) -> None'
  parameters:
  - name: model_id
    description: The ID of the model to delete.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'There is no model

      with the provided ID.'
  - type: azure.core.exceptions.ResourceExistsError
    description: 'There are dependencies

      on the model that prevent it from being deleted.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.delete_relationship
  name: delete_relationship
  summary: Delete a relationship on a digital twin.
  signature: 'delete_relationship(digital_twin_id: str, relationship_id: str, **kwargs:
    Any) -> None'
  parameters:
  - name: digital_twin_id
    description: The ID of the digital twin.
    isRequired: true
    types:
    - <xref:str>
  - name: relationship_id
    description: The ID of the relationship to delete.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: match_condition
    description: The condition under which to perform the operation.
    types:
    - <xref:azure.core.MatchConditions>
  - name: etag
    description: 'Only perform the operation if the entity''s etag matches the value
      provided

      according to the *match_condition*.'
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'If there is either no

      digital twin or relationship with the provided ID.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.get_component
  name: get_component
  summary: Get a component on a digital twin.
  signature: 'get_component(digital_twin_id: str, component_name: str, **kwargs: Any)
    -> Dict[str, object]'
  parameters:
  - name: digital_twin_id
    description: The ID of the digital twin.
    isRequired: true
    types:
    - <xref:str>
  - name: component_name
    description: The component being retrieved.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Dictionary containing the component.
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:object>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'If there is either no

      digital twin with the provided ID or the component name is invalid.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.get_digital_twin
  name: get_digital_twin
  summary: Get a digital twin.
  signature: 'get_digital_twin(digital_twin_id: str, **kwargs: Any) -> Dict[str, object]'
  parameters:
  - name: digital_twin_id
    description: The ID of the digital twin.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Dictionary containing the twin.
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:object>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: If the digital twin doesn't exist.
- uid: azure.digitaltwins.core.DigitalTwinsClient.get_event_route
  name: get_event_route
  summary: Get an event route.
  signature: 'get_event_route(event_route_id: str, **kwargs: Any) -> DigitalTwinsEventRoute'
  parameters:
  - name: event_route_id
    description: The ID of the event route.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The event route object.
    types:
    - <xref:azure.digitaltwins.core.DigitalTwinsEventRoute>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'There is no

      event route with the provided ID.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.get_model
  name: get_model
  summary: Get a model, including the model metadata and the model definition.
  signature: 'get_model(model_id: str, **kwargs: Any) -> DigitalTwinsModelData'
  parameters:
  - name: model_id
    description: The ID of the model.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: include_model_definition
    description: 'Include the model definition

      as part of the result. The default value is False.'
    types:
    - <xref:bool>
  return:
    description: The model data.
    types:
    - <xref:azure.digitaltwins.core.DigitalTwinsModelData>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'If there is no

      model with the provided ID.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.get_relationship
  name: get_relationship
  summary: Get a relationship on a digital twin.
  signature: 'get_relationship(digital_twin_id: str, relationship_id: str, **kwargs:
    Any) -> Dict[str, object]'
  parameters:
  - name: digital_twin_id
    description: The ID of the digital twin.
    isRequired: true
    types:
    - <xref:str>
  - name: relationship_id
    description: The ID of the relationship to retrieve.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Dictionary containing the relationship.
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:object>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'If there is either no

      digital twin or relationship with the provided ID.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.list_event_routes
  name: list_event_routes
  summary: Retrieves all event routes.
  signature: 'list_event_routes(**kwargs: Any) -> ItemPaged[DigitalTwinsEventRoute]'
  keywordOnlyParameters:
  - name: results_per_page
    description: 'The maximum number of items to retrieve per request.

      The server may choose to return less than the requested max.'
    types:
    - <xref:int>
  return:
    description: An iterator instance of event routes.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.digitaltwins.core.DigitalTwinsEventRoute>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.digitaltwins.core.DigitalTwinsClient.list_incoming_relationships
  name: list_incoming_relationships
  summary: Retrieve all incoming relationships for a digital twin.
  signature: 'list_incoming_relationships(digital_twin_id: str, **kwargs: Any) ->
    ItemPaged[IncomingRelationship]'
  parameters:
  - name: digital_twin_id
    description: The ID of the digital twin.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterator like instance of either Relationship.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.digitaltwins.core.IncomingRelationship>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'If there is no

      digital twin with the provided ID.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.list_models
  name: list_models
  summary: Get the list of models.
  signature: 'list_models(dependencies_for: List[str] | None = None, **kwargs: Any)
    -> ItemPaged[DigitalTwinsModelData]'
  parameters:
  - name: dependencies_for
    description: 'The model IDs to have dependencies retrieved.

      If omitted, all models are retrieved.'
    isRequired: true
    types:
    - <xref:typing.List>[<xref:str>]
  keywordOnlyParameters:
  - name: include_model_definition
    description: 'Include the model definition

      as part of the results. The default value is False.'
    types:
    - <xref:bool>
  - name: results_per_page
    description: 'The maximum number of items to retrieve per request.

      The server may choose to return less than the requested max.'
    types:
    - <xref:int>
  return:
    description: An iterator instance of list of model data.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.digitaltwins.core.DigitalTwinsModelData>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.digitaltwins.core.DigitalTwinsClient.list_relationships
  name: list_relationships
  summary: Retrieve relationships for a digital twin.
  signature: 'list_relationships(digital_twin_id: str, relationship_id: str | None
    = None, **kwargs: Any) -> ItemPaged[Dict[str, object]]'
  parameters:
  - name: digital_twin_id
    description: The ID of the digital twin.
    isRequired: true
    types:
    - <xref:str>
  - name: relationship_id
    description: 'The ID of the relationship to

      get (if None all the relationship will be retrieved).'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterator instance of list of relationships
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:typing.Dict>[<xref:str>,<xref:object>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'If there is no

      digital twin with the provided ID.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.publish_component_telemetry
  name: publish_component_telemetry
  summary: 'Publish telemetry from a digital twin''s component, which is then consumed
    by

    one or many destination endpoints (subscribers) defined under.'
  signature: 'publish_component_telemetry(digital_twin_id: str, component_name: str,
    telemetry: object, **kwargs: Any) -> None'
  parameters:
  - name: digital_twin_id
    description: The ID of the digital twin.
    isRequired: true
    types:
    - <xref:str>
  - name: component_name
    description: The name of the DTDL component.
    isRequired: true
    types:
    - <xref:str>
  - name: telemetry
    description: The telemetry data to be sent.
    isRequired: true
    types:
    - <xref:object>
  keywordOnlyParameters:
  - name: message_id
    description: The message ID. If not specified, a UUID will be generated.
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'If there is no

      digital twin with the provided ID or the component name is invalid.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.publish_telemetry
  name: publish_telemetry
  summary: 'Publish telemetry from a digital twin, which is then consumed by

    one or many destination endpoints (subscribers) defined under.'
  signature: 'publish_telemetry(digital_twin_id: str, telemetry: object, **kwargs:
    Any) -> None'
  parameters:
  - name: digital_twin_id
    description: The ID of the digital twin
    isRequired: true
    types:
    - <xref:str>
  - name: telemetry
    description: The telemetry data to be sent
    isRequired: true
    types:
    - <xref:object>
  keywordOnlyParameters:
  - name: message_id
    description: The message ID. If not specified, a UUID will be generated.
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'If there is no

      digital twin with the provided ID.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.query_twins
  name: query_twins
  summary: 'Query for digital twins.


    Note: that there may be a delay between before changes in your instance are reflected
    in queries.

    For more details on query limitations, see

    [https://docs.microsoft.com/azure/digital-twins/how-to-query-graph#query-limitations](https://docs.microsoft.com/azure/digital-twins/how-to-query-graph#query-limitations)'
  signature: 'query_twins(query_expression: str, **kwargs: Any) -> ItemPaged[Dict[str,
    object]]'
  parameters:
  - name: query_expression
    description: The query expression to execute.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterable of query results.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:typing.Dict>[<xref:str>, <xref:object>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.digitaltwins.core.DigitalTwinsClient.update_component
  name: update_component
  summary: Update properties of a component on a digital twin using a JSON patch.
  signature: 'update_component(digital_twin_id: str, component_name: str, json_patch:
    List[Dict[str, object]], **kwargs: Any) -> None'
  parameters:
  - name: digital_twin_id
    description: The ID of the digital twin.
    isRequired: true
    types:
    - <xref:str>
  - name: component_name
    description: The component being updated.
    isRequired: true
    types:
    - <xref:str>
  - name: json_patch
    description: An update specification described by JSON Patch.
    isRequired: true
    types:
    - <xref:typing.List>[<xref:typing.Dict>[<xref:str>,<xref:object>]]
  keywordOnlyParameters:
  - name: match_condition
    description: The condition under which to perform the operation.
    types:
    - <xref:azure.core.MatchConditions>
  - name: etag
    description: 'Only perform the operation if the entity''s etag matches the value
      provided

      according to the *match_condition*.'
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'If there is either no

      digital twin with the provided ID or the component name is invalid.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.update_digital_twin
  name: update_digital_twin
  summary: Update a digital twin using a JSON patch.
  signature: 'update_digital_twin(digital_twin_id: str, json_patch: List[Dict[str,
    object]], **kwargs: Any) -> None'
  parameters:
  - name: digital_twin_id
    description: The ID of the digital twin.
    isRequired: true
    types:
    - <xref:str>
  - name: json_patch
    description: 'An update specification described by JSON Patch.

      Updates to property values and $model elements may happen in the same request.

      Operations are limited to *add*, *replace* and *remove*.'
    isRequired: true
    types:
    - <xref:typing.List>[<xref:typing.Dict>[<xref:str>,<xref:object>]]
  keywordOnlyParameters:
  - name: match_condition
    description: The condition under which to perform the operation.
    types:
    - <xref:azure.core.MatchConditions>
  - name: etag
    description: 'Only perform the operation if the entity''s etag matches the value
      provided

      according to the *match_condition*.'
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: If there is no digital twin with the provided ID.
- uid: azure.digitaltwins.core.DigitalTwinsClient.update_relationship
  name: update_relationship
  summary: Updates the properties of a relationship on a digital twin using a JSON
    patch.
  signature: 'update_relationship(digital_twin_id: str, relationship_id: str, json_patch:
    List[Dict[str, object]], **kwargs: Any) -> None'
  parameters:
  - name: digital_twin_id
    description: The ID of the digital twin.
    isRequired: true
    types:
    - <xref:str>
  - name: relationship_id
    description: The ID of the relationship to retrieve.
    isRequired: true
    types:
    - <xref:str>
  - name: json_patch
    description: 'JSON Patch description of the update

      to the relationship properties.'
    isRequired: true
    types:
    - <xref:typing.List>[<xref:typing.Dict>[<xref:str>,<xref:object>]]
  keywordOnlyParameters:
  - name: match_condition
    description: The condition under which to perform the operation.
    types:
    - <xref:azure.core.MatchConditions>
  - name: etag
    description: 'Only perform the operation if the entity''s etag matches the value
      provided

      according to the *match_condition*.'
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'If there is either no

      digital twin or relationship with the provided ID.'
- uid: azure.digitaltwins.core.DigitalTwinsClient.upsert_digital_twin
  name: upsert_digital_twin
  summary: Create or update a digital twin.
  signature: 'upsert_digital_twin(digital_twin_id: str, digital_twin: Dict[str, object],
    **kwargs: Any) -> Dict[str, object]'
  parameters:
  - name: digital_twin_id
    description: The ID of the digital twin.
    isRequired: true
    types:
    - <xref:str>
  - name: digital_twin
    description: Dictionary containing the twin to create or update.
    isRequired: true
    types:
    - <xref:typing.Dict>[<xref:str>,<xref:object>]
  keywordOnlyParameters:
  - name: match_condition
    description: The condition under which to perform the operation.
    types:
    - <xref:azure.core.MatchConditions>
  - name: etag
    description: 'Only perform the operation if the entity''s etag matches the value
      provided

      according to the *match_condition*.'
    types:
    - <xref:str>
  return:
    description: Dictionary containing the created or updated twin.
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:object>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceExistsError
    description: If the digital twin already exists.
- uid: azure.digitaltwins.core.DigitalTwinsClient.upsert_event_route
  name: upsert_event_route
  summary: Create or update an event route.
  signature: 'upsert_event_route(event_route_id: str, event_route: DigitalTwinsEventRoute,
    **kwargs: Any) -> None'
  parameters:
  - name: event_route_id
    description: The ID of the event route to create or update.
    isRequired: true
    types:
    - <xref:str>
  - name: event_route
    description: The event route data.
    isRequired: true
    types:
    - <xref:azure.digitaltwins.core.DigitalTwinsEventRoute>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.digitaltwins.core.DigitalTwinsClient.upsert_relationship
  name: upsert_relationship
  summary: Create or update a relationship on a digital twin.
  signature: 'upsert_relationship(digital_twin_id: str, relationship_id: str, relationship:
    Dict[str, object], **kwargs: Any) -> Dict[str, object]'
  parameters:
  - name: digital_twin_id
    description: The ID of the digital twin.
    isRequired: true
    types:
    - <xref:str>
  - name: relationship_id
    description: The ID of the relationship to retrieve.
    isRequired: true
    types:
    - <xref:str>
  - name: relationship
    description: Dictionary containing the relationship.
    isRequired: true
    types:
    - <xref:typing.Dict>[<xref:str>,<xref:object>]
  keywordOnlyParameters:
  - name: match_condition
    description: The condition under which to perform the operation.
    types:
    - <xref:azure.core.MatchConditions>
  - name: etag
    description: 'Only perform the operation if the entity''s etag matches the value
      provided

      according to the *match_condition*.'
    types:
    - <xref:str>
  return:
    description: The created or updated relationship.
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:object>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
    description: 'If there is either no

      digital twin, target digital twin or relationship with the provided ID.'
