### YamlMime:PythonClass
uid: azure.containerregistry.ContainerRegistryClient
name: ContainerRegistryClient
fullName: azure.containerregistry.ContainerRegistryClient
module: azure.containerregistry
inheritances:
- azure.containerregistry._base_client.ContainerRegistryBaseClient
constructor:
  syntax: 'ContainerRegistryClient(endpoint: str, credential: Optional[TokenCredential]
    = None, **kwargs: Any)'
methods:
- uid: azure.containerregistry.ContainerRegistryClient.delete_manifest
  name: delete_manifest
  summary: "Delete a manifest. If the manifest cannot be found or a response status\
    \ code of\n404 is returned an error will not be raised.\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   from azure.containerregistry\
    \ import ContainerRegistryClient\n   from azure.identity import DefaultAzureCredential\n\
    \   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRegistryClient(endpoint,\
    \ DefaultAzureCredential(), audience=\"my_audience\")\n   client.delete_manifest(\"\
    my_repository\", \"my_tag_or_digest\")\n   ````"
  signature: 'delete_manifest(repository: str, tag_or_digest: str, **kwargs: Any)
    -> None'
  parameters:
  - name: repository
    description: Name of the repository the manifest belongs to
    isRequired: true
    types:
    - <xref:str>
  - name: tag_or_digest
    description: Tag or digest of the manifest to be deleted
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
- uid: azure.containerregistry.ContainerRegistryClient.delete_repository
  name: delete_repository
  summary: 'Delete a repository. If the repository cannot be found or a response status
    code of

    404 is returned an error will not be raised.'
  signature: 'delete_repository(repository: str, **kwargs: Any) -> None'
  parameters:
  - name: repository
    description: The repository to delete
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
  examples:
  - "Delete a repository from the *ContainerRegistryClient*<!--[!code-python[Main](les\\\
    sample_hello_world.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\\
    1\\\\s\\\\dist_temp\\\\182\\\\azure-containerregistry-1.0.0\\\\samples\\\\sample_hello_world.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n               client.delete_repository(repository_name, tag.name)\n\n   ````\n"
- uid: azure.containerregistry.ContainerRegistryClient.delete_tag
  name: delete_tag
  summary: "Delete a tag from a repository. If the tag cannot be found or a response\
    \ status code of\n404 is returned an error will not be raised.\n\nExample\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
    \   from azure.containerregistry import ContainerRegistryClient\n   from azure.identity\
    \ import DefaultAzureCredential\n   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"\
    ]\n   client = ContainerRegistryClient(endpoint, DefaultAzureCredential(), audience=\"\
    my_audience\")\n   for tag in client.list_tag_properties(\"my_repository\"):\n\
    \       client.delete_tag(\"my_repository\", tag.name)\n   ````"
  signature: 'delete_tag(repository: str, tag: str, **kwargs: Any) -> None'
  parameters:
  - name: repository
    description: Name of the repository the tag belongs to
    isRequired: true
    types:
    - <xref:str>
  - name: tag
    description: The tag to be deleted
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
- uid: azure.containerregistry.ContainerRegistryClient.get_manifest_properties
  name: get_manifest_properties
  summary: "Get the properties of a registry artifact\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   from azure.containerregistry\
    \ import ContainerRegistryClient\n   from azure.identity import DefaultAzureCredential\n\
    \   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRegistryClient(endpoint,\
    \ DefaultAzureCredential(), audience=\"my_audience\")\n   for artifact in client.list_manifest_properties(\"\
    my_repository\"):\n       properties = client.get_manifest_properties(\"my_repository\"\
    , artifact.digest)\n   ````"
  signature: 'get_manifest_properties(repository: str, tag_or_digest: str, **kwargs:
    Any) -> azure.containerregistry._models.ArtifactManifestProperties'
  parameters:
  - name: repository
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  - name: tag_or_digest
    description: Tag or digest of the manifest
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.containerregistry.ArtifactManifestProperties>
  exceptions:
  - type: ~azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.ContainerRegistryClient.get_repository_properties
  name: get_repository_properties
  summary: Get the properties of a repository
  signature: 'get_repository_properties(repository: str, **kwargs: Any) -> azure.containerregistry._models.RepositoryProperties'
  parameters:
  - name: repository
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.containerregistry.RepositoryProperties>
  exceptions:
  - type: ~azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.ContainerRegistryClient.get_tag_properties
  name: get_tag_properties
  summary: "Get the properties for a tag\n\nExample\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {}, \"linenos\": false} -->\n\n````python\n\n   from azure.containerregistry\
    \ import ContainerRegistryClient\n   from azure.identity import DefaultAzureCredential\n\
    \   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRegistryClient(endpoint,\
    \ DefaultAzureCredential(), audience=\"my_audience\")\n   for tag in client.list_tag_properties(\"\
    my_repository\"):\n       tag_properties = client.get_tag_properties(\"my_repository\"\
    , tag.name)\n   ````"
  signature: 'get_tag_properties(repository: str, tag: str, **kwargs: Any) -> azure.containerregistry._models.ArtifactTagProperties'
  parameters:
  - name: repository
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  - name: tag
    description: The tag to get tag properties for
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.containerregistry.ArtifactTagProperties>
  exceptions:
  - type: ~azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.ContainerRegistryClient.list_manifest_properties
  name: list_manifest_properties
  summary: List the artifacts for a repository
  signature: 'list_manifest_properties(repository: str, **kwargs: Any) -> azure.core.paging.ItemPaged[azure.containerregistry._models.ArtifactManifestProperties]'
  parameters:
  - name: repository
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  - name: order_by
    description: Query parameter for ordering by time ascending or descending
    types:
    - <xref:azure.containerregistry.ArtifactManifestOrder>
    - <xref:str>
  - name: results_per_page
    description: Number of repositories to return per page
    types:
    - <xref:int>
  return:
    description: An iterable of <xref:azure.containerregistry.ArtifactManifestProperties>
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.containerregistry.ArtifactManifestProperties>]
  exceptions:
  - type: ~azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.ContainerRegistryClient.list_repository_names
  name: list_repository_names
  summary: List all repositories
  signature: 'list_repository_names(**kwargs: Any) -> azure.core.paging.ItemPaged[str]'
  parameters:
  - name: results_per_page
    description: Number of repositories to return per page
    types:
    - <xref:int>
  return:
    description: An iterable of strings
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:str>]
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
  examples:
  - "List repositories in a container registry account<!--[!code-python[Main](les\\\
    sample_delete_tags.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\\
    1\\\\s\\\\dist_temp\\\\182\\\\azure-containerregistry-1.0.0\\\\samples\\\\sample_delete_tags.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   audience = \"https://management.azure.com\"\n   endpoint = os.environ[\"\
    CONTAINERREGISTRY_ENDPOINT\"]\n\n   with ContainerRegistryClient(endpoint, DefaultAzureCredential(),\
    \ audience=audience) as client:\n       for repository in client.list_repository_names():\n\
    \           print(repository)\n\n   ````\n"
- uid: azure.containerregistry.ContainerRegistryClient.list_tag_properties
  name: list_tag_properties
  summary: "List the tags for a repository\n\nExample\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {}, \"linenos\": false} -->\n\n````python\n\n   from azure.containerregistry\
    \ import ContainerRegistryClient\n   from azure.identity import DefaultAzureCredential\n\
    \   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRegistryClient(endpoint,\
    \ DefaultAzureCredential(), audience=\"my_audience\")\n   for tag in client.list_tag_properties(\"\
    my_repository\"):\n       tag_properties = client.get_tag_properties(\"my_repository\"\
    , tag.name)\n   ````"
  signature: 'list_tag_properties(repository: str, **kwargs: Any) -> azure.core.paging.ItemPaged[azure.containerregistry._models.ArtifactTagProperties]'
  parameters:
  - name: repository
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  - name: order_by
    description: Query parameter for ordering by time ascending or descending
    types:
    - <xref:azure.containerregistry.ArtifactTagOrder>
    - <xref:str>
  - name: results_per_page
    description: Number of repositories to return per page
    types:
    - <xref:int>
  return:
    description: An iterable of <xref:azure.containerregistry.ArtifactTagProperties>
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.containerregistry.ArtifactTagProperties>]
  exceptions:
  - type: ~azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.ContainerRegistryClient.update_manifest_properties
  name: update_manifest_properties
  summary: "Set the permission properties for a manifest.\n\nThe updatable properties\
    \ include: *can_delete*, *can_list*, *can_read*, and *can_write*.\n\nExample\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
    \   from azure.containerregistry import ContainerRegistryClient\n   from azure.identity\
    \ import DefaultAzureCredential\n   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"\
    ]\n   client = ContainerRegistryClient(endpoint, DefaultAzureCredential(), audience=\"\
    my_audience\")\n   for artifact in client.list_manifest_properties(\"my_repository\"\
    ):\n       received_properties = client.update_manifest_properties(\n        \
    \   \"my_repository\",\n           artifact.digest,\n           can_delete=False,\n\
    \           can_list=False,\n           can_read=False,\n           can_write=False,\n\
    \       )\n   ````"
  parameters:
  - name: repository
    description: Repository the manifest belongs to.
    isRequired: true
    types:
    - <xref:str>
  - name: tag_or_digest
    description: Tag or digest of the manifest.
    isRequired: true
    types:
    - <xref:str>
  - name: properties
    description: 'The property''s values to be set. This is a positional-only

      parameter. Please provide either this or individual keyword parameters.'
    isRequired: true
    types:
    - <xref:azure.containerregistry.ArtifactManifestProperties>
  - name: can_delete
    description: Delete permissions for a manifest.
    types:
    - <xref:bool>
  - name: can_list
    description: List permissions for a manifest.
    types:
    - <xref:bool>
  - name: can_read
    description: Read permissions for a manifest.
    types:
    - <xref:bool>
  - name: can_write
    description: Write permissions for a manifest.
    types:
    - <xref:bool>
  return:
    types:
    - <xref:azure.containerregistry.ArtifactManifestProperties>
  exceptions:
  - type: ~azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.ContainerRegistryClient.update_repository_properties
  name: update_repository_properties
  summary: 'Set the permission properties of a repository.


    The updatable properties include: *can_delete*, *can_list*, *can_read*, and *can_write*.'
  parameters:
  - name: repository
    description: Name of the repository.
    isRequired: true
    types:
    - <xref:str>
  - name: properties
    description: 'Properties to set for the repository. This is a positional-only

      parameter. Please provide either this or individual keyword parameters.'
    isRequired: true
    types:
    - <xref:azure.containerregistry.RepositoryProperties>
  - name: can_delete
    description: Delete permissions for a repository.
    types:
    - <xref:bool>
  - name: can_list
    description: List permissions for a repository.
    types:
    - <xref:bool>
  - name: can_read
    description: Read permissions for a repository.
    types:
    - <xref:bool>
  - name: can_write
    description: Write permissions for a repository.
    types:
    - <xref:bool>
  return:
    types:
    - <xref:azure.containerregistry.RepositoryProperties>
  exceptions:
  - type: ~azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.ContainerRegistryClient.update_tag_properties
  name: update_tag_properties
  summary: "Set the permission properties for a tag.\n\nThe updatable properties include:\
    \ *can_delete*, *can_list*, *can_read*, and *can_write*.\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   from azure.containerregistry\
    \ import ContainerRegistryClient\n   from azure.identity import DefaultAzureCredential\n\
    \   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRegistryClient(endpoint,\
    \ DefaultAzureCredential(), audience=\"my_audience\")\n   tag_identifier = \"\
    latest\"\n   received = client.update_tag_properties(\n       \"my_repository\"\
    ,\n       tag_identifier,\n       can_delete=False,\n       can_list=False,\n\
    \       can_read=False,\n       can_write=False,\n   )\n   ````"
  parameters:
  - name: repository
    description: Repository the tag belongs to.
    isRequired: true
    types:
    - <xref:str>
  - name: tag
    description: Tag to set properties for.
    isRequired: true
    types:
    - <xref:str>
  - name: properties
    description: 'The property''s values to be set. This is a positional-only

      parameter. Please provide either this or individual keyword parameters.'
    isRequired: true
    types:
    - <xref:azure.containerregistry.ArtifactTagProperties>
  - name: can_delete
    description: Delete permissions for a tag.
    types:
    - <xref:bool>
  - name: can_list
    description: List permissions for a tag.
    types:
    - <xref:bool>
  - name: can_read
    description: Read permissions for a tag.
    types:
    - <xref:bool>
  - name: can_write
    description: Write permissions for a tag.
    types:
    - <xref:bool>
  return:
    types:
    - <xref:azure.containerregistry.ArtifactTagProperties>
  exceptions:
  - type: ~azure.core.exceptions.ResourceNotFoundError
