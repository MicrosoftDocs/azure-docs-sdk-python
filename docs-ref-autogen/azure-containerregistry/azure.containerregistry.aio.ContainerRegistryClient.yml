### YamlMime:PythonClass
uid: azure.containerregistry.aio.ContainerRegistryClient
name: ContainerRegistryClient
fullName: azure.containerregistry.aio.ContainerRegistryClient
module: azure.containerregistry.aio
inheritances:
- azure.containerregistry.aio._async_base_client.ContainerRegistryBaseClient
summary: Create a ContainerRegistryClient from an ACR endpoint and a credential.
constructor:
  syntax: 'ContainerRegistryClient(endpoint: str, credential: AsyncTokenCredential
    | None = None, *, api_version: str | None = None, audience: str = ''https://containerregistry.azure.net'',
    **kwargs)'
  parameters:
  - name: endpoint
    description: An ACR endpoint.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: The credential with which to authenticate. This should be None in
      anonymous access.
    defaultValue: None
    types:
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
    - <xref:None>
  - name: api_version
    description: 'API Version. The default value is "2021-07-01". Note that overriding
      this default value

      may result in unsupported behavior.'
    types:
    - <xref:str>
  - name: audience
    description: 'URL to use for credential authentication with AAD. Its value could
      be

      "[https://management.azure.com](https://management.azure.com)", "[https://management.chinacloudapi.cn](https://management.chinacloudapi.cn)"
      or

      "[https://management.usgovcloudapi.net](https://management.usgovcloudapi.net)".
      The default value is "[https://containerregistry.azure.net](https://containerregistry.azure.net)".'
    types:
    - <xref:str>
methods:
- uid: azure.containerregistry.aio.ContainerRegistryClient.delete_blob
  name: delete_blob
  summary: "Delete a blob. If the blob cannot be found or a response status code of\n\
    404 is returned an error will not be raised.\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   from azure.containerregistry.aio\
    \ import ContainerRegistryClient\n   from azure.identity.aio import DefaultAzureCredential\n\
    \   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRegistryClient(endpoint,\
    \ DefaultAzureCredential(), audience=\"my_audience\")\n   await client.delete_blob(\"\
    my_repository\", \"my_digest\")\n   ````"
  signature: 'async delete_blob(repository: str, digest: str, **kwargs) -> None'
  parameters:
  - name: repository
    description: Name of the repository the manifest belongs to
    isRequired: true
    types:
    - <xref:str>
  - name: digest
    description: Digest of the blob to be deleted
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
- uid: azure.containerregistry.aio.ContainerRegistryClient.delete_manifest
  name: delete_manifest
  summary: "Delete a manifest. If the manifest cannot be found or a response status\
    \ code of\n404 is returned an error will not be raised.\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   from azure.containerregistry.aio\
    \ import ContainerRegistryClient\n   from azure.identity.aio import DefaultAzureCredential\n\
    \   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRegistryClient(endpoint,\
    \ DefaultAzureCredential(), audience=\"my_audience\")\n   await client.delete_manifest(\"\
    my_repository\", \"my_tag_or_digest\")\n   ````"
  signature: 'async delete_manifest(repository: str, tag_or_digest: str, **kwargs)
    -> None'
  parameters:
  - name: repository
    description: Repository the manifest belongs to
    isRequired: true
    types:
    - <xref:str>
  - name: tag_or_digest
    description: Tag or digest of the manifest to be deleted.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.containerregistry.aio.ContainerRegistryClient.delete_repository
  name: delete_repository
  summary: 'Delete a repository. If the repository cannot be found or a response status
    code of

    404 is returned an error will not be raised.'
  signature: 'async delete_repository(repository: str, **kwargs) -> None'
  parameters:
  - name: repository
    description: The repository to delete
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.containerregistry.aio.ContainerRegistryClient.delete_tag
  name: delete_tag
  summary: "Delete a tag from a repository. If the tag cannot be found or a response\
    \ status code of\n404 is returned an error will not be raised.\n\nExample\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
    \   from azure.containerregistry.aio import ContainerRegistryClient\n   from azure.identity.aio\
    \ import DefaultAzureCredential\n   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"\
    ]\n   client = ContainerRegistryClient(endpoint, DefaultAzureCredential(), audience=\"\
    my_audience\")\n   async for tag in client.list_tag_properties(\"my_repository\"\
    ):\n       await client.delete_tag(\"my_repository\", tag.name)\n   ````"
  signature: 'async delete_tag(repository: str, tag: str, **kwargs) -> None'
  parameters:
  - name: repository
    description: Repository the tag belongs to
    isRequired: true
    types:
    - <xref:str>
  - name: tag
    description: The tag to be deleted
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.containerregistry.aio.ContainerRegistryClient.download_blob
  name: download_blob
  summary: Download a blob that is part of an artifact to a stream.
  signature: 'async download_blob(repository: str, digest: str, **kwargs) -> AsyncDownloadBlobStream'
  parameters:
  - name: repository
    description: Name of the repository.
    isRequired: true
    types:
    - <xref:str>
  - name: digest
    description: The digest of the blob to download.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: AsyncDownloadBlobStream
    types:
    - <xref:azure.containerregistry.aio.AsyncDownloadBlobStream>
  exceptions:
  - type: azure.containerregistry.DigestValidationError
    description: If the content of retrieved blob digest does not match the requested
      digest.
  - type: ValueError
    description: If the content-range header is missing or invalid in response.
- uid: azure.containerregistry.aio.ContainerRegistryClient.get_manifest
  name: get_manifest
  summary: Get the manifest for an artifact.
  signature: 'async get_manifest(repository: str, tag_or_digest: str, **kwargs) ->
    GetManifestResult'
  parameters:
  - name: repository
    description: Name of the repository.
    isRequired: true
    types:
    - <xref:str>
  - name: tag_or_digest
    description: 'The tag or digest of the manifest to get.

      When digest is provided, will use this digest to compare with the one calculated
      by the response payload.

      When tag is provided, will use the digest in response headers to compare.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: GetManifestResult
    types:
    - <xref:azure.containerregistry.GetManifestResult>
  exceptions:
  - type: azure.containerregistry.DigestValidationError
    description: 'If the content of retrieved manifest digest does not match the requested
      digest, or

      the server-computed digest does not match the client-computed digest when tag
      is passing.'
  - type: ValueError
    description: 'If the content-length header is missing or invalid in response,
      or the manifest size is

      bigger than 4MB.'
- uid: azure.containerregistry.aio.ContainerRegistryClient.get_manifest_properties
  name: get_manifest_properties
  summary: "Get the properties of a registry artifact\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   from azure.containerregistry.aio\
    \ import ContainerRegistryClient\n   from azure.identity.aio import DefaultAzureCredential\n\
    \   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRegistryClient(endpoint,\
    \ DefaultAzureCredential(), audience=\"my_audience\")\n   async for artifact in\
    \ client.list_manifest_properties(\"my_repository\"):\n       properties = await\
    \ client.get_manifest_properties(\"my_repository\", artifact.digest)\n   ````"
  signature: 'async get_manifest_properties(repository: str, tag_or_digest: str, **kwargs)
    -> ArtifactManifestProperties'
  parameters:
  - name: repository
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  - name: tag_or_digest
    description: The tag or digest of the manifest
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.containerregistry.ArtifactManifestProperties>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.aio.ContainerRegistryClient.get_repository_properties
  name: get_repository_properties
  summary: Get the properties of a repository
  signature: 'async get_repository_properties(repository: str, **kwargs) -> RepositoryProperties'
  parameters:
  - name: repository
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.containerregistry.RepositoryProperties>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.aio.ContainerRegistryClient.get_tag_properties
  name: get_tag_properties
  summary: "Get the properties for a tag\n\nExample\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {}, \"linenos\": false} -->\n\n````python\n\n   from azure.containerregistry.aio\
    \ import ContainerRegistryClient\n   from azure.identity.aio import DefaultAzureCredential\n\
    \   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRegistryClient(endpoint,\
    \ DefaultAzureCredential(), audience=\"my_audience\")\n   async for tag in client.list_tag_properties(\"\
    my_repository\"):\n       tag_properties = await client.get_tag_properties(\"\
    my_repository\", tag.name)\n   ````"
  signature: 'async get_tag_properties(repository: str, tag: str, **kwargs) -> ArtifactTagProperties'
  parameters:
  - name: repository
    description: Repository the tag belongs to
    isRequired: true
    types:
    - <xref:str>
  - name: tag
    description: The tag to get properties for
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.containerregistry.ArtifactTagProperties>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.aio.ContainerRegistryClient.list_manifest_properties
  name: list_manifest_properties
  summary: List the manifests of a repository
  signature: 'list_manifest_properties(repository: str, **kwargs) -> AsyncItemPaged[ArtifactManifestProperties]'
  parameters:
  - name: repository
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  - name: order_by
    description: Query parameter for ordering by time ascending or descending
    types:
    - <xref:azure.containerregistry.ArtifactManifestOrder>
    - <xref:str>
  - name: results_per_page
    description: Number of repositories to return per page
    types:
    - <xref:int>
  return:
    description: An iterable of <xref:azure.containerregistry.ArtifactManifestProperties>
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.containerregistry.ArtifactManifestProperties>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.containerregistry.aio.ContainerRegistryClient.list_repository_names
  name: list_repository_names
  summary: List all repositories
  signature: list_repository_names(**kwargs) -> AsyncItemPaged[str]
  parameters:
  - name: results_per_page
    description: Number of repositories to return per page
    types:
    - <xref:int>
  return:
    description: An iterable of strings
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:str>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.containerregistry.aio.ContainerRegistryClient.list_tag_properties
  name: list_tag_properties
  summary: "List the tags for a repository\n\nExample\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {}, \"linenos\": false} -->\n\n````python\n\n   from azure.containerregistry.aio\
    \ import ContainerRegistryClient\n   from azure.identity.aio import DefaultAzureCredential\n\
    \   endpoint = os.environ[\"CONTAINERREGISTRY_ENDPOINT\"]\n   client = ContainerRegistryClient(endpoint,\
    \ DefaultAzureCredential(), audience=\"my_audience\")\n   async for tag in client.list_tag_properties(\"\
    my_repository\"):\n       tag_properties = await client.get_tag_properties(tag.name)\n\
    \   ````"
  signature: 'list_tag_properties(repository: str, **kwargs) -> AsyncItemPaged[ArtifactTagProperties]'
  parameters:
  - name: repository
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  - name: order_by
    description: Query parameter for ordering by time ascending or descending
    types:
    - <xref:azure.containerregistry.ArtifactTagOrder>
    - <xref:str>
  - name: results_per_page
    description: Number of repositories to return per page
    types:
    - <xref:int>
  return:
    description: An iterable of <xref:azure.containerregistry.ArtifactTagProperties>
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.containerregistry.ArtifactTagProperties>]
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
- uid: azure.containerregistry.aio.ContainerRegistryClient.set_manifest
  name: set_manifest
  summary: Set a manifest for an artifact.
  signature: 'async set_manifest(repository: str, manifest: MutableMapping[str, Any]
    | IO[bytes], *, tag: str | None = None, media_type: str = ''application/vnd.oci.image.manifest.v1+json'',
    **kwargs) -> str'
  parameters:
  - name: repository
    description: Name of the repository
    isRequired: true
    types:
    - <xref:str>
  - name: manifest
    description: The manifest to set. It can be a JSON formatted dict or seekable
      stream.
    isRequired: true
    types:
    - <xref:dict>
    - <xref:IO>
  - name: tag
    description: Tag of the manifest.
    types:
    - <xref:str>
    - <xref:None>
  - name: media_type
    description: 'The media type of the manifest. If not specified, this value will
      be set to

      a default value of "application/vnd.oci.image.manifest.v1+json". Note: the current
      known media types are:

      "application/vnd.oci.image.manifest.v1+json", and "application/vnd.docker.distribution.manifest.v2+json".'
    types:
    - <xref:str>
  return:
    description: The digest of the set manifest, calculated by the registry.
    types:
    - <xref:str>
  exceptions:
  - type: ValueError
    description: If the parameter repository or manifest is None.
  - type: azure.containerregistry.DigestValidationError
    description: If the server-computed digest does not match the client-computed
      digest.
- uid: azure.containerregistry.aio.ContainerRegistryClient.update_manifest_properties
  name: update_manifest_properties
  signature: 'async update_manifest_properties(repository: str, tag_or_digest: str,
    properties: ArtifactManifestProperties, **kwargs) -> ArtifactManifestProperties'
- uid: azure.containerregistry.aio.ContainerRegistryClient.update_repository_properties
  name: update_repository_properties
  signature: 'async update_repository_properties(repository: str, properties: RepositoryProperties,
    **kwargs) -> RepositoryProperties'
- uid: azure.containerregistry.aio.ContainerRegistryClient.update_tag_properties
  name: update_tag_properties
  signature: 'async update_tag_properties(repository: str, tag: str, properties: ArtifactTagProperties,
    **kwargs) -> ArtifactTagProperties'
- uid: azure.containerregistry.aio.ContainerRegistryClient.upload_blob
  name: upload_blob
  summary: Upload an artifact blob.
  signature: 'async upload_blob(repository: str, data: IO[bytes], **kwargs) -> Tuple[str,
    int]'
  parameters:
  - name: repository
    description: Name of the repository.
    isRequired: true
    types:
    - <xref:str>
  - name: data
    description: 'The blob to upload. Note: This must be a seekable stream.'
    isRequired: true
    types:
    - <xref:IO>
  return:
    description: The digest and size in bytes of the uploaded blob.
    types:
    - <xref:Tuple>[<xref:str>, <xref:int>]
  exceptions:
  - type: ValueError
    description: If the parameter repository or data is None.
  - type: azure.containerregistry.DigestValidationError
    description: If the server-computed digest does not match the client-computed
      digest.
