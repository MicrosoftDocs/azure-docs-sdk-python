### YamlMime:PythonClass
uid: msal.application.ClientApplication
name: ClientApplication
fullName: msal.application.ClientApplication
module: msal.application
inheritances:
- builtins.object
constructor:
  syntax: ClientApplication(client_id, client_credential=None, authority=None, validate_authority=True,
    token_cache=None, http_client=None, verify=True, proxies=None, timeout=None, client_claims=None,
    app_name=None, app_version=None, client_capabilities=None)
methods:
- uid: msal.application.ClientApplication.acquire_token_by_auth_code_flow
  name: acquire_token_by_auth_code_flow
  summary: 'Validate the auth response being redirected back, and obtain tokens.


    It automatically provides nonce protection.'
  signature: acquire_token_by_auth_code_flow(auth_code_flow, auth_response, scopes=None,
    **kwargs)
  parameters:
  - name: auth_code_flow
    description: The same dict returned by <xref:msal.application.initiate_auth_code_flow>.
    isRequired: true
    types:
    - <xref:dict>
  - name: auth_response
    description: A dict of the query string received from auth server.
    isRequired: true
    types:
    - <xref:dict>
  - name: scopes
    description: 'Scopes requested to access a protected API (a resource).


      Most of the time, you can leave it empty.


      If you requested user consent for multiple resources, here you will

      need to provide a subset of what you required in

      <xref:msal.application.initiate_auth_code_flow>.


      OAuth2 was designed mostly for singleton services,

      where tokens are always meant for the same resource and the only

      changes are in the scopes.

      In AAD, tokens can be issued for multiple 3rd party resources.

      You can ask authorization code for multiple resources,

      but when you redeem it, the token is for only one intended

      recipient, called audience.

      So the developer need to specify a scope so that we can restrict the

      token to be issued for the corresponding audience.'
    defaultValue: None
    types:
    - <xref:list>[<xref:str>]
  return:
    description: "* A dict containing \"access_token\" and/or \"id_token\", among\
      \ others, depends on what scope was used. (See [https://tools.ietf.org/html/rfc6749#section-5.1](https://tools.ietf.org/html/rfc6749#section-5.1))\
      \ \n\n* A dict containing \"error\", optionally \"error_description\", \"error_uri\"\
      . (It is either [this](https://tools.ietf.org/html/rfc6749#section-4.1.2.1)\
      \ or [that](https://tools.ietf.org/html/rfc6749#section-5.2)) \n\n* Most client-side\
      \ data error would result in ValueError exception. So the usage pattern could\
      \ be without any protocol details: \n\n  <!-- literal_block {\"ids\": [], \"\
      classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\"\
      : \"preserve\"} -->\n\n  ````\n\n     def authorize():  # A controller in a\
      \ web app\n         try:\n             result = msal_app.acquire_token_by_auth_code_flow(\n\
      \                 session.get(\"flow\", {}), request.args)\n             if\
      \ \"error\" in result:\n                 return render_template(\"error.html\"\
      , result)\n             use(result)  # Token(s) are available in result and\
      \ cache\n         except ValueError:  # Usually caused by CSRF\n           \
      \  pass  # Simply ignore them\n         return redirect(url_for(\"index\"))\n\
      \     ````"
- uid: msal.application.ClientApplication.acquire_token_by_authorization_code
  name: acquire_token_by_authorization_code
  summary: The second half of the Authorization Code Grant.
  signature: acquire_token_by_authorization_code(code, scopes, redirect_uri=None,
    nonce=None, claims_challenge=None, **kwargs)
  parameters:
  - name: code
    description: The authorization code returned from Authorization Server.
    isRequired: true
  - name: scopes
    description: '(Required)

      Scopes requested to access a protected API (a resource).


      If you requested user consent for multiple resources, here you will

      typically want to provide a subset of what you required in AuthCode.


      OAuth2 was designed mostly for singleton services,

      where tokens are always meant for the same resource and the only

      changes are in the scopes.

      In AAD, tokens can be issued for multiple 3rd party resources.

      You can ask authorization code for multiple resources,

      but when you redeem it, the token is for only one intended

      recipient, called audience.

      So the developer need to specify a scope so that we can restrict the

      token to be issued for the corresponding audience.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
  - name: nonce
    description: 'If you provided a nonce when calling <xref:msal.application.get_authorization_request_url>,

      same nonce should also be provided here, so that we''ll validate it.

      An exception will be raised if the nonce in id token mismatches.'
    defaultValue: None
  - name: claims_challenge
    description: 'The claims_challenge parameter requests specific claims requested
      by the resource provider

      in the form of a claims_challenge directive in the www-authenticate header to
      be

      returned from the UserInfo Endpoint and/or in the ID Token and/or Access Token.

      It is a string of a JSON object which contains lists of claims being requested
      from these locations.'
    defaultValue: None
  - name: claims_challenge
    defaultValue: None
  return:
    description: "A dict representing the json response from AAD:\n\n* A successful\
      \ response would contain \"access_token\" key, \n\n* an error response would\
      \ contain \"error\" and usually \"error_description\"."
- uid: msal.application.ClientApplication.acquire_token_by_refresh_token
  name: acquire_token_by_refresh_token
  summary: 'Acquire token(s) based on a refresh token (RT) obtained from elsewhere.


    You use this method only when you have old RTs from elsewhere,

    and now you want to migrate them into MSAL.

    Calling this method results in new tokens automatically storing into MSAL.


    You do NOT need to use this method if you are already using MSAL.

    MSAL maintains RT automatically inside its token cache,

    and an access token can be retrieved

    when you call <xref:msal.application.acquire_token_silent>.'
  signature: acquire_token_by_refresh_token(refresh_token, scopes)
  parameters:
  - name: refresh_token
    description: The old refresh token, as a string.
    isRequired: true
    types:
    - <xref:str>
  - name: scopes
    description: 'The scopes associate with this old RT.

      Each scope needs to be in the Microsoft identity platform (v2) format.

      See [Scopes not resources](https://docs.microsoft.com/en-us/azure/active-directory/develop/migrate-python-adal-msal#scopes-not-resources).'
    isRequired: true
    types:
    - <xref:list>
  return:
    description: "* A dict contains \"error\" and some other keys, when error happened.\
      \ \n\n* A dict contains no \"error\" key means migration was successful."
- uid: msal.application.ClientApplication.acquire_token_silent
  name: acquire_token_silent
  summary: 'Acquire an access token for given account, without user interaction.


    It is done either by finding a valid access token from cache,

    or by finding a valid refresh token from cache and then automatically

    use it to redeem a new access token.


    This method will combine the cache empty and refresh error

    into one return value, *None*.

    If your app does not care about the exact token refresh error during

    token cache look-up, then this method is easier and recommended.


    Internally, this method calls <xref:msal.application.acquire_token_silent_with_error>.'
  signature: acquire_token_silent(scopes, account, authority=None, force_refresh=False,
    claims_challenge=None, **kwargs)
  parameters:
  - name: claims_challenge
    description: 'The claims_challenge parameter requests specific claims requested
      by the resource provider

      in the form of a claims_challenge directive in the www-authenticate header to
      be

      returned from the UserInfo Endpoint and/or in the ID Token and/or Access Token.

      It is a string of a JSON object which contains lists of claims being requested
      from these locations.'
    isRequired: true
  - name: account
    isRequired: true
  - name: authority
    defaultValue: None
  - name: force_refresh
    defaultValue: 'False'
  - name: claims_challenge
    defaultValue: None
  return:
    description: "* A dict containing no \"error\" key, and typically contains an\
      \ \"access_token\" key, if cache lookup succeeded. \n\n* None when cache lookup\
      \ does not yield a token."
- uid: msal.application.ClientApplication.acquire_token_silent_with_error
  name: acquire_token_silent_with_error
  summary: 'Acquire an access token for given account, without user interaction.


    It is done either by finding a valid access token from cache,

    or by finding a valid refresh token from cache and then automatically

    use it to redeem a new access token.


    This method will differentiate cache empty from token refresh error.

    If your app cares the exact token refresh error during

    token cache look-up, then this method is suitable.

    Otherwise, the other method <xref:msal.application.ClientApplication.acquire_token_silent>
    is recommended.'
  signature: acquire_token_silent_with_error(scopes, account, authority=None, force_refresh=False,
    claims_challenge=None, **kwargs)
  parameters:
  - name: scopes
    description: '(Required)

      Scopes requested to access a protected API (a resource).'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
  - name: account
    description: 'one of the account object returned by <xref:msal.application.get_accounts>,

      or use None when you want to find an access token for this client.'
    isRequired: true
  - name: force_refresh
    description: 'If True, it will skip Access Token look-up,

      and try to find a Refresh Token to obtain a new Access Token.'
    defaultValue: None
  - name: claims_challenge
    description: 'The claims_challenge parameter requests specific claims requested
      by the resource provider

      in the form of a claims_challenge directive in the www-authenticate header to
      be

      returned from the UserInfo Endpoint and/or in the ID Token and/or Access Token.

      It is a string of a JSON object which contains lists of claims being requested
      from these locations.'
    defaultValue: 'False'
  - name: claims_challenge
    defaultValue: None
  return:
    description: "* A dict containing no \"error\" key, and typically contains an\
      \ \"access_token\" key, if cache lookup succeeded. \n\n* None when there is\
      \ simply no token in the cache. \n\n* A dict containing an \"error\" key, when\
      \ token refresh failed."
- uid: msal.application.ClientApplication.get_accounts
  name: get_accounts
  summary: 'Get a list of accounts which previously signed in, i.e. exists in cache.


    An account can later be used in <xref:msal.application.ClientApplication.acquire_token_silent>

    to find its tokens.'
  signature: get_accounts(username=None)
  parameters:
  - name: username
    description: Filter accounts with this username only. Case insensitive.
    defaultValue: None
  return:
    description: 'A list of account objects.

      Each account is a dict. For now, we only document its "username" field.

      Your app can choose to display those information to end user,

      and allow user to choose one of his/her accounts to proceed.'
- uid: msal.application.ClientApplication.get_authorization_request_url
  name: get_authorization_request_url
  summary: Constructs a URL for you to start a Authorization Code Grant.
  signature: get_authorization_request_url(scopes, login_hint=None, state=None, redirect_uri=None,
    response_type='code', prompt=None, nonce=None, domain_hint=None, claims_challenge=None,
    **kwargs)
  parameters:
  - name: scopes
    description: '(Required)

      Scopes requested to access a protected API (a resource).'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
  - name: state
    description: Recommended by OAuth2 for CSRF protection.
    defaultValue: None
    types:
    - <xref:str>
  - name: login_hint
    description: Identifier of the user. Generally a User Principal Name (UPN).
    defaultValue: None
    types:
    - <xref:str>
  - name: redirect_uri
    description: Address to return to upon receiving a response from the authority.
    defaultValue: None
    types:
    - <xref:str>
  - name: response_type
    description: 'Default value is "code" for an OAuth2 Authorization Code grant.


      You could use other content such as "id_token" or "token",

      which would trigger an Implicit Grant, but that is

      [not recommended](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-implicit-grant-flow#is-the-implicit-grant-suitable-for-my-app).'
    defaultValue: code
    types:
    - <xref:str>
  - name: prompt
    description: 'By default, no prompt value will be sent, not even "none".

      You will have to specify a value explicitly.

      Its valid values are defined in Open ID Connect specs

      [https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)'
    defaultValue: None
    types:
    - <xref:str>
  - name: nonce
    description: 'A cryptographically random value used to mitigate replay attacks.
      See also

      [OIDC specs](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).'
    defaultValue: None
  - name: domain_hint
    description: 'Can be one of "consumers" or "organizations" or your tenant domain
      "contoso.com".

      If included, it will skip the email-based discovery process that user goes

      through on the sign-in page, leading to a slightly more streamlined user experience.

      More information on possible values

      [here](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow#request-an-authorization-code)
      and

      [here](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-oapx/86fb452d-e34a-494e-ac61-e526e263b6d8).'
    defaultValue: None
  - name: claims_challenge
    description: 'The claims_challenge parameter requests specific claims requested
      by the resource provider

      in the form of a claims_challenge directive in the www-authenticate header to
      be

      returned from the UserInfo Endpoint and/or in the ID Token and/or Access Token.

      It is a string of a JSON object which contains lists of claims being requested
      from these locations.'
    defaultValue: None
  return:
    description: The authorization url as a string.
- uid: msal.application.ClientApplication.initiate_auth_code_flow
  name: initiate_auth_code_flow
  summary: 'Initiate an auth code flow.


    Later when the response reaches your redirect_uri,

    you can use <xref:msal.application.ClientApplication.acquire_token_by_auth_code_flow>

    to complete the authentication/authorization.'
  signature: initiate_auth_code_flow(scopes, redirect_uri=None, state=None, prompt=None,
    login_hint=None, domain_hint=None, claims_challenge=None)
  parameters:
  - name: scope
    description: 'It is a list of case-sensitive strings.'
    isRequired: true
    types:
    - <xref:list>
  - name: redirect_uri
    description: 'Optional. If not specified, server will use the pre-registered one.'
    defaultValue: None
    types:
    - <xref:str>
  - name: state
    description: 'An opaque value used by the client to

      maintain state between the request and callback.

      If absent, this library will automatically generate one internally.'
    defaultValue: None
    types:
    - <xref:str>
  - name: prompt
    description: 'By default, no prompt value will be sent, not even "none".

      You will have to specify a value explicitly.

      Its valid values are defined in Open ID Connect specs

      [https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)'
    defaultValue: None
    types:
    - <xref:str>
  - name: login_hint
    description: Optional. Identifier of the user. Generally a User Principal Name
      (UPN).
    defaultValue: None
    types:
    - <xref:str>
  - name: domain_hint
    description: 'Can be one of "consumers" or "organizations" or your tenant domain
      "contoso.com".

      If included, it will skip the email-based discovery process that user goes

      through on the sign-in page, leading to a slightly more streamlined user experience.

      More information on possible values

      [here](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow#request-an-authorization-code)
      and

      [here](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-oapx/86fb452d-e34a-494e-ac61-e526e263b6d8).'
    defaultValue: None
  - name: claims_challenge
    defaultValue: None
  return:
    description: "The auth code flow. It is a dict in this form:\n\n<!-- literal_block\
      \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
      : [], \"xml:space\": \"preserve\"} -->\n\n````\n\n   {\n       \"auth_uri\"\
      : \"https://...\",  // Guide user to visit this\n       \"state\": \"...\",\
      \  // You may choose to verify it by yourself,\n                        // or\
      \ just let acquire_token_by_auth_code_flow()\n                        // do\
      \ that for you.\n       \"...\": \"...\",  // Everything else are reserved and\
      \ internal\n   }\n   ````\n\nThe caller is expected to:\n\n1. somehow store\
      \ this content, typically inside the current session, \n\n2. guide the end user\
      \ (i.e. resource owner) to visit that auth_uri, \n\n3. and then relay this dict\
      \ and subsequent auth response to <xref:msal.application.ClientApplication.acquire_token_by_auth_code_flow>."
- uid: msal.application.ClientApplication.remove_account
  name: remove_account
  summary: Sign me out and forget me from token cache
  signature: remove_account(account)
  parameters:
  - name: account
    isRequired: true
attributes:
- uid: msal.application.ClientApplication.ACQUIRE_TOKEN_BY_AUTHORIZATION_CODE_ID
  name: ACQUIRE_TOKEN_BY_AUTHORIZATION_CODE_ID
  signature: ACQUIRE_TOKEN_BY_AUTHORIZATION_CODE_ID = '832'
- uid: msal.application.ClientApplication.ACQUIRE_TOKEN_BY_DEVICE_FLOW_ID
  name: ACQUIRE_TOKEN_BY_DEVICE_FLOW_ID
  signature: ACQUIRE_TOKEN_BY_DEVICE_FLOW_ID = '622'
- uid: msal.application.ClientApplication.ACQUIRE_TOKEN_BY_REFRESH_TOKEN
  name: ACQUIRE_TOKEN_BY_REFRESH_TOKEN
  signature: ACQUIRE_TOKEN_BY_REFRESH_TOKEN = '85'
- uid: msal.application.ClientApplication.ACQUIRE_TOKEN_BY_USERNAME_PASSWORD_ID
  name: ACQUIRE_TOKEN_BY_USERNAME_PASSWORD_ID
  signature: ACQUIRE_TOKEN_BY_USERNAME_PASSWORD_ID = '301'
- uid: msal.application.ClientApplication.ACQUIRE_TOKEN_FOR_CLIENT_ID
  name: ACQUIRE_TOKEN_FOR_CLIENT_ID
  signature: ACQUIRE_TOKEN_FOR_CLIENT_ID = '730'
- uid: msal.application.ClientApplication.ACQUIRE_TOKEN_INTERACTIVE
  name: ACQUIRE_TOKEN_INTERACTIVE
  signature: ACQUIRE_TOKEN_INTERACTIVE = '169'
- uid: msal.application.ClientApplication.ACQUIRE_TOKEN_ON_BEHALF_OF_ID
  name: ACQUIRE_TOKEN_ON_BEHALF_OF_ID
  signature: ACQUIRE_TOKEN_ON_BEHALF_OF_ID = '523'
- uid: msal.application.ClientApplication.ACQUIRE_TOKEN_SILENT_ID
  name: ACQUIRE_TOKEN_SILENT_ID
  signature: ACQUIRE_TOKEN_SILENT_ID = '84'
- uid: msal.application.ClientApplication.GET_ACCOUNTS_ID
  name: GET_ACCOUNTS_ID
  signature: GET_ACCOUNTS_ID = '902'
- uid: msal.application.ClientApplication.REMOVE_ACCOUNT_ID
  name: REMOVE_ACCOUNT_ID
  signature: REMOVE_ACCOUNT_ID = '903'
