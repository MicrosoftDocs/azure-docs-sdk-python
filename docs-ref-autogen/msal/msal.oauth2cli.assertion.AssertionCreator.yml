### YamlMime:PythonClass
uid: msal.oauth2cli.assertion.AssertionCreator
name: AssertionCreator
fullName: msal.oauth2cli.assertion.AssertionCreator
module: msal.oauth2cli.assertion
inheritances:
- builtins.object
constructor:
  syntax: AssertionCreator()
methods:
- uid: msal.oauth2cli.assertion.AssertionCreator.create_normal_assertion
  name: create_normal_assertion
  summary: 'Create an assertion in bytes, based on the provided claims.


    All parameter names are defined in [https://tools.ietf.org/html/rfc7521#section-5](https://tools.ietf.org/html/rfc7521#section-5)

    except the expires_in is defined here as lifetime-in-seconds,

    which will be automatically translated into expires_at in UTC.'
  signature: create_normal_assertion(audience, issuer, subject, expires_at=None, expires_in=600,
    issued_at=None, assertion_id=None, **kwargs)
  parameters:
  - name: audience
    isRequired: true
  - name: issuer
    isRequired: true
  - name: subject
    isRequired: true
  - name: expires_at
    defaultValue: None
  - name: expires_in
    defaultValue: '600'
  - name: issued_at
    defaultValue: None
  - name: assertion_id
    defaultValue: None
- uid: msal.oauth2cli.assertion.AssertionCreator.create_regenerative_assertion
  name: create_regenerative_assertion
  summary: 'Create an assertion as a callable,

    which will then compute the assertion later when necessary.


    This is a useful optimization to reuse the client assertion.'
  signature: create_regenerative_assertion(audience, issuer, subject=None, expires_in=600,
    **kwargs)
  parameters:
  - name: audience
    isRequired: true
  - name: issuer
    isRequired: true
  - name: subject
    defaultValue: None
  - name: expires_in
    defaultValue: '600'
