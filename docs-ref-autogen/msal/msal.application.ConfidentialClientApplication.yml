### YamlMime:PythonClass
uid: msal.application.ConfidentialClientApplication
name: ConfidentialClientApplication
fullName: msal.application.ConfidentialClientApplication
module: msal.application
inheritances:
- msal.application.ClientApplication
constructor:
  syntax: ConfidentialClientApplication(client_id, client_credential=None, authority=None,
    validate_authority=True, token_cache=None, http_client=None, verify=True, proxies=None,
    timeout=None, client_claims=None, app_name=None, app_version=None, client_capabilities=None,
    azure_region=None, exclude_scopes=None)
methods:
- uid: msal.application.ConfidentialClientApplication.acquire_token_for_client
  name: acquire_token_for_client
  summary: Acquires token for the current confidential client, not for an end user.
  signature: acquire_token_for_client(scopes, claims_challenge=None, **kwargs)
  parameters:
  - name: scopes
    description: '(Required)

      Scopes requested to access a protected API (a resource).'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
  - name: claims_challenge
    description: 'The claims_challenge parameter requests specific claims requested
      by the resource provider

      in the form of a claims_challenge directive in the www-authenticate header to
      be

      returned from the UserInfo Endpoint and/or in the ID Token and/or Access Token.

      It is a string of a JSON object which contains lists of claims being requested
      from these locations.'
    isRequired: true
    defaultValue: None
  return:
    description: "A dict representing the json response from AAD:\n\n* A successful\
      \ response would contain \"access_token\" key, \n\n* an error response would\
      \ contain \"error\" and usually \"error_description\"."
- uid: msal.application.ConfidentialClientApplication.acquire_token_on_behalf_of
  name: acquire_token_on_behalf_of
  summary: 'Acquires token using on-behalf-of (OBO) flow.


    The current app is a middle-tier service which was called with a token

    representing an end user.

    The current app can use such token (a.k.a. a user assertion) to request

    another token to access downstream web API, on behalf of that user.

    See [detail docs here](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow)
    .


    The current middle-tier app has no user interaction to obtain consent.

    See how to gain consent upfront for your middle-tier app from this article.

    [https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#gaining-consent-for-the-middle-tier-application](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#gaining-consent-for-the-middle-tier-application)'
  signature: acquire_token_on_behalf_of(user_assertion, scopes, claims_challenge=None,
    **kwargs)
  parameters:
  - name: user_assertion
    description: The incoming token already received by this app
    isRequired: true
    types:
    - <xref:str>
  - name: scopes
    description: Scopes required by downstream API (a resource).
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
  - name: claims_challenge
    description: 'The claims_challenge parameter requests specific claims requested
      by the resource provider

      in the form of a claims_challenge directive in the www-authenticate header to
      be

      returned from the UserInfo Endpoint and/or in the ID Token and/or Access Token.

      It is a string of a JSON object which contains lists of claims being requested
      from these locations.'
    isRequired: true
    defaultValue: None
  return:
    description: "A dict representing the json response from AAD:\n\n* A successful\
      \ response would contain \"access_token\" key, \n\n* an error response would\
      \ contain \"error\" and usually \"error_description\"."
