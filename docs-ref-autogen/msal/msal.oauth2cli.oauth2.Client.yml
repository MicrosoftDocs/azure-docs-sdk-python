### YamlMime:UniversalReference
api_name: []
items:
- children:
  - msal.oauth2cli.oauth2.Client.build_auth_request_uri
  - msal.oauth2cli.oauth2.Client.initiate_device_flow
  - msal.oauth2cli.oauth2.Client.obtain_token_by_assertion
  - msal.oauth2cli.oauth2.Client.obtain_token_by_authorization_code
  - msal.oauth2cli.oauth2.Client.obtain_token_by_device_flow
  - msal.oauth2cli.oauth2.Client.obtain_token_by_refresh_token
  - msal.oauth2cli.oauth2.Client.obtain_token_by_username_password
  - msal.oauth2cli.oauth2.Client.obtain_token_for_client
  - msal.oauth2cli.oauth2.Client.parse_auth_response
  - msal.oauth2cli.oauth2.Client.DEVICE_FLOW
  - msal.oauth2cli.oauth2.Client.DEVICE_FLOW_RETRIABLE_ERRORS
  - msal.oauth2cli.oauth2.Client.GRANT_TYPE_JWT
  - msal.oauth2cli.oauth2.Client.GRANT_TYPE_SAML2
  - msal.oauth2cli.oauth2.Client.grant_assertion_encoders
  class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msal.oauth2cli.oauth2.BaseClient
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: Client
  summary: 'This is the main API for oauth2 client.


    Its methods define and document parameters mentioned in OAUTH2 RFC 6749.'
  syntax:
    content: Client(server_configuration, client_id, on_obtaining_tokens=<function
      Client.<lambda>>, on_removing_rt=<function Client.<lambda>>, on_updating_rt=<function
      Client.<lambda>>, **kwargs)
  type: class
  uid: msal.oauth2cli.oauth2.Client
- class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client.build_auth_request_uri
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: build_auth_request_uri(response_type, redirect_uri=None, scope=None, state=None,
    **kwargs)
  namewithoutparameters: build_auth_request_uri
  summary: 'Generate an authorization uri to be visited by resource owner.


    Later when the response reaches your redirect_uri,

    you can use parse_auth_response() to check the returned state.


    This method could be named build_authorization_request_uri() instead,

    but then there would be a build_authentication_request_uri() in the OIDC

    subclass doing almost the same thing. So we use a loose term "auth" here.'
  syntax:
    content: build_auth_request_uri(response_type, redirect_uri=None, scope=None,
      state=None, **kwargs)
    parameters:
    - description: 'Must be "code" when you are using Authorization Code Grant,

        "token" when you are using Implicit Grant, or other

        (possibly space-delimited) strings as registered extension value.

        See [https://tools.ietf.org/html/rfc6749#section-3.1.1](https://tools.ietf.org/html/rfc6749#section-3.1.1)'
      id: response_type
      isRequired: true
    - defaultValue: None
      description: Optional. Server will use the pre-registered one.
      id: redirect_uri
    - defaultValue: None
      description: 'It is a space-delimited, case-sensitive string.

        Some ID provider can accept empty string to represent default scope.'
      id: scope
    - defaultValue: None
      description: 'Recommended. An opaque value used by the client to

        maintain state between the request and callback.'
      id: state
    - description: Other parameters, typically defined in OpenID Connect.
      id: kwargs
      isRequired: true
  type: method
  uid: msal.oauth2cli.oauth2.Client.build_auth_request_uri
- class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client.initiate_device_flow
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: initiate_device_flow(scope=None, **kwargs)
  namewithoutparameters: initiate_device_flow
  summary: 'Initiate a device flow.


    Returns the data defined in Device Flow specs.

    [https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.2](https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.2)


    You should then orchestrate the User Interaction as defined in here

    [https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.3](https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.3)


    And possibly here

    [https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.3.1](https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.3.1)'
  syntax:
    content: initiate_device_flow(scope=None, **kwargs)
    parameters:
    - defaultValue: None
      id: scope
  type: method
  uid: msal.oauth2cli.oauth2.Client.initiate_device_flow
- class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client.obtain_token_by_assertion
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: obtain_token_by_assertion(assertion, grant_type, scope=None, **kwargs)
  namewithoutparameters: obtain_token_by_assertion
  summary: 'This method implements Assertion Framework for OAuth2 (RFC 7521).

    See details at [https://tools.ietf.org/html/rfc7521#section-4.1](https://tools.ietf.org/html/rfc7521#section-4.1)'
  syntax:
    content: obtain_token_by_assertion(assertion, grant_type, scope=None, **kwargs)
    parameters:
    - description: The assertion bytes can be a raw SAML2 assertion, or a JWT assertion.
      id: assertion
      isRequired: true
    - description: 'It is typically either the value of <xref:msal.oauth2cli.oauth2.Client.GRANT_TYPE_SAML2>,

        or <xref:msal.oauth2cli.oauth2.Client.GRANT_TYPE_JWT>, the only two profiles
        defined in RFC 7521.'
      id: grant_type
      isRequired: true
    - defaultValue: None
      description: Optional. It must be a subset of previously granted scopes.
      id: scope
  type: method
  uid: msal.oauth2cli.oauth2.Client.obtain_token_by_assertion
- class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client.obtain_token_by_authorization_code
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: obtain_token_by_authorization_code(code, redirect_uri=None, scope=None, **kwargs)
  namewithoutparameters: obtain_token_by_authorization_code
  summary: 'Get a token via authorization code. a.k.a. Authorization Code Grant.


    This is typically used by a server-side app (Confidential Client),

    but it can also be used by a device-side native app (Public Client).

    See more detail at [https://tools.ietf.org/html/rfc6749#section-4.1.3](https://tools.ietf.org/html/rfc6749#section-4.1.3)'
  syntax:
    content: obtain_token_by_authorization_code(code, redirect_uri=None, scope=None,
      **kwargs)
    parameters:
    - description: The authorization code received from authorization server.
      id: code
      isRequired: true
    - defaultValue: None
      description: 'Required, if the "redirect_uri" parameter was included in the

        authorization request, and their values MUST be identical.'
      id: redirect_uri
    - defaultValue: None
      description: 'It is both unnecessary and harmless to use scope here, per RFC
        6749.

        We suggest to use the same scope already used in auth request uri,

        so that this library can link the obtained tokens with their scope.'
      id: scope
  type: method
  uid: msal.oauth2cli.oauth2.Client.obtain_token_by_authorization_code
- class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client.obtain_token_by_device_flow
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: obtain_token_by_device_flow(flow, exit_condition=<function Client.<lambda>>,
    **kwargs)
  namewithoutparameters: obtain_token_by_device_flow
  summary: Obtain token by a device flow object, with customizable polling effect.
  syntax:
    content: obtain_token_by_device_flow(flow, exit_condition=<function Client.<lambda>>,
      **kwargs)
    parameters:
    - description: 'An object previously generated by initiate_device_flow(...).

        Its content WILL BE CHANGED by this method during each run.

        We share this object with you, so that you could implement

        your own loop, should you choose to do so.'
      id: flow
      isRequired: true
      type:
      - dict
    - defaultValue: <function Client.<lambda> at 0x0000021C36DBAF28>
      description: "This method implements a loop to provide polling effect.\nThe\
        \ loop's exit condition is calculated by this callback.\n\nThe default callback\
        \ makes the loop run until the flow expires.\nTherefore, one of the ways to\
        \ exit the polling early,\nis to change the flow[\"expires_at\"] to a small\
        \ number such as 0.\n\nIn case you are doing async programming, you may want\
        \ to\ncompletely turn off the loop. You can do so by using a callback as:\n\
        \n   exit_condition = lambda flow: True\n\nto make the loop run only once,\
        \ i.e. no polling, hence non-block."
      id: exit_condition
      type:
      - Callable
  type: method
  uid: msal.oauth2cli.oauth2.Client.obtain_token_by_device_flow
- class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client.obtain_token_by_refresh_token
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: obtain_token_by_refresh_token(token_item, scope=None, rt_getter=<function
    Client.<lambda>>, on_removing_rt=None, on_updating_rt=None, **kwargs)
  namewithoutparameters: obtain_token_by_refresh_token
  summary: This is an overload which will trigger token storage callbacks.
  syntax:
    content: obtain_token_by_refresh_token(token_item, scope=None, rt_getter=<function
      Client.<lambda>>, on_removing_rt=None, on_updating_rt=None, **kwargs)
    parameters:
    - description: 'A refresh token (RT) item, in flexible format. It can be a string,

        or a whatever data structure containing RT string and its metadata,

        in such case the *rt_getter* callable must be able to

        extract the RT string out from the token item data structure.


        Either way, this token_item will be passed into other callbacks as-is.'
      id: token_item
      isRequired: true
    - defaultValue: None
      description: 'If omitted, is treated as equal to the scope originally

        granted by the resource owner,

        according to [https://tools.ietf.org/html/rfc6749#section-6](https://tools.ietf.org/html/rfc6749#section-6)'
      id: scope
    - defaultValue: <function Client.<lambda> at 0x0000021C36E14620>
      description: A callable to translate the token_item to a raw RT string
      id: rt_getter
    - defaultValue: None
      description: If absent, fall back to the one defined in initialization
      id: on_removing_rt
    - defaultValue: None
      description: 'Default to None, it will fall back to the one defined in initialization.

        This is the most common case.


        As a special case, you can pass in a False,

        then this function will NOT trigger on_updating_rt() for RT UPDATE,

        instead it will allow the RT to be added by on_obtaining_tokens().

        This behavior is useful when you are migrating RTs from elsewhere

        into a token storage managed by this library.'
      id: on_updating_rt
  type: method
  uid: msal.oauth2cli.oauth2.Client.obtain_token_by_refresh_token
- class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client.obtain_token_by_username_password
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: obtain_token_by_username_password(username, password, scope=None, **kwargs)
  namewithoutparameters: obtain_token_by_username_password
  summary: The Resource Owner Password Credentials Grant, used by legacy app.
  syntax:
    content: obtain_token_by_username_password(username, password, scope=None, **kwargs)
    parameters:
    - id: username
      isRequired: true
    - id: password
      isRequired: true
    - defaultValue: None
      id: scope
  type: method
  uid: msal.oauth2cli.oauth2.Client.obtain_token_by_username_password
- class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client.obtain_token_for_client
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: obtain_token_for_client(scope=None, **kwargs)
  namewithoutparameters: obtain_token_for_client
  summary: 'Obtain token for this client (rather than for an end user),

    a.k.a. the Client Credentials Grant, used by Backend Applications.


    We don''t name it obtain_token_by_client_credentials(...) because those

    credentials are typically already provided in class constructor, not here.

    You can still explicitly provide an optional client_secret parameter,

    or you can provide such extra parameters as *default_body* during the

    class initialization.'
  syntax:
    content: obtain_token_for_client(scope=None, **kwargs)
    parameters:
    - defaultValue: None
      id: scope
  type: method
  uid: msal.oauth2cli.oauth2.Client.obtain_token_for_client
- class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client.parse_auth_response
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: parse_auth_response(params, state=None)
  namewithoutparameters: parse_auth_response
  summary: Parse the authorization response being redirected back.
  syntax:
    content: parse_auth_response(params, state=None)
    parameters:
    - description: A string or dict of the query string
      id: params
      isRequired: true
    - defaultValue: None
      description: 'REQUIRED if the state parameter was present in the client

        authorization request. This function will compare it with response.'
      id: state
  type: method
  uid: msal.oauth2cli.oauth2.Client.parse_auth_response
- class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client.DEVICE_FLOW
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: DEVICE_FLOW
  syntax:
    content: 'DEVICE_FLOW = {''GRANT_TYPE'': ''urn:ietf:params:oauth:grant-type:device_code'',
      ''DEVICE_CODE'': ''device_code''}'
  type: attribute
  uid: msal.oauth2cli.oauth2.Client.DEVICE_FLOW
- class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client.DEVICE_FLOW_RETRIABLE_ERRORS
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: DEVICE_FLOW_RETRIABLE_ERRORS
  syntax:
    content: DEVICE_FLOW_RETRIABLE_ERRORS = ('authorization_pending', 'slow_down')
  type: attribute
  uid: msal.oauth2cli.oauth2.Client.DEVICE_FLOW_RETRIABLE_ERRORS
- class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client.GRANT_TYPE_JWT
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: GRANT_TYPE_JWT
  syntax:
    content: GRANT_TYPE_JWT = 'urn:ietf:params:oauth:grant-type:jwt-bearer'
  type: attribute
  uid: msal.oauth2cli.oauth2.Client.GRANT_TYPE_JWT
- class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client.GRANT_TYPE_SAML2
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: GRANT_TYPE_SAML2
  syntax:
    content: GRANT_TYPE_SAML2 = 'urn:ietf:params:oauth:grant-type:saml2-bearer'
  type: attribute
  uid: msal.oauth2cli.oauth2.Client.GRANT_TYPE_SAML2
- class: msal.oauth2cli.oauth2.Client
  fullName: msal.oauth2cli.oauth2.Client.grant_assertion_encoders
  langs:
  - python
  module: msal.oauth2cli.oauth2
  name: grant_assertion_encoders
  syntax:
    content: 'grant_assertion_encoders = {''urn:ietf:params:oauth:grant-type:saml2-bearer'':
      <function BaseClient.encode_saml_assertion>}'
  type: attribute
  uid: msal.oauth2cli.oauth2.Client.grant_assertion_encoders
references:
- fullName: msal.oauth2cli.oauth2.Client.build_auth_request_uri
  isExternal: false
  name: build_auth_request_uri(response_type, redirect_uri=None, scope=None, state=None,
    **kwargs)
  parent: msal.oauth2cli.oauth2.Client
  uid: msal.oauth2cli.oauth2.Client.build_auth_request_uri
- fullName: msal.oauth2cli.oauth2.Client.initiate_device_flow
  isExternal: false
  name: initiate_device_flow(scope=None, **kwargs)
  parent: msal.oauth2cli.oauth2.Client
  uid: msal.oauth2cli.oauth2.Client.initiate_device_flow
- fullName: msal.oauth2cli.oauth2.Client.obtain_token_by_assertion
  isExternal: false
  name: obtain_token_by_assertion(assertion, grant_type, scope=None, **kwargs)
  parent: msal.oauth2cli.oauth2.Client
  uid: msal.oauth2cli.oauth2.Client.obtain_token_by_assertion
- fullName: msal.oauth2cli.oauth2.Client.obtain_token_by_authorization_code
  isExternal: false
  name: obtain_token_by_authorization_code(code, redirect_uri=None, scope=None, **kwargs)
  parent: msal.oauth2cli.oauth2.Client
  uid: msal.oauth2cli.oauth2.Client.obtain_token_by_authorization_code
- fullName: msal.oauth2cli.oauth2.Client.obtain_token_by_device_flow
  isExternal: false
  name: obtain_token_by_device_flow(flow, exit_condition=<function Client.<lambda>>,
    **kwargs)
  parent: msal.oauth2cli.oauth2.Client
  uid: msal.oauth2cli.oauth2.Client.obtain_token_by_device_flow
- fullName: msal.oauth2cli.oauth2.Client.obtain_token_by_refresh_token
  isExternal: false
  name: obtain_token_by_refresh_token(token_item, scope=None, rt_getter=<function
    Client.<lambda>>, on_removing_rt=None, on_updating_rt=None, **kwargs)
  parent: msal.oauth2cli.oauth2.Client
  uid: msal.oauth2cli.oauth2.Client.obtain_token_by_refresh_token
- fullName: msal.oauth2cli.oauth2.Client.obtain_token_by_username_password
  isExternal: false
  name: obtain_token_by_username_password(username, password, scope=None, **kwargs)
  parent: msal.oauth2cli.oauth2.Client
  uid: msal.oauth2cli.oauth2.Client.obtain_token_by_username_password
- fullName: msal.oauth2cli.oauth2.Client.obtain_token_for_client
  isExternal: false
  name: obtain_token_for_client(scope=None, **kwargs)
  parent: msal.oauth2cli.oauth2.Client
  uid: msal.oauth2cli.oauth2.Client.obtain_token_for_client
- fullName: msal.oauth2cli.oauth2.Client.parse_auth_response
  isExternal: false
  name: parse_auth_response(params, state=None)
  parent: msal.oauth2cli.oauth2.Client
  uid: msal.oauth2cli.oauth2.Client.parse_auth_response
- fullName: msal.oauth2cli.oauth2.Client.DEVICE_FLOW
  isExternal: false
  name: DEVICE_FLOW
  parent: msal.oauth2cli.oauth2.Client
  uid: msal.oauth2cli.oauth2.Client.DEVICE_FLOW
- fullName: msal.oauth2cli.oauth2.Client.DEVICE_FLOW_RETRIABLE_ERRORS
  isExternal: false
  name: DEVICE_FLOW_RETRIABLE_ERRORS
  parent: msal.oauth2cli.oauth2.Client
  uid: msal.oauth2cli.oauth2.Client.DEVICE_FLOW_RETRIABLE_ERRORS
- fullName: msal.oauth2cli.oauth2.Client.GRANT_TYPE_JWT
  isExternal: false
  name: GRANT_TYPE_JWT
  parent: msal.oauth2cli.oauth2.Client
  uid: msal.oauth2cli.oauth2.Client.GRANT_TYPE_JWT
- fullName: msal.oauth2cli.oauth2.Client.GRANT_TYPE_SAML2
  isExternal: false
  name: GRANT_TYPE_SAML2
  parent: msal.oauth2cli.oauth2.Client
  uid: msal.oauth2cli.oauth2.Client.GRANT_TYPE_SAML2
- fullName: msal.oauth2cli.oauth2.Client.grant_assertion_encoders
  isExternal: false
  name: grant_assertion_encoders
  parent: msal.oauth2cli.oauth2.Client
  uid: msal.oauth2cli.oauth2.Client.grant_assertion_encoders
