### YamlMime:PythonClass
uid: msal.oauth2cli.oauth2.Client
name: Client
fullName: msal.oauth2cli.oauth2.Client
module: msal.oauth2cli.oauth2
inheritances:
- msal.oauth2cli.oauth2.BaseClient
summary: 'This is the main API for oauth2 client.


  Its methods define and document parameters mentioned in OAUTH2 RFC 6749.'
constructor:
  syntax: Client(server_configuration, client_id, on_obtaining_tokens=<function Client.<lambda>>,
    on_removing_rt=<function Client.<lambda>>, on_updating_rt=<function Client.<lambda>>,
    **kwargs)
methods:
- uid: msal.oauth2cli.oauth2.Client.build_auth_request_uri
  name: build_auth_request_uri
  summary: 'Generate an authorization uri to be visited by resource owner.


    Parameters are the same as another method <xref:msal.oauth2cli.oauth2.Client.initiate_auth_code_flow>,

    whose functionality is a superset of this method.'
  signature: build_auth_request_uri(response_type, redirect_uri=None, scope=None,
    state=None, **kwargs)
  parameters:
  - name: response_type
    isRequired: true
  - name: redirect_uri
    defaultValue: None
  - name: scope
    defaultValue: None
  - name: state
    defaultValue: None
  return:
    description: The auth uri as a string.
- uid: msal.oauth2cli.oauth2.Client.initiate_auth_code_flow
  name: initiate_auth_code_flow
  summary: 'Initiate an auth code flow.


    Later when the response reaches your redirect_uri,

    you can use <xref:msal.oauth2cli.oauth2.Client.obtain_token_by_auth_code_flow>

    to complete the authentication/authorization.


    This method also provides PKCE protection automatically.'
  signature: initiate_auth_code_flow(scope=None, redirect_uri=None, state=None, **kwargs)
  parameters:
  - name: scope
    description: 'It is a list of case-sensitive strings.

      Some ID provider can accept empty string to represent default scope.'
    defaultValue: None
    types:
    - <xref:list>
  - name: redirect_uri
    description: Optional. If not specified, server will use the pre-registered one.
    defaultValue: None
    types:
    - <xref:str>
  - name: state
    description: 'An opaque value used by the client to

      maintain state between the request and callback.

      If absent, this library will automatically generate one internally.'
    defaultValue: None
    types:
    - <xref:str>
  - name: kwargs
    description: Other parameters, typically defined in OpenID Connect.
    isRequired: true
  return:
    description: "The auth code flow. It is a dict in this form:\n\n<!-- literal_block\
      \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
      : [], \"xml:space\": \"preserve\", \"language\": \"default\", \"force\": false,\
      \ \"linenos\": false} -->\n\n````default\n\n   {\n       \"auth_uri\": \"https://...\"\
      ,  // Guide user to visit this\n       \"state\": \"...\",  // You may choose\
      \ to verify it by yourself,\n                        // or just let obtain_token_by_auth_code_flow()\n\
      \                        // do that for you.\n       \"...\": \"...\",  // Everything\
      \ else are reserved and internal\n   }\n   ````\n\nThe caller is expected to:\n\
      \n1. somehow store this content, typically inside the current session, \n\n\
      2. guide the end user (i.e. resource owner) to visit that auth_uri, \n\n3. and\
      \ then relay this dict and subsequent auth response to <xref:msal.oauth2cli.oauth2.Client.obtain_token_by_auth_code_flow>."
- uid: msal.oauth2cli.oauth2.Client.initiate_device_flow
  name: initiate_device_flow
  summary: 'Initiate a device flow.


    Returns the data defined in Device Flow specs.

    [https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.2](https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.2)


    You should then orchestrate the User Interaction as defined in here

    [https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.3](https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.3)


    And possibly here

    [https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.3.1](https://tools.ietf.org/html/draft-ietf-oauth-device-flow-12#section-3.3.1)'
  signature: 'initiate_device_flow(scope: Optional[list] = None, **kwargs: dict) ->
    dict'
  parameters:
  - name: scope
    defaultValue: None
- uid: msal.oauth2cli.oauth2.Client.obtain_token_by_assertion
  name: obtain_token_by_assertion
  summary: 'This method implements Assertion Framework for OAuth2 (RFC 7521).

    See details at [https://tools.ietf.org/html/rfc7521#section-4.1](https://tools.ietf.org/html/rfc7521#section-4.1)'
  parameters:
  - name: assertion
    description: The assertion bytes can be a raw SAML2 assertion, or a JWT assertion.
    isRequired: true
  - name: grant_type
    description: 'It is typically either the value of <xref:msal.oauth2cli.oauth2.Client.GRANT_TYPE_SAML2>,

      or <xref:msal.oauth2cli.oauth2.Client.GRANT_TYPE_JWT>, the only two profiles
      defined in RFC 7521.'
    isRequired: true
  - name: scope
    description: Optional. It must be a subset of previously granted scopes.
    defaultValue: None
- uid: msal.oauth2cli.oauth2.Client.obtain_token_by_auth_code_flow
  name: obtain_token_by_auth_code_flow
  summary: 'With the auth_response being redirected back,

    validate it against auth_code_flow, and then obtain tokens.


    Internally, it implements PKCE to mitigate the auth code interception attack.'
  signature: obtain_token_by_auth_code_flow(auth_code_flow, auth_response, scope=None,
    **kwargs)
  parameters:
  - name: auth_code_flow
    description: The same dict returned by <xref:msal.oauth2cli.oauth2.Client.initiate_auth_code_flow>.
    isRequired: true
    types:
    - <xref:dict>
  - name: auth_response
    description: A dict based on query string received from auth server.
    isRequired: true
    types:
    - <xref:dict>
  - name: scope
    description: 'You don''t usually need to use scope parameter here.

      Some Identity Provider allows you to provide

      a subset of what you specified during <xref:msal.oauth2cli.oauth2.Client.initiate_auth_code_flow>.'
    defaultValue: None
    types:
    - <xref:collections.Iterable>[<xref:str>]
  return:
    description: "* A dict containing \"access_token\" and/or \"id_token\", among\
      \ others, depends on what scope was used. (See [https://tools.ietf.org/html/rfc6749#section-5.1](https://tools.ietf.org/html/rfc6749#section-5.1))\
      \ \n\n* A dict containing \"error\", optionally \"error_description\", \"error_uri\"\
      . (It is either [this](https://tools.ietf.org/html/rfc6749#section-4.1.2.1)\
      \ or [that](https://tools.ietf.org/html/rfc6749#section-5.2) \n\n* Most client-side\
      \ data error would result in ValueError exception. So the usage pattern could\
      \ be without any protocol details: \n\n  <!-- literal_block {\"ids\": [], \"\
      classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\"\
      : \"preserve\", \"language\": \"default\", \"force\": false, \"linenos\": false}\
      \ -->\n\n  ````default\n\n     def authorize():  # A controller in a web app\n\
      \         try:\n             result = client.obtain_token_by_auth_code_flow(\n\
      \                 session.get(\"flow\", {}), auth_resp)\n             if \"\
      error\" in result:\n                 return render_template(\"error.html\",\
      \ result)\n             store_tokens()\n         except ValueError:  # Usually\
      \ caused by CSRF\n             pass  # Simply ignore them\n         return redirect(url_for(\"\
      index\"))\n     ````"
- uid: msal.oauth2cli.oauth2.Client.obtain_token_by_authorization_code
  name: obtain_token_by_authorization_code
  summary: 'Get a token via authorization code. a.k.a. Authorization Code Grant.


    This is typically used by a server-side app (Confidential Client),

    but it can also be used by a device-side native app (Public Client).

    See more detail at [https://tools.ietf.org/html/rfc6749#section-4.1.3](https://tools.ietf.org/html/rfc6749#section-4.1.3)


    You are encouraged to use its higher level method

    <xref:msal.oauth2cli.oauth2.Client.obtain_token_by_auth_code_flow> instead.'
  signature: obtain_token_by_authorization_code(code, redirect_uri=None, scope=None,
    **kwargs)
  parameters:
  - name: code
    description: The authorization code received from authorization server.
    isRequired: true
  - name: redirect_uri
    description: 'Required, if the "redirect_uri" parameter was included in the

      authorization request, and their values MUST be identical.'
    defaultValue: None
  - name: scope
    description: 'It is both unnecessary and harmless to use scope here, per RFC 6749.

      We suggest to use the same scope already used in auth request uri,

      so that this library can link the obtained tokens with their scope.'
    defaultValue: None
- uid: msal.oauth2cli.oauth2.Client.obtain_token_by_browser
  name: obtain_token_by_browser
  summary: 'A native app can use this method to obtain token via a local browser.


    Internally, it implements PKCE to mitigate the auth code interception attack.'
  signature: obtain_token_by_browser(redirect_uri=None, auth_code_receiver=None, **kwargs)
  parameters:
  - name: scope
    description: A list of scopes that you would like to obtain token for.
    defaultValue: None
    types:
    - <xref:collections.Iterable>[<xref:str>]
  - name: extra_scope_to_consent
    description: 'Some IdP allows you to include more scopes for end user to consent.

      The access token returned by this method will NOT include those scopes,

      but the refresh token would record those extra consent,

      so that your future <xref:msal.oauth2cli.oauth2.Client.obtain_token_by_refresh_token>
      call

      would be able to obtain token for those additional scopes, silently.'
    defaultValue: None
  - name: redirect_uri
    description: 'The redirect_uri to be sent via auth request to Identity Provider
      (IdP),

      to indicate where an auth response would come back to.

      Such as `http://127.0.0.1:0` (default) or `http://localhost:1234`.


      If port 0 is specified, this method will choose a system-allocated port,

      then the actual redirect_uri will contain that port.

      To use this behavior, your IdP would need to accept such dynamic port.


      Per HTTP convention, if port number is absent, it would mean port 80,

      although you probably want to specify port 0 in this context.'
    isRequired: true
    types:
    - <xref:string>
  - name: auth_params
    description: These parameters will be sent to authorization_endpoint.
    isRequired: true
    types:
    - <xref:dict>
  - name: timeout
    description: In seconds. None means wait indefinitely.
    isRequired: true
    types:
    - <xref:int>
  - name: browser_name
    description: 'If you did

      `webbrowser.register("xyz", None, BackgroundBrowser("/path/to/browser"))`

      beforehand, you can pass in the name "xyz" to use that browser.

      The default value `None` means using default browser,

      which is customizable by env var $BROWSER.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Same as <xref:msal.oauth2cli.oauth2.Client.obtain_token_by_auth_code_flow>
- uid: msal.oauth2cli.oauth2.Client.obtain_token_by_device_flow
  name: obtain_token_by_device_flow
  summary: Obtain token by a device flow object, with customizable polling effect.
  parameters:
  - name: flow
    description: 'An object previously generated by initiate_device_flow(...).

      Its content WILL BE CHANGED by this method during each run.

      We share this object with you, so that you could implement

      your own loop, should you choose to do so.'
    isRequired: true
    types:
    - <xref:dict>
  - name: exit_condition
    description: "This method implements a loop to provide polling effect.\nThe loop's\
      \ exit condition is calculated by this callback.\n\nThe default callback makes\
      \ the loop run until the flow expires.\nTherefore, one of the ways to exit the\
      \ polling early,\nis to change the flow[\"expires_at\"] to a small number such\
      \ as 0.\n\nIn case you are doing async programming, you may want to\ncompletely\
      \ turn off the loop. You can do so by using a callback as:\n\n   exit_condition\
      \ = lambda flow: True\n\nto make the loop run only once, i.e. no polling, hence\
      \ non-block."
    defaultValue: <function Client.<lambda> at 0x000002989FDE4820>
    types:
    - <xref:Callable>
- uid: msal.oauth2cli.oauth2.Client.obtain_token_by_refresh_token
  name: obtain_token_by_refresh_token
  summary: This is an overload which will trigger token storage callbacks.
  parameters:
  - name: token_item
    description: 'A refresh token (RT) item, in flexible format. It can be a string,

      or a whatever data structure containing RT string and its metadata,

      in such case the *rt_getter* callable must be able to

      extract the RT string out from the token item data structure.


      Either way, this token_item will be passed into other callbacks as-is.'
    isRequired: true
  - name: scope
    description: 'If omitted, is treated as equal to the scope originally

      granted by the resource owner,

      according to [https://tools.ietf.org/html/rfc6749#section-6](https://tools.ietf.org/html/rfc6749#section-6)'
    defaultValue: None
  - name: rt_getter
    description: A callable to translate the token_item to a raw RT string
    defaultValue: <function Client.<lambda> at 0x000002989FE09280>
  - name: on_removing_rt
    description: If absent, fall back to the one defined in initialization
    defaultValue: None
  - name: on_updating_rt
    description: 'Default to None, it will fall back to the one defined in initialization.

      This is the most common case.


      As a special case, you can pass in a False,

      then this function will NOT trigger on_updating_rt() for RT UPDATE,

      instead it will allow the RT to be added by on_obtaining_tokens().

      This behavior is useful when you are migrating RTs from elsewhere

      into a token storage managed by this library.'
    defaultValue: None
- uid: msal.oauth2cli.oauth2.Client.obtain_token_by_username_password
  name: obtain_token_by_username_password
  summary: The Resource Owner Password Credentials Grant, used by legacy app.
  signature: obtain_token_by_username_password(username, password, scope=None, **kwargs)
  parameters:
  - name: username
    isRequired: true
  - name: password
    isRequired: true
  - name: scope
    defaultValue: None
- uid: msal.oauth2cli.oauth2.Client.obtain_token_for_client
  name: obtain_token_for_client
  summary: 'Obtain token for this client (rather than for an end user),

    a.k.a. the Client Credentials Grant, used by Backend Applications.


    We don''t name it obtain_token_by_client_credentials(...) because those

    credentials are typically already provided in class constructor, not here.

    You can still explicitly provide an optional client_secret parameter,

    or you can provide such extra parameters as *default_body* during the

    class initialization.'
  signature: obtain_token_for_client(scope=None, **kwargs)
  parameters:
  - name: scope
    defaultValue: None
- uid: msal.oauth2cli.oauth2.Client.parse_auth_response
  name: parse_auth_response
  summary: Parse the authorization response being redirected back.
  signature: parse_auth_response(params, state=None)
  parameters:
  - name: params
    description: A string or dict of the query string
    isRequired: true
  - name: state
    description: 'REQUIRED if the state parameter was present in the client

      authorization request. This function will compare it with response.'
    defaultValue: None
attributes:
- uid: msal.oauth2cli.oauth2.Client.DEVICE_FLOW
  name: DEVICE_FLOW
  signature: 'DEVICE_FLOW = {''DEVICE_CODE'': ''device_code'', ''GRANT_TYPE'': ''urn:ietf:params:oauth:grant-type:device_code''}'
- uid: msal.oauth2cli.oauth2.Client.DEVICE_FLOW_RETRIABLE_ERRORS
  name: DEVICE_FLOW_RETRIABLE_ERRORS
  signature: DEVICE_FLOW_RETRIABLE_ERRORS = ('authorization_pending', 'slow_down')
- uid: msal.oauth2cli.oauth2.Client.GRANT_TYPE_JWT
  name: GRANT_TYPE_JWT
  signature: GRANT_TYPE_JWT = 'urn:ietf:params:oauth:grant-type:jwt-bearer'
- uid: msal.oauth2cli.oauth2.Client.GRANT_TYPE_SAML2
  name: GRANT_TYPE_SAML2
  signature: GRANT_TYPE_SAML2 = 'urn:ietf:params:oauth:grant-type:saml2-bearer'
- uid: msal.oauth2cli.oauth2.Client.grant_assertion_encoders
  name: grant_assertion_encoders
  signature: 'grant_assertion_encoders = {''urn:ietf:params:oauth:grant-type:saml2-bearer'':
    <function BaseClient.encode_saml_assertion>}'
