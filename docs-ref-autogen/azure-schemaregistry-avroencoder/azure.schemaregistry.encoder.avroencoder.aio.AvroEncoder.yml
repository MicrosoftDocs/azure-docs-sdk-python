### YamlMime:PythonClass
uid: azure.schemaregistry.encoder.avroencoder.aio.AvroEncoder
name: AvroEncoder
fullName: azure.schemaregistry.encoder.avroencoder.aio.AvroEncoder
module: azure.schemaregistry.encoder.avroencoder.aio
inheritances:
- builtins.object
summary: 'AvroEncoder provides the ability to encode and decode content according

  to the given avro schema. It would automatically register, get, and cache the schema.'
constructor:
  syntax: 'AvroEncoder(**kwargs: Any)'
  keywordOnlyParameters:
  - name: client
    description: 'Required. The schema registry client which is used to register schema

      and retrieve schema from the service.'
    types:
    - <xref:azure.schemaregistry.aio.SchemaRegistryClient>
  - name: group_name
    description: 'Required for encoding. Not used when decoding.

      Schema group under which schema should be registered.'
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: auto_register
    description: 'When true, registers new schemas passed to encode.

      Otherwise, and by default, encode will fail if the schema has not been pre-registered
      in the registry.'
    types:
    - <xref:bool>
methods:
- uid: azure.schemaregistry.encoder.avroencoder.aio.AvroEncoder.close
  name: close
  summary: 'This method is to close the sockets opened by the client.

    It need not be used when using with a context manager.'
  signature: async close() -> None
- uid: azure.schemaregistry.encoder.avroencoder.aio.AvroEncoder.decode
  name: decode
  summary: "Decode bytes content using schema ID in the content type field. *message*\
    \ must be one of the following:\n   1. A object of subtype of the MessageType\
    \ protocol. \n\n   2. A dict {\"content\": ..., \"content_type\": ...}, where\
    \ \"content\" is bytes and \"content_type\" is string. \n\nContent must follow\
    \ format of associated Avro RecordSchema:\n[https://avro.apache.org/docs/1.10.0/gettingstartedpython.html#Defining+a+schema](https://avro.apache.org/docs/1.10.0/gettingstartedpython.html#Defining+a+schema)"
  signature: 'async decode(message: MessageContent | MessageType, *, readers_schema:
    str | None = None, request_options: Dict[str, Any] = None, **kwargs: Any) -> Dict[str,
    Any]'
  parameters:
  - name: message
    description: 'The message object which holds the content to be decoded and content
      type

      containing the schema ID.'
    isRequired: true
    types:
    - <xref:azure.schemaregistry.encoder.avroencoder.MessageType>
    - <xref:azure.schemaregistry.encoder.avroencoder.MessageContent>
  keywordOnlyParameters:
  - name: readers_schema
    description: An optional reader's schema as defined by the Apache Avro specification.
    types:
    - <xref:str>
    - <xref:None>
  - name: request_options
    description: The keyword arguments for http requests to be passed to the client.
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]
  return:
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]
  exceptions:
  - type: azure.schemaregistry.encoder.avroencoder.InvalidSchemaError
    description: Indicates an issue with validating schemas.
  - type: azure.schemaregistry.encoder.avroencoder.InvalidContentError
    description: Indicates an issue with decoding content.
- uid: azure.schemaregistry.encoder.avroencoder.aio.AvroEncoder.encode
  name: encode
  summary: "Encode content with the given schema. Create content type value, which\
    \ consists of the Avro Mime Type string\n   and the schema ID corresponding to\
    \ given schema. If provided with a MessageType subtype, encoded content\n   and\
    \ content type will be passed to create message object. If not provided, the following\
    \ dict will be returned:\n   {\"content\": Avro encoded value, \"content_type\"\
    : Avro mime type string + schema ID}.\n\nIf *message_type* is set, then additional\
    \ keyword arguments will be passed to the message callback\n   function provided.\n\
    \nSchema must be an Avro RecordSchema:\n[https://avro.apache.org/docs/1.10.0/gettingstartedpython.html#Defining+a+schema](https://avro.apache.org/docs/1.10.0/gettingstartedpython.html#Defining+a+schema)"
  signature: 'async encode(content: Mapping[str, Any], *, schema: str, message_type:
    Type[MessageType], request_options: Dict[str, Any] | None = None, **kwargs: Any)
    -> MessageType'
  parameters:
  - name: content
    description: The content to be encoded.
    isRequired: true
    types:
    - <xref:typing.Mapping>[<xref:str>, <xref:typing.Any>]
  keywordOnlyParameters:
  - name: schema
    description: Required. The schema used to encode the content.
    types:
    - <xref:str>
  - name: message_type
    description: 'The message class to construct the message. Must be a subtype of
      the

      azure.schemaregistry.encoder.avroencoder.MessageType protocol.'
    types:
    - <xref:typing.Type>[<xref:azure.schemaregistry.encoder.avroencoder.MessageType>]
    - <xref:None>
  - name: request_options
    description: The keyword arguments for http requests to be passed to the client.
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]
  return:
    types:
    - <xref:azure.schemaregistry.encoder.avroencoder.MessageType>
    - <xref:azure.schemaregistry.encoder.avroencoder.MessageContent>
  exceptions:
  - type: azure.schemaregistry.encoder.avroencoder.InvalidSchemaError
    description: Indicates an issue with validating schema.
  - type: azure.schemaregistry.encoder.avroencoder.InvalidContentError
    description: Indicates an issue with encoding content with schema.
