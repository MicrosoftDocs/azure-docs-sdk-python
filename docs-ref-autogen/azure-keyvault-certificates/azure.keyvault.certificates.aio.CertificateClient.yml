### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.keyvault.certificates.aio.CertificateClient.backup_certificate
  - azure.keyvault.certificates.aio.CertificateClient.cancel_certificate_operation
  - azure.keyvault.certificates.aio.CertificateClient.create_certificate
  - azure.keyvault.certificates.aio.CertificateClient.create_issuer
  - azure.keyvault.certificates.aio.CertificateClient.delete_certificate
  - azure.keyvault.certificates.aio.CertificateClient.delete_certificate_operation
  - azure.keyvault.certificates.aio.CertificateClient.delete_contacts
  - azure.keyvault.certificates.aio.CertificateClient.delete_issuer
  - azure.keyvault.certificates.aio.CertificateClient.get_certificate
  - azure.keyvault.certificates.aio.CertificateClient.get_certificate_operation
  - azure.keyvault.certificates.aio.CertificateClient.get_certificate_policy
  - azure.keyvault.certificates.aio.CertificateClient.get_certificate_version
  - azure.keyvault.certificates.aio.CertificateClient.get_contacts
  - azure.keyvault.certificates.aio.CertificateClient.get_deleted_certificate
  - azure.keyvault.certificates.aio.CertificateClient.get_issuer
  - azure.keyvault.certificates.aio.CertificateClient.import_certificate
  - azure.keyvault.certificates.aio.CertificateClient.list_deleted_certificates
  - azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificate_versions
  - azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificates
  - azure.keyvault.certificates.aio.CertificateClient.list_properties_of_issuers
  - azure.keyvault.certificates.aio.CertificateClient.merge_certificate
  - azure.keyvault.certificates.aio.CertificateClient.purge_deleted_certificate
  - azure.keyvault.certificates.aio.CertificateClient.recover_deleted_certificate
  - azure.keyvault.certificates.aio.CertificateClient.restore_certificate_backup
  - azure.keyvault.certificates.aio.CertificateClient.set_contacts
  - azure.keyvault.certificates.aio.CertificateClient.update_certificate_policy
  - azure.keyvault.certificates.aio.CertificateClient.update_certificate_properties
  - azure.keyvault.certificates.aio.CertificateClient.update_issuer
  class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Creates a new instance of the Certificate client<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   from azure.identity.aio\
    \ import DefaultAzureCredential\n   from azure.keyvault.certificates.aio import\
    \ CertificateClient\n\n   # Create a KeyVaultCertificate using default Azure credentials\n\
    \   credential = DefaultAzureCredential()\n   certificate_client = CertificateClient(vault_url=vault_url,\
    \ credential=credential)\n\n\n   ````\n"
  fullName: azure.keyvault.certificates.aio.CertificateClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.keyvault.certificates._shared.async_client_base.AsyncKeyVaultClientBase
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: CertificateClient
  summary: A high-level asynchronous interface for managing a vault's certificates.
  syntax:
    parameters:
    - description: URL of the vault the client will access
      id: vault_url
      type:
      - str
    - description: 'An object which can provide an access token for the vault, such
        as a credential from

        <xref:azure.identity.aio>'
      id: credential
    - description: version of the Key Vault API to use. Defaults to the most recent.
      id: api_version
      type:
      - str
    - description: 'transport to use. Defaults to

        <xref:azure.core.pipeline.transport.AioHttpTransport>.'
      id: transport
      type:
      - azure.core.pipeline.transport.AsyncHttpTransport
  type: class
  uid: azure.keyvault.certificates.aio.CertificateClient
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Get a certificate backup<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # backup certificate\n\
    \   certificate_backup = await certificate_client.backup_certificate(cert_name)\n\
    \n   # returns the raw bytes of the backed up certificate\n   print(certificate_backup)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.backup_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'backup_certificate(certificate_name: str, **kwargs: typing.Any) -> bytes'
  namewithoutparameters: backup_certificate
  summary: 'Back up a certificate in a protected form useable only by Azure Key Vault.


    Requires certificates/backup permission. This is intended to allow copying a certificate

    from one vault to another. Both vaults must be owned by the same Azure subscription.

    Also, backup / restore cannot be performed across geopolitical boundaries. For
    example, a backup

    from a vault in a USA region cannot be restored to a vault in an EU region.'
  syntax:
    content: 'backup_certificate(certificate_name: str, **kwargs: typing.Any) -> bytes'
    parameters:
    - description: The name of the certificate.
      id: certificate_name
      isRequired: true
      type:
      - str
    return:
      description: The backup blob containing the backed up certificate.
      type:
      - bytes
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.backup_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.cancel_certificate_operation
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'cancel_certificate_operation(certificate_name: str, **kwargs: typing.Any)
    -> azure.keyvault.certificates._models.CertificateOperation'
  namewithoutparameters: cancel_certificate_operation
  summary: Cancels an in-progress certificate operation. Requires the certificates/update
    permission.
  syntax:
    content: 'cancel_certificate_operation(certificate_name: str, **kwargs: typing.Any)
      -> azure.keyvault.certificates._models.CertificateOperation'
    parameters:
    - description: The name of the certificate.
      id: certificate_name
      isRequired: true
      type:
      - str
    return:
      description: The cancelled certificate operation
      type:
      - azure.keyvault.certificates.CertificateOperation
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.cancel_certificate_operation
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Create a certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.keyvault.certificates\
    \ import CertificatePolicy, CertificateContentType, WellKnownIssuerNames\n\n \
    \  # specify the certificate policy\n   cert_policy = CertificatePolicy(\n   \
    \    issuer_name=WellKnownIssuerNames.self,\n       subject=\"CN=*.microsoft.com\"\
    ,\n       san_dns_names=[\"sdk.azure-int.net\"],\n       exportable=True,\n  \
    \     key_type=\"RSA\",\n       key_size=2048,\n       reuse_key=False,\n    \
    \   content_type=CertificateContentType.pkcs12,\n       validity_in_months=24,\n\
    \   )\n   cert_name = \"cert-name\"\n\n   certificate = await certificate_client.create_certificate(certificate_name=cert_name,\
    \ policy=cert_policy)\n\n   print(certificate.id)\n   print(certificate.name)\n\
    \   print(certificate.policy.issuer_name)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.create_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'create_certificate(certificate_name: str, policy: azure.keyvault.certificates._models.CertificatePolicy,
    **kwargs: typing.Any) -> typing.Union[azure.keyvault.certificates._models.KeyVaultCertificate,
    azure.keyvault.certificates._models.CertificateOperation]'
  namewithoutparameters: create_certificate
  summary: 'Creates a new certificate.


    If this is the first version, the certificate resource is created. This

    operation requires the certificates/create permission. The poller requires the

    certificates/get permission, otherwise raises

    an <xref:azure.core.exceptions.HttpResponseError>'
  syntax:
    content: 'create_certificate(certificate_name: str, policy: azure.keyvault.certificates._models.CertificatePolicy,
      **kwargs: typing.Any) -> typing.Union[azure.keyvault.certificates._models.KeyVaultCertificate,
      azure.keyvault.certificates._models.CertificateOperation]'
    parameters:
    - description: The name of the certificate.
      id: certificate_name
      isRequired: true
      type:
      - str
    - description: The management policy for the certificate.
      id: policy
      isRequired: true
      type:
      - azure.keyvault.certificates.CertificatePolicy
    - description: Whether the certificate is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: Application specific metadata in the form of key-value pairs.
      id: tags
      isRequired: true
      type:
      - dict[str, str]
    return:
      description: 'A coroutine for the creation of the certificate. Awaiting the
        coroutine

        returns the created KeyVaultCertificate if creation is successful, the CertificateOperation
        if not.'
      type:
      - azure.keyvault.certificates.KeyVaultCertificate
      - azure.keyvault.certificates.CertificateOperation
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.create_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Create an issuer<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.keyvault.certificates\
    \ import AdministratorContact\n\n   # First we specify the AdministratorContact\
    \ for a issuer.\n   admin_contacts = [\n       AdministratorContact(first_name=\"\
    John\", last_name=\"Doe\", email=\"admin@microsoft.com\", phone=\"4255555555\"\
    )\n   ]\n\n   issuer = await certificate_client.create_issuer(\n       issuer_name=\"\
    issuer1\",\n       provider=\"Test\",\n       account_id=\"keyvaultuser\",\n \
    \      admin_contacts=admin_contacts,\n       enabled=True,\n   )\n\n   print(issuer.name)\n\
    \   print(issuer.provider)\n   print(issuer.account_id)\n\n   for contact in issuer.admin_contacts:\n\
    \       print(contact.first_name)\n       print(contact.last_name)\n       print(contact.email)\n\
    \       print(contact.phone)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.create_issuer
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'create_issuer(issuer_name: str, provider: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificateIssuer'
  namewithoutparameters: create_issuer
  summary: Sets the specified certificate issuer. Requires certificates/setissuers
    permission.
  syntax:
    content: 'create_issuer(issuer_name: str, provider: str, **kwargs: typing.Any)
      -> azure.keyvault.certificates._models.CertificateIssuer'
    parameters:
    - description: The name of the issuer.
      id: issuer_name
      isRequired: true
      type:
      - str
    - description: The issuer provider.
      id: provider
      isRequired: true
      type:
      - str
    - description: Whether the issuer is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: The user name/account name/account id.
      id: account_id
      isRequired: true
      type:
      - str
    - description: The password/secret/account key.
      id: password
      isRequired: true
      type:
      - str
    - description: Id of the organization
      id: organization_id
      isRequired: true
      type:
      - str
    - description: 'Contact details of the organization administrators of the

        certificate issuer.'
      id: admin_contacts
      isRequired: true
      type:
      - list[azure.keyvault.certificates.AdministratorContact]
    return:
      description: The created CertificateIssuer
      type:
      - azure.keyvault.certificates.CertificateIssuer
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.create_issuer
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Delete a certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # delete a certificate\n\
    \   deleted_certificate = await certificate_client.delete_certificate(cert_name)\n\
    \n   print(deleted_certificate.name)\n\n   # if the vault has soft-delete enabled,\
    \ the certificate's\n   # scheduled purge date, deleted_on, and recovery id are\
    \ available\n   print(deleted_certificate.deleted_on)\n   print(deleted_certificate.scheduled_purge_date)\n\
    \   print(deleted_certificate.recovery_id)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.delete_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'delete_certificate(certificate_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.DeletedCertificate'
  namewithoutparameters: delete_certificate
  summary: 'Delete all versions of a certificate. Requires certificates/delete permission.


    If the vault has soft-delete enabled, deletion may take several seconds to complete.'
  syntax:
    content: 'delete_certificate(certificate_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.DeletedCertificate'
    parameters:
    - description: The name of the certificate.
      id: certificate_name
      isRequired: true
      type:
      - str
    return:
      description: The deleted certificate
      type:
      - azure.keyvault.certificates.DeletedCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.delete_certificate_operation
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'delete_certificate_operation(certificate_name: str, **kwargs: typing.Any)
    -> azure.keyvault.certificates._models.CertificateOperation'
  namewithoutparameters: delete_certificate_operation
  summary: 'Deletes and stops the creation operation for a specific certificate.


    Requires the certificates/update permission.'
  syntax:
    content: 'delete_certificate_operation(certificate_name: str, **kwargs: typing.Any)
      -> azure.keyvault.certificates._models.CertificateOperation'
    parameters:
    - description: The name of the certificate.
      id: certificate_name
      isRequired: true
      type:
      - str
    return:
      description: The deleted CertificateOperation
      type:
      - azure.keyvault.certificates.CertificateOperation
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_certificate_operation
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Delete contacts<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   deleted_contacts\
    \ = await certificate_client.delete_contacts()\n\n   for deleted_contact in deleted_contacts:\n\
    \       print(deleted_contact.name)\n       print(deleted_contact.email)\n   \
    \    print(deleted_contact.phone)\n\n\n   ````\n"
  fullName: azure.keyvault.certificates.aio.CertificateClient.delete_contacts
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'delete_contacts(**kwargs: typing.Any) -> typing.List[azure.keyvault.certificates._models.CertificateContact]'
  namewithoutparameters: delete_contacts
  summary: Deletes the certificate contacts for the key vault. Requires the certificates/managecontacts
    permission.
  syntax:
    content: 'delete_contacts(**kwargs: typing.Any) -> typing.List[azure.keyvault.certificates._models.CertificateContact]'
    return:
      description: The deleted contacts for the key vault.
      type:
      - list[azure.keyvault.certificates.CertificateContact]
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_contacts
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Delete an issuer<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   deleted_issuer\
    \ = await certificate_client.delete_issuer(\"issuer1\")\n\n   print(deleted_issuer.name)\n\
    \   print(deleted_issuer.provider)\n   print(deleted_issuer.account_id)\n\n  \
    \ for contact in deleted_issuer.admin_contacts:\n       print(contact.first_name)\n\
    \       print(contact.last_name)\n       print(contact.email)\n       print(contact.phone)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.delete_issuer
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'delete_issuer(issuer_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificateIssuer'
  namewithoutparameters: delete_issuer
  summary: 'Deletes the specified certificate issuer.


    Requires certificates/manageissuers/deleteissuers permission.'
  syntax:
    content: 'delete_issuer(issuer_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificateIssuer'
    parameters:
    - description: The name of the issuer.
      id: issuer_name
      isRequired: true
      type:
      - str
    return:
      description: CertificateIssuer
      type:
      - azure.keyvault.certificates.CertificateIssuer
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_issuer
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Get a certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get the latest\
    \ version of a certificate\n   certificate = await certificate_client.get_certificate(cert_name)\n\
    \n   print(certificate.id)\n   print(certificate.name)\n   print(certificate.policy.issuer_name)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.get_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'get_certificate(certificate_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
  namewithoutparameters: get_certificate
  summary: 'Gets a certificate with its management policy attached. Requires certificates/get
    permission.


    Does not accept the version of the certificate as a parameter. To get a specific
    version of the

    certificate, call <xref:azure.keyvault.certificates.aio.get_certificate_version>.'
  syntax:
    content: 'get_certificate(certificate_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
    parameters:
    - description: The name of the certificate in the given vault.
      id: certificate_name
      isRequired: true
      type:
      - str
    return:
      description: An instance of KeyVaultCertificate
      type:
      - azure.keyvault.certificates.KeyVaultCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.get_certificate_operation
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'get_certificate_operation(certificate_name: str, **kwargs: typing.Any) ->
    azure.keyvault.certificates._models.CertificateOperation'
  namewithoutparameters: get_certificate_operation
  summary: Gets the creation operation of a certificate. Requires the certificates/get
    permission.
  syntax:
    content: 'get_certificate_operation(certificate_name: str, **kwargs: typing.Any)
      -> azure.keyvault.certificates._models.CertificateOperation'
    parameters:
    - description: The name of the certificate.
      id: certificate_name
      isRequired: true
      type:
      - str
    return:
      description: The created CertificateOperation
      type:
      - azure.keyvault.certificates.CertificateOperation
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate_operation
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.get_certificate_policy
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'get_certificate_policy(certificate_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificatePolicy'
  namewithoutparameters: get_certificate_policy
  summary: 'Gets the policy for a certificate. Requires certificates/get permission.


    Returns the specified certificate policy resources in the key vault.'
  syntax:
    content: 'get_certificate_policy(certificate_name: str, **kwargs: typing.Any)
      -> azure.keyvault.certificates._models.CertificatePolicy'
    parameters:
    - description: The name of the certificate in a given key vault.
      id: certificate_name
      isRequired: true
      type:
      - str
    return:
      description: The certificate policy
      type:
      - azure.keyvault.certificates.CertificatePolicy
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate_policy
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Get a certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get the latest\
    \ version of a certificate\n   certificate = await certificate_client.get_certificate(cert_name)\n\
    \n   print(certificate.id)\n   print(certificate.name)\n   print(certificate.policy.issuer_name)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.get_certificate_version
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'get_certificate_version(certificate_name: str, version: str, **kwargs: typing.Any)
    -> azure.keyvault.certificates._models.KeyVaultCertificate'
  namewithoutparameters: get_certificate_version
  summary: 'Gets a specific version of a certificate without returning its management
    policy.


    Requires certificates/get permission. To get the latest version of the certificate,

    or to get the certificate''s policy as well, call <xref:azure.keyvault.certificates.aio.CertificateClient.get_certificate>.'
  syntax:
    content: 'get_certificate_version(certificate_name: str, version: str, **kwargs:
      typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
    parameters:
    - description: The name of the certificate in the given vault.
      id: certificate_name
      isRequired: true
      type:
      - str
    - description: The version of the certificate.
      id: version
      isRequired: true
      type:
      - str
    return:
      description: An instance of KeyVaultCertificate
      type:
      - azure.keyvault.certificates.KeyVaultCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate_version
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Get contacts<!--[!code-python[Main](s\\test_examples_certificates_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\106\\\\\
    azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   contacts = await\
    \ certificate_client.get_contacts()\n\n   # Loop through the certificate contacts\
    \ for this key vault.\n   for contact in contacts:\n       print(contact.name)\n\
    \       print(contact.email)\n       print(contact.phone)\n\n\n   ````\n"
  fullName: azure.keyvault.certificates.aio.CertificateClient.get_contacts
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'get_contacts(**kwargs: typing.Any) -> typing.List[azure.keyvault.certificates._models.CertificateContact]'
  namewithoutparameters: get_contacts
  summary: Gets the certificate contacts for the key vault. Requires the certificates/managecontacts
    permission.
  syntax:
    content: 'get_contacts(**kwargs: typing.Any) -> typing.List[azure.keyvault.certificates._models.CertificateContact]'
    return:
      description: The certificate contacts for the key vault.
      type:
      - list[azure.keyvault.certificates.CertificateContact]
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.get_contacts
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Get a deleted certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get a deleted\
    \ certificate (requires soft-delete enabled for the vault)\n   deleted_certificate\
    \ = await certificate_client.get_deleted_certificate(\"cert-name\")\n   print(deleted_certificate.name)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.get_deleted_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'get_deleted_certificate(certificate_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.DeletedCertificate'
  namewithoutparameters: get_deleted_certificate
  summary: 'Get a deleted certificate. Possible only in a vault with soft-delete enabled.


    Requires certificates/get permission. Retrieves the deleted certificate information

    plus its attributes, such as retention interval, scheduled permanent deletion,
    and the

    current deletion recovery level.'
  syntax:
    content: 'get_deleted_certificate(certificate_name: str, **kwargs: typing.Any)
      -> azure.keyvault.certificates._models.DeletedCertificate'
    parameters:
    - description: The name of the certificate.
      id: certificate_name
      isRequired: true
      type:
      - str
    return:
      description: The deleted certificate
      type:
      - azure.keyvault.certificates.DeletedCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.get_deleted_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Get an issuer<!--[!code-python[Main](s\\test_examples_certificates_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\106\\\\\
    azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   issuer = await\
    \ certificate_client.get_issuer(\"issuer1\")\n\n   print(issuer.name)\n   print(issuer.provider)\n\
    \   print(issuer.account_id)\n\n   for contact in issuer.admin_contacts:\n   \
    \    print(contact.first_name)\n       print(contact.last_name)\n       print(contact.email)\n\
    \       print(contact.phone)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.certificates.aio.CertificateClient.get_issuer
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'get_issuer(issuer_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificateIssuer'
  namewithoutparameters: get_issuer
  summary: Gets the specified certificate issuer. Requires certificates/manageissuers/getissuers
    permission.
  syntax:
    content: 'get_issuer(issuer_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificateIssuer'
    parameters:
    - description: The name of the issuer.
      id: issuer_name
      isRequired: true
      type:
      - str
    return:
      description: The specified certificate issuer.
      type:
      - azure.keyvault.certificates.CertificateIssuer
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.get_issuer
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.import_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'import_certificate(certificate_name: str, certificate_bytes: bytes, **kwargs:
    typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
  namewithoutparameters: import_certificate
  summary: 'Import a certificate created externally. Requires certificates/import
    permission.


    Imports an existing valid certificate, containing a private key, into

    Azure Key Vault. The certificate to be imported can be in either PFX or

    PEM format. If the certificate is in PEM format the PEM file must

    contain the key as well as x509 certificates.'
  syntax:
    content: 'import_certificate(certificate_name: str, certificate_bytes: bytes,
      **kwargs: typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
    parameters:
    - description: The name of the certificate.
      id: certificate_name
      isRequired: true
      type:
      - str
    - description: 'Bytes of the certificate object to import.

        This certificate needs to contain the private key.'
      id: certificate_bytes
      isRequired: true
      type:
      - bytes
    - description: Whether the certificate is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: Application specific metadata in the form of key-value pairs.
      id: tags
      isRequired: true
      type:
      - dict[str, str]
    - description: 'If the private key in the passed in certificate is encrypted,
        it

        is the password used for encryption.'
      id: password
      isRequired: true
      type:
      - str
    - description: The management policy for the certificate
      id: policy
      isRequired: true
      type:
      - azure.keyvault.certificates.CertificatePolicy
    return:
      description: The imported KeyVaultCertificate
      type:
      - azure.keyvault.certificates.KeyVaultCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.import_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "List all the deleted certificates<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get an iterator\
    \ of deleted certificates (requires soft-delete enabled for the vault)\n   deleted_certificates\
    \ = certificate_client.list_deleted_certificates()\n\n   async for certificate\
    \ in deleted_certificates:\n       print(certificate.id)\n       print(certificate.name)\n\
    \       print(certificate.scheduled_purge_date)\n       print(certificate.recovery_id)\n\
    \       print(certificate.deleted_on)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.list_deleted_certificates
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: list_deleted_certificates
  namewithoutparameters: list_deleted_certificates
  summary: 'Lists the currently-recoverable deleted certificates. Possible only if
    vault is soft-delete enabled.


    Requires certificates/get/list permission. Retrieves the certificates in the current
    vault which

    are in a deleted state and ready for recovery or purging. This operation includes

    deletion-specific information.'
  syntax:
    parameters:
    - description: 'Specifies whether to include certificates which are

        not completely deleted.'
      id: include_pending
      isRequired: true
      type:
      - bool
    return:
      description: An iterator like instance of DeletedCertificate
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.certificates.DeletedCertificate]
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.list_deleted_certificates
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "List all versions of a certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get an iterator\
    \ of all versions of a certificate\n   certificate_versions = certificate_client.list_properties_of_certificate_versions(\"\
    cert-name\")\n\n   async for certificate in certificate_versions:\n       print(certificate.id)\n\
    \       print(certificate.properties.updated_on)\n       print(certificate.properties.version)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificate_versions
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: list_properties_of_certificate_versions
  namewithoutparameters: list_properties_of_certificate_versions
  summary: 'List the identifiers and properties of a certificate''s versions.


    Requires certificates/list permission.'
  syntax:
    parameters:
    - description: The name of the certificate.
      id: certificate_name
      isRequired: true
      type:
      - str
    return:
      description: An iterator like instance of CertificateProperties
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.certificates.CertificateProperties]
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificate_versions
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "List all certificates<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # list certificates\n\
    \   certificates = certificate_client.list_properties_of_certificates()\n\n  \
    \ async for certificate in certificates:\n       print(certificate.id)\n     \
    \  print(certificate.created_on)\n       print(certificate.name)\n       print(certificate.updated_on)\n\
    \       print(certificate.enabled)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificates
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: list_properties_of_certificates
  namewithoutparameters: list_properties_of_certificates
  summary: 'List identifiers and properties of all certificates in the vault.


    Requires certificates/list permission.'
  syntax:
    parameters:
    - description: 'Specifies whether to include certificates which are not

        completely provisioned.'
      id: include_pending
      isRequired: true
      type:
      - bool
    return:
      description: An iterator like instance of CertificateProperties
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.certificates.CertificateProperties]
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificates
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "List issuers of a vault<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   issuers = certificate_client.list_properties_of_issuers()\n\
    \n   async for issuer in issuers:\n       print(issuer.name)\n       print(issuer.provider)\n\
    \n\n   ````\n"
  fullName: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_issuers
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: list_properties_of_issuers
  namewithoutparameters: list_properties_of_issuers
  summary: 'Lists properties of the certificate issuers for the key vault.


    Requires the certificates/manageissuers/getissuers permission.'
  syntax:
    return:
      description: An iterator like instance of Issuers
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.certificates.CertificateIssuer]
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_issuers
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.merge_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'merge_certificate(certificate_name: str, x509_certificates: typing.Iterable[bytes],
    **kwargs: typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
  namewithoutparameters: merge_certificate
  summary: 'Merges a certificate or a certificate chain with a key pair existing on
    the server.


    Requires the certificates/create permission. Performs the merging of a certificate
    or

    certificate chain with a key pair currently available in the service.

    Make sure when creating the certificate to merge using <xref:azure.keyvault.certificates.aio.begin_create_certificate>
    that you set

    its issuer to ''Unknown''. This way Key Vault knows that the certificate will
    not be signed

    by an issuer known to it.'
  syntax:
    content: 'merge_certificate(certificate_name: str, x509_certificates: typing.Iterable[bytes],
      **kwargs: typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
    parameters:
    - description: The name of the certificate
      id: certificate_name
      isRequired: true
      type:
      - str
    - description: The certificate or the certificate chain to merge.
      id: x509_certificates
      isRequired: true
      type:
      - list[bytes]
    - description: Whether the certificate is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: Application specific metadata in the form of key-value pairs.
      id: tags
      isRequired: true
      type:
      - dict[str, str]
    return:
      description: The merged certificate operation
      type:
      - azure.keyvault.certificates.CertificateOperation
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.merge_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.purge_deleted_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'purge_deleted_certificate(certificate_name: str, **kwargs: typing.Any) ->
    None'
  namewithoutparameters: purge_deleted_certificate
  summary: 'Permanently deletes a deleted certificate. Possible only in vaults with
    soft-delete enabled.


    Requires certificates/purge permission.


    Performs an irreversible deletion of the specified certificate, without

    possibility for recovery. The operation is not available if the

    <xref:azure.keyvault.certificates.CertificateProperties.recovery_level> does not
    specify ''Purgeable''.

    This method is only necessary for purging a certificate before its

    <xref:azure.keyvault.certificates.DeletedCertificate.scheduled_purge_date>.'
  syntax:
    content: 'purge_deleted_certificate(certificate_name: str, **kwargs: typing.Any)
      -> None'
    parameters:
    - description: The name of the certificate
      id: certificate_name
      isRequired: true
      type:
      - str
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.purge_deleted_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Recover a deleted certificate<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # recover deleted\
    \ certificate to its latest version (requires soft-delete enabled for the vault)\n\
    \   recovered_certificate = await certificate_client.recover_deleted_certificate(\"\
    cert-name\")\n   print(recovered_certificate.id)\n   print(recovered_certificate.name)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.recover_deleted_certificate
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'recover_deleted_certificate(certificate_name: str, **kwargs: typing.Any)
    -> azure.keyvault.certificates._models.KeyVaultCertificate'
  namewithoutparameters: recover_deleted_certificate
  summary: 'Recover a deleted certificate to its latest version. Possible only in
    a vault with soft-delete enabled.


    Requires certificates/recover permission. If the vault does not have soft-delete
    enabled,

    <xref:azure.keyvault.certificates.aio.CertificateClient.delete_certificate> is
    permanent, and this method will raise an error. Attempting to recover a

    non-deleted certificate will also raise an error.'
  syntax:
    content: 'recover_deleted_certificate(certificate_name: str, **kwargs: typing.Any)
      -> azure.keyvault.certificates._models.KeyVaultCertificate'
    parameters:
    - description: The name of the deleted certificate
      id: certificate_name
      isRequired: true
      type:
      - str
    return:
      description: The recovered certificate
      type:
      - azure.keyvault.certificates.KeyVaultCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.recover_deleted_certificate
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Restore a certificate backup<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # restores a\
    \ certificate backup\n   restored_certificate = await certificate_client.restore_certificate_backup(certificate_backup)\n\
    \   print(restored_certificate.id)\n   print(restored_certificate.name)\n   print(restored_certificate.properties.version)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.restore_certificate_backup
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'restore_certificate_backup(backup: bytes, **kwargs: typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
  namewithoutparameters: restore_certificate_backup
  summary: 'Restore a certificate backup to the vault. Requires certificates/restore
    permission.


    This restores all versions of the certificate, with its name, attributes, and
    access control policies.

    If the certificate''s name is already in use, restoring it will fail. Also, the
    target vault must

    be owned by the same Microsoft Azure subscription as the source vault.'
  syntax:
    content: 'restore_certificate_backup(backup: bytes, **kwargs: typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
    parameters:
    - description: The backup blob associated with a certificate bundle.
      id: backup
      isRequired: true
      type:
      - bytes
    return:
      description: The restored KeyVaultCertificate
      type:
      - azure.keyvault.certificates.KeyVaultCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.restore_certificate_backup
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Create contacts<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.keyvault.certificates\
    \ import CertificateContact\n\n   # Create a list of the contacts that you want\
    \ to set for this key vault.\n   contact_list = [\n       CertificateContact(email=\"\
    admin@contoso.com\", name=\"John Doe\", phone=\"1111111111\"),\n       CertificateContact(email=\"\
    admin2@contoso.com\", name=\"John Doe2\", phone=\"2222222222\"),\n   ]\n\n   contacts\
    \ = await certificate_client.set_contacts(contact_list)\n   for contact in contacts:\n\
    \       print(contact.name)\n       print(contact.email)\n       print(contact.phone)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.set_contacts
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'set_contacts(contacts: typing.Iterable[azure.keyvault.certificates._models.CertificateContact],
    **kwargs: typing.Any) -> typing.List[azure.keyvault.certificates._models.CertificateContact]'
  namewithoutparameters: set_contacts
  summary: Sets the certificate contacts for the key vault. Requires certificates/managecontacts
    permission.
  syntax:
    content: 'set_contacts(contacts: typing.Iterable[azure.keyvault.certificates._models.CertificateContact],
      **kwargs: typing.Any) -> typing.List[azure.keyvault.certificates._models.CertificateContact]'
    parameters:
    - description: The contact list for the vault certificates.
      id: contacts
      isRequired: true
      type:
      - list[azure.keyvault.certificates.CertificateContact]
    return:
      description: The created list of contacts
      type:
      - list[azure.keyvault.certificates.CertificateContact]
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.set_contacts
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.update_certificate_policy
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'update_certificate_policy(certificate_name: str, policy: azure.keyvault.certificates._models.CertificatePolicy,
    **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificatePolicy'
  namewithoutparameters: update_certificate_policy
  summary: 'Updates the policy for a certificate. Requires certificiates/update permission.


    Set specified members in the certificate policy. Leaves others as null.'
  syntax:
    content: 'update_certificate_policy(certificate_name: str, policy: azure.keyvault.certificates._models.CertificatePolicy,
      **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificatePolicy'
    parameters:
    - description: The name of the certificate in the given vault.
      id: certificate_name
      isRequired: true
      type:
      - str
    - description: The policy for the certificate.
      id: policy
      isRequired: true
      type:
      - azure.keyvault.certificates.CertificatePolicy
    return:
      description: The certificate policy
      type:
      - azure.keyvault.certificates.CertificatePolicy
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.update_certificate_policy
- class: azure.keyvault.certificates.aio.CertificateClient
  example:
  - "Update a certificate's attributes<!--[!code-python[Main](s\\test_examples_certificates_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\106\\\\azure-keyvault-certificates-4.1.0\\\\tests\\\\test_examples_certificates_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # update attributes\
    \ of an existing certificate\n   tags = {\"foo\": \"updated tag\"}\n   updated_certificate\
    \ = await certificate_client.update_certificate_properties(\n       certificate_name=certificate.name,\
    \ tags=tags\n   )\n\n   print(updated_certificate.properties.version)\n   print(updated_certificate.properties.updated_on)\n\
    \   print(updated_certificate.properties.tags)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.update_certificate_properties
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'update_certificate_properties(certificate_name: str, version: typing.Union[str,
    NoneType] = None, **kwargs: typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
  namewithoutparameters: update_certificate_properties
  summary: Change a certificate's properties. Requires certificates/update permission.
  syntax:
    content: 'update_certificate_properties(certificate_name: str, version: typing.Union[str,
      NoneType] = None, **kwargs: typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
    parameters:
    - description: The name of the certificate in the given key vault.
      id: certificate_name
      isRequired: true
      type:
      - str
    - description: The version of the certificate.
      id: version
      isRequired: true
      type:
      - str
    - description: Whether the certificate is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: Application specific metadata in the form of key-value pairs.
      id: tags
      isRequired: true
      type:
      - dict[str, str]
    return:
      description: The updated KeyVaultCertificate
      type:
      - azure.keyvault.certificates.KeyVaultCertificate
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.update_certificate_properties
- class: azure.keyvault.certificates.aio.CertificateClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.certificates.aio.CertificateClient.update_issuer
  langs:
  - python
  module: azure.keyvault.certificates.aio
  name: 'update_issuer(issuer_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificateIssuer'
  namewithoutparameters: update_issuer
  summary: Updates the specified certificate issuer. Requires certificates/setissuers
    permission.
  syntax:
    content: 'update_issuer(issuer_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificateIssuer'
    parameters:
    - description: The name of the issuer.
      id: issuer_name
      isRequired: true
      type:
      - str
    - description: Whether the issuer is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: The issuer provider
      id: provider
      isRequired: true
      type:
      - str
    - description: The user name/account name/account id.
      id: account_id
      isRequired: true
      type:
      - str
    - description: The password/secret/account key.
      id: password
      isRequired: true
      type:
      - str
    - description: Id of the organization
      id: organization_id
      isRequired: true
      type:
      - str
    - description: 'Contact details of the organization administrators of

        the certificate issuer'
      id: admin_contacts
      isRequired: true
      type:
      - list[azure.keyvault.certificates.AdministratorContact]
    return:
      description: The updated issuer
      type:
      - azure.keyvault.certificates.CertificateIssuer
  type: method
  uid: azure.keyvault.certificates.aio.CertificateClient.update_issuer
references:
- fullName: azure.keyvault.certificates.aio.CertificateClient.backup_certificate
  isExternal: false
  name: 'backup_certificate(certificate_name: str, **kwargs: typing.Any) -> bytes'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.backup_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.cancel_certificate_operation
  isExternal: false
  name: 'cancel_certificate_operation(certificate_name: str, **kwargs: typing.Any)
    -> azure.keyvault.certificates._models.CertificateOperation'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.cancel_certificate_operation
- fullName: azure.keyvault.certificates.aio.CertificateClient.create_certificate
  isExternal: false
  name: 'create_certificate(certificate_name: str, policy: azure.keyvault.certificates._models.CertificatePolicy,
    **kwargs: typing.Any) -> typing.Union[azure.keyvault.certificates._models.KeyVaultCertificate,
    azure.keyvault.certificates._models.CertificateOperation]'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.create_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.create_issuer
  isExternal: false
  name: 'create_issuer(issuer_name: str, provider: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificateIssuer'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.create_issuer
- fullName: azure.keyvault.certificates.aio.CertificateClient.delete_certificate
  isExternal: false
  name: 'delete_certificate(certificate_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.DeletedCertificate'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.delete_certificate_operation
  isExternal: false
  name: 'delete_certificate_operation(certificate_name: str, **kwargs: typing.Any)
    -> azure.keyvault.certificates._models.CertificateOperation'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_certificate_operation
- fullName: azure.keyvault.certificates.aio.CertificateClient.delete_contacts
  isExternal: false
  name: 'delete_contacts(**kwargs: typing.Any) -> typing.List[azure.keyvault.certificates._models.CertificateContact]'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_contacts
- fullName: azure.keyvault.certificates.aio.CertificateClient.delete_issuer
  isExternal: false
  name: 'delete_issuer(issuer_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificateIssuer'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.delete_issuer
- fullName: azure.keyvault.certificates.aio.CertificateClient.get_certificate
  isExternal: false
  name: 'get_certificate(certificate_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.get_certificate_operation
  isExternal: false
  name: 'get_certificate_operation(certificate_name: str, **kwargs: typing.Any) ->
    azure.keyvault.certificates._models.CertificateOperation'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate_operation
- fullName: azure.keyvault.certificates.aio.CertificateClient.get_certificate_policy
  isExternal: false
  name: 'get_certificate_policy(certificate_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificatePolicy'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate_policy
- fullName: azure.keyvault.certificates.aio.CertificateClient.get_certificate_version
  isExternal: false
  name: 'get_certificate_version(certificate_name: str, version: str, **kwargs: typing.Any)
    -> azure.keyvault.certificates._models.KeyVaultCertificate'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.get_certificate_version
- fullName: azure.keyvault.certificates.aio.CertificateClient.get_contacts
  isExternal: false
  name: 'get_contacts(**kwargs: typing.Any) -> typing.List[azure.keyvault.certificates._models.CertificateContact]'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.get_contacts
- fullName: azure.keyvault.certificates.aio.CertificateClient.get_deleted_certificate
  isExternal: false
  name: 'get_deleted_certificate(certificate_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.DeletedCertificate'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.get_deleted_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.get_issuer
  isExternal: false
  name: 'get_issuer(issuer_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificateIssuer'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.get_issuer
- fullName: azure.keyvault.certificates.aio.CertificateClient.import_certificate
  isExternal: false
  name: 'import_certificate(certificate_name: str, certificate_bytes: bytes, **kwargs:
    typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.import_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.list_deleted_certificates
  isExternal: false
  name: list_deleted_certificates
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.list_deleted_certificates
- fullName: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificate_versions
  isExternal: false
  name: list_properties_of_certificate_versions
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificate_versions
- fullName: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificates
  isExternal: false
  name: list_properties_of_certificates
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_certificates
- fullName: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_issuers
  isExternal: false
  name: list_properties_of_issuers
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.list_properties_of_issuers
- fullName: azure.keyvault.certificates.aio.CertificateClient.merge_certificate
  isExternal: false
  name: 'merge_certificate(certificate_name: str, x509_certificates: typing.Iterable[bytes],
    **kwargs: typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.merge_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.purge_deleted_certificate
  isExternal: false
  name: 'purge_deleted_certificate(certificate_name: str, **kwargs: typing.Any) ->
    None'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.purge_deleted_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.recover_deleted_certificate
  isExternal: false
  name: 'recover_deleted_certificate(certificate_name: str, **kwargs: typing.Any)
    -> azure.keyvault.certificates._models.KeyVaultCertificate'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.recover_deleted_certificate
- fullName: azure.keyvault.certificates.aio.CertificateClient.restore_certificate_backup
  isExternal: false
  name: 'restore_certificate_backup(backup: bytes, **kwargs: typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.restore_certificate_backup
- fullName: azure.keyvault.certificates.aio.CertificateClient.set_contacts
  isExternal: false
  name: 'set_contacts(contacts: typing.Iterable[azure.keyvault.certificates._models.CertificateContact],
    **kwargs: typing.Any) -> typing.List[azure.keyvault.certificates._models.CertificateContact]'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.set_contacts
- fullName: azure.keyvault.certificates.aio.CertificateClient.update_certificate_policy
  isExternal: false
  name: 'update_certificate_policy(certificate_name: str, policy: azure.keyvault.certificates._models.CertificatePolicy,
    **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificatePolicy'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.update_certificate_policy
- fullName: azure.keyvault.certificates.aio.CertificateClient.update_certificate_properties
  isExternal: false
  name: 'update_certificate_properties(certificate_name: str, version: typing.Union[str,
    NoneType] = None, **kwargs: typing.Any) -> azure.keyvault.certificates._models.KeyVaultCertificate'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.update_certificate_properties
- fullName: azure.keyvault.certificates.aio.CertificateClient.update_issuer
  isExternal: false
  name: 'update_issuer(issuer_name: str, **kwargs: typing.Any) -> azure.keyvault.certificates._models.CertificateIssuer'
  parent: azure.keyvault.certificates.aio.CertificateClient
  uid: azure.keyvault.certificates.aio.CertificateClient.update_issuer
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
- fullName: list[azure.keyvault.certificates.AdministratorContact]
  name: list[AdministratorContact]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.certificates.AdministratorContact
    name: AdministratorContact
    uid: azure.keyvault.certificates.AdministratorContact
  - fullName: ']'
    name: ']'
  uid: list[azure.keyvault.certificates.AdministratorContact]
- fullName: list[azure.keyvault.certificates.CertificateContact]
  name: list[CertificateContact]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.certificates.CertificateContact
    name: CertificateContact
    uid: azure.keyvault.certificates.CertificateContact
  - fullName: ']'
    name: ']'
  uid: list[azure.keyvault.certificates.CertificateContact]
- fullName: azure.core.paging.ItemPaged[azure.keyvault.certificates.DeletedCertificate]
  name: ItemPaged[DeletedCertificate]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.certificates.DeletedCertificate
    name: DeletedCertificate
    uid: azure.keyvault.certificates.DeletedCertificate
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.keyvault.certificates.DeletedCertificate]
- fullName: azure.core.paging.ItemPaged[azure.keyvault.certificates.CertificateProperties]
  name: ItemPaged[CertificateProperties]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.certificates.CertificateProperties
    name: CertificateProperties
    uid: azure.keyvault.certificates.CertificateProperties
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.keyvault.certificates.CertificateProperties]
- fullName: azure.core.paging.ItemPaged[azure.keyvault.certificates.CertificateIssuer]
  name: ItemPaged[CertificateIssuer]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.certificates.CertificateIssuer
    name: CertificateIssuer
    uid: azure.keyvault.certificates.CertificateIssuer
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.keyvault.certificates.CertificateIssuer]
- fullName: list[bytes]
  name: list[bytes]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: bytes
    name: bytes
    uid: bytes
  - fullName: ']'
    name: ']'
  uid: list[bytes]
