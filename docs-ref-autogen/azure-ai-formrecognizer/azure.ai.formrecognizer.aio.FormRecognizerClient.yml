### YamlMime:PythonClass
uid: azure.ai.formrecognizer.aio.FormRecognizerClient
name: FormRecognizerClient
fullName: azure.ai.formrecognizer.aio.FormRecognizerClient
module: azure.ai.formrecognizer.aio
inheritances:
- azure.ai.formrecognizer.aio._form_base_client_async.FormRecognizerClientBaseAsync
summary: 'FormRecognizerClient extracts information from forms and images into structured
  data.

  It is the interface to use for analyzing with prebuilt models (receipts, business
  cards,

  invoices, identity documents), recognizing content/layout from forms, and analyzing

  custom forms from trained models. It provides different methods based on inputs
  from a

  URL and inputs from a stream.


  > [!NOTE]

  > FormRecognizerClient should be used with API versions <=v2.1.

  >

  > To use API versions 2022-08-31 and up, instantiate a DocumentAnalysisClient.

  >'
constructor:
  syntax: 'FormRecognizerClient(endpoint: str, credential: AzureKeyCredential | AsyncTokenCredential,
    **kwargs: Any)'
  parameters:
  - name: endpoint
    description: 'Supported Cognitive Services endpoints (protocol and hostname,

      for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'Credentials needed for the client to connect to Azure.

      This is an instance of AzureKeyCredential if using an API key or a token

      credential from <xref:azure.identity>.'
    isRequired: true
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
  keywordOnlyParameters:
  - name: api_version
    description: 'The API version of the service to use for requests. It defaults
      to API version v2.1.

      Setting to an older version may result in reduced feature compatibility. To
      use the

      latest supported API version and features, instantiate a DocumentAnalysisClient
      instead.'
    types:
    - <xref:str>
    - <xref:azure.ai.formrecognizer.FormRecognizerApiVersion>
examples:
- "Creating the FormRecognizerClient with an endpoint and API key.<!--[!code-python[Main](les\\\
  v3.1\\async_samples\\sample_authentication_v3_1_async.py )]-->\n\n<!-- literal_block\
  \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\":\
  \ [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
  \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\6\\\\azure-ai-formrecognizer-3.3.3\\\
  \\samples\\\\v3.1\\\\async_samples\\\\sample_authentication_v3_1_async.py\", \"\
  xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
  : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
  \ import AzureKeyCredential\n   from azure.ai.formrecognizer.aio import FormRecognizerClient\n\
  \   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
  AZURE_FORM_RECOGNIZER_KEY\"]\n\n   form_recognizer_client = FormRecognizerClient(endpoint,\
  \ AzureKeyCredential(key))\n\n   ````\n\nCreating the FormRecognizerClient with\
  \ a token credential.<!--[!code-python[Main](les\\v3.1\\async_samples\\sample_authentication_v3_1_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
  \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\6\\\\azure-ai-formrecognizer-3.3.3\\\
  \\samples\\\\v3.1\\\\async_samples\\\\sample_authentication_v3_1_async.py\", \"\
  xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
  : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   \"\"\"DefaultAzureCredential\
  \ will use the values from these environment\n   variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,\
  \ AZURE_CLIENT_SECRET\n   \"\"\"\n   from azure.ai.formrecognizer.aio import FormRecognizerClient\n\
  \   from azure.identity.aio import DefaultAzureCredential\n\n   endpoint = os.environ[\"\
  AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   credential = DefaultAzureCredential()\n\n\
  \   form_recognizer_client = FormRecognizerClient(endpoint, credential)\n\n   ````\n"
methods:
- uid: azure.ai.formrecognizer.aio.FormRecognizerClient.begin_recognize_business_cards
  name: begin_recognize_business_cards
  summary: 'Extract field text and semantic values from a given business card.

    The input document must be of one of the supported content types - ''application/pdf'',

    ''image/jpeg'', ''image/png'', ''image/tiff'' or ''image/bmp''.


    See fields found on a business card here:

    [https://aka.ms/formrecognizer/businesscardfields](https://aka.ms/formrecognizer/businesscardfields)


    *New in version v2.1:* The *begin_recognize_business_cards* client method'
  signature: 'async begin_recognize_business_cards(business_card: bytes | IO[bytes],
    **kwargs: Any) -> AsyncLROPoller[List[RecognizedForm]]'
  parameters:
  - name: business_card
    description: JPEG, PNG, PDF, TIFF, or BMP type file stream or bytes.
    isRequired: true
    types:
    - <xref:bytes>
    - <xref:typing.IO>[<xref:bytes>]
  keywordOnlyParameters:
  - name: locale
    description: 'Locale of the business card. Supported locales include: en-US, en-AU,
      en-CA, en-GB,

      and en-IN.'
    types:
    - <xref:str>
  - name: include_field_elements
    description: 'Whether or not to include all lines per page and field elements
      such as lines, words,

      and selection marks for each form field.'
    types:
    - <xref:bool>
  - name: content_type
    description: 'Content-type of the body sent to the API. Content-type is

      auto-detected, but can be overridden by passing this keyword argument. For options,

      see <xref:azure.ai.formrecognizer.FormContentType>.'
    types:
    - <xref:str>
    - <xref:azure.ai.formrecognizer.FormContentType>
  - name: pages
    description: 'Custom page numbers for multi-page documents(PDF/TIFF). Input the
      page numbers

      and/or ranges of pages you want to get in the result. For a range of pages,
      use a hyphen, like

      *pages=["1-3", "5-6"]*. Separate each page number or range with a comma.'
    types:
    - <xref:list>[<xref:str>]
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.RecognizedForm>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Recognize business cards from a file.<!--[!code-python[Main](les\\v3.1\\async_samples\\\
    sample_recognize_business_cards_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\6\\\\azure-ai-formrecognizer-3.3.3\\\\samples\\\\v3.1\\\
    \\async_samples\\\\sample_recognize_business_cards_async.py\", \"xml:space\":\
    \ \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.formrecognizer.aio import FormRecognizerClient\n\
    \n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_FORM_RECOGNIZER_KEY\"]\n\n   form_recognizer_client = FormRecognizerClient(\n\
    \       endpoint=endpoint, credential=AzureKeyCredential(key)\n   )\n   async\
    \ with form_recognizer_client:\n       with open(path_to_sample_forms, \"rb\"\
    ) as f:\n           poller = await form_recognizer_client.begin_recognize_business_cards(business_card=f,\
    \ locale=\"en-US\")\n       business_cards = await poller.result()\n\n   for idx,\
    \ business_card in enumerate(business_cards):\n       print(\"--------Recognizing\
    \ business card #{}--------\".format(idx+1))\n       contact_names = business_card.fields.get(\"\
    ContactNames\")\n       if contact_names:\n           for contact_name in contact_names.value:\n\
    \               print(\"Contact First Name: {} has confidence: {}\".format(\n\
    \                   contact_name.value[\"FirstName\"].value, contact_name.value[\"\
    FirstName\"].confidence\n               ))\n               print(\"Contact Last\
    \ Name: {} has confidence: {}\".format(\n                   contact_name.value[\"\
    LastName\"].value, contact_name.value[\"LastName\"].confidence\n             \
    \  ))\n       company_names = business_card.fields.get(\"CompanyNames\")\n   \
    \    if company_names:\n           for company_name in company_names.value:\n\
    \               print(\"Company Name: {} has confidence: {}\".format(company_name.value,\
    \ company_name.confidence))\n       departments = business_card.fields.get(\"\
    Departments\")\n       if departments:\n           for department in departments.value:\n\
    \               print(\"Department: {} has confidence: {}\".format(department.value,\
    \ department.confidence))\n       job_titles = business_card.fields.get(\"JobTitles\"\
    )\n       if job_titles:\n           for job_title in job_titles.value:\n    \
    \           print(\"Job Title: {} has confidence: {}\".format(job_title.value,\
    \ job_title.confidence))\n       emails = business_card.fields.get(\"Emails\"\
    )\n       if emails:\n           for email in emails.value:\n               print(\"\
    Email: {} has confidence: {}\".format(email.value, email.confidence))\n      \
    \ websites = business_card.fields.get(\"Websites\")\n       if websites:\n   \
    \        for website in websites.value:\n               print(\"Website: {} has\
    \ confidence: {}\".format(website.value, website.confidence))\n       addresses\
    \ = business_card.fields.get(\"Addresses\")\n       if addresses:\n          \
    \ for address in addresses.value:\n               print(\"Address: {} has confidence:\
    \ {}\".format(address.value, address.confidence))\n       mobile_phones = business_card.fields.get(\"\
    MobilePhones\")\n       if mobile_phones:\n           for phone in mobile_phones.value:\n\
    \               print(\"Mobile phone number: {} has confidence: {}\".format(phone.value,\
    \ phone.confidence))\n       faxes = business_card.fields.get(\"Faxes\")\n   \
    \    if faxes:\n           for fax in faxes.value:\n               print(\"Fax\
    \ number: {} has confidence: {}\".format(fax.value, fax.confidence))\n       work_phones\
    \ = business_card.fields.get(\"WorkPhones\")\n       if work_phones:\n       \
    \    for work_phone in work_phones.value:\n               print(\"Work phone number:\
    \ {} has confidence: {}\".format(work_phone.value, work_phone.confidence))\n \
    \      other_phones = business_card.fields.get(\"OtherPhones\")\n       if other_phones:\n\
    \           for other_phone in other_phones.value:\n               print(\"Other\
    \ phone number: {} has confidence: {}\".format(other_phone.value, other_phone.confidence))\n\
    \n   ````\n"
- uid: azure.ai.formrecognizer.aio.FormRecognizerClient.begin_recognize_business_cards_from_url
  name: begin_recognize_business_cards_from_url
  summary: 'Extract field text and semantic values from a given business card.

    The input document must be the location (URL) of the card to be analyzed.


    See fields found on a business card here:

    [https://aka.ms/formrecognizer/businesscardfields](https://aka.ms/formrecognizer/businesscardfields)


    *New in version v2.1:* The *begin_recognize_business_cards_from_url* client method'
  signature: 'async begin_recognize_business_cards_from_url(business_card_url: str,
    **kwargs: Any) -> AsyncLROPoller[List[RecognizedForm]]'
  parameters:
  - name: business_card_url
    description: 'The URL of the business card to analyze. The input must be a valid,
      encoded URL

      of one of the supported formats: JPEG, PNG, PDF, TIFF, or BMP.'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: locale
    description: 'Locale of the business card. Supported locales include: en-US, en-AU,
      en-CA, en-GB,

      and en-IN.'
    types:
    - <xref:str>
  - name: include_field_elements
    description: 'Whether or not to include all lines per page and field elements
      such as lines, words,

      and selection marks for each form field.'
    types:
    - <xref:bool>
  - name: pages
    description: 'Custom page numbers for multi-page documents(PDF/TIFF). Input the
      page numbers

      and/or ranges of pages you want to get in the result. For a range of pages,
      use a hyphen, like

      *pages=["1-3", "5-6"]*. Separate each page number or range with a comma.'
    types:
    - <xref:list>[<xref:str>]
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.RecognizedForm>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.ai.formrecognizer.aio.FormRecognizerClient.begin_recognize_content
  name: begin_recognize_content
  summary: 'Extract text and content/layout information from a given document.

    The input document must be of one of the supported content types - ''application/pdf'',

    ''image/jpeg'', ''image/png'', ''image/tiff'' or ''image/bmp''.


    *New in version v2.1:* The *pages*, *language* and *reading_order* keyword arguments
    and support for image/bmp content'
  signature: 'async begin_recognize_content(form: bytes | IO[bytes], **kwargs: Any)
    -> AsyncLROPoller[List[FormPage]]'
  parameters:
  - name: form
    description: JPEG, PNG, PDF, TIFF, or BMP type file stream or bytes.
    isRequired: true
    types:
    - <xref:bytes>
    - <xref:typing.IO>[<xref:bytes>]
  keywordOnlyParameters:
  - name: pages
    description: 'Custom page numbers for multi-page documents(PDF/TIFF). Input the
      page numbers

      and/or ranges of pages you want to get in the result. For a range of pages,
      use a hyphen, like

      *pages=["1-3", "5-6"]*. Separate each page number or range with a comma.'
    types:
    - <xref:list>[<xref:str>]
  - name: language
    description: 'The BCP-47 language code of the text in the document.

      See supported language codes here:

      [https://docs.microsoft.com/azure/cognitive-services/form-recognizer/language-support](https://docs.microsoft.com/azure/cognitive-services/form-recognizer/language-support).

      Content supports auto language identification and multilanguage documents, so
      only

      provide a language code if you would like to force the documented to be processed
      as

      that specific language.'
    types:
    - <xref:str>
  - name: reading_order
    description: 'Reading order algorithm to sort the text lines returned. Supported

      reading orders include: basic (default), natural. Set ''basic'' to sort lines
      left to right and top

      to bottom, although in some cases proximity is treated with higher priority.
      Set ''natural'' to sort

      lines by using positional information to keep nearby lines together.'
    types:
    - <xref:str>
  - name: content_type
    description: 'Content-type of the body sent to the API. Content-type is

      auto-detected, but can be overridden by passing this keyword argument. For options,

      see <xref:azure.ai.formrecognizer.FormContentType>.'
    types:
    - <xref:str>
    - <xref:azure.ai.formrecognizer.FormContentType>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.FormPage>].'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.FormPage>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Recognize text and content/layout information from a form.<!--[!code-python[Main](les\\\
    v3.1\\async_samples\\sample_recognize_content_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\6\\\\azure-ai-formrecognizer-3.3.3\\\
    \\samples\\\\v3.1\\\\async_samples\\\\sample_recognize_content_async.py\", \"\
    xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.formrecognizer.aio import FormRecognizerClient\n\
    \n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_FORM_RECOGNIZER_KEY\"]\n\n   async with FormRecognizerClient(\n       endpoint=endpoint,\
    \ credential=AzureKeyCredential(key)\n   ) as form_recognizer_client:\n\n    \
    \   with open(path_to_sample_forms, \"rb\") as f:\n           poller = await form_recognizer_client.begin_recognize_content(form=f)\n\
    \n       form_pages = await poller.result()\n\n       for idx, content in enumerate(form_pages):\n\
    \           print(\"----Recognizing content from page #{}----\".format(idx+1))\n\
    \           print(\"Page has width: {} and height: {}, measured with unit: {}\"\
    .format(\n               content.width,\n               content.height,\n    \
    \           content.unit\n           ))\n           for table_idx, table in enumerate(content.tables):\n\
    \               print(\"Table # {} has {} rows and {} columns\".format(table_idx,\
    \ table.row_count, table.column_count))\n               print(\"Table # {} location\
    \ on page: {}\".format(table_idx, format_bounding_box(table.bounding_box)))\n\
    \               for cell in table.cells:\n                   print(\"...Cell[{}][{}]\
    \ has text '{}' within bounding box '{}'\".format(\n                       cell.row_index,\n\
    \                       cell.column_index,\n                       cell.text,\n\
    \                       format_bounding_box(cell.bounding_box)\n             \
    \      ))\n\n           for line_idx, line in enumerate(content.lines):\n    \
    \           print(\"Line # {} has word count '{}' and text '{}' within bounding\
    \ box '{}'\".format(\n                   line_idx,\n                   len(line.words),\n\
    \                   line.text,\n                   format_bounding_box(line.bounding_box)\n\
    \               ))\n               if line.appearance:\n                   if\
    \ line.appearance.style_name == \"handwriting\" and line.appearance.style_confidence\
    \ > 0.8:\n                       print(\"Text line '{}' is handwritten and might\
    \ be a signature.\".format(line.text))\n               for word in line.words:\n\
    \                   print(\"...Word '{}' has a confidence of {}\".format(word.text,\
    \ word.confidence))\n\n           for selection_mark in content.selection_marks:\n\
    \               print(\"Selection mark is '{}' within bounding box '{}' and has\
    \ a confidence of {}\".format(\n                   selection_mark.state,\n   \
    \                format_bounding_box(selection_mark.bounding_box),\n         \
    \          selection_mark.confidence\n               ))\n           print(\"----------------------------------------\"\
    )\n\n\n   ````\n"
- uid: azure.ai.formrecognizer.aio.FormRecognizerClient.begin_recognize_content_from_url
  name: begin_recognize_content_from_url
  summary: 'Extract text and layout information from a given document.

    The input document must be the location (URL) of the document to be analyzed.


    *New in version v2.1:* The *pages*, *language* and *reading_order* keyword arguments
    and support for image/bmp content'
  signature: 'async begin_recognize_content_from_url(form_url: str, **kwargs: Any)
    -> AsyncLROPoller[List[FormPage]]'
  parameters:
  - name: form_url
    description: 'The URL of the form to analyze. The input must be a valid, encoded
      URL

      of one of the supported formats: JPEG, PNG, PDF, TIFF, or BMP.'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: pages
    description: 'Custom page numbers for multi-page documents(PDF/TIFF). Input the
      page numbers

      and/or ranges of pages you want to get in the result. For a range of pages,
      use a hyphen, like

      *pages=["1-3", "5-6"]*. Separate each page number or range with a comma.'
    types:
    - <xref:list>[<xref:str>]
  - name: language
    description: 'The BCP-47 language code of the text in the document.

      See supported language codes here:

      [https://docs.microsoft.com/azure/cognitive-services/form-recognizer/language-support](https://docs.microsoft.com/azure/cognitive-services/form-recognizer/language-support).

      Content supports auto language identification and multilanguage documents, so
      only

      provide a language code if you would like to force the documented to be processed
      as

      that specific language.'
    types:
    - <xref:str>
  - name: reading_order
    description: 'Reading order algorithm to sort the text lines returned. Supported

      reading orders include: basic (default), natural. Set ''basic'' to sort lines
      left to right and top

      to bottom, although in some cases proximity is treated with higher priority.
      Set ''natural'' to sort

      lines by using positional information to keep nearby lines together.'
    types:
    - <xref:str>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.FormPage>].'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.FormPage>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.ai.formrecognizer.aio.FormRecognizerClient.begin_recognize_custom_forms
  name: begin_recognize_custom_forms
  summary: 'Analyze a custom form with a model trained with or without labels. The
    form

    to analyze should be of the same type as the forms that were used to train the
    model.

    The input document must be of one of the supported content types - ''application/pdf'',

    ''image/jpeg'', ''image/png'', ''image/tiff'', or ''image/bmp''.'
  signature: 'async begin_recognize_custom_forms(model_id: str, form: bytes | IO[bytes],
    **kwargs: Any) -> AsyncLROPoller[List[RecognizedForm]]'
  parameters:
  - name: model_id
    description: Custom model identifier.
    isRequired: true
    types:
    - <xref:str>
  - name: form
    description: JPEG, PNG, PDF, TIFF, or BMP type file stream or bytes.
    isRequired: true
    types:
    - <xref:bytes>
    - <xref:typing.IO>[<xref:bytes>]
  keywordOnlyParameters:
  - name: include_field_elements
    description: 'Whether or not to include all lines per page and field elements
      such as lines, words,

      and selection marks for each form field.'
    types:
    - <xref:bool>
  - name: content_type
    description: 'Content-type of the body sent to the API. Content-type is

      auto-detected, but can be overridden by passing this keyword argument. For options,

      see <xref:azure.ai.formrecognizer.FormContentType>.'
    types:
    - <xref:str>
    - <xref:azure.ai.formrecognizer.FormContentType>
  - name: pages
    description: 'Custom page numbers for multi-page documents(PDF/TIFF). Input the
      page numbers

      and/or ranges of pages you want to get in the result. For a range of pages,
      use a hyphen, like

      *pages=["1-3", "5-6"]*. Separate each page number or range with a comma.'
    types:
    - <xref:list>[<xref:str>]
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.RecognizedForm>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Recognize fields and values from a custom form.<!--[!code-python[Main](les\\\
    v3.1\\async_samples\\sample_recognize_custom_forms_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\6\\\\azure-ai-formrecognizer-3.3.3\\\
    \\samples\\\\v3.1\\\\async_samples\\\\sample_recognize_custom_forms_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.core.credentials import AzureKeyCredential\n   from azure.ai.formrecognizer.aio\
    \ import FormRecognizerClient\n\n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"\
    ]\n   key = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\n   model_id = os.getenv(\"\
    CUSTOM_TRAINED_MODEL_ID\", custom_model_id)\n\n   async with FormRecognizerClient(\n\
    \       endpoint=endpoint, credential=AzureKeyCredential(key)\n   ) as form_recognizer_client:\n\
    \n       # Make sure your form's type is included in the list of form types the\
    \ custom model can recognize\n       with open(path_to_sample_forms, \"rb\") as\
    \ f:\n           poller = await form_recognizer_client.begin_recognize_custom_forms(\n\
    \               model_id=model_id, form=f, include_field_elements=True\n     \
    \      )\n       forms = await poller.result()\n\n       for idx, form in enumerate(forms):\n\
    \           print(\"--------Recognizing Form #{}--------\".format(idx+1))\n  \
    \         print(\"Form has type {}\".format(form.form_type))\n           print(\"\
    Form has form type confidence {}\".format(form.form_type_confidence))\n      \
    \     print(\"Form was analyzed with model with ID {}\".format(form.model_id))\n\
    \           for name, field in form.fields.items():\n               # each field\
    \ is of type FormField\n               # label_data is populated if you are using\
    \ a model trained without labels,\n               # since the service needs to\
    \ make predictions for labels if not explicitly given to it.\n               if\
    \ field.label_data:\n                   print(\"...Field '{}' has label '{}' with\
    \ a confidence score of {}\".format(\n                       name,\n         \
    \              field.label_data.text,\n                       field.confidence\n\
    \                   ))\n\n               print(\"...Label '{}' has value '{}'\
    \ with a confidence score of {}\".format(\n                   field.label_data.text\
    \ if field.label_data else name, field.value, field.confidence\n             \
    \  ))\n\n           # iterate over tables, lines, and selection marks on each\
    \ page\n           for page in form.pages:\n               for i, table in enumerate(page.tables):\n\
    \                   print(\"\\nTable {} on page {}\".format(i + 1, table.page_number))\n\
    \                   for cell in table.cells:\n                       print(\"\
    ...Cell[{}][{}] has text '{}' with confidence {}\".format(\n                 \
    \          cell.row_index, cell.column_index, cell.text, cell.confidence\n   \
    \                    ))\n               print(\"\\nLines found on page {}\".format(page.page_number))\n\
    \               for line in page.lines:\n                   print(\"...Line '{}'\
    \ is made up of the following words: \".format(line.text))\n                 \
    \  for word in line.words:\n                       print(\"......Word '{}' has\
    \ a confidence of {}\".format(\n                           word.text,\n      \
    \                     word.confidence\n                       ))\n           \
    \    if page.selection_marks:\n                   print(\"\\nSelection marks found\
    \ on page {}\".format(page.page_number))\n                   for selection_mark\
    \ in page.selection_marks:\n                       print(\"......Selection mark\
    \ is '{}' and has a confidence of {}\".format(\n                           selection_mark.state,\n\
    \                           selection_mark.confidence\n                      \
    \ ))\n\n           print(\"-----------------------------------\")\n\n   ````\n"
- uid: azure.ai.formrecognizer.aio.FormRecognizerClient.begin_recognize_custom_forms_from_url
  name: begin_recognize_custom_forms_from_url
  summary: 'Analyze a custom form with a model trained with or without labels. The
    form

    to analyze should be of the same type as the forms that were used to train the
    model.

    The input document must be the location (URL) of the document to be analyzed.'
  signature: 'async begin_recognize_custom_forms_from_url(model_id: str, form_url:
    str, **kwargs: Any) -> AsyncLROPoller[List[RecognizedForm]]'
  parameters:
  - name: model_id
    description: Custom model identifier.
    isRequired: true
    types:
    - <xref:str>
  - name: form_url
    description: 'The URL of the form to analyze. The input must be a valid, encoded
      URL

      of one of the supported formats: JPEG, PNG, PDF, TIFF, or BMP.'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: include_field_elements
    description: 'Whether or not to include all lines per page and field elements
      such as lines, words,

      and selection marks for each form field.'
    types:
    - <xref:bool>
  - name: pages
    description: 'Custom page numbers for multi-page documents(PDF/TIFF). Input the
      page numbers

      and/or ranges of pages you want to get in the result. For a range of pages,
      use a hyphen, like

      *pages=["1-3", "5-6"]*. Separate each page number or range with a comma.'
    types:
    - <xref:list>[<xref:str>]
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.RecognizedForm>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.ai.formrecognizer.aio.FormRecognizerClient.begin_recognize_identity_documents
  name: begin_recognize_identity_documents
  summary: 'Extract field text and semantic values from a given identity document.

    The input document must be of one of the supported content types - ''application/pdf'',

    ''image/jpeg'', ''image/png'', ''image/tiff'' or ''image/bmp''.


    See fields found on an identity document here:

    [https://aka.ms/formrecognizer/iddocumentfields](https://aka.ms/formrecognizer/iddocumentfields)


    *New in version v2.1:* The *begin_recognize_identity_documents* client method'
  signature: 'async begin_recognize_identity_documents(identity_document: bytes |
    IO[bytes], **kwargs: Any) -> AsyncLROPoller[List[RecognizedForm]]'
  parameters:
  - name: identity_document
    description: JPEG, PNG, PDF, TIFF, or BMP type file stream or bytes.
    isRequired: true
    types:
    - <xref:bytes>
    - <xref:typing.IO>[<xref:bytes>]
  keywordOnlyParameters:
  - name: include_field_elements
    description: 'Whether or not to include all lines per page and field elements
      such as lines, words,

      and selection marks for each form field.'
    types:
    - <xref:bool>
  - name: content_type
    description: 'Content-type of the body sent to the API. Content-type is

      auto-detected, but can be overridden by passing this keyword argument. For options,

      see <xref:azure.ai.formrecognizer.FormContentType>.'
    types:
    - <xref:str>
    - <xref:azure.ai.formrecognizer.FormContentType>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  - name: pages
    description: 'Custom page numbers for multi-page documents(PDF/TIFF). Input the
      page numbers

      and/or ranges of pages you want to get in the result. For a range of pages,
      use a hyphen, like

      *pages=["1-3", "5-6"]*. Separate each page number or range with a comma.'
    types:
    - <xref:list>[<xref:str>]
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.RecognizedForm>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Recognize identity documents from a file.<!--[!code-python[Main](les\\v3.1\\\
    async_samples\\sample_recognize_identity_documents_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\6\\\\azure-ai-formrecognizer-3.3.3\\\
    \\samples\\\\v3.1\\\\async_samples\\\\sample_recognize_identity_documents_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.core.credentials import AzureKeyCredential\n   from azure.ai.formrecognizer.aio\
    \ import FormRecognizerClient\n\n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"\
    ]\n   key = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\n\n   async with FormRecognizerClient(\n\
    \       endpoint=endpoint, credential=AzureKeyCredential(key)\n   ) as form_recognizer_client:\n\
    \       \n       with open(path_to_sample_forms, \"rb\") as f:\n           poller\
    \ = await form_recognizer_client.begin_recognize_identity_documents(identity_document=f)\n\
    \       \n       id_documents = await poller.result()\n\n       for idx, id_document\
    \ in enumerate(id_documents):\n           print(\"--------Recognizing ID document\
    \ #{}--------\".format(idx+1))\n           first_name = id_document.fields.get(\"\
    FirstName\")\n           if first_name:\n               print(\"First Name: {}\
    \ has confidence: {}\".format(first_name.value, first_name.confidence))\n    \
    \       last_name = id_document.fields.get(\"LastName\")\n           if last_name:\n\
    \               print(\"Last Name: {} has confidence: {}\".format(last_name.value,\
    \ last_name.confidence))\n           document_number = id_document.fields.get(\"\
    DocumentNumber\")\n           if document_number:\n               print(\"Document\
    \ Number: {} has confidence: {}\".format(document_number.value, document_number.confidence))\n\
    \           dob = id_document.fields.get(\"DateOfBirth\")\n           if dob:\n\
    \               print(\"Date of Birth: {} has confidence: {}\".format(dob.value,\
    \ dob.confidence))\n           doe = id_document.fields.get(\"DateOfExpiration\"\
    )\n           if doe:\n               print(\"Date of Expiration: {} has confidence:\
    \ {}\".format(doe.value, doe.confidence))\n           sex = id_document.fields.get(\"\
    Sex\")\n           if sex:\n               print(\"Sex: {} has confidence: {}\"\
    .format(sex.value, sex.confidence))\n           address = id_document.fields.get(\"\
    Address\")\n           if address:\n               print(\"Address: {} has confidence:\
    \ {}\".format(address.value, address.confidence))\n           country_region =\
    \ id_document.fields.get(\"CountryRegion\")\n           if country_region:\n \
    \              print(\"Country/Region: {} has confidence: {}\".format(country_region.value,\
    \ country_region.confidence))\n           region = id_document.fields.get(\"Region\"\
    )\n           if region:\n               print(\"Region: {} has confidence: {}\"\
    .format(region.value, region.confidence))\n\n   ````\n"
- uid: azure.ai.formrecognizer.aio.FormRecognizerClient.begin_recognize_identity_documents_from_url
  name: begin_recognize_identity_documents_from_url
  summary: 'Extract field text and semantic values from a given identity document.

    The input document must be the location (URL) of the identity document to be analyzed.


    See fields found on an identity document here:

    [https://aka.ms/formrecognizer/iddocumentfields](https://aka.ms/formrecognizer/iddocumentfields)


    *New in version v2.1:* The *begin_recognize_identity_documents_from_url* client
    method'
  signature: 'async begin_recognize_identity_documents_from_url(identity_document_url:
    str, **kwargs: Any) -> AsyncLROPoller[List[RecognizedForm]]'
  parameters:
  - name: identity_document_url
    description: 'The URL of the identity document to analyze. The input must be a
      valid,

      encoded URL of one of the supported formats: JPEG, PNG, PDF, TIFF, or BMP.'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: include_field_elements
    description: 'Whether or not to include all lines per page and field elements
      such as lines, words,

      and selection marks for each form field.'
    types:
    - <xref:bool>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  - name: pages
    description: 'Custom page numbers for multi-page documents(PDF/TIFF). Input the
      page numbers

      and/or ranges of pages you want to get in the result. For a range of pages,
      use a hyphen, like

      *pages=["1-3", "5-6"]*. Separate each page number or range with a comma.'
    types:
    - <xref:list>[<xref:str>]
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.RecognizedForm>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.ai.formrecognizer.aio.FormRecognizerClient.begin_recognize_invoices
  name: begin_recognize_invoices
  summary: 'Extract field text and semantic values from a given invoice.

    The input document must be of one of the supported content types - ''application/pdf'',

    ''image/jpeg'', ''image/png'', ''image/tiff'' or ''image/bmp''.


    See fields found on a invoice here:

    [https://aka.ms/formrecognizer/invoicefields](https://aka.ms/formrecognizer/invoicefields)


    *New in version v2.1:* The *begin_recognize_invoices* client method'
  signature: 'async begin_recognize_invoices(invoice: bytes | IO[bytes], **kwargs:
    Any) -> AsyncLROPoller[List[RecognizedForm]]'
  parameters:
  - name: invoice
    description: JPEG, PNG, PDF, TIFF, or BMP type file stream or bytes.
    isRequired: true
    types:
    - <xref:bytes>
    - <xref:typing.IO>[<xref:bytes>]
  keywordOnlyParameters:
  - name: locale
    description: 'Locale of the invoice. Supported locales include: en-US'
    types:
    - <xref:str>
  - name: include_field_elements
    description: 'Whether or not to include all lines per page and field elements
      such as lines, words,

      and selection marks for each form field.'
    types:
    - <xref:bool>
  - name: content_type
    description: 'Content-type of the body sent to the API. Content-type is

      auto-detected, but can be overridden by passing this keyword argument. For options,

      see <xref:azure.ai.formrecognizer.FormContentType>.'
    types:
    - <xref:str>
    - <xref:azure.ai.formrecognizer.FormContentType>
  - name: pages
    description: 'Custom page numbers for multi-page documents(PDF/TIFF). Input the
      page numbers

      and/or ranges of pages you want to get in the result. For a range of pages,
      use a hyphen, like

      *pages=["1-3", "5-6"]*. Separate each page number or range with a comma.'
    types:
    - <xref:list>[<xref:str>]
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.RecognizedForm>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Recognize invoices from a file.<!--[!code-python[Main](les\\v3.1\\async_samples\\\
    sample_recognize_invoices_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\6\\\\azure-ai-formrecognizer-3.3.3\\\\samples\\\\v3.1\\\
    \\async_samples\\\\sample_recognize_invoices_async.py\", \"xml:space\": \"preserve\"\
    , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
    : 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.formrecognizer.aio import FormRecognizerClient\n\
    \n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_FORM_RECOGNIZER_KEY\"]\n\n   async with FormRecognizerClient(\n       endpoint=endpoint,\
    \ credential=AzureKeyCredential(key)\n   ) as form_recognizer_client:\n      \
    \ with open(path_to_sample_forms, \"rb\") as f:\n           poller = await form_recognizer_client.begin_recognize_invoices(invoice=f,\
    \ locale=\"en-US\")\n       invoices = await poller.result()\n\n       for idx,\
    \ invoice in enumerate(invoices):\n           print(\"--------Recognizing invoice\
    \ #{}--------\".format(idx+1))\n           vendor_name = invoice.fields.get(\"\
    VendorName\")\n           if vendor_name:\n               print(\"Vendor Name:\
    \ {} has confidence: {}\".format(vendor_name.value, vendor_name.confidence))\n\
    \           vendor_address = invoice.fields.get(\"VendorAddress\")\n         \
    \  if vendor_address:\n               print(\"Vendor Address: {} has confidence:\
    \ {}\".format(vendor_address.value, vendor_address.confidence))\n           vendor_address_recipient\
    \ = invoice.fields.get(\"VendorAddressRecipient\")\n           if vendor_address_recipient:\n\
    \               print(\"Vendor Address Recipient: {} has confidence: {}\".format(vendor_address_recipient.value,\
    \ vendor_address_recipient.confidence))\n           customer_name = invoice.fields.get(\"\
    CustomerName\")\n           if customer_name:\n               print(\"Customer\
    \ Name: {} has confidence: {}\".format(customer_name.value, customer_name.confidence))\n\
    \           customer_id = invoice.fields.get(\"CustomerId\")\n           if customer_id:\n\
    \               print(\"Customer Id: {} has confidence: {}\".format(customer_id.value,\
    \ customer_id.confidence))\n           customer_address = invoice.fields.get(\"\
    CustomerAddress\")\n           if customer_address:\n               print(\"Customer\
    \ Address: {} has confidence: {}\".format(customer_address.value, customer_address.confidence))\n\
    \           customer_address_recipient = invoice.fields.get(\"CustomerAddressRecipient\"\
    )\n           if customer_address_recipient:\n               print(\"Customer\
    \ Address Recipient: {} has confidence: {}\".format(customer_address_recipient.value,\
    \ customer_address_recipient.confidence))\n           invoice_id = invoice.fields.get(\"\
    InvoiceId\")\n           if invoice_id:\n               print(\"Invoice Id: {}\
    \ has confidence: {}\".format(invoice_id.value, invoice_id.confidence))\n    \
    \       invoice_date = invoice.fields.get(\"InvoiceDate\")\n           if invoice_date:\n\
    \               print(\"Invoice Date: {} has confidence: {}\".format(invoice_date.value,\
    \ invoice_date.confidence))\n           invoice_total = invoice.fields.get(\"\
    InvoiceTotal\")\n           if invoice_total:\n               print(\"Invoice\
    \ Total: {} has confidence: {}\".format(invoice_total.value, invoice_total.confidence))\n\
    \           due_date = invoice.fields.get(\"DueDate\")\n           if due_date:\n\
    \               print(\"Due Date: {} has confidence: {}\".format(due_date.value,\
    \ due_date.confidence))\n           purchase_order = invoice.fields.get(\"PurchaseOrder\"\
    )\n           if purchase_order:\n               print(\"Purchase Order: {} has\
    \ confidence: {}\".format(purchase_order.value, purchase_order.confidence))\n\
    \           billing_address = invoice.fields.get(\"BillingAddress\")\n       \
    \    if billing_address:\n               print(\"Billing Address: {} has confidence:\
    \ {}\".format(billing_address.value, billing_address.confidence))\n          \
    \ billing_address_recipient = invoice.fields.get(\"BillingAddressRecipient\")\n\
    \           if billing_address_recipient:\n               print(\"Billing Address\
    \ Recipient: {} has confidence: {}\".format(billing_address_recipient.value, billing_address_recipient.confidence))\n\
    \           shipping_address = invoice.fields.get(\"ShippingAddress\")\n     \
    \      if shipping_address:\n               print(\"Shipping Address: {} has confidence:\
    \ {}\".format(shipping_address.value, shipping_address.confidence))\n        \
    \   shipping_address_recipient = invoice.fields.get(\"ShippingAddressRecipient\"\
    )\n           if shipping_address_recipient:\n               print(\"Shipping\
    \ Address Recipient: {} has confidence: {}\".format(shipping_address_recipient.value,\
    \ shipping_address_recipient.confidence))\n           print(\"Invoice items:\"\
    )\n           for idx, item in enumerate(invoice.fields.get(\"Items\").value):\n\
    \               print(\"...Item #{}\".format(idx+1))\n               item_description\
    \ = item.value.get(\"Description\")\n               if item_description:\n   \
    \                print(\"......Description: {} has confidence: {}\".format(item_description.value,\
    \ item_description.confidence))\n               item_quantity = item.value.get(\"\
    Quantity\")\n               if item_quantity:\n                   print(\"......Quantity:\
    \ {} has confidence: {}\".format(item_quantity.value, item_quantity.confidence))\n\
    \               unit = item.value.get(\"Unit\")\n               if unit:\n   \
    \                print(\"......Unit: {} has confidence: {}\".format(unit.value,\
    \ unit.confidence))\n               unit_price = item.value.get(\"UnitPrice\"\
    )\n               if unit_price:\n                   print(\"......Unit Price:\
    \ {} has confidence: {}\".format(unit_price.value, unit_price.confidence))\n \
    \              product_code = item.value.get(\"ProductCode\")\n              \
    \ if product_code:\n                   print(\"......Product Code: {} has confidence:\
    \ {}\".format(product_code.value, product_code.confidence))\n               item_date\
    \ = item.value.get(\"Date\")\n               if item_date:\n                 \
    \  print(\"......Date: {} has confidence: {}\".format(item_date.value, item_date.confidence))\n\
    \               tax = item.value.get(\"Tax\")\n               if tax:\n      \
    \             print(\"......Tax: {} has confidence: {}\".format(tax.value, tax.confidence))\n\
    \               amount = item.value.get(\"Amount\")\n               if amount:\n\
    \                   print(\"......Amount: {} has confidence: {}\".format(amount.value,\
    \ amount.confidence))\n           subtotal = invoice.fields.get(\"SubTotal\")\n\
    \           if subtotal:\n               print(\"Subtotal: {} has confidence:\
    \ {}\".format(subtotal.value, subtotal.confidence))\n           total_tax = invoice.fields.get(\"\
    TotalTax\")\n           if total_tax:\n               print(\"Total Tax: {} has\
    \ confidence: {}\".format(total_tax.value, total_tax.confidence))\n          \
    \ previous_unpaid_balance = invoice.fields.get(\"PreviousUnpaidBalance\")\n  \
    \         if previous_unpaid_balance:\n               print(\"Previous Unpaid\
    \ Balance: {} has confidence: {}\".format(previous_unpaid_balance.value, previous_unpaid_balance.confidence))\n\
    \           amount_due = invoice.fields.get(\"AmountDue\")\n           if amount_due:\n\
    \               print(\"Amount Due: {} has confidence: {}\".format(amount_due.value,\
    \ amount_due.confidence))\n           service_start_date = invoice.fields.get(\"\
    ServiceStartDate\")\n           if service_start_date:\n               print(\"\
    Service Start Date: {} has confidence: {}\".format(service_start_date.value, service_start_date.confidence))\n\
    \           service_end_date = invoice.fields.get(\"ServiceEndDate\")\n      \
    \     if service_end_date:\n               print(\"Service End Date: {} has confidence:\
    \ {}\".format(service_end_date.value, service_end_date.confidence))\n        \
    \   service_address = invoice.fields.get(\"ServiceAddress\")\n           if service_address:\n\
    \               print(\"Service Address: {} has confidence: {}\".format(service_address.value,\
    \ service_address.confidence))\n           service_address_recipient = invoice.fields.get(\"\
    ServiceAddressRecipient\")\n           if service_address_recipient:\n       \
    \        print(\"Service Address Recipient: {} has confidence: {}\".format(service_address_recipient.value,\
    \ service_address_recipient.confidence))\n           remittance_address = invoice.fields.get(\"\
    RemittanceAddress\")\n           if remittance_address:\n               print(\"\
    Remittance Address: {} has confidence: {}\".format(remittance_address.value, remittance_address.confidence))\n\
    \           remittance_address_recipient = invoice.fields.get(\"RemittanceAddressRecipient\"\
    )\n           if remittance_address_recipient:\n               print(\"Remittance\
    \ Address Recipient: {} has confidence: {}\".format(remittance_address_recipient.value,\
    \ remittance_address_recipient.confidence))\n\n   ````\n"
- uid: azure.ai.formrecognizer.aio.FormRecognizerClient.begin_recognize_invoices_from_url
  name: begin_recognize_invoices_from_url
  summary: 'Extract field text and semantic values from a given invoice.

    The input document must be the location (URL) of the invoice to be analyzed.


    See fields found on a invoice card here:

    [https://aka.ms/formrecognizer/invoicefields](https://aka.ms/formrecognizer/invoicefields)


    *New in version v2.1:* The *begin_recognize_invoices_from_url* client method'
  signature: 'async begin_recognize_invoices_from_url(invoice_url: str, **kwargs:
    Any) -> AsyncLROPoller[List[RecognizedForm]]'
  parameters:
  - name: invoice_url
    description: 'The URL of the invoice to analyze. The input must be a valid, encoded
      URL

      of one of the supported formats: JPEG, PNG, PDF, TIFF, or BMP.'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: locale
    description: 'Locale of the invoice. Supported locales include: en-US'
    types:
    - <xref:str>
  - name: include_field_elements
    description: 'Whether or not to include all lines per page and field elements
      such as lines, words,

      and selection marks for each form field.'
    types:
    - <xref:bool>
  - name: pages
    description: 'Custom page numbers for multi-page documents(PDF/TIFF). Input the
      page numbers

      and/or ranges of pages you want to get in the result. For a range of pages,
      use a hyphen, like

      *pages=["1-3", "5-6"]*. Separate each page number or range with a comma.'
    types:
    - <xref:list>[<xref:str>]
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.RecognizedForm>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.ai.formrecognizer.aio.FormRecognizerClient.begin_recognize_receipts
  name: begin_recognize_receipts
  summary: 'Extract field text and semantic values from a given sales receipt.

    The input document must be of one of the supported content types - ''application/pdf'',

    ''image/jpeg'', ''image/png'', ''image/tiff'' or ''image/bmp''.


    See fields found on a receipt here:

    [https://aka.ms/formrecognizer/receiptfields](https://aka.ms/formrecognizer/receiptfields)


    *New in version v2.1:* The *locale* keyword argument and support for image/bmp
    content'
  signature: 'async begin_recognize_receipts(receipt: bytes | IO[bytes], **kwargs:
    Any) -> AsyncLROPoller[List[RecognizedForm]]'
  parameters:
  - name: receipt
    description: JPEG, PNG, PDF, TIFF, or BMP type file stream or bytes.
    isRequired: true
    types:
    - <xref:bytes>
    - <xref:typing.IO>[<xref:bytes>]
  keywordOnlyParameters:
  - name: include_field_elements
    description: 'Whether or not to include all lines per page and field elements
      such as lines, words,

      and selection marks for each form field.'
    types:
    - <xref:bool>
  - name: content_type
    description: 'Content-type of the body sent to the API. Content-type is

      auto-detected, but can be overridden by passing this keyword argument. For options,

      see <xref:azure.ai.formrecognizer.FormContentType>.'
    types:
    - <xref:str>
    - <xref:azure.ai.formrecognizer.FormContentType>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  - name: locale
    description: 'Locale of the receipt. Supported locales include: en-US, en-AU,
      en-CA, en-GB,

      and en-IN.'
    types:
    - <xref:str>
  - name: pages
    description: 'Custom page numbers for multi-page documents(PDF/TIFF). Input the
      page numbers

      and/or ranges of pages you want to get in the result. For a range of pages,
      use a hyphen, like

      *pages=["1-3", "5-6"]*. Separate each page number or range with a comma.'
    types:
    - <xref:list>[<xref:str>]
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.RecognizedForm>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Recognize sales receipt fields.<!--[!code-python[Main](les\\v3.1\\async_samples\\\
    sample_recognize_receipts_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\6\\\\azure-ai-formrecognizer-3.3.3\\\\samples\\\\v3.1\\\
    \\async_samples\\\\sample_recognize_receipts_async.py\", \"xml:space\": \"preserve\"\
    , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
    : 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.formrecognizer.aio import FormRecognizerClient\n\
    \n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_FORM_RECOGNIZER_KEY\"]\n\n   async with FormRecognizerClient(\n       endpoint=endpoint,\
    \ credential=AzureKeyCredential(key)\n   ) as form_recognizer_client:\n\n    \
    \   with open(path_to_sample_forms, \"rb\") as f:\n           poller = await form_recognizer_client.begin_recognize_receipts(receipt=f,\
    \ locale=\"en-US\")\n\n       receipts = await poller.result()\n\n       for idx,\
    \ receipt in enumerate(receipts):\n           print(\"--------Recognizing receipt\
    \ #{}--------\".format(idx+1))\n           receipt_type = receipt.fields.get(\"\
    ReceiptType\")\n           if receipt_type:\n               print(\"Receipt Type:\
    \ {} has confidence: {}\".format(receipt_type.value, receipt_type.confidence))\n\
    \           merchant_name = receipt.fields.get(\"MerchantName\")\n           if\
    \ merchant_name:\n               print(\"Merchant Name: {} has confidence: {}\"\
    .format(merchant_name.value, merchant_name.confidence))\n           transaction_date\
    \ = receipt.fields.get(\"TransactionDate\")\n           if transaction_date:\n\
    \               print(\"Transaction Date: {} has confidence: {}\".format(transaction_date.value,\
    \ transaction_date.confidence))\n           if receipt.fields.get(\"Items\"):\n\
    \               print(\"Receipt items:\")\n               for idx, item in enumerate(receipt.fields.get(\"\
    Items\").value):\n                   print(\"...Item #{}\".format(idx+1))\n  \
    \                 item_name = item.value.get(\"Name\")\n                   if\
    \ item_name:\n                       print(\"......Item Name: {} has confidence:\
    \ {}\".format(item_name.value, item_name.confidence))\n                   item_quantity\
    \ = item.value.get(\"Quantity\")\n                   if item_quantity:\n     \
    \                  print(\"......Item Quantity: {} has confidence: {}\".format(item_quantity.value,\
    \ item_quantity.confidence))\n                   item_price = item.value.get(\"\
    Price\")\n                   if item_price:\n                       print(\"......Individual\
    \ Item Price: {} has confidence: {}\".format(item_price.value, item_price.confidence))\n\
    \                   item_total_price = item.value.get(\"TotalPrice\")\n      \
    \             if item_total_price:\n                       print(\"......Total\
    \ Item Price: {} has confidence: {}\".format(item_total_price.value, item_total_price.confidence))\n\
    \           subtotal = receipt.fields.get(\"Subtotal\")\n           if subtotal:\n\
    \               print(\"Subtotal: {} has confidence: {}\".format(subtotal.value,\
    \ subtotal.confidence))\n           tax = receipt.fields.get(\"Tax\")\n      \
    \     if tax:\n               print(\"Tax: {} has confidence: {}\".format(tax.value,\
    \ tax.confidence))\n           tip = receipt.fields.get(\"Tip\")\n           if\
    \ tip:\n               print(\"Tip: {} has confidence: {}\".format(tip.value,\
    \ tip.confidence))\n           total = receipt.fields.get(\"Total\")\n       \
    \    if total:\n               print(\"Total: {} has confidence: {}\".format(total.value,\
    \ total.confidence))\n           print(\"--------------------------------------\"\
    )\n\n   ````\n"
- uid: azure.ai.formrecognizer.aio.FormRecognizerClient.begin_recognize_receipts_from_url
  name: begin_recognize_receipts_from_url
  summary: 'Extract field text and semantic values from a given sales receipt.

    The input document must be the location (URL) of the receipt to be analyzed.


    See fields found on a receipt here:

    [https://aka.ms/formrecognizer/receiptfields](https://aka.ms/formrecognizer/receiptfields)


    *New in version v2.1:* The *locale* keyword argument and support for image/bmp
    content'
  signature: 'async begin_recognize_receipts_from_url(receipt_url: str, **kwargs:
    Any) -> AsyncLROPoller[List[RecognizedForm]]'
  parameters:
  - name: receipt_url
    description: 'The URL of the receipt to analyze. The input must be a valid, encoded
      URL

      of one of the supported formats: JPEG, PNG, PDF, TIFF, or BMP.'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: include_field_elements
    description: 'Whether or not to include all lines per page and field elements
      such as lines, words,

      and selection marks for each form field.'
    types:
    - <xref:bool>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  - name: locale
    description: 'Locale of the receipt. Supported locales include: en-US, en-AU,
      en-CA, en-GB,

      and en-IN.'
    types:
    - <xref:str>
  - name: pages
    description: 'Custom page numbers for multi-page documents(PDF/TIFF). Input the
      page numbers

      and/or ranges of pages you want to get in the result. For a range of pages,
      use a hyphen, like

      *pages=["1-3", "5-6"]*. Separate each page number or range with a comma.'
    types:
    - <xref:list>[<xref:str>]
  return:
    description: 'An instance of an AsyncLROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.RecognizedForm>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Recognize sales receipt fields from a URL.<!--[!code-python[Main](les\\v3.1\\\
    async_samples\\sample_recognize_receipts_from_url_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\6\\\\azure-ai-formrecognizer-3.3.3\\\
    \\samples\\\\v3.1\\\\async_samples\\\\sample_recognize_receipts_from_url_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.core.credentials import AzureKeyCredential\n   from azure.ai.formrecognizer.aio\
    \ import FormRecognizerClient\n\n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"\
    ]\n   key = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\n\n   async with FormRecognizerClient(\n\
    \       endpoint=endpoint, credential=AzureKeyCredential(key)\n   ) as form_recognizer_client:\n\
    \       url = \"https://raw.githubusercontent.com/Azure/azure-sdk-for-python/main/sdk/formrecognizer/azure-ai-formrecognizer/tests/sample_forms/receipt/contoso-receipt.png\"\
    \n       poller = await form_recognizer_client.begin_recognize_receipts_from_url(receipt_url=url)\n\
    \       receipts = await poller.result()\n\n       for idx, receipt in enumerate(receipts):\n\
    \           print(\"--------Recognizing receipt #{}--------\".format(idx+1))\n\
    \           receipt_type = receipt.fields.get(\"ReceiptType\")\n           if\
    \ receipt_type:\n               print(\"Receipt Type: {} has confidence: {}\"\
    .format(receipt_type.value, receipt_type.confidence))\n           merchant_name\
    \ = receipt.fields.get(\"MerchantName\")\n           if merchant_name:\n     \
    \          print(\"Merchant Name: {} has confidence: {}\".format(merchant_name.value,\
    \ merchant_name.confidence))\n           transaction_date = receipt.fields.get(\"\
    TransactionDate\")\n           if transaction_date:\n               print(\"Transaction\
    \ Date: {} has confidence: {}\".format(transaction_date.value, transaction_date.confidence))\n\
    \           if receipt.fields.get(\"Items\"):\n               print(\"Receipt\
    \ items:\")\n               for idx, item in enumerate(receipt.fields.get(\"Items\"\
    ).value):\n                   print(\"...Item #{}\".format(idx+1))\n         \
    \          item_name = item.value.get(\"Name\")\n                   if item_name:\n\
    \                       print(\"......Item Name: {} has confidence: {}\".format(item_name.value,\
    \ item_name.confidence))\n                   item_quantity = item.value.get(\"\
    Quantity\")\n                   if item_quantity:\n                       print(\"\
    ......Item Quantity: {} has confidence: {}\".format(item_quantity.value, item_quantity.confidence))\n\
    \                   item_price = item.value.get(\"Price\")\n                 \
    \  if item_price:\n                       print(\"......Individual Item Price:\
    \ {} has confidence: {}\".format(item_price.value, item_price.confidence))\n \
    \                  item_total_price = item.value.get(\"TotalPrice\")\n       \
    \            if item_total_price:\n                       print(\"......Total\
    \ Item Price: {} has confidence: {}\".format(item_total_price.value, item_total_price.confidence))\n\
    \           subtotal = receipt.fields.get(\"Subtotal\")\n           if subtotal:\n\
    \               print(\"Subtotal: {} has confidence: {}\".format(subtotal.value,\
    \ subtotal.confidence))\n           tax = receipt.fields.get(\"Tax\")\n      \
    \     if tax:\n               print(\"Tax: {} has confidence: {}\".format(tax.value,\
    \ tax.confidence))\n           tip = receipt.fields.get(\"Tip\")\n           if\
    \ tip:\n               print(\"Tip: {} has confidence: {}\".format(tip.value,\
    \ tip.confidence))\n           total = receipt.fields.get(\"Total\")\n       \
    \    if total:\n               print(\"Total: {} has confidence: {}\".format(total.value,\
    \ total.confidence))\n           print(\"--------------------------------------\"\
    )\n\n   ````\n"
- uid: azure.ai.formrecognizer.aio.FormRecognizerClient.close
  name: close
  summary: Close the <xref:azure.ai.formrecognizer.aio.FormRecognizerClient> session.
  signature: async close() -> None
- uid: azure.ai.formrecognizer.aio.FormRecognizerClient.send_request
  name: send_request
  summary: 'Runs a network request using the client''s existing pipeline.


    The request URL can be relative to the base URL. The service API version used
    for the request is the same as

    the client''s unless otherwise specified. Overriding the client''s configured
    API version in relative URL is

    supported on client with API version 2022-08-31 and later. Overriding in absolute
    URL supported on client with

    any API version. This method does not raise if the response is an error; to raise
    an exception, call

    *raise_for_status()* on the returned response object. For more information about
    how to send custom requests

    with this method, see [https://aka.ms/azsdk/dpcodegen/python/send_request](https://aka.ms/azsdk/dpcodegen/python/send_request).'
  signature: 'async send_request(request: HttpRequest, *, stream: bool = False, **kwargs)
    -> AsyncHttpResponse'
  parameters:
  - name: request
    description: The network request you want to make.
    isRequired: true
    types:
    - <xref:azure.core.rest.HttpRequest>
  return:
    description: The response of your network call. Does not do error handling on
      your response.
    types:
    - <xref:azure.core.rest.AsyncHttpResponse>
