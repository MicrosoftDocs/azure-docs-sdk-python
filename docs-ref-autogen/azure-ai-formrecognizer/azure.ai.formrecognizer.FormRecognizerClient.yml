### YamlMime:PythonClass
uid: azure.ai.formrecognizer.FormRecognizerClient
name: FormRecognizerClient
fullName: azure.ai.formrecognizer.FormRecognizerClient
module: azure.ai.formrecognizer
inheritances:
- builtins.object
summary: 'FormRecognizerClient extracts information from forms and images into structured
  data.

  It is the interface to use for analyzing receipts, recognizing content/layout from

  forms, and analyzing custom forms from trained models. It provides different methods

  based on inputs from a URL and inputs from a stream.'
constructor:
  syntax: FormRecognizerClient(endpoint, credential, **kwargs)
  parameters:
  - name: endpoint
    description: 'Supported Cognitive Services endpoints (protocol and hostname,

      for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
    types:
    - <xref:str>
  - name: credential
    description: 'Credentials needed for the client to connect to Azure.

      This is an instance of AzureKeyCredential if using an API key or a token

      credential from <xref:azure.identity>.'
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
    - <xref:azure.core.credentials.TokenCredential>
  - name: api_version
    description: 'The API version of the service to use for requests. It defaults
      to the latest service version.

      Setting to an older version may result in reduced feature compatibility.'
    types:
    - <xref:str>
    - <xref:azure.ai.formrecognizer.FormRecognizerApiVersion>
examples:
- "Creating the FormRecognizerClient with an endpoint and API key.<!--[!code-python[Main](les\\\
  sample_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\":\
  \ [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\
  \\1\\\\s\\\\dist_temp\\\\128\\\\azure-ai-formrecognizer-3.0.0\\\\samples\\\\sample_authentication.py\"\
  , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
  highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
  \ import AzureKeyCredential\n   from azure.ai.formrecognizer import FormRecognizerClient\n\
  \   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
  AZURE_FORM_RECOGNIZER_KEY\"]\n\n   form_recognizer_client = FormRecognizerClient(endpoint,\
  \ AzureKeyCredential(key))\n\n   ````\n\nCreating the FormRecognizerClient with\
  \ a token credential.<!--[!code-python[Main](les\\sample_authentication.py )]-->\n\
  \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\128\\\\\
  azure-ai-formrecognizer-3.0.0\\\\samples\\\\sample_authentication.py\", \"xml:space\"\
  : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
  : {\"linenostart\": 1}} -->\n\n````python\n\n   \"\"\"DefaultAzureCredential will\
  \ use the values from these environment\n   variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,\
  \ AZURE_CLIENT_SECRET\n   \"\"\"\n   from azure.ai.formrecognizer import FormRecognizerClient\n\
  \   from azure.identity import DefaultAzureCredential\n\n   endpoint = os.environ[\"\
  AZURE_FORM_RECOGNIZER_AAD_ENDPOINT\"]\n   credential = DefaultAzureCredential()\n\
  \n   form_recognizer_client = FormRecognizerClient(endpoint, credential)\n\n   ````\n"
methods:
- uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_content
  name: begin_recognize_content
  summary: 'Extract text and content/layout information from a given document.

    The input document must be of one of the supported content types - ''application/pdf'',

    ''image/jpeg'', ''image/png'' or ''image/tiff''.'
  signature: begin_recognize_content(form, **kwargs)
  parameters:
  - name: form
    description: JPEG, PNG, PDF and TIFF type file stream or bytes.
    isRequired: true
    types:
    - <xref:bytes>
    - <xref:IO>[<xref:bytes>]
  - name: content_type
    description: 'Media type of the body sent to the API. Content-type is

      auto-detected, but can be overridden by passing this keyword argument. For options,

      see <xref:azure.ai.formrecognizer.FormContentType>.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.ai.formrecognizer.FormContentType>
  - name: polling_interval
    description: 'Waiting time between two polls for LRO operations

      if no Retry-After header is present. Defaults to 5 seconds.'
    isRequired: true
    types:
    - <xref:int>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'An instance of an LROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.FormPage>].'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.FormPage>]]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  examples:
  - "Recognize text and content/layout information from a form.<!--[!code-python[Main](les\\\
    sample_recognize_content.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\128\\\\azure-ai-formrecognizer-3.0.0\\\\samples\\\\\
    sample_recognize_content.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n   from azure.core.credentials import AzureKeyCredential\n   from azure.ai.formrecognizer\
    \ import FormRecognizerClient\n\n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"\
    ]\n   key = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"]\n\n   form_recognizer_client\
    \ = FormRecognizerClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\
    \   with open(path_to_sample_forms, \"rb\") as f:\n       poller = form_recognizer_client.begin_recognize_content(form=f)\n\
    \   form_pages = poller.result()\n\n   for idx, content in enumerate(form_pages):\n\
    \       print(\"----Recognizing content from page #{}----\".format(idx+1))\n \
    \      print(\"Page has width: {} and height: {}, measured with unit: {}\".format(\n\
    \           content.width,\n           content.height,\n           content.unit\n\
    \       ))\n       for table_idx, table in enumerate(content.tables):\n      \
    \     print(\"Table # {} has {} rows and {} columns\".format(table_idx, table.row_count,\
    \ table.column_count))\n           for cell in table.cells:\n               print(\"\
    ...Cell[{}][{}] has text '{}' within bounding box '{}'\".format(\n           \
    \        cell.row_index,\n                   cell.column_index,\n            \
    \       cell.text,\n                   format_bounding_box(cell.bounding_box)\n\
    \               ))\n\n   ````\n"
- uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_content_from_url
  name: begin_recognize_content_from_url
  summary: 'Extract text and layout information from a given document.

    The input document must be the location (URL) of the document to be analyzed.'
  signature: begin_recognize_content_from_url(form_url, **kwargs)
  parameters:
  - name: form_url
    description: 'The URL of the form to analyze. The input must be a valid, encoded
      URL

      of one of the supported formats: JPEG, PNG, PDF and TIFF.'
    isRequired: true
    types:
    - <xref:str>
  - name: polling_interval
    description: 'Waiting time between two polls for LRO operations

      if no Retry-After header is present. Defaults to 5 seconds.'
    isRequired: true
    types:
    - <xref:int>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'An instance of an LROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.FormPage>].'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.FormPage>]]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
- uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_custom_forms
  name: begin_recognize_custom_forms
  summary: 'Analyze a custom form with a model trained with or without labels. The
    form

    to analyze should be of the same type as the forms that were used to train the
    model.

    The input document must be of one of the supported content types - ''application/pdf'',

    ''image/jpeg'', ''image/png'' or ''image/tiff''.'
  signature: begin_recognize_custom_forms(model_id, form, **kwargs)
  parameters:
  - name: model_id
    description: Custom model identifier.
    isRequired: true
    types:
    - <xref:str>
  - name: form
    description: JPEG, PNG, PDF and TIFF type file stream or bytes.
    isRequired: true
    types:
    - <xref:bytes>
    - <xref:IO>[<xref:bytes>]
  - name: include_field_elements
    description: Whether or not to include field elements such as lines and words
      in addition to form fields.
    isRequired: true
    types:
    - <xref:bool>
  - name: content_type
    description: 'Media type of the body sent to the API. Content-type is

      auto-detected, but can be overridden by passing this keyword argument. For options,

      see <xref:azure.ai.formrecognizer.FormContentType>.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.ai.formrecognizer.FormContentType>
  - name: polling_interval
    description: 'Waiting time between two polls for LRO operations

      if no Retry-After header is present. Defaults to 5 seconds.'
    isRequired: true
    types:
    - <xref:int>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'An instance of an LROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.RecognizedForm>]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  examples:
  - "Recognize fields and values from a custom form.<!--[!code-python[Main](les\\\
    sample_recognize_custom_forms.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\128\\\\azure-ai-formrecognizer-3.0.0\\\\\
    samples\\\\sample_recognize_custom_forms.py\", \"xml:space\": \"preserve\", \"\
    language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.core.credentials import AzureKeyCredential\n\
    \   from azure.ai.formrecognizer import FormRecognizerClient\n\n   endpoint =\
    \ os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"\
    ]\n   model_id = os.environ[\"CUSTOM_TRAINED_MODEL_ID\"]\n\n   form_recognizer_client\
    \ = FormRecognizerClient(\n       endpoint=endpoint, credential=AzureKeyCredential(key)\n\
    \   )\n\n   # Make sure your form's type is included in the list of form types\
    \ the custom model can recognize\n   with open(path_to_sample_forms, \"rb\") as\
    \ f:\n       poller = form_recognizer_client.begin_recognize_custom_forms(\n \
    \          model_id=model_id, form=f\n       )\n   forms = poller.result()\n\n\
    \   for idx, form in enumerate(forms):\n       print(\"--------Recognizing Form\
    \ #{}--------\".format(idx+1))\n       print(\"Form has type {}\".format(form.form_type))\n\
    \       for name, field in form.fields.items():\n           # each field is of\
    \ type FormField\n           # label_data is populated if you are using a model\
    \ trained without labels,\n           # since the service needs to make predictions\
    \ for labels if not explicitly given to it.\n           if field.label_data:\n\
    \               print(\"...Field '{}' has label '{}' with a confidence score of\
    \ {}\".format(\n                   name,\n                   field.label_data.text,\n\
    \                   field.confidence\n               ))\n           # The value\
    \ of the field can also be a Dict[str, FormField], or a List[FormField] - in our\
    \ sample, it is not.\n           print(\"...Label '{}' has value '{}' with a confidence\
    \ score of {}\".format(\n               field.label_data.text if field.label_data\
    \ else name, field.value, field.confidence\n           ))\n\n       print(\"-----------------------------------\"\
    )\n\n   ````\n"
- uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_custom_forms_from_url
  name: begin_recognize_custom_forms_from_url
  summary: 'Analyze a custom form with a model trained with or without labels. The
    form

    to analyze should be of the same type as the forms that were used to train the
    model.

    The input document must be the location (URL) of the document to be analyzed.'
  signature: begin_recognize_custom_forms_from_url(model_id, form_url, **kwargs)
  parameters:
  - name: model_id
    description: Custom model identifier.
    isRequired: true
    types:
    - <xref:str>
  - name: form_url
    description: 'The URL of the form to analyze. The input must be a valid, encoded
      URL

      of one of the supported formats: JPEG, PNG, PDF and TIFF.'
    isRequired: true
    types:
    - <xref:str>
  - name: include_field_elements
    description: Whether or not to include field elements such as lines and words
      in addition to form fields.
    isRequired: true
    types:
    - <xref:bool>
  - name: polling_interval
    description: 'Waiting time between two polls for LRO operations

      if no Retry-After header is present. Defaults to 5 seconds.'
    isRequired: true
    types:
    - <xref:int>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'An instance of an LROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.RecognizedForm>]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
- uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_receipts
  name: begin_recognize_receipts
  summary: 'Extract field text and semantic values from a given US sales receipt.

    The input document must be of one of the supported content types - ''application/pdf'',

    ''image/jpeg'', ''image/png'' or ''image/tiff''.


    See fields found on a receipt here:

    [https://aka.ms/formrecognizer/receiptfields](https://aka.ms/formrecognizer/receiptfields)'
  signature: begin_recognize_receipts(receipt, **kwargs)
  parameters:
  - name: receipt
    description: 'JPEG, PNG, PDF and TIFF type file stream or bytes.

      Currently only supports US sales receipts.'
    isRequired: true
    types:
    - <xref:bytes>
    - <xref:IO>[<xref:bytes>]
  - name: include_field_elements
    description: Whether or not to include field elements such as lines and words
      in addition to form fields.
    isRequired: true
    types:
    - <xref:bool>
  - name: content_type
    description: 'Media type of the body sent to the API. Content-type is

      auto-detected, but can be overridden by passing this keyword argument. For options,

      see <xref:azure.ai.formrecognizer.FormContentType>.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.ai.formrecognizer.FormContentType>
  - name: polling_interval
    description: 'Waiting time between two polls for LRO operations

      if no Retry-After header is present. Defaults to 5 seconds.'
    isRequired: true
    types:
    - <xref:int>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'An instance of an LROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.RecognizedForm>]]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  examples:
  - "Recognize US sales receipt fields.<!--[!code-python[Main](les\\sample_recognize_receipts.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\128\\\\azure-ai-formrecognizer-3.0.0\\\\samples\\\\sample_recognize_receipts.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.formrecognizer import FormRecognizerClient\n\
    \n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_FORM_RECOGNIZER_KEY\"]\n\n   form_recognizer_client = FormRecognizerClient(\n\
    \       endpoint=endpoint, credential=AzureKeyCredential(key)\n   )\n   with open(path_to_sample_forms,\
    \ \"rb\") as f:\n       poller = form_recognizer_client.begin_recognize_receipts(receipt=f)\n\
    \   receipts = poller.result()\n\n   for idx, receipt in enumerate(receipts):\n\
    \       print(\"--------Recognizing receipt #{}--------\".format(idx+1))\n   \
    \    receipt_type = receipt.fields.get(\"ReceiptType\")\n       if receipt_type:\n\
    \           print(\"Receipt Type: {} has confidence: {}\".format(receipt_type.value,\
    \ receipt_type.confidence))\n       merchant_name = receipt.fields.get(\"MerchantName\"\
    )\n       if merchant_name:\n           print(\"Merchant Name: {} has confidence:\
    \ {}\".format(merchant_name.value, merchant_name.confidence))\n       transaction_date\
    \ = receipt.fields.get(\"TransactionDate\")\n       if transaction_date:\n   \
    \        print(\"Transaction Date: {} has confidence: {}\".format(transaction_date.value,\
    \ transaction_date.confidence))\n       print(\"Receipt items:\")\n       for\
    \ idx, item in enumerate(receipt.fields.get(\"Items\").value):\n           print(\"\
    ...Item #{}\".format(idx+1))\n           item_name = item.value.get(\"Name\")\n\
    \           if item_name:\n               print(\"......Item Name: {} has confidence:\
    \ {}\".format(item_name.value, item_name.confidence))\n           item_quantity\
    \ = item.value.get(\"Quantity\")\n           if item_quantity:\n             \
    \  print(\"......Item Quantity: {} has confidence: {}\".format(item_quantity.value,\
    \ item_quantity.confidence))\n           item_price = item.value.get(\"Price\"\
    )\n           if item_price:\n               print(\"......Individual Item Price:\
    \ {} has confidence: {}\".format(item_price.value, item_price.confidence))\n \
    \          item_total_price = item.value.get(\"TotalPrice\")\n           if item_total_price:\n\
    \               print(\"......Total Item Price: {} has confidence: {}\".format(item_total_price.value,\
    \ item_total_price.confidence))\n       subtotal = receipt.fields.get(\"Subtotal\"\
    )\n       if subtotal:\n           print(\"Subtotal: {} has confidence: {}\".format(subtotal.value,\
    \ subtotal.confidence))\n       tax = receipt.fields.get(\"Tax\")\n       if tax:\n\
    \           print(\"Tax: {} has confidence: {}\".format(tax.value, tax.confidence))\n\
    \       tip = receipt.fields.get(\"Tip\")\n       if tip:\n           print(\"\
    Tip: {} has confidence: {}\".format(tip.value, tip.confidence))\n       total\
    \ = receipt.fields.get(\"Total\")\n       if total:\n           print(\"Total:\
    \ {} has confidence: {}\".format(total.value, total.confidence))\n       print(\"\
    --------------------------------------\")\n\n   ````\n"
- uid: azure.ai.formrecognizer.FormRecognizerClient.begin_recognize_receipts_from_url
  name: begin_recognize_receipts_from_url
  summary: 'Extract field text and semantic values from a given US sales receipt.

    The input document must be the location (URL) of the receipt to be analyzed.


    See fields found on a receipt here:

    [https://aka.ms/formrecognizer/receiptfields](https://aka.ms/formrecognizer/receiptfields)'
  signature: begin_recognize_receipts_from_url(receipt_url, **kwargs)
  parameters:
  - name: receipt_url
    description: 'The URL of the receipt to analyze. The input must be a valid, encoded
      URL

      of one of the supported formats: JPEG, PNG, PDF and TIFF. Currently only supports

      US sales receipts.'
    isRequired: true
    types:
    - <xref:str>
  - name: include_field_elements
    description: Whether or not to include field elements such as lines and words
      in addition to form fields.
    isRequired: true
    types:
    - <xref:bool>
  - name: polling_interval
    description: 'Waiting time between two polls for LRO operations

      if no Retry-After header is present. Defaults to 5 seconds.'
    isRequired: true
    types:
    - <xref:int>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'An instance of an LROPoller. Call *result()* on the poller

      object to return a list[<xref:azure.ai.formrecognizer.RecognizedForm>].'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:list>[<xref:azure.ai.formrecognizer.RecognizedForm>]]
  exceptions:
  - description: ''
    type: ~azure.core.exceptions.HttpResponseError
  examples:
  - "Recognize US sales receipt fields from a URL.<!--[!code-python[Main](les\\sample_recognize_receipts_from_url.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\128\\\\azure-ai-formrecognizer-3.0.0\\\\samples\\\\sample_recognize_receipts_from_url.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.formrecognizer import FormRecognizerClient\n\
    \n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_FORM_RECOGNIZER_KEY\"]\n\n   form_recognizer_client = FormRecognizerClient(\n\
    \       endpoint=endpoint, credential=AzureKeyCredential(key)\n   )\n   url =\
    \ \"https://raw.githubusercontent.com/Azure/azure-sdk-for-python/master/sdk/formrecognizer/azure-ai-formrecognizer/tests/sample_forms/receipt/contoso-receipt.png\"\
    \n   poller = form_recognizer_client.begin_recognize_receipts_from_url(receipt_url=url)\n\
    \   receipts = poller.result()\n\n   for idx, receipt in enumerate(receipts):\n\
    \       print(\"--------Recognizing receipt #{}--------\".format(idx+1))\n   \
    \    receipt_type = receipt.fields.get(\"ReceiptType\")\n       if receipt_type:\n\
    \           print(\"Receipt Type: {} has confidence: {}\".format(receipt_type.value,\
    \ receipt_type.confidence))\n       merchant_name = receipt.fields.get(\"MerchantName\"\
    )\n       if merchant_name:\n           print(\"Merchant Name: {} has confidence:\
    \ {}\".format(merchant_name.value, merchant_name.confidence))\n       transaction_date\
    \ = receipt.fields.get(\"TransactionDate\")\n       if transaction_date:\n   \
    \        print(\"Transaction Date: {} has confidence: {}\".format(transaction_date.value,\
    \ transaction_date.confidence))\n       print(\"Receipt items:\")\n       for\
    \ idx, item in enumerate(receipt.fields.get(\"Items\").value):\n           print(\"\
    ...Item #{}\".format(idx+1))\n           item_name = item.value.get(\"Name\")\n\
    \           if item_name:\n               print(\"......Item Name: {} has confidence:\
    \ {}\".format(item_name.value, item_name.confidence))\n           item_quantity\
    \ = item.value.get(\"Quantity\")\n           if item_quantity:\n             \
    \  print(\"......Item Quantity: {} has confidence: {}\".format(item_quantity.value,\
    \ item_quantity.confidence))\n           item_price = item.value.get(\"Price\"\
    )\n           if item_price:\n               print(\"......Individual Item Price:\
    \ {} has confidence: {}\".format(item_price.value, item_price.confidence))\n \
    \          item_total_price = item.value.get(\"TotalPrice\")\n           if item_total_price:\n\
    \               print(\"......Total Item Price: {} has confidence: {}\".format(item_total_price.value,\
    \ item_total_price.confidence))\n       subtotal = receipt.fields.get(\"Subtotal\"\
    )\n       if subtotal:\n           print(\"Subtotal: {} has confidence: {}\".format(subtotal.value,\
    \ subtotal.confidence))\n       tax = receipt.fields.get(\"Tax\")\n       if tax:\n\
    \           print(\"Tax: {} has confidence: {}\".format(tax.value, tax.confidence))\n\
    \       tip = receipt.fields.get(\"Tip\")\n       if tip:\n           print(\"\
    Tip: {} has confidence: {}\".format(tip.value, tip.confidence))\n       total\
    \ = receipt.fields.get(\"Total\")\n       if total:\n           print(\"Total:\
    \ {} has confidence: {}\".format(total.value, total.confidence))\n       print(\"\
    --------------------------------------\")\n\n   ````\n"
- uid: azure.ai.formrecognizer.FormRecognizerClient.close
  name: close
  summary: Close the <xref:azure.ai.formrecognizer.FormRecognizerClient> session.
  signature: close()
