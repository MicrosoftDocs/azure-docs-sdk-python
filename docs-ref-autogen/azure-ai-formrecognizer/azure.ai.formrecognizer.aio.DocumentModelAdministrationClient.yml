### YamlMime:PythonClass
uid: azure.ai.formrecognizer.aio.DocumentModelAdministrationClient
name: DocumentModelAdministrationClient
fullName: azure.ai.formrecognizer.aio.DocumentModelAdministrationClient
module: azure.ai.formrecognizer.aio
inheritances:
- azure.ai.formrecognizer.aio._form_base_client_async.FormRecognizerClientBaseAsync
summary: 'DocumentModelAdministrationClient is the Form Recognizer interface to use
  for building

  and managing models.


  It provides methods for building models, as well as methods for viewing and deleting
  models,

  viewing model operations, accessing account information, copying models to another

  Form Recognizer resource, and composing a new model from a collection of existing
  models.


  > [!NOTE]

  > DocumentModelAdministrationClient should be used with API versions

  >

  > 2022-08-31 and up. To use API versions <=v2.1, instantiate a FormTrainingClient.

  >


  New in version 2022-08-31: The *DocumentModelAdministrationClient* and its client
  methods.'
constructor:
  syntax: 'DocumentModelAdministrationClient(endpoint: str, credential: AzureKeyCredential
    | AsyncTokenCredential, **kwargs: Any)'
  parameters:
  - name: endpoint
    description: 'Supported Cognitive Services endpoints (protocol and hostname,

      for example: [https://westus2.api.cognitive.microsoft.com](https://westus2.api.cognitive.microsoft.com)).'
    isRequired: true
    types:
    - <xref:azure.ai.formrecognizer.aio.str>
  - name: credential
    description: 'Credentials needed for the client to connect to Azure.

      This is an instance of AzureKeyCredential if using an API key or a token

      credential from <xref:azure.identity>.'
    isRequired: true
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
    - <xref:azure.core.credentials.TokenCredential>
  - name: api_version
    description: 'The API version of the service to use for requests. It defaults
      to the latest service version.

      Setting to an older version may result in reduced feature compatibility. To
      use API versions

      <=v2.1, instantiate a FormTrainingClient.'
    types:
    - <xref:str>
    - <xref:azure.ai.formrecognizer.DocumentAnalysisApiVersion>
examples:
- "Creating the DocumentModelAdministrationClient with an endpoint and API key.<!--[!code-python[Main](les\\\
  v3.2\\async_samples\\sample_authentication_async.py )]-->\n\n<!-- literal_block\
  \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\":\
  \ [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\119\\\\azure-ai-formrecognizer-3.2.0\\\
  \\samples\\\\v3.2\\\\async_samples\\\\sample_authentication_async.py\", \"xml:space\"\
  : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\":\
  \ {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
  \ import AzureKeyCredential\n   from azure.ai.formrecognizer.aio import DocumentModelAdministrationClient\n\
  \n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
  AZURE_FORM_RECOGNIZER_KEY\"]\n\n   document_model_admin_client = DocumentModelAdministrationClient(endpoint,\
  \ AzureKeyCredential(key))\n\n   ````\n\nCreating the DocumentModelAdministrationClient\
  \ with a token credential.<!--[!code-python[Main](les\\v3.2\\async_samples\\sample_authentication_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\\
  119\\\\azure-ai-formrecognizer-3.2.0\\\\samples\\\\v3.2\\\\async_samples\\\\sample_authentication_async.py\"\
  , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
  : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   \"\"\"DefaultAzureCredential\
  \ will use the values from these environment\n   variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,\
  \ AZURE_CLIENT_SECRET\n   \"\"\"\n   from azure.ai.formrecognizer.aio import DocumentModelAdministrationClient\n\
  \   from azure.identity.aio import DefaultAzureCredential\n\n   endpoint = os.environ[\"\
  AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   credential = DefaultAzureCredential()\n\n\
  \   document_model_admin_client = DocumentModelAdministrationClient(endpoint, credential)\n\
  \n   ````\n"
methods:
- uid: azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.begin_build_document_model
  name: begin_build_document_model
  summary: 'Build a custom document model.


    The request must include a *blob_container_url* keyword parameter that is an

    externally accessible Azure storage blob container URI (preferably a Shared Access
    Signature URI). Note that

    a container URI (without SAS) is accepted only when the container is public or
    has a managed identity

    configured, see more about configuring managed identities to work with Form Recognizer
    here:

    [https://docs.microsoft.com/azure/applied-ai-services/form-recognizer/managed-identities](https://docs.microsoft.com/azure/applied-ai-services/form-recognizer/managed-identities).

    Models are built using documents that are of the following content type - ''application/pdf'',

    ''image/jpeg'', ''image/png'', ''image/tiff'', ''image/bmp'', or ''image/heif''.
    Other types of content in the container

    is ignored.'
  signature: 'async begin_build_document_model(build_mode: str | ModelBuildMode, *,
    blob_container_url: str, **kwargs: Any) -> AsyncDocumentModelAdministrationLROPoller[DocumentModelDetails]'
  parameters:
  - name: build_mode
    description: 'The custom model build mode. Possible values include: "template",
      "neural".

      For more information about build modes, see: [https://aka.ms/azsdk/formrecognizer/buildmode](https://aka.ms/azsdk/formrecognizer/buildmode).'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.ai.formrecognizer.ModelBuildMode>
  - name: blob_container_url
    description: 'An Azure Storage blob container''s SAS URI. A container URI (without
      SAS)

      can be used if the container is public or has a managed identity configured.
      For more information on

      setting up a training data set, see: [https://aka.ms/azsdk/formrecognizer/buildtrainingset](https://aka.ms/azsdk/formrecognizer/buildtrainingset).'
    types:
    - <xref:str>
  - name: model_id
    description: A unique ID for your model. If not specified, a model ID will be
      created for you.
    types:
    - <xref:str>
  - name: description
    description: An optional description to add to the model.
    types:
    - <xref:str>
  - name: prefix
    description: 'A case-sensitive prefix string to filter documents in the blob container
      url path.

      For example, when using an Azure storage blob URI, use the prefix to restrict
      sub folders.

      *prefix* should end in ''/'' to avoid cases where filenames share the same prefix.'
    types:
    - <xref:str>
  - name: tags
    description: List of user defined key-value tag attributes associated with the
      model.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  return:
    description: 'An instance of an AsyncDocumentModelAdministrationLROPoller. Call
      *result()* on the poller

      object to return a <xref:azure.ai.formrecognizer.DocumentModelDetails>.'
    types:
    - <xref:azure.ai.formrecognizer.aio.AsyncDocumentModelAdministrationLROPoller>[<xref:azure.ai.formrecognizer.DocumentModelDetails>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Building a model from training files.<!--[!code-python[Main](les\\v3.2\\async_samples\\\
    sample_build_model_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\119\\\\azure-ai-formrecognizer-3.2.0\\\\\
    samples\\\\v3.2\\\\async_samples\\\\sample_build_model_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.formrecognizer.aio\
    \ import DocumentModelAdministrationClient\n   from azure.ai.formrecognizer import\
    \ ModelBuildMode\n   from azure.core.credentials import AzureKeyCredential\n\n\
    \   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_FORM_RECOGNIZER_KEY\"]\n   container_sas_url = os.environ[\"CONTAINER_SAS_URL\"\
    ]\n\n   document_model_admin_client = DocumentModelAdministrationClient(endpoint,\
    \ AzureKeyCredential(key))\n   async with document_model_admin_client:\n     \
    \  poller = await document_model_admin_client.begin_build_document_model(\n  \
    \         ModelBuildMode.TEMPLATE, blob_container_url=container_sas_url, description=\"\
    my model description\"\n       )\n       model = await poller.result()\n\n   print(\"\
    Model ID: {}\".format(model.model_id))\n   print(\"Description: {}\".format(model.description))\n\
    \   print(\"Model created on: {}\\n\".format(model.created_on))\n   print(\"Doc\
    \ types the model can recognize:\")\n   for name, doc_type in model.doc_types.items():\n\
    \       print(\"\\nDoc Type: '{}' built with '{}' mode which has the following\
    \ fields:\".format(name, doc_type.build_mode))\n       for field_name, field in\
    \ doc_type.field_schema.items():\n           print(\"Field: '{}' has type '{}'\
    \ and confidence score {}\".format(\n               field_name, field[\"type\"\
    ], doc_type.field_confidence[field_name]\n           ))\n\n   ````\n"
- uid: azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.begin_compose_document_model
  name: begin_compose_document_model
  summary: 'Creates a composed document model from a collection of existing models.


    A composed model allows multiple models to be called with a single model ID. When
    a document is

    submitted to be analyzed with a composed model ID, a classification step is first
    performed to

    route it to the correct custom model.'
  signature: 'async begin_compose_document_model(component_model_ids: List[str], **kwargs:
    Any) -> AsyncDocumentModelAdministrationLROPoller[DocumentModelDetails]'
  parameters:
  - name: component_model_ids
    description: List of model IDs to use in the composed model.
    isRequired: true
    types:
    - <xref:azure.ai.formrecognizer.aio.list>[<xref:azure.ai.formrecognizer.aio.str>]
  - name: model_id
    description: 'A unique ID for your composed model.

      If not specified, a model ID will be created for you.'
    types:
    - <xref:str>
  - name: description
    description: An optional description to add to the model.
    types:
    - <xref:str>
  - name: tags
    description: List of user defined key-value tag attributes associated with the
      model.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  return:
    description: 'An instance of an AsyncDocumentModelAdministrationLROPoller. Call
      *result()* on the poller

      object to return a <xref:azure.ai.formrecognizer.DocumentModelDetails>.'
    types:
    - <xref:azure.ai.formrecognizer.aio.AsyncDocumentModelAdministrationLROPoller>[<xref:azure.ai.formrecognizer.DocumentModelDetails>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Creating a composed model with existing models.<!--[!code-python[Main](les\\\
    v3.2\\async_samples\\sample_compose_model_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\119\\\\azure-ai-formrecognizer-3.2.0\\\
    \\samples\\\\v3.2\\\\async_samples\\\\sample_compose_model_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.formrecognizer.aio import DocumentModelAdministrationClient\n\
    \   from azure.ai.formrecognizer import ModelBuildMode\n\n   endpoint = os.environ[\"\
    AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"AZURE_FORM_RECOGNIZER_KEY\"\
    ]\n   po_supplies = os.environ['PURCHASE_ORDER_OFFICE_SUPPLIES_SAS_URL']\n   po_equipment\
    \ = os.environ['PURCHASE_ORDER_OFFICE_EQUIPMENT_SAS_URL']\n   po_furniture = os.environ['PURCHASE_ORDER_OFFICE_FURNITURE_SAS_URL']\n\
    \   po_cleaning_supplies = os.environ['PURCHASE_ORDER_OFFICE_CLEANING_SUPPLIES_SAS_URL']\n\
    \n   document_model_admin_client = DocumentModelAdministrationClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n   async with document_model_admin_client:\n\
    \       supplies_poller = await document_model_admin_client.begin_build_document_model(\n\
    \           ModelBuildMode.TEMPLATE, blob_container_url=po_supplies, description=\"\
    Purchase order-Office supplies\"\n       )\n       equipment_poller = await document_model_admin_client.begin_build_document_model(\n\
    \           ModelBuildMode.TEMPLATE, blob_container_url=po_equipment, description=\"\
    Purchase order-Office Equipment\"\n       )\n       furniture_poller = await document_model_admin_client.begin_build_document_model(\n\
    \           ModelBuildMode.TEMPLATE, blob_container_url=po_furniture, description=\"\
    Purchase order-Furniture\"\n       )\n       cleaning_supplies_poller = await\
    \ document_model_admin_client.begin_build_document_model(\n           ModelBuildMode.TEMPLATE,\
    \ blob_container_url=po_cleaning_supplies, description=\"Purchase order-Cleaning\
    \ Supplies\"\n       )\n       supplies_model = await supplies_poller.result()\n\
    \       equipment_model = await equipment_poller.result()\n       furniture_model\
    \ = await furniture_poller.result()\n       cleaning_supplies_model = await cleaning_supplies_poller.result()\n\
    \n       purchase_order_models = [\n           supplies_model.model_id,\n    \
    \       equipment_model.model_id,\n           furniture_model.model_id,\n    \
    \       cleaning_supplies_model.model_id\n       ]\n\n       poller = await document_model_admin_client.begin_compose_document_model(\n\
    \           purchase_order_models, description=\"Office Supplies Composed Model\"\
    \n       )\n       model = await poller.result()\n\n   print(\"Office Supplies\
    \ Composed Model Info:\")\n   print(\"Model ID: {}\".format(model.model_id))\n\
    \   print(\"Description: {}\".format(model.description))\n   print(\"Model created\
    \ on: {}\\n\".format(model.created_on))\n   print(\"Doc types the model can recognize:\"\
    )\n   for name, doc_type in model.doc_types.items():\n       print(\"\\nDoc Type:\
    \ '{}' which has the following fields:\".format(name))\n       for field_name,\
    \ field in doc_type.field_schema.items():\n           print(\"Field: '{}' has\
    \ type '{}' and confidence score {}\".format(\n               field_name, field[\"\
    type\"], doc_type.field_confidence[field_name]\n           ))\n\n   ````\n"
- uid: azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.begin_copy_document_model_to
  name: begin_copy_document_model_to
  summary: 'Copy a document model stored in this resource (the source) to the user
    specified

    target Form Recognizer resource.


    This should be called with the source Form Recognizer resource

    (with the model that is intended to be copied). The *target* parameter should
    be supplied from the

    target resource''s output from calling the <xref:azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.get_copy_authorization>
    method.'
  signature: 'async begin_copy_document_model_to(model_id: str, target: TargetAuthorization,
    **kwargs: Any) -> AsyncDocumentModelAdministrationLROPoller[DocumentModelDetails]'
  parameters:
  - name: model_id
    description: Model identifier of the model to copy to target resource.
    isRequired: true
    types:
    - <xref:azure.ai.formrecognizer.aio.str>
  - name: target
    description: 'The copy authorization generated from the target resource''s call
      to

      <xref:azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.get_copy_authorization>.'
    isRequired: true
    types:
    - <xref:azure.ai.formrecognizer.TargetAuthorization>
  return:
    description: 'An instance of a AsyncDocumentModelAdministrationLROPoller. Call
      *result()* on the poller

      object to return a <xref:azure.ai.formrecognizer.DocumentModelDetails>.'
    types:
    - <xref:azure.ai.formrecognizer.aio.AsyncDocumentModelAdministrationLROPoller>[<xref:azure.ai.formrecognizer.DocumentModelDetails>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Copy a model from the source resource to the target resource<!--[!code-python[Main](les\\\
    v3.2\\async_samples\\sample_copy_model_to_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\119\\\\azure-ai-formrecognizer-3.2.0\\\
    \\samples\\\\v3.2\\\\async_samples\\\\sample_copy_model_to_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.formrecognizer.aio import DocumentModelAdministrationClient\n\
    \n   source_endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_SOURCE_ENDPOINT\"]\n\
    \   source_key = os.environ[\"AZURE_FORM_RECOGNIZER_SOURCE_KEY\"]\n   target_endpoint\
    \ = os.environ[\"AZURE_FORM_RECOGNIZER_TARGET_ENDPOINT\"]\n   target_key = os.environ[\"\
    AZURE_FORM_RECOGNIZER_TARGET_KEY\"]\n   source_model_id = os.getenv(\"AZURE_SOURCE_MODEL_ID\"\
    , custom_model_id)\n\n   target_client = DocumentModelAdministrationClient(endpoint=target_endpoint,\
    \ credential=AzureKeyCredential(target_key))\n   async with target_client:\n \
    \      target = await target_client.get_copy_authorization(\n           description=\"\
    model copied from other resource\"\n       )\n\n   source_client = DocumentModelAdministrationClient(endpoint=source_endpoint,\
    \ credential=AzureKeyCredential(source_key))\n   async with source_client:\n \
    \      poller = await source_client.begin_copy_document_model_to(\n          \
    \ model_id=source_model_id,\n           target=target  # output from target client's\
    \ call to get_copy_authorization()\n       )\n       copied_over_model = await\
    \ poller.result()\n\n   print(\"Model ID: {}\".format(copied_over_model.model_id))\n\
    \   print(\"Description: {}\".format(copied_over_model.description))\n   print(\"\
    Model created on: {}\\n\".format(copied_over_model.created_on))\n   print(\"Doc\
    \ types the model can recognize:\")\n   for name, doc_type in copied_over_model.doc_types.items():\n\
    \       print(\"\\nDoc Type: '{}' which has the following fields:\".format(name))\n\
    \       for field_name, field in doc_type.field_schema.items():\n           print(\"\
    Field: '{}' has type '{}' and confidence score {}\".format(\n               field_name,\
    \ field[\"type\"], doc_type.field_confidence[field_name]\n           ))\n\n  \
    \ ````\n"
- uid: azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.close
  name: close
  summary: Close the <xref:azure.ai.formrecognizer.aio.DocumentModelAdministrationClient>
    session.
  signature: async close() -> None
- uid: azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.delete_document_model
  name: delete_document_model
  summary: Delete a custom document model.
  signature: 'async delete_document_model(model_id: str, **kwargs: Any) -> None'
  parameters:
  - name: model_id
    description: Model identifier.
    isRequired: true
    types:
    - <xref:azure.ai.formrecognizer.aio.str>
  return:
    types:
    - <xref:azure.ai.formrecognizer.aio.None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
  examples:
  - "Delete a model.<!--[!code-python[Main](les\\v3.2\\async_samples\\sample_manage_models_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\119\\\\azure-ai-formrecognizer-3.2.0\\\\samples\\\\v3.2\\\\async_samples\\\
    \\sample_manage_models_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   await document_model_admin_client.delete_document_model(model_id=my_model.model_id)\n\
    \n   try:\n       await document_model_admin_client.get_document_model(model_id=my_model.model_id)\n\
    \   except ResourceNotFoundError:\n       print(\"Successfully deleted model with\
    \ ID {}\".format(my_model.model_id))\n\n   ````\n"
- uid: azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.get_copy_authorization
  name: get_copy_authorization
  summary: 'Generate authorization for copying a custom model into the target Form
    Recognizer resource.


    This should be called by the target resource (where the model will be copied to)

    and the output can be passed as the *target* parameter into <xref:azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.begin_copy_document_model_to>.'
  signature: 'async get_copy_authorization(**kwargs: Any) -> TargetAuthorization'
  parameters:
  - name: model_id
    description: 'A unique ID for your copied model.

      If not specified, a model ID will be created for you.'
    types:
    - <xref:str>
  - name: description
    description: An optional description to add to the model.
    types:
    - <xref:str>
  - name: tags
    description: List of user defined key-value tag attributes associated with the
      model.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  return:
    description: A dictionary with values necessary for the copy authorization.
    types:
    - <xref:azure.ai.formrecognizer.TargetAuthorization>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.get_document_analysis_client
  name: get_document_analysis_client
  summary: Get an instance of a DocumentAnalysisClient from DocumentModelAdministrationClient.
  signature: 'get_document_analysis_client(**kwargs: Any) -> DocumentAnalysisClient'
  return:
    description: A DocumentAnalysisClient
    types:
    - <xref:azure.ai.formrecognizer.aio.DocumentAnalysisClient>
- uid: azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.get_document_model
  name: get_document_model
  summary: Get a document model by its ID.
  signature: 'async get_document_model(model_id: str, **kwargs: Any) -> DocumentModelDetails'
  parameters:
  - name: model_id
    description: Model identifier.
    isRequired: true
    types:
    - <xref:azure.ai.formrecognizer.aio.str>
  return:
    description: DocumentModelDetails
    types:
    - <xref:azure.ai.formrecognizer.DocumentModelDetails>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.ResourceNotFoundError
  examples:
  - "Get a model by its ID.<!--[!code-python[Main](les\\v3.2\\async_samples\\sample_manage_models_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\119\\\\azure-ai-formrecognizer-3.2.0\\\\samples\\\\v3.2\\\\async_samples\\\
    \\sample_manage_models_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   my_model = await document_model_admin_client.get_document_model(model_id=model.model_id)\n\
    \   print(\"\\nModel ID: {}\".format(my_model.model_id))\n   print(\"Description:\
    \ {}\".format(my_model.description))\n   print(\"Model created on: {}\".format(my_model.created_on))\n\
    \n   ````\n"
- uid: azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.get_operation
  name: get_operation
  summary: 'Get an operation by its ID.


    Get an operation associated with the Form Recognizer resource.

    Note that operation information only persists for 24 hours. If the document model
    operation was successful,

    the model can be accessed using the <xref:azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.get_document_model>
    or <xref:azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.list_document_models>
    APIs.'
  signature: 'async get_operation(operation_id: str, **kwargs: Any) -> OperationDetails'
  parameters:
  - name: operation_id
    description: The operation ID.
    isRequired: true
    types:
    - <xref:azure.ai.formrecognizer.aio.str>
  return:
    description: OperationDetails
    types:
    - <xref:azure.ai.formrecognizer.OperationDetails>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get a document model operation by its ID.<!--[!code-python[Main](les\\v3.2\\\
    async_samples\\sample_get_operations_async.py )]-->\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\119\\\\azure-ai-formrecognizer-3.2.0\\\
    \\samples\\\\v3.2\\\\async_samples\\\\sample_get_operations_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   # Get an operation\
    \ by ID\n   try:\n       first_operation = await operations.__anext__()\n\n  \
    \     print(\"\\nGetting operation info by ID: {}\".format(first_operation.operation_id))\n\
    \       operation_info = await document_model_admin_client.get_operation(first_operation.operation_id)\n\
    \       if operation_info.status == \"succeeded\":\n           print(\"My {} operation\
    \ is completed.\".format(operation_info.kind))\n           result = operation_info.result\n\
    \           print(\"Model ID: {}\".format(result.model_id))\n       elif operation_info.status\
    \ == \"failed\":\n           print(\"My {} operation failed.\".format(operation_info.kind))\n\
    \           error = operation_info.error\n           print(\"{}: {}\".format(error.code,\
    \ error.message))\n       else:\n           print(\"My operation status is {}\"\
    .format(operation_info.status))\n   except StopAsyncIteration:\n       print(\"\
    No operations found.\")\n\n   ````\n"
- uid: azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.get_resource_details
  name: get_resource_details
  summary: Get information about the models under the Form Recognizer resource.
  signature: 'async get_resource_details(**kwargs: Any) -> ResourceDetails'
  return:
    description: Summary of custom models under the resource - model count and limit.
    types:
    - <xref:azure.ai.formrecognizer.ResourceDetails>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get model counts and limits under the Form Recognizer resource.<!--[!code-python[Main](les\\\
    v3.2\\async_samples\\sample_manage_models_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\119\\\\azure-ai-formrecognizer-3.2.0\\\
    \\samples\\\\v3.2\\\\async_samples\\\\sample_manage_models_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   document_model_admin_client\
    \ = DocumentModelAdministrationClient(endpoint=endpoint, credential=AzureKeyCredential(key))\n\
    \n   async with document_model_admin_client:\n       account_details = await document_model_admin_client.get_resource_details()\n\
    \       print(\"Our resource has {} custom models, and we can have at most {}\
    \ custom models\\n\".format(\n           account_details.custom_document_models.count,\
    \ account_details.custom_document_models.limit\n       ))\n\n   ````\n"
- uid: azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.list_document_models
  name: list_document_models
  summary: 'List information for each model, including its model ID,

    description, and when it was created.'
  signature: 'list_document_models(**kwargs: Any) -> AsyncItemPaged[DocumentModelSummary]'
  return:
    description: Pageable of DocumentModelSummary.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.ai.formrecognizer.DocumentModelSummary>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "List all models that were built successfully under the Form Recognizer resource.<!--[!code-python[Main](les\\\
    v3.2\\async_samples\\sample_manage_models_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\119\\\\azure-ai-formrecognizer-3.2.0\\\
    \\samples\\\\v3.2\\\\async_samples\\\\sample_manage_models_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   models = document_model_admin_client.list_document_models()\n\
    \n   print(\"We have the following 'ready' models with IDs and descriptions:\"\
    )\n   async for model in models:\n       print(\"{} | {}\".format(model.model_id,\
    \ model.description))\n\n   ````\n"
- uid: azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.list_operations
  name: list_operations
  summary: 'List information for each operation.


    Lists all operations associated with the Form Recognizer resource.

    Note that operation information only persists for 24 hours. If the document model
    operation was successful,

    the document model can be accessed using the <xref:azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.get_document_model>
    or <xref:azure.ai.formrecognizer.aio.DocumentModelAdministrationClient.list_document_models>
    APIs.'
  signature: 'list_operations(**kwargs: Any) -> AsyncItemPaged[OperationSummary]'
  return:
    description: A pageable of OperationSummary.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.ai.formrecognizer.OperationSummary>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "List all document model operations in the past 24 hours.<!--[!code-python[Main](les\\\
    v3.2\\async_samples\\sample_get_operations_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\119\\\\azure-ai-formrecognizer-3.2.0\\\
    \\samples\\\\v3.2\\\\async_samples\\\\sample_get_operations_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.credentials\
    \ import AzureKeyCredential\n   from azure.ai.formrecognizer.aio import DocumentModelAdministrationClient\n\
    \n   endpoint = os.environ[\"AZURE_FORM_RECOGNIZER_ENDPOINT\"]\n   key = os.environ[\"\
    AZURE_FORM_RECOGNIZER_KEY\"]\n\n   document_model_admin_client = DocumentModelAdministrationClient(endpoint=endpoint,\
    \ credential=AzureKeyCredential(key))\n\n   async with document_model_admin_client:\n\
    \       operations = document_model_admin_client.list_operations()\n\n       print(\"\
    The following document model operations exist under my resource:\")\n       async\
    \ for operation in operations:\n           print(\"\\nOperation ID: {}\".format(operation.operation_id))\n\
    \           print(\"Operation kind: {}\".format(operation.kind))\n           print(\"\
    Operation status: {}\".format(operation.status))\n           print(\"Operation\
    \ percent completed: {}\".format(operation.percent_completed))\n           print(\"\
    Operation created on: {}\".format(operation.created_on))\n           print(\"\
    Operation last updated on: {}\".format(operation.last_updated_on))\n         \
    \  print(\"Resource location of successful operation: {}\".format(operation.resource_location))\n\
    \n   ````\n"
