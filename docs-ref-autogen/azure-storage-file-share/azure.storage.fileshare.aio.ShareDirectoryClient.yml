### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.fileshare.aio.ShareDirectoryClient.close_all_handles
  - azure.storage.fileshare.aio.ShareDirectoryClient.close_handle
  - azure.storage.fileshare.aio.ShareDirectoryClient.create_directory
  - azure.storage.fileshare.aio.ShareDirectoryClient.create_subdirectory
  - azure.storage.fileshare.aio.ShareDirectoryClient.delete_directory
  - azure.storage.fileshare.aio.ShareDirectoryClient.delete_file
  - azure.storage.fileshare.aio.ShareDirectoryClient.delete_subdirectory
  - azure.storage.fileshare.aio.ShareDirectoryClient.get_directory_properties
  - azure.storage.fileshare.aio.ShareDirectoryClient.get_file_client
  - azure.storage.fileshare.aio.ShareDirectoryClient.get_subdirectory_client
  - azure.storage.fileshare.aio.ShareDirectoryClient.list_directories_and_files
  - azure.storage.fileshare.aio.ShareDirectoryClient.list_handles
  - azure.storage.fileshare.aio.ShareDirectoryClient.set_directory_metadata
  - azure.storage.fileshare.aio.ShareDirectoryClient.set_http_headers
  - azure.storage.fileshare.aio.ShareDirectoryClient.upload_file
  class: azure.storage.fileshare.aio.ShareDirectoryClient
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.fileshare._shared.base_client_async.AsyncStorageAccountHostsMixin
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.storage.fileshare._shared.base_client.StorageAccountHostsMixin
    type: azure.storage.fileshare._directory_client.ShareDirectoryClient
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: ShareDirectoryClient
  summary: 'A client to interact with a specific directory, although it may not yet
    exist.


    For operations relating to a specific subdirectory or file in this share, the
    clients for those

    entities can also be retrieved using the <xref:azure.storage.fileshare.aio.ShareDirectoryClient.get_subdirectory_client>
    and <xref:azure.storage.fileshare.aio.ShareDirectoryClient.get_file_client> functions.'
  syntax:
    content: ShareDirectoryClient(account_url, share_name, directory_path, snapshot=None,
      credential=None, **kwargs)
    parameters:
    - description: 'The URI to the storage account. In order to create a client given
        the full URI to the directory,

        use the <xref:azure.storage.fileshare.aio.from_directory_url> classmethod.'
      id: account_url
      type:
      - str
    - description: The name of the share for the directory.
      id: share_name
      type:
      - str
    - description: 'The directory path for the directory with which to interact.

        If specified, this value will override a directory value specified in the
        directory URL.'
      id: directory_path
      type:
      - str
    - description: 'An optional share snapshot on which to operate. This can be the
        snapshot ID string

        or the response returned from <xref:ShareClient.create_snapshot>.'
      id: snapshot
      type:
      - str
    - description: 'The credential with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string or
        an account

        shared access key.'
      id: credential
    - description: 'The Storage API version to use for requests. Default value is
        ''2019-07-07''.

        Setting to an older version may result in reduced feature compatibility.


        New in version 12.1.0.'
      id: api_version
      type:
      - str
    - description: The hostname of the secondary endpoint.
      id: secondary_hostname
      type:
      - str
    - description: The event loop to run the asynchronous tasks.
      id: loop
    - description: The maximum range size used for a file upload. Defaults to 4*1024*1024.
      id: max_range_size
      type:
      - int
  type: class
  uid: azure.storage.fileshare.aio.ShareDirectoryClient
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.close_all_handles
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: close_all_handles(recursive=False, **kwargs)
  namewithoutparameters: close_all_handles
  summary: 'Close any open file handles.


    This operation will block until the service has closed all open handles.'
  syntax:
    content: close_all_handles(recursive=False, **kwargs)
    parameters:
    - description: 'Boolean that specifies if operation should apply to the directory
        specified by the client,

        its files, its subdirectories and their files. Default value is False.'
      id: recursive
      isRequired: true
      type:
      - bool
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: 'The number of handles closed (this may be 0 if the specified handle
        was not found)

        and the number of handles failed to close in a dict.'
      type:
      - dict[str, int]
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.close_all_handles
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.close_handle
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: close_handle(handle, **kwargs)
  namewithoutparameters: close_handle
  summary: Close an open file handle.
  syntax:
    content: close_handle(handle, **kwargs)
    parameters:
    - description: A specific handle to close.
      id: handle
      isRequired: true
      type:
      - str
      - azure.storage.fileshare.Handle
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: 'The number of handles closed (this may be 0 if the specified handle
        was not found)

        and the number of handles failed to close in a dict.'
      type:
      - dict[str, int]
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.close_handle
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  example:
  - "Creates a directory.<!--[!code-python[Main](les\\file_samples_directory_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_directory_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await directory.create_directory()\n\
    \n   ````\n"
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.create_directory
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: create_directory(**kwargs)
  namewithoutparameters: create_directory
  summary: Creates a new directory under the directory referenced by the client.
  syntax:
    content: create_directory(**kwargs)
    parameters:
    - description: Name-value pairs associated with the directory as metadata.
      id: metadata
      isRequired: true
      type:
      - dict(str,str)
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: Directory-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.create_directory
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  example:
  - "Create a subdirectory.<!--[!code-python[Main](les\\file_samples_directory_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_directory_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Create the directory\n\
    \   await parent_dir.create_directory()\n\n   # Create a subdirectory\n   subdir\
    \ = await parent_dir.create_subdirectory(\"subdir\")\n\n   ````\n"
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.create_subdirectory
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: create_subdirectory(directory_name, **kwargs)
  namewithoutparameters: create_subdirectory
  summary: 'Creates a new subdirectory and returns a client to interact

    with the subdirectory.'
  syntax:
    content: create_subdirectory(directory_name, **kwargs)
    parameters:
    - description: The name of the subdirectory.
      id: directory_name
      isRequired: true
      type:
      - str
    - description: Name-value pairs associated with the subdirectory as metadata.
      id: metadata
      isRequired: true
      type:
      - dict(str,str)
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: ShareDirectoryClient
      type:
      - azure.storage.fileshare.aio.ShareDirectoryClient
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.create_subdirectory
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  example:
  - "Deletes a directory.<!--[!code-python[Main](les\\file_samples_directory_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_directory_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await directory.delete_directory()\n\
    \n   ````\n"
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.delete_directory
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: delete_directory(**kwargs)
  namewithoutparameters: delete_directory
  summary: 'Marks the directory for deletion. The directory is

    later deleted during garbage collection.'
  syntax:
    content: delete_directory(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.delete_directory
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  example:
  - "Delete a file in a directory.<!--[!code-python[Main](les\\file_samples_directory_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_directory_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Delete the file\
    \ in the directory\n   await directory.delete_file(file_name=\"sample\")\n\n \
    \  ````\n"
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.delete_file
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: delete_file(file_name, **kwargs)
  namewithoutparameters: delete_file
  summary: 'Marks the specified file for deletion. The file is later

    deleted during garbage collection.'
  syntax:
    content: delete_file(file_name, **kwargs)
    parameters:
    - description: The name of the file to delete.
      id: file_name
      isRequired: true
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.delete_file
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  example:
  - "Delete a subdirectory.<!--[!code-python[Main](les\\file_samples_directory_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_directory_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await parent_dir.delete_subdirectory(\"\
    subdir\")\n\n   ````\n"
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.delete_subdirectory
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: delete_subdirectory(directory_name, **kwargs)
  namewithoutparameters: delete_subdirectory
  summary: Deletes a subdirectory.
  syntax:
    content: delete_subdirectory(directory_name, **kwargs)
    parameters:
    - description: The name of the subdirectory.
      id: directory_name
      isRequired: true
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.delete_subdirectory
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.get_directory_properties
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: get_directory_properties(**kwargs)
  namewithoutparameters: get_directory_properties
  summary: 'Returns all user-defined metadata and system properties for the

    specified directory. The data returned does not include the directory''s

    list of files.'
  syntax:
    content: get_directory_properties(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: DirectoryProperties
      type:
      - azure.storage.fileshare.DirectoryProperties
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.get_directory_properties
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.get_file_client
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: get_file_client(file_name, **kwargs)
  namewithoutparameters: get_file_client
  summary: 'Get a client to interact with a specific file.


    The file need not already exist.'
  syntax:
    content: get_file_client(file_name, **kwargs)
    parameters:
    - description: The name of the file.
      id: file_name
      isRequired: true
      type:
      - str
    return:
      description: A File Client.
      type:
      - azure.storage.fileshare.ShareFileClient
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.get_file_client
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  example:
  - "Gets the subdirectory client.<!--[!code-python[Main](les\\file_samples_directory_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_directory_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Get a directory\
    \ client and create the directory\n   parent = share.get_directory_client(\"dir1\"\
    )\n   await parent.create_directory()\n\n   # Get a subdirectory client and create\
    \ the subdirectory \"dir1/dir2\"\n   subdirectory = parent.get_subdirectory_client(\"\
    dir2\")\n   await subdirectory.create_directory()\n\n   ````\n"
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.get_subdirectory_client
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: get_subdirectory_client(directory_name, **kwargs)
  namewithoutparameters: get_subdirectory_client
  summary: 'Get a client to interact with a specific subdirectory.


    The subdirectory need not already exist.'
  syntax:
    content: get_subdirectory_client(directory_name, **kwargs)
    parameters:
    - description: The name of the subdirectory.
      id: directory_name
      isRequired: true
      type:
      - str
    return:
      description: A Directory Client.
      type:
      - azure.storage.fileshare.aio.ShareDirectoryClient
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.get_subdirectory_client
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  example:
  - "List directories and files.<!--[!code-python[Main](les\\file_samples_directory_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_directory_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # List the directories\
    \ and files under the parent directory\n   my_list = []\n   async for item in\
    \ parent_dir.list_directories_and_files():\n       my_list.append(item)\n   print(my_list)\n\
    \n   ````\n"
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.list_directories_and_files
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: list_directories_and_files(name_starts_with=None, **kwargs)
  namewithoutparameters: list_directories_and_files
  summary: Lists all the directories and files under the directory.
  syntax:
    content: list_directories_and_files(name_starts_with=None, **kwargs)
    parameters:
    - description: 'Filters the results to return only entities whose names

        begin with the specified prefix.'
      id: name_starts_with
      isRequired: true
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: An auto-paging iterable of dict-like DirectoryProperties and FileProperties
      type:
      - azure.core.async_paging.AsyncItemPaged[DirectoryProperties and FileProperties]
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.list_directories_and_files
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.list_handles
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: list_handles(recursive=False, **kwargs)
  namewithoutparameters: list_handles
  summary: Lists opened handles on a directory or a file under the directory.
  syntax:
    content: list_handles(recursive=False, **kwargs)
    parameters:
    - description: 'Boolean that specifies if operation should apply to the directory
        specified by the client,

        its files, its subdirectories and their files. Default value is False.'
      id: recursive
      isRequired: true
      type:
      - bool
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: An auto-paging iterable of HandleItem
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.storage.fileshare.HandleItem]
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.list_handles
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.set_directory_metadata
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: set_directory_metadata(metadata, **kwargs)
  namewithoutparameters: set_directory_metadata
  summary: 'Sets the metadata for the directory.


    Each call to this operation replaces all existing metadata

    attached to the directory. To remove all metadata from the directory,

    call this operation with an empty metadata dict.'
  syntax:
    content: set_directory_metadata(metadata, **kwargs)
    parameters:
    - description: Name-value pairs associated with the directory as metadata.
      id: metadata
      isRequired: true
      type:
      - dict(str, str)
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: Directory-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.set_directory_metadata
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.set_http_headers
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: set_http_headers(file_attributes='none', file_creation_time='preserve', file_last_write_time='preserve',
    file_permission=None, permission_key=None, **kwargs)
  namewithoutparameters: set_http_headers
  summary: Sets HTTP headers on the directory.
  syntax:
    content: set_http_headers(file_attributes='none', file_creation_time='preserve',
      file_last_write_time='preserve', file_permission=None, permission_key=None,
      **kwargs)
    parameters:
    - description: 'The file system attributes for files and directories.

        If not set, indicates preservation of existing values.

        Here is an example for when the var type is str: ''Temporary|Archive'''
      id: file_attributes
      isRequired: true
      type:
      - str
      - azure.storage.fileshare.NTFSAttributes
    - description: 'Creation time for the file

        Default value: Preserve.'
      id: file_creation_time
      isRequired: true
      type:
      - str
      - datetime
    - description: 'Last write time for the file

        Default value: Preserve.'
      id: file_last_write_time
      isRequired: true
      type:
      - str
      - datetime
    - description: 'If specified the permission (security

        descriptor) shall be set for the directory/file. This header can be

        used if Permission size is <= 8KB, else x-ms-file-permission-key

        header shall be used. Default value: Inherit. If SDDL is specified as

        input, it must have owner, group and dacl. Note: Only one of the

        x-ms-file-permission or x-ms-file-permission-key should be specified.'
      id: file_permission
      isRequired: true
      type:
      - str
    - description: 'Key of the permission to be set for the

        directory/file. Note: Only one of the x-ms-file-permission or

        x-ms-file-permission-key should be specified.'
      id: permission_key
      isRequired: true
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: File-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.set_http_headers
- class: azure.storage.fileshare.aio.ShareDirectoryClient
  example:
  - "Upload a file to a directory.<!--[!code-python[Main](les\\file_samples_directory_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_directory_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Upload a file\
    \ to the directory\n   with open(SOURCE_FILE, \"rb\") as source:\n       await\
    \ directory.upload_file(file_name=\"sample\", data=source)\n\n   ````\n"
  fullName: azure.storage.fileshare.aio.ShareDirectoryClient.upload_file
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: upload_file(file_name, data, length=None, **kwargs)
  namewithoutparameters: upload_file
  summary: 'Creates a new file in the directory and returns a ShareFileClient

    to interact with the file.'
  syntax:
    content: upload_file(file_name, data, length=None, **kwargs)
    parameters:
    - description: The name of the file.
      id: file_name
      isRequired: true
      type:
      - str
    - description: Content of the file.
      id: data
      isRequired: true
      type:
      - Any
    - description: Length of the file in bytes. Specify its maximum size, up to 1
        TiB.
      id: length
      isRequired: true
      type:
      - int
    - description: Name-value pairs associated with the file as metadata.
      id: metadata
      isRequired: true
      type:
      - dict(str,str)
    - description: 'ContentSettings object used to set file properties. Used to set
        content type, encoding,

        language, disposition, md5, and cache control.'
      id: content_settings
      isRequired: true
      type:
      - azure.storage.fileshare.ContentSettings
    - description: 'If true, calculates an MD5 hash for each range of the file. The
        storage

        service checks the hash of the content that has arrived with the hash

        that was sent. This is primarily valuable for detecting bitflips on

        the wire if using http instead of https as https (the default) will

        already validate. Note that this MD5 hash is not stored with the

        file.'
      id: validate_content
      isRequired: true
      type:
      - bool
    - description: Maximum number of parallel connections to use.
      id: max_concurrency
      isRequired: true
      type:
      - int
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    - description: Defaults to UTF-8.
      id: encoding
      isRequired: true
      type:
      - str
    return:
      description: ShareFileClient
      type:
      - azure.storage.fileshare.aio.ShareFileClient
  type: method
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.upload_file
references:
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.close_all_handles
  isExternal: false
  name: close_all_handles(recursive=False, **kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.close_all_handles
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.close_handle
  isExternal: false
  name: close_handle(handle, **kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.close_handle
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.create_directory
  isExternal: false
  name: create_directory(**kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.create_directory
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.create_subdirectory
  isExternal: false
  name: create_subdirectory(directory_name, **kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.create_subdirectory
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.delete_directory
  isExternal: false
  name: delete_directory(**kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.delete_directory
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.delete_file
  isExternal: false
  name: delete_file(file_name, **kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.delete_file
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.delete_subdirectory
  isExternal: false
  name: delete_subdirectory(directory_name, **kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.delete_subdirectory
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.get_directory_properties
  isExternal: false
  name: get_directory_properties(**kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.get_directory_properties
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.get_file_client
  isExternal: false
  name: get_file_client(file_name, **kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.get_file_client
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.get_subdirectory_client
  isExternal: false
  name: get_subdirectory_client(directory_name, **kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.get_subdirectory_client
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.list_directories_and_files
  isExternal: false
  name: list_directories_and_files(name_starts_with=None, **kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.list_directories_and_files
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.list_handles
  isExternal: false
  name: list_handles(recursive=False, **kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.list_handles
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.set_directory_metadata
  isExternal: false
  name: set_directory_metadata(metadata, **kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.set_directory_metadata
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.set_http_headers
  isExternal: false
  name: set_http_headers(file_attributes='none', file_creation_time='preserve', file_last_write_time='preserve',
    file_permission=None, permission_key=None, **kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.set_http_headers
- fullName: azure.storage.fileshare.aio.ShareDirectoryClient.upload_file
  isExternal: false
  name: upload_file(file_name, data, length=None, **kwargs)
  parent: azure.storage.fileshare.aio.ShareDirectoryClient
  uid: azure.storage.fileshare.aio.ShareDirectoryClient.upload_file
- fullName: dict[str, int]
  name: dict[str, int]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: int
    name: int
    uid: int
  - fullName: ']'
    name: ']'
  uid: dict[str, int]
- fullName: dict(str,str)
  name: dict(str,str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str,str
    name: str,str
    uid: str,str
  - fullName: )
    name: )
  uid: dict(str,str)
- fullName: dict(str, Any)
  name: dict(str, Any)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: )
    name: )
  uid: dict(str, Any)
- fullName: azure.core.async_paging.AsyncItemPaged[DirectoryProperties and FileProperties]
  name: AsyncItemPaged[DirectoryProperties and FileProperties]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: DirectoryProperties and FileProperties
    name: DirectoryProperties and FileProperties
    uid: DirectoryProperties and FileProperties
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[DirectoryProperties and FileProperties]
- fullName: azure.core.async_paging.AsyncItemPaged[azure.storage.fileshare.HandleItem]
  name: AsyncItemPaged[HandleItem]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.storage.fileshare.HandleItem
    name: HandleItem
    uid: azure.storage.fileshare.HandleItem
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.storage.fileshare.HandleItem]
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
