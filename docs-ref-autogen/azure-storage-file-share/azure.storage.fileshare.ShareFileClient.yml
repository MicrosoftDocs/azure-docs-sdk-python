### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.fileshare.ShareFileClient.abort_copy
  - azure.storage.fileshare.ShareFileClient.acquire_lease
  - azure.storage.fileshare.ShareFileClient.clear_range
  - azure.storage.fileshare.ShareFileClient.close_all_handles
  - azure.storage.fileshare.ShareFileClient.close_handle
  - azure.storage.fileshare.ShareFileClient.create_file
  - azure.storage.fileshare.ShareFileClient.delete_file
  - azure.storage.fileshare.ShareFileClient.download_file
  - azure.storage.fileshare.ShareFileClient.from_connection_string
  - azure.storage.fileshare.ShareFileClient.from_file_url
  - azure.storage.fileshare.ShareFileClient.get_file_properties
  - azure.storage.fileshare.ShareFileClient.get_ranges
  - azure.storage.fileshare.ShareFileClient.list_handles
  - azure.storage.fileshare.ShareFileClient.resize_file
  - azure.storage.fileshare.ShareFileClient.set_file_metadata
  - azure.storage.fileshare.ShareFileClient.set_http_headers
  - azure.storage.fileshare.ShareFileClient.start_copy_from_url
  - azure.storage.fileshare.ShareFileClient.upload_file
  - azure.storage.fileshare.ShareFileClient.upload_range
  - azure.storage.fileshare.ShareFileClient.upload_range_from_url
  class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.fileshare._shared.base_client.StorageAccountHostsMixin
  langs:
  - python
  module: azure.storage.fileshare
  name: ShareFileClient
  summary: A client to interact with a specific file, although that file may not yet
    exist.
  syntax:
    content: ShareFileClient(account_url, share_name, file_path, snapshot=None, credential=None,
      **kwargs)
    parameters:
    - description: 'The URI to the storage account. In order to create a client given
        the full URI to the

        file, use the <xref:azure.storage.fileshare.ShareFileClient.from_file_url>
        classmethod.'
      id: account_url
      type:
      - str
    - description: The name of the share for the file.
      id: share_name
      type:
      - str
    - description: 'The file path to the file with which to interact. If specified,
        this value will override

        a file value specified in the file URL.'
      id: file_path
      type:
      - str
    - description: 'An optional file snapshot on which to operate. This can be the
        snapshot ID string

        or the response returned from <xref:ShareClient.create_snapshot>.'
      id: snapshot
      type:
      - str
    - description: 'The credential with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string or
        an account

        shared access key.'
      id: credential
    - description: 'The Storage API version to use for requests. Default value is
        ''2019-07-07''.

        Setting to an older version may result in reduced feature compatibility.


        New in version 12.1.0.'
      id: api_version
      type:
      - str
    - description: The hostname of the secondary endpoint.
      id: secondary_hostname
      type:
      - str
    - description: The maximum range size used for a file upload. Defaults to 4*1024*1024.
      id: max_range_size
      type:
      - int
  type: class
  uid: azure.storage.fileshare.ShareFileClient
- class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient.abort_copy
  langs:
  - python
  module: azure.storage.fileshare
  name: abort_copy(copy_id, **kwargs)
  namewithoutparameters: abort_copy
  summary: 'Abort an ongoing copy operation.


    This will leave a destination file with zero length and full metadata.

    This will raise an error if the copy operation has already ended.'
  syntax:
    content: abort_copy(copy_id, **kwargs)
    parameters:
    - description: 'The copy operation to abort. This can be either an ID, or an

        instance of FileProperties.'
      id: copy_id
      isRequired: true
      type:
      - str
      - azure.storage.fileshare.FileProperties
    - description: 'Required if the file has an active lease. Value can be a ShareLeaseClient
        object

        or the lease ID as a string.


        New in version 12.1.0.'
      id: lease
      isRequired: true
      type:
      - azure.storage.fileshare.ShareLeaseClient
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.fileshare.ShareFileClient.abort_copy
- class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient.acquire_lease
  langs:
  - python
  module: azure.storage.fileshare
  name: acquire_lease(lease_id=None, **kwargs)
  namewithoutparameters: acquire_lease
  summary: 'Requests a new lease.


    If the file does not have an active lease, the File

    Service creates a lease on the blob and returns a new lease.'
  syntax:
    content: acquire_lease(lease_id=None, **kwargs)
    parameters:
    - description: 'Proposed lease ID, in a GUID string format. The File Service

        returns 400 (Invalid request) if the proposed lease ID is not

        in the correct format.'
      id: lease_id
      isRequired: true
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: A ShareLeaseClient object.
      type:
      - azure.storage.fileshare.ShareLeaseClient
  type: method
  uid: azure.storage.fileshare.ShareFileClient.acquire_lease
- class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient.clear_range
  langs:
  - python
  module: azure.storage.fileshare
  name: clear_range(offset, length, **kwargs)
  namewithoutparameters: clear_range
  summary: 'Clears the specified range and releases the space used in storage for

    that range.'
  syntax:
    content: clear_range(offset, length, **kwargs)
    parameters:
    - description: 'Start of byte range to use for clearing a section of the file.

        The range can be up to 4 MB in size.'
      id: offset
      isRequired: true
      type:
      - int
    - description: 'Number of bytes to use for clearing a section of the file.

        The range can be up to 4 MB in size.'
      id: length
      isRequired: true
      type:
      - int
    - description: 'Required if the file has an active lease. Value can be a ShareLeaseClient
        object

        or the lease ID as a string.


        New in version 12.1.0.'
      id: lease
      isRequired: true
      type:
      - azure.storage.fileshare.ShareLeaseClient
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: File-updated property dict (Etag and last modified).
      type:
      - Dict[str, Any]
  type: method
  uid: azure.storage.fileshare.ShareFileClient.clear_range
- class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient.close_all_handles
  langs:
  - python
  module: azure.storage.fileshare
  name: close_all_handles(**kwargs)
  namewithoutparameters: close_all_handles
  summary: 'Close any open file handles.


    This operation will block until the service has closed all open handles.'
  syntax:
    content: close_all_handles(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: 'The number of handles closed (this may be 0 if the specified handle
        was not found)

        and the number of handles failed to close in a dict.'
      type:
      - dict[str, int]
  type: method
  uid: azure.storage.fileshare.ShareFileClient.close_all_handles
- class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient.close_handle
  langs:
  - python
  module: azure.storage.fileshare
  name: close_handle(handle, **kwargs)
  namewithoutparameters: close_handle
  summary: Close an open file handle.
  syntax:
    content: close_handle(handle, **kwargs)
    parameters:
    - description: A specific handle to close.
      id: handle
      isRequired: true
      type:
      - str
      - azure.storage.fileshare.Handle
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: 'The number of handles closed (this may be 0 if the specified handle
        was not found)

        and the number of handles failed to close in a dict.'
      type:
      - dict[str, int]
  type: method
  uid: azure.storage.fileshare.ShareFileClient.close_handle
- class: azure.storage.fileshare.ShareFileClient
  example:
  - "Create a file.<!--[!code-python[Main](les\\file_samples_client.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\105\\\\azure-storage-file-share-12.1.2\\\
    \\samples\\\\file_samples_client.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   # Create and allocate bytes for the file (no content added\
    \ yet)\n   my_allocated_file.create_file(size=100)\n\n   ````\n"
  fullName: azure.storage.fileshare.ShareFileClient.create_file
  langs:
  - python
  module: azure.storage.fileshare
  name: create_file(size, file_attributes='none', file_creation_time='now', file_last_write_time='now',
    file_permission=None, permission_key=None, **kwargs)
  namewithoutparameters: create_file
  summary: 'Creates a new file.


    Note that it only initializes the file with no content.'
  syntax:
    content: create_file(size, file_attributes='none', file_creation_time='now', file_last_write_time='now',
      file_permission=None, permission_key=None, **kwargs)
    parameters:
    - description: 'Specifies the maximum size for the file,

        up to 1 TB.'
      id: size
      isRequired: true
      type:
      - int
    - description: 'The file system attributes for files and directories.

        If not set, the default value would be "None" and the attributes will be set
        to "Archive".

        Here is an example for when the var type is str: ''Temporary|Archive''.

        file_attributes value is not case sensitive.'
      id: file_attributes
      isRequired: true
      type:
      - str
      - azure.storage.fileshare.NTFSAttributes
    - description: 'Creation time for the file

        Default value: Now.'
      id: file_creation_time
      isRequired: true
      type:
      - str
      - datetime.datetime
    - description: 'Last write time for the file

        Default value: Now.'
      id: file_last_write_time
      isRequired: true
      type:
      - str
      - datetime.datetime
    - description: 'If specified the permission (security

        descriptor) shall be set for the directory/file. This header can be

        used if Permission size is <= 8KB, else x-ms-file-permission-key

        header shall be used. Default value: Inherit. If SDDL is specified as

        input, it must have owner, group and dacl. Note: Only one of the

        x-ms-file-permission or x-ms-file-permission-key should be specified.'
      id: file_permission
      isRequired: true
      type:
      - str
    - description: 'Key of the permission to be set for the

        directory/file. Note: Only one of the x-ms-file-permission or

        x-ms-file-permission-key should be specified.'
      id: permission_key
      isRequired: true
      type:
      - str
    - description: 'ContentSettings object used to set file properties. Used to set
        content type, encoding,

        language, disposition, md5, and cache control.'
      id: content_settings
      isRequired: true
      type:
      - azure.storage.fileshare.ContentSettings
    - description: Name-value pairs associated with the file as metadata.
      id: metadata
      isRequired: true
      type:
      - dict(str,str)
    - description: 'Required if the file has an active lease. Value can be a ShareLeaseClient
        object

        or the lease ID as a string.


        New in version 12.1.0.'
      id: lease
      isRequired: true
      type:
      - azure.storage.fileshare.ShareLeaseClient
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: File-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.fileshare.ShareFileClient.create_file
- class: azure.storage.fileshare.ShareFileClient
  example:
  - "Delete a file.<!--[!code-python[Main](les\\file_samples_client.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\105\\\\azure-storage-file-share-12.1.2\\\
    \\samples\\\\file_samples_client.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   my_file.delete_file()\n\n   ````\n"
  fullName: azure.storage.fileshare.ShareFileClient.delete_file
  langs:
  - python
  module: azure.storage.fileshare
  name: delete_file(**kwargs)
  namewithoutparameters: delete_file
  summary: 'Marks the specified file for deletion. The file is

    later deleted during garbage collection.'
  syntax:
    content: delete_file(**kwargs)
    parameters:
    - description: 'Required if the file has an active lease. Value can be a ShareLeaseClient
        object

        or the lease ID as a string.


        New in version 12.1.0.'
      id: lease
      isRequired: true
      type:
      - azure.storage.fileshare.ShareLeaseClient
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.fileshare.ShareFileClient.delete_file
- class: azure.storage.fileshare.ShareFileClient
  example:
  - "Download a file.<!--[!code-python[Main](les\\file_samples_client.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\105\\\\\
    azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_client.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   with open(DEST_FILE, \"wb\") as\
    \ data:\n       stream = my_file.download_file()\n       data.write(stream.readall())\n\
    \n   ````\n"
  fullName: azure.storage.fileshare.ShareFileClient.download_file
  langs:
  - python
  module: azure.storage.fileshare
  name: download_file(offset=None, length=None, **kwargs)
  namewithoutparameters: download_file
  summary: Downloads a file to a stream with automatic chunking.
  syntax:
    content: download_file(offset=None, length=None, **kwargs)
    parameters:
    - description: 'Start of byte range to use for downloading a section of the file.

        Must be set if length is provided.'
      id: offset
      isRequired: true
      type:
      - int
    - description: 'Number of bytes to read from the stream. This is optional, but

        should be supplied for optimal performance.'
      id: length
      isRequired: true
      type:
      - int
    - description: Maximum number of parallel connections to use.
      id: max_concurrency
      isRequired: true
      type:
      - int
    - description: 'If true, calculates an MD5 hash for each chunk of the file. The
        storage

        service checks the hash of the content that has arrived with the hash

        that was sent. This is primarily valuable for detecting bitflips on

        the wire if using http instead of https as https (the default) will

        already validate. Note that this MD5 hash is not stored with the

        file. Also note that if enabled, the memory-efficient upload algorithm

        will not be used, because computing the MD5 hash requires buffering

        entire blocks, and doing so defeats the purpose of the memory-efficient algorithm.'
      id: validate_content
      isRequired: true
      type:
      - bool
    - description: 'Required if the file has an active lease. Value can be a ShareLeaseClient
        object

        or the lease ID as a string.


        New in version 12.1.0.'
      id: lease
      isRequired: true
      type:
      - azure.storage.fileshare.ShareLeaseClient
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: A iterable data generator (stream)
  type: method
  uid: azure.storage.fileshare.ShareFileClient.download_file
- class: azure.storage.fileshare.ShareFileClient
  example:
  - "Creates the file client with connection string.<!--[!code-python[Main](les\\\
    file_samples_hello_world.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\
    \\file_samples_hello_world.py\", \"xml:space\": \"preserve\", \"language\": \"\
    python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n\
    ````python\n\n   from azure.storage.fileshare import ShareFileClient\n   file\
    \ = ShareFileClient.from_connection_string(\n       self.connection_string,\n\
    \       share_name=\"helloworld2\",\n       file_path=\"myfile\")\n\n   ````\n"
  fullName: azure.storage.fileshare.ShareFileClient.from_connection_string
  langs:
  - python
  module: azure.storage.fileshare
  name: from_connection_string(conn_str, share_name, file_path, snapshot=None, credential=None,
    **kwargs)
  namewithoutparameters: from_connection_string
  summary: Create ShareFileClient from a Connection String.
  syntax:
    content: from_connection_string(conn_str, share_name, file_path, snapshot=None,
      credential=None, **kwargs)
    parameters:
    - description: A connection string to an Azure Storage account.
      id: conn_str
      isRequired: true
      type:
      - str
    - description: The name of the share.
      id: share_name
      isRequired: true
      type:
      - str
    - description: The file path.
      id: file_path
      isRequired: true
      type:
      - str
    - description: 'An optional file snapshot on which to operate. This can be the
        snapshot ID string

        or the response returned from <xref:ShareClient.create_snapshot>.'
      id: snapshot
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: 'The credential with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string or
        an account

        shared access key.'
      id: credential
    - defaultValue: None
      id: credential
    return:
      description: A File client.
      type:
      - azure.storage.fileshare.ShareFileClient
  type: method
  uid: azure.storage.fileshare.ShareFileClient.from_connection_string
- class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient.from_file_url
  langs:
  - python
  module: azure.storage.fileshare
  name: from_file_url(file_url, snapshot=None, credential=None, **kwargs)
  namewithoutparameters: from_file_url
  summary: A client to interact with a specific file, although that file may not yet
    exist.
  syntax:
    content: from_file_url(file_url, snapshot=None, credential=None, **kwargs)
    parameters:
    - description: The full URI to the file.
      id: file_url
      isRequired: true
      type:
      - str
    - description: 'An optional file snapshot on which to operate. This can be the
        snapshot ID string

        or the response returned from <xref:ShareClient.create_snapshot>.'
      id: snapshot
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: 'The credential with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string or
        an account

        shared access key.'
      id: credential
    - defaultValue: None
      id: credential
    return:
      description: A File client.
      type:
      - azure.storage.fileshare.ShareFileClient
  type: method
  uid: azure.storage.fileshare.ShareFileClient.from_file_url
- class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient.get_file_properties
  langs:
  - python
  module: azure.storage.fileshare
  name: get_file_properties(**kwargs)
  namewithoutparameters: get_file_properties
  summary: 'Returns all user-defined metadata, standard HTTP properties, and

    system properties for the file.'
  syntax:
    content: get_file_properties(**kwargs)
    parameters:
    - description: 'Required if the file has an active lease. Value can be a ShareLeaseClient
        object

        or the lease ID as a string.


        New in version 12.1.0.'
      id: lease
      isRequired: true
      type:
      - azure.storage.fileshare.ShareLeaseClient
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: FileProperties
      type:
      - azure.storage.fileshare.FileProperties
  type: method
  uid: azure.storage.fileshare.ShareFileClient.get_file_properties
- class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient.get_ranges
  langs:
  - python
  module: azure.storage.fileshare
  name: get_ranges(offset=None, length=None, **kwargs)
  namewithoutparameters: get_ranges
  summary: Returns the list of valid ranges of a file.
  syntax:
    content: get_ranges(offset=None, length=None, **kwargs)
    parameters:
    - description: Specifies the start offset of bytes over which to get ranges.
      id: offset
      isRequired: true
      type:
      - int
    - description: Number of bytes to use over which to get ranges.
      id: length
      isRequired: true
      type:
      - int
    - description: 'Required if the file has an active lease. Value can be a ShareLeaseClient
        object

        or the lease ID as a string.


        New in version 12.1.0.'
      id: lease
      isRequired: true
      type:
      - azure.storage.fileshare.ShareLeaseClient
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: A list of valid ranges.
      type:
      - List[dict[str, int]]
  type: method
  uid: azure.storage.fileshare.ShareFileClient.get_ranges
- class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient.list_handles
  langs:
  - python
  module: azure.storage.fileshare
  name: list_handles(**kwargs)
  namewithoutparameters: list_handles
  summary: Lists handles for file.
  syntax:
    content: list_handles(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: An auto-paging iterable of HandleItem
      type:
      - azure.core.paging.ItemPaged[azure.storage.fileshare.HandleItem]
  type: method
  uid: azure.storage.fileshare.ShareFileClient.list_handles
- class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient.resize_file
  langs:
  - python
  module: azure.storage.fileshare
  name: resize_file(size, **kwargs)
  namewithoutparameters: resize_file
  summary: Resizes a file to the specified size.
  syntax:
    content: resize_file(size, **kwargs)
    parameters:
    - description: Size to resize file to (in bytes)
      id: size
      isRequired: true
      type:
      - int
    - description: 'Required if the file has an active lease. Value can be a ShareLeaseClient
        object

        or the lease ID as a string.


        New in version 12.1.0.'
      id: lease
      isRequired: true
      type:
      - azure.storage.fileshare.ShareLeaseClient
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: File-updated property dict (Etag and last modified).
      type:
      - Dict[str, Any]
  type: method
  uid: azure.storage.fileshare.ShareFileClient.resize_file
- class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient.set_file_metadata
  langs:
  - python
  module: azure.storage.fileshare
  name: set_file_metadata(metadata=None, **kwargs)
  namewithoutparameters: set_file_metadata
  summary: 'Sets user-defined metadata for the specified file as one or more

    name-value pairs.


    Each call to this operation replaces all existing metadata

    attached to the file. To remove all metadata from the file,

    call this operation with no metadata dict.'
  syntax:
    content: set_file_metadata(metadata=None, **kwargs)
    parameters:
    - description: Name-value pairs associated with the file as metadata.
      id: metadata
      isRequired: true
      type:
      - dict(str, str)
    - description: 'Required if the file has an active lease. Value can be a ShareLeaseClient
        object

        or the lease ID as a string.


        New in version 12.1.0.'
      id: lease
      isRequired: true
      type:
      - azure.storage.fileshare.ShareLeaseClient
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: File-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.fileshare.ShareFileClient.set_file_metadata
- class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient.set_http_headers
  langs:
  - python
  module: azure.storage.fileshare
  name: set_http_headers(content_settings, file_attributes='preserve', file_creation_time='preserve',
    file_last_write_time='preserve', file_permission=None, permission_key=None, **kwargs)
  namewithoutparameters: set_http_headers
  summary: Sets HTTP headers on the file.
  syntax:
    content: set_http_headers(content_settings, file_attributes='preserve', file_creation_time='preserve',
      file_last_write_time='preserve', file_permission=None, permission_key=None,
      **kwargs)
    parameters:
    - description: 'ContentSettings object used to set file properties. Used to set
        content type, encoding,

        language, disposition, md5, and cache control.'
      id: content_settings
      isRequired: true
      type:
      - azure.storage.fileshare.ContentSettings
    - description: 'The file system attributes for files and directories.

        If not set, indicates preservation of existing values.

        Here is an example for when the var type is str: ''Temporary|Archive'''
      id: file_attributes
      isRequired: true
      type:
      - str
      - azure.storage.fileshare.NTFSAttributes
    - description: 'Creation time for the file

        Default value: Preserve.'
      id: file_creation_time
      isRequired: true
      type:
      - str
      - datetime.datetime
    - description: 'Last write time for the file

        Default value: Preserve.'
      id: file_last_write_time
      isRequired: true
      type:
      - str
      - datetime.datetime
    - description: 'If specified the permission (security

        descriptor) shall be set for the directory/file. This header can be

        used if Permission size is <= 8KB, else x-ms-file-permission-key

        header shall be used. Default value: Inherit. If SDDL is specified as

        input, it must have owner, group and dacl. Note: Only one of the

        x-ms-file-permission or x-ms-file-permission-key should be specified.'
      id: file_permission
      isRequired: true
      type:
      - str
    - description: 'Key of the permission to be set for the

        directory/file. Note: Only one of the x-ms-file-permission or

        x-ms-file-permission-key should be specified.'
      id: permission_key
      isRequired: true
      type:
      - str
    - description: 'Required if the file has an active lease. Value can be a ShareLeaseClient
        object

        or the lease ID as a string.


        New in version 12.1.0.'
      id: lease
      isRequired: true
      type:
      - azure.storage.fileshare.ShareLeaseClient
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: File-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.fileshare.ShareFileClient.set_http_headers
- class: azure.storage.fileshare.ShareFileClient
  example:
  - "Copy a file from a URL<!--[!code-python[Main](les\\file_samples_client.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\105\\\\\
    azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_client.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   destination_file.start_copy_from_url(source_url=source_url)\n\
    \n   ````\n"
  fullName: azure.storage.fileshare.ShareFileClient.start_copy_from_url
  langs:
  - python
  module: azure.storage.fileshare
  name: start_copy_from_url(source_url, **kwargs)
  namewithoutparameters: start_copy_from_url
  summary: 'Initiates the copying of data from a source URL into the file

    referenced by the client.


    The status of this copy operation can be found using the *get_properties*

    method.'
  syntax:
    content: start_copy_from_url(source_url, **kwargs)
    parameters:
    - description: Specifies the URL of the source file.
      id: source_url
      isRequired: true
      type:
      - str
    - description: 'If specified the permission (security descriptor) shall be set
        for the directory/file.

        This value can be set to "source" to copy the security descriptor from the
        source file.

        Otherwise if set, this value will be used to override the source value. If
        not set, permission value

        is inherited from the parent directory of the target file. This setting can
        be

        used if Permission size is <= 8KB, otherwise permission_key shall be used.

        If SDDL is specified as input, it must have owner, group and dacl.

        Note: Only one of the file_permission or permission_key should be specified.


        New in version 12.1.0: This parameter was introduced in API version ''2019-07-07''.'
      id: file_permission
      isRequired: true
      type:
      - str
    - description: 'Key of the permission to be set for the directory/file.

        This value can be set to "source" to copy the security descriptor from the
        source file.

        Otherwise if set, this value will be used to override the source value. If
        not set, permission value

        is inherited from the parent directory of the target file.

        Note: Only one of the file_permission or permission_key should be specified.


        New in version 12.1.0: This parameter was introduced in API version ''2019-07-07''.'
      id: permission_key
      isRequired: true
      type:
      - str
    - description: 'This value can be set to "source" to copy file attributes from
        the source file to the target file,

        or to clear all attributes, it can be set to "None". Otherwise it can be set
        to a list of attributes

        to set on the target file. If this is not set, the default value is "Archive".


        New in version 12.1.0: This parameter was introduced in API version ''2019-07-07''.'
      id: file_attributes
      isRequired: true
      type:
      - str
      - azure.storage.fileshare.NTFSAttributes
    - description: 'This value can be set to "source" to copy the creation time from
        the source file to the target file,

        or a datetime to set as creation time on the target file. This could also
        be a string in ISO 8601 format.

        If this is not set, creation time will be set to the date time value of the
        creation

        (or when it was overwritten) of the target file by copy engine.


        New in version 12.1.0: This parameter was introduced in API version ''2019-07-07''.'
      id: file_creation_time
      isRequired: true
      type:
      - str
      - datetime.datetime
    - description: 'This value can be set to "source" to copy the last write time
        from the source file to the target file, or

        a datetime to set as the last write time on the target file. This could also
        be a string in ISO 8601 format.

        If this is not set, value will be the last write time to the file by the copy
        engine.


        New in version 12.1.0: This parameter was introduced in API version ''2019-07-07''.'
      id: file_last_write_time
      isRequired: true
      type:
      - str
      - datetime.datetime
    - description: 'Specifies the option to overwrite the target file if it already
        exists and has read-only attribute set.


        New in version 12.1.0: This parameter was introduced in API version ''2019-07-07''.'
      id: ignore_read_only
      isRequired: true
      type:
      - bool
    - description: 'Specifies the option to set the archive attribute on the target
        file.

        True means the archive attribute will be set on the target file despite attribute

        overrides or the source file state.


        New in version 12.1.0: This parameter was introduced in API version ''2019-07-07''.'
      id: set_archive_attribute
      isRequired: true
      type:
      - bool
    - description: Name-value pairs associated with the file as metadata.
      id: metadata
      isRequired: true
    - description: 'Required if the file has an active lease. Value can be a ShareLeaseClient
        object

        or the lease ID as a string.


        New in version 12.1.0.'
      id: lease
      isRequired: true
      type:
      - azure.storage.fileshare.ShareLeaseClient
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.fileshare.ShareFileClient.start_copy_from_url
- class: azure.storage.fileshare.ShareFileClient
  example:
  - "Upload a file.<!--[!code-python[Main](les\\file_samples_client.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\105\\\\azure-storage-file-share-12.1.2\\\
    \\samples\\\\file_samples_client.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   with open(SOURCE_FILE, \"rb\") as source:\n       my_file.upload_file(source)\n\
    \n   ````\n"
  fullName: azure.storage.fileshare.ShareFileClient.upload_file
  langs:
  - python
  module: azure.storage.fileshare
  name: upload_file(data, length=None, file_attributes='none', file_creation_time='now',
    file_last_write_time='now', file_permission=None, permission_key=None, **kwargs)
  namewithoutparameters: upload_file
  summary: Uploads a new file.
  syntax:
    content: upload_file(data, length=None, file_attributes='none', file_creation_time='now',
      file_last_write_time='now', file_permission=None, permission_key=None, **kwargs)
    parameters:
    - description: Content of the file.
      id: data
      isRequired: true
      type:
      - Any
    - description: Length of the file in bytes. Specify its maximum size, up to 1
        TiB.
      id: length
      isRequired: true
      type:
      - int
    - description: 'The file system attributes for files and directories.

        If not set, the default value would be "None" and the attributes will be set
        to "Archive".

        Here is an example for when the var type is str: ''Temporary|Archive''.

        file_attributes value is not case sensitive.'
      id: file_attributes
      isRequired: true
      type:
      - str
      - azure.storage.fileshare.NTFSAttributes
    - description: 'Creation time for the file

        Default value: Now.'
      id: file_creation_time
      isRequired: true
      type:
      - str
      - datetime.datetime
    - description: 'Last write time for the file

        Default value: Now.'
      id: file_last_write_time
      isRequired: true
      type:
      - str
      - datetime.datetime
    - description: 'If specified the permission (security

        descriptor) shall be set for the directory/file. This header can be

        used if Permission size is <= 8KB, else x-ms-file-permission-key

        header shall be used. Default value: Inherit. If SDDL is specified as

        input, it must have owner, group and dacl. Note: Only one of the

        x-ms-file-permission or x-ms-file-permission-key should be specified.'
      id: file_permission
      isRequired: true
      type:
      - str
    - description: 'Key of the permission to be set for the

        directory/file. Note: Only one of the x-ms-file-permission or

        x-ms-file-permission-key should be specified.'
      id: permission_key
      isRequired: true
      type:
      - str
    - description: Name-value pairs associated with the file as metadata.
      id: metadata
      isRequired: true
      type:
      - dict(str,str)
    - description: 'ContentSettings object used to set file properties. Used to set
        content type, encoding,

        language, disposition, md5, and cache control.'
      id: content_settings
      isRequired: true
      type:
      - azure.storage.fileshare.ContentSettings
    - description: 'If true, calculates an MD5 hash for each range of the file. The
        storage

        service checks the hash of the content that has arrived with the hash

        that was sent. This is primarily valuable for detecting bitflips on

        the wire if using http instead of https as https (the default) will

        already validate. Note that this MD5 hash is not stored with the

        file.'
      id: validate_content
      isRequired: true
      type:
      - bool
    - description: Maximum number of parallel connections to use.
      id: max_concurrency
      isRequired: true
      type:
      - int
    - description: 'Required if the file has an active lease. Value can be a ShareLeaseClient
        object

        or the lease ID as a string.


        New in version 12.1.0.'
      id: lease
      isRequired: true
      type:
      - azure.storage.fileshare.ShareLeaseClient
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    - description: Defaults to UTF-8.
      id: encoding
      isRequired: true
      type:
      - str
    return:
      description: File-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.fileshare.ShareFileClient.upload_file
- class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient.upload_range
  langs:
  - python
  module: azure.storage.fileshare
  name: upload_range(data, offset, length, **kwargs)
  namewithoutparameters: upload_range
  summary: Upload a range of bytes to a file.
  syntax:
    content: upload_range(data, offset, length, **kwargs)
    parameters:
    - description: The data to upload.
      id: data
      isRequired: true
      type:
      - bytes
    - description: 'Start of byte range to use for uploading a section of the file.

        The range can be up to 4 MB in size.'
      id: offset
      isRequired: true
      type:
      - int
    - description: 'Number of bytes to use for uploading a section of the file.

        The range can be up to 4 MB in size.'
      id: length
      isRequired: true
      type:
      - int
    - description: 'If true, calculates an MD5 hash of the page content. The storage

        service checks the hash of the content that has arrived

        with the hash that was sent. This is primarily valuable for detecting

        bitflips on the wire if using http instead of https as https (the default)

        will already validate. Note that this MD5 hash is not stored with the

        file.'
      id: validate_content
      isRequired: true
      type:
      - bool
    - description: 'Required if the file has an active lease. Value can be a ShareLeaseClient
        object

        or the lease ID as a string.


        New in version 12.1.0.'
      id: lease
      isRequired: true
      type:
      - azure.storage.fileshare.ShareLeaseClient
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    - description: Defaults to UTF-8.
      id: encoding
      isRequired: true
      type:
      - str
    return:
      description: File-updated property dict (Etag and last modified).
      type:
      - Dict[str, Any]
  type: method
  uid: azure.storage.fileshare.ShareFileClient.upload_range
- class: azure.storage.fileshare.ShareFileClient
  fullName: azure.storage.fileshare.ShareFileClient.upload_range_from_url
  langs:
  - python
  module: azure.storage.fileshare
  name: upload_range_from_url(source_url, offset, length, source_offset, **kwargs)
  namewithoutparameters: upload_range_from_url
  summary: Writes the bytes from one Azure File endpoint into the specified range
    of another Azure File endpoint.
  syntax:
    content: upload_range_from_url(source_url, offset, length, source_offset, **kwargs)
    parameters:
    - description: 'Start of byte range to use for updating a section of the file.

        The range can be up to 4 MB in size.'
      id: offset
      isRequired: true
      type:
      - int
    - description: 'Number of bytes to use for updating a section of the file.

        The range can be up to 4 MB in size.'
      id: length
      isRequired: true
      type:
      - int
    - description: 'A URL of up to 2 KB in length that specifies an Azure file or
        blob.

        The value should be URL-encoded as it would appear in a request URI.

        If the source is in another account, the source must either be public

        or must be authenticated via a shared access signature. If the source

        is public, no authentication is required.

        Examples:

        [https://myaccount.file.core.windows.net/myshare/mydir/myfile](https://myaccount.file.core.windows.net/myshare/mydir/myfile)

        [https://otheraccount.file.core.windows.net/myshare/mydir/myfile?sastoken](https://otheraccount.file.core.windows.net/myshare/mydir/myfile?sastoken)'
      id: source_url
      isRequired: true
      type:
      - str
    - description: 'This indicates the start of the range of bytes(inclusive) that
        has to be taken from the copy source.

        The service will read the same number of bytes as the destination range (length-offset).'
      id: source_offset
      isRequired: true
      type:
      - int
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this conditional header to copy the blob only if the source

        blob has been modified since the specified date/time.'
      id: source_if_modified_since
      isRequired: true
      type:
      - datetime.datetime
    - description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this conditional header to copy the blob only if the source blob

        has not been modified since the specified date/time.'
      id: source_if_unmodified_since
      isRequired: true
      type:
      - datetime.datetime
    - description: 'The source ETag value, or the wildcard character (*). Used to
        check if the resource has changed,

        and act according to the condition specified by the *match_condition* parameter.'
      id: source_etag
      isRequired: true
      type:
      - str
    - description: The source match condition to use upon the etag.
      id: source_match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: 'Required if the file has an active lease. Value can be a ShareLeaseClient
        object

        or the lease ID as a string.


        New in version 12.1.0.'
      id: lease
      isRequired: true
      type:
      - azure.storage.fileshare.ShareLeaseClient
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
  type: method
  uid: azure.storage.fileshare.ShareFileClient.upload_range_from_url
references:
- fullName: azure.storage.fileshare.ShareFileClient.abort_copy
  isExternal: false
  name: abort_copy(copy_id, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.abort_copy
- fullName: azure.storage.fileshare.ShareFileClient.acquire_lease
  isExternal: false
  name: acquire_lease(lease_id=None, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.acquire_lease
- fullName: azure.storage.fileshare.ShareFileClient.clear_range
  isExternal: false
  name: clear_range(offset, length, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.clear_range
- fullName: azure.storage.fileshare.ShareFileClient.close_all_handles
  isExternal: false
  name: close_all_handles(**kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.close_all_handles
- fullName: azure.storage.fileshare.ShareFileClient.close_handle
  isExternal: false
  name: close_handle(handle, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.close_handle
- fullName: azure.storage.fileshare.ShareFileClient.create_file
  isExternal: false
  name: create_file(size, file_attributes='none', file_creation_time='now', file_last_write_time='now',
    file_permission=None, permission_key=None, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.create_file
- fullName: azure.storage.fileshare.ShareFileClient.delete_file
  isExternal: false
  name: delete_file(**kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.delete_file
- fullName: azure.storage.fileshare.ShareFileClient.download_file
  isExternal: false
  name: download_file(offset=None, length=None, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.download_file
- fullName: azure.storage.fileshare.ShareFileClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, share_name, file_path, snapshot=None, credential=None,
    **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.from_connection_string
- fullName: azure.storage.fileshare.ShareFileClient.from_file_url
  isExternal: false
  name: from_file_url(file_url, snapshot=None, credential=None, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.from_file_url
- fullName: azure.storage.fileshare.ShareFileClient.get_file_properties
  isExternal: false
  name: get_file_properties(**kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.get_file_properties
- fullName: azure.storage.fileshare.ShareFileClient.get_ranges
  isExternal: false
  name: get_ranges(offset=None, length=None, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.get_ranges
- fullName: azure.storage.fileshare.ShareFileClient.list_handles
  isExternal: false
  name: list_handles(**kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.list_handles
- fullName: azure.storage.fileshare.ShareFileClient.resize_file
  isExternal: false
  name: resize_file(size, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.resize_file
- fullName: azure.storage.fileshare.ShareFileClient.set_file_metadata
  isExternal: false
  name: set_file_metadata(metadata=None, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.set_file_metadata
- fullName: azure.storage.fileshare.ShareFileClient.set_http_headers
  isExternal: false
  name: set_http_headers(content_settings, file_attributes='preserve', file_creation_time='preserve',
    file_last_write_time='preserve', file_permission=None, permission_key=None, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.set_http_headers
- fullName: azure.storage.fileshare.ShareFileClient.start_copy_from_url
  isExternal: false
  name: start_copy_from_url(source_url, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.start_copy_from_url
- fullName: azure.storage.fileshare.ShareFileClient.upload_file
  isExternal: false
  name: upload_file(data, length=None, file_attributes='none', file_creation_time='now',
    file_last_write_time='now', file_permission=None, permission_key=None, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.upload_file
- fullName: azure.storage.fileshare.ShareFileClient.upload_range
  isExternal: false
  name: upload_range(data, offset, length, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.upload_range
- fullName: azure.storage.fileshare.ShareFileClient.upload_range_from_url
  isExternal: false
  name: upload_range_from_url(source_url, offset, length, source_offset, **kwargs)
  parent: azure.storage.fileshare.ShareFileClient
  uid: azure.storage.fileshare.ShareFileClient.upload_range_from_url
- fullName: Dict[str, Any]
  name: Dict[str, Any]
  spec.python:
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: Dict[str, Any]
- fullName: dict[str, int]
  name: dict[str, int]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: int
    name: int
    uid: int
  - fullName: ']'
    name: ']'
  uid: dict[str, int]
- fullName: dict(str,str)
  name: dict(str,str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str,str
    name: str,str
    uid: str,str
  - fullName: )
    name: )
  uid: dict(str,str)
- fullName: dict(str, Any)
  name: dict(str, Any)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: )
    name: )
  uid: dict(str, Any)
- fullName: List[dict[str, int]]
  name: List[dict[str, int]]
  spec.python:
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: int
    name: int
    uid: int
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: List[dict[str, int]]
- fullName: azure.core.paging.ItemPaged[azure.storage.fileshare.HandleItem]
  name: ItemPaged[HandleItem]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.storage.fileshare.HandleItem
    name: HandleItem
    uid: azure.storage.fileshare.HandleItem
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.storage.fileshare.HandleItem]
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
