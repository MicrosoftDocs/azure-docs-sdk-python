### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.fileshare.aio.ShareServiceClient.create_share
  - azure.storage.fileshare.aio.ShareServiceClient.delete_share
  - azure.storage.fileshare.aio.ShareServiceClient.get_service_properties
  - azure.storage.fileshare.aio.ShareServiceClient.get_share_client
  - azure.storage.fileshare.aio.ShareServiceClient.list_shares
  - azure.storage.fileshare.aio.ShareServiceClient.set_service_properties
  class: azure.storage.fileshare.aio.ShareServiceClient
  example:
  - "Create the share service client with url and credential.<!--[!code-python[Main](les\\\
    file_samples_authentication_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\105\\\\azure-storage-file-share-12.1.2\\\
    \\samples\\\\file_samples_authentication_async.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.storage.fileshare.aio import ShareServiceClient\n\
    \   share_service_client = ShareServiceClient(\n       account_url=self.account_url,\n\
    \       credential=self.access_key\n   )\n\n   ````\n"
  fullName: azure.storage.fileshare.aio.ShareServiceClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.fileshare._shared.base_client_async.AsyncStorageAccountHostsMixin
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.storage.fileshare._shared.base_client.StorageAccountHostsMixin
    type: azure.storage.fileshare._share_service_client.ShareServiceClient
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: ShareServiceClient
  summary: 'A client to interact with the File Share Service at the account level.


    This client provides operations to retrieve and configure the account properties

    as well as list, create and delete shares within the account.

    For operations relating to a specific share, a client for that entity

    can also be retrieved using the <xref:azure.storage.fileshare.aio.ShareServiceClient.get_share_client>
    function.'
  syntax:
    content: ShareServiceClient(account_url, credential=None, **kwargs)
    parameters:
    - description: 'The URL to the file share storage account. Any other entities
        included

        in the URL path (e.g. share or file) will be discarded. This URL can be optionally

        authenticated with a SAS token.'
      id: account_url
      type:
      - str
    - description: 'The credential with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string or
        an account

        shared access key.'
      id: credential
    - description: 'The Storage API version to use for requests. Default value is
        ''2019-07-07''.

        Setting to an older version may result in reduced feature compatibility.


        New in version 12.1.0.'
      id: api_version
      type:
      - str
    - description: The hostname of the secondary endpoint.
      id: secondary_hostname
      type:
      - str
    - description: The event loop to run the asynchronous tasks.
      id: loop
    - description: The maximum range size used for a file upload. Defaults to 4*1024*1024.
      id: max_range_size
      type:
      - int
  type: class
  uid: azure.storage.fileshare.aio.ShareServiceClient
- class: azure.storage.fileshare.aio.ShareServiceClient
  example:
  - "Create a share in the file share service.<!--[!code-python[Main](les\\file_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await file_service.create_share(share_name=\"\
    fileshare1\")\n\n   ````\n"
  fullName: azure.storage.fileshare.aio.ShareServiceClient.create_share
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: create_share(share_name, **kwargs)
  namewithoutparameters: create_share
  summary: 'Creates a new share under the specified account. If the share

    with the same name already exists, the operation fails. Returns a client with

    which to interact with the newly created share.'
  syntax:
    content: create_share(share_name, **kwargs)
    parameters:
    - description: The name of the share to create.
      id: share_name
      isRequired: true
      type:
      - str
    - description: 'A dict with name_value pairs to associate with the

        share as metadata. Example:{''Category'':''test''}'
      id: metadata
      isRequired: true
      type:
      - dict(str,str)
    - description: Quota in bytes.
      id: quota
      isRequired: true
      type:
      - int
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.storage.fileshare.aio.ShareClient
  type: method
  uid: azure.storage.fileshare.aio.ShareServiceClient.create_share
- class: azure.storage.fileshare.aio.ShareServiceClient
  example:
  - "Delete a share in the file share service.<!--[!code-python[Main](les\\file_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await file_service.delete_share(share_name=\"\
    fileshare1\")\n\n   ````\n"
  fullName: azure.storage.fileshare.aio.ShareServiceClient.delete_share
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: delete_share(share_name, delete_snapshots=False, **kwargs)
  namewithoutparameters: delete_share
  summary: 'Marks the specified share for deletion. The share is

    later deleted during garbage collection.'
  syntax:
    content: delete_share(share_name, delete_snapshots=False, **kwargs)
    parameters:
    - description: 'The share to delete. This can either be the name of the share,

        or an instance of ShareProperties.'
      id: share_name
      isRequired: true
      type:
      - str
      - azure.storage.fileshare.ShareProperties
    - description: Indicates if snapshots are to be deleted.
      id: delete_snapshots
      isRequired: true
      type:
      - bool
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.fileshare.aio.ShareServiceClient.delete_share
- class: azure.storage.fileshare.aio.ShareServiceClient
  example:
  - "Get file share service properties.<!--[!code-python[Main](les\\file_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   properties = await\
    \ file_service.get_service_properties()\n\n   ````\n"
  fullName: azure.storage.fileshare.aio.ShareServiceClient.get_service_properties
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: get_service_properties(**kwargs)
  namewithoutparameters: get_service_properties
  summary: 'Gets the properties of a storage account''s File Share service, including

    Azure Storage Analytics.'
  syntax:
    content: get_service_properties(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: 'A dictionary containing file service properties such as

        analytics logging, hour/minute metrics, cors rules, etc.'
      type:
      - Dict[str, Any]
  type: method
  uid: azure.storage.fileshare.aio.ShareServiceClient.get_service_properties
- class: azure.storage.fileshare.aio.ShareServiceClient
  example:
  - "Gets the share client.<!--[!code-python[Main](les\\file_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.storage.fileshare.aio\
    \ import ShareServiceClient\n   file_service = ShareServiceClient.from_connection_string(self.connection_string)\n\
    \n   # Get a share client to interact with a specific share\n   share = file_service.get_share_client(\"\
    fileshare2\")\n\n   ````\n"
  fullName: azure.storage.fileshare.aio.ShareServiceClient.get_share_client
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: get_share_client(share, snapshot=None)
  namewithoutparameters: get_share_client
  summary: 'Get a client to interact with the specified share.

    The share need not already exist.'
  syntax:
    content: get_share_client(share, snapshot=None)
    parameters:
    - description: 'The share. This can either be the name of the share,

        or an instance of ShareProperties.'
      id: share
      isRequired: true
      type:
      - str
      - azure.storage.fileshare.ShareProperties
    - defaultValue: None
      description: 'An optional share snapshot on which to operate. This can be the
        snapshot ID string

        or the response returned from <xref:azure.storage.fileshare.aio.create_snapshot>.'
      id: snapshot
      type:
      - str
    return:
      description: A ShareClient.
      type:
      - azure.storage.fileshare.aio.ShareClient
  type: method
  uid: azure.storage.fileshare.aio.ShareServiceClient.get_share_client
- class: azure.storage.fileshare.aio.ShareServiceClient
  example:
  - "List shares in the file share service.<!--[!code-python[Main](les\\file_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # List the shares\
    \ in the file service\n   my_shares = []\n   async for s in file_service.list_shares():\n\
    \       my_shares.append(s)\n\n   # Print the shares\n   for share in my_shares:\n\
    \       print(share)\n\n   ````\n"
  fullName: azure.storage.fileshare.aio.ShareServiceClient.list_shares
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: list_shares(name_starts_with=None, include_metadata=False, include_snapshots=False,
    **kwargs)
  namewithoutparameters: list_shares
  summary: 'Returns auto-paging iterable of dict-like ShareProperties under the specified
    account.

    The generator will lazily follow the continuation tokens returned by

    the service and stop when all shares have been returned.'
  syntax:
    content: list_shares(name_starts_with=None, include_metadata=False, include_snapshots=False,
      **kwargs)
    parameters:
    - description: 'Filters the results to return only shares whose names

        begin with the specified name_starts_with.'
      id: name_starts_with
      isRequired: true
      type:
      - str
    - description: Specifies that share metadata be returned in the response.
      id: include_metadata
      isRequired: true
      type:
      - bool
    - description: Specifies that share snapshot be returned in the response.
      id: include_snapshots
      isRequired: true
      type:
      - bool
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: An iterable (auto-paging) of ShareProperties.
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.storage.fileshare.ShareProperties]
  type: method
  uid: azure.storage.fileshare.aio.ShareServiceClient.list_shares
- class: azure.storage.fileshare.aio.ShareServiceClient
  example:
  - "Sets file share service properties.<!--[!code-python[Main](les\\file_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Create service\
    \ properties\n   from azure.storage.fileshare import Metrics, CorsRule, RetentionPolicy\n\
    \n   # Create metrics for requests statistics\n   hour_metrics = Metrics(enabled=True,\
    \ include_apis=True, retention_policy=RetentionPolicy(enabled=True, days=5))\n\
    \   minute_metrics = Metrics(enabled=True, include_apis=True,\n              \
    \              retention_policy=RetentionPolicy(enabled=True, days=5))\n\n   #\
    \ Create CORS rules\n   cors_rule1 = CorsRule(['www.xyz.com'], ['GET'])\n   allowed_origins\
    \ = ['www.xyz.com', \"www.ab.com\", \"www.bc.com\"]\n   allowed_methods = ['GET',\
    \ 'PUT']\n   max_age_in_seconds = 500\n   exposed_headers = [\"x-ms-meta-data*\"\
    , \"x-ms-meta-source*\", \"x-ms-meta-abc\", \"x-ms-meta-bcd\"]\n   allowed_headers\
    \ = [\"x-ms-meta-data*\", \"x-ms-meta-target*\", \"x-ms-meta-xyz\", \"x-ms-meta-foo\"\
    ]\n   cors_rule2 = CorsRule(\n       allowed_origins,\n       allowed_methods,\n\
    \       max_age_in_seconds=max_age_in_seconds,\n       exposed_headers=exposed_headers,\n\
    \       allowed_headers=allowed_headers)\n\n   cors = [cors_rule1, cors_rule2]\n\
    \n   async with file_service:\n       # Set the service properties\n       await\
    \ file_service.set_service_properties(hour_metrics, minute_metrics, cors)\n\n\
    \   ````\n"
  fullName: azure.storage.fileshare.aio.ShareServiceClient.set_service_properties
  langs:
  - python
  module: azure.storage.fileshare.aio
  name: set_service_properties(hour_metrics=None, minute_metrics=None, cors=None,
    **kwargs)
  namewithoutparameters: set_service_properties
  summary: 'Sets the properties of a storage account''s File Share service, including

    Azure Storage Analytics. If an element (e.g. hour_metrics) is left as None, the

    existing settings on the service for that functionality are preserved.'
  syntax:
    content: set_service_properties(hour_metrics=None, minute_metrics=None, cors=None,
      **kwargs)
    parameters:
    - description: 'The hour metrics settings provide a summary of request

        statistics grouped by API in hourly aggregates for files.'
      id: hour_metrics
      isRequired: true
      type:
      - azure.storage.fileshare.Metrics
    - description: 'The minute metrics settings provide request statistics

        for each minute for files.'
      id: minute_metrics
      isRequired: true
      type:
      - azure.storage.fileshare.Metrics
    - description: 'You can include up to five CorsRule elements in the

        list. If an empty list is specified, all CORS rules will be deleted,

        and CORS will be disabled for the service.'
      id: cors
      isRequired: true
      type:
      - list(azure.storage.fileshare.CorsRule)
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.fileshare.aio.ShareServiceClient.set_service_properties
references:
- fullName: azure.storage.fileshare.aio.ShareServiceClient.create_share
  isExternal: false
  name: create_share(share_name, **kwargs)
  parent: azure.storage.fileshare.aio.ShareServiceClient
  uid: azure.storage.fileshare.aio.ShareServiceClient.create_share
- fullName: azure.storage.fileshare.aio.ShareServiceClient.delete_share
  isExternal: false
  name: delete_share(share_name, delete_snapshots=False, **kwargs)
  parent: azure.storage.fileshare.aio.ShareServiceClient
  uid: azure.storage.fileshare.aio.ShareServiceClient.delete_share
- fullName: azure.storage.fileshare.aio.ShareServiceClient.get_service_properties
  isExternal: false
  name: get_service_properties(**kwargs)
  parent: azure.storage.fileshare.aio.ShareServiceClient
  uid: azure.storage.fileshare.aio.ShareServiceClient.get_service_properties
- fullName: azure.storage.fileshare.aio.ShareServiceClient.get_share_client
  isExternal: false
  name: get_share_client(share, snapshot=None)
  parent: azure.storage.fileshare.aio.ShareServiceClient
  uid: azure.storage.fileshare.aio.ShareServiceClient.get_share_client
- fullName: azure.storage.fileshare.aio.ShareServiceClient.list_shares
  isExternal: false
  name: list_shares(name_starts_with=None, include_metadata=False, include_snapshots=False,
    **kwargs)
  parent: azure.storage.fileshare.aio.ShareServiceClient
  uid: azure.storage.fileshare.aio.ShareServiceClient.list_shares
- fullName: azure.storage.fileshare.aio.ShareServiceClient.set_service_properties
  isExternal: false
  name: set_service_properties(hour_metrics=None, minute_metrics=None, cors=None,
    **kwargs)
  parent: azure.storage.fileshare.aio.ShareServiceClient
  uid: azure.storage.fileshare.aio.ShareServiceClient.set_service_properties
- fullName: dict(str,str)
  name: dict(str,str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str,str
    name: str,str
    uid: str,str
  - fullName: )
    name: )
  uid: dict(str,str)
- fullName: Dict[str, Any]
  name: Dict[str, Any]
  spec.python:
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: Dict[str, Any]
- fullName: azure.core.async_paging.AsyncItemPaged[azure.storage.fileshare.ShareProperties]
  name: AsyncItemPaged[ShareProperties]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.storage.fileshare.ShareProperties
    name: ShareProperties
    uid: azure.storage.fileshare.ShareProperties
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.storage.fileshare.ShareProperties]
- fullName: list(azure.storage.fileshare.CorsRule)
  name: list(CorsRule)
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: azure.storage.fileshare.CorsRule
    name: CorsRule
    uid: azure.storage.fileshare.CorsRule
  - fullName: )
    name: )
  uid: list(azure.storage.fileshare.CorsRule)
