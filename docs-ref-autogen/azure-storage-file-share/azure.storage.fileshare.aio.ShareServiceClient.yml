### YamlMime:PythonClass
uid: azure.storage.fileshare.aio.ShareServiceClient
name: ShareServiceClient
fullName: azure.storage.fileshare.aio.ShareServiceClient
module: azure.storage.fileshare.aio
inheritances:
- azure.storage.fileshare._shared.base_client_async.AsyncStorageAccountHostsMixin
- azure.storage.fileshare._share_service_client.ShareServiceClient
summary: 'A client to interact with the File Share Service at the account level.


  This client provides operations to retrieve and configure the account properties

  as well as list, create and delete shares within the account.

  For operations relating to a specific share, a client for that entity

  can also be retrieved using the <xref:azure.storage.fileshare.aio.ShareServiceClient.get_share_client>
  function.'
constructor:
  syntax: 'ShareServiceClient(account_url: str, credential: str | Dict[str, str] |
    AzureNamedKeyCredential | AzureSasCredential | AsyncTokenCredential | None = None,
    *, token_intent: Literal[''backup''] | None = None, **kwargs: Any)'
  parameters:
  - name: account_url
    description: 'The URL to the file share storage account. Any other entities included

      in the URL path (e.g. share or file) will be discarded. This URL can be optionally

      authenticated with a SAS token.'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be a SAS token string,

      an instance of a AzureSasCredential or AzureNamedKeyCredential from azure.core.credentials,

      an account shared access key, or an instance of a TokenCredentials class from
      azure.identity.

      If the resource URI already contains a SAS token, this will be ignored in favor
      of an explicit credential

      - except in the case of AzureSasCredential, where the conflicting SAS tokens
      will raise a ValueError.

      If using an instance of AzureNamedKeyCredential, "name" should be the storage
      account name, and "key"

      should be the storage account key.'
    defaultValue: None
  - name: token_intent
    description: "Required when using *TokenCredential* for authentication and ignored\
      \ for other forms of authentication.\nSpecifies the intent for all requests\
      \ when using *TokenCredential* authentication. Possible values are:\n\nbackup\
      \ - Specifies requests are intended for backup/admin type operations, meaning\
      \ that all file/directory\n   ACLs are bypassed and full permissions are granted.\
      \ User must also have required RBAC permission."
    types:
    - <xref:Literal>[<xref:'backup'>]
  - name: allow_trailing_dot
    description: If true, the trailing dot will not be trimmed from the target URI.
    types:
    - <xref:bool>
  - name: allow_source_trailing_dot
    description: If true, the trailing dot will not be trimmed from the source URI.
    types:
    - <xref:bool>
  - name: api_version
    description: 'The Storage API version to use for requests. Default value is the
      most recent service version that is

      compatible with the current SDK. Setting to an older version may result in reduced
      feature compatibility.


      New in version 12.1.0.'
    types:
    - <xref:str>
  - name: secondary_hostname
    description: The hostname of the secondary endpoint.
    types:
    - <xref:str>
  - name: max_range_size
    description: The maximum range size used for a file upload. Defaults to 4*1024*1024.
    types:
    - <xref:int>
examples:
- "Create the share service client with url and credential.<!--[!code-python[Main](les\\\
  file_samples_authentication_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
  classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"\
  D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\82\\\\azure-storage-file-share-12.13.0\\\
  \\samples\\\\file_samples_authentication_async.py\", \"xml:space\": \"preserve\"\
  , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.storage.fileshare.aio\
  \ import ShareServiceClient\n   share_service_client = ShareServiceClient(\n   \
  \    account_url=self.account_url,\n       credential=self.access_key\n   )\n\n\
  \   ````\n"
methods:
- uid: azure.storage.fileshare.aio.ShareServiceClient.create_share
  name: create_share
  summary: 'Creates a new share under the specified account. If the share

    with the same name already exists, the operation fails. Returns a client with

    which to interact with the newly created share.'
  signature: 'async create_share(share_name: str, **kwargs) -> ShareClient'
  parameters:
  - name: share_name
    description: The name of the share to create.
    isRequired: true
    types:
    - <xref:str>
  - name: metadata
    description: 'A dict with name_value pairs to associate with the

      share as metadata. Example:{''Category'':''test''}'
    types:
    - <xref:dict>(<xref:str,str>)
  - name: quota
    description: Quota in bytes.
    types:
    - <xref:int>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-file-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-file-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    types:
    - <xref:azure.storage.fileshare.aio.ShareClient>
  examples:
  - "Create a share in the file share service.<!--[!code-python[Main](les\\file_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\82\\\\azure-storage-file-share-12.13.0\\\\samples\\\\file_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   await file_service.create_share(share_name=\"fileshare1\")\n\n   ````\n"
- uid: azure.storage.fileshare.aio.ShareServiceClient.delete_share
  name: delete_share
  summary: 'Marks the specified share for deletion. The share is

    later deleted during garbage collection.'
  signature: 'async delete_share(share_name: ShareProperties | str, delete_snapshots:
    bool | None = False, **kwargs) -> None'
  parameters:
  - name: share_name
    description: 'The share to delete. This can either be the name of the share,

      or an instance of ShareProperties.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.fileshare.ShareProperties>
  - name: delete_snapshots
    description: Indicates if snapshots are to be deleted.
    isRequired: true
    types:
    - <xref:bool>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-file-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-file-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    types:
    - <xref:None>
  examples:
  - "Delete a share in the file share service.<!--[!code-python[Main](les\\file_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\82\\\\azure-storage-file-share-12.13.0\\\\samples\\\\file_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   await file_service.delete_share(share_name=\"fileshare1\")\n\n   ````\n"
- uid: azure.storage.fileshare.aio.ShareServiceClient.get_service_properties
  name: get_service_properties
  summary: 'Gets the properties of a storage account''s File Share service, including

    Azure Storage Analytics.'
  signature: 'async get_service_properties(**kwargs: Any) -> Dict[str, Any]'
  parameters:
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-file-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-file-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    description: 'A dictionary containing file service properties such as

      analytics logging, hour/minute metrics, cors rules, etc.'
    types:
    - <xref:Dict>[<xref:str>, <xref:Any>]
  examples:
  - "Get file share service properties.<!--[!code-python[Main](les\\file_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\82\\\\azure-storage-file-share-12.13.0\\\\samples\\\\file_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   properties = await file_service.get_service_properties()\n\n   ````\n"
- uid: azure.storage.fileshare.aio.ShareServiceClient.get_share_client
  name: get_share_client
  summary: 'Get a client to interact with the specified share.

    The share need not already exist.'
  signature: 'get_share_client(share: ShareProperties | str, snapshot: Dict[str, Any]
    | str | None = None) -> ShareClient'
  parameters:
  - name: share
    description: 'The share. This can either be the name of the share,

      or an instance of ShareProperties.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.fileshare.ShareProperties>
  - name: snapshot
    description: 'An optional share snapshot on which to operate. This can be the
      snapshot ID string

      or the response returned from <xref:azure.storage.fileshare.aio.create_snapshot>.'
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: A ShareClient.
    types:
    - <xref:azure.storage.fileshare.aio.ShareClient>
  examples:
  - "Gets the share client.<!--[!code-python[Main](les\\file_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\82\\\\azure-storage-file-share-12.13.0\\\\samples\\\\file_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.storage.fileshare.aio import ShareServiceClient\n   file_service\
    \ = ShareServiceClient.from_connection_string(self.connection_string)\n\n   #\
    \ Get a share client to interact with a specific share\n   share = file_service.get_share_client(\"\
    fileshare2\")\n\n   ````\n"
- uid: azure.storage.fileshare.aio.ShareServiceClient.list_shares
  name: list_shares
  summary: 'Returns auto-paging iterable of dict-like ShareProperties under the specified
    account.

    The generator will lazily follow the continuation tokens returned by

    the service and stop when all shares have been returned.'
  signature: 'list_shares(name_starts_with: str | None = None, include_metadata: bool
    | None = False, include_snapshots: bool | None = False, **kwargs: Any) -> AsyncItemPaged'
  parameters:
  - name: name_starts_with
    description: 'Filters the results to return only shares whose names

      begin with the specified name_starts_with.'
    isRequired: true
    types:
    - <xref:str>
  - name: include_metadata
    description: Specifies that share metadata be returned in the response.
    isRequired: true
    types:
    - <xref:bool>
  - name: include_snapshots
    description: Specifies that share snapshot be returned in the response.
    isRequired: true
    types:
    - <xref:bool>
  - name: include_deleted
    description: 'Specifies that deleted shares be returned in the response.

      This is only for share soft delete enabled account.'
    types:
    - <xref:bool>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-file-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-file-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    description: An iterable (auto-paging) of ShareProperties.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.storage.fileshare.ShareProperties>]
  examples:
  - "List shares in the file share service.<!--[!code-python[Main](les\\file_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\82\\\\azure-storage-file-share-12.13.0\\\\samples\\\\file_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # List the shares in the file service\n   my_shares = []\n   async for s\
    \ in file_service.list_shares():\n       my_shares.append(s)\n\n   # Print the\
    \ shares\n   for share in my_shares:\n       print(share)\n\n   ````\n"
- uid: azure.storage.fileshare.aio.ShareServiceClient.set_service_properties
  name: set_service_properties
  summary: 'Sets the properties of a storage account''s File Share service, including

    Azure Storage Analytics. If an element (e.g. hour_metrics) is left as None, the

    existing settings on the service for that functionality are preserved.'
  signature: 'async set_service_properties(hour_metrics: Metrics | None = None, minute_metrics:
    Metrics | None = None, cors: List[CorsRule] | None = None, protocol: ShareProtocolSettings
    | None = None, **kwargs) -> None'
  parameters:
  - name: hour_metrics
    description: 'The hour metrics settings provide a summary of request

      statistics grouped by API in hourly aggregates for files.'
    isRequired: true
    types:
    - <xref:azure.storage.fileshare.Metrics>
  - name: minute_metrics
    description: 'The minute metrics settings provide request statistics

      for each minute for files.'
    isRequired: true
    types:
    - <xref:azure.storage.fileshare.Metrics>
  - name: cors
    description: 'You can include up to five CorsRule elements in the

      list. If an empty list is specified, all CORS rules will be deleted,

      and CORS will be disabled for the service.'
    isRequired: true
    types:
    - <xref:list>(<xref:azure.storage.fileshare.CorsRule>)
  - name: protocol_settings
    description: Sets protocol settings
    isRequired: true
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-file-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-file-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    types:
    - <xref:None>
  examples:
  - "Sets file share service properties.<!--[!code-python[Main](les\\file_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\82\\\\azure-storage-file-share-12.13.0\\\\samples\\\\file_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # Create service properties\n   from azure.storage.fileshare import Metrics,\
    \ CorsRule, RetentionPolicy\n\n   # Create metrics for requests statistics\n \
    \  hour_metrics = Metrics(enabled=True, include_apis=True, retention_policy=RetentionPolicy(enabled=True,\
    \ days=5))\n   minute_metrics = Metrics(enabled=True, include_apis=True,\n   \
    \                         retention_policy=RetentionPolicy(enabled=True, days=5))\n\
    \n   # Create CORS rules\n   cors_rule1 = CorsRule(['www.xyz.com'], ['GET'])\n\
    \   allowed_origins = ['www.xyz.com', \"www.ab.com\", \"www.bc.com\"]\n   allowed_methods\
    \ = ['GET', 'PUT']\n   max_age_in_seconds = 500\n   exposed_headers = [\"x-ms-meta-data*\"\
    , \"x-ms-meta-source*\", \"x-ms-meta-abc\", \"x-ms-meta-bcd\"]\n   allowed_headers\
    \ = [\"x-ms-meta-data*\", \"x-ms-meta-target*\", \"x-ms-meta-xyz\", \"x-ms-meta-foo\"\
    ]\n   cors_rule2 = CorsRule(\n       allowed_origins,\n       allowed_methods,\n\
    \       max_age_in_seconds=max_age_in_seconds,\n       exposed_headers=exposed_headers,\n\
    \       allowed_headers=allowed_headers)\n\n   cors = [cors_rule1, cors_rule2]\n\
    \n   async with file_service:\n       # Set the service properties\n       await\
    \ file_service.set_service_properties(hour_metrics, minute_metrics, cors)\n\n\
    \   ````\n"
- uid: azure.storage.fileshare.aio.ShareServiceClient.undelete_share
  name: undelete_share
  summary: 'Restores soft-deleted share.


    Operation will only be successful if used within the specified number of days

    set in the delete retention policy.


    New in version 12.2.0: This operation was introduced in API version ''2019-12-12''.'
  signature: 'async undelete_share(deleted_share_name: str, deleted_share_version:
    str, **kwargs: Any) -> ShareClient'
  parameters:
  - name: deleted_share_name
    description: Specifies the name of the deleted share to restore.
    isRequired: true
    types:
    - <xref:str>
  - name: deleted_share_version
    description: Specifies the version of the deleted share to restore.
    isRequired: true
    types:
    - <xref:str>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-file-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-file-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-file-share#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    types:
    - <xref:azure.storage.fileshare.aio.ShareClient>
