### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.fileshare.ShareClient.create_directory
  - azure.storage.fileshare.ShareClient.create_permission_for_share
  - azure.storage.fileshare.ShareClient.create_share
  - azure.storage.fileshare.ShareClient.create_snapshot
  - azure.storage.fileshare.ShareClient.delete_directory
  - azure.storage.fileshare.ShareClient.delete_share
  - azure.storage.fileshare.ShareClient.from_connection_string
  - azure.storage.fileshare.ShareClient.from_share_url
  - azure.storage.fileshare.ShareClient.get_directory_client
  - azure.storage.fileshare.ShareClient.get_file_client
  - azure.storage.fileshare.ShareClient.get_permission_for_share
  - azure.storage.fileshare.ShareClient.get_share_access_policy
  - azure.storage.fileshare.ShareClient.get_share_properties
  - azure.storage.fileshare.ShareClient.get_share_stats
  - azure.storage.fileshare.ShareClient.list_directories_and_files
  - azure.storage.fileshare.ShareClient.set_share_access_policy
  - azure.storage.fileshare.ShareClient.set_share_metadata
  - azure.storage.fileshare.ShareClient.set_share_quota
  class: azure.storage.fileshare.ShareClient
  fullName: azure.storage.fileshare.ShareClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.fileshare._shared.base_client.StorageAccountHostsMixin
  langs:
  - python
  module: azure.storage.fileshare
  name: ShareClient
  summary: 'A client to interact with a specific share, although that share may not
    yet exist.


    For operations relating to a specific directory or file in this share, the clients
    for

    those entities can also be retrieved using the <xref:azure.storage.fileshare.ShareClient.get_directory_client>
    and <xref:azure.storage.fileshare.ShareClient.get_file_client> functions.'
  syntax:
    content: ShareClient(account_url, share_name, snapshot=None, credential=None,
      **kwargs)
    parameters:
    - description: 'The URI to the storage account. In order to create a client given
        the full URI to the share,

        use the <xref:azure.storage.fileshare.ShareClient.from_share_url> classmethod.'
      id: account_url
      type:
      - str
    - description: The name of the share with which to interact.
      id: share_name
      type:
      - str
    - description: 'An optional share snapshot on which to operate. This can be the
        snapshot ID string

        or the response returned from <xref:azure.storage.fileshare.ShareClient.create_snapshot>.'
      id: snapshot
      type:
      - str
    - description: 'The credential with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string or
        an account

        shared access key.'
      id: credential
    - description: 'The Storage API version to use for requests. Default value is
        ''2019-07-07''.

        Setting to an older version may result in reduced feature compatibility.


        New in version 12.1.0.'
      id: api_version
      type:
      - str
    - description: The hostname of the secondary endpoint.
      id: secondary_hostname
      type:
      - str
    - description: The maximum range size used for a file upload. Defaults to 4*1024*1024.
      id: max_range_size
      type:
      - int
  type: class
  uid: azure.storage.fileshare.ShareClient
- class: azure.storage.fileshare.ShareClient
  fullName: azure.storage.fileshare.ShareClient.create_directory
  langs:
  - python
  module: azure.storage.fileshare
  name: create_directory(directory_name, **kwargs)
  namewithoutparameters: create_directory
  summary: 'Creates a directory in the share and returns a client to interact

    with the directory.'
  syntax:
    content: create_directory(directory_name, **kwargs)
    parameters:
    - description: The name of the directory.
      id: directory_name
      isRequired: true
      type:
      - str
    - description: Name-value pairs associated with the directory as metadata.
      id: metadata
      isRequired: true
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: ShareDirectoryClient
      type:
      - azure.storage.fileshare.ShareDirectoryClient
  type: method
  uid: azure.storage.fileshare.ShareClient.create_directory
- class: azure.storage.fileshare.ShareClient
  fullName: azure.storage.fileshare.ShareClient.create_permission_for_share
  langs:
  - python
  module: azure.storage.fileshare
  name: create_permission_for_share(file_permission, **kwargs)
  namewithoutparameters: create_permission_for_share
  summary: 'Create a permission (a security descriptor) at the share level.


    This ''permission'' can be used for the files/directories in the share.

    If a ''permission'' already exists, it shall return the key of it, else

    creates a new permission at the share level and return its key.'
  syntax:
    content: create_permission_for_share(file_permission, **kwargs)
    parameters:
    - description: File permission, a Portable SDDL
      id: file_permission
      isRequired: true
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: A file permission key
      type:
      - str
  type: method
  uid: azure.storage.fileshare.ShareClient.create_permission_for_share
- class: azure.storage.fileshare.ShareClient
  example:
  - "Creates a file share.<!--[!code-python[Main](les\\file_samples_share.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\105\\\\\
    azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_share.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   share.create_share()\n\n   ````\n"
  fullName: azure.storage.fileshare.ShareClient.create_share
  langs:
  - python
  module: azure.storage.fileshare
  name: create_share(**kwargs)
  namewithoutparameters: create_share
  summary: 'Creates a new Share under the account. If a share with the

    same name already exists, the operation fails.'
  syntax:
    content: create_share(**kwargs)
    parameters:
    - description: Name-value pairs associated with the share as metadata.
      id: metadata
      isRequired: true
      type:
      - dict(str,str)
    - description: The quota to be allotted.
      id: quota
      isRequired: true
      type:
      - int
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: Share-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.fileshare.ShareClient.create_share
- class: azure.storage.fileshare.ShareClient
  example:
  - "Creates a snapshot of the file share.<!--[!code-python[Main](les\\file_samples_share.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_share.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   share.create_snapshot()\n\
    \n   ````\n"
  fullName: azure.storage.fileshare.ShareClient.create_snapshot
  langs:
  - python
  module: azure.storage.fileshare
  name: create_snapshot(**kwargs)
  namewithoutparameters: create_snapshot
  summary: 'Creates a snapshot of the share.


    A snapshot is a read-only version of a share that''s taken at a point in time.

    It can be read, copied, or deleted, but not modified. Snapshots provide a way

    to back up a share as it appears at a moment in time.


    A snapshot of a share has the same name as the base share from which the snapshot

    is taken, with a DateTime value appended to indicate the time at which the

    snapshot was taken.'
  syntax:
    content: create_snapshot(**kwargs)
    parameters:
    - description: Name-value pairs associated with the share as metadata.
      id: metadata
      isRequired: true
      type:
      - dict(str,str)
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: Share-updated property dict (Snapshot ID, Etag, and last modified).
      type:
      - dict[str, Any]
  type: method
  uid: azure.storage.fileshare.ShareClient.create_snapshot
- class: azure.storage.fileshare.ShareClient
  fullName: azure.storage.fileshare.ShareClient.delete_directory
  langs:
  - python
  module: azure.storage.fileshare
  name: delete_directory(directory_name, **kwargs)
  namewithoutparameters: delete_directory
  summary: 'Marks the directory for deletion. The directory is

    later deleted during garbage collection.'
  syntax:
    content: delete_directory(directory_name, **kwargs)
    parameters:
    - description: The name of the directory.
      id: directory_name
      isRequired: true
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.fileshare.ShareClient.delete_directory
- class: azure.storage.fileshare.ShareClient
  example:
  - "Deletes the share and any snapshots.<!--[!code-python[Main](les\\file_samples_share.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_share.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   share.delete_share(delete_snapshots=True)\n\
    \n   ````\n"
  fullName: azure.storage.fileshare.ShareClient.delete_share
  langs:
  - python
  module: azure.storage.fileshare
  name: delete_share(delete_snapshots=False, **kwargs)
  namewithoutparameters: delete_share
  summary: 'Marks the specified share for deletion. The share is

    later deleted during garbage collection.'
  syntax:
    content: delete_share(delete_snapshots=False, **kwargs)
    parameters:
    - description: Indicates if snapshots are to be deleted.
      id: delete_snapshots
      isRequired: true
      type:
      - bool
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.fileshare.ShareClient.delete_share
- class: azure.storage.fileshare.ShareClient
  example:
  - "Gets the share client from connection string.<!--[!code-python[Main](les\\file_samples_share.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_share.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.storage.fileshare\
    \ import ShareClient\n   share = ShareClient.from_connection_string(self.connection_string,\
    \ \"sharesamples2\")\n\n   ````\n"
  fullName: azure.storage.fileshare.ShareClient.from_connection_string
  langs:
  - python
  module: azure.storage.fileshare
  name: from_connection_string(conn_str, share_name, snapshot=None, credential=None,
    **kwargs)
  namewithoutparameters: from_connection_string
  summary: Create ShareClient from a Connection String.
  syntax:
    content: from_connection_string(conn_str, share_name, snapshot=None, credential=None,
      **kwargs)
    parameters:
    - description: A connection string to an Azure Storage account.
      id: conn_str
      isRequired: true
      type:
      - str
    - description: The name of the share.
      id: share_name
      isRequired: true
      type:
      - str
    - description: 'The optional share snapshot on which to operate. This can be the
        snapshot ID string

        or the response returned from <xref:azure.storage.fileshare.ShareClient.create_snapshot>.'
      id: snapshot
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: 'The credential with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string or
        an account

        shared access key.'
      id: credential
    - defaultValue: None
      id: credential
    return:
      description: A share client.
      type:
      - azure.storage.fileshare.ShareClient
  type: method
  uid: azure.storage.fileshare.ShareClient.from_connection_string
- class: azure.storage.fileshare.ShareClient
  fullName: azure.storage.fileshare.ShareClient.from_share_url
  langs:
  - python
  module: azure.storage.fileshare
  name: from_share_url(share_url, snapshot=None, credential=None, **kwargs)
  namewithoutparameters: from_share_url
  syntax:
    content: from_share_url(share_url, snapshot=None, credential=None, **kwargs)
    parameters:
    - description: The full URI to the share.
      id: share_url
      isRequired: true
      type:
      - str
    - description: 'An optional share snapshot on which to operate. This can be the
        snapshot ID string

        or the response returned from <xref:azure.storage.fileshare.ShareClient.create_snapshot>.'
      id: snapshot
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: 'The credential with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string or
        an account

        shared access key.'
      id: credential
    - defaultValue: None
      id: credential
    return:
      description: A share client.
      type:
      - azure.storage.fileshare.ShareClient
  type: method
  uid: azure.storage.fileshare.ShareClient.from_share_url
- class: azure.storage.fileshare.ShareClient
  fullName: azure.storage.fileshare.ShareClient.get_directory_client
  langs:
  - python
  module: azure.storage.fileshare
  name: get_directory_client(directory_path=None)
  namewithoutparameters: get_directory_client
  summary: 'Get a client to interact with the specified directory.

    The directory need not already exist.'
  syntax:
    content: get_directory_client(directory_path=None)
    parameters:
    - defaultValue: None
      description: Path to the specified directory.
      id: directory_path
      type:
      - str
    return:
      description: A Directory Client.
      type:
      - azure.storage.fileshare.ShareDirectoryClient
  type: method
  uid: azure.storage.fileshare.ShareClient.get_directory_client
- class: azure.storage.fileshare.ShareClient
  fullName: azure.storage.fileshare.ShareClient.get_file_client
  langs:
  - python
  module: azure.storage.fileshare
  name: get_file_client(file_path)
  namewithoutparameters: get_file_client
  summary: 'Get a client to interact with the specified file.

    The file need not already exist.'
  syntax:
    content: get_file_client(file_path)
    parameters:
    - description: Path to the specified file.
      id: file_path
      isRequired: true
      type:
      - str
    return:
      description: A File Client.
      type:
      - azure.storage.fileshare.ShareFileClient
  type: method
  uid: azure.storage.fileshare.ShareClient.get_file_client
- class: azure.storage.fileshare.ShareClient
  fullName: azure.storage.fileshare.ShareClient.get_permission_for_share
  langs:
  - python
  module: azure.storage.fileshare
  name: get_permission_for_share(permission_key, **kwargs)
  namewithoutparameters: get_permission_for_share
  summary: 'Get a permission (a security descriptor) for a given key.


    This ''permission'' can be used for the files/directories in the share.'
  syntax:
    content: get_permission_for_share(permission_key, **kwargs)
    parameters:
    - description: Key of the file permission to retrieve
      id: permission_key
      isRequired: true
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: A file permission (a portable SDDL)
      type:
      - str
  type: method
  uid: azure.storage.fileshare.ShareClient.get_permission_for_share
- class: azure.storage.fileshare.ShareClient
  fullName: azure.storage.fileshare.ShareClient.get_share_access_policy
  langs:
  - python
  module: azure.storage.fileshare
  name: get_share_access_policy(**kwargs)
  namewithoutparameters: get_share_access_policy
  summary: 'Gets the permissions for the share. The permissions

    indicate whether files in a share may be accessed publicly.'
  syntax:
    content: get_share_access_policy(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: Access policy information in a dict.
      type:
      - dict[str, Any]
  type: method
  uid: azure.storage.fileshare.ShareClient.get_share_access_policy
- class: azure.storage.fileshare.ShareClient
  example:
  - "Gets the share properties.<!--[!code-python[Main](les\\file_samples_hello_world.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_hello_world.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   properties = share.get_share_properties()\n\
    \n   ````\n"
  fullName: azure.storage.fileshare.ShareClient.get_share_properties
  langs:
  - python
  module: azure.storage.fileshare
  name: get_share_properties(**kwargs)
  namewithoutparameters: get_share_properties
  summary: 'Returns all user-defined metadata and system properties for the

    specified share. The data returned does not include the shares''s

    list of files or directories.'
  syntax:
    content: get_share_properties(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: The share properties.
      type:
      - azure.storage.fileshare.ShareProperties
  type: method
  uid: azure.storage.fileshare.ShareClient.get_share_properties
- class: azure.storage.fileshare.ShareClient
  fullName: azure.storage.fileshare.ShareClient.get_share_stats
  langs:
  - python
  module: azure.storage.fileshare
  name: get_share_stats(**kwargs)
  namewithoutparameters: get_share_stats
  summary: 'Gets the approximate size of the data stored on the share in bytes.


    Note that this value may not include all recently created

    or recently re-sized files.'
  syntax:
    content: get_share_stats(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: The approximate size of the data (in bytes) stored on the share.
      type:
      - int
  type: method
  uid: azure.storage.fileshare.ShareClient.get_share_stats
- class: azure.storage.fileshare.ShareClient
  example:
  - "List directories and files in the share.<!--[!code-python[Main](les\\file_samples_share.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\105\\\\azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_share.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Create a directory\
    \ in the share\n   dir_client = share.create_directory(\"mydir\")\n\n   # Upload\
    \ a file to the directory\n   with open(SOURCE_FILE, \"rb\") as source_file:\n\
    \       dir_client.upload_file(file_name=\"sample\", data=source_file)\n\n   #\
    \ List files in the directory\n   my_files = list(share.list_directories_and_files(directory_name=\"\
    mydir\"))\n   print(my_files)\n\n   ````\n"
  fullName: azure.storage.fileshare.ShareClient.list_directories_and_files
  langs:
  - python
  module: azure.storage.fileshare
  name: list_directories_and_files(directory_name=None, name_starts_with=None, marker=None,
    **kwargs)
  namewithoutparameters: list_directories_and_files
  summary: Lists the directories and files under the share.
  syntax:
    content: list_directories_and_files(directory_name=None, name_starts_with=None,
      marker=None, **kwargs)
    parameters:
    - description: Name of a directory.
      id: directory_name
      isRequired: true
      type:
      - str
    - description: 'Filters the results to return only directories whose names

        begin with the specified prefix.'
      id: name_starts_with
      isRequired: true
      type:
      - str
    - description: 'An opaque continuation token. This value can be retrieved from
        the

        next_marker field of a previous generator object. If specified,

        this generator will begin returning results from this point.'
      id: marker
      isRequired: true
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: An auto-paging iterable of dict-like DirectoryProperties and FileProperties
  type: method
  uid: azure.storage.fileshare.ShareClient.list_directories_and_files
- class: azure.storage.fileshare.ShareClient
  fullName: azure.storage.fileshare.ShareClient.set_share_access_policy
  langs:
  - python
  module: azure.storage.fileshare
  name: set_share_access_policy(signed_identifiers, **kwargs)
  namewithoutparameters: set_share_access_policy
  summary: 'Sets the permissions for the share, or stored access

    policies that may be used with Shared Access Signatures. The permissions

    indicate whether files in a share may be accessed publicly.'
  syntax:
    content: set_share_access_policy(signed_identifiers, **kwargs)
    parameters:
    - description: 'A dictionary of access policies to associate with the share. The

        dictionary may contain up to 5 elements. An empty dictionary

        will clear the access policies set on the service.'
      id: signed_identifiers
      isRequired: true
      type:
      - dict(str, azure.storage.fileshare.AccessPolicy)
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: Share-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.fileshare.ShareClient.set_share_access_policy
- class: azure.storage.fileshare.ShareClient
  example:
  - "Sets the share metadata.<!--[!code-python[Main](les\\file_samples_share.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\105\\\\\
    azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_share.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   data = {'category': 'test'}\n\
    \   share.set_share_metadata(metadata=data)\n\n   ````\n"
  fullName: azure.storage.fileshare.ShareClient.set_share_metadata
  langs:
  - python
  module: azure.storage.fileshare
  name: set_share_metadata(metadata, **kwargs)
  namewithoutparameters: set_share_metadata
  summary: 'Sets the metadata for the share.


    Each call to this operation replaces all existing metadata

    attached to the share. To remove all metadata from the share,

    call this operation with no metadata dict.'
  syntax:
    content: set_share_metadata(metadata, **kwargs)
    parameters:
    - description: Name-value pairs associated with the share as metadata.
      id: metadata
      isRequired: true
      type:
      - dict(str, str)
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: Share-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.fileshare.ShareClient.set_share_metadata
- class: azure.storage.fileshare.ShareClient
  example:
  - "Sets the share quota.<!--[!code-python[Main](les\\file_samples_share.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\105\\\\\
    azure-storage-file-share-12.1.2\\\\samples\\\\file_samples_share.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   # Set the quota for the share\
    \ to 1GB\n   share.set_share_quota(quota=1)\n\n   ````\n"
  fullName: azure.storage.fileshare.ShareClient.set_share_quota
  langs:
  - python
  module: azure.storage.fileshare
  name: set_share_quota(quota, **kwargs)
  namewithoutparameters: set_share_quota
  summary: Sets the quota for the share.
  syntax:
    content: set_share_quota(quota, **kwargs)
    parameters:
    - description: 'Specifies the maximum size of the share, in gigabytes.

        Must be greater than 0, and less than or equal to 5TB.'
      id: quota
      isRequired: true
      type:
      - int
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: Share-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.fileshare.ShareClient.set_share_quota
references:
- fullName: azure.storage.fileshare.ShareClient.create_directory
  isExternal: false
  name: create_directory(directory_name, **kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.create_directory
- fullName: azure.storage.fileshare.ShareClient.create_permission_for_share
  isExternal: false
  name: create_permission_for_share(file_permission, **kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.create_permission_for_share
- fullName: azure.storage.fileshare.ShareClient.create_share
  isExternal: false
  name: create_share(**kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.create_share
- fullName: azure.storage.fileshare.ShareClient.create_snapshot
  isExternal: false
  name: create_snapshot(**kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.create_snapshot
- fullName: azure.storage.fileshare.ShareClient.delete_directory
  isExternal: false
  name: delete_directory(directory_name, **kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.delete_directory
- fullName: azure.storage.fileshare.ShareClient.delete_share
  isExternal: false
  name: delete_share(delete_snapshots=False, **kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.delete_share
- fullName: azure.storage.fileshare.ShareClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, share_name, snapshot=None, credential=None,
    **kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.from_connection_string
- fullName: azure.storage.fileshare.ShareClient.from_share_url
  isExternal: false
  name: from_share_url(share_url, snapshot=None, credential=None, **kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.from_share_url
- fullName: azure.storage.fileshare.ShareClient.get_directory_client
  isExternal: false
  name: get_directory_client(directory_path=None)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.get_directory_client
- fullName: azure.storage.fileshare.ShareClient.get_file_client
  isExternal: false
  name: get_file_client(file_path)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.get_file_client
- fullName: azure.storage.fileshare.ShareClient.get_permission_for_share
  isExternal: false
  name: get_permission_for_share(permission_key, **kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.get_permission_for_share
- fullName: azure.storage.fileshare.ShareClient.get_share_access_policy
  isExternal: false
  name: get_share_access_policy(**kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.get_share_access_policy
- fullName: azure.storage.fileshare.ShareClient.get_share_properties
  isExternal: false
  name: get_share_properties(**kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.get_share_properties
- fullName: azure.storage.fileshare.ShareClient.get_share_stats
  isExternal: false
  name: get_share_stats(**kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.get_share_stats
- fullName: azure.storage.fileshare.ShareClient.list_directories_and_files
  isExternal: false
  name: list_directories_and_files(directory_name=None, name_starts_with=None, marker=None,
    **kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.list_directories_and_files
- fullName: azure.storage.fileshare.ShareClient.set_share_access_policy
  isExternal: false
  name: set_share_access_policy(signed_identifiers, **kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.set_share_access_policy
- fullName: azure.storage.fileshare.ShareClient.set_share_metadata
  isExternal: false
  name: set_share_metadata(metadata, **kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.set_share_metadata
- fullName: azure.storage.fileshare.ShareClient.set_share_quota
  isExternal: false
  name: set_share_quota(quota, **kwargs)
  parent: azure.storage.fileshare.ShareClient
  uid: azure.storage.fileshare.ShareClient.set_share_quota
- fullName: dict(str,str)
  name: dict(str,str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str,str
    name: str,str
    uid: str,str
  - fullName: )
    name: )
  uid: dict(str,str)
- fullName: dict(str, Any)
  name: dict(str, Any)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: )
    name: )
  uid: dict(str, Any)
- fullName: dict[str, Any]
  name: dict[str, Any]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: dict[str, Any]
- fullName: dict(str, azure.storage.fileshare.AccessPolicy)
  name: dict(str, AccessPolicy)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: azure.storage.fileshare.AccessPolicy
    name: AccessPolicy
    uid: azure.storage.fileshare.AccessPolicy
  - fullName: )
    name: )
  uid: dict(str, azure.storage.fileshare.AccessPolicy)
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
