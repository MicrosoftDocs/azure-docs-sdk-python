### YamlMime:PythonClass
uid: azure.identity.aio.OnBehalfOfCredential
name: OnBehalfOfCredential
fullName: azure.identity.aio.OnBehalfOfCredential
module: azure.identity.aio
inheritances:
- azure.identity.aio._internal.AsyncContextManager
- azure.identity.aio._internal.get_token_mixin.GetTokenMixin
summary: 'Authenticates a service principal via the on-behalf-of flow.


  This flow is typically used by middle-tier services that authorize requests to other
  services with a delegated

  user identity. Because this is not an interactive authentication flow, an application
  using it must have admin

  consent for any delegated permissions before requesting tokens for them. See [Microsoft
  Entra ID documentation](https://learn.microsoft.com/entra/identity-platform/v2-oauth2-on-behalf-of-flow)
  for a more detailed

  description of the on-behalf-of flow.'
constructor:
  syntax: 'OnBehalfOfCredential(tenant_id: str, client_id: str, *, client_certificate:
    bytes | None = None, client_secret: str | None = None, user_assertion: str, **kwargs:
    Any)'
  parameters:
  - name: tenant_id
    description: ID of the service principal's tenant. Also called its "directory"
      ID.
    isRequired: true
    types:
    - <xref:str>
  - name: client_id
    description: The service principal's client ID
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: client_secret
    description: 'Optional. A client secret to authenticate the service principal.

      Either **client_secret** or **client_certificate** must be provided.'
    types:
    - <xref:str>
  - name: client_certificate
    description: 'Optional. The bytes of a certificate in PEM or PKCS12 format including

      the private key to authenticate the service principal. Either **client_secret**
      or **client_certificate** must

      be provided.'
    types:
    - <xref:bytes>
  - name: user_assertion
    description: 'Required. The access token the credential will use as the user assertion
      when

      requesting on-behalf-of tokens'
    types:
    - <xref:str>
  - name: authority
    description: 'Authority of a Microsoft Entra endpoint, for example "login.microsoftonline.com",

      the authority for Azure Public Cloud (which is the default). <xref:azure.identity.AzureAuthorityHosts>

      defines authorities for other clouds.'
    types:
    - <xref:str>
  - name: password
    description: 'A certificate password. Used only when **client_certificate** is
      provided. If this value

      is a unicode string, it will be encoded as UTF-8. If the certificate requires
      a different encoding, pass

      appropriately encoded bytes instead.'
    types:
    - <xref:str>
    - <xref:bytes>
  - name: additionally_allowed_tenants
    description: 'Specifies tenants in addition to the specified "tenant_id"

      for which the credential may acquire tokens. Add the wildcard value "*" to allow
      the credential to

      acquire tokens for any tenant the application can access.'
    types:
    - <xref:typing.List>[<xref:str>]
examples:
- "Create an OnBehalfOfCredential.<!--[!code-python[Main](les\\credential_creation_code_snippets.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
  \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\47\\\\azure-identity-1.16.0\\\
  \\samples\\\\credential_creation_code_snippets.py\", \"xml:space\": \"preserve\"\
  , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.identity.aio import\
  \ OnBehalfOfCredential\n\n   credential = OnBehalfOfCredential(\n       tenant_id=\"\
  <tenant_id>\",\n       client_id=\"<client_id>\",\n       client_secret=\"<client_secret>\"\
  ,\n       user_assertion=\"<access_token>\",\n   )\n\n   ````\n"
methods:
- uid: azure.identity.aio.OnBehalfOfCredential.close
  name: close
  signature: async close() -> None
- uid: azure.identity.aio.OnBehalfOfCredential.get_token
  name: get_token
  summary: 'Request an access token for *scopes*.


    This method is called automatically by Azure SDK clients.'
  signature: 'async get_token(*scopes: str, claims: str | None = None, tenant_id:
    str | None = None, enable_cae: bool = False, **kwargs: Any) -> AccessToken'
  parameters:
  - name: scopes
    description: 'desired scopes for the access token. This method requires at least
      one scope.

      For more information about scopes, see

      [https://learn.microsoft.com/entra/identity-platform/scopes-oidc](https://learn.microsoft.com/entra/identity-platform/scopes-oidc).'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: claims
    description: 'additional claims required in the token, such as those returned
      in a resource provider''s

      claims challenge following an authorization failure.'
    types:
    - <xref:str>
  - name: tenant_id
    description: optional tenant to include in the token request.
    types:
    - <xref:str>
  - name: enable_cae
    description: 'indicates whether to enable Continuous Access Evaluation (CAE) for
      the requested

      token. Defaults to False.'
    types:
    - <xref:bool>
  return:
    description: An access token with the desired scopes.
    types:
    - <xref:azure.core.credentials.AccessToken>
  exceptions:
  - type: azure.identity.CredentialUnavailableError
    description: 'the credential is unable to attempt authentication because it lacks

      required data, state, or platform support'
  - type: azure.core.exceptions.ClientAuthenticationError
    description: authentication failed. The error's `message` attribute gives a reason.
