### YamlMime:PythonClass
uid: azure.identity.WorkloadIdentityCredential
name: WorkloadIdentityCredential
fullName: azure.identity.WorkloadIdentityCredential
module: azure.identity
inheritances:
- azure.identity._credentials.client_assertion.ClientAssertionCredential
- azure.identity._credentials.workload_identity.TokenFileMixin
summary: 'Authenticates using Microsoft Entra Workload ID.


  Workload identity authentication is a feature in Azure that allows applications
  running on virtual machines (VMs)

  to access other Azure resources without the need for a service principal or managed
  identity. With workload

  identity authentication, applications authenticate themselves using their own identity,
  rather than using a shared

  service principal or managed identity. Under the hood, workload identity authentication
  uses the concept of Service

  Account Credentials (SACs), which are automatically created by Azure and stored
  securely in the VM. By using

  workload identity authentication, you can avoid the need to manage and rotate service
  principals or managed

  identities for each application on each VM. Additionally, because SACs are created
  automatically and managed by

  Azure, you don''t need to worry about storing and securing sensitive credentials
  themselves.


  The WorkloadIdentityCredential supports Azure workload identity authentication on
  Azure Kubernetes and acquires

  a token using the service account credentials available in the Azure Kubernetes
  environment. Refer

  to [this workload identity overview](https://learn.microsoft.com/azure/aks/workload-identity-overview)

  for more information.'
constructor:
  syntax: 'WorkloadIdentityCredential(*, tenant_id: str | None = None, client_id:
    str | None = None, token_file_path: str | None = None, **kwargs: Any)'
  keywordOnlyParameters:
  - name: tenant_id
    description: ID of the application's Microsoft Entra tenant. Also called its "directory"
      ID.
    types:
    - <xref:str>
  - name: client_id
    description: The client ID of a Microsoft Entra app registration.
    types:
    - <xref:str>
  - name: token_file_path
    description: 'The path to a file containing a Kubernetes service account token
      that authenticates

      the identity.'
    types:
    - <xref:str>
examples:
- "Create a WorkloadIdentityCredential.<!--[!code-python[Main](les\\credential_creation_code_snippets.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
  \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\47\\\\azure-identity-1.16.0\\\
  \\samples\\\\credential_creation_code_snippets.py\", \"xml:space\": \"preserve\"\
  , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.identity import WorkloadIdentityCredential\n\
  \n   credential = WorkloadIdentityCredential(\n       tenant_id=\"<tenant_id>\"\
  ,\n       client_id=\"<client_id>\",\n       token_file_path=\"<token_file_path>\"\
  ,\n   )\n\n   # Parameters can be omitted if the following environment variables\
  \ are set:\n   #   - AZURE_TENANT_ID\n   #   - AZURE_CLIENT_ID\n   #   - AZURE_FEDERATED_TOKEN_FILE\n\
  \   credential = WorkloadIdentityCredential()\n\n   ````\n"
methods:
- uid: azure.identity.WorkloadIdentityCredential.close
  name: close
  signature: close() -> None
- uid: azure.identity.WorkloadIdentityCredential.get_token
  name: get_token
  summary: 'Request an access token for *scopes*.


    This method is called automatically by Azure SDK clients.'
  signature: 'get_token(*scopes: str, claims: str | None = None, tenant_id: str |
    None = None, enable_cae: bool = False, **kwargs: Any) -> AccessToken'
  parameters:
  - name: scopes
    description: 'desired scopes for the access token. This method requires at least
      one scope.

      For more information about scopes, see

      [https://learn.microsoft.com/entra/identity-platform/scopes-oidc](https://learn.microsoft.com/entra/identity-platform/scopes-oidc).'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: claims
    description: 'additional claims required in the token, such as those returned
      in a resource provider''s

      claims challenge following an authorization failure.'
    types:
    - <xref:str>
  - name: tenant_id
    description: optional tenant to include in the token request.
    types:
    - <xref:str>
  - name: enable_cae
    description: 'indicates whether to enable Continuous Access Evaluation (CAE) for
      the requested

      token. Defaults to False.'
    types:
    - <xref:bool>
  return:
    description: An access token with the desired scopes.
    types:
    - <xref:azure.core.credentials.AccessToken>
  exceptions:
  - type: azure.identity.CredentialUnavailableError
    description: 'the credential is unable to attempt authentication because it lacks

      required data, state, or platform support'
  - type: azure.core.exceptions.ClientAuthenticationError
    description: authentication failed. The error's `message` attribute gives a reason.
