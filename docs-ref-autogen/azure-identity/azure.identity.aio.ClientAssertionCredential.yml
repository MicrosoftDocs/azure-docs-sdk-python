### YamlMime:PythonClass
uid: azure.identity.aio.ClientAssertionCredential
name: ClientAssertionCredential
fullName: azure.identity.aio.ClientAssertionCredential
module: azure.identity.aio
inheritances:
- azure.identity.aio._internal.AsyncContextManager
- azure.identity.aio._internal.get_token_mixin.GetTokenMixin
summary: 'Authenticates a service principal with a JWT assertion.


  This credential is for advanced scenarios. <xref:azure.identity.CertificateCredential>
  has a more

  convenient API for the most common assertion scenario, authenticating a service
  principal with a certificate.'
constructor:
  syntax: 'ClientAssertionCredential(tenant_id: str, client_id: str, func: Callable[[],
    str], **kwargs: Any)'
  parameters:
  - name: tenant_id
    description: ID of the principal's tenant. Also called its "directory" ID.
    isRequired: true
    types:
    - <xref:str>
  - name: client_id
    description: The principal's client ID
    isRequired: true
    types:
    - <xref:str>
  - name: func
    description: 'A callable that returns a string assertion. The credential will
      call this every time it

      acquires a new token.'
    isRequired: true
  keywordOnlyParameters:
  - name: authority
    description: 'Authority of a Microsoft Entra endpoint, for example

      "login.microsoftonline.com", the authority for Azure Public Cloud (which is
      the default).

      <xref:azure.identity.AzureAuthorityHosts> defines authorities for other clouds.'
    types:
    - <xref:str>
  - name: additionally_allowed_tenants
    description: 'Specifies tenants in addition to the specified "tenant_id"

      for which the credential may acquire tokens. Add the wildcard value "*" to allow
      the credential to

      acquire tokens for any tenant the application can access.'
    types:
    - <xref:typing.List>[<xref:str>]
examples:
- "Create a ClientAssertionCredential.<!--[!code-python[Main](les\\credential_creation_code_snippets.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
  \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\47\\\\azure-identity-1.16.0\\\
  \\samples\\\\credential_creation_code_snippets.py\", \"xml:space\": \"preserve\"\
  , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.identity.aio import\
  \ ClientAssertionCredential\n\n   def get_assertion():\n       return \"<client-assertion>\"\
  \n\n   credential = ClientAssertionCredential(\n       tenant_id=\"<tenant_id>\"\
  ,\n       client_id=\"<client_id>\",\n       func=get_assertion,\n   )\n\n   ````\n"
methods:
- uid: azure.identity.aio.ClientAssertionCredential.close
  name: close
  summary: Close the credential's transport session.
  signature: async close() -> None
- uid: azure.identity.aio.ClientAssertionCredential.get_token
  name: get_token
  summary: 'Request an access token for *scopes*.


    This method is called automatically by Azure SDK clients.'
  signature: 'async get_token(*scopes: str, claims: str | None = None, tenant_id:
    str | None = None, enable_cae: bool = False, **kwargs: Any) -> AccessToken'
  parameters:
  - name: scopes
    description: 'desired scopes for the access token. This method requires at least
      one scope.

      For more information about scopes, see

      [https://learn.microsoft.com/entra/identity-platform/scopes-oidc](https://learn.microsoft.com/entra/identity-platform/scopes-oidc).'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: claims
    description: 'additional claims required in the token, such as those returned
      in a resource provider''s

      claims challenge following an authorization failure.'
    types:
    - <xref:str>
  - name: tenant_id
    description: optional tenant to include in the token request.
    types:
    - <xref:str>
  - name: enable_cae
    description: 'indicates whether to enable Continuous Access Evaluation (CAE) for
      the requested

      token. Defaults to False.'
    types:
    - <xref:bool>
  return:
    description: An access token with the desired scopes.
    types:
    - <xref:azure.core.credentials.AccessToken>
  exceptions:
  - type: azure.identity.CredentialUnavailableError
    description: 'the credential is unable to attempt authentication because it lacks

      required data, state, or platform support'
  - type: azure.core.exceptions.ClientAuthenticationError
    description: authentication failed. The error's `message` attribute gives a reason.
