### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cognitiveservices.vision.face.operations.SnapshotOperations.apply
  - azure.cognitiveservices.vision.face.operations.SnapshotOperations.delete
  - azure.cognitiveservices.vision.face.operations.SnapshotOperations.get
  - azure.cognitiveservices.vision.face.operations.SnapshotOperations.get_operation_status
  - azure.cognitiveservices.vision.face.operations.SnapshotOperations.list
  - azure.cognitiveservices.vision.face.operations.SnapshotOperations.take
  - azure.cognitiveservices.vision.face.operations.SnapshotOperations.update
  - azure.cognitiveservices.vision.face.operations.SnapshotOperations.models
  class: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: SnapshotOperations
  summary: 'SnapshotOperations operations.


    You should not instantiate directly this class, but create a Client instance that
    will create it for you and attach it as attribute.'
  syntax:
    content: SnapshotOperations(client, config, serializer, deserializer)
    parameters:
    - description: Client for service requests.
      id: client
    - description: Configuration of service client.
      id: config
    - description: An object model serializer.
      id: serializer
    - description: An object model deserializer.
      id: deserializer
  type: class
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations
- class: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.apply
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: apply(snapshot_id, object_id, mode='CreateNew', custom_headers=None, raw=False,
    **operation_config)
  namewithoutparameters: apply
  summary: 'Submit an operation to apply a snapshot to current subscription. For

    each snapshot, only subscriptions included in the applyScope of

    Snapshot - Take can apply it.<br />

    The snapshot interfaces are for users to backup and restore their face

    data from one face subscription to another, inside same region or

    across regions. The workflow contains two phases, user first calls

    Snapshot - Take to create a copy of the source object and store it as a

    snapshot, then calls Snapshot - Apply to paste the snapshot to target

    subscription. The snapshots are stored in a centralized location (per

    Azure instance), so that they can be applied cross accounts and

    regions.<br />

    Applying snapshot is an asynchronous operation. An operation id can be

    obtained from the "Operation-Location" field in response header, to be

    used in OperationStatus - Get for tracking the progress of applying the

    snapshot. The target object id will be included in the

    "resourceLocation" field in OperationStatus - Get response when the

    operation status is "succeeded".<br />

    Snapshot applying time depends on the number of person and face entries

    in the snapshot object. It could be in seconds, or up to 1 hour for

    1,000,000 persons with multiple faces.<br />

    Snapshots will be automatically expired and cleaned in 48 hours after

    it is created by Snapshot - Take. So the target subscription is

    required to apply the snapshot in 48 hours since its creation.<br />

    Applying a snapshot will not block any other operations against the

    target object, however it is not recommended because the correctness

    cannot be guaranteed during snapshot applying. After snapshot applying

    is completed, all operations towards the target object can work as

    normal. Snapshot also includes the training results of the source

    object, which means target subscription the snapshot applied to does

    not need re-train the target object before calling

    Identify/FindSimilar.<br />

    One snapshot can be applied multiple times in parallel, while currently

    only CreateNew apply mode is supported, which means the apply operation

    will fail if target subscription already contains an object of same

    type and using the same objectId. Users can specify the "objectId" in

    request body to avoid such conflicts.<br />

    * Free-tier subscription quota: 100 apply operations per month.

    * S0-tier subscription quota: 100 apply operations per day.'
  syntax:
    content: apply(snapshot_id, object_id, mode='CreateNew', custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: Id referencing a particular snapshot.
      id: snapshot_id
      isRequired: true
      type:
      - str
    - description: 'User specified target object id to be created from

        the snapshot.'
      id: object_id
      isRequired: true
      type:
      - str
    - defaultValue: CreateNew
      description: 'Snapshot applying mode. Currently only CreateNew is

        supported, which means the apply operation will fail if target

        subscription already contains an object of same type and using the

        same objectId. Users can specify the "objectId" in request body to

        avoid such conflicts. Possible values include: ''CreateNew'''
      id: mode
      type:
      - str
      - azure.cognitiveservices.vision.face.models.SnapshotApplyMode
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: None or ClientRawResponse if raw=true
      type:
      - None
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.apply
- class: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.delete
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: delete(snapshot_id, custom_headers=None, raw=False, **operation_config)
  namewithoutparameters: delete
  summary: 'Delete an existing snapshot according to the snapshotId. All object

    data and information in the snapshot will also be deleted. Only the

    source subscription who took the snapshot can delete the snapshot. If

    the user does not delete a snapshot with this API, the snapshot will

    still be automatically deleted in 48 hours after creation.'
  syntax:
    content: delete(snapshot_id, custom_headers=None, raw=False, **operation_config)
    parameters:
    - description: Id referencing a particular snapshot.
      id: snapshot_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: None or ClientRawResponse if raw=true
      type:
      - None
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.delete
- class: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.get
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: get(snapshot_id, custom_headers=None, raw=False, **operation_config)
  namewithoutparameters: get
  summary: 'Retrieve information about a snapshot. Snapshot is only accessible to

    the source subscription who took it, and target subscriptions included

    in the applyScope in Snapshot - Take.'
  syntax:
    content: get(snapshot_id, custom_headers=None, raw=False, **operation_config)
    parameters:
    - description: Id referencing a particular snapshot.
      id: snapshot_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: Snapshot or ClientRawResponse if raw=true
      type:
      - azure.cognitiveservices.vision.face.models.Snapshot
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.get
- class: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.get_operation_status
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: get_operation_status(operation_id, custom_headers=None, raw=False, **operation_config)
  namewithoutparameters: get_operation_status
  summary: Retrieve the status of a take/apply snapshot operation.
  syntax:
    content: get_operation_status(operation_id, custom_headers=None, raw=False, **operation_config)
    parameters:
    - description: 'Id referencing a particular take/apply snapshot

        operation.'
      id: operation_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: OperationStatus or ClientRawResponse if raw=true
      type:
      - azure.cognitiveservices.vision.face.models.OperationStatus
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.get_operation_status
- class: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.list
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: list(type=None, apply_scope=None, custom_headers=None, raw=False, **operation_config)
  namewithoutparameters: list
  summary: 'List all accessible snapshots with related information, including

    snapshots that were taken by the user, or snapshots to be applied to

    the user (subscription id was included in the applyScope in Snapshot -

    Take).'
  syntax:
    content: list(type=None, apply_scope=None, custom_headers=None, raw=False, **operation_config)
    parameters:
    - defaultValue: None
      description: 'User specified object type as a search filter. Possible

        values include: ''FaceList'', ''LargeFaceList'', ''LargePersonGroup'',

        ''PersonGroup'''
      id: type
      type:
      - str
      - azure.cognitiveservices.vision.face.models.SnapshotObjectType
    - defaultValue: None
      description: 'User specified snapshot apply scopes as a search

        filter. ApplyScope is an array of the target Azure subscription ids

        for the snapshot, specified by the user who created the snapshot by

        Snapshot - Take.'
      id: apply_scope
      type:
      - list[str]
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: list or ClientRawResponse if raw=true
      type:
      - list[azure.cognitiveservices.vision.face.models.Snapshot]
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.list
- class: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.take
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: take(type, object_id, apply_scope, user_data=None, custom_headers=None, raw=False,
    **operation_config)
  namewithoutparameters: take
  summary: 'Submit an operation to take a snapshot of face list, large face list,

    person group or large person group, with user-specified snapshot type,

    source object id, apply scope and an optional user data.<br />

    The snapshot interfaces are for users to backup and restore their face

    data from one face subscription to another, inside same region or

    across regions. The workflow contains two phases, user first calls

    Snapshot - Take to create a copy of the source object and store it as a

    snapshot, then calls Snapshot - Apply to paste the snapshot to target

    subscription. The snapshots are stored in a centralized location (per

    Azure instance), so that they can be applied cross accounts and

    regions.<br />

    Taking snapshot is an asynchronous operation. An operation id can be

    obtained from the "Operation-Location" field in response header, to be

    used in OperationStatus - Get for tracking the progress of creating the

    snapshot. The snapshot id will be included in the "resourceLocation"

    field in OperationStatus - Get response when the operation status is

    "succeeded".<br />

    Snapshot taking time depends on the number of person and face entries

    in the source object. It could be in seconds, or up to several hours

    for 1,000,000 persons with multiple faces.<br />

    Snapshots will be automatically expired and cleaned in 48 hours after

    it is created by Snapshot - Take. User can delete the snapshot using

    Snapshot - Delete by themselves any time before expiration.<br />

    Taking snapshot for a certain object will not block any other

    operations against the object. All read-only operations (Get/List and

    Identify/FindSimilar/Verify) can be conducted as usual. For all

    writable operations, including Add/Update/Delete the source object or

    its persons/faces and Train, they are not blocked but not recommended

    because writable updates may not be reflected on the snapshot during

    its taking. After snapshot taking is completed, all readable and

    writable operations can work as normal. Snapshot will also include the

    training results of the source object, which means target subscription

    the snapshot applied to does not need re-train the target object before

    calling Identify/FindSimilar.<br />

    * Free-tier subscription quota: 100 take operations per month.

    * S0-tier subscription quota: 100 take operations per day.'
  syntax:
    content: take(type, object_id, apply_scope, user_data=None, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: 'User specified type for the source object to take

        snapshot from. Currently FaceList, PersonGroup, LargeFaceList and

        LargePersonGroup are supported. Possible values include: ''FaceList'',

        ''LargeFaceList'', ''LargePersonGroup'', ''PersonGroup'''
      id: type
      isRequired: true
      type:
      - str
      - azure.cognitiveservices.vision.face.models.SnapshotObjectType
    - description: 'User specified source object id to take snapshot

        from.'
      id: object_id
      isRequired: true
      type:
      - str
    - description: 'User specified array of target Face subscription

        ids for the snapshot. For each snapshot, only subscriptions included

        in the applyScope of Snapshot - Take can apply it.'
      id: apply_scope
      isRequired: true
      type:
      - list[str]
    - defaultValue: None
      description: 'User specified data about the snapshot for any

        purpose. Length should not exceed 16KB.'
      id: user_data
      type:
      - str
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: None or ClientRawResponse if raw=true
      type:
      - None
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.take
- class: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.update
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: update(snapshot_id, apply_scope=None, user_data=None, custom_headers=None,
    raw=False, **operation_config)
  namewithoutparameters: update
  summary: 'Update the information of a snapshot. Only the source subscription who

    took the snapshot can update the snapshot.'
  syntax:
    content: update(snapshot_id, apply_scope=None, user_data=None, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: Id referencing a particular snapshot.
      id: snapshot_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: 'Array of the target Face subscription ids for the

        snapshot, specified by the user who created the snapshot when calling

        Snapshot - Take. For each snapshot, only subscriptions included in the

        applyScope of Snapshot - Take can apply it.'
      id: apply_scope
      type:
      - list[str]
    - defaultValue: None
      description: 'User specified data about the snapshot for any

        purpose. Length should not exceed 16KB.'
      id: user_data
      type:
      - str
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: None or ClientRawResponse if raw=true
      type:
      - None
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.update
- class: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.models
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: models
  syntax:
    content: models = <module 'azure.cognitiveservices.vision.face.models' from 'c:\\hostedtoolcache\\windows\\python\\3.6.8\\x64\\lib\\site-packages\\azure\\cognitiveservices\\vision\\face\\models\\__init__.py'>
  type: attribute
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.models
references:
- fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.apply
  isExternal: false
  name: apply(snapshot_id, object_id, mode='CreateNew', custom_headers=None, raw=False,
    **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.apply
- fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.delete
  isExternal: false
  name: delete(snapshot_id, custom_headers=None, raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.delete
- fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.get
  isExternal: false
  name: get(snapshot_id, custom_headers=None, raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.get
- fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.get_operation_status
  isExternal: false
  name: get_operation_status(operation_id, custom_headers=None, raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.get_operation_status
- fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.list
  isExternal: false
  name: list(type=None, apply_scope=None, custom_headers=None, raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.list
- fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.take
  isExternal: false
  name: take(type, object_id, apply_scope, user_data=None, custom_headers=None, raw=False,
    **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.take
- fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.update
  isExternal: false
  name: update(snapshot_id, apply_scope=None, user_data=None, custom_headers=None,
    raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.update
- fullName: azure.cognitiveservices.vision.face.operations.SnapshotOperations.models
  isExternal: false
  name: models
  parent: azure.cognitiveservices.vision.face.operations.SnapshotOperations
  uid: azure.cognitiveservices.vision.face.operations.SnapshotOperations.models
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
- fullName: list[azure.cognitiveservices.vision.face.models.Snapshot]
  name: list[Snapshot]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.cognitiveservices.vision.face.models.Snapshot
    name: Snapshot
    uid: azure.cognitiveservices.vision.face.models.Snapshot
  - fullName: ']'
    name: ']'
  uid: list[azure.cognitiveservices.vision.face.models.Snapshot]
