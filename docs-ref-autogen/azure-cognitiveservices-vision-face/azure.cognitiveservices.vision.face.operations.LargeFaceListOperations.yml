### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.add_face_from_stream
  - azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.add_face_from_url
  - azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.create
  - azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.delete
  - azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.delete_face
  - azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get
  - azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get_face
  - azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get_training_status
  - azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.list
  - azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.list_faces
  - azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.train
  - azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.update
  - azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.update_face
  - azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.models
  class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: LargeFaceListOperations
  summary: 'LargeFaceListOperations operations.


    You should not instantiate directly this class, but create a Client instance that
    will create it for you and attach it as attribute.'
  syntax:
    content: LargeFaceListOperations(client, config, serializer, deserializer)
    parameters:
    - description: Client for service requests.
      id: client
    - description: Configuration of service client.
      id: config
    - description: An object model serializer.
      id: serializer
    - description: An object model deserializer.
      id: deserializer
  type: class
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
- class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.add_face_from_stream
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: add_face_from_stream(large_face_list_id, image, user_data=None, target_face=None,
    detection_model='detection_01', custom_headers=None, raw=False, callback=None,
    **operation_config)
  namewithoutparameters: add_face_from_stream
  summary: "Add a face to a specified large face list, up to 1,000,000 faces.\n<br\
    \ /> To deal with an image contains multiple faces, input face can be\nspecified\
    \ as an image with a targetFace rectangle. It returns a\npersistedFaceId representing\
    \ the added face. No image will be stored.\nOnly the extracted face feature will\
    \ be stored on server until\n[LargeFaceList Face -\nDelete]([https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface))\n\
    or [LargeFaceList -\nDelete]([https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete))\n\
    is called.\n<br /> Note persistedFaceId is different from faceId generated by\
    \ [Face\n-\nDetect]([https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl)).\n\
    * Higher face image quality means better recognition precision. Please\nconsider\
    \ high-quality faces: frontal, clear, and face size is 200x200\npixels (100 pixels\
    \ between eyes) or bigger.\n* JPEG, PNG, GIF (the first frame), and BMP format\
    \ are supported. The\nallowed image file size is from 1KB to 6MB.\n* \"targetFace\"\
    \ rectangle should contain one face. Zero or multiple\nfaces will be regarded\
    \ as an error. If the provided \"targetFace\"\nrectangle is not returned from\
    \ [Face -\nDetect]([https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl)),\n\
    there\u2019s no guarantee to detect and add the face successfully.\n* Out of detectable\
    \ face size (36x36 - 4096x4096 pixels), large\nhead-pose, or large occlusions\
    \ will cause failures.\n* Adding/deleting faces to/from a same face list are processed\n\
    sequentially and to/from different face lists are in parallel.\n* The minimum\
    \ detectable face size is 36x36 pixels in an image no\nlarger than 1920x1080 pixels.\
    \ Images with dimensions higher than\n1920x1080 pixels will need a proportionally\
    \ larger minimum face size.\n* Different 'detectionModel' values can be provided.\
    \ To use and compare\ndifferent detection models, please refer to [How to specify\
    \ a detection\nmodel]([https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model))\n\
    | Model | Recommended use-case(s) |\n| ---------- | -------- |\n| 'detection_01':\
    \ | The default detection model for [LargeFaceList -\nAdd\nFace]([https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl)).\n\
    Recommend for near frontal face detection. For scenarios with\nexceptionally large\
    \ angle (head-pose) faces, occluded faces or wrong\nimage orientation, the faces\
    \ in such cases may not be detected. |\n| 'detection_02': | Detection model released\
    \ in 2019 May with improved\naccuracy especially on small, side and blurry faces.\
    \ |\nQuota:\n* Free-tier subscription quota: 1,000 faces per large face list.\n\
    * S0-tier subscription quota: 1,000,000 faces per large face list."
  syntax:
    content: add_face_from_stream(large_face_list_id, image, user_data=None, target_face=None,
      detection_model='detection_01', custom_headers=None, raw=False, callback=None,
      **operation_config)
    parameters:
    - description: 'Id referencing a particular large face

        list.'
      id: large_face_list_id
      isRequired: true
      type:
      - str
    - description: An image stream.
      id: image
      isRequired: true
      type:
      - Generator
    - defaultValue: None
      description: 'User-specified data about the face for any purpose.

        The maximum length is 1KB.'
      id: user_data
      type:
      - str
    - defaultValue: None
      description: 'A face rectangle to specify the target face to be

        added to a person in the format of "targetFace=left,top,width,height".

        E.g. "targetFace=10,10,100,100". If there is more than one face in the

        image, targetFace is required to specify which face to add. No

        targetFace means there is only one face detected in the entire image.'
      id: target_face
      type:
      - list[int]
    - defaultValue: detection_01
      description: 'Name of detection model. Detection model is

        used to detect faces in the submitted image. A detection model name

        can be provided when performing Face - Detect or (Large)FaceList - Add

        Face or (Large)PersonGroup - Add Face. The default value is

        ''detection_01'', if another model is needed, please explicitly specify

        it. Possible values include: ''detection_01'', ''detection_02'''
      id: detection_model
      type:
      - str
      - azure.cognitiveservices.vision.face.models.DetectionModel
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - defaultValue: None
      description: 'When specified, will be called with each chunk of

        data that is streamed. The callback should take two arguments, the

        bytes of the current chunk of data and the response object. If the

        data is uploading, response will be None.'
      id: callback
      type:
      - Callable[Bytes, response=None]
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: PersistedFace or ClientRawResponse if raw=true
      type:
      - azure.cognitiveservices.vision.face.models.PersistedFace
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.add_face_from_stream
- class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.add_face_from_url
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: add_face_from_url(large_face_list_id, url, user_data=None, target_face=None,
    detection_model='detection_01', custom_headers=None, raw=False, **operation_config)
  namewithoutparameters: add_face_from_url
  summary: "Add a face to a specified large face list, up to 1,000,000 faces.\n<br\
    \ /> To deal with an image contains multiple faces, input face can be\nspecified\
    \ as an image with a targetFace rectangle. It returns a\npersistedFaceId representing\
    \ the added face. No image will be stored.\nOnly the extracted face feature will\
    \ be stored on server until\n[LargeFaceList Face -\nDelete]([https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/deleteface))\n\
    or [LargeFaceList -\nDelete]([https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete))\n\
    is called.\n<br /> Note persistedFaceId is different from faceId generated by\
    \ [Face\n-\nDetect]([https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl)).\n\
    * Higher face image quality means better recognition precision. Please\nconsider\
    \ high-quality faces: frontal, clear, and face size is 200x200\npixels (100 pixels\
    \ between eyes) or bigger.\n* JPEG, PNG, GIF (the first frame), and BMP format\
    \ are supported. The\nallowed image file size is from 1KB to 6MB.\n* \"targetFace\"\
    \ rectangle should contain one face. Zero or multiple\nfaces will be regarded\
    \ as an error. If the provided \"targetFace\"\nrectangle is not returned from\
    \ [Face -\nDetect]([https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/detectwithurl)),\n\
    there\u2019s no guarantee to detect and add the face successfully.\n* Out of detectable\
    \ face size (36x36 - 4096x4096 pixels), large\nhead-pose, or large occlusions\
    \ will cause failures.\n* Adding/deleting faces to/from a same face list are processed\n\
    sequentially and to/from different face lists are in parallel.\n* The minimum\
    \ detectable face size is 36x36 pixels in an image no\nlarger than 1920x1080 pixels.\
    \ Images with dimensions higher than\n1920x1080 pixels will need a proportionally\
    \ larger minimum face size.\n* Different 'detectionModel' values can be provided.\
    \ To use and compare\ndifferent detection models, please refer to [How to specify\
    \ a detection\nmodel]([https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model))\n\
    | Model | Recommended use-case(s) |\n| ---------- | -------- |\n| 'detection_01':\
    \ | The default detection model for [LargeFaceList -\nAdd\nFace]([https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl)).\n\
    Recommend for near frontal face detection. For scenarios with\nexceptionally large\
    \ angle (head-pose) faces, occluded faces or wrong\nimage orientation, the faces\
    \ in such cases may not be detected. |\n| 'detection_02': | Detection model released\
    \ in 2019 May with improved\naccuracy especially on small, side and blurry faces.\
    \ |\nQuota:\n* Free-tier subscription quota: 1,000 faces per large face list.\n\
    * S0-tier subscription quota: 1,000,000 faces per large face list."
  syntax:
    content: add_face_from_url(large_face_list_id, url, user_data=None, target_face=None,
      detection_model='detection_01', custom_headers=None, raw=False, **operation_config)
    parameters:
    - description: 'Id referencing a particular large face

        list.'
      id: large_face_list_id
      isRequired: true
      type:
      - str
    - description: Publicly reachable URL of an image
      id: url
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: 'User-specified data about the face for any purpose.

        The maximum length is 1KB.'
      id: user_data
      type:
      - str
    - defaultValue: None
      description: 'A face rectangle to specify the target face to be

        added to a person in the format of "targetFace=left,top,width,height".

        E.g. "targetFace=10,10,100,100". If there is more than one face in the

        image, targetFace is required to specify which face to add. No

        targetFace means there is only one face detected in the entire image.'
      id: target_face
      type:
      - list[int]
    - defaultValue: detection_01
      description: 'Name of detection model. Detection model is

        used to detect faces in the submitted image. A detection model name

        can be provided when performing Face - Detect or (Large)FaceList - Add

        Face or (Large)PersonGroup - Add Face. The default value is

        ''detection_01'', if another model is needed, please explicitly specify

        it. Possible values include: ''detection_01'', ''detection_02'''
      id: detection_model
      type:
      - str
      - azure.cognitiveservices.vision.face.models.DetectionModel
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: PersistedFace or ClientRawResponse if raw=true
      type:
      - azure.cognitiveservices.vision.face.models.PersistedFace
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.add_face_from_url
- class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.create
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: create(large_face_list_id, name=None, user_data=None, recognition_model='recognition_01',
    custom_headers=None, raw=False, **operation_config)
  namewithoutparameters: create
  summary: 'Create an empty large face list with user-specified largeFaceListId,

    name, an optional userData and recognitionModel.

    <br /> Large face list is a list of faces, up to 1,000,000 faces, and

    used by [Face - Find

    Similar]([https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar)).

    <br /> After creation, user should use [LargeFaceList Face -

    Add]([https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/addfacefromurl))

    to import the faces and [LargeFaceList -

    Train]([https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/train](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/train))

    to make it ready for [Face - Find

    Similar]([https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/findsimilar)).

    No image will be stored. Only the extracted face features are stored on

    server until [LargeFaceList -

    Delete]([https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/delete))

    is called.

    <br /> Find Similar is used for scenario like finding celebrity-like

    faces, similar face filtering, or as a light way face identification.

    But if the actual use is to identify person, please use

    [PersonGroup]([https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/persongroup))

    /

    [LargePersonGroup]([https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup](https://docs.microsoft.com/rest/api/cognitiveservices/face/largepersongroup))

    and [Face -

    Identify]([https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify](https://docs.microsoft.com/rest/api/cognitiveservices/face/face/identify)).

    <br/>''recognitionModel'' should be specified to associate with this

    large face list. The default value for ''recognitionModel'' is

    ''recognition_01'', if the latest model needed, please explicitly specify

    the model you need in this parameter. New faces that are added to an

    existing large face list will use the recognition model that''s already

    associated with the collection. Existing face features in a large face

    list can''t be updated to features extracted by another version of

    recognition model.

    * ''recognition_01'': The default recognition model for [LargeFaceList-

    Create]([https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/create)).

    All those large face lists created before 2019 March are bonded with

    this recognition model.

    * ''recognition_02'': Recognition model released in 2019 March.

    * ''recognition_03'': Recognition model released in 2020 May.

    ''recognition_03'' is recommended since its overall accuracy is improved

    compared with ''recognition_01'' and ''recognition_02''.

    Large face list quota:

    * Free-tier subscription quota: 64 large face lists.

    * S0-tier subscription quota: 1,000,000 large face lists.'
  syntax:
    content: create(large_face_list_id, name=None, user_data=None, recognition_model='recognition_01',
      custom_headers=None, raw=False, **operation_config)
    parameters:
    - description: 'Id referencing a particular large face

        list.'
      id: large_face_list_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: User defined name, maximum length is 128.
      id: name
      type:
      - str
    - defaultValue: None
      description: User specified data. Length should not exceed 16KB.
      id: user_data
      type:
      - str
    - defaultValue: recognition_01
      description: 'Possible values include: ''recognition_01'',

        ''recognition_02'', ''recognition_03'''
      id: recognition_model
      type:
      - str
      - azure.cognitiveservices.vision.face.models.RecognitionModel
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: None or ClientRawResponse if raw=true
      type:
      - None
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.create
- class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.delete
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: delete(large_face_list_id, custom_headers=None, raw=False, **operation_config)
  namewithoutparameters: delete
  summary: Delete a specified large face list.
  syntax:
    content: delete(large_face_list_id, custom_headers=None, raw=False, **operation_config)
    parameters:
    - description: 'Id referencing a particular large face

        list.'
      id: large_face_list_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: None or ClientRawResponse if raw=true
      type:
      - None
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.delete
- class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.delete_face
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: delete_face(large_face_list_id, persisted_face_id, custom_headers=None, raw=False,
    **operation_config)
  namewithoutparameters: delete_face
  summary: 'Delete a face from a large face list by specified largeFaceListId and

    persistedFaceId.

    <br /> Adding/deleting faces to/from a same large face list are

    processed sequentially and to/from different large face lists are in

    parallel.'
  syntax:
    content: delete_face(large_face_list_id, persisted_face_id, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: 'Id referencing a particular large face

        list.'
      id: large_face_list_id
      isRequired: true
      type:
      - str
    - description: 'Id referencing a particular persistedFaceId

        of an existing face.'
      id: persisted_face_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: None or ClientRawResponse if raw=true
      type:
      - None
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.delete_face
- class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: get(large_face_list_id, return_recognition_model=False, custom_headers=None,
    raw=False, **operation_config)
  namewithoutparameters: get
  summary: "Retrieve a large face list\u2019s largeFaceListId, name, userData and\n\
    recognitionModel."
  syntax:
    content: get(large_face_list_id, return_recognition_model=False, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: 'Id referencing a particular large face

        list.'
      id: large_face_list_id
      isRequired: true
      type:
      - str
    - defaultValue: 'False'
      description: 'A value indicating whether the

        operation should return ''recognitionModel'' in response.'
      id: return_recognition_model
      type:
      - bool
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: LargeFaceList or ClientRawResponse if raw=true
      type:
      - azure.cognitiveservices.vision.face.models.LargeFaceList
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get
- class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get_face
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: get_face(large_face_list_id, persisted_face_id, custom_headers=None, raw=False,
    **operation_config)
  namewithoutparameters: get_face
  summary: 'Retrieve information about a persisted face (specified by

    persistedFaceId and its belonging largeFaceListId).'
  syntax:
    content: get_face(large_face_list_id, persisted_face_id, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: 'Id referencing a particular large face

        list.'
      id: large_face_list_id
      isRequired: true
      type:
      - str
    - description: 'Id referencing a particular persistedFaceId

        of an existing face.'
      id: persisted_face_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: PersistedFace or ClientRawResponse if raw=true
      type:
      - azure.cognitiveservices.vision.face.models.PersistedFace
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get_face
- class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get_training_status
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: get_training_status(large_face_list_id, custom_headers=None, raw=False, **operation_config)
  namewithoutparameters: get_training_status
  summary: 'Retrieve the training status of a large face list (completed or

    ongoing).'
  syntax:
    content: get_training_status(large_face_list_id, custom_headers=None, raw=False,
      **operation_config)
    parameters:
    - description: 'Id referencing a particular large face

        list.'
      id: large_face_list_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: TrainingStatus or ClientRawResponse if raw=true
      type:
      - azure.cognitiveservices.vision.face.models.TrainingStatus
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get_training_status
- class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.list
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: list(return_recognition_model=False, custom_headers=None, raw=False, **operation_config)
  namewithoutparameters: list
  summary: "List large face lists\u2019 information of largeFaceListId, name, userData\n\
    and recognitionModel. <br />\nTo get face information inside largeFaceList use\
    \ [LargeFaceList Face -\nGet]([https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/getface](https://docs.microsoft.com/rest/api/cognitiveservices/face/largefacelist/getface))<br\n\
    />\n* Large face lists are stored in alphabetical order of largeFaceListId.\n\
    * \"start\" parameter (string, optional) is a user-provided\nlargeFaceListId value\
    \ that returned entries have larger ids by string\ncomparison. \"start\" set to\
    \ empty to indicate return from the first\nitem.\n* \"top\" parameter (int, optional)\
    \ specifies the number of entries to\nreturn. A maximal of 1000 entries can be\
    \ returned in one call. To fetch\nmore, you can specify \"start\" with the last\
    \ returned entry\u2019s Id of the\ncurrent call.\n<br />\nFor example, total 5\
    \ large person lists: \"list1\", ..., \"list5\".\n<br /> \"start=&top=\" will\
    \ return all 5 lists.\n<br /> \"start=&top=2\" will return \"list1\", \"list2\"\
    .\n<br /> \"start=list2&top=3\" will return \"list3\", \"list4\", \"list5\".\n\
    ."
  syntax:
    content: list(return_recognition_model=False, custom_headers=None, raw=False,
      **operation_config)
    parameters:
    - defaultValue: 'False'
      description: 'A value indicating whether the

        operation should return ''recognitionModel'' in response.'
      id: return_recognition_model
      type:
      - bool
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: list or ClientRawResponse if raw=true
      type:
      - list[azure.cognitiveservices.vision.face.models.LargeFaceList]
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.list
- class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.list_faces
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: list_faces(large_face_list_id, start=None, top=None, custom_headers=None,
    raw=False, **operation_config)
  namewithoutparameters: list_faces
  summary: 'List all faces in a large face list, and retrieve face information

    (including userData and persistedFaceIds of registered faces of the

    face).'
  syntax:
    content: list_faces(large_face_list_id, start=None, top=None, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: 'Id referencing a particular large face

        list.'
      id: large_face_list_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: 'Starting face id to return (used to list a range of

        faces).'
      id: start
      type:
      - str
    - defaultValue: None
      description: 'Number of faces to return starting with the face id

        indicated by the ''start'' parameter.'
      id: top
      type:
      - int
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: list or ClientRawResponse if raw=true
      type:
      - list[azure.cognitiveservices.vision.face.models.PersistedFace]
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.list_faces
- class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.train
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: train(large_face_list_id, custom_headers=None, raw=False, **operation_config)
  namewithoutparameters: train
  summary: 'Queue a large face list training task, the training task may not be

    started immediately.'
  syntax:
    content: train(large_face_list_id, custom_headers=None, raw=False, **operation_config)
    parameters:
    - description: 'Id referencing a particular large face

        list.'
      id: large_face_list_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: None or ClientRawResponse if raw=true
      type:
      - None
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.train
- class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.update
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: update(large_face_list_id, name=None, user_data=None, custom_headers=None,
    raw=False, **operation_config)
  namewithoutparameters: update
  summary: Update information of a large face list.
  syntax:
    content: update(large_face_list_id, name=None, user_data=None, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: 'Id referencing a particular large face

        list.'
      id: large_face_list_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: User defined name, maximum length is 128.
      id: name
      type:
      - str
    - defaultValue: None
      description: User specified data. Length should not exceed 16KB.
      id: user_data
      type:
      - str
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: None or ClientRawResponse if raw=true
      type:
      - None
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.update
- class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  exceptions:
  - type: azure.cognitiveservices.vision.face.models.APIErrorException
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.update_face
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: update_face(large_face_list_id, persisted_face_id, user_data=None, custom_headers=None,
    raw=False, **operation_config)
  namewithoutparameters: update_face
  summary: Update a persisted face's userData field.
  syntax:
    content: update_face(large_face_list_id, persisted_face_id, user_data=None, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: 'Id referencing a particular large face

        list.'
      id: large_face_list_id
      isRequired: true
      type:
      - str
    - description: 'Id referencing a particular persistedFaceId

        of an existing face.'
      id: persisted_face_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: 'User-provided data attached to the face. The size

        limit is 1KB.'
      id: user_data
      type:
      - str
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: None or ClientRawResponse if raw=true
      type:
      - None
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.update_face
- class: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.models
  langs:
  - python
  module: azure.cognitiveservices.vision.face.operations
  name: models
  syntax:
    content: models = <module 'azure.cognitiveservices.vision.face.models' from 'c:\\hostedtoolcache\\windows\\python\\3.6.8\\x64\\lib\\site-packages\\azure\\cognitiveservices\\vision\\face\\models\\__init__.py'>
  type: attribute
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.models
references:
- fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.add_face_from_stream
  isExternal: false
  name: add_face_from_stream(large_face_list_id, image, user_data=None, target_face=None,
    detection_model='detection_01', custom_headers=None, raw=False, callback=None,
    **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.add_face_from_stream
- fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.add_face_from_url
  isExternal: false
  name: add_face_from_url(large_face_list_id, url, user_data=None, target_face=None,
    detection_model='detection_01', custom_headers=None, raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.add_face_from_url
- fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.create
  isExternal: false
  name: create(large_face_list_id, name=None, user_data=None, recognition_model='recognition_01',
    custom_headers=None, raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.create
- fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.delete
  isExternal: false
  name: delete(large_face_list_id, custom_headers=None, raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.delete
- fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.delete_face
  isExternal: false
  name: delete_face(large_face_list_id, persisted_face_id, custom_headers=None, raw=False,
    **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.delete_face
- fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get
  isExternal: false
  name: get(large_face_list_id, return_recognition_model=False, custom_headers=None,
    raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get
- fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get_face
  isExternal: false
  name: get_face(large_face_list_id, persisted_face_id, custom_headers=None, raw=False,
    **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get_face
- fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get_training_status
  isExternal: false
  name: get_training_status(large_face_list_id, custom_headers=None, raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.get_training_status
- fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.list
  isExternal: false
  name: list(return_recognition_model=False, custom_headers=None, raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.list
- fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.list_faces
  isExternal: false
  name: list_faces(large_face_list_id, start=None, top=None, custom_headers=None,
    raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.list_faces
- fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.train
  isExternal: false
  name: train(large_face_list_id, custom_headers=None, raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.train
- fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.update
  isExternal: false
  name: update(large_face_list_id, name=None, user_data=None, custom_headers=None,
    raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.update
- fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.update_face
  isExternal: false
  name: update_face(large_face_list_id, persisted_face_id, user_data=None, custom_headers=None,
    raw=False, **operation_config)
  parent: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.update_face
- fullName: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.models
  isExternal: false
  name: models
  parent: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations
  uid: azure.cognitiveservices.vision.face.operations.LargeFaceListOperations.models
- fullName: list[int]
  name: list[int]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: int
    name: int
    uid: int
  - fullName: ']'
    name: ']'
  uid: list[int]
- fullName: Callable[Bytes, response=None]
  name: Callable[Bytes, response=None]
  spec.python:
  - fullName: Callable
    name: Callable
    uid: Callable
  - fullName: '['
    name: '['
  - fullName: Bytes
    name: Bytes
    uid: Bytes
  - fullName: ', '
    name: ', '
  - fullName: response=None
    name: response=None
    uid: response=None
  - fullName: ']'
    name: ']'
  uid: Callable[Bytes, response=None]
- fullName: list[azure.cognitiveservices.vision.face.models.LargeFaceList]
  name: list[LargeFaceList]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.cognitiveservices.vision.face.models.LargeFaceList
    name: LargeFaceList
    uid: azure.cognitiveservices.vision.face.models.LargeFaceList
  - fullName: ']'
    name: ']'
  uid: list[azure.cognitiveservices.vision.face.models.LargeFaceList]
- fullName: list[azure.cognitiveservices.vision.face.models.PersistedFace]
  name: list[PersistedFace]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.cognitiveservices.vision.face.models.PersistedFace
    name: PersistedFace
    uid: azure.cognitiveservices.vision.face.models.PersistedFace
  - fullName: ']'
    name: ']'
  uid: list[azure.cognitiveservices.vision.face.models.PersistedFace]
