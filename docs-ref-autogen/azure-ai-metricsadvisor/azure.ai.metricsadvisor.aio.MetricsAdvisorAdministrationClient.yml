### YamlMime:PythonClass
uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient
name: MetricsAdvisorAdministrationClient
fullName: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient
module: azure.ai.metricsadvisor.aio
inheritances:
- builtins.object
summary: MetricsAdvisorAdministrationClient is used to create and manage data feeds.
constructor:
  syntax: 'MetricsAdvisorAdministrationClient(endpoint: str, credential: MetricsAdvisorKeyCredential
    | AsyncTokenCredential, **kwargs: Any)'
  parameters:
  - name: endpoint
    description: 'Supported Cognitive Services endpoints (protocol and hostname,

      for example: [https://](https://)`<resource-name>`.cognitiveservices.azure.com).'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'An instance of ~azure.ai.metricsadvisor.MetricsAdvisorKeyCredential.

      which requires both subscription key and API key. Or an object which can provide
      an access

      token for the vault, such as a credential from <xref:azure.identity>'
    isRequired: true
    types:
    - <xref:azure.ai.metricsadvisor.MetricsAdvisorKeyCredential>
    - <xref:azure.core.credentials.TokenCredential>
examples:
- "Authenticate MetricsAdvisorAdministrationClient with a MetricsAdvisorKeyCredential<!--[!code-python[Main](les\\\
  async_samples\\sample_authentication_async.py )]-->\n\n<!-- literal_block {\"ids\"\
  : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
  \\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\
  \\sample_authentication_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
  \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
  : false} -->\n\n````python\n\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\n\
  \   from azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n\
  \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
  \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
  )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n        \
  \                         MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
  \n   ````\n"
methods:
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.close
  name: close
  summary: Close the <xref:azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient>
    session.
  signature: async close() -> None
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.create_alert_configuration
  name: create_alert_configuration
  summary: Create an anomaly alert configuration.
  signature: 'async create_alert_configuration(name: str, metric_alert_configurations:
    List[MetricAlertConfiguration], hook_ids: List[str], **kwargs: Any) -> AnomalyAlertConfiguration'
  parameters:
  - name: name
    description: Name for the anomaly alert configuration.
    isRequired: true
    types:
    - <xref:str>
  - name: metric_alert_configurations
    description: Anomaly alert configurations.
    isRequired: true
    types:
    - <xref:list>[<xref:azure.ai.metricsadvisor.models.MetricAlertConfiguration>]
  - name: hook_ids
    description: Unique hook IDs.
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
  keywordOnlyParameters:
  - name: cross_metrics_operator
    description: 'Cross metrics operator should be specified when setting up multiple
      metric

      alert configurations. Possible values include: "AND", "OR", "XOR".'
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.MetricAnomalyAlertConfigurationsOperator>
  - name: description
    description: Anomaly alert configuration description.
    types:
    - <xref:str>
  return:
    description: AnomalyAlertConfiguration
    types:
    - <xref:azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Create an anomaly alert configuration<!--[!code-python[Main](les\\async_samples\\\
    sample_alert_configuration_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\
    \\sample_alert_configuration_async.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.ai.metricsadvisor import\
    \ MetricsAdvisorKeyCredential\n   from azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n\
    \   from azure.ai.metricsadvisor.models import (\n       MetricAlertConfiguration,\n\
    \       MetricAnomalyAlertScope,\n       TopNGroupScope,\n       MetricAnomalyAlertConditions,\n\
    \       SeverityCondition,\n       MetricBoundaryCondition,\n       MetricAnomalyAlertSnoozeCondition,\n\
    \   )\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n   detection_configuration_id = os.getenv(\"METRICS_ADVISOR_DETECTION_CONFIGURATION_ID\"\
    )\n   hook_id = os.getenv(\"METRICS_ADVISOR_HOOK_ID\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   async with client:\n       alert_config = await client.create_alert_configuration(\n\
    \           name=\"my alert config\",\n           description=\"alert config description\"\
    ,\n           cross_metrics_operator=\"AND\",\n           metric_alert_configurations=[\n\
    \               MetricAlertConfiguration(\n                   detection_configuration_id=detection_configuration_id,\n\
    \                   alert_scope=MetricAnomalyAlertScope(\n                   \
    \    scope_type=\"WholeSeries\"\n                   ),\n                   alert_conditions=MetricAnomalyAlertConditions(\n\
    \                       severity_condition=SeverityCondition(\n              \
    \             min_alert_severity=\"Low\",\n                           max_alert_severity=\"\
    High\"\n                       )\n                   )\n               ),\n  \
    \             MetricAlertConfiguration(\n                   detection_configuration_id=detection_configuration_id,\n\
    \                   alert_scope=MetricAnomalyAlertScope(\n                   \
    \    scope_type=\"TopN\",\n                       top_n_group_in_scope=TopNGroupScope(\n\
    \                           top=10,\n                           period=5,\n  \
    \                         min_top_count=5\n                       )\n        \
    \           ),\n                   alert_conditions=MetricAnomalyAlertConditions(\n\
    \                       metric_boundary_condition=MetricBoundaryCondition(\n \
    \                          direction=\"Up\",\n                           upper=50\n\
    \                       )\n                   ),\n                   alert_snooze_condition=MetricAnomalyAlertSnoozeCondition(\n\
    \                       auto_snooze=2,\n                       snooze_scope=\"\
    Metric\",\n                       only_for_successive=True\n                 \
    \  )\n               ),\n           ],\n           hook_ids=[hook_id]\n      \
    \ )\n\n       return alert_config\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.create_data_feed
  name: create_data_feed
  summary: Create a new data feed.
  signature: 'async create_data_feed(name: str, source: AzureApplicationInsightsDataFeedSource
    | AzureBlobDataFeedSource | AzureCosmosDbDataFeedSource | AzureDataExplorerDataFeedSource
    | AzureTableDataFeedSource | AzureLogAnalyticsDataFeedSource | InfluxDbDataFeedSource
    | MySqlDataFeedSource | PostgreSqlDataFeedSource | SqlServerDataFeedSource | MongoDbDataFeedSource
    | AzureDataLakeStorageGen2DataFeedSource | AzureEventHubsDataFeedSource, granularity:
    str | Granularity | DataFeedGranularity, schema: List[str] | DataFeedSchema, ingestion_settings:
    datetime | DataFeedIngestionSettings, **kwargs: Any) -> DataFeed'
  parameters:
  - name: name
    description: Name for the data feed.
    isRequired: true
    types:
    - <xref:str>
  - name: source
    description: The source of the data feed
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:azure.ai.metricsadvisor.models.AzureApplicationInsightsDataFeedSource>,
      <xref:azure.ai.metricsadvisor.models.AzureBlobDataFeedSource>, <xref:azure.ai.metricsadvisor.models.AzureCosmosDbDataFeedSource>,
      <xref:azure.ai.metricsadvisor.models.AzureDataExplorerDataFeedSource>, <xref:azure.ai.metricsadvisor.models.AzureDataLakeStorageGen2DataFeedSource>,
      <xref:azure.ai.metricsadvisor.models.AzureTableDataFeedSource>, <xref:azure.ai.metricsadvisor.models.AzureLogAnalyticsDataFeedSource>,
      <xref:azure.ai.metricsadvisor.models.InfluxDbDataFeedSource>, <xref:azure.ai.metricsadvisor.models.MySqlDataFeedSource>,
      <xref:azure.ai.metricsadvisor.models.PostgreSqlDataFeedSource>, <xref:azure.ai.metricsadvisor.models.SqlServerDataFeedSource>,
      <xref:azure.ai.metricsadvisor.models.MongoDbDataFeedSource>, <xref:azure.ai.metricsadvisor.models.AzureEventHubsDataFeedSource>]
  - name: granularity
    description: Granularity type. If using custom granularity, you must instantiate
      a DataFeedGranularity.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:azure.ai.metricsadvisor.models.DataFeedGranularityType>,
      <xref:azure.ai.metricsadvisor.models.DataFeedGranularity>]
  - name: schema
    description: 'Data feed schema. Can be passed as a list of metric names as strings
      or as a DataFeedSchema

      object if additional configuration is needed.'
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:list>[<xref:str>], <xref:azure.ai.metricsadvisor.models.DataFeedSchema>]
  - name: ingestion_settings
    description: 'The data feed ingestions settings. Can be passed as a datetime to
      use for the

      ingestion begin time or as a DataFeedIngestionSettings object if additional
      configuration is needed.'
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:datetime.datetime>, <xref:azure.ai.metricsadvisor.models.DataFeedIngestionSettings>]
  keywordOnlyParameters:
  - name: admins
    description: Data feed administrators.
    types:
    - <xref:list>[<xref:str>]
  - name: data_feed_description
    description: Data feed description.
    types:
    - <xref:str>
  - name: missing_data_point_fill_settings
    description: The fill missing point type and value.
    types:
    - <xref:azure.ai.metricsadvisor.models.DataFeedMissingDataPointFillSettings>
  - name: rollup_settings
    description: The rollup settings.
    types:
    - <xref:azure.ai.metricsadvisor.models.DataFeedRollupSettings>
  - name: viewers
    description: Data feed viewers.
    types:
    - <xref:list>[<xref:str>]
  - name: access_mode
    description: 'Data feed access mode. Possible values include:

      "Private", "Public". Default value: "Private".'
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.DataFeedAccessMode>
  - name: action_link_template
    description: action link for alert.
    types:
    - <xref:str>
  return:
    description: DataFeed
    types:
    - <xref:azure.ai.metricsadvisor.models.DataFeed>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Create a data feed<!--[!code-python[Main](les\\async_samples\\sample_data_feeds_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\\sample_data_feeds_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\n   from\
    \ azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n   from\
    \ azure.ai.metricsadvisor.models import (\n       SqlServerDataFeedSource,\n \
    \      DataFeedSchema,\n       DataFeedMetric,\n       DataFeedDimension,\n  \
    \     DataFeedRollupSettings,\n       DataFeedMissingDataPointFillSettings,\n\
    \   )\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n   sql_server_connection_string = os.getenv(\"METRICS_ADVISOR_SQL_SERVER_CONNECTION_STRING\"\
    )\n   query = os.getenv(\"METRICS_ADVISOR_SQL_SERVER_QUERY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n   async with client:\n       data_feed = await client.create_data_feed(\n\
    \           name=\"My data feed\",\n           source=SqlServerDataFeedSource(\n\
    \               connection_string=sql_server_connection_string,\n            \
    \   query=query,\n           ),\n           granularity=\"Daily\",\n         \
    \  schema=DataFeedSchema(\n               metrics=[\n                   DataFeedMetric(name=\"\
    cost\", display_name=\"Cost\"),\n                   DataFeedMetric(name=\"revenue\"\
    , display_name=\"Revenue\")\n               ],\n               dimensions=[\n\
    \                   DataFeedDimension(name=\"category\", display_name=\"Category\"\
    ),\n                   DataFeedDimension(name=\"city\", display_name=\"City\"\
    )\n               ],\n               timestamp_column=\"Timestamp\"\n        \
    \   ),\n           ingestion_settings=datetime.datetime(2019, 10, 1),\n      \
    \     data_feed_description=\"cost/revenue data feed\",\n           rollup_settings=DataFeedRollupSettings(\n\
    \               rollup_type=\"AutoRollup\",\n               rollup_method=\"Sum\"\
    ,\n               rollup_identification_value=\"__CUSTOM_SUM__\"\n           ),\n\
    \           missing_data_point_fill_settings=DataFeedMissingDataPointFillSettings(\n\
    \               fill_type=\"SmartFilling\"\n           ),\n           access_mode=\"\
    Private\"\n       )\n\n       return data_feed\n\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.create_datasource_credential
  name: create_datasource_credential
  summary: Create a new datasource credential.
  signature: 'async create_datasource_credential(datasource_credential: DatasourceSqlConnectionString
    | DatasourceDataLakeGen2SharedKey | DatasourceServicePrincipal | DatasourceServicePrincipalInKeyVault,
    **kwargs: Any) -> DatasourceSqlConnectionString | DatasourceDataLakeGen2SharedKey
    | DatasourceServicePrincipal | DatasourceServicePrincipalInKeyVault'
  parameters:
  - name: datasource_credential
    description: The datasource credential to create
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:azure.ai.metricsadvisor.models.DatasourceSqlConnectionString>,
      <xref:azure.ai.metricsadvisor.models.DatasourceDataLakeGen2SharedKey>, <xref:azure.ai.metricsadvisor.models.DatasourceServicePrincipal>,
      <xref:azure.ai.metricsadvisor.models.DatasourceServicePrincipalInKeyVault>]
  return:
    description: The created datasource credential
    types:
    - <xref:typing.Union>[<xref:azure.ai.metricsadvisor.models.DatasourceSqlConnectionString>,
      <xref:azure.ai.metricsadvisor.models.DatasourceDataLakeGen2SharedKey>, <xref:azure.ai.metricsadvisor.models.DatasourceServicePrincipal>,
      <xref:azure.ai.metricsadvisor.models.DatasourceServicePrincipalInKeyVault>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Create a datasource credential<!--[!code-python[Main](les\\async_samples\\sample_datasource_credentials_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\\sample_datasource_credentials_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\
    \   from azure.ai.metricsadvisor.models import DatasourceSqlConnectionString\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n   connection_string = os.getenv(\"SQL_SERVER_CONNECTION_STRING\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   datasource_credential = await client.create_datasource_credential(\n    \
    \   datasource_credential=DatasourceSqlConnectionString(\n           name=\"sql\
    \ datasource credential\",\n           connection_string=connection_string,\n\
    \           description=\"my datasource credential\",\n       )\n   )\n\n   return\
    \ datasource_credential\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.create_detection_configuration
  name: create_detection_configuration
  summary: Create anomaly detection configuration.
  signature: 'async create_detection_configuration(name: str, metric_id: str, whole_series_detection_condition:
    MetricDetectionCondition, **kwargs: Any) -> AnomalyDetectionConfiguration'
  parameters:
  - name: name
    description: The name for the anomaly detection configuration
    isRequired: true
    types:
    - <xref:str>
  - name: metric_id
    description: Required. metric unique id.
    isRequired: true
    types:
    - <xref:str>
  - name: whole_series_detection_condition
    description: 'Required.

      Conditions to detect anomalies in all time series of a metric.'
    isRequired: true
    types:
    - <xref:azure.ai.metricsadvisor.models.MetricDetectionCondition>
  keywordOnlyParameters:
  - name: description
    description: anomaly detection configuration description.
    types:
    - <xref:str>
  - name: series_group_detection_conditions
    description: detection configuration for series group.
    types:
    - <xref:list>[<xref:azure.ai.metricsadvisor.models.MetricSeriesGroupDetectionCondition>]
  - name: series_detection_conditions
    description: detection configuration for specific series.
    types:
    - <xref:list>[<xref:azure.ai.metricsadvisor.models.MetricSingleSeriesDetectionCondition>]
  return:
    description: AnomalyDetectionConfiguration
    types:
    - <xref:azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Create an anomaly detection configuration<!--[!code-python[Main](les\\async_samples\\\
    sample_detection_configuration_async.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\
    \\sample_detection_configuration_async.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.ai.metricsadvisor import\
    \ MetricsAdvisorKeyCredential\n   from azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n\
    \   from azure.ai.metricsadvisor.models import (\n       ChangeThresholdCondition,\n\
    \       HardThresholdCondition,\n       SmartDetectionCondition,\n       SuppressCondition,\n\
    \       MetricDetectionCondition,\n   )\n\n   service_endpoint = os.getenv(\"\
    METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\"\
    )\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n   metric_id = os.getenv(\"\
    METRICS_ADVISOR_METRIC_ID\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   change_threshold_condition = ChangeThresholdCondition(\n   \
    \    anomaly_detector_direction=\"Both\",\n       change_percentage=20,\n    \
    \   shift_point=10,\n       within_range=True,\n       suppress_condition=SuppressCondition(\n\
    \           min_number=5,\n           min_ratio=2\n       )\n   )\n   hard_threshold_condition\
    \ = HardThresholdCondition(\n       anomaly_detector_direction=\"Up\",\n     \
    \  upper_bound=100,\n       suppress_condition=SuppressCondition(\n          \
    \ min_number=2,\n           min_ratio=2\n       )\n   )\n   smart_detection_condition\
    \ = SmartDetectionCondition(\n       anomaly_detector_direction=\"Up\",\n    \
    \   sensitivity=10,\n       suppress_condition=SuppressCondition(\n          \
    \ min_number=2,\n           min_ratio=2\n       )\n   )\n\n   async with client:\n\
    \       detection_config = await client.create_detection_configuration(\n    \
    \       name=\"my_detection_config\",\n           metric_id=metric_id,\n     \
    \      description=\"anomaly detection config for metric\",\n           whole_series_detection_condition=MetricDetectionCondition(\n\
    \               condition_operator=\"OR\",\n               change_threshold_condition=change_threshold_condition,\n\
    \               hard_threshold_condition=hard_threshold_condition,\n         \
    \      smart_detection_condition=smart_detection_condition\n           )\n   \
    \    )\n\n       return detection_config\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.create_hook
  name: create_hook
  summary: Create a new email or web hook.
  signature: 'async create_hook(hook: EmailNotificationHook | WebNotificationHook,
    **kwargs: Any) -> NotificationHook | EmailNotificationHook | WebNotificationHook'
  parameters:
  - name: hook
    description: An email or web hook to create
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:azure.ai.metricsadvisor.models.EmailNotificationHook>,
      <xref:azure.ai.metricsadvisor.models.WebNotificationHook>]
  return:
    description: EmailNotificationHook or WebNotificationHook
    types:
    - <xref:typing.Union>[<xref:azure.ai.metricsadvisor.models.NotificationHook>,
      <xref:azure.ai.metricsadvisor.models.EmailNotificationHook>, <xref:azure.ai.metricsadvisor.models.WebNotificationHook>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Create a notification hook<!--[!code-python[Main](les\\async_samples\\sample_hooks_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\\sample_hooks_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\n   from\
    \ azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n   from\
    \ azure.ai.metricsadvisor.models import EmailNotificationHook\n\n   service_endpoint\
    \ = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"\
    METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   async with client:\n       hook = await client.create_hook(\n           hook=EmailNotificationHook(\n\
    \               name=\"email hook\",\n               description=\"my email hook\"\
    ,\n               emails_to_alert=[\"alertme@alertme.com\"],\n               external_link=\"\
    https://docs.microsoft.com/en-us/azure/cognitive-services/metrics-advisor/how-tos/alerts\"\
    \n           )\n       )\n\n       return hook\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.delete_alert_configuration
  name: delete_alert_configuration
  summary: Delete an anomaly alert configuration by its ID.
  signature: 'async delete_alert_configuration(*alert_configuration_id: str, **kwargs:
    Any) -> None'
  parameters:
  - name: alert_configuration_id
    description: anomaly alert configuration unique id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Delete an anomaly alert configuration by its ID<!--[!code-python[Main](les\\\
    async_samples\\sample_alert_configuration_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\
    \\samples\\\\async_samples\\\\sample_alert_configuration_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.exceptions\
    \ import ResourceNotFoundError\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\n\
    \   from azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   async with client:\n       await client.delete_alert_configuration(alert_config_id)\n\
    \n       try:\n           await client.get_alert_configuration(alert_config_id)\n\
    \       except ResourceNotFoundError:\n           print(\"Alert configuration\
    \ successfully deleted.\")\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.delete_data_feed
  name: delete_data_feed
  summary: Delete a data feed by its ID.
  signature: 'async delete_data_feed(*data_feed_id: str, **kwargs: Any) -> None'
  parameters:
  - name: data_feed_id
    description: The data feed unique id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Delete a data feed by its ID<!--[!code-python[Main](les\\async_samples\\sample_data_feeds_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\\sample_data_feeds_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.core.exceptions import ResourceNotFoundError\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential\n   from azure.ai.metricsadvisor.aio import\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   async with client:\n       await client.delete_data_feed(data_feed_id)\n\
    \n       try:\n           await client.get_data_feed(data_feed_id)\n       except\
    \ ResourceNotFoundError:\n           print(\"Data feed successfully deleted.\"\
    )\n\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.delete_datasource_credential
  name: delete_datasource_credential
  summary: 'Delete a datasource credential by its ID.


    ::param str credential_id: Datasource credential unique ID.

    :return: None

    :rtype: None

    :raises ~azure.core.exceptions.HttpResponseError:'
  signature: 'async delete_datasource_credential(*credential_id: str, **kwargs: Any)
    -> None'
  examples:
  - "Delete a datasource credential by its ID<!--[!code-python[Main](les\\async_samples\\\
    sample_datasource_credentials_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\
    \\sample_datasource_credentials_async.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.core.exceptions import ResourceNotFoundError\n\
    \   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   await client.delete_datasource_credential(credential_id)\n\n\
    \   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.delete_detection_configuration
  name: delete_detection_configuration
  summary: Delete an anomaly detection configuration by its ID.
  signature: 'async delete_detection_configuration(*detection_configuration_id: str,
    **kwargs: Any) -> None'
  parameters:
  - name: detection_configuration_id
    description: anomaly detection configuration unique id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Delete an anomaly detection configuration by its ID<!--[!code-python[Main](les\\\
    async_samples\\sample_detection_configuration_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\
    \\samples\\\\async_samples\\\\sample_detection_configuration_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.exceptions\
    \ import ResourceNotFoundError\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\n\
    \   from azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   async with client:\n       await client.delete_detection_configuration(detection_config_id)\n\
    \n       try:\n           await client.get_detection_configuration(detection_config_id)\n\
    \       except ResourceNotFoundError:\n           print(\"Detection configuration\
    \ successfully deleted.\")\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.delete_hook
  name: delete_hook
  summary: Delete a web or email hook by its ID.
  signature: 'async delete_hook(*hook_id: str, **kwargs: Any) -> None'
  parameters:
  - name: hook_id
    description: Hook unique ID.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Delete a hook by its ID<!--[!code-python[Main](les\\async_samples\\sample_hooks_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\\sample_hooks_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.core.exceptions import ResourceNotFoundError\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential\n   from azure.ai.metricsadvisor.aio import\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   async with client:\n       await client.delete_hook(hook_id)\n\
    \n       try:\n           await client.get_hook(hook_id)\n       except ResourceNotFoundError:\n\
    \           print(\"Hook successfully deleted.\")\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.get_alert_configuration
  name: get_alert_configuration
  summary: Get a single anomaly alert configuration.
  signature: 'async get_alert_configuration(alert_configuration_id: str, **kwargs:
    Any) -> AnomalyAlertConfiguration'
  parameters:
  - name: alert_configuration_id
    description: anomaly alert configuration unique id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: AnomalyAlertConfiguration
    types:
    - <xref:azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get a single anomaly alert configuration by its ID<!--[!code-python[Main](les\\\
    async_samples\\sample_alert_configuration_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\
    \\samples\\\\async_samples\\\\sample_alert_configuration_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential\n   from azure.ai.metricsadvisor.aio import\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   async with client:\n       config = await client.get_alert_configuration(alert_config_id)\n\
    \n       print(\"Alert config ID: {}\".format(config.id))\n       print(\"Alert\
    \ config name: {}\".format(config.name))\n       print(\"Description: {}\".format(config.description))\n\
    \       print(\"Ids of hooks associated with alert: {}\".format(config.hook_ids))\n\
    \       print(\"Use {} operator for multiple alert conditions\\n\".format(config.cross_metrics_operator))\n\
    \n       print(\"Alert uses detection configuration ID: {}\".format(\n       \
    \    config.metric_alert_configurations[0].detection_configuration_id\n      \
    \ ))\n       print(\"Alert scope type: {}\".format(config.metric_alert_configurations[0].alert_scope.scope_type))\n\
    \       print(\"Alert severity condition: min- {}, max- {}\".format(\n       \
    \    config.metric_alert_configurations[0].alert_conditions.severity_condition.min_alert_severity,\n\
    \           config.metric_alert_configurations[0].alert_conditions.severity_condition.max_alert_severity,\n\
    \       ))\n       print(\"\\nAlert uses detection configuration ID: {}\".format(\n\
    \           config.metric_alert_configurations[1].detection_configuration_id\n\
    \       ))\n       print(\"Alert scope type: {}\".format(config.metric_alert_configurations[1].alert_scope.scope_type))\n\
    \       print(\"Top N: {}\".format(config.metric_alert_configurations[1].alert_scope.top_n_group_in_scope.top))\n\
    \       print(\"Point count used to look back: {}\".format(\n           config.metric_alert_configurations[1].alert_scope.top_n_group_in_scope.period\n\
    \       ))\n       print(\"Min top count: {}\".format(\n           config.metric_alert_configurations[1].alert_scope.top_n_group_in_scope.min_top_count\n\
    \       ))\n       print(\"Alert metric boundary condition direction: {}, upper\
    \ bound: {}\".format(\n           config.metric_alert_configurations[1].alert_conditions.metric_boundary_condition.direction,\n\
    \           config.metric_alert_configurations[1].alert_conditions.metric_boundary_condition.upper,\n\
    \       ))\n       print(\"Alert snooze condition, snooze point count: {}\".format(\n\
    \           config.metric_alert_configurations[1].alert_snooze_condition.auto_snooze,\n\
    \       ))\n       print(\"Alert snooze scope: {}\".format(\n           config.metric_alert_configurations[1].alert_snooze_condition.snooze_scope,\n\
    \       ))\n       print(\"Snooze only for successive anomalies?: {}\".format(\n\
    \           config.metric_alert_configurations[1].alert_snooze_condition.only_for_successive,\n\
    \       ))\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.get_data_feed
  name: get_data_feed
  summary: Get a data feed by its id.
  signature: 'async get_data_feed(data_feed_id: str, **kwargs: Any) -> DataFeed'
  parameters:
  - name: data_feed_id
    description: The data feed unique id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: DataFeed
    types:
    - <xref:azure.ai.metricsadvisor.models.DataFeed>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get a data feed by its ID<!--[!code-python[Main](les\\async_samples\\sample_data_feeds_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\\sample_data_feeds_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\n   from\
    \ azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n\n  \
    \ service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   async with client:\n       data_feed = await client.get_data_feed(data_feed_id)\n\
    \n       print(\"ID: {}\".format(data_feed.id))\n       print(\"Data feed name:\
    \ {}\".format(data_feed.name))\n       print(\"Created time: {}\".format(data_feed.created_time))\n\
    \       print(\"Status: {}\".format(data_feed.status))\n       print(\"Source\
    \ type: {}\".format(data_feed.source.data_source_type))\n       print(\"Granularity\
    \ type: {}\".format(data_feed.granularity.granularity_type))\n       print(\"\
    Data feed metrics: {}\".format([metric.name for metric in data_feed.schema.metrics]))\n\
    \       print(\"Data feed dimensions: {}\".format([dimension.name for dimension\
    \ in data_feed.schema.dimensions]))\n       print(\"Data feed timestamp column:\
    \ {}\".format(data_feed.schema.timestamp_column))\n       print(\"Ingestion data\
    \ starting on: {}\".format(data_feed.ingestion_settings.ingestion_begin_time))\n\
    \       print(\"Data feed description: {}\".format(data_feed.data_feed_description))\n\
    \       print(\"Data feed rollup type: {}\".format(data_feed.rollup_settings.rollup_type))\n\
    \       print(\"Data feed rollup method: {}\".format(data_feed.rollup_settings.rollup_method))\n\
    \       print(\"Data feed fill setting: {}\".format(data_feed.missing_data_point_fill_settings.fill_type))\n\
    \       print(\"Data feed access mode: {}\".format(data_feed.access_mode))\n\n\
    \   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.get_data_feed_ingestion_progress
  name: get_data_feed_ingestion_progress
  summary: Get last successful data ingestion job timestamp by data feed.
  signature: 'async get_data_feed_ingestion_progress(data_feed_id: str, **kwargs:
    Any) -> DataFeedIngestionProgress'
  parameters:
  - name: data_feed_id
    description: The data feed unique id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'DataFeedIngestionProgress, containing *latest_success_timestamp*

      and *latest_active_timestamp*'
    types:
    - <xref:azure.ai.metricsadvisor.models.DataFeedIngestionProgress>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get the progress of data feed ingestion<!--[!code-python[Main](les\\async_samples\\\
    sample_ingestion_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\
    \\sample_ingestion_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\n\
    \   from azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n   data_feed_id = os.getenv(\"METRICS_ADVISOR_DATA_FEED_ID\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   async with client:\n       progress = await client.get_data_feed_ingestion_progress(data_feed_id)\n\
    \n       print(\"Lastest active timestamp: {}\".format(progress.latest_active_timestamp))\n\
    \       print(\"Latest successful timestamp: {}\".format(progress.latest_success_timestamp))\n\
    \n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.get_datasource_credential
  name: get_datasource_credential
  summary: Get a datasource credential
  signature: 'async get_datasource_credential(credential_id: str, **kwargs: Any) ->
    DatasourceSqlConnectionString | DatasourceDataLakeGen2SharedKey | DatasourceServicePrincipal
    | DatasourceServicePrincipalInKeyVault'
  parameters:
  - name: credential_id
    description: Datasource credential unique ID.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The datasource credential
    types:
    - <xref:typing.Union>[<xref:azure.ai.metricsadvisor.models.DatasourceCredential>,
      <xref:azure.ai.metricsadvisor.models.DatasourceSqlConnectionString>, <xref:azure.ai.metricsadvisor.models.DatasourceDataLakeGen2SharedKey>,
      <xref:azure.ai.metricsadvisor.models.DatasourceServicePrincipal>, <xref:azure.ai.metricsadvisor.models.DatasourceServicePrincipalInKeyVault>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get a datasource credential by its ID<!--[!code-python[Main](les\\async_samples\\\
    sample_datasource_credentials_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\
    \\sample_datasource_credentials_async.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.ai.metricsadvisor import\
    \ MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\n   service_endpoint\
    \ = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"\
    METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   credential = await client.get_datasource_credential(credential_id)\n\n  \
    \ print(\"Credential type: {}\".format(credential.credential_type))\n   print(\"\
    Credential name: {}\".format(credential.name))\n   print(\"Description: {}\".format(credential.description))\n\
    \n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.get_detection_configuration
  name: get_detection_configuration
  summary: Get a single anomaly detection configuration.
  signature: 'async get_detection_configuration(detection_configuration_id: str, **kwargs:
    Any) -> AnomalyDetectionConfiguration'
  parameters:
  - name: detection_configuration_id
    description: anomaly detection configuration unique id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: AnomalyDetectionConfiguration
    types:
    - <xref:azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get a single anomaly detection configuration by its ID<!--[!code-python[Main](les\\\
    async_samples\\sample_detection_configuration_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\
    \\samples\\\\async_samples\\\\sample_detection_configuration_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential\n   from azure.ai.metricsadvisor.aio import\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   async with client:\n       config = await client.get_detection_configuration(detection_config_id)\n\
    \n       print(\"Detection config name: {}\".format(config.name))\n       print(\"\
    Description: {}\".format(config.description))\n       print(\"Metric ID: {}\"\
    .format(config.metric_id))\n\n       print(\"\\nDetection conditions specified\
    \ for configuration...\")\n       print(\"\\nWhole Series Detection Conditions:\\\
    n\")\n       conditions = config.whole_series_detection_condition\n\n       print(\"\
    Use {} operator for multiple detection conditions\".format(conditions.condition_operator))\n\
    \n       print(\"Smart Detection Condition:\")\n       print(\"- Sensitivity:\
    \ {}\".format(conditions.smart_detection_condition.sensitivity))\n       print(\"\
    - Detection direction: {}\".format(conditions.smart_detection_condition.anomaly_detector_direction))\n\
    \       print(\"- Suppress conditions: minimum number: {}; minimum ratio: {}\"\
    .format(\n           conditions.smart_detection_condition.suppress_condition.min_number,\n\
    \           conditions.smart_detection_condition.suppress_condition.min_ratio\n\
    \       ))\n\n       print(\"Hard Threshold Condition:\")\n       print(\"- Lower\
    \ bound: {}\".format(conditions.hard_threshold_condition.lower_bound))\n     \
    \  print(\"- Upper bound: {}\".format(conditions.hard_threshold_condition.upper_bound))\n\
    \       print(\"- Detection direction: {}\".format(conditions.smart_detection_condition.anomaly_detector_direction))\n\
    \       print(\"- Suppress conditions: minimum number: {}; minimum ratio: {}\"\
    .format(\n           conditions.smart_detection_condition.suppress_condition.min_number,\n\
    \           conditions.smart_detection_condition.suppress_condition.min_ratio\n\
    \       ))\n\n       print(\"Change Threshold Condition:\")\n       print(\"-\
    \ Change percentage: {}\".format(conditions.change_threshold_condition.change_percentage))\n\
    \       print(\"- Shift point: {}\".format(conditions.change_threshold_condition.shift_point))\n\
    \       print(\"- Detect anomaly if within range: {}\".format(conditions.change_threshold_condition.within_range))\n\
    \       print(\"- Detection direction: {}\".format(conditions.smart_detection_condition.anomaly_detector_direction))\n\
    \       print(\"- Suppress conditions: minimum number: {}; minimum ratio: {}\"\
    .format(\n           conditions.smart_detection_condition.suppress_condition.min_number,\n\
    \           conditions.smart_detection_condition.suppress_condition.min_ratio\n\
    \       ))\n\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.get_hook
  name: get_hook
  summary: Get a web or email hook by its id.
  signature: 'async get_hook(hook_id: str, **kwargs: Any) -> NotificationHook | EmailNotificationHook
    | WebNotificationHook'
  parameters:
  - name: hook_id
    description: Hook unique ID.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: EmailNotificationHook or WebNotificationHook
    types:
    - <xref:typing.Union>[<xref:azure.ai.metricsadvisor.models.NotificationHook>,
      <xref:azure.ai.metricsadvisor.models.EmailNotificationHook>, <xref:azure.ai.metricsadvisor.models.WebNotificationHook>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get a notification hook by its ID<!--[!code-python[Main](les\\async_samples\\\
    sample_hooks_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
    \\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
    \\9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\\sample_hooks_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\n   from\
    \ azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n\n  \
    \ service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n   async with client:\n       hook = await client.get_hook(hook_id)\n\
    \n       print(\"Hook name: {}\".format(hook.name))\n       print(\"Description:\
    \ {}\".format(hook.description))\n       print(\"Emails to alert: {}\".format(hook.emails_to_alert))\n\
    \       print(\"External link: {}\".format(hook.external_link))\n       print(\"\
    Admins: {}\".format(hook.admins))\n\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.list_alert_configurations
  name: list_alert_configurations
  summary: Query all anomaly alert configurations for specific anomaly detection configuration.
  signature: 'list_alert_configurations(detection_configuration_id: str, **kwargs:
    Any) -> AsyncItemPaged[AnomalyAlertConfiguration]'
  parameters:
  - name: detection_configuration_id
    description: anomaly detection configuration unique id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Pageable of AnomalyAlertConfiguration
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "List all anomaly alert configurations for specific anomaly detection configuration<!--[!code-python[Main](les\\\
    async_samples\\sample_alert_configuration_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\
    \\samples\\\\async_samples\\\\sample_alert_configuration_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential\n   from azure.ai.metricsadvisor.aio import\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n   detection_configuration_id = os.getenv(\"\
    METRICS_ADVISOR_DETECTION_CONFIGURATION_ID\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   async with client:\n       configs = client.list_alert_configurations(detection_configuration_id)\n\
    \       async for config in configs:\n           print(\"Alert config name: {}\"\
    .format(config.name))\n           print(\"Alert description: {}\".format(config.description))\n\
    \           print(\"Ids of hooks associated with alert: {}\\n\".format(config.hook_ids))\n\
    \n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.list_data_feed_ingestion_status
  name: list_data_feed_ingestion_status
  summary: Get data ingestion status by data feed.
  signature: 'list_data_feed_ingestion_status(data_feed_id: str, start_time: str |
    datetime, end_time: str | datetime, **kwargs: Any) -> AsyncItemPaged[IngestionStatus]'
  parameters:
  - name: data_feed_id
    description: The data feed unique id.
    isRequired: true
    types:
    - <xref:str>
  - name: start_time
    description: Required. the start point of time range to query data ingestion status.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  - name: end_time
    description: Required. the end point of time range to query data ingestion status.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  keywordOnlyParameters:
  - name: skip
    types:
    - <xref:int>
  return:
    description: Pageable of DataFeedIngestionStatus
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.ai.metricsadvisor.models.DataFeedIngestionStatus>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "List the data feed ingestion statuses by data feed ID<!--[!code-python[Main](les\\\
    async_samples\\sample_ingestion_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\
    \\sample_ingestion_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   import datetime\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential\n   from azure.ai.metricsadvisor.aio import\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n   data_feed_id = os.getenv(\"METRICS_ADVISOR_DATA_FEED_ID\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   async with client:\n       ingestion_status = client.list_data_feed_ingestion_status(\n\
    \           data_feed_id,\n           datetime.datetime(2020, 9, 20),\n      \
    \     datetime.datetime(2020, 9, 25)\n       )\n       async for status in ingestion_status:\n\
    \           print(\"Timestamp: {}\".format(status.timestamp))\n           print(\"\
    Status: {}\".format(status.status))\n           print(\"Message: {}\\n\".format(status.message))\n\
    \n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.list_data_feeds
  name: list_data_feeds
  summary: List all data feeds.
  signature: 'list_data_feeds(**kwargs: Any) -> AsyncItemPaged[DataFeed]'
  keywordOnlyParameters:
  - name: data_feed_name
    description: filter data feed by its name.
    types:
    - <xref:str>
  - name: data_source_type
    description: filter data feed by its source type.
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.DatasourceType>
  - name: granularity_type
    description: filter data feed by its granularity.
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.DataFeedGranularityType>
  - name: status
    description: filter data feed by its status.
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.DataFeedStatus>
  - name: creator
    description: filter data feed by its creator.
    types:
    - <xref:str>
  - name: skip
    types:
    - <xref:int>
  return:
    description: Pageable of DataFeed
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.ai.metricsadvisor.models.DataFeed>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "List data feeds under an account.<!--[!code-python[Main](les\\async_samples\\\
    sample_data_feeds_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\
    \\sample_data_feeds_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\n\
    \   from azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   async with client:\n       data_feeds = client.list_data_feeds()\n\
    \n       async for feed in data_feeds:\n           print(\"Data feed name: {}\"\
    .format(feed.name))\n           print(\"ID: {}\".format(feed.id))\n          \
    \ print(\"Created time: {}\".format(feed.created_time))\n           print(\"Status:\
    \ {}\".format(feed.status))\n           print(\"Source type: {}\".format(feed.source.data_source_type))\n\
    \           print(\"Granularity type: {}\".format(feed.granularity.granularity_type))\n\
    \n           print(\"\\nFeed metrics:\")\n           for metric in feed.schema.metrics:\n\
    \               print(metric.name)\n\n           print(\"\\nFeed dimensions:\"\
    )\n           for dimension in feed.schema.dimensions:\n               print(dimension.name)\n\
    \n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.list_datasource_credentials
  name: list_datasource_credentials
  summary: List all datasource credential.
  signature: 'list_datasource_credentials(**kwargs: Any) -> AsyncItemPaged[DatasourceSqlConnectionString
    | DatasourceDataLakeGen2SharedKey | DatasourceServicePrincipal | DatasourceServicePrincipalInKeyVault]'
  parameters:
  - name: skip
    description: for paging, skipped number.
    isRequired: true
    types:
    - <xref:int>
  return:
    description: Pageable containing datasource credentials
    types:
    - <xref:azure.core.paging.AsyncItemPaged>[<xref:typing.Union>[ <xref:azure.ai.metricsadvisor.models.DatasourceCredential>,
      <xref:azure.ai.metricsadvisor.models.DatasourceSqlConnectionString>, <xref:azure.ai.metricsadvisor.models.DatasourceDataLakeGen2SharedKey>,
      <xref:azure.ai.metricsadvisor.models.DatasourceServicePrincipal>, <xref:azure.ai.metricsadvisor.models.DatasourceServicePrincipalInKeyVault>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "List all of the datasource credentials under the account<!--[!code-python[Main](les\\\
    async_samples\\sample_datasource_credentials_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\
    \\samples\\\\async_samples\\\\sample_datasource_credentials_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\n \
    \  service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   credentials = client.list_datasource_credentials()\n   async\
    \ for credential in credentials:\n       print(\"Credential type: {}\".format(credential.credential_type))\n\
    \       print(\"Credential name: {}\".format(credential.name))\n       print(\"\
    Description: {}\\n\".format(credential.description))\n\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.list_detection_configurations
  name: list_detection_configurations
  summary: Query all anomaly detection configurations for specific metric.
  signature: 'list_detection_configurations(metric_id: str, **kwargs: Any) -> AsyncItemPaged[AnomalyDetectionConfiguration]'
  parameters:
  - name: metric_id
    description: metric unique id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Pageable of AnomalyDetectionConfiguration
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "List all anomaly detection configurations for a specific metric<!--[!code-python[Main](les\\\
    async_samples\\sample_detection_configuration_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\
    \\samples\\\\async_samples\\\\sample_detection_configuration_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential\n   from azure.ai.metricsadvisor.aio import\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n   metric_id = os.getenv(\"METRICS_ADVISOR_METRIC_ID\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   async with client:\n       configs = client.list_detection_configurations(metric_id=metric_id)\n\
    \       async for config in configs:\n           print(\"Detection config name:\
    \ {}\".format(config.name))\n           print(\"Description: {}\".format(config.description))\n\
    \           print(\"Metric ID: {}\\n\".format(config.metric_id))\n\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.list_hooks
  name: list_hooks
  summary: List all hooks.
  signature: 'list_hooks(**kwargs: Any) -> AsyncItemPaged[NotificationHook | EmailNotificationHook
    | WebNotificationHook]'
  keywordOnlyParameters:
  - name: hook_name
    description: filter hook by its name.
    types:
    - <xref:str>
  - name: skip
    types:
    - <xref:int>
  return:
    description: Pageable containing EmailNotificationHook and WebNotificationHook
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:typing.Union>[<xref:azure.ai.metricsadvisor.models.NotificationHook>,
      <xref:azure.ai.metricsadvisor.models.EmailNotificationHook>, <xref:azure.ai.metricsadvisor.models.WebNotificationHook>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "List all the notification hooks under an account<!--[!code-python[Main](les\\\
    async_samples\\sample_hooks_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\
    \\sample_hooks_async.py\", \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\
    \n````python\n\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\n\
    \   from azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   async with client:\n       hooks = client.list_hooks()\n   \
    \    async for hook in hooks:\n           print(\"Hook type: {}\".format(hook.hook_type))\n\
    \           print(\"Hook name: {}\".format(hook.name))\n           print(\"Description:\
    \ {}\\n\".format(hook.description))\n\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.refresh_data_feed_ingestion
  name: refresh_data_feed_ingestion
  summary: Refreshes data ingestion by data feed to backfill data.
  signature: 'async refresh_data_feed_ingestion(data_feed_id: str, start_time: str
    | datetime, end_time: str | datetime, **kwargs: Any) -> None'
  parameters:
  - name: data_feed_id
    description: The data feed unique id.
    isRequired: true
    types:
    - <xref:str>
  - name: start_time
    description: The start point of time range to refresh data ingestion.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  - name: end_time
    description: The end point of time range to refresh data ingestion.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Refresh data feed ingestion over a period of time<!--[!code-python[Main](les\\\
    async_samples\\sample_ingestion_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\
    \\sample_ingestion_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   import datetime\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential\n   from azure.ai.metricsadvisor.aio import\
    \ MetricsAdvisorAdministrationClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n   data_feed_id = os.getenv(\"METRICS_ADVISOR_DATA_FEED_ID\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   async with client:\n       await client.refresh_data_feed_ingestion(\n  \
    \         data_feed_id,\n           datetime.datetime(2020, 9, 20),\n        \
    \   datetime.datetime(2020, 9, 25)\n       )\n\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.update_alert_configuration
  name: update_alert_configuration
  summary: 'Update anomaly alerting configuration. Either pass the entire AnomalyAlertConfiguration
    object

    with the chosen updates or the ID to your alert configuration with updates passed
    via keyword arguments.

    If you pass both the AnomalyAlertConfiguration object and keyword arguments, the
    keyword arguments

    will take precedence.'
  signature: 'async update_alert_configuration(alert_configuration: str | AnomalyAlertConfiguration,
    **kwargs: Any) -> AnomalyAlertConfiguration'
  parameters:
  - name: alert_configuration
    description: AnomalyAlertConfiguration object or the ID to the alert configuration.
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
  keywordOnlyParameters:
  - name: name
    description: Name for the anomaly alert configuration.
    types:
    - <xref:str>
  - name: metric_alert_configurations
    description: Anomaly alert configurations.
    types:
    - <xref:list>[<xref:azure.ai.metricsadvisor.models.MetricAlertConfiguration>]
  - name: hook_ids
    description: Unique hook IDs.
    types:
    - <xref:list>[<xref:str>]
  - name: cross_metrics_operator
    description: 'Cross metrics operator should be specified when setting up multiple
      metric

      alert configurations. Possible values include: "AND", "OR", "XOR".'
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.MetricAnomalyAlertConfigurationsOperator>
  - name: description
    description: Anomaly alert configuration description.
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Update an existing anomaly alert configuration<!--[!code-python[Main](les\\async_samples\\\
    sample_alert_configuration_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\
    \\sample_alert_configuration_async.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.ai.metricsadvisor import\
    \ MetricsAdvisorKeyCredential\n   from azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n\
    \   from azure.ai.metricsadvisor.models import (\n       MetricAlertConfiguration,\n\
    \       MetricAnomalyAlertScope,\n       MetricAnomalyAlertConditions,\n     \
    \  MetricBoundaryCondition\n   )\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n   detection_configuration_id = os.getenv(\"\
    METRICS_ADVISOR_DETECTION_CONFIGURATION_ID\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   alert_config.name = \"updated config name\"\n   additional_alert\
    \ = MetricAlertConfiguration(\n       detection_configuration_id=detection_configuration_id,\n\
    \       alert_scope=MetricAnomalyAlertScope(\n           scope_type=\"SeriesGroup\"\
    ,\n           series_group_in_scope={'city': 'Shenzhen'}\n       ),\n       alert_conditions=MetricAnomalyAlertConditions(\n\
    \           metric_boundary_condition=MetricBoundaryCondition(\n             \
    \  direction=\"Down\",\n               lower=5\n           )\n       )\n   )\n\
    \   alert_config.metric_alert_configurations.append(additional_alert)\n\n   async\
    \ with client:\n       updated = await client.update_alert_configuration(\n  \
    \         alert_config,\n           cross_metrics_operator=\"OR\",\n         \
    \  description=\"updated alert config\"\n       )\n       print(\"Updated alert\
    \ name: {}\".format(updated.name))\n       print(\"Updated alert description:\
    \ {}\".format(updated.description))\n       print(\"Updated cross metrics operator:\
    \ {}\".format(updated.cross_metrics_operator))\n       print(\"Updated alert condition\
    \ configuration scope type: {}\".format(\n           updated.metric_alert_configurations[2].alert_scope.scope_type\n\
    \       ))\n\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.update_data_feed
  name: update_data_feed
  summary: 'Update a data feed. Either pass the entire DataFeed object with the chosen
    updates

    or the ID to your data feed with updates passed via keyword arguments. If you
    pass both

    the DataFeed object and keyword arguments, the keyword arguments will take precedence.'
  signature: 'async update_data_feed(data_feed: str | DataFeed, **kwargs: Any) ->
    DataFeed'
  parameters:
  - name: data_feed
    description: The data feed with updates or the data feed ID.
    isRequired: true
    types:
    - <xref:azure.ai.metricsadvisor.models.DataFeed>
    - <xref:str>
  keywordOnlyParameters:
  - name: name
    description: The name to update the data feed.
    types:
    - <xref:str>
  - name: timestamp_column
    description: User-defined timestamp column name.
    types:
    - <xref:str>
  - name: ingestion_begin_time
    description: Ingestion start time.
    types:
    - <xref:datetime.datetime>
  - name: data_source_request_concurrency
    description: 'The max concurrency of data ingestion queries against

      user data source. Zero (0) means no limitation.'
    types:
    - <xref:int>
  - name: ingestion_retry_delay
    description: The min retry interval for failed data ingestion tasks, in seconds.
    types:
    - <xref:int>
  - name: ingestion_start_offset
    description: 'The time that the beginning of data ingestion task will delay

      for every data slice according to this offset, in seconds.'
    types:
    - <xref:int>
  - name: stop_retry_after
    description: 'Stop retry data ingestion after the data slice first

      schedule time in seconds.'
    types:
    - <xref:int>
  - name: rollup_identification_value
    description: 'The identification value for the row of calculated

      all-up value.'
    types:
    - <xref:str>
  - name: rollup_type
    description: 'Mark if the data feed needs rollup. Possible values include: "NoRollup",

      "AutoRollup", "AlreadyRollup". Default value: "AutoRollup".'
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.DataFeedRollupType>
  - name: auto_rollup_group_by_column_names
    description: Roll up columns.
    types:
    - <xref:list>[<xref:str>]
  - name: rollup_method
    description: 'Roll up method. Possible values include: "None", "Sum", "Max", "Min",

      "Avg", "Count".'
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.DataFeedAutoRollupMethod>
  - name: fill_type
    description: 'The type of fill missing point for anomaly detection. Possible

      values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
      Default value:

      "SmartFilling".'
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.DatasourceMissingDataPointFillType>
  - name: custom_fill_value
    description: 'The value of fill missing point for anomaly detection

      if "CustomValue" fill type is specified.'
    types:
    - <xref:float>
  - name: admins
    description: Data feed administrators.
    types:
    - <xref:list>[<xref:str>]
  - name: data_feed_description
    description: Data feed description.
    types:
    - <xref:str>
  - name: viewers
    description: Data feed viewers.
    types:
    - <xref:list>[<xref:str>]
  - name: access_mode
    description: 'Data feed access mode. Possible values include:

      "Private", "Public". Default value: "Private".'
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.DataFeedAccessMode>
  - name: action_link_template
    description: action link for alert.
    types:
    - <xref:str>
  - name: status
    description: 'Data feed status. Possible values include: "Active", "Paused".'
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.DataFeedStatus>
  - name: source
    description: The source of the data feed for update
    types:
    - <xref:typing.Union>[<xref:azure.ai.metricsadvisor.models.AzureApplicationInsightsDataFeedSource>,
      <xref:azure.ai.metricsadvisor.models.AzureBlobDataFeedSource>, <xref:azure.ai.metricsadvisor.models.AzureCosmosDbDataFeedSource>,
      <xref:azure.ai.metricsadvisor.models.AzureDataExplorerDataFeedSource>, <xref:azure.ai.metricsadvisor.models.AzureDataLakeStorageGen2DataFeedSource>,
      <xref:azure.ai.metricsadvisor.models.AzureTableDataFeedSource>, <xref:azure.ai.metricsadvisor.models.AzureLogAnalyticsDataFeedSource>,
      <xref:azure.ai.metricsadvisor.models.InfluxDbDataFeedSource>, <xref:azure.ai.metricsadvisor.models.MySqlDataFeedSource>,
      <xref:azure.ai.metricsadvisor.models.PostgreSqlDataFeedSource>, <xref:azure.ai.metricsadvisor.models.SqlServerDataFeedSource>,
      <xref:azure.ai.metricsadvisor.models.MongoDbDataFeedSource>, <xref:azure.ai.metricsadvisor.models.AzureEventHubsDataFeedSource>]
  return:
    types:
    - <xref:azure.ai.metricsadvisor.models.DataFeed>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Update an existing data feed<!--[!code-python[Main](les\\async_samples\\sample_data_feeds_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\\sample_data_feeds_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\n   from\
    \ azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n\n  \
    \ service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   # update data feed on the data feed itself or by using available\
    \ keyword arguments\n   data_feed.name = \"updated name\"\n   data_feed.data_feed_description\
    \ = \"updated description for data feed\"\n\n   async with client:\n       updated\
    \ = await client.update_data_feed(\n           data_feed,\n           access_mode=\"\
    Public\",\n           fill_type=\"CustomValue\",\n           custom_fill_value=1\n\
    \       )\n       print(\"Updated name: {}\".format(updated.name))\n       print(\"\
    Updated description: {}\".format(updated.data_feed_description))\n       print(\"\
    Updated access mode: {}\".format(updated.access_mode))\n       print(\"Updated\
    \ fill setting, value: {}, {}\".format(\n           updated.missing_data_point_fill_settings.fill_type,\n\
    \           updated.missing_data_point_fill_settings.custom_fill_value,\n    \
    \   ))\n\n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.update_datasource_credential
  name: update_datasource_credential
  summary: Update a credential entity.
  signature: 'async update_datasource_credential(datasource_credential: DatasourceSqlConnectionString
    | DatasourceDataLakeGen2SharedKey | DatasourceServicePrincipal | DatasourceServicePrincipalInKeyVault,
    **kwargs: Any) -> DatasourceSqlConnectionString | DatasourceDataLakeGen2SharedKey
    | DatasourceServicePrincipal | DatasourceServicePrincipalInKeyVault'
  parameters:
  - name: datasource_credential
    description: The new datasource credential object
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:azure.ai.metricsadvisor.models.DatasourceSqlConnectionString>,
      <xref:azure.ai.metricsadvisor.models.DatasourceDataLakeGen2SharedKey>, <xref:azure.ai.metricsadvisor.models.DatasourceServicePrincipal>,
      <xref:azure.ai.metricsadvisor.models.DatasourceServicePrincipalInKeyVault>]
  return:
    types:
    - <xref:typing.Union>[<xref:azure.ai.metricsadvisor.models.DatasourceSqlConnectionString>,
      <xref:azure.ai.metricsadvisor.models.DatasourceDataLakeGen2SharedKey>, <xref:azure.ai.metricsadvisor.models.DatasourceServicePrincipal>,
      <xref:azure.ai.metricsadvisor.models.DatasourceServicePrincipalInKeyVault>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Update an existing datasource credential<!--[!code-python[Main](les\\async_samples\\\
    sample_datasource_credentials_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\
    \\sample_datasource_credentials_async.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.ai.metricsadvisor import\
    \ MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClient\n\n   service_endpoint\
    \ = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"\
    METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   datasource_credential.description = \"updated description\"\n\n   updated\
    \ = await client.update_datasource_credential(datasource_credential)\n   print(\"\
    Credential type: {}\".format(updated.credential_type))\n   print(\"Credential\
    \ name: {}\".format(updated.name))\n   print(\"Description: {}\\n\".format(updated.description))\n\
    \n   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.update_detection_configuration
  name: update_detection_configuration
  summary: 'Update anomaly metric detection configuration. Either pass the entire
    AnomalyDetectionConfiguration object

    with the chosen updates or the ID to your detection configuration with updates
    passed via keyword arguments.

    If you pass both the AnomalyDetectionConfiguration object and keyword arguments,
    the keyword arguments

    will take precedence.'
  signature: 'async update_detection_configuration(detection_configuration: str |
    AnomalyDetectionConfiguration, **kwargs: Any) -> AnomalyDetectionConfiguration'
  parameters:
  - name: detection_configuration
    description: 'AnomalyDetectionConfiguration object or the ID to the detection

      configuration.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
  keywordOnlyParameters:
  - name: name
    description: The name for the anomaly detection configuration
    types:
    - <xref:str>
  - name: metric_id
    description: metric unique id.
    types:
    - <xref:str>
  - name: whole_series_detection_condition
    description: 'Required.

      Conditions to detect anomalies in all time series of a metric.'
    types:
    - <xref:azure.ai.metricsadvisor.models.MetricDetectionCondition>
  - name: description
    description: anomaly detection configuration description.
    types:
    - <xref:str>
  - name: series_group_detection_conditions
    description: detection configuration for series group.
    types:
    - <xref:list>[<xref:azure.ai.metricsadvisor.models.MetricSeriesGroupDetectionCondition>]
  - name: series_detection_conditions
    description: detection configuration for specific series.
    types:
    - <xref:list>[<xref:azure.ai.metricsadvisor.models.MetricSingleSeriesDetectionCondition>]
  return:
    description: AnomalyDetectionConfiguration
    types:
    - <xref:azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Update an existing anomaly detection configuration<!--[!code-python[Main](les\\\
    async_samples\\sample_detection_configuration_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\
    \\samples\\\\async_samples\\\\sample_detection_configuration_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential\n   from azure.ai.metricsadvisor.aio import\
    \ MetricsAdvisorAdministrationClient\n   from azure.ai.metricsadvisor.models import\
    \ (\n       MetricSeriesGroupDetectionCondition,\n       MetricSingleSeriesDetectionCondition,\n\
    \       SmartDetectionCondition,\n       SuppressCondition\n   )\n\n   service_endpoint\
    \ = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"\
    METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
    )\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n      \
    \                           MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   detection_config.name = \"updated config name\"\n   detection_config.description\
    \ = \"updated with more detection conditions\"\n   smart_detection_condition =\
    \ SmartDetectionCondition(\n       anomaly_detector_direction=\"Up\",\n      \
    \ sensitivity=10,\n       suppress_condition=SuppressCondition(\n           min_number=2,\n\
    \           min_ratio=2\n       )\n   )\n\n   async with client:\n       updated\
    \ = await client.update_detection_configuration(\n           detection_config,\n\
    \           series_group_detection_conditions=[\n               MetricSeriesGroupDetectionCondition(\n\
    \                   series_group_key={\"city\": \"Seoul\"},\n                \
    \   smart_detection_condition=smart_detection_condition\n               )\n  \
    \         ],\n           series_detection_conditions=[\n               MetricSingleSeriesDetectionCondition(\n\
    \                   series_key={\"city\": \"Osaka\", \"category\": \"Cell Phones\"\
    },\n                   smart_detection_condition=smart_detection_condition\n \
    \              )\n           ]\n       )\n       print(\"Updated detection name:\
    \ {}\".format(updated.name))\n       print(\"Updated detection description: {}\"\
    .format(updated.description))\n       print(\"Updated detection condition for\
    \ series group: {}\".format(\n           updated.series_group_detection_conditions[0].series_group_key\n\
    \       ))\n       print(\"Updated detection condition for series: {}\".format(\n\
    \           updated.series_detection_conditions[0].series_key\n       ))\n\n\n\
    \   ````\n"
- uid: azure.ai.metricsadvisor.aio.MetricsAdvisorAdministrationClient.update_hook
  name: update_hook
  summary: 'Update a hook. Either pass the entire EmailNotificationHook or WebNotificationHook
    object with the

    chosen updates, or the ID to your hook configuration with the updates passed via
    keyword arguments.

    If you pass both the hook object and keyword arguments, the keyword arguments
    will take precedence.'
  signature: 'async update_hook(hook: str | EmailNotificationHook | WebNotificationHook,
    **kwargs: Any) -> NotificationHook | EmailNotificationHook | WebNotificationHook'
  parameters:
  - name: hook
    description: An email or web hook or the ID to the hook. If an ID is passed, you
      must pass *hook_type*.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:azure.ai.metricsadvisor.models.EmailNotificationHook>,
      <xref:azure.ai.metricsadvisor.models.WebNotificationHook>]
  keywordOnlyParameters:
  - name: hook_type
    description: 'The hook type. Possible values are "Email" or "Web". Must be passed
      if only the

      hook ID is provided.'
    types:
    - <xref:str>
  - name: name
    description: Hook unique name.
    types:
    - <xref:str>
  - name: description
    description: Hook description.
    types:
    - <xref:str>
  - name: external_link
    description: Hook external link.
    types:
    - <xref:str>
  - name: emails_to_alert
    description: 'Email TO: list. Only should be passed to update EmailNotificationHook.'
    types:
    - <xref:list>[<xref:str>]
  - name: endpoint
    description: 'API address, will be called when alert is triggered, only support

      POST method via SSL. Only should be passed to update WebNotificationHook.'
    types:
    - <xref:str>
  - name: username
    description: basic authentication. Only should be passed to update WebNotificationHook.
    types:
    - <xref:str>
  - name: password
    description: basic authentication. Only should be passed to update WebNotificationHook.
    types:
    - <xref:str>
  - name: certificate_key
    description: client certificate. Only should be passed to update WebNotificationHook.
    types:
    - <xref:str>
  - name: certificate_password
    description: 'client certificate password. Only should be passed to update

      WebNotificationHook.'
    types:
    - <xref:str>
  return:
    types:
    - <xref:typing.Union>[<xref:azure.ai.metricsadvisor.models.NotificationHook>,
      <xref:azure.ai.metricsadvisor.models.EmailNotificationHook>, <xref:azure.ai.metricsadvisor.models.WebNotificationHook>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Update an existing notification hook<!--[!code-python[Main](les\\async_samples\\\
    sample_hooks_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
    \\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
    \\9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\async_samples\\\\sample_hooks_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential\n   from\
    \ azure.ai.metricsadvisor.aio import MetricsAdvisorAdministrationClient\n\n  \
    \ service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorAdministrationClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   hook.name = \"updated hook name\"\n   hook.description = \"\
    updated hook description\"\n\n   async with client:\n       updated = await client.update_hook(\n\
    \           hook,\n           emails_to_alert=[\"newemail@alertme.com\"]\n   \
    \    )\n       print(\"Updated name: {}\".format(updated.name))\n       print(\"\
    Updated description: {}\".format(updated.description))\n       print(\"Updated\
    \ emails: {}\".format(updated.emails_to_alert))\n\n   ````\n"
