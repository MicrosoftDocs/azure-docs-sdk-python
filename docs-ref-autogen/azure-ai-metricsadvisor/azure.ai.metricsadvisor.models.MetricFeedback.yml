### YamlMime:PythonClass
uid: azure.ai.metricsadvisor.models.MetricFeedback
name: MetricFeedback
fullName: azure.ai.metricsadvisor.models.MetricFeedback
module: azure.ai.metricsadvisor.models
inheritances:
- builtins.dict
summary: 'Feedback base class


  Variables are only populated by the server, and will be ignored when sending a request.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: MetricFeedback(feedback_type, metric_id, dimension_key, **kwargs)
  parameters:
  - name: feedback_type
    isRequired: true
  - name: metric_id
    isRequired: true
  - name: dimension_key
    isRequired: true
variables:
- description: 'Required. feedback type.Constant filled by server.  Possible values

    include: "Anomaly", "ChangePoint", "Period", "Comment".'
  name: feedback_type
  types:
  - <xref:str>
  - <xref:azure.ai.metricsadvisor.models.FeedbackType>
- description: feedback unique id.
  name: id
  types:
  - <xref:str>
- description: feedback created time.
  name: created_time
  types:
  - <xref:datetime.datetime>
- description: user who gives this feedback.
  name: user_principal
  types:
  - <xref:str>
- description: Required. metric unique id.
  name: metric_id
  types:
  - <xref:str>
- description: Required. metric dimension filter.
  name: dimension_key
  types:
  - <xref:dict>[<xref:str>, <xref:str>]
methods:
- uid: azure.ai.metricsadvisor.models.MetricFeedback.clear
  name: clear
  signature: clear() -> None.  Remove all items from D.
- uid: azure.ai.metricsadvisor.models.MetricFeedback.copy
  name: copy
  signature: copy() -> a shallow copy of D
- uid: azure.ai.metricsadvisor.models.MetricFeedback.fromkeys
  name: fromkeys
  summary: Create a new dictionary with keys from iterable and values set to value.
  signature: fromkeys(value=None, /)
  positionalOnlyParameters:
  - name: iterable
    isRequired: true
  - name: value
    defaultValue: None
  parameters:
  - name: type
    isRequired: true
- uid: azure.ai.metricsadvisor.models.MetricFeedback.get
  name: get
  summary: Return the value for key if key is in the dictionary, else default.
  signature: get(key, default=None, /)
  positionalOnlyParameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.metricsadvisor.models.MetricFeedback.items
  name: items
  signature: items() -> a set-like object providing a view on D's items
- uid: azure.ai.metricsadvisor.models.MetricFeedback.keys
  name: keys
  signature: keys() -> a set-like object providing a view on D's keys
- uid: azure.ai.metricsadvisor.models.MetricFeedback.pop
  name: pop
  summary: 'If the key is not found, return the default if given; otherwise,

    raise a KeyError.'
  signature: pop(k, [d]) -> v, remove specified key and return the corresponding value.
- uid: azure.ai.metricsadvisor.models.MetricFeedback.popitem
  name: popitem
  summary: 'Remove and return a (key, value) pair as a 2-tuple.


    Pairs are returned in LIFO (last-in, first-out) order.

    Raises KeyError if the dict is empty.'
  signature: popitem()
- uid: azure.ai.metricsadvisor.models.MetricFeedback.setdefault
  name: setdefault
  summary: 'Insert key with a value of default if key is not in the dictionary.


    Return the value for key if key is in the dictionary, else default.'
  signature: setdefault(key, default=None, /)
  positionalOnlyParameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.metricsadvisor.models.MetricFeedback.update
  name: update
  summary: 'If E is present and has a .keys() method, then does:  for k in E: D[k]
    = E[k]

    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] =
    v

    In either case, this is followed by: for k in F:  D[k] = F[k]'
  signature: update([E], **F) -> None.  Update D from dict/iterable E and F.
- uid: azure.ai.metricsadvisor.models.MetricFeedback.values
  name: values
  signature: values() -> an object providing a view on D's values
