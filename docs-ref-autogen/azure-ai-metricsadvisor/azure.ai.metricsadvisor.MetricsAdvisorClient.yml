### YamlMime:PythonClass
uid: azure.ai.metricsadvisor.MetricsAdvisorClient
name: MetricsAdvisorClient
fullName: azure.ai.metricsadvisor.MetricsAdvisorClient
module: azure.ai.metricsadvisor
inheritances:
- builtins.object
summary: Represents an client that calls restful API of Azure Metrics Advisor service.
constructor:
  syntax: 'MetricsAdvisorClient(endpoint: str, credential: MetricsAdvisorKeyCredential,
    **kwargs: Any)'
  parameters:
  - name: endpoint
    description: 'Supported Cognitive Services endpoints (protocol and hostname,

      for example: [https://](https://)`<resource-name>`.cognitiveservices.azure.com).'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'An instance of ~azure.ai.metricsadvisor.MetricsAdvisorKeyCredential.

      which requires both subscription key and API key. Or an object which can provide
      an access

      token for the vault, such as a credential from <xref:azure.identity>'
    isRequired: true
    types:
    - <xref:azure.ai.metricsadvisor.MetricsAdvisorKeyCredential>
    - <xref:azure.core.credentials.TokenCredential>
methods:
- uid: azure.ai.metricsadvisor.MetricsAdvisorClient.add_feedback
  name: add_feedback
  summary: Create a new metric feedback.
  signature: 'add_feedback(feedback: AnomalyFeedback | ChangePointFeedback | CommentFeedback
    | PeriodFeedback, **kwargs: Any) -> None'
  parameters:
  - name: feedback
    description: metric feedback.
    isRequired: true
    types:
    - <xref:azure.ai.metricsadvisor.models.AnomalyFeedback>
    - <xref:azure.ai.metricsadvisor.models.ChangePointFeedback>
    - <xref:azure.ai.metricsadvisor.models.CommentFeedback>
    - <xref:azure.ai.metricsadvisor.models.PeriodFeedback>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Add new feedback.<!--[!code-python[Main](les\\sample_feedback.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\
    \\samples\\\\sample_feedback.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential,\
    \ MetricsAdvisorClient\n   from azure.ai.metricsadvisor.models import AnomalyFeedback,\
    \ ChangePointFeedback, CommentFeedback, PeriodFeedback\n\n   service_endpoint\
    \ = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"\
    METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
    )\n   metric_id = os.getenv(\"METRICS_ADVISOR_METRIC_ID\")\n\n   client = MetricsAdvisorClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   anomaly_feedback = AnomalyFeedback(metric_id=metric_id,\n  \
    \                                    dimension_key={\"Dim1\": \"Common Lime\"\
    },\n                                      start_time=datetime.datetime(2020, 8,\
    \ 5),\n                                      end_time=datetime.datetime(2020,\
    \ 8, 7),\n                                      value=\"NotAnomaly\")\n   client.add_feedback(anomaly_feedback)\n\
    \n   change_point_feedback = ChangePointFeedback(metric_id=metric_id,\n      \
    \                                         dimension_key={\"Dim1\": \"Common Lime\"\
    },\n                                               start_time=datetime.datetime(2020,\
    \ 8, 5),\n                                               end_time=datetime.datetime(2020,\
    \ 8, 7),\n                                               value=\"NotChangePoint\"\
    )\n   client.add_feedback(change_point_feedback)\n\n   comment_feedback = CommentFeedback(metric_id=metric_id,\n\
    \                                      dimension_key={\"Dim1\": \"Common Lime\"\
    },\n                                      start_time=datetime.datetime(2020, 8,\
    \ 5),\n                                      end_time=datetime.datetime(2020,\
    \ 8, 7),\n                                      value=\"comment\")\n   client.add_feedback(comment_feedback)\n\
    \n   period_feedback = PeriodFeedback(metric_id=metric_id,\n                 \
    \                   dimension_key={\"Dim1\": \"Common Lime\"},\n             \
    \                       start_time=datetime.datetime(2020, 8, 5),\n          \
    \                          end_time=datetime.datetime(2020, 8, 7),\n         \
    \                           period_type=\"AssignValue\",\n                   \
    \                 value=2)\n   client.add_feedback(period_feedback)\n\n   ````\n"
- uid: azure.ai.metricsadvisor.MetricsAdvisorClient.close
  name: close
  summary: Close the <xref:azure.ai.metricsadvisor.MetricsAdvisorClient> session.
  signature: close() -> None
- uid: azure.ai.metricsadvisor.MetricsAdvisorClient.get_feedback
  name: get_feedback
  summary: Get a metric feedback by its id.
  signature: 'get_feedback(feedback_id: str, **kwargs: Any) -> MetricFeedback | FeedbackUnion'
  parameters:
  - name: feedback_id
    description: the id of the feedback.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The feedback object
    types:
    - <xref:azure.ai.metricsadvisor.models.MetricFeedback>
    - <xref:azure.ai.metricsadvisor.models.AnomalyFeedback>
    - <xref:azure.ai.metricsadvisor.models.ChangePointFeedback>
    - <xref:azure.ai.metricsadvisor.models.CommentFeedback>
    - <xref:azure.ai.metricsadvisor.models.PeriodFeedback>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get a metric feedback by its id.<!--[!code-python[Main](les\\sample_feedback.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\sample_feedback.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\n   service_endpoint\
    \ = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"\
    METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
    )\n   feedback_id = os.getenv(\"METRICS_ADVISOR_FEEDBACK_ID\")\n\n   client =\
    \ MetricsAdvisorClient(service_endpoint,\n                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   result = client.get_feedback(feedback_id=feedback_id)\n   print(\"\
    Type: {}; Id: {}\".format(result.feedback_type, result.id))\n\n   ````\n"
- uid: azure.ai.metricsadvisor.MetricsAdvisorClient.list_alerts
  name: list_alerts
  summary: Query alerts under anomaly alert configuration.
  signature: 'list_alerts(alert_configuration_id: str, start_time: datetime.datetime,
    end_time: datetime.datetime, time_mode: str | AlertQueryTimeMode, **kwargs: Any)
    -> ItemPaged[AnomalyAlert]'
  parameters:
  - name: alert_configuration_id
    description: anomaly alert configuration unique id.
    isRequired: true
    types:
    - <xref:str>
  - name: start_time
    description: start time.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  - name: end_time
    description: end time.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  - name: time_mode
    description: 'time mode. Possible values include: "AnomalyTime", "CreatedTime",

      "ModifiedTime".'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.AlertQueryTimeMode>
  keywordOnlyParameters:
  - name: skip
    types:
    - <xref:int>
  return:
    description: AnomalyAlerts under anomaly alert configuration.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.ai.metricsadvisor.models.AnomalyAlert>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Query anomaly detection results.<!--[!code-python[Main](les\\sample_alert_configuration.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\sample_alert_configuration.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   import datetime\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential,\
    \ MetricsAdvisorClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n\n   client = MetricsAdvisorClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   results = client.list_alerts(\n       alert_configuration_id=alert_config_id,\n\
    \       start_time=datetime.datetime(2020, 1, 1),\n       end_time=datetime.datetime(2020,\
    \ 9, 9),\n       time_mode=\"AnomalyTime\",\n   )\n\n   tolist = []\n   for result\
    \ in results:\n       tolist.append(result)\n       print(\"Alert id: {}\".format(result.id))\n\
    \       print(\"Create time: {}\".format(result.created_time))\n   return tolist\n\
    \n   ````\n"
- uid: azure.ai.metricsadvisor.MetricsAdvisorClient.list_anomalies
  name: list_anomalies
  summary: Query anomalies under a specific alert or detection configuration.
  signature: list_anomalies(alert_configuration_id, alert_id, **kwargs)
  keywordOnlyParameters:
  - name: alert_configuration_id
    description: anomaly alert configuration unique id.
    types:
    - <xref:str>
  - name: alert_id
    description: alert id.
    types:
    - <xref:str>
  - name: detection_configuration_id
    description: anomaly detection configuration unique id.
    types:
    - <xref:str>
  - name: start_time
    description: start time filter under chosen time mode.
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  - name: end_time
    description: end time filter under chosen time mode.
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  - name: skip
    types:
    - <xref:int>
  - name: filter
    types:
    - <xref:azure.ai.metricsadvisor.models.DetectionAnomalyFilterCondition>
  return:
    description: Anomalies under a specific alert or detection configuration.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.ai.metricsadvisor.models.DataPointAnomaly>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.ai.metricsadvisor.MetricsAdvisorClient.list_anomaly_dimension_values
  name: list_anomaly_dimension_values
  summary: Query dimension values of anomalies.
  signature: 'list_anomaly_dimension_values(detection_configuration_id: str, dimension_name:
    str, start_time: str | datetime.datetime, end_time: str | datetime.datetime, **kwargs:
    Any) -> ItemPaged[str]'
  parameters:
  - name: detection_configuration_id
    description: anomaly detection configuration unique id.
    isRequired: true
    types:
    - <xref:str>
  - name: dimension_name
    description: dimension to query.
    isRequired: true
    types:
    - <xref:str>
  - name: start_time
    description: start time filter under chosen time mode.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  - name: end_time
    description: end time filter under chosen time mode.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  keywordOnlyParameters:
  - name: skip
    types:
    - <xref:int>
  - name: dimension_filter
    description: filter specfic dimension name and values.
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:str>]
  return:
    description: Dimension values of anomalies.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:str>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Query dimension values.<!--[!code-python[Main](les\\sample_queries.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\
    \\samples\\\\sample_queries.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   import datetime\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\n   service_endpoint\
    \ = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"\
    METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
    )\n   detection_configuration_id = os.getenv(\"METRICS_ADVISOR_DETECTION_CONFIGURATION_ID\"\
    )\n   dimension_name = \"city\"\n\n   client = MetricsAdvisorClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   results = client.list_anomaly_dimension_values(\n       detection_configuration_id=detection_configuration_id,\n\
    \       dimension_name=dimension_name,\n       start_time=datetime.datetime(2020,\
    \ 1, 1),\n       end_time=datetime.datetime(2020, 10, 21),\n   )\n   for result\
    \ in results:\n       print(str(result))\n\n\n   ````\n"
- uid: azure.ai.metricsadvisor.MetricsAdvisorClient.list_feedback
  name: list_feedback
  summary: List feedback on the given metric.
  signature: 'list_feedback(metric_id: str, **kwargs: Any) -> ItemPaged[MetricFeedback
    | FeedbackUnion]'
  parameters:
  - name: metric_id
    description: filter feedbacks by metric id
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: skip
    types:
    - <xref:int>
  - name: dimension_key
    description: filter specfic dimension name and values
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: feedback_type
    description: 'filter feedbacks by type. Possible values include: "Anomaly",

      "ChangePoint", "Period", "Comment".'
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.FeedbackType>
  - name: start_time
    description: start time filter under chosen time mode.
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  - name: end_time
    description: end time filter under chosen time mode.
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  - name: time_mode
    description: 'time mode to filter feedback. Possible values include: "MetricTimestamp",

      "FeedbackCreatedTime".'
    types:
    - <xref:str>
    - <xref:azure.ai.metricsadvisor.models.FeedbackQueryTimeMode>
  return:
    description: Pageable list of MetricFeedback
    types:
    - <xref:azure.core.paging.ItemPaged>[ <xref:typing.Union>[<xref:azure.ai.metricsadvisor.models.MetricFeedback>,
      <xref:azure.ai.metricsadvisor.models.AnomalyFeedback>, <xref:azure.ai.metricsadvisor.models.ChangePointFeedback>,
      <xref:azure.ai.metricsadvisor.models.CommentFeedback>, <xref:azure.ai.metricsadvisor.models.PeriodFeedback>]]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "List feedback on the given metric.<!--[!code-python[Main](les\\sample_feedback.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\sample_feedback.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\n   service_endpoint\
    \ = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"\
    METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
    )\n   metric_id = os.getenv(\"METRICS_ADVISOR_METRIC_ID\")\n\n   client = MetricsAdvisorClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   results = client.list_feedback(metric_id=metric_id)\n   for\
    \ result in results:\n       print(\"Type: {}; Id: {}\".format(result.feedback_type,\
    \ result.id))\n\n   ````\n"
- uid: azure.ai.metricsadvisor.MetricsAdvisorClient.list_incident_root_causes
  name: list_incident_root_causes
  summary: Query root cause for incident.
  signature: 'list_incident_root_causes(detection_configuration_id: str, incident_id:
    str, **kwargs: Any) -> ItemPaged[IncidentRootCause]'
  parameters:
  - name: detection_configuration_id
    description: anomaly detection configuration unique id.
    isRequired: true
    types:
    - <xref:str>
  - name: incident_id
    description: incident id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Pageable of root cause for incident
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.ai.metricsadvisor.models.IncidentRootCause>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Query incident root causes.<!--[!code-python[Main](les\\sample_incidents.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\
    \\samples\\\\sample_incidents.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential,\
    \ MetricsAdvisorClient\n\n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\"\
    )\n   subscription_key = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key\
    \ = os.getenv(\"METRICS_ADVISOR_API_KEY\")\n   detection_configuration_id = os.getenv(\"\
    METRICS_ADVISOR_DETECTION_CONFIGURATION_ID\")\n   incident_id = os.getenv(\"METRICS_ADVISOR_INCIDENT_ID\"\
    )\n\n   client = MetricsAdvisorClient(service_endpoint,\n                    \
    \             MetricsAdvisorKeyCredential(subscription_key, api_key))\n   results\
    \ = client.list_incident_root_causes(\n       detection_configuration_id=detection_configuration_id,\n\
    \       incident_id=incident_id,\n   )\n   for result in results:\n       print(\"\
    Score: {}\".format(result.score))\n       print(\"Description: {}\".format(result.description))\n\
    \n\n   ````\n"
- uid: azure.ai.metricsadvisor.MetricsAdvisorClient.list_incidents
  name: list_incidents
  summary: Query incidents under a specific alert or detection configuration.
  signature: list_incidents(alert_configuration_id, alert_id, **kwargs)
  keywordOnlyParameters:
  - name: alert_configuration_id
    description: anomaly alerting configuration unique id.
    types:
    - <xref:str>
  - name: alert_id
    description: alert id.
    types:
    - <xref:str>
  - name: detection_configuration_id
    description: anomaly detection configuration unique id.
    types:
    - <xref:str>
  - name: start_time
    description: start time filter under chosen time mode.
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  - name: end_time
    description: end time filter under chosen time mode.
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  - name: skip
    types:
    - <xref:int>
  - name: filter
    types:
    - <xref:azure.ai.metricsadvisor.models.DetectionAnomalyFilterCondition>
  return:
    description: AnomalyIncidents under a specific alert or detection configuration.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.ai.metricsadvisor.models.AnomalyIncident>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.ai.metricsadvisor.MetricsAdvisorClient.list_metric_dimension_values
  name: list_metric_dimension_values
  summary: List dimension from certain metric.
  signature: 'list_metric_dimension_values(metric_id: str, dimension_name: str, **kwargs:
    Any) -> ItemPaged[str]'
  parameters:
  - name: metric_id
    description: metric unique id.
    isRequired: true
    types:
    - <xref:str>
  - name: dimension_name
    description: the dimension name
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: skip
    types:
    - <xref:int>
  - name: dimension_value_filter
    description: dimension value to be filtered.
    types:
    - <xref:str>
  return:
    description: Dimension from certain metric.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:str>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Query metric dimension values.<!--[!code-python[Main](les\\sample_queries.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\sample_queries.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\n   service_endpoint\
    \ = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"\
    METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
    )\n   metric_id = os.getenv(\"METRICS_ADVISOR_METRIC_ID\")\n   dimension_name\
    \ = \"city\"\n\n   client = MetricsAdvisorClient(service_endpoint,\n         \
    \                        MetricsAdvisorKeyCredential(subscription_key, api_key))\n\
    \n   results = client.list_metric_dimension_values(\n       metric_id=metric_id,\n\
    \       dimension_name=dimension_name,\n   )\n   for result in results:\n    \
    \   print(str(result))\n\n\n   ````\n"
- uid: azure.ai.metricsadvisor.MetricsAdvisorClient.list_metric_enriched_series_data
  name: list_metric_enriched_series_data
  summary: Query series enriched by anomaly detection.
  signature: 'list_metric_enriched_series_data(detection_configuration_id: str, series:
    List[SeriesIdentity] | List[Dict[str, str]], start_time: str | datetime.datetime,
    end_time: str | datetime.datetime, **kwargs: Any) -> ItemPaged[MetricEnrichedSeriesData]'
  parameters:
  - name: detection_configuration_id
    description: anomaly alerting configuration unique id.
    isRequired: true
    types:
    - <xref:str>
  - name: series
    description: List of dimensions specified for series.
    isRequired: true
    types:
    - <xref:azure.ai.metricsadvisor.models.SeriesIdentity>
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: start_time
    description: start time filter under chosen time mode.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  - name: end_time
    description: end time filter under chosen time mode.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  return:
    description: Pageable of MetricEnrichedSeriesData
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.ai.metricsadvisor.models.MetricEnrichedSeriesData>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Query metric enriched series data.<!--[!code-python[Main](les\\sample_queries.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\sample_queries.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   import datetime\n\
    \   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n   detection_configuration_id = os.getenv(\"METRICS_ADVISOR_DETECTION_CONFIGURATION_ID\"\
    )\n   series_identity = {\"city\": \"Los Angeles\"}\n\n   client = MetricsAdvisorClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   results = client.list_metric_enriched_series_data(\n       detection_configuration_id=detection_configuration_id,\n\
    \       start_time=datetime.datetime(2020, 9, 1),\n       end_time=datetime.datetime(2020,\
    \ 11, 1),\n       series=[series_identity]\n   )\n   for result in results:\n\
    \       print(str(result))\n\n\n   ````\n"
- uid: azure.ai.metricsadvisor.MetricsAdvisorClient.list_metric_enrichment_status
  name: list_metric_enrichment_status
  summary: Query anomaly detection status.
  signature: 'list_metric_enrichment_status(metric_id: str, start_time: str | datetime.datetime,
    end_time: str | datetime.datetime, **kwargs: Any) -> ItemPaged[EnrichmentStatus]'
  parameters:
  - name: metric_id
    description: filter feedbacks by metric id.
    isRequired: true
    types:
    - <xref:str>
  - name: start_time
    description: start time filter under chosen time mode.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  - name: end_time
    description: end time filter under chosen time mode.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  keywordOnlyParameters:
  - name: skip
    types:
    - <xref:int>
  return:
    description: Anomaly detection status.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.ai.metricsadvisor.models.EnrichmentStatus>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Query metric enrichment status.<!--[!code-python[Main](les\\sample_queries.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\sample_queries.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   import datetime\n\
    \   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n   metric_id = os.getenv(\"METRICS_ADVISOR_METRIC_ID\"\
    )\n\n   client = MetricsAdvisorClient(service_endpoint,\n                    \
    \             MetricsAdvisorKeyCredential(subscription_key, api_key))\n\n   results\
    \ = client.list_metric_enrichment_status(\n           metric_id=metric_id,\n \
    \          start_time=datetime.datetime(2020, 1, 1),\n           end_time=datetime.datetime(2020,\
    \ 10, 21),\n       )\n   for result in results:\n       print(str(result))\n\n\
    \n   ````\n"
- uid: azure.ai.metricsadvisor.MetricsAdvisorClient.list_metric_series_data
  name: list_metric_series_data
  summary: Get time series data from metric.
  signature: 'list_metric_series_data(metric_id: str, series_keys: List[Dict[str,
    str]], start_time: str | datetime.datetime, end_time: str | datetime.datetime,
    **kwargs: Any) -> ItemPaged[MetricSeriesData]'
  parameters:
  - name: metric_id
    description: metric unique id.
    isRequired: true
    types:
    - <xref:str>
  - name: series_keys
    description: query specific series.
    isRequired: true
    types:
    - <xref:list>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: start_time
    description: start time filter under chosen time mode.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  - name: end_time
    description: end time filter under chosen time mode.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]
  return:
    description: Time series data from metric.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.ai.metricsadvisor.models.MetricSeriesData>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Query metrics series data.<!--[!code-python[Main](les\\sample_queries.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\9\\\\azure-ai-metricsadvisor-1.0.0\\\
    \\samples\\\\sample_queries.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   import datetime\n   from azure.ai.metricsadvisor\
    \ import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\n   service_endpoint\
    \ = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key = os.getenv(\"\
    METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"METRICS_ADVISOR_API_KEY\"\
    )\n   metric_id = os.getenv(\"METRICS_ADVISOR_METRIC_ID\")\n\n   client = MetricsAdvisorClient(service_endpoint,\n\
    \                                 MetricsAdvisorKeyCredential(subscription_key,\
    \ api_key))\n\n   results = client.list_metric_series_data(\n           metric_id=metric_id,\n\
    \           start_time=datetime.datetime(2020, 1, 1),\n           end_time=datetime.datetime(2020,\
    \ 10, 21),\n           series_keys=[\n               {\"city\": \"Los Angeles\"\
    , \"category\": \"Homemade\"}\n           ]\n       )\n   for result in results:\n\
    \       print(str(result))\n\n\n   ````\n"
- uid: azure.ai.metricsadvisor.MetricsAdvisorClient.list_metric_series_definitions
  name: list_metric_series_definitions
  summary: List series (dimension combinations) from metric.
  signature: 'list_metric_series_definitions(metric_id: str, active_since: datetime.datetime,
    **kwargs: Any) -> ItemPaged[MetricSeriesDefinition]'
  parameters:
  - name: metric_id
    description: metric unique id.
    isRequired: true
    types:
    - <xref:str>
  - name: active_since
    description: 'Required. query series ingested after this time, the format should
      be

      yyyy-MM-ddTHH:mm:ssZ.'
    isRequired: true
    types:
    - <xref:datetime.datetime>
  keywordOnlyParameters:
  - name: skip
    types:
    - <xref:int>
  - name: dimension_filter
    description: filter specfic dimension name and values.
    types:
    - <xref:dict>[<xref:str>, <xref:list>[<xref:str>]]
  return:
    description: Series (dimension combinations) from metric.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.ai.metricsadvisor.models.MetricSeriesDefinition>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Query metric series definitions.<!--[!code-python[Main](les\\sample_queries.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    9\\\\azure-ai-metricsadvisor-1.0.0\\\\samples\\\\sample_queries.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   import datetime\n\
    \   from azure.ai.metricsadvisor import MetricsAdvisorKeyCredential, MetricsAdvisorClient\n\
    \n   service_endpoint = os.getenv(\"METRICS_ADVISOR_ENDPOINT\")\n   subscription_key\
    \ = os.getenv(\"METRICS_ADVISOR_SUBSCRIPTION_KEY\")\n   api_key = os.getenv(\"\
    METRICS_ADVISOR_API_KEY\")\n   metric_id = os.getenv(\"METRICS_ADVISOR_METRIC_ID\"\
    )\n\n   client = MetricsAdvisorClient(service_endpoint,\n                    \
    \             MetricsAdvisorKeyCredential(subscription_key, api_key))\n\n   results\
    \ = client.list_metric_series_definitions(\n           metric_id=metric_id,\n\
    \           active_since=datetime.datetime(2020, 1, 1),\n       )\n   for result\
    \ in results:\n       print(str(result))\n\n\n   ````\n"
