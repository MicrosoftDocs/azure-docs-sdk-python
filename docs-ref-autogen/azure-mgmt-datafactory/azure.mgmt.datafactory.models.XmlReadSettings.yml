### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.mgmt.datafactory.models.XmlReadSettings
  fullName: azure.mgmt.datafactory.models.XmlReadSettings
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: msrest.serialization.Model
    type: azure.mgmt.datafactory.models._models_py3.FormatReadSettings
  langs:
  - python
  module: azure.mgmt.datafactory.models
  name: XmlReadSettings
  summary: 'Xml read settings.


    All required parameters must be populated in order to send to Azure.'
  syntax:
    content: XmlReadSettings(*, additional_properties=None, compression_properties=None,
      validation_mode=None, namespace_prefixes=None, **kwargs) -> None
    parameters:
    - description: 'Unmatched properties from the message are

        deserialized this collection'
      id: additional_properties
      type:
      - dict[str, object]
    - description: Required. Constant filled by server.
      id: type
      type:
      - str
    - description: Compression settings.
      id: compression_properties
      type:
      - azure.mgmt.datafactory.models.CompressionReadSettings
    - description: 'Indicates what validation method is used when

        reading the xml files. Allowed values: ''none'', ''xsd'', or ''dtd''. Type:

        string (or Expression with resultType string).'
      id: validation_mode
      type:
      - object
    - description: 'Namespace uri to prefix mappings to override

        the prefixes in column names when namespace is enabled, if no prefix is

        defined for a namespace uri, the prefix of xml element/attribute name in

        the xml data file will be used. Example:

        "{"[http://www.example.com/xml](http://www.example.com/xml)":"prefix"}" Type:
        object (or Expression with

        resultType object).'
      id: namespace_prefixes
      type:
      - object
  type: class
  uid: azure.mgmt.datafactory.models.XmlReadSettings
references:
- fullName: dict[str, object]
  name: dict[str, object]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: object
    name: object
    uid: object
  - fullName: ']'
    name: ']'
  uid: dict[str, object]
