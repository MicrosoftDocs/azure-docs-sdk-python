### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cognitiveservices.speech.Connection.close
  - azure.cognitiveservices.speech.Connection.connected
  - azure.cognitiveservices.speech.Connection.disconnected
  - azure.cognitiveservices.speech.Connection.from_recognizer
  - azure.cognitiveservices.speech.Connection.open
  - azure.cognitiveservices.speech.Connection.set_message_property
  class: azure.cognitiveservices.speech.Connection
  fullName: azure.cognitiveservices.speech.Connection
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.cognitiveservices.speech
  name: Connection
  summary: 'Proxy class for managing the connection to the speech service of the specified

    <xref:azure.cognitiveservices.speech.Recognizer>.


    By default, a <xref:azure.cognitiveservices.speech.Recognizer> autonomously manages
    connection to service when needed. The

    <xref:azure.cognitiveservices.speech.Connection> class provides additional methods
    for users to explicitly open or close a

    connection and to subscribe to connection status changes. The use of <xref:azure.cognitiveservices.speech.Connection>
    is

    optional. It is intended for scenarios where fine tuning of application behavior
    based on connection

    status is needed. Users can optionally call <xref:azure.cognitiveservices.speech.Connection.open>
    to manually initiate a service connection

    before starting recognition on the <xref:azure.cognitiveservices.speech.Recognizer>
    associated with this <xref:azure.cognitiveservices.speech.Connection>.

    After starting a recognition, calling <xref:azure.cognitiveservices.speech.Connection.open>
    or <xref:azure.cognitiveservices.speech.Connection.close> might fail. This will
    not impact

    the Recognizer or the ongoing recognition. Connection might drop for various reasons,
    the Recognizer will

    always try to reinstitute the connection as required to guarantee ongoing operations.
    In all these cases

    <xref:azure.cognitiveservices.speech.Connection.connected>/<xref:azure.cognitiveservices.speech.Connection.disconnected>
    events will indicate the change of the connection status.



    > [!NOTE]

    > Added in version 1.2.0.

    >'
  syntax:
    content: Connection(impl_connection)
  type: class
  uid: azure.cognitiveservices.speech.Connection
- class: azure.cognitiveservices.speech.Connection
  fullName: azure.cognitiveservices.speech.Connection.close
  langs:
  - python
  module: azure.cognitiveservices.speech
  name: close()
  namewithoutparameters: close
  summary: 'Closes the connection the service. Users can optionally call <xref:azure.cognitiveservices.speech.Connection.close>
    to manually

    shutdown the connection of the associated <xref:azure.cognitiveservices.speech.Recognizer>.
    The call might fail,

    depending on the process state of the <xref:azure.cognitiveservices.speech.Recognizer>.
    But the failure does not affect

    the state of the associated <xref:azure.cognitiveservices.speech.Recognizer>.'
  syntax:
    content: close()
    parameters: []
  type: method
  uid: azure.cognitiveservices.speech.Connection.close
- class: azure.cognitiveservices.speech.Connection
  fullName: azure.cognitiveservices.speech.Connection.connected
  langs:
  - python
  module: azure.cognitiveservices.speech
  name: connected
  summary: The Connected event to indicate that the recognizer is connected to service.
  syntax: {}
  type: attribute
  uid: azure.cognitiveservices.speech.Connection.connected
- class: azure.cognitiveservices.speech.Connection
  fullName: azure.cognitiveservices.speech.Connection.disconnected
  langs:
  - python
  module: azure.cognitiveservices.speech
  name: disconnected
  summary: The Disconnected event to indicate that the recognizer is disconnected
    from service.
  syntax: {}
  type: attribute
  uid: azure.cognitiveservices.speech.Connection.disconnected
- class: azure.cognitiveservices.speech.Connection
  fullName: azure.cognitiveservices.speech.Connection.from_recognizer
  langs:
  - python
  module: azure.cognitiveservices.speech
  name: 'from_recognizer(recognizer: azure.cognitiveservices.speech.Recognizer)'
  namewithoutparameters: from_recognizer
  summary: Gets the <xref:azure.cognitiveservices.speech.Connection> instance from
    the specified recognizer.
  syntax:
    content: 'from_recognizer(recognizer: azure.cognitiveservices.speech.Recognizer)'
  type: method
  uid: azure.cognitiveservices.speech.Connection.from_recognizer
- class: azure.cognitiveservices.speech.Connection
  fullName: azure.cognitiveservices.speech.Connection.open
  langs:
  - python
  module: azure.cognitiveservices.speech
  name: 'open(for_continuous_recognition: bool)'
  namewithoutparameters: open
  summary: 'Starts to set up connection to the service. Users can optionally call
    <xref:azure.cognitiveservices.speech.Connection.open> to

    manually set up a connection in advance before starting recognition on the

    <xref:azure.cognitiveservices.speech.Recognizer> associated with this <xref:azure.cognitiveservices.speech.Connection>.
    After starting recognition,

    calling <xref:azure.cognitiveservices.speech.Connection.open>) might fail, depending
    on the process state of the

    <xref:azure.cognitiveservices.speech.Recognizer>. But the failure does not affect
    the state of the associated

    <xref:azure.cognitiveservices.speech.Recognizer>.



    > [!NOTE]

    > On return, the connection might not be ready yet. Please subscribe to the

    >

    > connected event to be notfied when the connection is established.

    >'
  syntax:
    content: 'open(for_continuous_recognition: bool)'
    parameters:
    - description: 'indicates whether the connection is used for continuous

        recognition or single-shot recognition.'
      id: forContinuousRecognition
      isRequired: true
  type: method
  uid: azure.cognitiveservices.speech.Connection.open
- class: azure.cognitiveservices.speech.Connection
  fullName: azure.cognitiveservices.speech.Connection.set_message_property
  langs:
  - python
  module: azure.cognitiveservices.speech
  name: 'set_message_property(path: str, property_name: str, property_value: str)'
  namewithoutparameters: set_message_property
  summary: Appends a parameter in a message to service.
  syntax:
    content: 'set_message_property(path: str, property_name: str, property_value:
      str)'
  type: method
  uid: azure.cognitiveservices.speech.Connection.set_message_property
references:
- fullName: azure.cognitiveservices.speech.Connection.close
  isExternal: false
  name: close()
  parent: azure.cognitiveservices.speech.Connection
  uid: azure.cognitiveservices.speech.Connection.close
- fullName: azure.cognitiveservices.speech.Connection.connected
  isExternal: false
  name: connected
  parent: azure.cognitiveservices.speech.Connection
  uid: azure.cognitiveservices.speech.Connection.connected
- fullName: azure.cognitiveservices.speech.Connection.disconnected
  isExternal: false
  name: disconnected
  parent: azure.cognitiveservices.speech.Connection
  uid: azure.cognitiveservices.speech.Connection.disconnected
- fullName: azure.cognitiveservices.speech.Connection.from_recognizer
  isExternal: false
  name: 'from_recognizer(recognizer: azure.cognitiveservices.speech.Recognizer)'
  parent: azure.cognitiveservices.speech.Connection
  uid: azure.cognitiveservices.speech.Connection.from_recognizer
- fullName: azure.cognitiveservices.speech.Connection.open
  isExternal: false
  name: 'open(for_continuous_recognition: bool)'
  parent: azure.cognitiveservices.speech.Connection
  uid: azure.cognitiveservices.speech.Connection.open
- fullName: azure.cognitiveservices.speech.Connection.set_message_property
  isExternal: false
  name: 'set_message_property(path: str, property_name: str, property_value: str)'
  parent: azure.cognitiveservices.speech.Connection
  uid: azure.cognitiveservices.speech.Connection.set_message_property
