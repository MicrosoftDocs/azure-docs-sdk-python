### YamlMime:PythonClass
uid: azure.cognitiveservices.speech.transcription.Conversation
name: Conversation
fullName: azure.cognitiveservices.speech.transcription.Conversation
module: azure.cognitiveservices.speech.transcription
inheritances:
- builtins.object
summary: An object that performs conversation management related operations.
constructor:
  syntax: 'Conversation(speech_config: SpeechConfig, conversation_id: str | None =
    None)'
  parameters:
  - name: speech_config
    description: The speech configuration.
    isRequired: true
  - name: conversation_id
    description: The conversation identifier.
    defaultValue: None
methods:
- uid: azure.cognitiveservices.speech.transcription.Conversation.add_participant_async
  name: add_participant_async
  summary: Asynchronously adds a participant to a conversation using the participant
    object or user id.
  signature: 'add_participant_async(participant: Participant | None = None, user_id:
    str | None = None) -> ResultFuture'
  parameters:
  - name: participant
    description: the participant object
    defaultValue: None
  - name: user_id
    description: the user identification string
    defaultValue: None
  return:
    description: A future containing the added participant object.
- uid: azure.cognitiveservices.speech.transcription.Conversation.delete_conversation_async
  name: delete_conversation_async
  summary: 'Asynchronously deletes conversation. Any participants that are still part
    of the converation

    will be ejected after this call.'
  signature: delete_conversation_async() -> ResultFuture
  return:
    description: A future that is fulfilled once conversation has been deleted.
- uid: azure.cognitiveservices.speech.transcription.Conversation.end_conversation_async
  name: end_conversation_async
  summary: Asynchronously ends the current conversation.
  signature: end_conversation_async() -> ResultFuture
  return:
    description: A future that is fulfilled once conversation has been ended.
- uid: azure.cognitiveservices.speech.transcription.Conversation.lock_conversation_async
  name: lock_conversation_async
  summary: Asynchronously locks conversation. After this no new participants will
    be able to join.
  signature: lock_conversation_async() -> ResultFuture
  return:
    description: A future that is fulfilled once conversation has been locked.
- uid: azure.cognitiveservices.speech.transcription.Conversation.mute_all_participants_async
  name: mute_all_participants_async
  summary: 'Asynchronously mutes all participants except for the host. This prevents
    others from generating

    transcriptions, or sending text messages.'
  signature: mute_all_participants_async() -> ResultFuture
  return:
    description: A future that is fulfilled once participants have been muted.
- uid: azure.cognitiveservices.speech.transcription.Conversation.mute_participant_async
  name: mute_participant_async
  summary: 'Asynchronously mutes a particular participant. This will prevent them
    generating new transcriptions,

    or sending text messages.'
  signature: 'mute_participant_async(participant_id: str) -> ResultFuture'
  parameters:
  - name: participant_id
    description: the participant idnetifier.
    isRequired: true
  return:
    description: A future that is fulfilled once participant has been muted.
- uid: azure.cognitiveservices.speech.transcription.Conversation.remove_participant_async
  name: remove_participant_async
  summary: Asynchronously removes a participant from a conversation using the participant
    object or user id.
  signature: 'remove_participant_async(participant: Participant | None = None, user_id:
    str | None = None) -> ResultFuture'
  parameters:
  - name: participant
    description: the participant object
    defaultValue: None
  - name: user_id
    description: the user identification string
    defaultValue: None
  return:
    description: An empty future.
- uid: azure.cognitiveservices.speech.transcription.Conversation.start_conversation_async
  name: start_conversation_async
  summary: Asynchronously starts conversation.
  signature: start_conversation_async() -> ResultFuture
  return:
    description: A future that is fulfilled once conversation has been started.
- uid: azure.cognitiveservices.speech.transcription.Conversation.unlock_conversation_async
  name: unlock_conversation_async
  summary: Asynchronously unlocks conversation.
  signature: unlock_conversation_async() -> ResultFuture
  return:
    description: A future that is fulfilled once conversation has been unlocked.
- uid: azure.cognitiveservices.speech.transcription.Conversation.unmute_all_participants_async
  name: unmute_all_participants_async
  summary: 'Asynchronously unmutes all participants, which allows participants to
    generate

    transcriptions, or send text messages.'
  signature: unmute_all_participants_async() -> ResultFuture
  return:
    description: A future that is fulfilled once participants have been unmuted.
- uid: azure.cognitiveservices.speech.transcription.Conversation.unmute_participant_async
  name: unmute_participant_async
  summary: 'Asynchronously unmutes a particular participant. This will allow generating
    new transcriptions,

    or sending text messages.'
  signature: 'unmute_participant_async(participant_id: str) -> ResultFuture'
  parameters:
  - name: participant_id
    description: the participant idnetifier.
    isRequired: true
  return:
    description: A future that is fulfilled once participant has been muted.
attributes:
- uid: azure.cognitiveservices.speech.transcription.Conversation.authorization_token
  name: authorization_token
  summary: 'The authorization token that will be used for connecting to the service.


    > [!NOTE]

    > The caller needs to ensure that the authorization token is valid. Before the

    >

    > authorization token expires, the caller needs to refresh it by calling this
    setter with a

    >

    > new valid token. As configuration values are copied when creating a new recognizer,
    the

    >

    > new token value will not apply to recognizers that have already been created.
    For

    >

    > recognizers that have been created before, you need to set authorization token
    of the

    >

    > corresponding recognizer to refresh the token. Otherwise, the recognizers will
    encounter

    >

    > errors during transcription.

    >'
- uid: azure.cognitiveservices.speech.transcription.Conversation.conversation_id
  name: conversation_id
  summary: Get the conversation id.
- uid: azure.cognitiveservices.speech.transcription.Conversation.properties
  name: properties
  summary: A collection of properties and their values defined for this Participant.
