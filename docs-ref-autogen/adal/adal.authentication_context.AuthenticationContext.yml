### YamlMime:PythonClass
uid: adal.authentication_context.AuthenticationContext
name: AuthenticationContext
fullName: adal.authentication_context.AuthenticationContext
module: adal.authentication_context
inheritances:
- builtins.object
summary: "Retrieves authentication tokens from Azure Active Directory.\n\nFor usages,\
  \ check out the \"sample\" folder at:\n   [https://github.com/AzureAD/azure-activedirectory-library-for-python](https://github.com/AzureAD/azure-activedirectory-library-for-python)\n\
  \nCreates a new AuthenticationContext object.\n\nBy default the authority will be\
  \ checked against a list of known Azure\nActive Directory authorities. If the authority\
  \ is not recognized as\none of these well known authorities then token acquisition\
  \ will fail.\nThis behavior can be turned off via the validate_authority parameter\n\
  below."
constructor:
  syntax: AuthenticationContext(authority, validate_authority=None, cache=None, api_version=None,
    timeout=None, enable_pii=False, verify_ssl=None, proxies=None)
  parameters:
  - name: authority
    description: 'A URL that identifies a token authority. It should be of the

      format [https://login.microsoftonline.com/your_tenant](https://login.microsoftonline.com/your_tenant)'
    isRequired: true
    types:
    - <xref:str>
  - name: validate_authority
    description: '(optional) Turns authority validation

      on or off. This parameter default to true.'
    defaultValue: None
    types:
    - <xref:bool>
  - name: cache
    description: '(optional) Sets the token cache used by this

      AuthenticationContext instance. If this parameter is not set, then

      a default is used. Cache instances is only used by that instance of

      the AuthenticationContext and are not shared unless it has been

      manually passed during the construction of other

      AuthenticationContexts.'
    defaultValue: None
    types:
    - <xref:adal.token_cache.TokenCache>
  - name: api_version
    description: '(optional) Specifies API version using on the wire.

      Historically it has a hardcoded default value as "1.0".

      Developers have been encouraged to set it as None explicitly,

      which means the underlying API version will be automatically chosen.

      Starting from ADAL Python 1.0, this default value becomes None.'
    defaultValue: None
  - name: timeout
    description: '(optional) requests timeout. How long to wait for the server to
      send

      data before giving up, as a float, or a *(connect timeout,

      read timeout) <timeouts>* tuple.'
    defaultValue: None
  - name: enable_pii
    description: '(optional) Unless this is set to True,

      there will be no Personally Identifiable Information (PII) written in log.'
    defaultValue: 'False'
  - name: verify_ssl
    description: '(optional) requests verify. Either a boolean, in which case it

      controls whether we verify the server''s TLS certificate, or a string, in which

      case it must be a path to a CA bundle to use. If this value is not provided,
      and

      ADAL_PYTHON_SSL_NO_VERIFY env varaible is set, behavior is equivalent to

      verify_ssl=False.'
    defaultValue: None
  - name: proxies
    description: '(optional) requests proxies. Dictionary mapping protocol to the
      URL

      of the proxy. See [http://docs.python-requests.org/en/master/user/advanced/#proxies](http://docs.python-requests.org/en/master/user/advanced/#proxies)

      for details.'
    defaultValue: None
methods:
- uid: adal.authentication_context.AuthenticationContext.acquire_token
  name: acquire_token
  summary: Gets a token for a given resource via cached tokens.
  signature: acquire_token(resource, user_id, client_id)
  parameters:
  - name: resource
    description: 'A URI that identifies the resource for which the

      token is valid.'
    isRequired: true
    types:
    - <xref:str>
  - name: user_id
    description: 'The username of the user on behalf this application

      is authenticating.'
    isRequired: true
    types:
    - <xref:str>
  - name: client_id
    description: The OAuth client id of the calling application.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'dic with several keys, include "accessToken" and

      "refreshToken".'
- uid: adal.authentication_context.AuthenticationContext.acquire_token_with_authorization_code
  name: acquire_token_with_authorization_code
  summary: 'Gets a token for a given resource via authorization code for a

    server app.'
  signature: acquire_token_with_authorization_code(authorization_code, redirect_uri,
    resource, client_id, client_secret=None, code_verifier=None)
  parameters:
  - name: authorization_code
    description: 'An authorization code returned from a

      client.'
    isRequired: true
    types:
    - <xref:str>
  - name: redirect_uri
    description: 'the redirect uri that was used in the

      authorize call.'
    isRequired: true
    types:
    - <xref:str>
  - name: resource
    description: 'A URI that identifies the resource for which the

      token is valid.'
    isRequired: true
    types:
    - <xref:str>
  - name: client_id
    description: The OAuth client id of the calling application.
    isRequired: true
    types:
    - <xref:str>
  - name: client_secret
    description: '(only for confidential clients)The OAuth

      client secret of the calling application. This parameter if not set,

      defaults to None'
    defaultValue: None
    types:
    - <xref:str>
  - name: code_verifier
    description: '(optional)The code verifier that was used to

      obtain authorization code if PKCE was used in the authorization

      code grant request.(usually used by public clients) This parameter if not set,

      defaults to None'
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: 'dict with several keys, include "accessToken" and

      "refreshToken".'
- uid: adal.authentication_context.AuthenticationContext.acquire_token_with_client_certificate
  name: acquire_token_with_client_certificate
  summary: Gets a token for a given resource via certificate credentials
  signature: acquire_token_with_client_certificate(resource, client_id, certificate,
    thumbprint, public_certificate=None)
  parameters:
  - name: resource
    description: 'A URI that identifies the resource for which the

      token is valid.'
    isRequired: true
    types:
    - <xref:str>
  - name: client_id
    description: The OAuth client id of the calling application.
    isRequired: true
    types:
    - <xref:str>
  - name: certificate
    description: A PEM encoded certificate private key.
    isRequired: true
    types:
    - <xref:str>
  - name: thumbprint
    description: hex encoded thumbprint of the certificate.
    isRequired: true
    types:
    - <xref:str>
  - name: public_certificate
    description: 'if not None, it will be sent to the service for subject name

      and issuer based authentication, which is to support cert auto rolls. The value
      must match the

      certificate private key parameter.'
    defaultValue: None
  return:
    description: dict with several keys, include "accessToken".
- uid: adal.authentication_context.AuthenticationContext.acquire_token_with_client_credentials
  name: acquire_token_with_client_credentials
  summary: Gets a token for a given resource via client credentials.
  signature: acquire_token_with_client_credentials(resource, client_id, client_secret)
  parameters:
  - name: resource
    description: 'A URI that identifies the resource for which the

      token is valid.'
    isRequired: true
    types:
    - <xref:str>
  - name: client_id
    description: The OAuth client id of the calling application.
    isRequired: true
    types:
    - <xref:str>
  - name: client_secret
    description: The OAuth client secret of the calling application.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: dict with several keys, include "accessToken".
- uid: adal.authentication_context.AuthenticationContext.acquire_token_with_device_code
  name: acquire_token_with_device_code
  summary: Gets a new access token using via a device code.
  signature: acquire_token_with_device_code(resource, user_code_info, client_id)
  parameters:
  - name: resource
    description: 'A URI that identifies the resource for which the

      token is valid.'
    isRequired: true
    types:
    - <xref:str>
  - name: user_code_info
    description: 'The code info from the invocation of

      "acquire_user_code"'
    isRequired: true
    types:
    - <xref:dict>
  - name: client_id
    description: The OAuth client id of the calling application.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'dict with several keys, include "accessToken" and

      "refreshToken".'
- uid: adal.authentication_context.AuthenticationContext.acquire_token_with_refresh_token
  name: acquire_token_with_refresh_token
  summary: Gets a token for a given resource via refresh tokens
  signature: acquire_token_with_refresh_token(refresh_token, client_id, resource,
    client_secret=None)
  parameters:
  - name: refresh_token
    description: 'A refresh token returned in a tokne response

      from a previous invocation of acquireToken.'
    isRequired: true
    types:
    - <xref:str>
  - name: client_id
    description: The OAuth client id of the calling application.
    isRequired: true
    types:
    - <xref:str>
  - name: resource
    description: 'A URI that identifies the resource for which the

      token is valid.'
    isRequired: true
    types:
    - <xref:str>
  - name: client_secret
    description: '(optional)The OAuth client secret of the

      calling application.'
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: 'dict with several keys, include "accessToken" and

      "refreshToken".'
- uid: adal.authentication_context.AuthenticationContext.acquire_token_with_username_password
  name: acquire_token_with_username_password
  summary: Gets a token for a given resource via user credentails.
  signature: acquire_token_with_username_password(resource, username, password, client_id)
  parameters:
  - name: resource
    description: 'A URI that identifies the resource for which the

      token is valid.'
    isRequired: true
    types:
    - <xref:str>
  - name: username
    description: 'The username of the user on behalf this

      application is authenticating.'
    isRequired: true
    types:
    - <xref:str>
  - name: password
    description: 'The password of the user named in the username

      parameter.'
    isRequired: true
    types:
    - <xref:str>
  - name: client_id
    description: The OAuth client id of the calling application.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'dict with several keys, include "accessToken" and

      "refreshToken".'
- uid: adal.authentication_context.AuthenticationContext.acquire_user_code
  name: acquire_user_code
  summary: 'Gets the user code info which contains user_code, device_code for

    authenticating user on device.'
  signature: acquire_user_code(resource, client_id, language=None)
  parameters:
  - name: resource
    description: 'A URI that identifies the resource for which the

      device_code and user_code is valid for.'
    isRequired: true
    types:
    - <xref:str>
  - name: client_id
    description: The OAuth client id of the calling application.
    isRequired: true
    types:
    - <xref:str>
  - name: language
    description: 'The language code specifying how the message

      should be localized to.'
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: dict contains code and uri for users to login through browser.
- uid: adal.authentication_context.AuthenticationContext.cancel_request_to_get_token_with_device_code
  name: cancel_request_to_get_token_with_device_code
  summary: Cancels the polling request to get token with device code.
  signature: cancel_request_to_get_token_with_device_code(user_code_info)
  parameters:
  - name: user_code_info
    description: 'The code info from the invocation of

      "acquire_user_code"'
    isRequired: true
    types:
    - <xref:dict>
  return:
    description: None
attributes:
- uid: adal.authentication_context.AuthenticationContext.options
  name: options
