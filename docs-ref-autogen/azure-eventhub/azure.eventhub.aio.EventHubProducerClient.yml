### YamlMime:PythonClass
uid: azure.eventhub.aio.EventHubProducerClient
name: EventHubProducerClient
fullName: azure.eventhub.aio.EventHubProducerClient
module: azure.eventhub.aio
inheritances:
- azure.eventhub.aio._client_base_async.ClientBaseAsync
summary: 'The EventHubProducerClient class defines a high level interface for

  sending events to the Azure Event Hubs service.'
constructor:
  syntax: 'EventHubProducerClient(fully_qualified_namespace: str, eventhub_name: str,
    credential: CredentialTypes, *, buffered_mode: bool = False, on_error: Callable[[List[EventData
    | AmqpAnnotatedMessage], str | None, Exception], Awaitable[None]] | None = None,
    on_success: Callable[[List[EventData | AmqpAnnotatedMessage], str | None], Awaitable[None]]
    | None = None, max_buffer_length: int | None = None, max_wait_time: float | None
    = None, **kwargs: Any)'
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified host name for the Event Hubs namespace.

      This is likely to be similar to <yournamespace>.servicebus.windows.net'
    isRequired: true
    types:
    - <xref:str>
  - name: eventhub_name
    description: The path of the specific Event Hub to connect the client to.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credential object used for authentication which

      implements a particular interface for getting tokens. It accepts

      <xref:azure.eventhub.aio.EventHubSharedKeyCredential>, or credential objects

      generated by the azure-identity library and objects that implement the *get_token(self,
      *scopes)* method.'
    isRequired: true
    types:
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
    - <xref:azure.core.credentials.AzureSasCredential>
    - <xref:azure.core.credentials.AzureNamedKeyCredential>
  - name: buffered_mode
    description: 'If True, the producer client will collect events in a buffer, efficiently
      batch,

      then publish. Default is False.'
    types:
    - <xref:bool>
  - name: on_success
    description: "The callback to be called once a batch has been successfully published.\n\
      The callback takes two parameters:\n\n   * *events*: The list of events that\
      \ have been successfully published \n\n   * *partition_id*: The partition id\
      \ that the events in the list have been published to. \n\nThe callback function\
      \ should be defined like: *on_success(events, partition_id)*.\nRequired when\
      \ *buffered_mode* is True while optional if *buffered_mode* is False."
    types:
    - <xref:Optional>[<xref:Callable>[[<xref:SendEventTypes>, <xref:Optional>[<xref:str>]],
      <xref:Awaitable>[<xref:None>]]]
  - name: on_error
    description: "The callback to be called once a batch has failed to be published.\n\
      Required when in *buffered_mode* is True while optional if *buffered_mode* is\
      \ False.\nThe callback function should be defined like: *on_error(events, partition_id,\
      \ error)*, where:\n\n   * *events*: The list of events that failed to be published,\
      \ \n\n   * *partition_id*: The partition id that the events in the list have\
      \ been tried to be published to and \n\n   * *error*: The exception related\
      \ to the sending failure. \n\nIf *buffered_mode* is False, *on_error* callback\
      \ is optional and errors will be handled as follows:\n   * If an *on_error*\
      \ callback is passed during the producer client instantiation,\n\n        then\
      \ error information will be passed to the *on_error* callback, which will then\
      \ be called.\n\n   * If an *on_error* callback is not passed in during client\
      \ instantiation,\n\n        then the error will be raised by default.\n\nIf\
      \ *buffered_mode* is True, *on_error* callback is required and errors will be\
      \ handled as follows:\n   * If events fail to enqueue within the given timeout,\
      \ then an error will be directly raised. \n\n   * If events fail to send after\
      \ enqueuing successfully, the *on_error* callback will be called."
    types:
    - <xref:Optional>[<xref:Callable>[[<xref:SendEventTypes>, <xref:Optional>[<xref:str>],
      <xref:Exception>], <xref:Awaitable>[<xref:None>]]]
  - name: max_buffer_length
    description: 'Buffered mode only.

      The total number of events per partition that can be buffered before a flush
      will be triggered.

      The default value is 1500 in buffered mode.'
    types:
    - <xref:int>
  - name: max_wait_time
    description: 'Buffered mode only.

      The amount of time to wait for a batch to be built with events in the buffer
      before publishing.

      The default value is 1 in buffered mode.'
    types:
    - <xref:Optional>[<xref:float>]
  - name: logging_enable
    description: Whether to output network trace logs to the logger. Default is *False*.
    types:
    - <xref:bool>
  - name: auth_timeout
    description: 'The time in seconds to wait for a token to be authorized by the
      service.

      The default value is 60 seconds. If set to 0, no timeout will be enforced from
      the client.'
    types:
    - <xref:float>
  - name: user_agent
    description: If specified, this will be added in front of the user agent string.
    types:
    - <xref:str>
  - name: retry_total
    description: 'The total number of attempts to redo a failed operation when an
      error occurs. Default

      value is 3.'
    types:
    - <xref:int>
  - name: retry_backoff_factor
    description: 'A backoff factor to apply between attempts after the second try

      (most errors are resolved immediately by a second try without a delay).

      In fixed mode, retry policy will always sleep for {backoff factor}.

      In ''exponential'' mode, retry policy will sleep for: *{backoff factor} * (2
      ** ({number of total retries} - 1))*

      seconds. If the backoff_factor is 0.1, then the retry will sleep

      for [0.0s, 0.2s, 0.4s, ...] between retries. The default value is 0.8.'
    types:
    - <xref:float>
  - name: retry_backoff_max
    description: The maximum back off time. Default value is 120 seconds (2 minutes).
    types:
    - <xref:float>
  - name: retry_mode
    description: 'The delay behavior between retry attempts. Supported values are
      ''fixed'' or ''exponential'',

      where default is ''exponential''.'
    types:
    - <xref:str>
  - name: idle_timeout
    description: 'Timeout, in seconds, after which this client will close the underlying
      connection

      if there is no activity. By default the value is None, meaning that the client
      will not shutdown due to inactivity

      unless initiated by the service.'
    types:
    - <xref:float>
  - name: transport_type
    description: 'The type of transport protocol that will be used for communicating
      with

      the Event Hubs service. Default is *TransportType.Amqp* in which case port 5671
      is used.

      If the port 5671 is unavailable/blocked in the network environment, *TransportType.AmqpOverWebsocket*
      could

      be used instead which uses port 443 for communication.'
    types:
    - <xref:azure.eventhub.TransportType>
  - name: http_proxy
    description: 'HTTP proxy settings. This must be a dictionary with the following

      keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

      Additionally the following keys may also be present: *''username'', ''password''*.'
    types:
    - <xref:dict>
  - name: custom_endpoint_address
    description: 'The custom endpoint address to use for establishing a connection
      to

      the Event Hubs service, allowing network requests to be routed through any application
      gateways or

      other paths needed for the host environment. Default is None.

      The format would be like "sb://<custom_endpoint_hostname>:<custom_endpoint_port>".

      If port is not specified in the *custom_endpoint_address*, by default port 443
      will be used.'
    types:
    - <xref:Optional>[<xref:str>]
  - name: connection_verify
    description: 'Path to the custom CA_BUNDLE file of the SSL certificate which is
      used to

      authenticate the identity of the connection endpoint.

      Default is None in which case *certifi.where()* will be used.'
    types:
    - <xref:Optional>[<xref:str>]
  - name: uamqp_transport
    description: 'Whether to use the *uamqp* library as the underlying transport.
      The default value is

      False and the Pure Python AMQP library will be used as the underlying transport.'
    types:
    - <xref:bool>
examples:
- "Create a new instance of the EventHubProducerClient.<!--[!code-python[Main](les\\\
  async_samples\\sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\"\
  : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\85\\\\azure-eventhub-5.11.3\\\\samples\\\
  \\async_samples\\\\sample_code_eventhub_async.py\", \"xml:space\": \"preserve\"\
  , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n   import os\n   from azure.eventhub.aio\
  \ import EventHubProducerClient, EventHubSharedKeyCredential\n\n   fully_qualified_namespace\
  \ = os.environ['EVENT_HUB_HOSTNAME']\n   eventhub_name = os.environ['EVENT_HUB_NAME']\n\
  \   shared_access_policy = os.environ['EVENT_HUB_SAS_POLICY']\n   shared_access_key\
  \ = os.environ['EVENT_HUB_SAS_KEY']\n\n   producer = EventHubProducerClient(fully_qualified_namespace=fully_qualified_namespace,\n\
  \                                     eventhub_name=eventhub_name,\n           \
  \                          credential=EventHubSharedKeyCredential(shared_access_policy,\
  \ shared_access_key))\n\n   ````\n"
methods:
- uid: azure.eventhub.aio.EventHubProducerClient.close
  name: close
  summary: Close the Producer client underlying AMQP connection and links.
  signature: 'async close(*, flush: bool = True, **kwargs: Any) -> None'
  parameters:
  - name: flush
    description: 'Buffered mode only. If set to True, events in the buffer will be
      sent

      immediately. Default is True.'
    types:
    - <xref:bool>
  - name: timeout
    description: 'Buffered mode only. Timeout to close the producer.

      Default is None which means no timeout.'
    types:
    - <xref:Optional>[<xref:float>]
  return:
    types:
    - <xref:None>
  exceptions:
  - type: azure.eventhub.exceptions.EventHubError
    description: 'If an error occurred when flushing the buffer if *flush* is set
      to True or closing the

      underlying AMQP connections in buffered mode.'
  examples:
  - "Close down the handler.<!--[!code-python[Main](les\\async_samples\\sample_code_eventhub_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\85\\\\azure-eventhub-5.11.3\\\\samples\\\\async_samples\\\\sample_code_eventhub_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   import os\n   from azure.eventhub.aio import EventHubProducerClient\n   from\
    \ azure.eventhub import EventData\n\n   event_hub_connection_str = os.environ['EVENT_HUB_CONN_STR']\n\
    \   eventhub_name = os.environ['EVENT_HUB_NAME']\n\n   producer = EventHubProducerClient.from_connection_string(\n\
    \       conn_str=event_hub_connection_str,\n       eventhub_name=eventhub_name\
    \  # EventHub name should be specified if it doesn't show up in connection string.\n\
    \   )\n   try:\n       event_data_batch = await producer.create_batch()\n    \
    \   while True:\n           try:\n               event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n           except ValueError:\n               # The\
    \ EventDataBatch object reaches its max_size.\n               # You can send the\
    \ full EventDataBatch object and create a new one here.\n               break\n\
    \       await producer.send_batch(event_data_batch)\n   finally:\n       # Close\
    \ down the producer handler.\n       await producer.close()\n\n   ````\n"
- uid: azure.eventhub.aio.EventHubProducerClient.create_batch
  name: create_batch
  summary: 'Create an EventDataBatch object with the max size of all content being
    constrained by max_size_in_bytes.


    The max_size_in_bytes should be no greater than the max allowed message size defined
    by the service.'
  signature: 'async create_batch(*, partition_id: str | None = None, partition_key:
    str | None = None, max_size_in_bytes: int | None = None) -> EventDataBatch'
  parameters:
  - name: partition_id
    description: 'The specific partition ID to send to. Default is None, in which
      case the service

      will assign to all partitions using round-robin.'
    isRequired: true
    types:
    - <xref:str>
  - name: partition_key
    description: 'With the given partition_key, event data will be sent to

      a particular partition of the Event Hub decided by the service.

      If both partition_id and partition_key are provided, the partition_id will take
      precedence.

      **WARNING: Setting partition_key of non-string value on the events to be sent
      is discouraged

      as the partition_key will be ignored by the Event Hub service and events will
      be assigned

      to all partitions using round-robin. Furthermore, there are SDKs for consuming
      events which expect

      partition_key to only be string type, they might fail to parse the non-string
      value.**'
    isRequired: true
    types:
    - <xref:str>
  - name: max_size_in_bytes
    description: 'The maximum size of bytes data that an EventDataBatch object can
      hold. By

      default, the value is determined by your Event Hubs tier.'
    isRequired: true
    types:
    - <xref:int>
  return:
    types:
    - <xref:azure.eventhub.EventDataBatch>
  examples:
  - "Create EventDataBatch object within limited size<!--[!code-python[Main](les\\\
    async_samples\\sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\85\\\\azure-eventhub-5.11.3\\\\\
    samples\\\\async_samples\\\\sample_code_eventhub_async.py\", \"xml:space\": \"\
    preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\": {\"\
    linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n       from azure.eventhub\
    \ import EventData\n       event_data_batch = await producer.create_batch()\n\
    \       while True:\n           try:\n               event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n           except ValueError:\n               # The\
    \ EventDataBatch object reaches its max_size.\n               # You can send the\
    \ full EventDataBatch object and create a new one here.\n               break\n\
    \n   ````\n"
- uid: azure.eventhub.aio.EventHubProducerClient.flush
  name: flush
  summary: 'Buffered mode only.

    Flush events in the buffer to be sent immediately if the client is working in
    buffered mode.'
  signature: 'async flush(**kwargs: Any) -> None'
  parameters:
  - name: timeout
    description: Timeout to flush the buffered events, default is None which means
      no timeout.
    types:
    - <xref:Optional>[<xref:float>]
  return:
    types:
    - <xref:None>
  exceptions:
  - type: azure.eventhub.exceptions.EventDataSendError
    description: 'If the producer fails to flush the buffer within the given timeout

      in buffered mode.'
- uid: azure.eventhub.aio.EventHubProducerClient.from_connection_string
  name: from_connection_string
  summary: Create an EventHubProducerClient from a connection string.
  signature: 'from_connection_string(conn_str: str, *, eventhub_name: str | None =
    None, buffered_mode: bool = False, on_error: Callable[[List[EventData | AmqpAnnotatedMessage],
    str | None, Exception], Awaitable[None]] | None = None, on_success: Callable[[List[EventData
    | AmqpAnnotatedMessage], str | None], Awaitable[None]] | None = None, max_buffer_length:
    int | None = None, max_wait_time: float | None = None, logging_enable: bool =
    False, http_proxy: Dict[str, str | int] | None = None, auth_timeout: float = 60,
    user_agent: str | None = None, retry_total: int = 3, transport_type: TransportType
    = TransportType.Amqp, **kwargs: Any) -> EventHubProducerClient'
  parameters:
  - name: conn_str
    description: The connection string of an Event Hub.
    isRequired: true
    types:
    - <xref:str>
  - name: eventhub_name
    description: The path of the specific Event Hub to connect the client to.
    types:
    - <xref:str>
  - name: buffered_mode
    description: 'If True, the producer client will collect events in a buffer, efficiently
      batch,

      then publish. Default is False.'
    types:
    - <xref:bool>
  - name: on_success
    description: "The callback to be called once a batch has been successfully published.\n\
      The callback takes two parameters:\n\n   * *events*: The list of events that\
      \ have been successfully published \n\n   * *partition_id*: The partition id\
      \ that the events in the list have been published to. \n\nThe callback function\
      \ should be defined like: *on_success(events, partition_id)*.\nIt is required\
      \ when *buffered_mode* is True while optional if *buffered_mode* is False."
    types:
    - <xref:Optional>[<xref:Callable>[[<xref:SendEventTypes>, <xref:Optional>[<xref:str>]],
      <xref:Awaitable>[<xref:None>]]]
  - name: on_error
    description: "The callback to be called once a batch has failed to be published.\n\
      The callback function should be defined like: *on_error(events, partition_id,\
      \ error)*, where:\n\n   * *events*: The list of events that failed to be published,\
      \ \n\n   * *partition_id*: The partition id that the events in the list have\
      \ been tried to be published to and \n\n   * *error*: The exception related\
      \ to the sending failure. \n\nIf *buffered_mode* is False, *on_error* callback\
      \ is optional and errors will be handled as follows:\n   * If an *on_error*\
      \ callback is passed during the producer client instantiation,\n\n        then\
      \ error information will be passed to the *on_error* callback, which will then\
      \ be called.\n\n   * If an *on_error* callback is not passed in during client\
      \ instantiation,\n\n        then the error will be raised by default.\n\nIf\
      \ *buffered_mode* is True, *on_error* callback is required and errors will be\
      \ handled as follows:\n   * If events fail to enqueue within the given timeout,\
      \ then an error will be directly raised. \n\n   * If events fail to send after\
      \ enqueuing successfully, the *on_error* callback will be called."
    types:
    - <xref:Optional>[<xref:Callable>[[<xref:SendEventTypes>, <xref:Optional>[<xref:str>],
      <xref:Exception>], <xref:Awaitable>[<xref:None>]]]
  - name: max_buffer_length
    description: 'Buffered mode only.

      The total number of events per partition that can be buffered before a flush
      will be triggered.

      The default value is 1500 in buffered mode.'
    types:
    - <xref:int>
  - name: max_wait_time
    description: 'Buffered mode only.

      The amount of time to wait for a batch to be built with events in the buffer
      before publishing.

      The default value is 1 in buffered mode.'
    types:
    - <xref:Optional>[<xref:float>]
  - name: logging_enable
    description: Whether to output network trace logs to the logger. Default is *False*.
    types:
    - <xref:bool>
  - name: http_proxy
    description: 'HTTP proxy settings. This must be a dictionary with the following

      keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

      Additionally the following keys may also be present: *''username'', ''password''*.'
    types:
    - <xref:dict>
  - name: auth_timeout
    description: 'The time in seconds to wait for a token to be authorized by the
      service.

      The default value is 60 seconds. If set to 0, no timeout will be enforced from
      the client.'
    types:
    - <xref:float>
  - name: user_agent
    description: If specified, this will be added in front of the user agent string.
    types:
    - <xref:str>
  - name: retry_total
    description: 'The total number of attempts to redo a failed operation when an
      error occurs.

      Default value is 3.'
    types:
    - <xref:int>
  - name: retry_backoff_factor
    description: 'A backoff factor to apply between attempts after the second try

      (most errors are resolved immediately by a second try without a delay).

      In fixed mode, retry policy will always sleep for {backoff factor}.

      In ''exponential'' mode, retry policy will sleep for: *{backoff factor} * (2
      ** ({number of total retries} - 1))*

      seconds. If the backoff_factor is 0.1, then the retry will sleep

      for [0.0s, 0.2s, 0.4s, ...] between retries. The default value is 0.8.'
    types:
    - <xref:float>
  - name: retry_backoff_max
    description: The maximum back off time. Default value is 120 seconds (2 minutes).
    types:
    - <xref:float>
  - name: retry_mode
    description: 'The delay behavior between retry attempts. Supported values are
      ''fixed'' or ''exponential'',

      where default is ''exponential''.'
    types:
    - <xref:str>
  - name: idle_timeout
    description: 'Timeout, in seconds, after which this client will close the underlying
      connection

      if there is no activity. By default the value is None, meaning that the client
      will not shutdown due to

      inactivity unless initiated by the service.'
    types:
    - <xref:float>
  - name: transport_type
    description: 'The type of transport protocol that will be used for communicating
      with

      the Event Hubs service. Default is *TransportType.Amqp* in which case port 5671
      is used.

      If the port 5671 is unavailable/blocked in the network environment, *TransportType.AmqpOverWebsocket*
      could

      be used instead which uses port 443 for communication.'
    types:
    - <xref:azure.eventhub.TransportType>
  - name: custom_endpoint_address
    description: 'The custom endpoint address to use for establishing a connection
      to

      the Event Hubs service, allowing network requests to be routed through any application
      gateways or

      other paths needed for the host environment. Default is None.

      The format would be like "sb://<custom_endpoint_hostname>:<custom_endpoint_port>".

      If port is not specified in the *custom_endpoint_address*, by default port 443
      will be used.'
    types:
    - <xref:Optional>[<xref:str>]
  - name: connection_verify
    description: 'Path to the custom CA_BUNDLE file of the SSL certificate which is
      used to

      authenticate the identity of the connection endpoint.

      Default is None in which case *certifi.where()* will be used.'
    types:
    - <xref:Optional>[<xref:str>]
  - name: uamqp_transport
    description: 'Whether to use the *uamqp* library as the underlying transport.
      The default value is

      False and the Pure Python AMQP library will be used as the underlying transport.'
    types:
    - <xref:bool>
  return:
    types:
    - <xref:azure.eventhub.aio.EventHubProducerClient>
  examples:
  - "Create a new instance of the EventHubProducerClient from connection string.<!--[!code-python[Main](les\\\
    async_samples\\sample_code_eventhub_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\85\\\\azure-eventhub-5.11.3\\\\\
    samples\\\\async_samples\\\\sample_code_eventhub_async.py\", \"xml:space\": \"\
    preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\": {\"\
    linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   import os\n   from\
    \ azure.eventhub.aio import EventHubProducerClient\n   event_hub_connection_str\
    \ = os.environ['EVENT_HUB_CONN_STR']\n   eventhub_name = os.environ['EVENT_HUB_NAME']\n\
    \   producer = EventHubProducerClient.from_connection_string(\n       conn_str=event_hub_connection_str,\n\
    \       eventhub_name=eventhub_name  # EventHub name should be specified if it\
    \ doesn't show up in connection string.\n   )\n\n   ````\n"
- uid: azure.eventhub.aio.EventHubProducerClient.get_buffered_event_count
  name: get_buffered_event_count
  summary: "The number of events that are buffered and waiting to be published for\
    \ a given partition.\n   Returns None in non-buffered mode. **NOTE: The event\
    \ buffer is processed in a background\n   coroutine, therefore the number of events\
    \ in the buffer reported by this API should be\n   considered only an approximation\
    \ and is only recommend for use in debugging. For a\n   partition ID that has\
    \ no events buffered, 0 will be returned regardless of whether that\n   partition\
    \ ID actually exists within the Event Hub.**"
  signature: 'get_buffered_event_count(partition_id: str) -> int | None'
  parameters:
  - name: partition_id
    description: The target partition ID.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:int>
    - <xref:None>
- uid: azure.eventhub.aio.EventHubProducerClient.get_eventhub_properties
  name: get_eventhub_properties
  summary: "Get properties of the Event Hub.\n\nKeys in the returned dictionary include:\n\
    \n   * *eventhub_name* (str) \n\n   * *created_at* (UTC datetime.datetime) \n\n\
    \   * *partition_ids* (list[str])"
  signature: async get_eventhub_properties() -> Dict[str, Any]
  return:
    types:
    - <xref:Dict>[<xref:str>, <xref:Any>]
  exceptions:
  - type: azure.eventhub.exceptions.EventHubError
- uid: azure.eventhub.aio.EventHubProducerClient.get_partition_ids
  name: get_partition_ids
  summary: Get partition IDs of the Event Hub.
  signature: async get_partition_ids() -> List[str]
  return:
    types:
    - <xref:list>[<xref:str>]
  exceptions:
  - type: azure.eventhub.exceptions.EventHubError
- uid: azure.eventhub.aio.EventHubProducerClient.get_partition_properties
  name: get_partition_properties
  summary: "Get properties of the specified partition.\n\nKeys in the properties dictionary\
    \ include:\n\n   * *eventhub_name* (str) \n\n   * *id* (str) \n\n   * *beginning_sequence_number*\
    \ (int) \n\n   * *last_enqueued_sequence_number* (int) \n\n   * *last_enqueued_offset*\
    \ (str) \n\n   * *last_enqueued_time_utc* (UTC datetime.datetime) \n\n   * *is_empty*\
    \ (bool)"
  signature: 'async get_partition_properties(partition_id: str) -> Dict[str, Any]'
  parameters:
  - name: partition_id
    description: The target partition ID.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:Dict>[<xref:str>, <xref:Any>]
  exceptions:
  - type: azure.eventhub.exceptions.EventHubError
- uid: azure.eventhub.aio.EventHubProducerClient.send_batch
  name: send_batch
  summary: "Sends a batch of event data.\nBy default, the method will block until\
    \ acknowledgement is received or operation times out.\nIf the *EventHubProducerClient*\
    \ is configured to run in buffered mode, the method will enqueue the events\n\
    into local buffer and return. The producer will do automatic sending in the background.\n\
    \nIf *buffered_mode* is False, *on_error* callback is optional and errors will\
    \ be handled as follows:\n   * If an *on_error* callback is passed during the\
    \ producer client instantiation,\n\n        then error information will be passed\
    \ to the *on_error* callback, which will then be called.\n\n   * If an *on_error*\
    \ callback is not passed in during client instantiation,\n\n        then the error\
    \ will be raised by default.\n\nIf *buffered_mode* is True, *on_error* callback\
    \ is required and errors will be handled as follows:\n   * If events fail to enqueue\
    \ within the given timeout, then an error will be directly raised. \n\n   * If\
    \ events fail to send after enqueuing successfully, the *on_error* callback will\
    \ be called. \n\nIn buffered mode, sending a batch will remain intact and sent\
    \ as a single unit.\nThe batch will not be rearranged. This may result in inefficiency\
    \ of sending events.\n\nIf you're sending a finite list of *EventData* or *AmqpAnnotatedMessage*\
    \ and you know it's within the\nevent hub frame size limit, you can send them\
    \ with a *send_batch* call. Otherwise, use <xref:azure.eventhub.aio.EventHubProducerClient.create_batch>\n\
    to create *EventDataBatch* and add either *EventData* or *AmqpAnnotatedMessage*\
    \ into the batch one by one\nuntil the size limit, and then call this method to\
    \ send out the batch."
  signature: 'async send_batch(event_data_batch: EventDataBatch | List[EventData |
    AmqpAnnotatedMessage], **kwargs: Any) -> None'
  parameters:
  - name: event_data_batch
    description: 'The *EventDataBatch* object to be sent or a list of *EventData*
      to be sent in a batch.

      All *EventData* or *AmqpAnnotatedMessage* in the list or *EventDataBatch* will
      land on the same partition.'
    isRequired: true
    types:
    - <xref:Union>[<xref:azure.eventhub.EventDataBatch>, <xref:List>[<xref:Union>[<xref:azure.eventhub.EventData,azure.eventhub.amqp.AmqpAnnotatedMessage>]]
  - name: timeout
    description: 'The maximum wait time to send the event data in non-buffered mode
      or the

      maximum wait time to enqueue the event data into the buffer in buffered mode.

      In non-buffered mode, the default wait time specified when the producer

      was created will be used. In buffered mode, the default wait time is None.'
    types:
    - <xref:float>
  - name: partition_id
    description: 'The specific partition ID to send to. Default is None, in which
      case the service

      will assign to all partitions using round-robin.

      A *TypeError* will be raised if partition_id is specified and event_data_batch
      is an *EventDataBatch* because

      *EventDataBatch* itself has partition_id.'
    types:
    - <xref:str>
  - name: partition_key
    description: 'With the given partition_key, event data will be sent to

      a particular partition of the Event Hub decided by the service.

      A *TypeError* will be raised if partition_key is specified and event_data_batch
      is an *EventDataBatch* because

      *EventDataBatch* itself has partition_key.

      If both partition_id and partition_key are provided, the partition_id will take
      precedence.

      **WARNING: Setting partition_key of non-string value on the events to be sent
      is discouraged

      as the partition_key will be ignored by the Event Hub service and events will
      be assigned

      to all partitions using round-robin. Furthermore, there are SDKs for consuming
      events which expect

      partition_key to only be string type, they might fail to parse the non-string
      value.**'
    types:
    - <xref:str>
  return:
    types:
    - <xref:None>
  exceptions:
  - type: azure.eventhub.exceptions.AuthenticationError
  - type: azure.eventhub.exceptions.ConnectError
  - type: azure.eventhub.exceptions.ConnectionLostError
  - type: azure.eventhub.exceptions.EventDataError
  - type: azure.eventhub.exceptions.EventDataSendError
  - type: azure.eventhub.exceptions.EventHubError
  - type: azure.eventhub.aio.ValueError
  - type: azure.eventhub.aio.TypeError
  - type: azure.eventhub.exceptions.OperationTimeoutError
    description: 'If the value specified by the timeout parameter elapses before the
      event can be

      sent in non-buffered mode or the events can be enqueued into the buffered in
      buffered mode.'
  examples:
  - "Asynchronously sends event data<!--[!code-python[Main](les\\async_samples\\sample_code_eventhub_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\85\\\\azure-eventhub-5.11.3\\\\samples\\\\async_samples\\\\sample_code_eventhub_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       async with producer:\n           event_data_batch = await producer.create_batch()\n\
    \           while True:\n               try:\n                   event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n               except ValueError:\n              \
    \     # The EventDataBatch object reaches its max_size.\n                   #\
    \ You can send the full EventDataBatch object and create a new one here.\n   \
    \                break\n           await producer.send_batch(event_data_batch)\n\
    \n   ````\n"
- uid: azure.eventhub.aio.EventHubProducerClient.send_event
  name: send_event
  summary: "Sends an event data.\nBy default, the method will block until acknowledgement\
    \ is received or operation times out.\nIf the *EventHubProducerClient* is configured\
    \ to run in buffered mode, the method will enqueue the event\ninto local buffer\
    \ and return. The producer will do automatic batching and sending in the background.\n\
    \n   If *buffered_mode* is False, *on_error* callback is optional and errors will\
    \ be handled as follows:\n      * If an *on_error* callback is passed during the\
    \ producer client instantiation,\n\n           then error information will be\
    \ passed to the *on_error* callback, which will then be called.\n\n      * If\
    \ an *on_error* callback is not passed in during client instantiation,\n\n   \
    \        then the error will be raised by default.\n\n   If *buffered_mode* is\
    \ True, *on_error* callback is required and errors will be handled as follows:\n\
    \      * If events fail to enqueue within the given timeout, then an error will\
    \ be directly raised. \n\n      * If events fail to send after enqueuing successfully,\
    \ the *on_error* callback will be called."
  signature: 'async send_event(event_data: EventData | AmqpAnnotatedMessage, **kwargs:
    Any) -> None'
  parameters:
  - name: event_data
    description: The *EventData* object to be sent.
    isRequired: true
    types:
    - <xref:Union>[<xref:azure.eventhub.EventData>, <xref:azure.eventhub.amqp.AmqpAnnotatedMessage>]
  - name: timeout
    description: 'The maximum wait time to send the event data in non-buffered mode
      or the

      maximum wait time to enqueue the event data into the buffer in buffered mode.

      In non-buffered mode, the default wait time specified when the producer

      was created will be used. In buffered mode, the default wait time is None.'
    types:
    - <xref:float>
  - name: partition_id
    description: 'The specific partition ID to send to. Default is None, in which
      case the service

      will assign to all partitions using round-robin.

      A *TypeError* will be raised if partition_id is specified and event_data_batch
      is an *EventDataBatch* because

      *EventDataBatch* itself has partition_id.'
    types:
    - <xref:str>
  - name: partition_key
    description: 'With the given partition_key, event data will be sent to

      a particular partition of the Event Hub decided by the service.

      A *TypeError* will be raised if partition_key is specified and event_data_batch
      is an *EventDataBatch* because

      *EventDataBatch* itself has partition_key.

      If both partition_id and partition_key are provided, the partition_id will take
      precedence.

      **WARNING: Setting partition_key of non-string value on the events to be sent
      is discouraged

      as the partition_key will be ignored by the Event Hub service and events will
      be assigned

      to all partitions using round-robin. Furthermore, there are SDKs for consuming
      events which expect

      partition_key to only be string type, they might fail to parse the non-string
      value.**'
    types:
    - <xref:str>
  return:
    types:
    - <xref:None>
  exceptions:
  - type: azure.eventhub.exceptions.AuthenticationError
  - type: azure.eventhub.exceptions.ConnectError
  - type: azure.eventhub.exceptions.ConnectionLostError
  - type: azure.eventhub.exceptions.EventDataError
  - type: azure.eventhub.exceptions.EventDataSendError
  - type: azure.eventhub.exceptions.EventHubError
  - type: azure.eventhub.exceptions.OperationTimeoutError
    description: 'If the value specified by the timeout parameter elapses before the
      event can be

      sent in non-buffered mode or the events can not be enqueued into the buffered
      in buffered mode.'
attributes:
- uid: azure.eventhub.aio.EventHubProducerClient.total_buffered_event_count
  name: total_buffered_event_count
  summary: "The total number of events that are currently buffered and waiting to\
    \ be published,\n   across all partitions. Returns None in non-buffered mode.\
    \ **NOTE: The event buffer\n   is processed in a background coroutine, therefore\
    \ the number of events in the buffer\n   reported by this API should be considered\
    \ only an approximation and is only recommend\n   for use in debugging.**"
  return:
    types:
    - <xref:int>
    - <xref:None>
