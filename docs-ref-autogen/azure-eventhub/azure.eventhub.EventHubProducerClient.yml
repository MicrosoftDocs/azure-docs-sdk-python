### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.EventHubProducerClient.close
  - azure.eventhub.EventHubProducerClient.create_batch
  - azure.eventhub.EventHubProducerClient.from_connection_string
  - azure.eventhub.EventHubProducerClient.get_eventhub_properties
  - azure.eventhub.EventHubProducerClient.get_partition_ids
  - azure.eventhub.EventHubProducerClient.get_partition_properties
  - azure.eventhub.EventHubProducerClient.send_batch
  class: azure.eventhub.EventHubProducerClient
  example:
  - "Create a new instance of the EventHubProducerClient.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_eventhub.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\108\\\\azure-eventhub-5.1.0\\\\samples\\\
    \\sync_samples\\\\sample_code_eventhub.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   import os\n   from azure.eventhub import EventHubProducerClient,\
    \ EventHubSharedKeyCredential\n\n   fully_qualified_namespace = os.environ['EVENT_HUB_HOSTNAME']\n\
    \   eventhub_name = os.environ['EVENT_HUB_NAME']\n   shared_access_policy = os.environ['EVENT_HUB_SAS_POLICY']\n\
    \   shared_access_key = os.environ['EVENT_HUB_SAS_KEY']\n\n   credential = EventHubSharedKeyCredential(shared_access_policy,\
    \ shared_access_key)\n   producer = EventHubProducerClient(\n       fully_qualified_namespace=fully_qualified_namespace,\n\
    \       eventhub_name=eventhub_name,  # EventHub name should be specified if it\
    \ doesn't show up in connection string.\n       credential=credential\n   )\n\n\
    \   ````\n"
  fullName: azure.eventhub.EventHubProducerClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.eventhub._client_base.ClientBase
  langs:
  - python
  module: azure.eventhub
  name: EventHubProducerClient
  summary: 'The EventHubProducerClient class defines a high level interface for

    sending events to the Azure Event Hubs service.'
  syntax:
    content: EventHubProducerClient(fully_qualified_namespace, eventhub_name, credential,
      **kwargs)
    parameters:
    - description: 'The fully qualified host name for the Event Hubs namespace.

        This is likely to be similar to <yournamespace>.servicebus.windows.net'
      id: fully_qualified_namespace
      type:
      - str
    - description: The path of the specific Event Hub to connect the client to.
      id: eventhub_name
      type:
      - str
    - description: 'The credential object used for authentication which

        implements a particular interface for getting tokens. It accepts

        <xref:azure.eventhub.EventHubSharedKeyCredential>, or credential objects generated

        by the azure-identity library and objects that implement the *get_token(self,
        *scopes)* method.'
      id: credential
      type:
      - azure.core.credentials.TokenCredential
    - description: Whether to output network trace logs to the logger. Default is
        *False*.
      id: logging_enable
      type:
      - bool
    - description: 'The time in seconds to wait for a token to be authorized by the
        service.

        The default value is 60 seconds. If set to 0, no timeout will be enforced
        from the client.'
      id: auth_timeout
      type:
      - float
    - description: The user agent that should be appended to the built-in user agent
        string.
      id: user_agent
      type:
      - str
    - description: 'The total number of attempts to redo a failed operation when an
        error occurs. Default

        value is 3.'
      id: retry_total
      type:
      - int
    - description: 'Timeout, in seconds, after which this client will close the underlying
        connection

        if there is no activity. By default the value is None, meaning that the client
        will not shutdown due to inactivity

        unless initiated by the service.'
      id: idle_timeout
      type:
      - float
    - description: 'The type of transport protocol that will be used for communicating
        with

        the Event Hubs service. Default is *TransportType.Amqp*.'
      id: transport_type
      type:
      - azure.eventhub.TransportType
    - description: 'HTTP proxy settings. This must be a dictionary with the following

        keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

        Additionally the following keys may also be present: *''username'', ''password''*.'
      id: http_proxy
      type:
      - dict
  type: class
  uid: azure.eventhub.EventHubProducerClient
- class: azure.eventhub.EventHubProducerClient
  example:
  - "Close down the client.<!--[!code-python[Main](les\\sync_samples\\sample_code_eventhub.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\108\\\\azure-eventhub-5.1.0\\\\samples\\\\sync_samples\\\\sample_code_eventhub.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   import os\n  \
    \ from azure.eventhub import EventHubProducerClient, EventData\n\n   event_hub_connection_str\
    \ = os.environ['EVENT_HUB_CONN_STR']\n   eventhub_name = os.environ['EVENT_HUB_NAME']\n\
    \n   producer = EventHubProducerClient.from_connection_string(\n       conn_str=event_hub_connection_str,\n\
    \       eventhub_name=eventhub_name  # EventHub name should be specified if it\
    \ doesn't show up in connection string.\n   )\n   try:\n       event_data_batch\
    \ = producer.create_batch()\n\n       while True:\n           try:\n         \
    \      event_data_batch.add(EventData('Message inside EventBatchData'))\n    \
    \       except ValueError:\n               # EventDataBatch object reaches max_size.\n\
    \               # New EventDataBatch object can be created here to send more data\n\
    \               break\n\n       producer.send_batch(event_data_batch)\n   finally:\n\
    \       # Close down the producer handler.\n       producer.close()\n\n   ````\n"
  fullName: azure.eventhub.EventHubProducerClient.close
  langs:
  - python
  module: azure.eventhub
  name: close()
  namewithoutparameters: close
  summary: Close the Producer client underlying AMQP connection and links.
  syntax:
    content: close()
    parameters: []
    return:
      type:
      - None
  type: method
  uid: azure.eventhub.EventHubProducerClient.close
- class: azure.eventhub.EventHubProducerClient
  example:
  - "Create EventDataBatch object within limited size<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_eventhub.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\108\\\\azure-eventhub-5.1.0\\\\samples\\\
    \\sync_samples\\\\sample_code_eventhub.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n       event_data_batch = producer.create_batch()\n       while\
    \ True:\n           try:\n               event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n           except ValueError:\n               # The\
    \ EventDataBatch object reaches its max_size.\n               # You can send the\
    \ full EventDataBatch object and create a new one here.\n               break\n\
    \n   ````\n"
  fullName: azure.eventhub.EventHubProducerClient.create_batch
  langs:
  - python
  module: azure.eventhub
  name: create_batch(**kwargs)
  namewithoutparameters: create_batch
  summary: 'Create an EventDataBatch object with the max size of all content being
    constrained by max_size_in_bytes.


    The max_size_in_bytes should be no greater than the max allowed message size defined
    by the service.'
  syntax:
    content: create_batch(**kwargs)
    parameters:
    - description: 'The specific partition ID to send to. Default is None, in which
        case the service

        will assign to all partitions using round-robin.'
      id: partition_id
      isRequired: true
      type:
      - str
    - description: 'With the given partition_key, event data will be sent to

        a particular partition of the Event Hub decided by the service.

        If both partition_id and partition_key are provided, the partition_id will
        take precedence.'
      id: partition_key
      isRequired: true
      type:
      - str
    - description: 'The maximum size of bytes data that an EventDataBatch object can
        hold. By

        default, the value is determined by your Event Hubs tier.'
      id: max_size_in_bytes
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.eventhub.EventDataBatch
  type: method
  uid: azure.eventhub.EventHubProducerClient.create_batch
- class: azure.eventhub.EventHubProducerClient
  example:
  - "Create a new instance of the EventHubProducerClient from connection string.<!--[!code-python[Main](les\\\
    sync_samples\\sample_code_eventhub.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\108\\\\azure-eventhub-5.1.0\\\\samples\\\
    \\sync_samples\\\\sample_code_eventhub.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   import os\n   from azure.eventhub import EventHubProducerClient\n\
    \   event_hub_connection_str = os.environ['EVENT_HUB_CONN_STR']\n   eventhub_name\
    \ = os.environ['EVENT_HUB_NAME']\n   producer = EventHubProducerClient.from_connection_string(\n\
    \       conn_str=event_hub_connection_str,\n       eventhub_name=eventhub_name\
    \  # EventHub name should be specified if it doesn't show up in connection string.\n\
    \   )\n\n   ````\n"
  fullName: azure.eventhub.EventHubProducerClient.from_connection_string
  langs:
  - python
  module: azure.eventhub
  name: from_connection_string(conn_str, **kwargs)
  namewithoutparameters: from_connection_string
  summary: Create an EventHubProducerClient from a connection string.
  syntax:
    content: from_connection_string(conn_str, **kwargs)
    parameters:
    - description: The connection string of an Event Hub.
      id: conn_str
      isRequired: true
      type:
      - str
    - description: The path of the specific Event Hub to connect the client to.
      id: eventhub_name
      isRequired: true
      type:
      - str
    - description: Whether to output network trace logs to the logger. Default is
        *False*.
      id: logging_enable
      isRequired: true
      type:
      - bool
    - description: 'HTTP proxy settings. This must be a dictionary with the following

        keys: *''proxy_hostname''* (str value) and *''proxy_port''* (int value).

        Additionally the following keys may also be present: *''username'', ''password''*.'
      id: http_proxy
      isRequired: true
      type:
      - dict
    - description: 'The time in seconds to wait for a token to be authorized by the
        service.

        The default value is 60 seconds. If set to 0, no timeout will be enforced
        from the client.'
      id: auth_timeout
      isRequired: true
      type:
      - float
    - description: The user agent that should be appended to the built-in user agent
        string.
      id: user_agent
      isRequired: true
      type:
      - str
    - description: 'The total number of attempts to redo a failed operation when an
        error occurs.

        Default value is 3.'
      id: retry_total
      isRequired: true
      type:
      - int
    - description: 'Timeout, in seconds, after which this client will close the underlying
        connection

        if there is no activity. By default the value is None, meaning that the client
        will not shutdown due to

        inactivity unless initiated by the service.'
      id: idle_timeout
      isRequired: true
      type:
      - float
    - description: 'The type of transport protocol that will be used for communicating
        with

        the Event Hubs service. Default is *TransportType.Amqp*.'
      id: transport_type
      isRequired: true
      type:
      - azure.eventhub.TransportType
    return:
      type:
      - azure.eventhub.EventHubProducerClient
  type: method
  uid: azure.eventhub.EventHubProducerClient.from_connection_string
- class: azure.eventhub.EventHubProducerClient
  fullName: azure.eventhub.EventHubProducerClient.get_eventhub_properties
  langs:
  - python
  module: azure.eventhub
  name: get_eventhub_properties()
  namewithoutparameters: get_eventhub_properties
  summary: "Get properties of the Event Hub.\n\nKeys in the returned dictionary include:\n\
    \n   * *eventhub_name* (str) \n\n   * *created_at* (UTC datetime.datetime) \n\n\
    \   * *partition_ids* (list[str])"
  syntax:
    content: get_eventhub_properties()
    parameters: []
    return:
      type:
      - dict
  type: method
  uid: azure.eventhub.EventHubProducerClient.get_eventhub_properties
- class: azure.eventhub.EventHubProducerClient
  fullName: azure.eventhub.EventHubProducerClient.get_partition_ids
  langs:
  - python
  module: azure.eventhub
  name: get_partition_ids()
  namewithoutparameters: get_partition_ids
  summary: Get partition IDs of the Event Hub.
  syntax:
    content: get_partition_ids()
    parameters: []
    return:
      type:
      - list[str]
  type: method
  uid: azure.eventhub.EventHubProducerClient.get_partition_ids
- class: azure.eventhub.EventHubProducerClient
  exceptions:
  - type: azure.eventhub.exceptions.EventHubError
  fullName: azure.eventhub.EventHubProducerClient.get_partition_properties
  langs:
  - python
  module: azure.eventhub
  name: get_partition_properties(partition_id)
  namewithoutparameters: get_partition_properties
  summary: "Get properties of the specified partition.\n\nKeys in the properties dictionary\
    \ include:\n\n   * *eventhub_name* (str) \n\n   * *id* (str) \n\n   * *beginning_sequence_number*\
    \ (int) \n\n   * *last_enqueued_sequence_number* (int) \n\n   * *last_enqueued_offset*\
    \ (str) \n\n   * *last_enqueued_time_utc* (UTC datetime.datetime) \n\n   * *is_empty*\
    \ (bool)"
  syntax:
    content: get_partition_properties(partition_id)
    parameters:
    - description: The target partition ID.
      id: partition_id
      isRequired: true
      type:
      - str
    return:
      type:
      - dict
  type: method
  uid: azure.eventhub.EventHubProducerClient.get_partition_properties
- class: azure.eventhub.EventHubProducerClient
  example:
  - "Sends event data<!--[!code-python[Main](les\\sync_samples\\sample_code_eventhub.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\108\\\\azure-eventhub-5.1.0\\\\samples\\\\sync_samples\\\\sample_code_eventhub.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n       with producer:\n\
    \           event_data_batch = producer.create_batch()\n\n           while True:\n\
    \               try:\n                   event_data_batch.add(EventData('Message\
    \ inside EventBatchData'))\n               except ValueError:\n              \
    \     # EventDataBatch object reaches max_size.\n                   # New EventDataBatch\
    \ object can be created here to send more data\n                   break\n\n \
    \          producer.send_batch(event_data_batch)\n\n   ````\n"
  exceptions:
  - type: azure.eventhub.exceptions.AuthenticationError
  - type: azure.eventhub.exceptions.AuthenticationError
  fullName: azure.eventhub.EventHubProducerClient.send_batch
  langs:
  - python
  module: azure.eventhub
  name: send_batch(event_data_batch, **kwargs)
  namewithoutparameters: send_batch
  summary: 'Sends event data and blocks until acknowledgement is received or operation
    times out.


    If you''re sending a finite list of *EventData* and you know it''s within the
    event hub

    frame size limit, you can send them with a *send_batch* call. Otherwise, use <xref:azure.eventhub.EventHubProducerClient.create_batch>

    to create *EventDataBatch* and add *EventData* into the batch one by one until
    the size limit,

    and then call this method to send out the batch.'
  syntax:
    content: send_batch(event_data_batch, **kwargs)
    parameters:
    - description: 'The *EventDataBatch* object to be sent or a list of *EventData*
        to be sent

        in a batch. All *EventData* in the list or *EventDataBatch* will land on the
        same partition.'
      id: event_data_batch
      isRequired: true
      type:
      - Union[azure.eventhub.EventDataBatch, List[azure.eventhub.EventData]]
    - description: 'The maximum wait time to send the event data.

        If not specified, the default wait time specified when the producer was created
        will be used.'
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'The specific partition ID to send to. Default is None, in which
        case the service

        will assign to all partitions using round-robin.

        A *TypeError* will be raised if partition_id is specified and event_data_batch
        is an *EventDataBatch* because

        *EventDataBatch* itself has partition_id.'
      id: partition_id
      isRequired: true
      type:
      - str
    - description: 'With the given partition_key, event data will be sent to

        a particular partition of the Event Hub decided by the service.

        A *TypeError* will be raised if partition_key is specified and event_data_batch
        is an *EventDataBatch* because

        *EventDataBatch* itself has partition_key.

        If both partition_id and partition_key are provided, the partition_id will
        take precedence.'
      id: partition_key
      isRequired: true
      type:
      - str
    return:
      type:
      - None
  type: method
  uid: azure.eventhub.EventHubProducerClient.send_batch
references:
- fullName: azure.eventhub.EventHubProducerClient.close
  isExternal: false
  name: close()
  parent: azure.eventhub.EventHubProducerClient
  uid: azure.eventhub.EventHubProducerClient.close
- fullName: azure.eventhub.EventHubProducerClient.create_batch
  isExternal: false
  name: create_batch(**kwargs)
  parent: azure.eventhub.EventHubProducerClient
  uid: azure.eventhub.EventHubProducerClient.create_batch
- fullName: azure.eventhub.EventHubProducerClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, **kwargs)
  parent: azure.eventhub.EventHubProducerClient
  uid: azure.eventhub.EventHubProducerClient.from_connection_string
- fullName: azure.eventhub.EventHubProducerClient.get_eventhub_properties
  isExternal: false
  name: get_eventhub_properties()
  parent: azure.eventhub.EventHubProducerClient
  uid: azure.eventhub.EventHubProducerClient.get_eventhub_properties
- fullName: azure.eventhub.EventHubProducerClient.get_partition_ids
  isExternal: false
  name: get_partition_ids()
  parent: azure.eventhub.EventHubProducerClient
  uid: azure.eventhub.EventHubProducerClient.get_partition_ids
- fullName: azure.eventhub.EventHubProducerClient.get_partition_properties
  isExternal: false
  name: get_partition_properties(partition_id)
  parent: azure.eventhub.EventHubProducerClient
  uid: azure.eventhub.EventHubProducerClient.get_partition_properties
- fullName: azure.eventhub.EventHubProducerClient.send_batch
  isExternal: false
  name: send_batch(event_data_batch, **kwargs)
  parent: azure.eventhub.EventHubProducerClient
  uid: azure.eventhub.EventHubProducerClient.send_batch
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
- fullName: Union[azure.eventhub.EventDataBatch, List[azure.eventhub.EventData]]
  name: Union[EventDataBatch, List[EventData]]
  spec.python:
  - fullName: Union
    name: Union
    uid: Union
  - fullName: '['
    name: '['
  - fullName: azure.eventhub.EventDataBatch
    name: EventDataBatch
    uid: azure.eventhub.EventDataBatch
  - fullName: ', '
    name: ', '
  - fullName: List
    name: List
    uid: List
  - fullName: '['
    name: '['
  - fullName: azure.eventhub.EventData
    name: EventData
    uid: azure.eventhub.EventData
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: Union[azure.eventhub.EventDataBatch, List[azure.eventhub.EventData]]
