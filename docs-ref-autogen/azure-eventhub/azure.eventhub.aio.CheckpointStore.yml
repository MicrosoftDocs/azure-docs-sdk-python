### YamlMime:PythonClass
uid: azure.eventhub.aio.CheckpointStore
name: CheckpointStore
fullName: azure.eventhub.aio.CheckpointStore
module: azure.eventhub.aio
inheritances:
- abc.ABC
summary: 'CheckpointStore deals with the interaction with the chosen storage service.


  It can list and claim partition ownerships as well as list and save checkpoints.'
constructor:
  syntax: CheckpointStore()
methods:
- uid: azure.eventhub.aio.CheckpointStore.claim_ownership
  name: claim_ownership
  summary: Tries to claim ownership for a list of specified partitions.
  signature: 'abstract async claim_ownership(ownership_list: Iterable[Dict[str, Any]],
    **kwargs: Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: ownership_list
    description: Iterable of dictionaries containing all the ownerships to claim.
    isRequired: true
    types:
    - <xref:typing.Iterable>[<xref:typing.Dict>[<xref:str>,<xref:typing.Any>]]
  return:
    types:
    - "<xref:typing.Iterable>[<xref:typing.Dict>[<xref:str>,<xref:typing.Any>]], <xref:typing.Iterable>\
      \ <xref:of> <xref:dictionaries> <xref:containing> <xref:azure.eventhub.amqp.AmqpMessageBodyType.partition>\
      \ <xref:ownership> <xref:information>:<xref:azure.eventhub.EventHubConnectionStringProperties.fully_qualified_namespace>\
      \ (<xref:str>): <xref:The> <xref:fully> <xref:qualified> <xref:namespace> <xref:that>\
      \ <xref:the> <xref:Event> <xref:Hub> <xref:belongs> <xref:to.> <xref:The> <xref:azure.eventhub.amqp.AmqpMessageBodyType.format>\
      \ <xref:is> <xref:like> \u201C<<xref:namespace>><xref:.servicebus.windows.net>\u201D\
      <xref:.>  <xref:azure.eventhub.EventHubConnectionStringProperties.eventhub_name>\
      \ (<xref:str>): <xref:The> <xref:name> <xref:of> <xref:the> <xref:specific>\
      \ <xref:Event> <xref:Hub> <xref:the> <xref:checkpoint> <xref:is> <xref:associated>\
      \ <xref:with>, <xref:relative> <xref:to> <xref:the> <xref:Event> <xref:Hubs>\
      \ <xref:namespace> <xref:that> <xref:contains> <xref:it.>  <xref:consumer_group>\
      \ (<xref:str>): <xref:The> <xref:name> <xref:of> <xref:the> <xref:consumer>\
      \ <xref:group> <xref:the> <xref:ownership> <xref:are> <xref:associated> <xref:with.>\
      \  <xref:partition_id> (<xref:str>): <xref:The> <xref:azure.eventhub.amqp.AmqpMessageBodyType.partition>\
      \ <xref:ID> <xref:which> <xref:the> <xref:checkpoint> <xref:is> <xref:created>\
      \ <xref:for.>  <xref:owner_id> (<xref:str>): <xref:A> <xref:UUID> <xref:representing>\
      \ <xref:the> <xref:owner> <xref:attempting> <xref:to> <xref:claim> <xref:this>\
      \ <xref:partition.>  <xref:last_modified_time> (<xref:UTC> <xref:datetime.datetime>):\
      \ <xref:The> <xref:last> <xref:time> <xref:this> <xref:ownership> <xref:was>\
      \ <xref:claimed.>  <xref:etag> (<xref:str>): <xref:The> <xref:Etag> <xref:value>\
      \ <xref:for> <xref:the> <xref:last> <xref:time> <xref:this> <xref:ownership>\
      \ <xref:was> <xref:modified.> <xref:typing.Optional> <xref:depending> <xref:on>\
      \ <xref:storage> <xref:implementation.>"
- uid: azure.eventhub.aio.CheckpointStore.list_checkpoints
  name: list_checkpoints
  summary: List the updated checkpoints from the chosen storage service.
  signature: 'abstract async list_checkpoints(fully_qualified_namespace: str, eventhub_name:
    str, consumer_group: str, **kwargs: Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified namespace that the Event Hub belongs to.

      The format is like "<namespace>.servicebus.windows.net".'
    isRequired: true
    types:
    - <xref:str>
  - name: eventhub_name
    description: 'The name of the specific Event Hub the checkpoints are associated
      with, relative to

      the Event Hubs namespace that contains it.'
    isRequired: true
    types:
    - <xref:str>
  - name: consumer_group
    description: The name of the consumer group the checkpoints are associated with.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - "<xref:typing.Iterable>[<xref:typing.Dict>[<xref:str>,<xref:typing.Any>]], <xref:typing.Iterable>\
      \ <xref:of> <xref:dictionaries> <xref:containing> <xref:azure.eventhub.amqp.AmqpMessageBodyType.partition>\
      \ <xref:checkpoint> <xref:information>:<xref:azure.eventhub.EventHubConnectionStringProperties.fully_qualified_namespace>\
      \ (<xref:str>): <xref:The> <xref:fully> <xref:qualified> <xref:namespace> <xref:that>\
      \ <xref:the> <xref:Event> <xref:Hub> <xref:belongs> <xref:to.> <xref:The> <xref:azure.eventhub.amqp.AmqpMessageBodyType.format>\
      \ <xref:is> <xref:like> \u201C<<xref:namespace>><xref:.servicebus.windows.net>\u201D\
      <xref:.>  <xref:azure.eventhub.EventHubConnectionStringProperties.eventhub_name>\
      \ (<xref:str>): <xref:The> <xref:name> <xref:of> <xref:the> <xref:specific>\
      \ <xref:Event> <xref:Hub> <xref:the> <xref:checkpoints> <xref:are> <xref:associated>\
      \ <xref:with>, <xref:relative> <xref:to> <xref:the> <xref:Event> <xref:Hubs>\
      \ <xref:namespace> <xref:that> <xref:contains> <xref:it.>  <xref:consumer_group>\
      \ (<xref:str>): <xref:The> <xref:name> <xref:of> <xref:the> <xref:consumer>\
      \ <xref:group> <xref:the> <xref:checkpoints> <xref:are> <xref:associated> <xref:with.>\
      \  <xref:partition_id> (<xref:str>): <xref:The> <xref:azure.eventhub.amqp.AmqpMessageBodyType.partition>\
      \ <xref:ID> <xref:which> <xref:the> <xref:checkpoint> <xref:is> <xref:created>\
      \ <xref:for.>  <xref:azure.eventhub.EventData.sequence_number> (<xref:int>):\
      \ <xref:The> <xref:sequence> <xref:number> <xref:of> <xref:the> <xref:EventData.>\
      \  <xref:azure.eventhub.EventData.offset> (<xref:str>): <xref:The> <xref:azure.eventhub.EventData.offset>\
      \ <xref:of> <xref:the> <xref:EventData.>"
- uid: azure.eventhub.aio.CheckpointStore.list_ownership
  name: list_ownership
  summary: Retrieves a complete ownership list from the chosen storage service.
  signature: 'abstract async list_ownership(fully_qualified_namespace: str, eventhub_name:
    str, consumer_group: str, **kwargs: Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified namespace that the Event Hub belongs to.

      The format is like "<namespace>.servicebus.windows.net".'
    isRequired: true
    types:
    - <xref:str>
  - name: eventhub_name
    description: 'The name of the specific Event Hub the partition ownerships are
      associated with,

      relative to the Event Hubs namespace that contains it.'
    isRequired: true
    types:
    - <xref:str>
  - name: consumer_group
    description: The name of the consumer group the ownerships are associated with.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - "<xref:typing.Iterable>[<xref:typing.Dict>[<xref:str>, <xref:typing.Any>]],\
      \ <xref:typing.Iterable> <xref:of> <xref:dictionaries> <xref:containing> <xref:azure.eventhub.amqp.AmqpMessageBodyType.partition>\
      \ <xref:ownership> <xref:information>:<xref:azure.eventhub.EventHubConnectionStringProperties.fully_qualified_namespace>\
      \ (<xref:str>): <xref:The> <xref:fully> <xref:qualified> <xref:namespace> <xref:that>\
      \ <xref:the> <xref:Event> <xref:Hub> <xref:belongs> <xref:to.> <xref:The> <xref:azure.eventhub.amqp.AmqpMessageBodyType.format>\
      \ <xref:is> <xref:like> \u201C<<xref:namespace>><xref:.servicebus.windows.net>\u201D\
      <xref:.>  <xref:azure.eventhub.EventHubConnectionStringProperties.eventhub_name>\
      \ (<xref:str>): <xref:The> <xref:name> <xref:of> <xref:the> <xref:specific>\
      \ <xref:Event> <xref:Hub> <xref:the> <xref:checkpoint> <xref:is> <xref:associated>\
      \ <xref:with>, <xref:relative> <xref:to> <xref:the> <xref:Event> <xref:Hubs>\
      \ <xref:namespace> <xref:that> <xref:contains> <xref:it.>  <xref:consumer_group>\
      \ (<xref:str>): <xref:The> <xref:name> <xref:of> <xref:the> <xref:consumer>\
      \ <xref:group> <xref:the> <xref:ownership> <xref:are> <xref:associated> <xref:with.>\
      \  <xref:partition_id> (<xref:str>): <xref:The> <xref:azure.eventhub.amqp.AmqpMessageBodyType.partition>\
      \ <xref:ID> <xref:which> <xref:the> <xref:checkpoint> <xref:is> <xref:created>\
      \ <xref:for.>  <xref:owner_id> (<xref:str>): <xref:A> <xref:UUID> <xref:representing>\
      \ <xref:the> <xref:current> <xref:owner> <xref:of> <xref:this> <xref:partition.>\
      \  <xref:last_modified_time> (<xref:UTC> <xref:datetime.datetime>): <xref:The>\
      \ <xref:last> <xref:time> <xref:this> <xref:ownership> <xref:was> <xref:claimed.>\
      \  <xref:etag> (<xref:str>): <xref:The> <xref:Etag> <xref:value> <xref:for>\
      \ <xref:the> <xref:last> <xref:time> <xref:this> <xref:ownership> <xref:was>\
      \ <xref:modified.> <xref:typing.Optional> <xref:depending> <xref:on> <xref:storage>\
      \ <xref:implementation.>"
- uid: azure.eventhub.aio.CheckpointStore.update_checkpoint
  name: update_checkpoint
  summary: 'Updates the checkpoint using the given information for the offset, associated
    partition and

    consumer group in the chosen storage service.


    Note: If you plan to implement a custom checkpoint store with the intention of
    running between

    cross-language EventHubs SDKs, it is recommended to persist the offset value as
    an integer.'
  signature: 'abstract async update_checkpoint(checkpoint: Dict[str, str | int | None],
    **kwargs: Any) -> None'
  parameters:
  - name: checkpoint
    description: "A dict containing checkpoint information:\n\n* *fully_qualified_namespace*\
      \ (str): The fully qualified namespace that the Event Hub belongs to. The format\
      \ is like \"<namespace>.servicebus.windows.net\". \n\n* *eventhub_name* (str):\
      \ The name of the specific Event Hub the checkpoint is associated with, relative\
      \ to the Event Hubs namespace that contains it. \n\n* *consumer_group* (str):\
      \ The name of the consumer group the checkpoint is associated with. \n\n* *partition_id*\
      \ (str): The partition ID which the checkpoint is created for. \n\n* *sequence_number*\
      \ (int): The sequence number of the <xref:azure.eventhub.EventData> the new\
      \ checkpoint will be associated with. \n\n* *offset* (str): The offset of the\
      \ <xref:azure.eventhub.EventData> the new checkpoint will be associated with."
    isRequired: true
    types:
    - <xref:typing.Dict>[<xref:str>,<xref:typing.Any>]
  return:
    types:
    - <xref:None>
