### YamlMime:PythonClass
uid: azure.eventhub.aio.CheckpointStore
name: CheckpointStore
fullName: azure.eventhub.aio.CheckpointStore
module: azure.eventhub.aio
inheritances:
- abc.ABC
summary: 'CheckpointStore deals with the interaction with the chosen storage service.


  It can list and claim partition ownerships as well as list and save checkpoints.'
constructor:
  syntax: CheckpointStore()
methods:
- uid: azure.eventhub.aio.CheckpointStore.claim_ownership
  name: claim_ownership
  summary: Tries to claim ownership for a list of specified partitions.
  signature: 'claim_ownership(ownership_list: Iterable[Dict[str, Any]], **kwargs:
    Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: ownership_list
    description: Iterable of dictionaries containing all the ownerships to claim.
    isRequired: true
    types:
    - <xref:Iterable>[<xref:Dict>[<xref:str,Any>]]
  return:
    types:
    - '<xref:Iterable>[<xref:Dict>[<xref:str,Any>]], <xref:Iterable of dictionaries
      containing partition ownership information:* *fully_qualified_namespace* >(<xref:str>)<xref::
      The fully qualified namespace that the Event Hub belongs to. The format is like
      "<namespace.servicebus.windows.net". * *eventhub_name* >(<xref:str>)<xref::
      The name of the specific Event Hub the checkpoint is associated with>, <xref:relative
      to the Event Hubs namespace that contains it. * *consumer_group* >(<xref:str>)<xref::
      The name of the consumer group the ownership are associated with. * *partition_id*
      >(<xref:str>)<xref:: The partition ID which the checkpoint is created for. *
      *owner_id* >(<xref:str>)<xref:: A UUID representing the owner attempting to
      claim this partition. * *last_modified_time* >(<xref:UTC datetime.datetime>)<xref::
      The last time this ownership was claimed. * *etag* >(<xref:str>)<xref:: The
      Etag value for the last time this ownership was modified. Optional depending
      on storage implementation.>'
- uid: azure.eventhub.aio.CheckpointStore.list_checkpoints
  name: list_checkpoints
  summary: List the updated checkpoints from the chosen storage service.
  signature: 'list_checkpoints(fully_qualified_namespace: str, eventhub_name: str,
    consumer_group: str, **kwargs: Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified namespace that the Event Hub belongs to.

      The format is like "<namespace>.servicebus.windows.net".'
    isRequired: true
    types:
    - <xref:str>
  - name: eventhub_name
    description: 'The name of the specific Event Hub the checkpoints are associated
      with, relative to

      the Event Hubs namespace that contains it.'
    isRequired: true
    types:
    - <xref:str>
  - name: consumer_group
    description: The name of the consumer group the checkpoints are associated with.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - '<xref:Iterable>[<xref:Dict>[<xref:str,Any>]], <xref:Iterable of dictionaries
      containing partition checkpoint information:* *fully_qualified_namespace* >(<xref:str>)<xref::
      The fully qualified namespace that the Event Hub belongs to. The format is like
      "<namespace.servicebus.windows.net". * *eventhub_name* >(<xref:str>)<xref::
      The name of the specific Event Hub the checkpoints are associated with>, <xref:relative
      to the Event Hubs namespace that contains it. * *consumer_group* >(<xref:str>)<xref::
      The name of the consumer group the checkpoints are associated with. * *partition_id*
      >(<xref:str>)<xref:: The partition ID which the checkpoint is created for. *
      *sequence_number* >(<xref:int>)<xref:: The sequence number of the azure.eventhub.EventData.
      * *offset* >(<xref:str>)<xref:: The offset of the azure.eventhub.EventData.>'
- uid: azure.eventhub.aio.CheckpointStore.list_ownership
  name: list_ownership
  summary: Retrieves a complete ownership list from the chosen storage service.
  signature: 'list_ownership(fully_qualified_namespace: str, eventhub_name: str, consumer_group:
    str, **kwargs: Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified namespace that the Event Hub belongs to.

      The format is like "<namespace>.servicebus.windows.net".'
    isRequired: true
    types:
    - <xref:str>
  - name: eventhub_name
    description: 'The name of the specific Event Hub the partition ownerships are
      associated with,

      relative to the Event Hubs namespace that contains it.'
    isRequired: true
    types:
    - <xref:str>
  - name: consumer_group
    description: The name of the consumer group the ownerships are associated with.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - '<xref:Iterable>[<xref:Dict>[<xref:str>, <xref:Any>]], <xref:Iterable of dictionaries
      containing partition ownership information:* *fully_qualified_namespace* >(<xref:str>)<xref::
      The fully qualified namespace that the Event Hub belongs to. The format is like
      "<namespace.servicebus.windows.net". * *eventhub_name* >(<xref:str>)<xref::
      The name of the specific Event Hub the checkpoint is associated with>, <xref:relative
      to the Event Hubs namespace that contains it. * *consumer_group* >(<xref:str>)<xref::
      The name of the consumer group the ownership are associated with. * *partition_id*
      >(<xref:str>)<xref:: The partition ID which the checkpoint is created for. *
      *owner_id* >(<xref:str>)<xref:: A UUID representing the current owner of this
      partition. * *last_modified_time* >(<xref:UTC datetime.datetime>)<xref:: The
      last time this ownership was claimed. * *etag* >(<xref:str>)<xref:: The Etag
      value for the last time this ownership was modified. Optional depending on storage
      implementation.>'
- uid: azure.eventhub.aio.CheckpointStore.update_checkpoint
  name: update_checkpoint
  summary: 'Updates the checkpoint using the given information for the offset, associated
    partition and

    consumer group in the chosen storage service.


    Note: If you plan to implement a custom checkpoint store with the intention of
    running between

    cross-language EventHubs SDKs, it is recommended to persist the offset value as
    an integer.'
  signature: 'update_checkpoint(checkpoint: Dict[str, Optional[Union[str, int]]],
    **kwargs: Any) -> None'
  parameters:
  - name: checkpoint
    description: "A dict containing checkpoint information:\n\n* *fully_qualified_namespace*\
      \ (str): The fully qualified namespace that the Event Hub belongs to. The format\
      \ is like \"<namespace>.servicebus.windows.net\". \n\n* *eventhub_name* (str):\
      \ The name of the specific Event Hub the checkpoint is associated with, relative\
      \ to the Event Hubs namespace that contains it. \n\n* *consumer_group* (str):\
      \ The name of the consumer group the checkpoint is associated with. \n\n* *partition_id*\
      \ (str): The partition ID which the checkpoint is created for. \n\n* *sequence_number*\
      \ (int): The sequence number of the <xref:azure.eventhub.EventData> the new\
      \ checkpoint will be associated with. \n\n* *offset* (str): The offset of the\
      \ <xref:azure.eventhub.EventData> the new checkpoint will be associated with."
    isRequired: true
    types:
    - <xref:Dict>[<xref:str,Any>]
  return:
    types:
    - <xref:None>
