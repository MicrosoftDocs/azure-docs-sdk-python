### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.queue.aio.QueueClient.clear_messages
  - azure.storage.queue.aio.QueueClient.create_queue
  - azure.storage.queue.aio.QueueClient.delete_message
  - azure.storage.queue.aio.QueueClient.delete_queue
  - azure.storage.queue.aio.QueueClient.get_queue_access_policy
  - azure.storage.queue.aio.QueueClient.get_queue_properties
  - azure.storage.queue.aio.QueueClient.peek_messages
  - azure.storage.queue.aio.QueueClient.receive_messages
  - azure.storage.queue.aio.QueueClient.send_message
  - azure.storage.queue.aio.QueueClient.set_queue_access_policy
  - azure.storage.queue.aio.QueueClient.set_queue_metadata
  - azure.storage.queue.aio.QueueClient.update_message
  class: azure.storage.queue.aio.QueueClient
  example:
  - "Create the queue client with url and credential.<!--[!code-python[Main](les\\\
    queue_samples_message_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_message_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   token_auth_queue\
    \ = QueueClient.from_queue_url(\n       queue_url=queue.url,\n       credential=sas_token\n\
    \   )\n\n   ````\n\nCreate the queue client with a connection string.<!--[!code-python[Main](les\\\
    queue_samples_message_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_message_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.storage.queue.aio\
    \ import QueueClient\n   queue = QueueClient.from_connection_string(self.connection_string,\
    \ \"myqueue1\")\n\n   ````\n"
  fullName: azure.storage.queue.aio.QueueClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.queue._shared.base_client_async.AsyncStorageAccountHostsMixin
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.storage.queue._shared.base_client.StorageAccountHostsMixin
    type: azure.storage.queue._queue_client.QueueClient
  langs:
  - python
  module: azure.storage.queue.aio
  name: QueueClient
  summary: A client to interact with a specific Queue.
  syntax:
    content: QueueClient(account_url, queue_name, credential=None, **kwargs)
    parameters:
    - description: 'The URL to the storage account. In order to create a client given
        the full URI to the queue,

        use the <xref:azure.storage.queue.aio.from_queue_url> classmethod.'
      id: account_url
      type:
      - str
    - description: The name of the queue.
      id: queue_name
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        an account

        shared access key, or an instance of a TokenCredentials class from azure.identity.'
      id: credential
    - description: 'The Storage API version to use for requests. Default value is
        ''2019-07-07''.

        Setting to an older version may result in reduced feature compatibility.'
      id: api_version
      type:
      - str
    - description: The hostname of the secondary endpoint.
      id: secondary_hostname
      type:
      - str
    - description: 'The encoding policy to use on outgoing messages.

        Default is not to encode messages. Other options include <xref:azure.storage.queue.aio.TextBase64EncodePolicy>,

        <xref:azure.storage.queue.aio.BinaryBase64EncodePolicy> or *None*.'
      id: message_encode_policy
    - description: 'The decoding policy to use on incoming messages.

        Default value is not to decode messages. Other options include <xref:azure.storage.queue.aio.TextBase64DecodePolicy>,

        <xref:azure.storage.queue.aio.BinaryBase64DecodePolicy> or *None*.'
      id: message_decode_policy
  type: class
  uid: azure.storage.queue.aio.QueueClient
- class: azure.storage.queue.aio.QueueClient
  example:
  - "Clears all messages.<!--[!code-python[Main](les\\queue_samples_message_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_message_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await queue.clear_messages()\n\
    \n   ````\n"
  fullName: azure.storage.queue.aio.QueueClient.clear_messages
  langs:
  - python
  module: azure.storage.queue.aio
  name: clear_messages(**kwargs)
  namewithoutparameters: clear_messages
  summary: Deletes all messages from the specified queue.
  syntax:
    content: clear_messages(**kwargs)
    parameters:
    - description: The server timeout, expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
  type: method
  uid: azure.storage.queue.aio.QueueClient.clear_messages
- class: azure.storage.queue.aio.QueueClient
  example:
  - "Create a queue.<!--[!code-python[Main](les\\queue_samples_hello_world_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_hello_world_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await queue.create_queue()\n\
    \n   ````\n"
  fullName: azure.storage.queue.aio.QueueClient.create_queue
  langs:
  - python
  module: azure.storage.queue.aio
  name: create_queue(**kwargs)
  namewithoutparameters: create_queue
  summary: 'Creates a new queue in the storage account.


    If a queue with the same name already exists, the operation fails with

    a *ResourceExistsError*.'
  syntax:
    content: create_queue(**kwargs)
    parameters:
    - description: 'A dict containing name-value pairs to associate with the queue
        as

        metadata. Note that metadata names preserve the case with which they

        were created, but are case-insensitive when set or read.'
      id: metadata
      isRequired: true
      type:
      - dict(str,str)
    - description: The server timeout, expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: None or the result of cls(response)
      type:
      - None
  type: method
  uid: azure.storage.queue.aio.QueueClient.create_queue
- class: azure.storage.queue.aio.QueueClient
  example:
  - "Delete a message.<!--[!code-python[Main](les\\queue_samples_message_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_message_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Get the message\
    \ at the front of the queue\n   messages = queue.receive_messages()\n   async\
    \ for msg in messages:\n       # Delete the specified message\n       await queue.delete_message(msg)\n\
    \n   ````\n"
  fullName: azure.storage.queue.aio.QueueClient.delete_message
  langs:
  - python
  module: azure.storage.queue.aio
  name: delete_message(message, pop_receipt=None, **kwargs)
  namewithoutparameters: delete_message
  summary: 'Deletes the specified message.


    Normally after a client retrieves a message with the receive messages operation,

    the client is expected to process and delete the message. To delete the

    message, you must have the message object itself, or two items of data: id and
    pop_receipt.

    The id is returned from the previous receive_messages operation. The

    pop_receipt is returned from the most recent <xref:azure.storage.queue.aio.receive_messages>
    or

    <xref:azure.storage.queue.aio.update_message> operation. In order for the delete_message
    operation

    to succeed, the pop_receipt specified on the request must match the

    pop_receipt returned from the <xref:azure.storage.queue.aio.receive_messages>
    or <xref:azure.storage.queue.aio.update_message>

    operation.'
  syntax:
    content: delete_message(message, pop_receipt=None, **kwargs)
    parameters:
    - description: The message object or id identifying the message to delete.
      id: message
      isRequired: true
      type:
      - str
      - azure.storage.queue.QueueMessage
    - description: 'A valid pop receipt value returned from an earlier call

        to the <xref:azure.storage.queue.aio.receive_messages> or <xref:azure.storage.queue.aio.update_message>.'
      id: pop_receipt
      isRequired: true
      type:
      - str
    - description: The server timeout, expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
  type: method
  uid: azure.storage.queue.aio.QueueClient.delete_message
- class: azure.storage.queue.aio.QueueClient
  example:
  - "Delete a queue.<!--[!code-python[Main](les\\queue_samples_hello_world_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_hello_world_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   await queue.delete_queue()\n\
    \n   ````\n"
  fullName: azure.storage.queue.aio.QueueClient.delete_queue
  langs:
  - python
  module: azure.storage.queue.aio
  name: delete_queue(**kwargs)
  namewithoutparameters: delete_queue
  summary: 'Deletes the specified queue and any messages it contains.


    When a queue is successfully deleted, it is immediately marked for deletion

    and is no longer accessible to clients. The queue is later removed from

    the Queue service during garbage collection.


    Note that deleting a queue is likely to take at least 40 seconds to complete.

    If an operation is attempted against the queue while it was being deleted,

    an <xref:azure.storage.queue.aio.HttpResponseError> will be thrown.'
  syntax:
    content: delete_queue(**kwargs)
    parameters:
    - description: The server timeout, expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.queue.aio.QueueClient.delete_queue
- class: azure.storage.queue.aio.QueueClient
  fullName: azure.storage.queue.aio.QueueClient.get_queue_access_policy
  langs:
  - python
  module: azure.storage.queue.aio
  name: get_queue_access_policy(**kwargs)
  namewithoutparameters: get_queue_access_policy
  summary: 'Returns details about any stored access policies specified on the

    queue that may be used with Shared Access Signatures.'
  syntax:
    content: get_queue_access_policy(**kwargs)
    parameters:
    - description: The server timeout, expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: A dictionary of access policies associated with the queue.
      type:
      - dict(str, azure.storage.queue.AccessPolicy)
  type: method
  uid: azure.storage.queue.aio.QueueClient.get_queue_access_policy
- class: azure.storage.queue.aio.QueueClient
  example:
  - "Get the properties on the queue.<!--[!code-python[Main](les\\queue_samples_message_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_message_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   properties = await\
    \ queue.get_queue_properties()\n\n   ````\n"
  fullName: azure.storage.queue.aio.QueueClient.get_queue_properties
  langs:
  - python
  module: azure.storage.queue.aio
  name: get_queue_properties(**kwargs)
  namewithoutparameters: get_queue_properties
  summary: 'Returns all user-defined metadata for the specified queue.


    The data returned does not include the queue''s list of messages.'
  syntax:
    content: get_queue_properties(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: User-defined metadata for the queue.
      type:
      - azure.storage.queue.QueueProperties
  type: method
  uid: azure.storage.queue.aio.QueueClient.get_queue_properties
- class: azure.storage.queue.aio.QueueClient
  example:
  - "Peek messages.<!--[!code-python[Main](les\\queue_samples_message_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\92\\\\\
    azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_message_async.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   # Peek at one message at the front\
    \ of the queue\n   msg = await queue.peek_messages()\n\n   # Peek at the last\
    \ 5 messages\n   messages = await queue.peek_messages(max_messages=5)\n\n   #\
    \ Print the last 5 messages\n   for message in messages:\n       print(message.content)\n\
    \n   ````\n"
  fullName: azure.storage.queue.aio.QueueClient.peek_messages
  langs:
  - python
  module: azure.storage.queue.aio
  name: peek_messages(max_messages=None, **kwargs)
  namewithoutparameters: peek_messages
  summary: 'Retrieves one or more messages from the front of the queue, but does

    not alter the visibility of the message.


    Only messages that are visible may be retrieved. When a message is retrieved

    for the first time with a call to <xref:azure.storage.queue.aio.receive_messages>,
    its dequeue_count property

    is set to 1. If it is not deleted and is subsequently retrieved again, the

    dequeue_count property is incremented. The client may use this value to

    determine how many times a message has been retrieved. Note that a call

    to peek_messages does not increment the value of dequeue_count, but returns

    this value for the client to read.


    If the key-encryption-key or resolver field is set on the local service object,

    the messages will be decrypted before being returned.'
  syntax:
    content: peek_messages(max_messages=None, **kwargs)
    parameters:
    - description: 'A nonzero integer value that specifies the number of

        messages to peek from the queue, up to a maximum of 32. By default,

        a single message is peeked from the queue with this operation.'
      id: max_messages
      isRequired: true
      type:
      - int
    - description: The server timeout, expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: 'A list of <xref:azure.storage.queue.QueueMessage> objects. Note
        that

        next_visible_on and pop_receipt will not be populated as peek does

        not pop the message and can only retrieve already visible messages.'
      type:
      - list(<xref:azure.storage.queue.QueueMessage>)
  type: method
  uid: azure.storage.queue.aio.QueueClient.peek_messages
- class: azure.storage.queue.aio.QueueClient
  example:
  - "Receive messages from the queue.<!--[!code-python[Main](les\\queue_samples_message_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_message_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Receive messages\
    \ one-by-one\n   messages = queue.receive_messages()\n   async for msg in messages:\n\
    \       print(msg.content)\n\n   # Receive messages by batch\n   messages = queue.receive_messages(messages_per_page=5)\n\
    \   async for msg_batch in messages.by_page():\n       for msg in msg_batch:\n\
    \           print(msg.content)\n           await queue.delete_message(msg)\n\n\
    \   ````\n"
  fullName: azure.storage.queue.aio.QueueClient.receive_messages
  langs:
  - python
  module: azure.storage.queue.aio
  name: receive_messages(**kwargs)
  namewithoutparameters: receive_messages
  summary: 'Removes one or more messages from the front of the queue.


    When a message is retrieved from the queue, the response includes the message

    content and a pop_receipt value, which is required to delete the message.

    The message is not automatically deleted from the queue, but after it has

    been retrieved, it is not visible to other clients for the time interval

    specified by the visibility_timeout parameter.


    If the key-encryption-key or resolver field is set on the local service object,
    the messages will be

    decrypted before being returned.'
  syntax:
    content: receive_messages(**kwargs)
    parameters:
    - description: 'A nonzero integer value that specifies the number of

        messages to retrieve from the queue, up to a maximum of 32. If

        fewer are visible, the visible messages are returned. By default,

        a single message is retrieved from the queue with this operation.'
      id: messages_per_page
      isRequired: true
      type:
      - int
    - description: 'If not specified, the default value is 0. Specifies the

        new visibility timeout value, in seconds, relative to server time.

        The value must be larger than or equal to 0, and cannot be

        larger than 7 days. The visibility timeout of a message cannot be

        set to a value later than the expiry time. visibility_timeout

        should be set to a value smaller than the time-to-live value.'
      id: visibility_timeout
      isRequired: true
      type:
      - int
    - description: The server timeout, expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: Returns a message iterator of dict-like Message objects.
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.storage.queue.QueueMessage]
  type: method
  uid: azure.storage.queue.aio.QueueClient.receive_messages
- class: azure.storage.queue.aio.QueueClient
  example:
  - "Send messages.<!--[!code-python[Main](les\\queue_samples_message_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\92\\\\\
    azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_message_async.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   await asyncio.gather(\n      \
    \ queue.send_message(u\"message1\"),\n       queue.send_message(u\"message2\"\
    , visibility_timeout=30),  # wait 30s before becoming visible\n       queue.send_message(u\"\
    message3\"),\n       queue.send_message(u\"message4\"),\n       queue.send_message(u\"\
    message5\")\n   )\n\n   ````\n"
  fullName: azure.storage.queue.aio.QueueClient.send_message
  langs:
  - python
  module: azure.storage.queue.aio
  name: send_message(content, **kwargs)
  namewithoutparameters: send_message
  summary: 'Adds a new message to the back of the message queue.


    The visibility timeout specifies the time that the message will be

    invisible. After the timeout expires, the message will become visible.

    If a visibility timeout is not specified, the default value of 0 is used.


    The message time-to-live specifies how long a message will remain in the

    queue. The message will be deleted from the queue when the time-to-live

    period expires.


    If the key-encryption-key field is set on the local service object, this method
    will

    encrypt the content before uploading.'
  syntax:
    content: send_message(content, **kwargs)
    parameters:
    - description: 'Message content. Allowed type is determined by the encode_function

        set on the service. Default is str. The encoded message can be up to

        64KB in size.'
      id: content
      isRequired: true
      type:
      - obj
    - description: 'If not specified, the default value is 0. Specifies the

        new visibility timeout value, in seconds, relative to server time.

        The value must be larger than or equal to 0, and cannot be

        larger than 7 days. The visibility timeout of a message cannot be

        set to a value later than the expiry time. visibility_timeout

        should be set to a value smaller than the time-to-live value.'
      id: visibility_timeout
      isRequired: true
      type:
      - int
    - description: 'Specifies the time-to-live interval for the message, in

        seconds. The time-to-live may be any positive number or -1 for infinity. If
        this

        parameter is omitted, the default time-to-live is 7 days.'
      id: time_to_live
      isRequired: true
      type:
      - int
    - description: The server timeout, expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: 'A <xref:azure.storage.queue.QueueMessage> object.

        This object is also populated with the content although it is not

        returned from the service.'
      type:
      - azure.storage.queue.QueueMessage
  type: method
  uid: azure.storage.queue.aio.QueueClient.send_message
- class: azure.storage.queue.aio.QueueClient
  example:
  - "Set an access policy on the queue.<!--[!code-python[Main](les\\queue_samples_message_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_message_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Create an access\
    \ policy\n   from azure.storage.queue import AccessPolicy, QueueSasPermissions\n\
    \   access_policy = AccessPolicy()\n   access_policy.start = datetime.utcnow()\
    \ - timedelta(hours=1)\n   access_policy.expiry = datetime.utcnow() + timedelta(hours=1)\n\
    \   access_policy.permission = QueueSasPermissions(read=True)\n   identifiers\
    \ = {'my-access-policy-id': access_policy}\n\n   # Set the access policy\n   await\
    \ queue.set_queue_access_policy(identifiers)\n\n   ````\n"
  fullName: azure.storage.queue.aio.QueueClient.set_queue_access_policy
  langs:
  - python
  module: azure.storage.queue.aio
  name: set_queue_access_policy(signed_identifiers, **kwargs)
  namewithoutparameters: set_queue_access_policy
  summary: 'Sets stored access policies for the queue that may be used with Shared

    Access Signatures.


    When you set permissions for a queue, the existing permissions are replaced.

    To update the queue''s permissions, call <xref:azure.storage.queue.aio.QueueClient.get_queue_access_policy>
    to fetch

    all access policies associated with the queue, modify the access policy

    that you wish to change, and then call this function with the complete

    set of data to perform the update.


    When you establish a stored access policy on a queue, it may take up to

    30 seconds to take effect. During this interval, a shared access signature

    that is associated with the stored access policy will throw an

    <xref:azure.storage.queue.aio.HttpResponseError> until the access policy becomes
    active.'
  syntax:
    content: set_queue_access_policy(signed_identifiers, **kwargs)
    parameters:
    - description: 'SignedIdentifier access policies to associate with the queue.

        This may contain up to 5 elements. An empty dict

        will clear the access policies set on the service.'
      id: signed_identifiers
      isRequired: true
      type:
      - dict(str, azure.storage.queue.AccessPolicy)
    - description: The server timeout, expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
  type: method
  uid: azure.storage.queue.aio.QueueClient.set_queue_access_policy
- class: azure.storage.queue.aio.QueueClient
  example:
  - "Set metadata on the queue.<!--[!code-python[Main](les\\queue_samples_message_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_message_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   metadata = {'foo':\
    \ 'val1', 'bar': 'val2', 'baz': 'val3'}\n   await queue.set_queue_metadata(metadata=metadata)\n\
    \n   ````\n"
  fullName: azure.storage.queue.aio.QueueClient.set_queue_metadata
  langs:
  - python
  module: azure.storage.queue.aio
  name: set_queue_metadata(metadata=None, **kwargs)
  namewithoutparameters: set_queue_metadata
  summary: 'Sets user-defined metadata on the specified queue.


    Metadata is associated with the queue as name-value pairs.'
  syntax:
    content: set_queue_metadata(metadata=None, **kwargs)
    parameters:
    - description: 'A dict containing name-value pairs to associate with the

        queue as metadata.'
      id: metadata
      isRequired: true
      type:
      - dict(str, str)
    - description: The server timeout, expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
  type: method
  uid: azure.storage.queue.aio.QueueClient.set_queue_metadata
- class: azure.storage.queue.aio.QueueClient
  example:
  - "Update a message.<!--[!code-python[Main](les\\queue_samples_message_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_message_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Send a message\n\
    \   await queue.send_message(u\"update me\")\n\n   # Receive the message\n   messages\
    \ = queue.receive_messages()\n\n   # Update the message\n   async for message\
    \ in messages:\n       message = await queue.update_message(\n           message,\n\
    \           visibility_timeout=0,\n           content=u\"updated\")\n\n   ````\n"
  fullName: azure.storage.queue.aio.QueueClient.update_message
  langs:
  - python
  module: azure.storage.queue.aio
  name: update_message(message, pop_receipt=None, content=None, **kwargs)
  namewithoutparameters: update_message
  summary: 'Updates the visibility timeout of a message. You can also use this

    operation to update the contents of a message.


    This operation can be used to continually extend the invisibility of a

    queue message. This functionality can be useful if you want a worker role

    to "lease" a queue message. For example, if a worker role calls <xref:azure.storage.queue.aio.QueueClient.receive_messages>

    and recognizes that it needs more time to process a message, it can

    continually extend the message''s invisibility until it is processed. If

    the worker role were to fail during processing, eventually the message

    would become visible again and another worker role could process it.


    If the key-encryption-key field is set on the local service object, this method
    will

    encrypt the content before uploading.'
  syntax:
    content: update_message(message, pop_receipt=None, content=None, **kwargs)
    parameters:
    - description: The message object or id identifying the message to update.
      id: message
      isRequired: true
      type:
      - str
      - azure.storage.queue.QueueMessage
    - description: 'A valid pop receipt value returned from an earlier call

        to the <xref:azure.storage.queue.aio.QueueClient.receive_messages> or <xref:azure.storage.queue.aio.QueueClient.update_message>
        operation.'
      id: pop_receipt
      isRequired: true
      type:
      - str
    - description: 'Message content. Allowed type is determined by the encode_function

        set on the service. Default is str.'
      id: content
      isRequired: true
      type:
      - obj
    - description: 'Specifies the new visibility timeout value, in seconds,

        relative to server time. The new value must be larger than or equal

        to 0, and cannot be larger than 7 days. The visibility timeout of a

        message cannot be set to a value later than the expiry time. A

        message can be updated until it has been deleted or has expired.

        The message object or message id identifying the message to update.'
      id: visibility_timeout
      isRequired: true
      type:
      - int
    - description: The server timeout, expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: 'A <xref:azure.storage.queue.QueueMessage> object. For convenience,

        this object is also populated with the content, although it is not returned
        by the service.'
      type:
      - azure.storage.queue.QueueMessage
  type: method
  uid: azure.storage.queue.aio.QueueClient.update_message
references:
- fullName: azure.storage.queue.aio.QueueClient.clear_messages
  isExternal: false
  name: clear_messages(**kwargs)
  parent: azure.storage.queue.aio.QueueClient
  uid: azure.storage.queue.aio.QueueClient.clear_messages
- fullName: azure.storage.queue.aio.QueueClient.create_queue
  isExternal: false
  name: create_queue(**kwargs)
  parent: azure.storage.queue.aio.QueueClient
  uid: azure.storage.queue.aio.QueueClient.create_queue
- fullName: azure.storage.queue.aio.QueueClient.delete_message
  isExternal: false
  name: delete_message(message, pop_receipt=None, **kwargs)
  parent: azure.storage.queue.aio.QueueClient
  uid: azure.storage.queue.aio.QueueClient.delete_message
- fullName: azure.storage.queue.aio.QueueClient.delete_queue
  isExternal: false
  name: delete_queue(**kwargs)
  parent: azure.storage.queue.aio.QueueClient
  uid: azure.storage.queue.aio.QueueClient.delete_queue
- fullName: azure.storage.queue.aio.QueueClient.get_queue_access_policy
  isExternal: false
  name: get_queue_access_policy(**kwargs)
  parent: azure.storage.queue.aio.QueueClient
  uid: azure.storage.queue.aio.QueueClient.get_queue_access_policy
- fullName: azure.storage.queue.aio.QueueClient.get_queue_properties
  isExternal: false
  name: get_queue_properties(**kwargs)
  parent: azure.storage.queue.aio.QueueClient
  uid: azure.storage.queue.aio.QueueClient.get_queue_properties
- fullName: azure.storage.queue.aio.QueueClient.peek_messages
  isExternal: false
  name: peek_messages(max_messages=None, **kwargs)
  parent: azure.storage.queue.aio.QueueClient
  uid: azure.storage.queue.aio.QueueClient.peek_messages
- fullName: azure.storage.queue.aio.QueueClient.receive_messages
  isExternal: false
  name: receive_messages(**kwargs)
  parent: azure.storage.queue.aio.QueueClient
  uid: azure.storage.queue.aio.QueueClient.receive_messages
- fullName: azure.storage.queue.aio.QueueClient.send_message
  isExternal: false
  name: send_message(content, **kwargs)
  parent: azure.storage.queue.aio.QueueClient
  uid: azure.storage.queue.aio.QueueClient.send_message
- fullName: azure.storage.queue.aio.QueueClient.set_queue_access_policy
  isExternal: false
  name: set_queue_access_policy(signed_identifiers, **kwargs)
  parent: azure.storage.queue.aio.QueueClient
  uid: azure.storage.queue.aio.QueueClient.set_queue_access_policy
- fullName: azure.storage.queue.aio.QueueClient.set_queue_metadata
  isExternal: false
  name: set_queue_metadata(metadata=None, **kwargs)
  parent: azure.storage.queue.aio.QueueClient
  uid: azure.storage.queue.aio.QueueClient.set_queue_metadata
- fullName: azure.storage.queue.aio.QueueClient.update_message
  isExternal: false
  name: update_message(message, pop_receipt=None, content=None, **kwargs)
  parent: azure.storage.queue.aio.QueueClient
  uid: azure.storage.queue.aio.QueueClient.update_message
- fullName: dict(str,str)
  name: dict(str,str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str,str
    name: str,str
    uid: str,str
  - fullName: )
    name: )
  uid: dict(str,str)
- fullName: dict(str, azure.storage.queue.AccessPolicy)
  name: dict(str, AccessPolicy)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: azure.storage.queue.AccessPolicy
    name: AccessPolicy
    uid: azure.storage.queue.AccessPolicy
  - fullName: )
    name: )
  uid: dict(str, azure.storage.queue.AccessPolicy)
- fullName: list(<xref:azure.storage.queue.QueueMessage>)
  name: list(QueueMessage>)
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: <xref:azure.storage.queue.QueueMessage>
    name: QueueMessage>
    uid: <xref:azure.storage.queue.QueueMessage>
  - fullName: )
    name: )
  uid: list(<xref:azure.storage.queue.QueueMessage>)
- fullName: azure.core.async_paging.AsyncItemPaged[azure.storage.queue.QueueMessage]
  name: AsyncItemPaged[QueueMessage]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.storage.queue.QueueMessage
    name: QueueMessage
    uid: azure.storage.queue.QueueMessage
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.storage.queue.QueueMessage]
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
