### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.queue.QueueServiceClient.create_queue
  - azure.storage.queue.QueueServiceClient.delete_queue
  - azure.storage.queue.QueueServiceClient.from_connection_string
  - azure.storage.queue.QueueServiceClient.get_queue_client
  - azure.storage.queue.QueueServiceClient.get_service_properties
  - azure.storage.queue.QueueServiceClient.get_service_stats
  - azure.storage.queue.QueueServiceClient.list_queues
  - azure.storage.queue.QueueServiceClient.set_service_properties
  class: azure.storage.queue.QueueServiceClient
  example:
  - "Creating the QueueServiceClient with an account url and credential.<!--[!code-python[Main](les\\\
    queue_samples_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_authentication.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.storage.queue\
    \ import QueueServiceClient\n   queue_service = QueueServiceClient(account_url=self.account_url,\
    \ credential=self.access_key)\n\n   ````\n\nCreating the QueueServiceClient with\
    \ Azure Identity credentials.<!--[!code-python[Main](les\\queue_samples_authentication.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_authentication.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # Get a token\
    \ credential for authentication\n   from azure.identity import ClientSecretCredential\n\
    \   token_credential = ClientSecretCredential(\n       self.active_directory_tenant_id,\n\
    \       self.active_directory_application_id,\n       self.active_directory_application_secret\n\
    \   )\n\n   # Instantiate a QueueServiceClient using a token credential\n   from\
    \ azure.storage.queue import QueueServiceClient\n   queue_service = QueueServiceClient(account_url=self.account_url,\
    \ credential=token_credential)\n\n   ````\n"
  fullName: azure.storage.queue.QueueServiceClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.queue._shared.base_client.StorageAccountHostsMixin
  langs:
  - python
  module: azure.storage.queue
  name: QueueServiceClient
  summary: 'A client to interact with the Queue Service at the account level.


    This client provides operations to retrieve and configure the account properties

    as well as list, create and delete queues within the account.

    For operations relating to a specific queue, a client for this entity

    can be retrieved using the <xref:azure.storage.queue.QueueServiceClient.get_queue_client>
    function.'
  syntax:
    content: QueueServiceClient(account_url, credential=None, **kwargs)
    parameters:
    - description: 'The URL to the queue service endpoint. Any other entities included

        in the URL path (e.g. queue) will be discarded. This URL can be optionally

        authenticated with a SAS token.'
      id: account_url
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        an account

        shared access key, or an instance of a TokenCredentials class from azure.identity.'
      id: credential
    - description: 'The Storage API version to use for requests. Default value is
        ''2019-07-07''.

        Setting to an older version may result in reduced feature compatibility.'
      id: api_version
      type:
      - str
    - description: The hostname of the secondary endpoint.
      id: secondary_hostname
      type:
      - str
  type: class
  uid: azure.storage.queue.QueueServiceClient
- class: azure.storage.queue.QueueServiceClient
  example:
  - "Create a queue in the service.<!--[!code-python[Main](les\\queue_samples_service.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_service.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   queue_service.create_queue(\"\
    myqueue1\")\n\n   ````\n"
  fullName: azure.storage.queue.QueueServiceClient.create_queue
  langs:
  - python
  module: azure.storage.queue
  name: create_queue(name, metadata=None, **kwargs)
  namewithoutparameters: create_queue
  summary: 'Creates a new queue under the specified account.


    If a queue with the same name already exists, the operation fails.

    Returns a client with which to interact with the newly created queue.'
  syntax:
    content: create_queue(name, metadata=None, **kwargs)
    parameters:
    - description: The name of the queue to create.
      id: name
      isRequired: true
      type:
      - str
    - description: 'A dict with name_value pairs to associate with the

        queue as metadata. Example: {''Category'': ''test''}'
      id: metadata
      isRequired: true
      type:
      - dict(str, str)
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - azure.storage.queue.QueueClient
  type: method
  uid: azure.storage.queue.QueueServiceClient.create_queue
- class: azure.storage.queue.QueueServiceClient
  example:
  - "Delete a queue in the service.<!--[!code-python[Main](les\\queue_samples_service.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_service.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   queue_service.delete_queue(\"\
    myqueue1\")\n\n   ````\n"
  fullName: azure.storage.queue.QueueServiceClient.delete_queue
  langs:
  - python
  module: azure.storage.queue
  name: delete_queue(queue, **kwargs)
  namewithoutparameters: delete_queue
  summary: 'Deletes the specified queue and any messages it contains.


    When a queue is successfully deleted, it is immediately marked for deletion

    and is no longer accessible to clients. The queue is later removed from

    the Queue service during garbage collection.


    Note that deleting a queue is likely to take at least 40 seconds to complete.

    If an operation is attempted against the queue while it was being deleted,

    an <xref:azure.storage.queue.HttpResponseError> will be thrown.'
  syntax:
    content: delete_queue(queue, **kwargs)
    parameters:
    - description: 'The queue to delete. This can either be the name of the queue,

        or an instance of QueueProperties.'
      id: queue
      isRequired: true
      type:
      - str
      - azure.storage.queue.QueueProperties
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.queue.QueueServiceClient.delete_queue
- class: azure.storage.queue.QueueServiceClient
  example:
  - "Creating the QueueServiceClient with a connection string.<!--[!code-python[Main](les\\\
    queue_samples_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_authentication.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.storage.queue\
    \ import QueueServiceClient\n   queue_service = QueueServiceClient.from_connection_string(conn_str=self.connection_string)\n\
    \n   ````\n"
  fullName: azure.storage.queue.QueueServiceClient.from_connection_string
  langs:
  - python
  module: azure.storage.queue
  name: from_connection_string(conn_str, credential=None, **kwargs)
  namewithoutparameters: from_connection_string
  summary: Create QueueServiceClient from a Connection String.
  syntax:
    content: from_connection_string(conn_str, credential=None, **kwargs)
    parameters:
    - description: A connection string to an Azure Storage account.
      id: conn_str
      isRequired: true
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token, or the connection string already has
        shared

        access key values. The value can be a SAS token string, an account shared
        access

        key, or an instance of a TokenCredentials class from azure.identity.'
      id: credential
      isRequired: true
    - defaultValue: None
      id: credential
    return:
      description: A Queue service client.
      type:
      - azure.storage.queue.QueueClient
  type: method
  uid: azure.storage.queue.QueueServiceClient.from_connection_string
- class: azure.storage.queue.QueueServiceClient
  example:
  - "Get the queue client.<!--[!code-python[Main](les\\queue_samples_service.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\92\\\\\
    azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_service.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   # Get the queue client to interact\
    \ with a specific queue\n   queue = queue_service.get_queue_client(queue=\"myqueue2\"\
    )\n\n   ````\n"
  fullName: azure.storage.queue.QueueServiceClient.get_queue_client
  langs:
  - python
  module: azure.storage.queue
  name: get_queue_client(queue, **kwargs)
  namewithoutparameters: get_queue_client
  summary: 'Get a client to interact with the specified queue.


    The queue need not already exist.'
  syntax:
    content: get_queue_client(queue, **kwargs)
    parameters:
    - description: 'The queue. This can either be the name of the queue,

        or an instance of QueueProperties.'
      id: queue
      isRequired: true
      type:
      - str
      - azure.storage.queue.QueueProperties
    return:
      description: A <xref:azure.storage.queue.QueueClient> object.
      type:
      - azure.storage.queue.QueueClient
  type: method
  uid: azure.storage.queue.QueueServiceClient.get_queue_client
- class: azure.storage.queue.QueueServiceClient
  example:
  - "Getting queue service properties.<!--[!code-python[Main](les\\queue_samples_service.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_service.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   properties = queue_service.get_service_properties()\n\
    \n   ````\n"
  fullName: azure.storage.queue.QueueServiceClient.get_service_properties
  langs:
  - python
  module: azure.storage.queue
  name: get_service_properties(**kwargs)
  namewithoutparameters: get_service_properties
  summary: 'Gets the properties of a storage account''s Queue service, including

    Azure Storage Analytics.'
  syntax:
    content: get_service_properties(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: 'An object containing queue service properties such as

        analytics logging, hour/minute metrics, cors rules, etc.'
      type:
      - Dict[str, Any]
  type: method
  uid: azure.storage.queue.QueueServiceClient.get_service_properties
- class: azure.storage.queue.QueueServiceClient
  fullName: azure.storage.queue.QueueServiceClient.get_service_stats
  langs:
  - python
  module: azure.storage.queue
  name: get_service_stats(**kwargs)
  namewithoutparameters: get_service_stats
  summary: 'Retrieves statistics related to replication for the Queue service.


    It is only available when read-access geo-redundant replication is enabled for

    the storage account.


    With geo-redundant replication, Azure Storage maintains your data durable

    in two locations. In both locations, Azure Storage constantly maintains

    multiple healthy replicas of your data. The location where you read,

    create, update, or delete data is the primary storage account location.

    The primary location exists in the region you choose at the time you

    create an account via the Azure Management Azure classic portal, for

    example, North Central US. The location to which your data is replicated

    is the secondary location. The secondary location is automatically

    determined based on the location of the primary; it is in a second data

    center that resides in the same region as the primary location. Read-only

    access is available from the secondary location, if read-access geo-redundant

    replication is enabled for your storage account.'
  syntax:
    content: get_service_stats(**kwargs)
    parameters:
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: The queue service stats.
      type:
      - Dict[str, Any]
  type: method
  uid: azure.storage.queue.QueueServiceClient.get_service_stats
- class: azure.storage.queue.QueueServiceClient
  example:
  - "List queues in the service.<!--[!code-python[Main](les\\queue_samples_service.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_service.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   # List all the queues in the service\n\
    \   list_queues = queue_service.list_queues()\n   for queue in list_queues:\n\
    \       print(queue)\n\n   # List the queues in the service that start with the\
    \ name \"my\"\n   list_my_queues = queue_service.list_queues(name_starts_with=\"\
    my\")\n   for queue in list_my_queues:\n       print(queue)\n\n   ````\n"
  fullName: azure.storage.queue.QueueServiceClient.list_queues
  langs:
  - python
  module: azure.storage.queue
  name: list_queues(name_starts_with=None, include_metadata=False, **kwargs)
  namewithoutparameters: list_queues
  summary: 'Returns a generator to list the queues under the specified account.


    The generator will lazily follow the continuation tokens returned by

    the service and stop when all queues have been returned.'
  syntax:
    content: list_queues(name_starts_with=None, include_metadata=False, **kwargs)
    parameters:
    - description: 'Filters the results to return only queues whose names

        begin with the specified prefix.'
      id: name_starts_with
      isRequired: true
      type:
      - str
    - description: Specifies that queue metadata be returned in the response.
      id: include_metadata
      isRequired: true
      type:
      - bool
    - description: 'The maximum number of queue names to retrieve per API

        call. If the request does not specify the server will return up to 5,000 items.'
      id: results_per_page
      isRequired: true
      type:
      - int
    - description: 'The server timeout, expressed in seconds. This function may make
        multiple

        calls to the service in which case the timeout value specified will be

        applied to each individual call.'
      id: timeout
      isRequired: true
      type:
      - int
    return:
      description: An iterable (auto-paging) of QueueProperties.
      type:
      - azure.core.paging.ItemPaged[azure.storage.queue.QueueProperties]
  type: method
  uid: azure.storage.queue.QueueServiceClient.list_queues
- class: azure.storage.queue.QueueServiceClient
  example:
  - "Setting queue service properties.<!--[!code-python[Main](les\\queue_samples_service.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\92\\\\azure-storage-queue-12.1.2\\\\samples\\\\queue_samples_service.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   # Create service properties\n\
    \   from azure.storage.queue import QueueAnalyticsLogging, Metrics, CorsRule,\
    \ RetentionPolicy\n\n   # Create logging settings\n   logging = QueueAnalyticsLogging(read=True,\
    \ write=True, delete=True, retention_policy=RetentionPolicy(enabled=True, days=5))\n\
    \n   # Create metrics for requests statistics\n   hour_metrics = Metrics(enabled=True,\
    \ include_apis=True, retention_policy=RetentionPolicy(enabled=True, days=5))\n\
    \   minute_metrics = Metrics(enabled=True, include_apis=True, retention_policy=RetentionPolicy(enabled=True,\
    \ days=5))\n\n   # Create CORS rules\n   cors_rule1 = CorsRule(['www.xyz.com'],\
    \ ['GET'])\n   allowed_origins = ['www.xyz.com', \"www.ab.com\", \"www.bc.com\"\
    ]\n   allowed_methods = ['GET', 'PUT']\n   max_age_in_seconds = 500\n   exposed_headers\
    \ = [\"x-ms-meta-data*\", \"x-ms-meta-source*\", \"x-ms-meta-abc\", \"x-ms-meta-bcd\"\
    ]\n   allowed_headers = [\"x-ms-meta-data*\", \"x-ms-meta-target*\", \"x-ms-meta-xyz\"\
    , \"x-ms-meta-foo\"]\n   cors_rule2 = CorsRule(\n       allowed_origins,\n   \
    \    allowed_methods,\n       max_age_in_seconds=max_age_in_seconds,\n       exposed_headers=exposed_headers,\n\
    \       allowed_headers=allowed_headers\n   )\n\n   cors = [cors_rule1, cors_rule2]\n\
    \n   # Set the service properties\n   queue_service.set_service_properties(logging,\
    \ hour_metrics, minute_metrics, cors)\n\n   ````\n"
  fullName: azure.storage.queue.QueueServiceClient.set_service_properties
  langs:
  - python
  module: azure.storage.queue
  name: set_service_properties(analytics_logging=None, hour_metrics=None, minute_metrics=None,
    cors=None, **kwargs)
  namewithoutparameters: set_service_properties
  summary: 'Sets the properties of a storage account''s Queue service, including

    Azure Storage Analytics.


    If an element (e.g. analytics_logging) is left as None, the

    existing settings on the service for that functionality are preserved.'
  syntax:
    content: set_service_properties(analytics_logging=None, hour_metrics=None, minute_metrics=None,
      cors=None, **kwargs)
    parameters:
    - description: Groups the Azure Analytics Logging settings.
      id: analytics_logging
      isRequired: true
      type:
      - azure.storage.queue.QueueAnalyticsLogging
    - description: 'The hour metrics settings provide a summary of request

        statistics grouped by API in hourly aggregates for queues.'
      id: hour_metrics
      isRequired: true
      type:
      - azure.storage.queue.Metrics
    - description: 'The minute metrics settings provide request statistics

        for each minute for queues.'
      id: minute_metrics
      isRequired: true
      type:
      - azure.storage.queue.Metrics
    - description: 'You can include up to five CorsRule elements in the

        list. If an empty list is specified, all CORS rules will be deleted,

        and CORS will be disabled for the service.'
      id: cors
      isRequired: true
      type:
      - list(azure.storage.queue.CorsRule)
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      isRequired: true
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.queue.QueueServiceClient.set_service_properties
references:
- fullName: azure.storage.queue.QueueServiceClient.create_queue
  isExternal: false
  name: create_queue(name, metadata=None, **kwargs)
  parent: azure.storage.queue.QueueServiceClient
  uid: azure.storage.queue.QueueServiceClient.create_queue
- fullName: azure.storage.queue.QueueServiceClient.delete_queue
  isExternal: false
  name: delete_queue(queue, **kwargs)
  parent: azure.storage.queue.QueueServiceClient
  uid: azure.storage.queue.QueueServiceClient.delete_queue
- fullName: azure.storage.queue.QueueServiceClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, credential=None, **kwargs)
  parent: azure.storage.queue.QueueServiceClient
  uid: azure.storage.queue.QueueServiceClient.from_connection_string
- fullName: azure.storage.queue.QueueServiceClient.get_queue_client
  isExternal: false
  name: get_queue_client(queue, **kwargs)
  parent: azure.storage.queue.QueueServiceClient
  uid: azure.storage.queue.QueueServiceClient.get_queue_client
- fullName: azure.storage.queue.QueueServiceClient.get_service_properties
  isExternal: false
  name: get_service_properties(**kwargs)
  parent: azure.storage.queue.QueueServiceClient
  uid: azure.storage.queue.QueueServiceClient.get_service_properties
- fullName: azure.storage.queue.QueueServiceClient.get_service_stats
  isExternal: false
  name: get_service_stats(**kwargs)
  parent: azure.storage.queue.QueueServiceClient
  uid: azure.storage.queue.QueueServiceClient.get_service_stats
- fullName: azure.storage.queue.QueueServiceClient.list_queues
  isExternal: false
  name: list_queues(name_starts_with=None, include_metadata=False, **kwargs)
  parent: azure.storage.queue.QueueServiceClient
  uid: azure.storage.queue.QueueServiceClient.list_queues
- fullName: azure.storage.queue.QueueServiceClient.set_service_properties
  isExternal: false
  name: set_service_properties(analytics_logging=None, hour_metrics=None, minute_metrics=None,
    cors=None, **kwargs)
  parent: azure.storage.queue.QueueServiceClient
  uid: azure.storage.queue.QueueServiceClient.set_service_properties
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
- fullName: Dict[str, Any]
  name: Dict[str, Any]
  spec.python:
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: Dict[str, Any]
- fullName: azure.core.paging.ItemPaged[azure.storage.queue.QueueProperties]
  name: ItemPaged[QueueProperties]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.storage.queue.QueueProperties
    name: QueueProperties
    uid: azure.storage.queue.QueueProperties
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.storage.queue.QueueProperties]
- fullName: list(azure.storage.queue.CorsRule)
  name: list(CorsRule)
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: azure.storage.queue.CorsRule
    name: CorsRule
    uid: azure.storage.queue.CorsRule
  - fullName: )
    name: )
  uid: list(azure.storage.queue.CorsRule)
