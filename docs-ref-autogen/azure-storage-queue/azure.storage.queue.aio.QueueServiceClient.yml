### YamlMime:PythonClass
uid: azure.storage.queue.aio.QueueServiceClient
name: QueueServiceClient
fullName: azure.storage.queue.aio.QueueServiceClient
module: azure.storage.queue.aio
inheritances:
- azure.storage.queue._shared.base_client_async.AsyncStorageAccountHostsMixin
- azure.storage.queue._shared.base_client.StorageAccountHostsMixin
- azure.storage.queue._encryption.StorageEncryptionMixin
summary: 'A client to interact with the Queue Service at the account level.


  This client provides operations to retrieve and configure the account properties

  as well as list, create and delete queues within the account.

  For operations relating to a specific queue, a client for this entity

  can be retrieved using the <xref:azure.storage.queue.aio.QueueServiceClient.get_queue_client>
  function.'
constructor:
  syntax: 'QueueServiceClient(account_url: str, credential: str | Dict[str, str] |
    AzureNamedKeyCredential | AzureSasCredential | AsyncTokenCredential | None = None,
    **kwargs: Any)'
  parameters:
  - name: account_url
    description: 'The URL to the queue service endpoint. Any other entities included

      in the URL path (e.g. queue) will be discarded. This URL can be optionally

      authenticated with a SAS token.'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be a SAS token string,

      an instance of a AzureSasCredential or AzureNamedKeyCredential from azure.core.credentials,

      an account shared access key, or an instance of a TokenCredentials class from
      azure.identity.

      If the resource URI already contains a SAS token, this will be ignored in favor
      of an explicit credential

      - except in the case of AzureSasCredential, where the conflicting SAS tokens
      will raise a ValueError.

      If using an instance of AzureNamedKeyCredential, "name" should be the storage
      account name, and "key"

      should be the storage account key.'
    defaultValue: None
  keywordOnlyParameters:
  - name: api_version
    description: 'The Storage API version to use for requests. Default value is the
      most recent service version that is

      compatible with the current SDK. Setting to an older version may result in reduced
      feature compatibility.'
    types:
    - <xref:str>
  - name: secondary_hostname
    description: The hostname of the secondary endpoint.
    types:
    - <xref:str>
  - name: audience
    description: 'The audience to use when requesting tokens for Azure Active Directory

      authentication. Only has an effect when credential is of type TokenCredential.
      The value could be

      [https://storage.azure.com/](https://storage.azure.com/) (default) or [https:/](https:/)/<account>.queue.core.windows.net.'
    types:
    - <xref:str>
examples:
- "Creating the QueueServiceClient with an account url and credential.<!--[!code-python[Main](les\\\
  queue_samples_authentication_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
  \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
  : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
  \\py2docfx\\\\dist_temp\\\\226\\\\azure-storage-queue-12.9.0\\\\samples\\\\queue_samples_authentication_async.py\"\
  , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
  : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.storage.queue.aio\
  \ import QueueServiceClient\n   queue_service = QueueServiceClient(account_url=self.account_url,\
  \ credential=self.access_key)\n\n   ````\n\nCreating the QueueServiceClient with\
  \ Azure Identity credentials.<!--[!code-python[Main](les\\queue_samples_authentication_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
  \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\226\\\\azure-storage-queue-12.9.0\\\
  \\samples\\\\queue_samples_authentication_async.py\", \"xml:space\": \"preserve\"\
  , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n   # Get a token credential for authentication\n\
  \   from azure.identity.aio import ClientSecretCredential\n   token_credential =\
  \ ClientSecretCredential(\n       self.active_directory_tenant_id,\n       self.active_directory_application_id,\n\
  \       self.active_directory_application_secret\n   )\n\n   # Instantiate a QueueServiceClient\
  \ using a token credential\n   from azure.storage.queue.aio import QueueServiceClient\n\
  \   queue_service = QueueServiceClient(account_url=self.account_url, credential=token_credential)\n\
  \n   ````\n"
methods:
- uid: azure.storage.queue.aio.QueueServiceClient.close
  name: close
  summary: 'This method is to close the sockets opened by the client.

    It need not be used when using with a context manager.'
  signature: async close()
- uid: azure.storage.queue.aio.QueueServiceClient.create_queue
  name: create_queue
  summary: 'Creates a new queue under the specified account.


    If a queue with the same name already exists, the operation fails.

    Returns a client with which to interact with the newly created queue.'
  signature: 'async create_queue(name: str, metadata: Dict[str, str] | None = None,
    **kwargs: Any) -> QueueClient'
  parameters:
  - name: name
    description: The name of the queue to create.
    isRequired: true
    types:
    - <xref:str>
  - name: metadata
    description: 'A dict with name_value pairs to associate with the

      queue as metadata. Example: {''Category'': ''test''}'
    isRequired: true
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:str>]
  keywordOnlyParameters:
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    types:
    - <xref:int>
  return:
    description: A QueueClient for the newly created Queue.
    types:
    - <xref:azure.storage.queue.aio.QueueClient>
  examples:
  - "Create a queue in the service.<!--[!code-python[Main](les\\queue_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    226\\\\azure-storage-queue-12.9.0\\\\samples\\\\queue_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   await queue_service.create_queue(\"myqueue1\")\n\n   ````\n"
- uid: azure.storage.queue.aio.QueueServiceClient.delete_queue
  name: delete_queue
  summary: 'Deletes the specified queue and any messages it contains.


    When a queue is successfully deleted, it is immediately marked for deletion

    and is no longer accessible to clients. The queue is later removed from

    the Queue service during garbage collection.


    Note that deleting a queue is likely to take at least 40 seconds to complete.

    If an operation is attempted against the queue while it was being deleted,

    an <xref:azure.storage.queue.aio.HttpResponseError> will be thrown.'
  signature: 'async delete_queue(queue: QueueProperties | str, **kwargs: Any) -> None'
  parameters:
  - name: queue
    description: 'The queue to delete. This can either be the name of the queue,

      or an instance of QueueProperties.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.queue.QueueProperties>
  keywordOnlyParameters:
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    types:
    - <xref:int>
  return:
    types:
    - <xref:None>
  examples:
  - "Delete a queue in the service.<!--[!code-python[Main](les\\queue_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    226\\\\azure-storage-queue-12.9.0\\\\samples\\\\queue_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   await queue_service.delete_queue(\"myqueue1\")\n\n   ````\n"
- uid: azure.storage.queue.aio.QueueServiceClient.from_connection_string
  name: from_connection_string
  summary: Create QueueServiceClient from a Connection String.
  signature: 'from_connection_string(conn_str: str, credential: str | Dict[str, str]
    | AzureNamedKeyCredential | AzureSasCredential | AsyncTokenCredential | None =
    None, **kwargs: Any) -> Self'
  parameters:
  - name: conn_str
    description: A connection string to an Azure Storage account.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token, or the connection string already has shared

      access key values. The value can be a SAS token string,

      an instance of a AzureSasCredential or AzureNamedKeyCredential from azure.core.credentials,

      an account shared access key, or an instance of a TokenCredentials class from
      azure.identity.

      Credentials provided here will take precedence over those in the connection
      string.

      If using an instance of AzureNamedKeyCredential, "name" should be the storage
      account name, and "key"

      should be the storage account key.'
    defaultValue: None
  return:
    description: A Queue service client.
    types:
    - <xref:azure.storage.queue.QueueClient>
  examples:
  - "Creating the QueueServiceClient with a connection string.<!--[!code-python[Main](les\\\
    queue_samples_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\226\\\\azure-storage-queue-12.9.0\\\\samples\\\\queue_samples_authentication.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.storage.queue import QueueServiceClient\n   queue_service = QueueServiceClient.from_connection_string(conn_str=self.connection_string)\n\
    \n   ````\n"
- uid: azure.storage.queue.aio.QueueServiceClient.get_queue_client
  name: get_queue_client
  summary: 'Get a client to interact with the specified queue.


    The queue need not already exist.'
  signature: 'get_queue_client(queue: QueueProperties | str, **kwargs: Any) -> QueueClient'
  parameters:
  - name: queue
    description: 'The queue. This can either be the name of the queue,

      or an instance of QueueProperties.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.queue.QueueProperties>
  return:
    description: A <xref:azure.storage.queue.aio.QueueClient> object.
    types:
    - <xref:azure.storage.queue.aio.QueueClient>
  examples:
  - "Get the queue client.<!--[!code-python[Main](les\\queue_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    226\\\\azure-storage-queue-12.9.0\\\\samples\\\\queue_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # Get the queue client to interact with a specific queue\n   queue = queue_service.get_queue_client(queue=\"\
    myqueue2\")\n\n   ````\n"
- uid: azure.storage.queue.aio.QueueServiceClient.get_service_properties
  name: get_service_properties
  summary: 'Gets the properties of a storage account''s Queue service, including

    Azure Storage Analytics.'
  signature: 'async get_service_properties(**kwargs: Any) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    types:
    - <xref:int>
  return:
    description: 'An object containing queue service properties such as

      analytics logging, hour/minute metrics, cors rules, etc.'
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]
  examples:
  - "Getting queue service properties.<!--[!code-python[Main](les\\queue_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    226\\\\azure-storage-queue-12.9.0\\\\samples\\\\queue_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   properties = await queue_service.get_service_properties()\n\n   ````\n"
- uid: azure.storage.queue.aio.QueueServiceClient.get_service_stats
  name: get_service_stats
  summary: 'Retrieves statistics related to replication for the Queue service.


    It is only available when read-access geo-redundant replication is enabled for

    the storage account.


    With geo-redundant replication, Azure Storage maintains your data durable

    in two locations. In both locations, Azure Storage constantly maintains

    multiple healthy replicas of your data. The location where you read,

    create, update, or delete data is the primary storage account location.

    The primary location exists in the region you choose at the time you

    create an account via the Azure Management Azure classic portal, for

    example, North Central US. The location to which your data is replicated

    is the secondary location. The secondary location is automatically

    determined based on the location of the primary; it is in a second data

    center that resides in the same region as the primary location. Read-only

    access is available from the secondary location, if read-access geo-redundant

    replication is enabled for your storage account.'
  signature: 'async get_service_stats(**kwargs: Any) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    types:
    - <xref:int>
  return:
    description: The queue service stats.
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]
- uid: azure.storage.queue.aio.QueueServiceClient.list_queues
  name: list_queues
  summary: 'Returns a generator to list the queues under the specified account.


    The generator will lazily follow the continuation tokens returned by

    the service and stop when all queues have been returned.'
  signature: 'list_queues(name_starts_with: str | None = None, include_metadata: bool
    | None = False, **kwargs: Any) -> AsyncItemPaged'
  parameters:
  - name: name_starts_with
    description: 'Filters the results to return only queues whose names

      begin with the specified prefix.'
    isRequired: true
    types:
    - <xref:str>
  - name: include_metadata
    description: Specifies that queue metadata be returned in the response.
    isRequired: true
    types:
    - <xref:bool>
  keywordOnlyParameters:
  - name: results_per_page
    description: 'The maximum number of queue names to retrieve per API

      call. If the request does not specify the server will return up to 5,000 items.'
    types:
    - <xref:int>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations](https://learn.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-queue-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-queue#other-client--per-operation-configuration).
      This function may make multiple

      calls to the service in which case the timeout value specified will be

      applied to each individual call.'
    types:
    - <xref:int>
  return:
    description: An iterable (auto-paging) of QueueProperties.
    types:
    - <xref:azure.core.paging.AsyncItemPaged>[<xref:azure.storage.queue.QueueProperties>]
  examples:
  - "List queues in the service.<!--[!code-python[Main](les\\queue_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    226\\\\azure-storage-queue-12.9.0\\\\samples\\\\queue_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # List all the queues in the service\n   list_queues = queue_service.list_queues()\n\
    \   async for queue in list_queues:\n       print(queue)\n\n   # List the queues\
    \ in the service that start with the name \"my_\"\n   list_my_queues = queue_service.list_queues(name_starts_with=\"\
    my_\")\n   async for queue in list_my_queues:\n       print(queue)\n\n   ````\n"
- uid: azure.storage.queue.aio.QueueServiceClient.set_service_properties
  name: set_service_properties
  summary: 'Sets the properties of a storage account''s Queue service, including

    Azure Storage Analytics.


    If an element (e.g. analytics_logging) is left as None, the

    existing settings on the service for that functionality are preserved.'
  signature: 'async set_service_properties(analytics_logging: QueueAnalyticsLogging
    | None = None, hour_metrics: Metrics | None = None, minute_metrics: Metrics |
    None = None, cors: List[CorsRule] | None = None, **kwargs: Any) -> None'
  parameters:
  - name: analytics_logging
    description: Groups the Azure Analytics Logging settings.
    isRequired: true
    types:
    - <xref:azure.storage.queue.QueueAnalyticsLogging>
  - name: hour_metrics
    description: 'The hour metrics settings provide a summary of request

      statistics grouped by API in hourly aggregates for queues.'
    isRequired: true
    types:
    - <xref:azure.storage.queue.Metrics>
  - name: minute_metrics
    description: 'The minute metrics settings provide request statistics

      for each minute for queues.'
    isRequired: true
    types:
    - <xref:azure.storage.queue.Metrics>
  - name: cors
    description: 'You can include up to five CorsRule elements in the

      list. If an empty list is specified, all CORS rules will be deleted,

      and CORS will be disabled for the service.'
    isRequired: true
    types:
    - <xref:typing.Optional>[<xref:typing.List>(<xref:azure.storage.queue.CorsRule>)]
  keywordOnlyParameters:
  - name: timeout
    description: The timeout parameter is expressed in seconds.
    types:
    - <xref:int>
  examples:
  - "Setting queue service properties.<!--[!code-python[Main](les\\queue_samples_service_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    226\\\\azure-storage-queue-12.9.0\\\\samples\\\\queue_samples_service_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # Create service properties\n   from azure.storage.queue import QueueAnalyticsLogging,\
    \ Metrics, CorsRule, RetentionPolicy\n\n   # Create logging settings\n   logging\
    \ = QueueAnalyticsLogging(read=True, write=True, delete=True, retention_policy=RetentionPolicy(enabled=True,\
    \ days=5))\n\n   # Create metrics for requests statistics\n   hour_metrics = Metrics(enabled=True,\
    \ include_apis=True, retention_policy=RetentionPolicy(enabled=True, days=5))\n\
    \   minute_metrics = Metrics(enabled=True, include_apis=True, retention_policy=RetentionPolicy(enabled=True,\
    \ days=5))\n\n   # Create CORS rules\n   cors_rule1 = CorsRule(['www.xyz.com'],\
    \ ['GET'])\n   allowed_origins = ['www.xyz.com', \"www.ab.com\", \"www.bc.com\"\
    ]\n   allowed_methods = ['GET', 'PUT']\n   max_age_in_seconds = 500\n   exposed_headers\
    \ = [\"x-ms-meta-data*\", \"x-ms-meta-source*\", \"x-ms-meta-abc\", \"x-ms-meta-bcd\"\
    ]\n   allowed_headers = [\"x-ms-meta-data*\", \"x-ms-meta-target*\", \"x-ms-meta-xyz\"\
    , \"x-ms-meta-foo\"]\n   cors_rule2 = CorsRule(\n       allowed_origins,\n   \
    \    allowed_methods,\n       max_age_in_seconds=max_age_in_seconds,\n       exposed_headers=exposed_headers,\n\
    \       allowed_headers=allowed_headers\n   )\n\n   cors = [cors_rule1, cors_rule2]\n\
    \n   # Set the service properties\n   await queue_service.set_service_properties(logging,\
    \ hour_metrics, minute_metrics, cors)\n\n   ````\n"
attributes:
- uid: azure.storage.queue.aio.QueueServiceClient.api_version
  name: api_version
  summary: The version of the Storage API used for requests.
  return:
    types:
    - <xref:str>
- uid: azure.storage.queue.aio.QueueServiceClient.location_mode
  name: location_mode
  summary: 'The location mode that the client is currently using.


    By default this will be "primary". Options include "primary" and "secondary".'
  return:
    types:
    - <xref:str>
- uid: azure.storage.queue.aio.QueueServiceClient.primary_endpoint
  name: primary_endpoint
  summary: The full primary endpoint URL.
  return:
    types:
    - <xref:str>
- uid: azure.storage.queue.aio.QueueServiceClient.primary_hostname
  name: primary_hostname
  summary: The hostname of the primary endpoint.
  return:
    types:
    - <xref:str>
- uid: azure.storage.queue.aio.QueueServiceClient.secondary_endpoint
  name: secondary_endpoint
  summary: 'The full secondary endpoint URL if configured.


    If not available a ValueError will be raised. To explicitly specify a secondary
    hostname, use the optional

    *secondary_hostname* keyword argument on instantiation.'
  return:
    types:
    - <xref:str>
  exceptions:
  - type: ValueError
- uid: azure.storage.queue.aio.QueueServiceClient.secondary_hostname
  name: secondary_hostname
  summary: 'The hostname of the secondary endpoint.


    If not available this will be None. To explicitly specify a secondary hostname,
    use the optional

    *secondary_hostname* keyword argument on instantiation.'
  return:
    types:
    - <xref:typing.Optional>[<xref:str>]
- uid: azure.storage.queue.aio.QueueServiceClient.url
  name: url
  summary: 'The full endpoint URL to this entity, including SAS token if used.


    This could be either the primary endpoint,

    or the secondary endpoint depending on the current <xref:azure.storage.queue.aio.QueueServiceClient.location_mode>.

    :returns: The full endpoint URL to this entity, including SAS token if used.

    :rtype: str'
