### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.appconfiguration.AzureAppConfigurationClient.add_configuration_setting
  - azure.appconfiguration.AzureAppConfigurationClient.delete_configuration_setting
  - azure.appconfiguration.AzureAppConfigurationClient.from_connection_string
  - azure.appconfiguration.AzureAppConfigurationClient.get_configuration_setting
  - azure.appconfiguration.AzureAppConfigurationClient.list_configuration_settings
  - azure.appconfiguration.AzureAppConfigurationClient.list_revisions
  - azure.appconfiguration.AzureAppConfigurationClient.set_configuration_setting
  - azure.appconfiguration.AzureAppConfigurationClient.set_read_only
  class: azure.appconfiguration.AzureAppConfigurationClient
  fullName: azure.appconfiguration.AzureAppConfigurationClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.appconfiguration
  name: AzureAppConfigurationClient
  summary: Represents an client that calls restful API of Azure App Configuration
    service.
  syntax:
    content: AzureAppConfigurationClient(base_url, credential, **kwargs)
    parameters:
    - description: base url of the service
      id: base_url
      type:
      - str
    - description: An object which can provide secrets for the app configuration service
      id: credential
      type:
      - azure.AppConfigConnectionStringCredential
    - description: If omitted, the standard pipeline is used.
      id: pipeline
      type:
      - Pipeline
    - description: If omitted, the standard pipeline is used.
      id: transport
      type:
      - HttpTransport
    - description: If omitted, the standard pipeline is used.
      id: policies
      type:
      - list[HTTPPolicy]
  type: class
  uid: azure.appconfiguration.AzureAppConfigurationClient
- class: azure.appconfiguration.AzureAppConfigurationClient
  exceptions:
  - type: HttpResponseError
  - type: HttpResponseError
  fullName: azure.appconfiguration.AzureAppConfigurationClient.add_configuration_setting
  langs:
  - python
  module: azure.appconfiguration
  name: add_configuration_setting(configuration_setting, **kwargs)
  namewithoutparameters: add_configuration_setting
  summary: "Add a ConfigurationSetting into the Azure App Configuration service.\n\
    \nExample\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n\
    \   config_setting = ConfigurationSetting(\n       key=\"MyKey\",\n       label=\"\
    MyLabel\",\n       value=\"my value\",\n       content_type=\"my content type\"\
    ,\n       tags={\"my tag\": \"my tag value\"}\n   )\n   added_config_setting =\
    \ client.add_configuration_setting(config_setting)\n   ````"
  syntax:
    content: add_configuration_setting(configuration_setting, **kwargs)
    parameters:
    - description: the ConfigurationSetting object to be added
      id: configuration_setting
      isRequired: true
      type:
      - azure.appconfiguration.ConfigurationSetting
    - description: if "headers" exists, its value (a dict) will be added to the http
        request header
      id: headers
      isRequired: true
      type:
      - dict
    return:
      description: The ConfigurationSetting object returned from the App Configuration
        service
      type:
      - <xref:azure.appconfiguration.ConfigurationSetting>
  type: method
  uid: azure.appconfiguration.AzureAppConfigurationClient.add_configuration_setting
- class: azure.appconfiguration.AzureAppConfigurationClient
  exceptions:
  - type: HttpResponseError
  - type: HttpResponseError
  fullName: azure.appconfiguration.AzureAppConfigurationClient.delete_configuration_setting
  langs:
  - python
  module: azure.appconfiguration
  name: delete_configuration_setting(key, label=None, **kwargs)
  namewithoutparameters: delete_configuration_setting
  summary: "Delete a ConfigurationSetting if it exists\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false,\
    \ \"highlight_args\": {}} -->\n\n````python\n\n   deleted_config_setting = client.delete_configuration_setting(\n\
    \       key=\"MyKey\", label=\"MyLabel\"\n   )\n   ````"
  syntax:
    content: delete_configuration_setting(key, label=None, **kwargs)
    parameters:
    - description: key used to identify the ConfigurationSetting
      id: key
      isRequired: true
      type:
      - str
    - description: label used to identify the ConfigurationSetting
      id: label
      isRequired: true
      type:
      - str
    - description: check if the ConfigurationSetting is changed. Set None to skip
        checking etag
      id: etag
      isRequired: true
      type:
      - str
    - description: the match condition to use upon the etag
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: if "headers" exists, its value (a dict) will be added to the http
        request
      id: headers
      isRequired: true
      type:
      - dict
    return:
      description: The deleted ConfigurationSetting returned from the service, or
        None if it doesn't exist.
      type:
      - <xref:azure.appconfiguration.ConfigurationSetting>
  type: method
  uid: azure.appconfiguration.AzureAppConfigurationClient.delete_configuration_setting
- class: azure.appconfiguration.AzureAppConfigurationClient
  fullName: azure.appconfiguration.AzureAppConfigurationClient.from_connection_string
  langs:
  - python
  module: azure.appconfiguration
  name: from_connection_string(connection_string, **kwargs)
  namewithoutparameters: from_connection_string
  summary: "Create AzureAppConfigurationClient from a Connection String.\n\n   param\
    \ connection_string:\n      Connection String\n      (one of the access keys of\
    \ the Azure App Configuration resource)\n      used to access the Azure App Configuration.\n\
    \n   type connection_string:\n      str\n\nExample\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {}} -->\n\n````python\n\n   from azure.appconfiguration import AzureAppConfigurationClient\n\
    \   connection_str = \"<my connection string>\"\n   client = AzureAppConfigurationClient.from_connection_string(connection_str)\n\
    \   ````"
  syntax:
    content: from_connection_string(connection_string, **kwargs)
    parameters:
    - id: cls
      isRequired: true
    - id: connection_string
      isRequired: true
  type: method
  uid: azure.appconfiguration.AzureAppConfigurationClient.from_connection_string
- class: azure.appconfiguration.AzureAppConfigurationClient
  exceptions:
  - type: HttpResponseError
  - type: HttpResponseError
  fullName: azure.appconfiguration.AzureAppConfigurationClient.get_configuration_setting
  langs:
  - python
  module: azure.appconfiguration
  name: 'get_configuration_setting(key, label=None, etag=''*'', match_condition=<MatchConditions.Unconditionally:
    1>, **kwargs)'
  namewithoutparameters: get_configuration_setting
  summary: "Get the matched ConfigurationSetting from Azure App Configuration service\n\
    \nExample\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n\
    \   fetched_config_setting = client.get_configuration_setting(\n       key=\"\
    MyKey\", label=\"MyLabel\"\n   )\n   ````"
  syntax:
    content: 'get_configuration_setting(key, label=None, etag=''*'', match_condition=<MatchConditions.Unconditionally:
      1>, **kwargs)'
    parameters:
    - description: key of the ConfigurationSetting
      id: key
      isRequired: true
      type:
      - str
    - description: label of the ConfigurationSetting
      id: label
      isRequired: true
      type:
      - str
    - description: check if the ConfigurationSetting is changed. Set None to skip
        checking etag
      id: etag
      isRequired: true
      type:
      - str
      - None
    - description: the match condition to use upon the etag
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: the retrieved ConfigurationSetting that created no later than this
        datetime
      id: accept_datetime
      isRequired: true
      type:
      - datetime
    - description: if "headers" exists, its value (a dict) will be added to the http
        request header
      id: headers
      isRequired: true
      type:
      - dict
    return:
      description: The matched ConfigurationSetting object
      type:
      - <xref:azure.appconfiguration.ConfigurationSetting>
  type: method
  uid: azure.appconfiguration.AzureAppConfigurationClient.get_configuration_setting
- class: azure.appconfiguration.AzureAppConfigurationClient
  exceptions:
  - type: HttpResponseError
  - type: HttpResponseError
  fullName: azure.appconfiguration.AzureAppConfigurationClient.list_configuration_settings
  langs:
  - python
  module: azure.appconfiguration
  name: list_configuration_settings(key_filter=None, label_filter=None, **kwargs)
  namewithoutparameters: list_configuration_settings
  summary: "List the configuration settings stored in the configuration service, optionally\
    \ filtered by\nlabel and accept_datetime\n\nExample\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {}} -->\n\n````python\n\n   from datetime import datetime, timedelta\n\
    \n   accept_datetime = datetime.today() + timedelta(days=-1)\n\n   all_listed\
    \ = client.list_configuration_settings()\n   for item in all_listed:\n       pass\
    \  # do something\n\n   filtered_listed = client.list_configuration_settings(\n\
    \       label_filter=\"*Labe*\", key_filter=\"*Ke*\", accept_datetime=accept_datetime\n\
    \   )\n   for item in filtered_listed:\n       pass  # do something\n   ````"
  syntax:
    content: list_configuration_settings(key_filter=None, label_filter=None, **kwargs)
    parameters:
    - description: 'filter results based on their keys. ''*'' can be

        used as wildcard in the beginning or end of the filter'
      id: key_filter
      isRequired: true
      type:
      - str
    - description: 'filter results based on their label. ''*'' can be

        used as wildcard in the beginning or end of the filter'
      id: label_filter
      isRequired: true
      type:
      - str
    - description: filter out ConfigurationSetting created after this datetime
      id: accept_datetime
      isRequired: true
      type:
      - datetime
    - description: specify which fields to include in the results. Leave None to include
        all fields
      id: fields
      isRequired: true
      type:
      - list[str]
    - description: if "headers" exists, its value (a dict) will be added to the http
        request header
      id: headers
      isRequired: true
      type:
      - dict
    return:
      description: An iterator of <xref:azure.appconfiguration.ConfigurationSetting>
      type:
      - azure.core.paging.ItemPaged[ConfigurationSetting]
  type: method
  uid: azure.appconfiguration.AzureAppConfigurationClient.list_configuration_settings
- class: azure.appconfiguration.AzureAppConfigurationClient
  exceptions:
  - type: HttpResponseError
  - type: HttpResponseError
  fullName: azure.appconfiguration.AzureAppConfigurationClient.list_revisions
  langs:
  - python
  module: azure.appconfiguration
  name: list_revisions(key_filter=None, label_filter=None, **kwargs)
  namewithoutparameters: list_revisions
  summary: "Find the ConfigurationSetting revision history.\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false,\
    \ \"highlight_args\": {}} -->\n\n````python\n\n   from datetime import datetime,\
    \ timedelta\n\n   accept_datetime = datetime.today() + timedelta(days=-1)\n\n\
    \   all_revisions = client.list_revisions()\n   for item in all_revisions:\n \
    \      pass  # do something\n\n   filtered_revisions = client.list_revisions(\n\
    \       label_filter=\"*Labe*\", key_filter=\"*Ke*\", accept_datetime=accept_datetime\n\
    \   )\n   for item in filtered_revisions:\n       pass  # do something\n   ````"
  syntax:
    content: list_revisions(key_filter=None, label_filter=None, **kwargs)
    parameters:
    - description: 'filter results based on their keys. ''*'' can be

        used as wildcard in the beginning or end of the filter'
      id: key_filter
      isRequired: true
      type:
      - str
    - description: 'filter results based on their label. ''*'' can be

        used as wildcard in the beginning or end of the filter'
      id: label_filter
      isRequired: true
      type:
      - str
    - description: filter out ConfigurationSetting created after this datetime
      id: accept_datetime
      isRequired: true
      type:
      - datetime
    - description: specify which fields to include in the results. Leave None to include
        all fields
      id: fields
      isRequired: true
      type:
      - list[str]
    - description: if "headers" exists, its value (a dict) will be added to the http
        request header
      id: headers
      isRequired: true
      type:
      - dict
    return:
      description: An iterator of <xref:azure.appconfiguration.ConfigurationSetting>
      type:
      - azure.core.paging.ItemPaged[ConfigurationSetting]
  type: method
  uid: azure.appconfiguration.AzureAppConfigurationClient.list_revisions
- class: azure.appconfiguration.AzureAppConfigurationClient
  exceptions:
  - type: HttpResponseError
  - type: HttpResponseError
  fullName: azure.appconfiguration.AzureAppConfigurationClient.set_configuration_setting
  langs:
  - python
  module: azure.appconfiguration
  name: 'set_configuration_setting(configuration_setting, match_condition=<MatchConditions.Unconditionally:
    1>, **kwargs)'
  namewithoutparameters: set_configuration_setting
  summary: "Add or update a ConfigurationSetting.\nIf the configuration setting identified\
    \ by key and label does not exist, this is a create.\nOtherwise this is an update.\n\
    \nExample\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n\
    \   config_setting = ConfigurationSetting(\n       key=\"MyKey\",\n       label=\"\
    MyLabel\",\n       value=\"my set value\",\n       content_type=\"my set content\
    \ type\",\n       tags={\"my set tag\": \"my set tag value\"}\n   )\n   returned_config_setting\
    \ = client.set_configuration_setting(config_setting)\n   ````"
  syntax:
    content: 'set_configuration_setting(configuration_setting, match_condition=<MatchConditions.Unconditionally:
      1>, **kwargs)'
    parameters:
    - description: the ConfigurationSetting to be added (if not exists)         or
        updated (if exists) to the service
      id: configuration_setting
      isRequired: true
      type:
      - azure.appconfiguration.ConfigurationSetting
    - description: the match condition to use upon the etag
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: if "headers" exists, its value (a dict) will be added to the http
        request header
      id: headers
      isRequired: true
      type:
      - dict
    return:
      description: The ConfigurationSetting returned from the service
      type:
      - <xref:azure.appconfiguration.ConfigurationSetting>
  type: method
  uid: azure.appconfiguration.AzureAppConfigurationClient.set_configuration_setting
- class: azure.appconfiguration.AzureAppConfigurationClient
  exceptions:
  - type: HttpResponseError
  - type: HttpResponseError
  fullName: azure.appconfiguration.AzureAppConfigurationClient.set_read_only
  langs:
  - python
  module: azure.appconfiguration
  name: set_read_only(configuration_setting, read_only=True, **kwargs)
  namewithoutparameters: set_read_only
  summary: "Set a configuration setting read only\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false,\
    \ \"highlight_args\": {}} -->\n\n````python\n\n   config_setting = client.get_configuration_setting(\n\
    \       key=\"MyKey\", label=\"MyLabel\"\n   )\n\n   read_only_config_setting\
    \ = client.set_read_only(config_setting)\n   read_only_config_setting = client.set_read_only(config_setting,\
    \ read_only=False)\n   ````"
  syntax:
    content: set_read_only(configuration_setting, read_only=True, **kwargs)
    parameters:
    - description: the ConfigurationSetting to be set read only
      id: configuration_setting
      isRequired: true
      type:
      - azure.appconfiguration.ConfigurationSetting
    - description: set the read only setting if true, else clear the read only setting
      id: read_only
      isRequired: true
      type:
      - bool
    - description: if "headers" exists, its value (a dict) will be added to the http
        request header
      id: headers
      isRequired: true
      type:
      - dict
    return:
      description: The ConfigurationSetting returned from the service
      type:
      - <xref:azure.appconfiguration.ConfigurationSetting>
  type: method
  uid: azure.appconfiguration.AzureAppConfigurationClient.set_read_only
references:
- fullName: azure.appconfiguration.AzureAppConfigurationClient.add_configuration_setting
  isExternal: false
  name: add_configuration_setting(configuration_setting, **kwargs)
  parent: azure.appconfiguration.AzureAppConfigurationClient
  uid: azure.appconfiguration.AzureAppConfigurationClient.add_configuration_setting
- fullName: azure.appconfiguration.AzureAppConfigurationClient.delete_configuration_setting
  isExternal: false
  name: delete_configuration_setting(key, label=None, **kwargs)
  parent: azure.appconfiguration.AzureAppConfigurationClient
  uid: azure.appconfiguration.AzureAppConfigurationClient.delete_configuration_setting
- fullName: azure.appconfiguration.AzureAppConfigurationClient.from_connection_string
  isExternal: false
  name: from_connection_string(connection_string, **kwargs)
  parent: azure.appconfiguration.AzureAppConfigurationClient
  uid: azure.appconfiguration.AzureAppConfigurationClient.from_connection_string
- fullName: azure.appconfiguration.AzureAppConfigurationClient.get_configuration_setting
  isExternal: false
  name: 'get_configuration_setting(key, label=None, etag=''*'', match_condition=<MatchConditions.Unconditionally:
    1>, **kwargs)'
  parent: azure.appconfiguration.AzureAppConfigurationClient
  uid: azure.appconfiguration.AzureAppConfigurationClient.get_configuration_setting
- fullName: azure.appconfiguration.AzureAppConfigurationClient.list_configuration_settings
  isExternal: false
  name: list_configuration_settings(key_filter=None, label_filter=None, **kwargs)
  parent: azure.appconfiguration.AzureAppConfigurationClient
  uid: azure.appconfiguration.AzureAppConfigurationClient.list_configuration_settings
- fullName: azure.appconfiguration.AzureAppConfigurationClient.list_revisions
  isExternal: false
  name: list_revisions(key_filter=None, label_filter=None, **kwargs)
  parent: azure.appconfiguration.AzureAppConfigurationClient
  uid: azure.appconfiguration.AzureAppConfigurationClient.list_revisions
- fullName: azure.appconfiguration.AzureAppConfigurationClient.set_configuration_setting
  isExternal: false
  name: 'set_configuration_setting(configuration_setting, match_condition=<MatchConditions.Unconditionally:
    1>, **kwargs)'
  parent: azure.appconfiguration.AzureAppConfigurationClient
  uid: azure.appconfiguration.AzureAppConfigurationClient.set_configuration_setting
- fullName: azure.appconfiguration.AzureAppConfigurationClient.set_read_only
  isExternal: false
  name: set_read_only(configuration_setting, read_only=True, **kwargs)
  parent: azure.appconfiguration.AzureAppConfigurationClient
  uid: azure.appconfiguration.AzureAppConfigurationClient.set_read_only
- fullName: list[HTTPPolicy]
  name: list[HTTPPolicy]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: HTTPPolicy
    name: HTTPPolicy
    uid: HTTPPolicy
  - fullName: ']'
    name: ']'
  uid: list[HTTPPolicy]
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
- fullName: azure.core.paging.ItemPaged[ConfigurationSetting]
  name: ItemPaged[ConfigurationSetting]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: ConfigurationSetting
    name: ConfigurationSetting
    uid: ConfigurationSetting
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[ConfigurationSetting]
