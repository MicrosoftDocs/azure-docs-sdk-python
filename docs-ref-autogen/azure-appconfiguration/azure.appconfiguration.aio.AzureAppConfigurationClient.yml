### YamlMime:PythonClass
uid: azure.appconfiguration.aio.AzureAppConfigurationClient
name: AzureAppConfigurationClient
fullName: azure.appconfiguration.aio.AzureAppConfigurationClient
module: azure.appconfiguration.aio
inheritances:
- builtins.object
summary: "Represents a client that calls restful API of Azure App Configuration service.\n\
  \n   param str base_url:\n      base url of the service\n\n   param credential:\n\
  \      An object which can provide secrets for the app configuration service\n\n\
  \   type credential:\n      <xref:azure.appconfiguration.AppConfigConnectionStringCredential>\
  \ or <xref:azure.core.credentials_async.AsyncTokenCredential>\n\nThis is the async\
  \ version of <xref:azure.appconfiguration.AzureAppConfigurationClient>"
constructor:
  syntax: 'AzureAppConfigurationClient(base_url: str, credential: Union[azure.appconfiguration._azure_appconfiguration_credential.AppConfigConnectionStringCredential,
    AsyncTokenCredential], **kwargs: Any) -> None'
methods:
- uid: azure.appconfiguration.aio.AzureAppConfigurationClient.add_configuration_setting
  name: add_configuration_setting
  summary: "Add a ConfigurationSetting instance into the Azure App Configuration service.\n\
    \nExample\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {}, \"linenos\": false}\
    \ -->\n\n````python\n\n   # in async fuction\n   config_setting = ConfigurationSetting(\n\
    \       key=\"MyKey\",\n       label=\"MyLabel\",\n       value=\"my value\",\n\
    \       content_type=\"my content type\",\n       tags={\"my tag\": \"my tag value\"\
    }\n   )\n   added_config_setting = await async_client.add_configuration_setting(config_setting)\n\
    \   ````"
  signature: 'add_configuration_setting(configuration_setting: azure.appconfiguration._models.ConfigurationSetting,
    **kwargs: Any) -> azure.appconfiguration._models.ConfigurationSetting'
  parameters:
  - name: configuration_setting
    description: the ConfigurationSetting object to be added
    isRequired: true
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  return:
    description: The ConfigurationSetting object returned from the App Configuration
      service
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  exceptions:
  - type: azure.appconfiguration.aio.HttpResponseError, azure.appconfiguration.aio.ClientAuthenticationError,
      azure.appconfiguration.aio.ResourceExistsError
- uid: azure.appconfiguration.aio.AzureAppConfigurationClient.close
  name: close
  summary: Close all connections made by the client
  signature: close() -> None
- uid: azure.appconfiguration.aio.AzureAppConfigurationClient.delete_configuration_setting
  name: delete_configuration_setting
  summary: "Delete a ConfigurationSetting if it exists\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   # in async\
    \ function\n   deleted_config_setting = await async_client.delete_configuration_setting(\n\
    \       key=\"MyKey\", label=\"MyLabel\"\n   )\n   ````"
  signature: 'delete_configuration_setting(key: str, label: Optional[str] = None,
    **kwargs: Any) -> azure.appconfiguration._models.ConfigurationSetting'
  parameters:
  - name: key
    description: key used to identify the ConfigurationSetting
    isRequired: true
    types:
    - <xref:str>
  - name: label
    description: label used to identify the ConfigurationSetting. Default is *None*.
    isRequired: true
    types:
    - <xref:str>
  - name: etag
    description: check if the ConfigurationSetting is changed. Set None to skip checking
      etag
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag
    types:
    - <xref:azure.core.MatchConditions>
  return:
    description: The deleted ConfigurationSetting returned from the service, or None
      if it doesn't exist.
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  exceptions:
  - type: azure.appconfiguration.aio.HttpResponseError, azure.appconfiguration.aio.ClientAuthenticationError,         azure.appconfiguration.aio.ResourceReadOnlyError,
      azure.appconfiguration.aio.ResourceModifiedError, azure.appconfiguration.aio.ResourceNotModifiedError,         azure.appconfiguration.aio.ResourceNotFoundError,
      azure.appconfiguration.aio.ResourceExistsError
- uid: azure.appconfiguration.aio.AzureAppConfigurationClient.from_connection_string
  name: from_connection_string
  summary: "Create AzureAppConfigurationClient from a Connection String.\nThis is\
    \ the async version of <xref:azure.appconfiguration.AzureAppConfigurationClient>\n\
    \nExample\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {}, \"linenos\": false}\
    \ -->\n\n````python\n\n   from azure.appconfiguration.aio import AzureAppConfigurationClient\n\
    \   connection_str = \"<my connection string>\"\n   async_client = AzureAppConfigurationClient.from_connection_string(connection_str)\n\
    \   ````"
  signature: 'from_connection_string(connection_string: str, **kwargs: Any) -> azure.appconfiguration.aio._azure_configuration_client_async.AzureAppConfigurationClient'
  parameters:
  - name: connection_string
    description: 'Connection String

      (one of the access keys of the Azure App Configuration resource)

      used to access the Azure App Configuration.'
    isRequired: true
    types:
    - <xref:str>
  - name: connection_string
    isRequired: true
  return:
    description: An AzureAppConfigurationClient authenticated with the connection
      string
    types:
    - <xref:azure.appconfiguration.AzureAppConfigurationClient>
- uid: azure.appconfiguration.aio.AzureAppConfigurationClient.get_configuration_setting
  name: get_configuration_setting
  summary: "Get the matched ConfigurationSetting from Azure App Configuration service\n\
    \nExample\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {}, \"linenos\": false}\
    \ -->\n\n````python\n\n   # in async function\n   fetched_config_setting = await\
    \ async_client.get_configuration_setting(\n       key=\"MyKey\", label=\"MyLabel\"\
    \n   )\n   ````"
  signature: 'get_configuration_setting(key: str, label: Optional[str] = None, etag:
    Optional[str] = ''*'', match_condition: Optional[azure.core._match_conditions.MatchConditions]
    = <MatchConditions.Unconditionally: 1>, **kwargs: Any) -> Union[None, azure.appconfiguration._models.ConfigurationSetting]'
  parameters:
  - name: key
    description: key of the ConfigurationSetting
    isRequired: true
    types:
    - <xref:str>
  - name: label
    description: label used to identify the ConfigurationSetting. Default is *None*.
    isRequired: true
    types:
    - <xref:str>
  - name: etag
    description: check if the ConfigurationSetting is changed. Set None to skip checking
      etag
    isRequired: true
    types:
    - <xref:str>
    - <xref:None>
  - name: match_condition
    description: The match condition to use upon the etag
    isRequired: true
    types:
    - <xref:azure.core.MatchConditions>
  - name: accept_datetime
    description: the retrieved ConfigurationSetting that created no later than this
      datetime
    types:
    - <xref:datetime>
  return:
    description: The matched ConfigurationSetting object
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  exceptions:
  - type: azure.appconfiguration.aio.HttpResponseError, azure.appconfiguration.aio.ClientAuthenticationError,         azure.appconfiguration.aio.ResourceNotFoundError,
      azure.appconfiguration.aio.ResourceModifiedError, azure.appconfiguration.aio.ResourceExistsError
- uid: azure.appconfiguration.aio.AzureAppConfigurationClient.list_configuration_settings
  name: list_configuration_settings
  summary: "List the configuration settings stored in the configuration service, optionally\
    \ filtered by\nlabel and accept_datetime\n\nExample\n\n<!-- literal_block {\"\
    ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [],\
    \ \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   from datetime\
    \ import datetime, timedelta\n\n   accept_datetime = datetime.today() + timedelta(days=-1)\n\
    \n   all_listed = async_client.list_configuration_settings()\n   async for item\
    \ in all_listed:\n       pass  # do something\n\n   filtered_listed = async_client.list_configuration_settings(\n\
    \       label_filter=\"Labe*\", key_filter=\"Ke*\", accept_datetime=accept_datetime\n\
    \   )\n   async for item in filtered_listed:\n       pass  # do something\n  \
    \ ````"
  signature: 'list_configuration_settings(key_filter: Optional[str] = None, label_filter:
    Optional[str] = None, **kwargs: Any) -> azure.core.async_paging.AsyncItemPaged[azure.appconfiguration._models.ConfigurationSetting]'
  parameters:
  - name: key_filter
    description: 'filter results based on their keys. ''*'' can be

      used as wildcard in the beginning or end of the filter'
    isRequired: true
    types:
    - <xref:str>
  - name: label_filter
    description: 'filter results based on their label. ''*'' can be

      used as wildcard in the beginning or end of the filter'
    isRequired: true
    types:
    - <xref:str>
  - name: accept_datetime
    description: filter out ConfigurationSetting created after this datetime
    types:
    - <xref:datetime>
  - name: fields
    description: specify which fields to include in the results. Leave None to include
      all fields
    types:
    - <xref:list>[<xref:str>]
  return:
    description: An iterator of <xref:azure.appconfiguration.aio.ConfigurationSetting>
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.appconfiguration.ConfigurationSetting>]
  exceptions:
  - type: azure.appconfiguration.aio.HttpResponseError, azure.appconfiguration.aio.ClientAuthenticationError
- uid: azure.appconfiguration.aio.AzureAppConfigurationClient.list_revisions
  name: list_revisions
  summary: "Find the ConfigurationSetting revision history.\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   # in async\
    \ function\n   from datetime import datetime, timedelta\n\n   accept_datetime\
    \ = datetime.today() + timedelta(days=-1)\n\n   all_revisions = async_client.list_revisions()\n\
    \   async for item in all_revisions:\n       pass  # do something\n\n   filtered_revisions\
    \ = async_client.list_revisions(\n       label_filter=\"Labe*\", key_filter=\"\
    Ke*\", accept_datetime=accept_datetime\n   )\n   async for item in filtered_revisions:\n\
    \       pass  # do something\n   ````"
  signature: 'list_revisions(key_filter: Optional[str] = None, label_filter: Optional[str]
    = None, **kwargs: Any) -> azure.core.async_paging.AsyncItemPaged[azure.appconfiguration._models.ConfigurationSetting]'
  parameters:
  - name: key_filter
    description: 'filter results based on their keys. ''*'' can be

      used as wildcard in the beginning or end of the filter'
    isRequired: true
    types:
    - <xref:str>
  - name: label_filter
    description: 'filter results based on their label. ''*'' can be

      used as wildcard in the beginning or end of the filter'
    isRequired: true
    types:
    - <xref:str>
  - name: accept_datetime
    description: filter out ConfigurationSetting created after this datetime
    types:
    - <xref:datetime>
  - name: fields
    description: specify which fields to include in the results. Leave None to include
      all fields
    types:
    - <xref:list>[<xref:str>]
  return:
    description: An iterator of <xref:azure.appconfiguration.aio.ConfigurationSetting>
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.appconfiguration.ConfigurationSetting>]
  exceptions:
  - type: azure.appconfiguration.aio.HttpResponseError, azure.appconfiguration.aio.ClientAuthenticationError
- uid: azure.appconfiguration.aio.AzureAppConfigurationClient.set_configuration_setting
  name: set_configuration_setting
  summary: "Add or update a ConfigurationSetting.\nIf the configuration setting identified\
    \ by key and label does not exist, this is a create.\nOtherwise this is an update.\n\
    \nExample\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [],\
    \ \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {}, \"linenos\": false}\
    \ -->\n\n````python\n\n   # in async function\n   config_setting = ConfigurationSetting(\n\
    \       key=\"MyKey\",\n       label=\"MyLabel\",\n       value=\"my set value\"\
    ,\n       content_type=\"my set content type\",\n       tags={\"my set tag\":\
    \ \"my set tag value\"}\n   )\n   returned_config_setting = await async_client.set_configuration_setting(config_setting)\n\
    \   ````"
  signature: 'set_configuration_setting(configuration_setting: azure.appconfiguration._models.ConfigurationSetting,
    match_condition: azure.core._match_conditions.MatchConditions = <MatchConditions.Unconditionally:
    1>, **kwargs: Any) -> azure.appconfiguration._models.ConfigurationSetting'
  parameters:
  - name: configuration_setting
    description: the ConfigurationSetting to be added (if not exists)         or updated
      (if exists) to the service
    isRequired: true
    types:
    - <xref:azure.appconfiguration.aio.ConfigurationSetting>
  - name: match_condition
    description: The match condition to use upon the etag
    isRequired: true
    types:
    - <xref:azure.core.MatchConditions>
  - name: etag
    description: check if the ConfigurationSetting is changed. Set None to skip checking
      etag
    types:
    - <xref:str>
  return:
    description: The ConfigurationSetting returned from the service
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  exceptions:
  - type: azure.appconfiguration.aio.HttpResponseError, azure.appconfiguration.aio.ClientAuthenticationError,         azure.appconfiguration.aio.ResourceReadOnlyError,
      azure.appconfiguration.aio.ResourceModifiedError, azure.appconfiguration.aio.ResourceNotModifiedError,         azure.appconfiguration.aio.ResourceNotFoundError,
      azure.appconfiguration.aio.ResourceExistsError
- uid: azure.appconfiguration.aio.AzureAppConfigurationClient.set_read_only
  name: set_read_only
  summary: "Set a configuration setting read only\n\nExample\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\"\
    , \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n   config_setting\
    \ = await async_client.get_configuration_setting(\n       key=\"MyKey\", label=\"\
    MyLabel\"\n   )\n\n   read_only_config_setting = await async_client.set_read_only(config_setting)\n\
    \   read_only_config_setting = await client.set_read_only(config_setting, read_only=False)\n\
    \   ````"
  signature: 'set_read_only(configuration_setting: azure.appconfiguration._models.ConfigurationSetting,
    read_only: Optional[bool] = True, **kwargs: Any) -> azure.appconfiguration._models.ConfigurationSetting'
  parameters:
  - name: configuration_setting
    description: the ConfigurationSetting to be set read only
    isRequired: true
    types:
    - <xref:azure.appconfiguration.aio.ConfigurationSetting>
  - name: read_only
    description: set the read only setting if true, else clear the read only setting
    isRequired: true
    types:
    - <xref:bool>
  - name: match_condition
    description: The match condition to use upon the etag
    types:
    - <xref:azure.core.MatchConditions>
  - name: etag
    description: check if the ConfigurationSetting is changed. Set None to skip checking
      etag
    types:
    - <xref:str>
  return:
    description: The ConfigurationSetting returned from the service
    types:
    - <xref:azure.appconfiguration.ConfigurationSetting>
  exceptions:
  - type: azure.appconfiguration.aio.HttpResponseError, azure.appconfiguration.aio.ClientAuthenticationError,
      azure.appconfiguration.aio.ResourceNotFoundError
- uid: azure.appconfiguration.aio.AzureAppConfigurationClient.update_sync_token
  name: update_sync_token
  summary: Add a sync token to the internal list of tokens.
  signature: 'update_sync_token(token: str) -> None'
  parameters:
  - name: token
    description: The sync token to be added to the internal list of tokens
    isRequired: true
    types:
    - <xref:str>
