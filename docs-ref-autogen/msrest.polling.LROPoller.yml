### YamlMime:UniversalReference
api_name: []
items:
- children:
  - msrest.polling.LROPoller.add_done_callback
  - msrest.polling.LROPoller.done
  - msrest.polling.LROPoller.remove_done_callback
  - msrest.polling.LROPoller.result
  - msrest.polling.LROPoller.status
  - msrest.polling.LROPoller.wait
  class: msrest.polling.LROPoller
  fullName: msrest.polling.LROPoller
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: msrest.polling
  name: LROPoller
  source:
    id: LROPoller
    path: msrest-0.4.29-py3.6.egg\msrest\polling\poller.py
    remote:
      branch: master
      path: msrest-0.4.29-py3.6.egg\msrest\polling\poller.py
      repo: https://github.com/Azure/msrest-for-python.git
    startLine: 88
  summary: 'Poller for long running operations.







    '
  syntax:
    content: LROPoller(client, initial_response, deserialization_callback, polling_method)
    parameters:
    - description: 'A msrest service client. Can be a SDK client and it will be casted
        to a ServiceClient.

        '
      id: client
      type:
      - msrest.service_client.ServiceClient
    - description: 'The initial call response

        '
      id: initial_response
      type:
      - requests.Response
      - msrest.pipeline.ClientRawResponse
    - description: 'A callback that takes a Response and return a deserialized object.
        If a subclass of Model is given, this passes "deserialize" as callback.

        '
      id: deserialization_callback
      type:
      - callable
      - msrest.serialization.Model
    - description: 'The polling strategy to adopt

        '
      id: polling_method
      type:
      - msrest.polling.PollingMethod
  type: class
  uid: msrest.polling.LROPoller
- class: msrest.polling.LROPoller
  fullName: msrest.polling.LROPoller.add_done_callback
  langs:
  - python
  module: msrest.polling
  name: add_done_callback
  source:
    id: add_done_callback
    path: msrest-0.4.29-py3.6.egg\msrest\polling\poller.py
    remote:
      branch: master
      path: msrest-0.4.29-py3.6.egg\msrest\polling\poller.py
      repo: https://github.com/Azure/msrest-for-python.git
    startLine: 192
  summary: 'Add callback function to be run once the long running operation

    has completed - regardless of the status of the operation.

    '
  syntax:
    content: add_done_callback(func)
    parameters:
    - description: 'Callback function that takes at least one

        argument, a completed LongRunningOperation.

        '
      id: func
      type:
      - callable
  type: method
  uid: msrest.polling.LROPoller.add_done_callback
- class: msrest.polling.LROPoller
  fullName: msrest.polling.LROPoller.done
  langs:
  - python
  module: msrest.polling
  name: done
  source:
    id: done
    path: msrest-0.4.29-py3.6.egg\msrest\polling\poller.py
    remote:
      branch: master
      path: msrest-0.4.29-py3.6.egg\msrest\polling\poller.py
      repo: https://github.com/Azure/msrest-for-python.git
    startLine: 185
  summary: 'Check status of the long running operation.

    '
  syntax:
    content: done()
    parameters:
    - id: self
    return:
      description: '''True'' if the process has completed, else ''False''.

        '
  type: method
  uid: msrest.polling.LROPoller.done
- class: msrest.polling.LROPoller
  fullName: msrest.polling.LROPoller.remove_done_callback
  langs:
  - python
  module: msrest.polling
  name: remove_done_callback
  source:
    id: remove_done_callback
    path: msrest-0.4.29-py3.6.egg\msrest\polling\poller.py
    remote:
      branch: master
      path: msrest-0.4.29-py3.6.egg\msrest\polling\poller.py
      repo: https://github.com/Azure/msrest-for-python.git
    startLine: 205
  summary: 'Remove a callback from the long running operation.

    '
  syntax:
    content: remove_done_callback(func)
    parameters:
    - description: 'The function to be removed from the callbacks.

        '
      id: func
      type:
      - callable
  type: method
  uid: msrest.polling.LROPoller.remove_done_callback
- class: msrest.polling.LROPoller
  exceptions:
  - description: 'Server problem with the query.

      '
    type: CloudError
  fullName: msrest.polling.LROPoller.result
  langs:
  - python
  module: msrest.polling
  name: result
  source:
    id: result
    path: msrest-0.4.29-py3.6.egg\msrest\polling\poller.py
    remote:
      branch: master
      path: msrest-0.4.29-py3.6.egg\msrest\polling\poller.py
      repo: https://github.com/Azure/msrest-for-python.git
    startLine: 157
  summary: 'Return the result of the long running operation, or

    the result available after the specified timeout.

    '
  syntax:
    content: result(timeout=None)
    parameters:
    - id: self
    - defaultValue: None
      id: timeout
    return:
      description: 'The deserialized resource of the long running operation,

        if one is available.

        '
  type: method
  uid: msrest.polling.LROPoller.result
- class: msrest.polling.LROPoller
  fullName: msrest.polling.LROPoller.status
  langs:
  - python
  module: msrest.polling
  name: status
  source:
    id: status
    path: msrest-0.4.29-py3.6.egg\msrest\polling\poller.py
    remote:
      branch: master
      path: msrest-0.4.29-py3.6.egg\msrest\polling\poller.py
      repo: https://github.com/Azure/msrest-for-python.git
    startLine: 149
  summary: 'Returns the current status string.

    '
  syntax:
    content: status()
    parameters:
    - id: self
    return:
      description: 'The current status string

        '
      type:
      - str
  type: method
  uid: msrest.polling.LROPoller.status
- class: msrest.polling.LROPoller
  exceptions:
  - description: 'Server problem with the query.

      '
    type: CloudError
  fullName: msrest.polling.LROPoller.wait
  langs:
  - python
  module: msrest.polling
  name: wait
  source:
    id: wait
    path: msrest-0.4.29-py3.6.egg\msrest\polling\poller.py
    remote:
      branch: master
      path: msrest-0.4.29-py3.6.egg\msrest\polling\poller.py
      repo: https://github.com/Azure/msrest-for-python.git
    startLine: 168
  summary: 'Wait on the long running operation for a specified length

    of time. You can check if this call as ended with timeout with the

    "done()" method.

    '
  syntax:
    content: wait(timeout=None)
    parameters:
    - defaultValue: None
      description: 'Perion of time to wait for the long running

        operation to complete.

        '
      id: timeout
      type:
      - int
  type: method
  uid: msrest.polling.LROPoller.wait
references:
- fullName: msrest.polling.LROPoller.add_done_callback
  isExternal: false
  name: add_done_callback
  parent: msrest.polling.LROPoller
  uid: msrest.polling.LROPoller.add_done_callback
- fullName: msrest.polling.LROPoller.done
  isExternal: false
  name: done
  parent: msrest.polling.LROPoller
  uid: msrest.polling.LROPoller.done
- fullName: msrest.polling.LROPoller.remove_done_callback
  isExternal: false
  name: remove_done_callback
  parent: msrest.polling.LROPoller
  uid: msrest.polling.LROPoller.remove_done_callback
- fullName: msrest.polling.LROPoller.result
  isExternal: false
  name: result
  parent: msrest.polling.LROPoller
  uid: msrest.polling.LROPoller.result
- fullName: msrest.polling.LROPoller.status
  isExternal: false
  name: status
  parent: msrest.polling.LROPoller
  uid: msrest.polling.LROPoller.status
- fullName: msrest.polling.LROPoller.wait
  isExternal: false
  name: wait
  parent: msrest.polling.LROPoller
  uid: msrest.polling.LROPoller.wait
