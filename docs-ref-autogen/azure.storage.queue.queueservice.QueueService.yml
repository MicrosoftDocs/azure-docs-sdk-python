### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.queue.queueservice.QueueService.clear_messages
  - azure.storage.queue.queueservice.QueueService.create_queue
  - azure.storage.queue.queueservice.QueueService.delete_message
  - azure.storage.queue.queueservice.QueueService.delete_queue
  - azure.storage.queue.queueservice.QueueService.exists
  - azure.storage.queue.queueservice.QueueService.generate_account_shared_access_signature
  - azure.storage.queue.queueservice.QueueService.generate_queue_shared_access_signature
  - azure.storage.queue.queueservice.QueueService.get_messages
  - azure.storage.queue.queueservice.QueueService.get_queue_acl
  - azure.storage.queue.queueservice.QueueService.get_queue_metadata
  - azure.storage.queue.queueservice.QueueService.get_queue_service_properties
  - azure.storage.queue.queueservice.QueueService.get_queue_service_stats
  - azure.storage.queue.queueservice.QueueService.list_queues
  - azure.storage.queue.queueservice.QueueService.peek_messages
  - azure.storage.queue.queueservice.QueueService.put_message
  - azure.storage.queue.queueservice.QueueService.set_queue_acl
  - azure.storage.queue.queueservice.QueueService.set_queue_metadata
  - azure.storage.queue.queueservice.QueueService.set_queue_service_properties
  - azure.storage.queue.queueservice.QueueService.update_message
  class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.common.storageclient.StorageClient
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: QueueService
  source:
    id: QueueService
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 80
  summary: 'This is the main class managing queue resources.


    The Queue service stores messages. A queue can contain an unlimited number of

    messages, each of which can be up to 64KB in size. Messages are generally added

    to the end of the queue and retrieved from the front of the queue, although

    first in, first out (FIFO) behavior is not guaranteed.




















    '
  syntax:
    content: QueueService(account_name=None, account_key=None, sas_token=None, is_emulated=False,
      protocol='https', endpoint_suffix='core.windows.net', request_session=None,
      connection_string=None, socket_timeout=None, token_credential=None)
    variables:
    - description: 'A function used to encode queue messages. Takes as

        a parameter the data passed to the put_message API and returns the encoded

        message. Defaults to take text and xml encode, but bytes and other

        encodings can be used. For example, base64 may be preferable for developing

        across multiple Azure Storage libraries in different languages. See the

        @azure.storage.queue.models.QueueMessageFormat for xml, base64 and

        no encoding methods as well as binary equivalents.

        '
      id: encode_function
      type:
      - function(data)
    - description: 'A function used to encode decode messages. Takes as

        a parameter the data returned by the get_messages and peek_messages APIs and

        returns the decoded message. Defaults to return text and xml decode, but

        bytes and other decodings can be used. For example, base64 may be preferable

        for developing across multiple Azure Storage libraries in different languages.

        See the @azure.storage.queue.models.QueueMessageFormat for xml, base64

        and no decoding methods as well as binary equivalents.

        '
      id: decode_function
      type:
      - function(data)
    - description: 'The key-encryption-key optionally provided by the user. If provided,
        will be used to

        encrypt/decrypt in supported methods.

        For methods requiring decryption, either the key_encryption_key OR the resolver
        must be provided.

        If both are provided, the resolver will take precedence.

        Must implement the following methods for APIs requiring encryption:

        wrap_key(key)--wraps the specified key (bytes) using an algorithm of the user''s
        choice. Returns the encrypted key as bytes.

        get_key_wrap_algorithm()--returns the algorithm used to wrap the specified
        symmetric key.

        get_kid()--returns a string key id for this key-encryption-key.

        Must implement the following methods for APIs requiring decryption:

        unwrap_key(key, algorithm)--returns the unwrapped form of the specified symmetric
        key using the string-specified algorithm.

        get_kid()--returns a string key id for this key-encryption-key.

        '
      id: key_encryption_key
      type:
      - object
    - description: 'A function to resolve keys optionally provided by the user. If
        provided, will be used to decrypt in supported methods.

        For methods requiring decryption, either the key_encryption_key OR

        the resolver must be provided. If both are provided, the resolver will take
        precedence.

        It uses the kid string to return a key-encryption-key implementing the interface
        defined above.

        '
      id: key_resolver_function(kid)
      type:
      - function
    - description: 'A flag that may be set to ensure that all messages successfully
        uploaded to the queue and all those downloaded and

        successfully read from the queue are/were encrypted while on the server. If
        this flag is set, all required

        parameters for encryption/decryption must be provided. See the above comments
        on the key_encryption_key and resolver.

        '
      id: require_encryption
      type:
      - bool
  type: class
  uid: azure.storage.queue.queueservice.QueueService
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.clear_messages
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: clear_messages
  source:
    id: clear_messages
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 917
  summary: 'Deletes all messages from the specified queue.

    '
  syntax:
    content: clear_messages(queue_name, timeout=None)
    parameters:
    - description: 'The name of the queue whose messages to clear.

        '
      id: queue_name
      type:
      - str
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
  type: method
  uid: azure.storage.queue.queueservice.QueueService.clear_messages
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.create_queue
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: create_queue
  source:
    id: create_queue
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 491
  summary: 'Creates a queue under the given account.

    '
  syntax:
    content: create_queue(queue_name, metadata=None, fail_on_exist=False, timeout=None)
    parameters:
    - description: 'The name of the queue to create. A queue name must be from 3 through

        63 characters long and may only contain lowercase letters, numbers,

        and the dash (-) character. The first and last letters in the queue

        must be alphanumeric. The dash (-) character cannot be the first or

        last character. Consecutive dash characters are not permitted in the

        queue name.

        '
      id: queue_name
      type:
      - str
    - defaultValue: None
      description: 'A dict containing name-value pairs to associate with the queue
        as

        metadata. Note that metadata names preserve the case with which they

        were created, but are case-insensitive when set or read.

        '
      id: metadata
      type:
      - dict(str, str)
    - defaultValue: 'False'
      description: 'Specifies whether to throw an exception if the queue already exists.

        '
      id: fail_on_exist
      type:
      - bool
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A boolean indicating whether the queue was created. If fail_on_exist

        was set to True, this will throw instead of returning false.

        '
      type:
      - bool
  type: method
  uid: azure.storage.queue.queueservice.QueueService.create_queue
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.delete_message
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: delete_message
  source:
    id: delete_message
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 880
  summary: 'Deletes the specified message.


    Normally after a client retrieves a message with the get_messages operation,

    the client is expected to process and delete the message. To delete the

    message, you must have two items of data: id and pop_receipt. The

    id is returned from the previous get_messages operation. The

    pop_receipt is returned from the most recent @azure.storage.queue.queueservice.get_messages
    or

    @azure.storage.queue.queueservice.update_message operation. In order for the delete_message
    operation

    to succeed, the pop_receipt specified on the request must match the

    pop_receipt returned from the @azure.storage.queue.queueservice.get_messages or
    @azure.storage.queue.queueservice.update_message

    operation.

    '
  syntax:
    content: delete_message(queue_name, message_id, pop_receipt, timeout=None)
    parameters:
    - description: 'The name of the queue from which to delete the message.

        '
      id: queue_name
      type:
      - str
    - description: 'The message id identifying the message to delete.

        '
      id: message_id
      type:
      - str
    - description: 'A valid pop receipt value returned from an earlier call

        to the @azure.storage.queue.queueservice.get_messages or @azure.storage.queue.queueservice.update_message.

        '
      id: pop_receipt
      type:
      - str
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
  type: method
  uid: azure.storage.queue.queueservice.QueueService.delete_message
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.delete_queue
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: delete_queue
  source:
    id: delete_queue
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 543
  summary: 'Deletes the specified queue and any messages it contains.


    When a queue is successfully deleted, it is immediately marked for deletion

    and is no longer accessible to clients. The queue is later removed from

    the Queue service during garbage collection.


    Note that deleting a queue is likely to take at least 40 seconds to complete.

    If an operation is attempted against the queue while it was being deleted,

    an @azure.storage.queue.queueservice.AzureConflictHttpError will be thrown.

    '
  syntax:
    content: delete_queue(queue_name, fail_not_exist=False, timeout=None)
    parameters:
    - description: 'The name of the queue to delete.

        '
      id: queue_name
      type:
      - str
    - defaultValue: 'False'
      description: 'Specifies whether to throw an exception if the queue doesn''t
        exist.

        '
      id: fail_not_exist
      type:
      - bool
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A boolean indicating whether the queue was deleted. If fail_not_exist

        was set to True, this will throw instead of returning false.

        '
      type:
      - bool
  type: method
  uid: azure.storage.queue.queueservice.QueueService.delete_queue
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.exists
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: exists
  source:
    id: exists
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 636
  summary: 'Returns a boolean indicating whether the queue exists.

    '
  syntax:
    content: exists(queue_name, timeout=None)
    parameters:
    - description: 'The name of queue to check for existence.

        '
      id: queue_name
      type:
      - str
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A boolean indicating whether the queue exists.

        '
      type:
      - bool
  type: method
  uid: azure.storage.queue.queueservice.QueueService.exists
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.generate_account_shared_access_signature
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: generate_account_shared_access_signature
  source:
    id: generate_account_shared_access_signature
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 203
  summary: 'Generates a shared access signature for the queue service.

    Use the returned signature with the sas_token parameter of QueueService.

    '
  syntax:
    content: generate_account_shared_access_signature(resource_types, permission,
      expiry, start=None, ip=None, protocol=None)
    parameters:
    - description: 'Specifies the resource types that are accessible with the account
        SAS.

        '
      id: resource_types
      type:
      - ResourceTypes
    - description: 'The permissions associated with the shared access signature. The

        user is restricted to operations allowed by the permissions.

        Required unless an id is given referencing a stored access policy

        which contains this field. This field must be omitted if it has been

        specified in an associated stored access policy.

        '
      id: permission
      type:
      - AccountPermissions
    - description: 'The time at which the shared access signature becomes invalid.

        Required unless an id is given referencing a stored access policy

        which contains this field. This field must be omitted if it has

        been specified in an associated stored access policy. Azure will always

        convert values to UTC. If a date is passed in without timezone info, it

        is assumed to be UTC.

        '
      id: expiry
      type:
      - datetime
      - str
    - defaultValue: None
      description: 'The time at which the shared access signature becomes valid. If

        omitted, start time for this call is assumed to be the time when the

        storage service receives the request. Azure will always convert values

        to UTC. If a date is passed in without timezone info, it is assumed to

        be UTC.

        '
      id: start
      type:
      - datetime
      - str
    - defaultValue: None
      description: 'Specifies an IP address or a range of IP addresses from which
        to accept requests.

        If the IP address from which the request originates does not match the IP
        address

        or address range specified on the SAS token, the request is not authenticated.

        For example, specifying sip=168.1.5.65 or sip=168.1.5.60-168.1.5.70 on the
        SAS

        restricts the request to those IP addresses.

        '
      id: ip
      type:
      - str
    - defaultValue: None
      description: 'Specifies the protocol permitted for a request made. The default
        value

        is https,http. See @azure.storage.common.models.Protocol for possible values.

        '
      id: protocol
      type:
      - str
    return:
      description: 'A Shared Access Signature (sas) token.

        '
      type:
      - str
  type: method
  uid: azure.storage.queue.queueservice.QueueService.generate_account_shared_access_signature
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.generate_queue_shared_access_signature
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: generate_queue_shared_access_signature
  source:
    id: generate_queue_shared_access_signature
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 251
  summary: 'Generates a shared access signature for the queue.

    Use the returned signature with the sas_token parameter of QueueService.

    '
  syntax:
    content: generate_queue_shared_access_signature(queue_name, permission=None, expiry=None,
      start=None, id=None, ip=None, protocol=None)
    parameters:
    - description: 'The name of the queue to create a SAS token for.

        '
      id: queue_name
      type:
      - str
    - defaultValue: None
      description: 'The permissions associated with the shared access signature. The

        user is restricted to operations allowed by the permissions.

        Required unless an id is given referencing a stored access policy

        which contains this field. This field must be omitted if it has been

        specified in an associated stored access policy.

        '
      id: permission
      type:
      - QueuePermissions
    - defaultValue: None
      description: 'The time at which the shared access signature becomes invalid.

        Required unless an id is given referencing a stored access policy

        which contains this field. This field must be omitted if it has

        been specified in an associated stored access policy. Azure will always

        convert values to UTC. If a date is passed in without timezone info, it

        is assumed to be UTC.

        '
      id: expiry
      type:
      - datetime
      - str
    - defaultValue: None
      description: 'The time at which the shared access signature becomes valid. If

        omitted, start time for this call is assumed to be the time when the

        storage service receives the request. Azure will always convert values

        to UTC. If a date is passed in without timezone info, it is assumed to

        be UTC.

        '
      id: start
      type:
      - datetime
      - str
    - defaultValue: None
      description: 'A unique value up to 64 characters in length that correlates to
        a

        stored access policy. To create a stored access policy, use @azure.storage.queue.queueservice.set_queue_acl.

        '
      id: id
      type:
      - str
    - defaultValue: None
      description: 'Specifies an IP address or a range of IP addresses from which
        to accept requests.

        If the IP address from which the request originates does not match the IP
        address

        or address range specified on the SAS token, the request is not authenticated.

        For example, specifying sip=''168.1.5.65'' or sip=''168.1.5.60-168.1.5.70''
        on the SAS

        restricts the request to those IP addresses.

        '
      id: ip
      type:
      - str
    - defaultValue: None
      description: 'Specifies the protocol permitted for a request made. The default
        value

        is https,http. See @azure.storage.common.models.Protocol for possible values.

        '
      id: protocol
      type:
      - str
    return:
      description: 'A Shared Access Signature (sas) token.

        '
      type:
      - str
  type: method
  uid: azure.storage.queue.queueservice.QueueService.generate_queue_shared_access_signature
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.get_messages
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: get_messages
  source:
    id: get_messages
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 782
  summary: 'Retrieves one or more messages from the front of the queue.


    When a message is retrieved from the queue, the response includes the message

    content and a pop_receipt value, which is required to delete the message.

    The message is not automatically deleted from the queue, but after it has

    been retrieved, it is not visible to other clients for the time interval

    specified by the visibility_timeout parameter.


    If the key-encryption-key or resolver field is set on the local service object,
    the messages will be

    decrypted before being returned.

    '
  syntax:
    content: get_messages(queue_name, num_messages=None, visibility_timeout=None,
      timeout=None)
    parameters:
    - description: 'The name of the queue to get messages from.

        '
      id: queue_name
      type:
      - str
    - defaultValue: None
      description: 'A nonzero integer value that specifies the number of

        messages to retrieve from the queue, up to a maximum of 32. If

        fewer are visible, the visible messages are returned. By default,

        a single message is retrieved from the queue with this operation.

        '
      id: num_messages
      type:
      - int
    - defaultValue: None
      description: 'Specifies the new visibility timeout value, in seconds, relative

        to server time. The new value must be larger than or equal to 1

        second, and cannot be larger than 7 days. The visibility timeout of

        a message can be set to a value later than the expiry time.

        '
      id: visibility_timeout
      type:
      - int
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A @azure.storage.queue.models.QueueMessage object representing
        the information passed.

        '
      type:
      - list(azure.storage.queue.models.QueueMessage)
  type: method
  uid: azure.storage.queue.queueservice.QueueService.get_messages
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.get_queue_acl
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: get_queue_acl
  source:
    id: get_queue_acl
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 654
  summary: 'Returns details about any stored access policies specified on the

    queue that may be used with Shared Access Signatures.

    '
  syntax:
    content: get_queue_acl(queue_name, timeout=None)
    parameters:
    - description: 'The name of an existing queue.

        '
      id: queue_name
      type:
      - str
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A dictionary of access policies associated with the queue.

        '
      type:
      - dict(str, azure.storage.common.models.AccessPolicy)
  type: method
  uid: azure.storage.queue.queueservice.QueueService.get_queue_acl
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.get_queue_metadata
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: get_queue_metadata
  source:
    id: get_queue_metadata
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 583
  summary: 'Retrieves user-defined metadata and queue properties on the specified

    queue. Metadata is associated with the queue as name-value pairs.

    '
  syntax:
    content: get_queue_metadata(queue_name, timeout=None)
    parameters:
    - description: 'The name of an existing queue.

        '
      id: queue_name
      type:
      - str
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A dictionary representing the queue metadata with an

        approximate_message_count int property on the dict estimating the

        number of messages in the queue.

        '
      type:
      - dict(str, str)
  type: method
  uid: azure.storage.queue.queueservice.QueueService.get_queue_metadata
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.get_queue_service_properties
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: get_queue_service_properties
  source:
    id: get_queue_service_properties
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 350
  summary: 'Gets the properties of a storage account''s Queue service, including

    logging, analytics and CORS rules.

    '
  syntax:
    content: get_queue_service_properties(timeout=None)
    parameters:
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'The queue service properties.

        '
      type:
      - azure.storage.common.models.ServiceProperties
  type: method
  uid: azure.storage.queue.queueservice.QueueService.get_queue_service_properties
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.get_queue_service_stats
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: get_queue_service_stats
  source:
    id: get_queue_service_stats
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 314
  summary: 'Retrieves statistics related to replication for the Queue service. It
    is

    only available when read-access geo-redundant replication is enabled for

    the storage account.


    With geo-redundant replication, Azure Storage maintains your data durable

    in two locations. In both locations, Azure Storage constantly maintains

    multiple healthy replicas of your data. The location where you read,

    create, update, or delete data is the primary storage account location.

    The primary location exists in the region you choose at the time you

    create an account via the Azure Management Azure classic portal, for

    example, North Central US. The location to which your data is replicated

    is the secondary location. The secondary location is automatically

    determined based on the location of the primary; it is in a second data

    center that resides in the same region as the primary location. Read-only

    access is available from the secondary location, if read-access geo-redundant

    replication is enabled for your storage account.

    '
  syntax:
    content: get_queue_service_stats(timeout=None)
    parameters:
    - defaultValue: None
      description: 'The timeout parameter is expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'The queue service stats.

        '
      type:
      - azure.storage.common.models.ServiceStats
  type: method
  uid: azure.storage.queue.queueservice.QueueService.get_queue_service_stats
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.list_queues
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: list_queues
  source:
    id: list_queues
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 412
  summary: 'Returns a generator to list the queues. The generator will lazily follow

    the continuation tokens returned by the service and stop when all queues

    have been returned or num_results is reached.


    If num_results is specified and the account has more than that number of

    queues, the generator will have a populated next_marker field once it

    finishes. This marker can be used to create a new generator if more

    results are desired.

    '
  syntax:
    content: list_queues(prefix=None, num_results=None, include_metadata=False, marker=None,
      timeout=None)
    parameters:
    - defaultValue: None
      description: 'Filters the results to return only queues with names that begin

        with the specified prefix.

        '
      id: prefix
      type:
      - str
    - defaultValue: None
      description: 'The maximum number of queues to return.

        '
      id: num_results
      type:
      - int
    - defaultValue: 'False'
      description: 'Specifies that container metadata be returned in the response.

        '
      id: include_metadata
      type:
      - bool
    - defaultValue: None
      description: 'An opaque continuation token. This value can be retrieved from
        the

        next_marker field of a previous generator object if num_results was

        specified and that generator has finished enumerating results. If

        specified, this generator will begin returning results from the point

        where the previous generator stopped.

        '
      id: marker
      type:
      - str
    - defaultValue: None
      description: 'The server timeout, expressed in seconds. This function may make
        multiple

        calls to the service in which case the timeout value specified will be

        applied to each individual call.

        '
      id: timeout
      type:
      - int
  type: method
  uid: azure.storage.queue.queueservice.QueueService.list_queues
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.peek_messages
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: peek_messages
  source:
    id: peek_messages
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 831
  summary: 'Retrieves one or more messages from the front of the queue, but does

    not alter the visibility of the message.


    Only messages that are visible may be retrieved. When a message is retrieved

    for the first time with a call to get_messages, its dequeue_count property

    is set to 1. If it is not deleted and is subsequently retrieved again, the

    dequeue_count property is incremented. The client may use this value to

    determine how many times a message has been retrieved. Note that a call

    to peek_messages does not increment the value of DequeueCount, but returns

    this value for the client to read.


    If the key-encryption-key or resolver field is set on the local service object,
    the messages will be

    decrypted before being returned.

    '
  syntax:
    content: peek_messages(queue_name, num_messages=None, timeout=None)
    parameters:
    - description: 'The name of the queue to peek messages from.

        '
      id: queue_name
      type:
      - str
    - defaultValue: None
      description: 'A nonzero integer value that specifies the number of

        messages to peek from the queue, up to a maximum of 32. By default,

        a single message is peeked from the queue with this operation.

        '
      id: num_messages
      type:
      - int
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A list of @azure.storage.queue.models.QueueMessage objects. Note
        that

        time_next_visible and pop_receipt will not be populated as peek does

        not pop the message and can only retrieve already visible messages.

        '
      type:
      - list(azure.storage.queue.models.QueueMessage)
  type: method
  uid: azure.storage.queue.queueservice.QueueService.peek_messages
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.put_message
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: put_message
  source:
    id: put_message
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 718
  summary: 'Adds a new message to the back of the message queue.


    The visibility timeout specifies the time that the message will be

    invisible. After the timeout expires, the message will become visible.

    If a visibility timeout is not specified, the default value of 0 is used.


    The message time-to-live specifies how long a message will remain in the

    queue. The message will be deleted from the queue when the time-to-live

    period expires.


    If the key-encryption-key field is set on the local service object, this method
    will

    encrypt the content before uploading.

    '
  syntax:
    content: put_message(queue_name, content, visibility_timeout=None, time_to_live=None,
      timeout=None)
    parameters:
    - description: 'The name of the queue to put the message into.

        '
      id: queue_name
      type:
      - str
    - description: 'Message content. Allowed type is determined by the encode_function

        set on the service. Default is str. The encoded message can be up to

        64KB in size.

        '
      id: content
      type:
      - obj
    - defaultValue: None
      description: 'If not specified, the default value is 0. Specifies the

        new visibility timeout value, in seconds, relative to server time.

        The value must be larger than or equal to 0, and cannot be

        larger than 7 days. The visibility timeout of a message cannot be

        set to a value later than the expiry time. visibility_timeout

        should be set to a value smaller than the time-to-live value.

        '
      id: visibility_timeout
      type:
      - int
    - defaultValue: None
      description: 'Specifies the time-to-live interval for the message, in

        seconds. The time-to-live may be any positive number or -1 for infinity. If
        this

        parameter is omitted, the default time-to-live is 7 days.

        '
      id: time_to_live
      type:
      - int
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A @azure.storage.queue.models.QueueMessage object.

        This object is also populated with the content although it is not

        returned from the service.

        '
      type:
      - azure.storage.queue.models.QueueMessage
  type: method
  uid: azure.storage.queue.queueservice.QueueService.put_message
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.set_queue_acl
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: set_queue_acl
  source:
    id: set_queue_acl
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 678
  summary: 'Sets stored access policies for the queue that may be used with Shared

    Access Signatures.


    When you set permissions for a queue, the existing permissions are replaced.

    To update the queue''s permissions, call @azure.storage.queue.queueservice.QueueService.get_queue_acl
    to fetch

    all access policies associated with the queue, modify the access policy

    that you wish to change, and then call this function with the complete

    set of data to perform the update.


    When you establish a stored access policy on a queue, it may take up to

    30 seconds to take effect. During this interval, a shared access signature

    that is associated with the stored access policy will throw an

    @azure.storage.queue.queueservice.AzureHttpError until the access policy becomes
    active.

    '
  syntax:
    content: set_queue_acl(queue_name, signed_identifiers=None, timeout=None)
    parameters:
    - description: 'The name of an existing queue.

        '
      id: queue_name
      type:
      - str
    - defaultValue: None
      description: 'A dictionary of access policies to associate with the queue. The

        dictionary may contain up to 5 elements. An empty dictionary

        will clear the access policies set on the service.

        '
      id: signed_identifiers
      type:
      - dict(str, azure.storage.common.models.AccessPolicy)
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
  type: method
  uid: azure.storage.queue.queueservice.QueueService.set_queue_acl
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.set_queue_metadata
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: set_queue_metadata
  source:
    id: set_queue_metadata
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 610
  summary: 'Sets user-defined metadata on the specified queue. Metadata is

    associated with the queue as name-value pairs.

    '
  syntax:
    content: set_queue_metadata(queue_name, metadata=None, timeout=None)
    parameters:
    - description: 'The name of an existing queue.

        '
      id: queue_name
      type:
      - str
    - defaultValue: None
      description: 'A dict containing name-value pairs to associate with the

        queue as metadata.

        '
      id: metadata
      type:
      - dict
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
  type: method
  uid: azure.storage.queue.queueservice.QueueService.set_queue_metadata
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.set_queue_service_properties
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: set_queue_service_properties
  source:
    id: set_queue_service_properties
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 372
  summary: 'Sets the properties of a storage account''s Queue service, including

    Azure Storage Analytics. If an element (ex Logging) is left as None, the

    existing settings on the service for that functionality are preserved.

    For more information on Azure Storage Analytics, see

    [https://msdn.microsoft.com/en-us/library/azure/hh343270.aspx](https://msdn.microsoft.com/en-us/library/azure/hh343270.aspx).

    '
  syntax:
    content: set_queue_service_properties(logging=None, hour_metrics=None, minute_metrics=None,
      cors=None, timeout=None)
    parameters:
    - defaultValue: None
      description: 'The logging settings provide request logs.

        '
      id: logging
      type:
      - Logging
    - defaultValue: None
      description: 'The hour metrics settings provide a summary of request

        statistics grouped by API in hourly aggregates for queuess.

        '
      id: hour_metrics
      type:
      - Metrics
    - defaultValue: None
      description: 'The minute metrics settings provide request statistics

        for each minute for queues.

        '
      id: minute_metrics
      type:
      - Metrics
    - defaultValue: None
      description: 'You can include up to five CorsRule elements in the

        list. If an empty list is specified, all CORS rules will be deleted,

        and CORS will be disabled for the service. For detailed information

        about CORS rules and evaluation logic, see

        [https://msdn.microsoft.com/en-us/library/azure/dn535601.aspx](https://msdn.microsoft.com/en-us/library/azure/dn535601.aspx).

        '
      id: cors
      type:
      - list(azure.storage.common.models.CorsRule)
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
  type: method
  uid: azure.storage.queue.queueservice.QueueService.set_queue_service_properties
- class: azure.storage.queue.queueservice.QueueService
  fullName: azure.storage.queue.queueservice.QueueService.update_message
  langs:
  - python
  module: azure.storage.queue.queueservice
  name: update_message
  source:
    id: update_message
    path: azure\storage\queue\queueservice.py
    remote:
      branch: master
      path: azure\storage\queue\queueservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 934
  summary: 'Updates the visibility timeout of a message. You can also use this

    operation to update the contents of a message.


    This operation can be used to continually extend the invisibility of a

    queue message. This functionality can be useful if you want a worker role

    to "lease" a queue message. For example, if a worker role calls get_messages

    and recognizes that it needs more time to process a message, it can

    continually extend the message''s invisibility until it is processed. If

    the worker role were to fail during processing, eventually the message

    would become visible again and another worker role could process it.


    If the key-encryption-key field is set on the local service object, this method
    will

    encrypt the content before uploading.

    '
  syntax:
    content: update_message(queue_name, message_id, pop_receipt, visibility_timeout,
      content=None, timeout=None)
    parameters:
    - description: 'The name of the queue containing the message to update.

        '
      id: queue_name
      type:
      - str
    - description: 'The message id identifying the message to update.

        '
      id: message_id
      type:
      - str
    - description: 'A valid pop receipt value returned from an earlier call

        to the @azure.storage.queue.queueservice.QueueService.get_messages or @azure.storage.queue.queueservice.QueueService.update_message
        operation.

        '
      id: pop_receipt
      type:
      - str
    - description: 'Specifies the new visibility timeout value, in seconds,

        relative to server time. The new value must be larger than or equal

        to 0, and cannot be larger than 7 days. The visibility timeout of a

        message cannot be set to a value later than the expiry time. A

        message can be updated until it has been deleted or has expired.

        '
      id: visibility_timeout
      type:
      - int
    - defaultValue: None
      description: 'Message content. Allowed type is determined by the encode_function

        set on the service. Default is str.

        '
      id: content
      type:
      - obj
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A list of @azure.storage.queue.models.QueueMessage objects. For
        convenience,

        this object is also populated with the content, although it is not returned
        by the service.

        '
      type:
      - list(azure.storage.queue.models.QueueMessage)
  type: method
  uid: azure.storage.queue.queueservice.QueueService.update_message
references:
- fullName: azure.storage.queue.queueservice.QueueService.clear_messages
  isExternal: false
  name: clear_messages
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.clear_messages
- fullName: azure.storage.queue.queueservice.QueueService.create_queue
  isExternal: false
  name: create_queue
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.create_queue
- fullName: azure.storage.queue.queueservice.QueueService.delete_message
  isExternal: false
  name: delete_message
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.delete_message
- fullName: azure.storage.queue.queueservice.QueueService.delete_queue
  isExternal: false
  name: delete_queue
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.delete_queue
- fullName: azure.storage.queue.queueservice.QueueService.exists
  isExternal: false
  name: exists
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.exists
- fullName: azure.storage.queue.queueservice.QueueService.generate_account_shared_access_signature
  isExternal: false
  name: generate_account_shared_access_signature
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.generate_account_shared_access_signature
- fullName: azure.storage.queue.queueservice.QueueService.generate_queue_shared_access_signature
  isExternal: false
  name: generate_queue_shared_access_signature
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.generate_queue_shared_access_signature
- fullName: azure.storage.queue.queueservice.QueueService.get_messages
  isExternal: false
  name: get_messages
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.get_messages
- fullName: azure.storage.queue.queueservice.QueueService.get_queue_acl
  isExternal: false
  name: get_queue_acl
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.get_queue_acl
- fullName: azure.storage.queue.queueservice.QueueService.get_queue_metadata
  isExternal: false
  name: get_queue_metadata
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.get_queue_metadata
- fullName: azure.storage.queue.queueservice.QueueService.get_queue_service_properties
  isExternal: false
  name: get_queue_service_properties
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.get_queue_service_properties
- fullName: azure.storage.queue.queueservice.QueueService.get_queue_service_stats
  isExternal: false
  name: get_queue_service_stats
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.get_queue_service_stats
- fullName: azure.storage.queue.queueservice.QueueService.list_queues
  isExternal: false
  name: list_queues
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.list_queues
- fullName: azure.storage.queue.queueservice.QueueService.peek_messages
  isExternal: false
  name: peek_messages
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.peek_messages
- fullName: azure.storage.queue.queueservice.QueueService.put_message
  isExternal: false
  name: put_message
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.put_message
- fullName: azure.storage.queue.queueservice.QueueService.set_queue_acl
  isExternal: false
  name: set_queue_acl
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.set_queue_acl
- fullName: azure.storage.queue.queueservice.QueueService.set_queue_metadata
  isExternal: false
  name: set_queue_metadata
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.set_queue_metadata
- fullName: azure.storage.queue.queueservice.QueueService.set_queue_service_properties
  isExternal: false
  name: set_queue_service_properties
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.set_queue_service_properties
- fullName: azure.storage.queue.queueservice.QueueService.update_message
  isExternal: false
  name: update_message
  parent: azure.storage.queue.queueservice.QueueService
  uid: azure.storage.queue.queueservice.QueueService.update_message
- fullName: function(data)
  name: function(data)
  spec.python:
  - fullName: function
    name: function
    uid: function
  - fullName: (
    name: (
  - fullName: data
    name: data
    uid: data
  - fullName: )
    name: )
  uid: function(data)
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
- fullName: list(azure.storage.queue.models.QueueMessage)
  name: list(QueueMessage)
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: azure.storage.queue.models.QueueMessage
    name: QueueMessage
    uid: azure.storage.queue.models.QueueMessage
  - fullName: )
    name: )
  uid: list(azure.storage.queue.models.QueueMessage)
- fullName: dict(str, azure.storage.common.models.AccessPolicy)
  name: dict(str, AccessPolicy)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: azure.storage.common.models.AccessPolicy
    name: AccessPolicy
    uid: azure.storage.common.models.AccessPolicy
  - fullName: )
    name: )
  uid: dict(str, azure.storage.common.models.AccessPolicy)
- fullName: list(azure.storage.common.models.CorsRule)
  name: list(CorsRule)
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: azure.storage.common.models.CorsRule
    name: CorsRule
    uid: azure.storage.common.models.CorsRule
  - fullName: )
    name: )
  uid: list(azure.storage.common.models.CorsRule)
