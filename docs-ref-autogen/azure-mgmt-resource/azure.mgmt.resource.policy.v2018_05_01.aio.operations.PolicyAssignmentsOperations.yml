### YamlMime:PythonClass
uid: azure.mgmt.resource.policy.v2018_05_01.aio.operations.PolicyAssignmentsOperations
name: PolicyAssignmentsOperations
fullName: azure.mgmt.resource.policy.v2018_05_01.aio.operations.PolicyAssignmentsOperations
module: azure.mgmt.resource.policy.v2018_05_01.aio.operations
inheritances:
- builtins.object
summary: "> [!WARNING]\n> DO NOT instantiate this class directly.\n>\n> \n>\n> Instead,\
  \ you should access the following operations through\n>\n> <xref:azure.mgmt.resource.policy.v2018_05_01.aio.PolicyClient>'s\n\
  >\n> <xref:policy_assignments> attribute.\n>"
constructor:
  syntax: PolicyAssignmentsOperations(*args, **kwargs)
methods:
- uid: azure.mgmt.resource.policy.v2018_05_01.aio.operations.PolicyAssignmentsOperations.create
  name: create
  summary: 'Creates or updates a policy assignment.


    This operation creates or updates a policy assignment with the given scope and
    name. Policy

    assignments apply to all resources contained within their scope. For example,
    when you assign a

    policy at resource group scope, that policy applies to all resources in the group.'
  signature: 'async create(scope: str, policy_assignment_name: str, parameters: _models.PolicyAssignment,
    *, content_type: str = ''application/json'', **kwargs: Any) -> _models.PolicyAssignment'
  parameters:
  - name: scope
    description: 'The scope of the policy assignment. Valid scopes are: management
      group (format:

      ''/providers/Microsoft.Management/managementGroups/{managementGroup}''), subscription
      (format:

      ''/subscriptions/{subscriptionId}''), resource group (format:

      ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'', or resource
      (format:

      ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}''.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: policy_assignment_name
    description: The name of the policy assignment. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: parameters
    description: 'Parameters for the policy assignment. Is either a PolicyAssignment
      type or a

      IO[bytes] type. Required.'
    isRequired: true
    types:
    - <xref:azure.mgmt.resource.policy.v2018_05_01.models.PolicyAssignment>
    - <xref:typing.IO>[<xref:bytes>]
  return:
    description: PolicyAssignment or the result of cls(response)
    types:
    - <xref:azure.mgmt.resource.policy.v2018_05_01.models.PolicyAssignment>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.resource.policy.v2018_05_01.aio.operations.PolicyAssignmentsOperations.create_by_id
  name: create_by_id
  summary: 'Creates or updates a policy assignment.


    This operation creates or updates the policy assignment with the given ID. Policy
    assignments

    made on a scope apply to all resources contained in that scope. For example, when
    you assign a

    policy to a resource group that policy applies to all resources in the group.
    Policy assignment

    IDs have this format:

    ''{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}''.
    Valid

    scopes are: management group (format:

    ''/providers/Microsoft.Management/managementGroups/{managementGroup}''), subscription
    (format:

    ''/subscriptions/{subscriptionId}''), resource group (format:

    ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'', or resource
    (format:

    ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}''.'
  signature: 'async create_by_id(policy_assignment_id: str, parameters: _models.PolicyAssignment,
    *, content_type: str = ''application/json'', **kwargs: Any) -> _models.PolicyAssignment'
  parameters:
  - name: policy_assignment_id
    description: 'The ID of the policy assignment to create. Use the format

      ''{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}''.
      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: parameters
    description: 'Parameters for policy assignment. Is either a PolicyAssignment type
      or a

      IO[bytes] type. Required.'
    isRequired: true
    types:
    - <xref:azure.mgmt.resource.policy.v2018_05_01.models.PolicyAssignment>
    - <xref:typing.IO>[<xref:bytes>]
  return:
    description: PolicyAssignment or the result of cls(response)
    types:
    - <xref:azure.mgmt.resource.policy.v2018_05_01.models.PolicyAssignment>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.resource.policy.v2018_05_01.aio.operations.PolicyAssignmentsOperations.delete
  name: delete
  summary: 'Deletes a policy assignment.


    This operation deletes a policy assignment, given its name and the scope it was
    created in. The

    scope of a policy assignment is the part of its ID preceding

    ''/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}''.'
  signature: 'async delete(scope: str, policy_assignment_name: str, **kwargs: Any)
    -> PolicyAssignment | None'
  parameters:
  - name: scope
    description: 'The scope of the policy assignment. Valid scopes are: management
      group (format:

      ''/providers/Microsoft.Management/managementGroups/{managementGroup}''), subscription
      (format:

      ''/subscriptions/{subscriptionId}''), resource group (format:

      ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'', or resource
      (format:

      ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}''.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: policy_assignment_name
    description: The name of the policy assignment to delete. Required.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: PolicyAssignment or None or the result of cls(response)
    types:
    - <xref:azure.mgmt.resource.policy.v2018_05_01.models.PolicyAssignment>
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.resource.policy.v2018_05_01.aio.operations.PolicyAssignmentsOperations.delete_by_id
  name: delete_by_id
  summary: 'Deletes a policy assignment.


    This operation deletes the policy with the given ID. Policy assignment IDs have
    this format:

    ''{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}''.
    Valid

    formats for {scope} are: ''/providers/Microsoft.Management/managementGroups/{managementGroup}''

    (management group), ''/subscriptions/{subscriptionId}'' (subscription),

    ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'' (resource
    group), or

    ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}''

    (resource).'
  signature: 'async delete_by_id(policy_assignment_id: str, **kwargs: Any) -> PolicyAssignment
    | None'
  parameters:
  - name: policy_assignment_id
    description: 'The ID of the policy assignment to delete. Use the format

      ''{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}''.
      Required.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: PolicyAssignment or None or the result of cls(response)
    types:
    - <xref:azure.mgmt.resource.policy.v2018_05_01.models.PolicyAssignment>
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.resource.policy.v2018_05_01.aio.operations.PolicyAssignmentsOperations.get
  name: get
  summary: 'Retrieves a policy assignment.


    This operation retrieves a single policy assignment, given its name and the scope
    it was

    created at.'
  signature: 'async get(scope: str, policy_assignment_name: str, **kwargs: Any) ->
    PolicyAssignment'
  parameters:
  - name: scope
    description: 'The scope of the policy assignment. Valid scopes are: management
      group (format:

      ''/providers/Microsoft.Management/managementGroups/{managementGroup}''), subscription
      (format:

      ''/subscriptions/{subscriptionId}''), resource group (format:

      ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'', or resource
      (format:

      ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}''.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: policy_assignment_name
    description: The name of the policy assignment to get. Required.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: PolicyAssignment or the result of cls(response)
    types:
    - <xref:azure.mgmt.resource.policy.v2018_05_01.models.PolicyAssignment>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.resource.policy.v2018_05_01.aio.operations.PolicyAssignmentsOperations.get_by_id
  name: get_by_id
  summary: 'Retrieves the policy assignment with the given ID.


    The operation retrieves the policy assignment with the given ID. Policy assignment
    IDs have

    this format:

    ''{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}''.
    Valid

    scopes are: management group (format:

    ''/providers/Microsoft.Management/managementGroups/{managementGroup}''), subscription
    (format:

    ''/subscriptions/{subscriptionId}''), resource group (format:

    ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'', or resource
    (format:

    ''/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}''.'
  signature: 'async get_by_id(policy_assignment_id: str, **kwargs: Any) -> PolicyAssignment'
  parameters:
  - name: policy_assignment_id
    description: 'The ID of the policy assignment to get. Use the format

      ''{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}''.
      Required.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: PolicyAssignment or the result of cls(response)
    types:
    - <xref:azure.mgmt.resource.policy.v2018_05_01.models.PolicyAssignment>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.resource.policy.v2018_05_01.aio.operations.PolicyAssignmentsOperations.list
  name: list
  summary: 'Retrieves all policy assignments that apply to a subscription.


    This operation retrieves the list of all policy assignments associated with the
    given

    subscription that match the optional given $filter. Valid values for $filter are:
    ''atScope()''

    or ''policyDefinitionId eq ''{value}''''. If $filter is not provided, the unfiltered
    list includes

    all policy assignments associated with the subscription, including those that
    apply directly or

    from management groups that contain the given subscription, as well as any applied
    to objects

    contained within the subscription. If $filter=atScope() is provided, the returned
    list includes

    all policy assignments that apply to the subscription, which is everything in
    the unfiltered

    list except those applied to objects contained within the subscription. If

    $filter=policyDefinitionId eq ''{value}'' is provided, the returned list includes
    all policy

    assignments of the policy definition whose id is {value}.'
  signature: 'list(filter: str | None = None, **kwargs: Any) -> AsyncIterable[PolicyAssignment]'
  parameters:
  - name: filter
    description: 'The filter to apply on the operation. Valid values for $filter are:
      ''atScope()''

      or ''policyDefinitionId eq ''{value}''''. If $filter is not provided, no filtering
      is performed.

      Default value is None.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterator like instance of either PolicyAssignment or the result
      of cls(response)
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.mgmt.resource.policy.v2018_05_01.models.PolicyAssignment>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.resource.policy.v2018_05_01.aio.operations.PolicyAssignmentsOperations.list_for_resource
  name: list_for_resource
  summary: 'Retrieves all policy assignments that apply to a resource.


    This operation retrieves the list of all policy assignments associated with the
    specified

    resource in the given resource group and subscription that match the optional
    given $filter.

    Valid values for $filter are: ''atScope()'' or ''policyDefinitionId eq ''{value}''''.
    If $filter is

    not provided, the unfiltered list includes all policy assignments associated with
    the resource,

    including those that apply directly or from all containing scopes, as well as
    any applied to

    resources contained within the resource. If $filter=atScope() is provided, the
    returned list

    includes all policy assignments that apply to the resource, which is everything
    in the

    unfiltered list except those applied to resources contained within the resource.
    If

    $filter=policyDefinitionId eq ''{value}'' is provided, the returned list includes
    all policy

    assignments of the policy definition whose id is {value} that apply to the resource.
    Three

    parameters plus the resource name are used to identify a specific resource. If
    the resource is

    not part of a parent resource (the more common case), the parent resource path
    should not be

    provided (or provided as ''''). For example a web app could be specified as

    ({resourceProviderNamespace} == ''Microsoft.Web'', {parentResourcePath} == '''',
    {resourceType} ==

    ''sites'', {resourceName} == ''MyWebApp''). If the resource is part of a parent
    resource, then all

    parameters should be provided. For example a virtual machine DNS name could be
    specified as

    ({resourceProviderNamespace} == ''Microsoft.Compute'', {parentResourcePath} ==

    ''virtualMachines/MyVirtualMachine'', {resourceType} == ''domainNames'', {resourceName}
    ==

    ''MyComputerName''). A convenient alternative to providing the namespace and type
    name separately

    is to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace}
    == '''',

    {parentResourcePath} == '''', {resourceType} == ''Microsoft.Web/sites'', {resourceName}
    ==

    ''MyWebApp'').'
  signature: 'list_for_resource(resource_group_name: str, resource_provider_namespace:
    str, parent_resource_path: str, resource_type: str, resource_name: str, filter:
    str | None = None, **kwargs: Any) -> AsyncIterable[PolicyAssignment]'
  parameters:
  - name: resource_group_name
    description: The name of the resource group containing the resource. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: resource_provider_namespace
    description: 'The namespace of the resource provider. For example, the

      namespace of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines).

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: parent_resource_path
    description: 'The parent resource path. Use empty string if there is none.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: resource_type
    description: 'The resource type name. For example the type name of a web app is
      ''sites''

      (from Microsoft.Web/sites). Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: resource_name
    description: The name of the resource. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: filter
    description: 'The filter to apply on the operation. Valid values for $filter are:
      ''atScope()''

      or ''policyDefinitionId eq ''{value}''''. If $filter is not provided, no filtering
      is performed.

      Default value is None.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterator like instance of either PolicyAssignment or the result
      of cls(response)
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.mgmt.resource.policy.v2018_05_01.models.PolicyAssignment>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.resource.policy.v2018_05_01.aio.operations.PolicyAssignmentsOperations.list_for_resource_group
  name: list_for_resource_group
  summary: 'Retrieves all policy assignments that apply to a resource group.


    This operation retrieves the list of all policy assignments associated with the
    given resource

    group in the given subscription that match the optional given $filter. Valid values
    for $filter

    are: ''atScope()'' or ''policyDefinitionId eq ''{value}''''. If $filter is not
    provided, the

    unfiltered list includes all policy assignments associated with the resource group,
    including

    those that apply directly or apply from containing scopes, as well as any applied
    to resources

    contained within the resource group. If $filter=atScope() is provided, the returned
    list

    includes all policy assignments that apply to the resource group, which is everything
    in the

    unfiltered list except those applied to resources contained within the resource
    group. If

    $filter=policyDefinitionId eq ''{value}'' is provided, the returned list includes
    all policy

    assignments of the policy definition whose id is {value} that apply to the resource
    group.'
  signature: 'list_for_resource_group(resource_group_name: str, filter: str | None
    = None, **kwargs: Any) -> AsyncIterable[PolicyAssignment]'
  parameters:
  - name: resource_group_name
    description: 'The name of the resource group that contains policy assignments.

      Required.'
    isRequired: true
    types:
    - <xref:str>
  - name: filter
    description: 'The filter to apply on the operation. Valid values for $filter are:
      ''atScope()''

      or ''policyDefinitionId eq ''{value}''''. If $filter is not provided, no filtering
      is performed.

      Default value is None.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterator like instance of either PolicyAssignment or the result
      of cls(response)
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.mgmt.resource.policy.v2018_05_01.models.PolicyAssignment>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
attributes:
- uid: azure.mgmt.resource.policy.v2018_05_01.aio.operations.PolicyAssignmentsOperations.models
  name: models
  signature: models = <module 'azure.mgmt.resource.policy.v2018_05_01.models' from
    'C:\\hostedtoolcache\\windows\\Python\\3.11.9\\x64\\Lib\\site-packages\\azure\\mgmt\\resource\\policy\\v2018_05_01\\models\\__init__.py'>
