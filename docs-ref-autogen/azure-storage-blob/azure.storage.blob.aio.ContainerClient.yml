### YamlMime:PythonClass
uid: azure.storage.blob.aio.ContainerClient
name: ContainerClient
fullName: azure.storage.blob.aio.ContainerClient
module: azure.storage.blob.aio
inheritances:
- azure.storage.blob._shared.base_client_async.AsyncStorageAccountHostsMixin
- azure.storage.blob._container_client.ContainerClient
- azure.storage.blob._encryption.StorageEncryptionMixin
summary: 'A client to interact with a specific container, although that container

  may not yet exist.


  For operations relating to a specific blob within this container, a blob client
  can be

  retrieved using the <xref:azure.storage.blob.aio.ContainerClient.get_blob_client>
  function.'
constructor:
  syntax: 'ContainerClient(account_url: str, container_name: str, credential: str
    | Dict[str, str] | AzureNamedKeyCredential | AzureSasCredential | AsyncTokenCredential
    | None = None, **kwargs: Any)'
  parameters:
  - name: account_url
    description: 'The URI to the storage account. In order to create a client given
      the full URI to the container,

      use the <xref:azure.storage.blob.aio.from_container_url> classmethod.'
    isRequired: true
    types:
    - <xref:str>
  - name: container_name
    description: The name of the container for the blob.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be a SAS token string,

      an instance of a AzureSasCredential or AzureNamedKeyCredential from azure.core.credentials,

      an account shared access key, or an instance of a TokenCredentials class from
      azure.identity.

      If the resource URI already contains a SAS token, this will be ignored in favor
      of an explicit credential

      - except in the case of AzureSasCredential, where the conflicting SAS tokens
      will raise a ValueError.

      If using an instance of AzureNamedKeyCredential, "name" should be the storage
      account name, and "key"

      should be the storage account key.'
    defaultValue: None
  - name: api_version
    description: 'The Storage API version to use for requests. Default value is the
      most recent service version that is

      compatible with the current SDK. Setting to an older version may result in reduced
      feature compatibility.


      New in version 12.2.0.'
    types:
    - <xref:str>
  - name: secondary_hostname
    description: The hostname of the secondary endpoint.
    types:
    - <xref:str>
  - name: max_block_size
    description: 'The maximum chunk size for uploading a block blob in chunks.

      Defaults to 4*1024*1024, or 4MB.'
    types:
    - <xref:int>
  - name: max_single_put_size
    description: 'If the blob size is less than or equal max_single_put_size, then
      the blob will be

      uploaded with only one http PUT request. If the blob size is larger than max_single_put_size,

      the blob will be uploaded in chunks. Defaults to 64*1024*1024, or 64MB.'
    types:
    - <xref:int>
  - name: min_large_block_upload_threshold
    description: 'The minimum chunk size required to use the memory efficient

      algorithm when uploading a block blob. Defaults to 4*1024*1024+1.'
    types:
    - <xref:int>
  - name: use_byte_buffer
    description: Use a byte buffer for block blob uploads. Defaults to False.
    types:
    - <xref:bool>
  - name: max_page_size
    description: The maximum chunk size for uploading a page blob. Defaults to 4*1024*1024,
      or 4MB.
    types:
    - <xref:int>
  - name: max_single_get_size
    description: 'The maximum size for a blob to be downloaded in a single call,

      the exceeded part will be downloaded in chunks (could be parallel). Defaults
      to 32*1024*1024, or 32MB.'
    types:
    - <xref:int>
  - name: max_chunk_get_size
    description: 'The maximum chunk size used for downloading a blob. Defaults to
      4*1024*1024,

      or 4MB.'
    types:
    - <xref:int>
methods:
- uid: azure.storage.blob.aio.ContainerClient.acquire_lease
  name: acquire_lease
  summary: 'Requests a new lease. If the container does not have an active lease,

    the Blob service creates a lease on the container and returns a new

    lease ID.'
  signature: 'async acquire_lease(lease_duration: int = -1, lease_id: str | None =
    None, **kwargs) -> BlobLeaseClient'
  parameters:
  - name: lease_duration
    description: 'Specifies the duration of the lease, in seconds, or negative one

      (-1) for a lease that never expires. A non-infinite lease can be

      between 15 and 60 seconds. A lease duration cannot be changed

      using renew or change. Default is -1 (infinite lease).'
    isRequired: true
    types:
    - <xref:int>
  - name: lease_id
    description: 'Proposed lease ID, in a GUID string format. The Blob service returns

      400 (Invalid request) if the proposed lease ID is not in the correct format.'
    isRequired: true
    types:
    - <xref:str>
  - name: if_modified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only

      if the resource has been modified since the specified time.'
    types:
    - <xref:datetime.datetime>
  - name: if_unmodified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only if

      the resource has not been modified since the specified date/time.'
    types:
    - <xref:datetime.datetime>
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource has changed,

      and act according to the condition specified by the *match_condition* parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    description: A BlobLeaseClient object, that can be run in a context manager.
    types:
    - <xref:azure.storage.blob.aio.BlobLeaseClient>
- uid: azure.storage.blob.aio.ContainerClient.create_container
  name: create_container
  summary: 'Creates a new container under the specified account. If the container

    with the same name already exists, the operation fails.'
  signature: 'async create_container(metadata: Dict[str, str] | None = None, public_access:
    PublicAccess | str | None = None, **kwargs: Any) -> Dict[str, str | datetime]'
  parameters:
  - name: metadata
    description: 'A dict with name_value pairs to associate with the

      container as metadata. Example:{''Category'':''test''}'
    isRequired: true
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: public_access
    description: 'Possible values include: ''container'', ''blob''.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.PublicAccess>
  - name: container_encryption_scope
    description: 'Specifies the default encryption scope to set on the container and
      use for

      all future writes.


      New in version 12.2.0.'
    types:
    - <xref:dict>
    - <xref:azure.storage.blob.ContainerEncryptionScope>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    description: A dictionary of response headers.
    types:
    - <xref:Dict>[<xref:str>, <xref:Union>[<xref:str>, <xref:datetime>]]
- uid: azure.storage.blob.aio.ContainerClient.delete_blob
  name: delete_blob
  summary: 'Marks the specified blob or snapshot for deletion.


    The blob is later deleted during garbage collection.

    Note that in order to delete a blob, you must delete all of its

    snapshots. You can delete both at the same time with the delete_blob

    operation.


    If a delete retention policy is enabled for the service, then this operation soft
    deletes the blob or snapshot

    and retains the blob or snapshot for specified number of days.

    After specified number of days, blob''s data is removed from the service during
    garbage collection.

    Soft deleted blobs or snapshots are accessible through <xref:azure.storage.blob.aio.ContainerClient.list_blobs>
    specifying *include=["deleted"]*

    Soft-deleted blob or snapshot can be restored using <xref:azure.storage.blob.aio.BlobClient.undelete>'
  signature: 'async delete_blob(blob: str | BlobProperties, delete_snapshots: str
    | None = None, **kwargs) -> None'
  parameters:
  - name: blob
    description: 'The blob with which to interact. If specified, this value will override

      a blob value specified in the blob URL.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.blob.BlobProperties>
  - name: delete_snapshots
    description: "Required if the blob has associated snapshots. Values include:\n\
      \   * \"only\": Deletes only the blobs snapshots. \n\n   * \"include\": Deletes\
      \ the blob along with all snapshots."
    isRequired: true
    types:
    - <xref:str>
  - name: version_id
    description: 'The version id parameter is an opaque DateTime

      value that, when present, specifies the version of the blob to delete.


      New in version 12.4.0.


      This keyword argument was introduced in API version ''2019-12-12''.'
    types:
    - <xref:str>
  - name: lease
    description: 'Required if the blob has an active lease. Value can be a Lease object

      or the lease ID as a string.'
    types:
    - <xref:azure.storage.blob.aio.BlobLeaseClient>
    - <xref:str>
  - name: if_modified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only

      if the resource has been modified since the specified time.'
    types:
    - <xref:datetime.datetime>
  - name: if_unmodified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only if

      the resource has not been modified since the specified date/time.'
    types:
    - <xref:datetime.datetime>
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource has changed,

      and act according to the condition specified by the *match_condition* parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: if_tags_match_condition
    description: 'Specify a SQL where clause on blob tags to operate only on blob
      with a matching value.

      eg. `"\"tagname\"=''my tag''"`


      New in version 12.4.0.'
    types:
    - <xref:str>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    types:
    - <xref:None>
- uid: azure.storage.blob.aio.ContainerClient.delete_blobs
  name: delete_blobs
  summary: 'Marks the specified blobs or snapshots for deletion.


    The blobs are later deleted during garbage collection.

    Note that in order to delete blobs, you must delete all of their

    snapshots. You can delete both at the same time with the delete_blobs operation.


    If a delete retention policy is enabled for the service, then this operation soft
    deletes the blobs or snapshots

    and retains the blobs or snapshots for specified number of days.

    After specified number of days, blobs'' data is removed from the service during
    garbage collection.

    Soft deleted blobs or snapshots are accessible through <xref:azure.storage.blob.aio.ContainerClient.list_blobs>
    specifying *include=["deleted"]*

    Soft-deleted blobs or snapshots can be restored using <xref:azure.storage.blob.aio.BlobClient.undelete>


    The maximum number of blobs that can be deleted in a single request is 256.'
  signature: 'async delete_blobs(*blobs: str | Dict[str, Any] | BlobProperties, **kwargs:
    Any) -> AsyncIterator[AsyncHttpResponse]'
  parameters:
  - name: blobs
    description: "The blobs to delete. This can be a single blob, or multiple values\
      \ can\nbe supplied, where each value is either the name of the blob (str) or\
      \ BlobProperties.\n\n\n> [!NOTE]\n> When the blob type is dict, here's a list\
      \ of keys, value rules.\n>\n> \n>\n> blob name:\n>\n> \n>\n> key: 'name', value\
      \ type: str\n>\n> \n>\n> snapshot you want to delete:\n>\n> \n>\n> key: 'snapshot',\
      \ value type: str\n>\n> \n>\n> whether to delete snapthots when deleting blob:\n\
      >\n> \n>\n> key: 'delete_snapshots', value: 'include' or 'only'\n>\n> \n>\n\
      > if the blob modified or not:\n>\n> \n>\n> key: 'if_modified_since', 'if_unmodified_since',\
      \ value type: datetime\n>\n> \n>\n> etag:\n>\n> \n>\n> key: 'etag', value type:\
      \ str\n>\n> \n>\n> match the etag or not:\n>\n> \n>\n> key: 'match_condition',\
      \ value type: MatchConditions\n>\n> \n>\n> tags match condition:\n>\n> \n>\n\
      > key: 'if_tags_match_condition', value type: str\n>\n> \n>\n> lease:\n>\n>\
      \ \n>\n> key: 'lease_id', value type: Union[str, LeaseClient]\n>\n> \n>\n> timeout\
      \ for subrequest:\n>\n> \n>\n> key: 'timeout', value type: int\n>"
    isRequired: true
    types:
    - <xref:str>
    - <xref:dict>(<xref:str>, <xref:Any>)
    - <xref:azure.storage.blob.BlobProperties>
  - name: delete_snapshots
    description: "Required if a blob has associated snapshots. Values include:\n \
      \  * \"only\": Deletes only the blobs snapshots. \n\n   * \"include\": Deletes\
      \ the blob along with all snapshots."
    types:
    - <xref:str>
  - name: if_modified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only

      if the resource has been modified since the specified time.'
    types:
    - <xref:datetime.datetime>
  - name: if_unmodified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only if

      the resource has not been modified since the specified date/time.'
    types:
    - <xref:datetime.datetime>
  - name: if_tags_match_condition
    description: 'Specify a SQL where clause on blob tags to operate only on blob
      with a matching value.

      eg. `"\"tagname\"=''my tag''"`


      New in version 12.4.0.'
    types:
    - <xref:str>
  - name: raise_on_any_failure
    description: 'This is a boolean param which defaults to True. When this is set,
      an exception

      is raised even if there is a single operation failure. For optimal performance,

      this should be set to False'
    types:
    - <xref:bool>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    description: An async iterator of responses, one for each blob in order
    types:
    - <xref:asynciterator>[<xref:azure.core.pipeline.transport.AsyncHttpResponse>]
- uid: azure.storage.blob.aio.ContainerClient.delete_container
  name: delete_container
  summary: 'Marks the specified container for deletion. The container and any blobs

    contained within it are later deleted during garbage collection.'
  signature: 'async delete_container(**kwargs: Any) -> None'
  parameters:
  - name: lease
    description: 'If specified, delete_container only succeeds if the

      container''s lease is active and matches this ID.

      Required if the container has an active lease.'
    types:
    - <xref:azure.storage.blob.aio.BlobLeaseClient>
    - <xref:str>
  - name: if_modified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only

      if the resource has been modified since the specified time.'
    types:
    - <xref:datetime.datetime>
  - name: if_unmodified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only if

      the resource has not been modified since the specified date/time.'
    types:
    - <xref:datetime.datetime>
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource has changed,

      and act according to the condition specified by the *match_condition* parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    types:
    - <xref:None>
- uid: azure.storage.blob.aio.ContainerClient.download_blob
  name: download_blob
  summary: 'Downloads a blob to the StorageStreamDownloader. The readall() method
    must

    be used to read all the content or readinto() must be used to download the blob
    into

    a stream. Using chunks() returns an async iterator which allows the user to iterate
    over the content in chunks.'
  signature: 'async download_blob(blob: str | BlobProperties, offset: int = None,
    length: int = None, *, encoding: str, **kwargs) -> StorageStreamDownloader[str]'
  parameters:
  - name: blob
    description: 'The blob with which to interact. If specified, this value will override

      a blob value specified in the blob URL.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.blob.BlobProperties>
  - name: offset
    description: 'Start of byte range to use for downloading a section of the blob.

      Must be set if length is provided.'
    isRequired: true
    types:
    - <xref:int>
  - name: length
    description: 'Number of bytes to read from the stream. This is optional, but

      should be supplied for optimal performance.'
    isRequired: true
    types:
    - <xref:int>
  - name: version_id
    description: 'The version id parameter is an opaque DateTime

      value that, when present, specifies the version of the blob to download.


      New in version 12.4.0.


      This keyword argument was introduced in API version ''2019-12-12''.'
    types:
    - <xref:str>
  - name: validate_content
    description: 'If true, calculates an MD5 hash for each chunk of the blob. The
      storage

      service checks the hash of the content that has arrived with the hash

      that was sent. This is primarily valuable for detecting bitflips on

      the wire if using http instead of https, as https (the default), will

      already validate. Note that this MD5 hash is not stored with the

      blob. Also note that if enabled, the memory-efficient upload algorithm

      will not be used because computing the MD5 hash requires buffering

      entire blocks, and doing so defeats the purpose of the memory-efficient algorithm.'
    types:
    - <xref:bool>
  - name: lease
    description: 'Required if the blob has an active lease. If specified, download_blob
      only

      succeeds if the blob''s lease is active and matches this ID. Value can be a

      BlobLeaseClient object or the lease ID as a string.'
    types:
    - <xref:azure.storage.blob.aio.BlobLeaseClient>
    - <xref:str>
  - name: if_modified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only

      if the resource has been modified since the specified time.'
    types:
    - <xref:datetime.datetime>
  - name: if_unmodified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only if

      the resource has not been modified since the specified date/time.'
    types:
    - <xref:datetime.datetime>
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource has changed,

      and act according to the condition specified by the *match_condition* parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: if_tags_match_condition
    description: 'Specify a SQL where clause on blob tags to operate only on blob
      with a matching value.

      eg. `"\"tagname\"=''my tag''"`


      New in version 12.4.0.'
    types:
    - <xref:str>
  - name: cpk
    description: 'Encrypts the data on the service-side with the given key.

      Use of customer-provided keys must be done over HTTPS.

      As the encryption key itself is provided in the request,

      a secure connection must be established to transfer the key.'
    types:
    - <xref:azure.storage.blob.CustomerProvidedEncryptionKey>
  - name: max_concurrency
    description: The number of parallel connections with which to download.
    types:
    - <xref:int>
  - name: encoding
    description: Encoding to decode the downloaded bytes. Default is None, i.e. no
      decoding.
    types:
    - <xref:str>
  - name: progress_hook
    description: 'An async callback to track the progress of a long running download.
      The signature is

      function(current: int, total: int) where current is the number of bytes transfered

      so far, and total is the total size of the download.'
    types:
    - <xref:Callable>[[<xref:int>, <xref:int>], <xref:Awaitable>[<xref:None>]]
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).
      This method may make multiple calls to the service and

      the timeout will apply to each call individually.

      multiple calls to the Azure service and the timeout will apply to

      each call individually.'
    types:
    - <xref:int>
  return:
    description: A streaming object. (StorageStreamDownloader)
    types:
    - <xref:azure.storage.blob.aio.StorageStreamDownloader>
- uid: azure.storage.blob.aio.ContainerClient.exists
  name: exists
  summary: Returns True if a container exists and returns False otherwise.
  signature: 'async exists(**kwargs: Any) -> bool'
  parameters:
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    description: boolean
- uid: azure.storage.blob.aio.ContainerClient.find_blobs_by_tags
  name: find_blobs_by_tags
  summary: 'Returns a generator to list the blobs under the specified container whose
    tags

    match the given search expression.

    The generator will lazily follow the continuation tokens returned by

    the service.'
  signature: 'find_blobs_by_tags(filter_expression: str, **kwargs: Any | None) ->
    AsyncItemPaged[FilteredBlob]'
  parameters:
  - name: filter_expression
    description: 'The expression to find blobs whose tags matches the specified condition.

      eg. ""yourtagname"=''firsttag'' and "yourtagname2"=''secondtag''"'
    isRequired: true
    types:
    - <xref:str>
  - name: results_per_page
    description: The max result per page when paginating.
    types:
    - <xref:int>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    description: An iterable (auto-paging) response of FilteredBlob.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.storage.blob.BlobProperties>]
- uid: azure.storage.blob.aio.ContainerClient.get_account_information
  name: get_account_information
  summary: 'Gets information related to the storage account.


    The information can also be retrieved if the user has a SAS to a container or
    blob.

    The keys in the returned dictionary include ''sku_name'' and ''account_kind''.'
  signature: 'async get_account_information(**kwargs: Any) -> Dict[str, str]'
  return:
    description: A dict of account information (SKU and account type).
    types:
    - <xref:dict>(<xref:str>, <xref:str>)
- uid: azure.storage.blob.aio.ContainerClient.get_blob_client
  name: get_blob_client
  summary: 'Get a client to interact with the specified blob.


    The blob need not already exist.'
  signature: 'get_blob_client(blob: BlobProperties | str, snapshot: str = None) ->
    BlobClient'
  parameters:
  - name: blob
    description: The blob with which to interact.
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.blob.BlobProperties>
  - name: snapshot
    description: 'The optional blob snapshot on which to operate. This can be the
      snapshot ID string

      or the response returned from <xref:azure.storage.blob.aio.BlobClient.create_snapshot>.'
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: A BlobClient.
    types:
    - <xref:azure.storage.blob.aio.BlobClient>
- uid: azure.storage.blob.aio.ContainerClient.get_container_access_policy
  name: get_container_access_policy
  summary: 'Gets the permissions for the specified container.

    The permissions indicate whether container data may be accessed publicly.'
  signature: 'async get_container_access_policy(**kwargs: Any) -> Dict[str, Any]'
  parameters:
  - name: lease
    description: 'If specified, get_container_access_policy only succeeds if the

      container''s lease is active and matches this ID.'
    types:
    - <xref:azure.storage.blob.aio.BlobLeaseClient>
    - <xref:str>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    description: Access policy information in a dict.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
- uid: azure.storage.blob.aio.ContainerClient.get_container_properties
  name: get_container_properties
  summary: 'Returns all user-defined metadata and system properties for the specified

    container. The data returned does not include the container''s list of blobs.'
  signature: 'async get_container_properties(**kwargs: Any) -> ContainerProperties'
  parameters:
  - name: lease
    description: 'If specified, get_container_properties only succeeds if the

      container''s lease is active and matches this ID.'
    types:
    - <xref:azure.storage.blob.aio.BlobLeaseClient>
    - <xref:str>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    description: Properties for the specified container within a container object.
    types:
    - <xref:azure.storage.blob.ContainerProperties>
- uid: azure.storage.blob.aio.ContainerClient.list_blob_names
  name: list_blob_names
  summary: 'Returns a generator to list the names of blobs under the specified container.

    The generator will lazily follow the continuation tokens returned by

    the service.


    Note that no additional properties or metadata will be returned when using this
    API.

    Additionally this API does not have an option to include additional blobs such
    as snapshots,

    versions, soft-deleted blobs, etc. To get any of this data, use <xref:azure.storage.blob.aio.ContainerClient.list_blobs>.'
  signature: 'list_blob_names(**kwargs: Any) -> AsyncItemPaged[str]'
  parameters:
  - name: name_starts_with
    description: 'Filters the results to return only blobs whose names

      begin with the specified prefix.'
    types:
    - <xref:str>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    description: An iterable (auto-paging) response of blob names as strings.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:str>]
- uid: azure.storage.blob.aio.ContainerClient.list_blobs
  name: list_blobs
  summary: 'Returns a generator to list the blobs under the specified container.

    The generator will lazily follow the continuation tokens returned by

    the service.'
  signature: 'list_blobs(name_starts_with: str | None = None, include: str | List[str]
    | None = None, **kwargs: Any) -> AsyncItemPaged[BlobProperties]'
  parameters:
  - name: name_starts_with
    description: 'Filters the results to return only blobs whose names

      begin with the specified prefix.'
    isRequired: true
    types:
    - <xref:str>
  - name: include
    description: 'Specifies one or more additional datasets to include in the response.

      Options include: ''snapshots'', ''metadata'', ''uncommittedblobs'', ''copy'',
      ''deleted'', ''deletedwithversions'',

      ''tags'', ''versions'', ''immutabilitypolicy'', ''legalhold''.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:str>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    description: An iterable (auto-paging) response of BlobProperties.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.storage.blob.BlobProperties>]
- uid: azure.storage.blob.aio.ContainerClient.set_container_access_policy
  name: set_container_access_policy
  summary: 'Sets the permissions for the specified container or stored access

    policies that may be used with Shared Access Signatures. The permissions

    indicate whether blobs in a container may be accessed publicly.'
  signature: 'async set_container_access_policy(signed_identifiers: Dict[str, AccessPolicy],
    public_access: str | PublicAccess | None = None, **kwargs: Any) -> Dict[str, str
    | datetime]'
  parameters:
  - name: signed_identifiers
    description: 'A dictionary of access policies to associate with the container.
      The

      dictionary may contain up to 5 elements. An empty dictionary

      will clear the access policies set on the service.'
    isRequired: true
    types:
    - <xref:dict>[<xref:str>, <xref:azure.storage.blob.AccessPolicy>]
  - name: public_access
    description: 'Possible values include: ''container'', ''blob''.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.PublicAccess>
  - name: lease
    description: 'Required if the container has an active lease. Value can be a BlobLeaseClient
      object

      or the lease ID as a string.'
    types:
    - <xref:azure.storage.blob.aio.BlobLeaseClient>
    - <xref:str>
  - name: if_modified_since
    description: 'A datetime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only

      if the resource has been modified since the specified date/time.'
    types:
    - <xref:datetime.datetime>
  - name: if_unmodified_since
    description: 'A datetime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only if

      the resource has not been modified since the specified date/time.'
    types:
    - <xref:datetime.datetime>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    description: Container-updated property dict (Etag and last modified).
    types:
    - <xref:dict>[<xref:str>, <xref:str>
    - <xref:datetime.datetime>]
- uid: azure.storage.blob.aio.ContainerClient.set_container_metadata
  name: set_container_metadata
  summary: 'Sets one or more user-defined name-value pairs for the specified

    container. Each call to this operation replaces all existing metadata

    attached to the container. To remove all metadata from the container,

    call this operation with no metadata dict.'
  signature: 'async set_container_metadata(metadata: Dict[str, str] | None = None,
    **kwargs) -> Dict[str, str | datetime]'
  parameters:
  - name: metadata
    description: 'A dict containing name-value pairs to associate with the container
      as

      metadata. Example: {''category'':''test''}'
    isRequired: true
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: lease
    description: 'If specified, set_container_metadata only succeeds if the

      container''s lease is active and matches this ID.'
    types:
    - <xref:azure.storage.blob.aio.BlobLeaseClient>
    - <xref:str>
  - name: if_modified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only

      if the resource has been modified since the specified time.'
    types:
    - <xref:datetime.datetime>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    description: Container-updated property dict (Etag and last modified).
- uid: azure.storage.blob.aio.ContainerClient.set_premium_page_blob_tier_blobs
  name: set_premium_page_blob_tier_blobs
  summary: 'Sets the page blob tiers on the blobs. This API is only supported for
    page blobs on premium accounts.


    The maximum number of blobs that can be updated in a single request is 256.'
  signature: 'async set_premium_page_blob_tier_blobs(premium_page_blob_tier: str |
    PremiumPageBlobTier, *blobs: str | Dict[str, Any] | BlobProperties, **kwargs:
    Any) -> AsyncIterator[AsyncHttpResponse]'
  parameters:
  - name: premium_page_blob_tier
    description: 'A page blob tier value to set on all blobs to. The tier correlates
      to the size of the

      blob and number of allowed IOPS. This is only applicable to page blobs on

      premium storage accounts.



      > [!NOTE]

      > If you want to set different tier on different blobs please set this positional
      parameter to None.

      >

      > Then the blob tier on every BlobProperties will be taken.

      >'
    isRequired: true
    types:
    - <xref:azure.storage.blob.PremiumPageBlobTier>
  - name: blobs
    description: "The blobs with which to interact. This can be a single blob, or\
      \ multiple values can\nbe supplied, where each value is either the name of the\
      \ blob (str) or BlobProperties.\n\n\n> [!NOTE]\n> When the blob type is dict,\
      \ here's a list of keys, value rules.\n>\n> \n>\n> blob name:\n>\n> \n>\n> key:\
      \ 'name', value type: str\n>\n> \n>\n> premium blob tier:\n>\n> \n>\n> key:\
      \ 'blob_tier', value type: PremiumPageBlobTier\n>\n> \n>\n> lease:\n>\n> \n\
      >\n> key: 'lease_id', value type: Union[str, LeaseClient]\n>\n> \n>\n> timeout\
      \ for subrequest:\n>\n> \n>\n> key: 'timeout', value type: int\n>"
    isRequired: true
    types:
    - <xref:str>
    - <xref:dict>(<xref:str>, <xref:Any>)
    - <xref:azure.storage.blob.BlobProperties>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  - name: raise_on_any_failure
    description: 'This is a boolean param which defaults to True. When this is set,
      an exception

      is raised even if there is a single operation failure. For optimal performance,

      this should be set to False.'
    types:
    - <xref:bool>
  return:
    description: An async iterator of responses, one for each blob in order
    types:
    - <xref:asynciterator>[<xref:azure.core.pipeline.transport.AsyncHttpResponse>]
- uid: azure.storage.blob.aio.ContainerClient.set_standard_blob_tier_blobs
  name: set_standard_blob_tier_blobs
  summary: 'This operation sets the tier on block blobs.


    A block blob''s tier determines Hot/Cool/Archive storage type.

    This operation does not update the blob''s ETag.


    The maximum number of blobs that can be updated in a single request is 256.'
  signature: 'async set_standard_blob_tier_blobs(standard_blob_tier: str | StandardBlobTier,
    *blobs: str | Dict[str, Any] | BlobProperties, **kwargs: Any) -> AsyncIterator[AsyncHttpResponse]'
  parameters:
  - name: standard_blob_tier
    description: 'Indicates the tier to be set on all blobs. Options include ''Hot'',
      ''Cool'',

      ''Archive''. The hot tier is optimized for storing data that is accessed

      frequently. The cool storage tier is optimized for storing data that

      is infrequently accessed and stored for at least a month. The archive

      tier is optimized for storing data that is rarely accessed and stored

      for at least six months with flexible latency requirements.



      > [!NOTE]

      > If you want to set different tier on different blobs please set this positional
      parameter to None.

      >

      > Then the blob tier on every BlobProperties will be taken.

      >'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.blob.StandardBlobTier>
  - name: blobs
    description: "The blobs with which to interact. This can be a single blob, or\
      \ multiple values can\nbe supplied, where each value is either the name of the\
      \ blob (str) or BlobProperties.\n\n\n> [!NOTE]\n> When the blob type is dict,\
      \ here's a list of keys, value rules.\n>\n> blob name:\n>\n> \n>\n> key: 'name',\
      \ value type: str\n>\n> \n>\n> standard blob tier:\n>\n> \n>\n> key: 'blob_tier',\
      \ value type: StandardBlobTier\n>\n> \n>\n> rehydrate priority:\n>\n> \n>\n\
      > key: 'rehydrate_priority', value type: RehydratePriority\n>\n> \n>\n> lease:\n\
      >\n> \n>\n> key: 'lease_id', value type: Union[str, LeaseClient]\n>\n> \n>\n\
      > tags match condition:\n>\n> \n>\n> key: 'if_tags_match_condition', value type:\
      \ str\n>\n> \n>\n> timeout for subrequest:\n>\n> \n>\n> key: 'timeout', value\
      \ type: int\n>"
    isRequired: true
    types:
    - <xref:str>
    - <xref:dict>(<xref:str>, <xref:Any>)
    - <xref:azure.storage.blob.BlobProperties>
  - name: rehydrate_priority
    description: Indicates the priority with which to rehydrate an archived blob
    types:
    - <xref:azure.storage.blob.RehydratePriority>
  - name: if_tags_match_condition
    description: 'Specify a SQL where clause on blob tags to operate only on blob
      with a matching value.

      eg. `"\"tagname\"=''my tag''"`


      New in version 12.4.0.'
    types:
    - <xref:str>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  - name: raise_on_any_failure
    description: 'This is a boolean param which defaults to True. When this is set,
      an exception

      is raised even if there is a single operation failure. For optimal performance,

      this should be set to False.'
    types:
    - <xref:bool>
  return:
    description: An async iterator of responses, one for each blob in order
    types:
    - <xref:asynciterator>[<xref:azure.core.pipeline.transport.AsyncHttpResponse>]
- uid: azure.storage.blob.aio.ContainerClient.upload_blob
  name: upload_blob
  summary: Creates a new blob from a data source with automatic chunking.
  signature: 'async upload_blob(name: str | BlobProperties, data: bytes | str | Iterable
    | AsyncIterable | IO, blob_type: str | BlobType = BlobType.BLOCKBLOB, length:
    int | None = None, metadata: Dict[str, str] | None = None, **kwargs) -> BlobClient'
  parameters:
  - name: name
    description: 'The blob with which to interact. If specified, this value will override

      a blob value specified in the blob URL.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.storage.blob.BlobProperties>
  - name: data
    description: The blob data to upload.
    isRequired: true
  - name: blob_type
    description: 'The type of the blob. This can be

      either BlockBlob, PageBlob or AppendBlob. The default value is BlockBlob.'
    isRequired: true
    types:
    - <xref:azure.storage.blob.BlobType>
  - name: length
    description: 'Number of bytes to read from the stream. This is optional, but

      should be supplied for optimal performance.'
    isRequired: true
    types:
    - <xref:int>
  - name: metadata
    description: Name-value pairs associated with the blob as metadata.
    isRequired: true
    types:
    - <xref:dict>(<xref:str>, <xref:str>)
  - name: overwrite
    description: 'Whether the blob to be uploaded should overwrite the current data.

      If True, upload_blob will overwrite the existing data. If set to False, the

      operation will fail with ResourceExistsError. The exception to the above is
      with Append

      blob types: if set to False and the data already exists, an error will not be
      raised

      and the data will be appended to the existing blob. If set overwrite=True, then
      the existing

      append blob will be deleted, and a new one created. Defaults to False.'
    types:
    - <xref:bool>
  - name: content_settings
    description: 'ContentSettings object used to set blob properties. Used to set
      content type, encoding,

      language, disposition, md5, and cache control.'
    types:
    - <xref:azure.storage.blob.ContentSettings>
  - name: validate_content
    description: 'If true, calculates an MD5 hash for each chunk of the blob. The
      storage

      service checks the hash of the content that has arrived with the hash

      that was sent. This is primarily valuable for detecting bitflips on

      the wire if using http instead of https, as https (the default), will

      already validate. Note that this MD5 hash is not stored with the

      blob. Also note that if enabled, the memory-efficient upload algorithm

      will not be used, because computing the MD5 hash requires buffering

      entire blocks, and doing so defeats the purpose of the memory-efficient algorithm.'
    types:
    - <xref:bool>
  - name: lease
    description: 'Required if the container has an active lease. Value can be a BlobLeaseClient
      object

      or the lease ID as a string.'
    types:
    - <xref:azure.storage.blob.aio.BlobLeaseClient>
    - <xref:str>
  - name: if_modified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only

      if the resource has been modified since the specified time.'
    types:
    - <xref:datetime.datetime>
  - name: if_unmodified_since
    description: 'A DateTime value. Azure expects the date value passed in to be UTC.

      If timezone is included, any non-UTC datetimes will be converted to UTC.

      If a date is passed in without timezone info, it is assumed to be UTC.

      Specify this header to perform the operation only if

      the resource has not been modified since the specified date/time.'
    types:
    - <xref:datetime.datetime>
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource has changed,

      and act according to the condition specified by the *match_condition* parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: if_tags_match_condition
    description: 'Specify a SQL where clause on blob tags to operate only on blob
      with a matching value.

      eg. `"\"tagname\"=''my tag''"`


      New in version 12.4.0.'
    types:
    - <xref:str>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).
      This method may make multiple calls to the service and

      the timeout will apply to each call individually.

      multiple calls to the Azure service and the timeout will apply to

      each call individually.'
    types:
    - <xref:int>
  - name: premium_page_blob_tier
    description: 'A page blob tier value to set the blob to. The tier correlates to
      the size of the

      blob and number of allowed IOPS. This is only applicable to page blobs on

      premium storage accounts.'
    types:
    - <xref:azure.storage.blob.PremiumPageBlobTier>
  - name: standard_blob_tier
    description: 'A standard blob tier value to set the blob to. For this version
      of the library,

      this is only applicable to block blobs on standard storage accounts.'
    types:
    - <xref:azure.storage.blob.StandardBlobTier>
  - name: maxsize_condition
    description: 'Optional conditional header. The max length in bytes permitted for

      the append blob. If the Append Block operation would cause the blob

      to exceed that limit or if the blob size is already greater than the

      value specified in this header, the request will fail with

      MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).'
    types:
    - <xref:int>
  - name: max_concurrency
    description: 'Maximum number of parallel connections to use when the blob size
      exceeds

      64MB.'
    types:
    - <xref:int>
  - name: cpk
    description: 'Encrypts the data on the service-side with the given key.

      Use of customer-provided keys must be done over HTTPS.

      As the encryption key itself is provided in the request,

      a secure connection must be established to transfer the key.'
    types:
    - <xref:azure.storage.blob.CustomerProvidedEncryptionKey>
  - name: encryption_scope
    description: 'A predefined encryption scope used to encrypt the data on the service.
      An encryption

      scope can be created using the Management API and referenced here by name. If
      a default

      encryption scope has been defined at the container, this value will override
      it if the

      container-level scope is configured to allow overrides. Otherwise an error will
      be raised.


      New in version 12.2.0.'
    types:
    - <xref:str>
  - name: encoding
    description: Defaults to UTF-8.
    types:
    - <xref:str>
  - name: progress_hook
    description: 'An async callback to track the progress of a long running upload.
      The signature is

      function(current: int, total: Optional[int]) where current is the number of
      bytes transfered

      so far, and total is the size of the blob or None if the size is unknown.'
    types:
    - <xref:Callable>[[<xref:int>, <xref:Optional>[<xref:int>]], <xref:Awaitable>[<xref:None>]]
  return:
    description: A BlobClient to interact with the newly uploaded blob.
    types:
    - <xref:azure.storage.blob.aio.BlobClient>
- uid: azure.storage.blob.aio.ContainerClient.walk_blobs
  name: walk_blobs
  summary: 'Returns a generator to list the blobs under the specified container.

    The generator will lazily follow the continuation tokens returned by

    the service. This operation will list blobs in accordance with a hierarchy,

    as delimited by the specified delimiter character.'
  signature: 'walk_blobs(name_starts_with: str | None = None, include: str | List[str]
    | None = None, delimiter: str = ''/'', **kwargs: Any | None) -> AsyncItemPaged[BlobProperties]'
  parameters:
  - name: name_starts_with
    description: 'Filters the results to return only blobs whose names

      begin with the specified prefix.'
    isRequired: true
    types:
    - <xref:str>
  - name: include
    description: 'Specifies one or more additional datasets to include in the response.

      Options include: ''snapshots'', ''metadata'', ''uncommittedblobs'', ''copy'',
      ''deleted'', ''deletedwithversions'',

      ''tags'', ''versions'', ''immutabilitypolicy'', ''legalhold''.'
    isRequired: true
    types:
    - <xref:list>[<xref:str>]
    - <xref:str>
  - name: delimiter
    description: 'When the request includes this parameter, the operation returns
      a BlobPrefix

      element in the response body that acts as a placeholder for all blobs whose

      names begin with the same substring up to the appearance of the delimiter

      character. The delimiter may be a single character or a string.'
    isRequired: true
    types:
    - <xref:str>
  - name: timeout
    description: 'Sets the server-side timeout for the operation in seconds. For more
      details see

      [https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations](https://learn.microsoft.com/rest/api/storageservices/setting-timeouts-for-blob-service-operations).

      This value is not tracked or validated on the client. To configure client-side
      network timesouts

      see [here](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/storage/azure-storage-blob#other-client--per-operation-configuration).'
    types:
    - <xref:int>
  return:
    description: An iterable (auto-paging) response of BlobProperties.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.storage.blob.BlobProperties>]
