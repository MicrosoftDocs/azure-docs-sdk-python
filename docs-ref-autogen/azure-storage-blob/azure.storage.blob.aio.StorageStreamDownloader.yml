### YamlMime:PythonClass
uid: azure.storage.blob.aio.StorageStreamDownloader
name: StorageStreamDownloader
fullName: azure.storage.blob.aio.StorageStreamDownloader
module: azure.storage.blob.aio
inheritances:
- builtins.object
summary: A streaming object to download from Azure Storage.
constructor:
  syntax: StorageStreamDownloader(clients=None, config=None, start_range=None, end_range=None,
    validate_content=None, encryption_options=None, max_concurrency=1, name=None,
    container=None, encoding=None, **kwargs)
variables:
- description: The name of the blob being downloaded.
  name: name
  types:
  - <xref:str>
- description: The name of the container where the blob is.
  name: container
  types:
  - <xref:str>
- description: 'The properties of the blob being downloaded. If only a range of the
    data is being

    downloaded, this will be reflected in the properties.'
  name: properties
  types:
  - <xref:azure.storage.blob.BlobProperties>
- description: 'The size of the total data in the stream. This will be the byte range
    if speficied,

    otherwise the total size of the blob.'
  name: size
  types:
  - <xref:int>
methods:
- uid: azure.storage.blob.aio.StorageStreamDownloader.chunks
  name: chunks
  summary: Iterate over chunks in the download stream.
  signature: chunks() -> AsyncIterator[bytes]
  return:
    types:
    - <xref:AsyncIterator>[<xref:bytes>]
  examples:
  - "Download a blob using chunks().<!--[!code-python[Main](les\\blob_samples_hello_world_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\88\\\\azure-storage-blob-12.9.0\\\\samples\\\\blob_samples_hello_world_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # This returns a StorageStreamDownloader.\n   stream = await source_blob_client.download_blob()\n\
    \   block_list = []\n\n   # Read data in chunks to avoid loading all into memory\
    \ at once\n   async for chunk in stream.chunks():\n       # process your data\
    \ (anything can be done here really. `chunk` is a byte array).\n       block_id\
    \ = str(uuid.uuid4())\n       await destination_blob_client.stage_block(block_id=block_id,\
    \ data=chunk)\n       block_list.append(BlobBlock(block_id=block_id))\n\n   ````\n"
- uid: azure.storage.blob.aio.StorageStreamDownloader.content_as_bytes
  name: content_as_bytes
  summary: 'Download the contents of this file.


    This operation is blocking until all data is downloaded.'
  signature: content_as_bytes(max_concurrency=1)
  parameters:
  - name: max_concurrency
    description: The number of parallel connections with which to download.
    defaultValue: '1'
    types:
    - <xref:int>
  return:
    types:
    - <xref:bytes>
- uid: azure.storage.blob.aio.StorageStreamDownloader.content_as_text
  name: content_as_text
  summary: 'Download the contents of this blob, and decode as text.


    This operation is blocking until all data is downloaded.'
  signature: content_as_text(max_concurrency=1, encoding='UTF-8')
  parameters:
  - name: max_concurrency
    description: The number of parallel connections with which to download.
    defaultValue: '1'
    types:
    - <xref:int>
  - name: encoding
    description: Test encoding to decode the downloaded bytes. Default is UTF-8.
    defaultValue: UTF-8
    types:
    - <xref:str>
  return:
    types:
    - <xref:str>
- uid: azure.storage.blob.aio.StorageStreamDownloader.download_to_stream
  name: download_to_stream
  summary: Download the contents of this blob to a stream.
  signature: download_to_stream(stream, max_concurrency=1)
  parameters:
  - name: stream
    description: 'The stream to download to. This can be an open file-handle,

      or any writable stream. The stream must be seekable if the download

      uses more than one parallel connection.'
    isRequired: true
  - name: max_concurrency
    description: The number of parallel connections with which to download.
    defaultValue: '1'
    types:
    - <xref:int>
  return:
    description: The properties of the downloaded blob.
    types:
    - <xref:Any>
- uid: azure.storage.blob.aio.StorageStreamDownloader.readall
  name: readall
  summary: 'Download the contents of this blob.


    This operation is blocking until all data is downloaded.

    :rtype: bytes or str'
  signature: readall()
- uid: azure.storage.blob.aio.StorageStreamDownloader.readinto
  name: readinto
  summary: Download the contents of this blob to a stream.
  signature: readinto(stream)
  parameters:
  - name: stream
    description: 'The stream to download to. This can be an open file-handle,

      or any writable stream. The stream must be seekable if the download

      uses more than one parallel connection.'
    isRequired: true
  return:
    description: The number of bytes read.
    types:
    - <xref:int>
