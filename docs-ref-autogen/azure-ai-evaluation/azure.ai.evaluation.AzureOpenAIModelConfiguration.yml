### YamlMime:PythonClass
uid: azure.ai.evaluation.AzureOpenAIModelConfiguration
name: AzureOpenAIModelConfiguration
fullName: azure.ai.evaluation.AzureOpenAIModelConfiguration
module: azure.ai.evaluation
summary: Model configuration for Azure OpenAI models
constructor:
  syntax: AzureOpenAIModelConfiguration()
  parameters:
  - name: type
    description: The type of the model configuration. Should be 'azure_openai' for
      AzureOpenAIModelConfiguration
    isRequired: true
    types:
    - <xref:typing.NotRequired>[<xref:typing.Literal>["azure_openai"]]
  - name: azure_deployment
    description: Name of Azure OpenAI deployment to make requests to
    isRequired: true
    types:
    - <xref:str>
  - name: azure_endpoint
    description: Endpoint of Azure OpenAI resource to make requests to
    isRequired: true
    types:
    - <xref:str>
  - name: api_key
    description: API key of Azure OpenAI resource
    isRequired: true
    types:
    - <xref:str>
  - name: api_version
    description: API version to use in request to Azure OpenAI deployment. Optional.
    isRequired: true
    types:
    - <xref:typing.NotRequired>[<xref:str>]
examples:
- "Creating an AzureOpenAIModelConfiguration object.<!--[!code-python[Main](les\\\
  evaluation_samples_common.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
  \\windows\\\\Python\\\\3.11.10\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
  \\14\\\\azure_ai_evaluation-1.3.0\\\\samples\\\\evaluation_samples_common.py\",\
  \ \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
  : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.evaluation._model_configurations\
  \ import AzureOpenAIModelConfiguration\n\n   model_config = AzureOpenAIModelConfiguration(\n\
  \       azure_endpoint=\"https://abcdefghijklmnopqrstuvwxyz.api.cognitive.microsoft.com\"\
  ,\n       api_key=\"my-aoai-api-key\",\n       api_version=\"2024-04-01-preview\"\
  ,\n       azure_deployment=\"my-aoai-deployment-name\",\n   )\n\n\n   ````\n"
methods:
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.clear
  name: clear
  signature: clear() -> None.  Remove all items from D.
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.copy
  name: copy
  signature: copy() -> a shallow copy of D
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.fromkeys
  name: fromkeys
  summary: Create a new dictionary with keys from iterable and values set to value.
  signature: fromkeys(value=None, /)
  positionalOnlyParameters:
  - name: iterable
    isRequired: true
  - name: value
    defaultValue: None
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.get
  name: get
  summary: Return the value for key if key is in the dictionary, else default.
  signature: get(key, default=None, /)
  positionalOnlyParameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.items
  name: items
  signature: items() -> a set-like object providing a view on D's items
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.keys
  name: keys
  signature: keys() -> a set-like object providing a view on D's keys
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.pop
  name: pop
  summary: 'If the key is not found, return the default if given; otherwise,

    raise a KeyError.'
  signature: pop(k, [d]) -> v, remove specified key and return the corresponding value.
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.popitem
  name: popitem
  summary: 'Remove and return a (key, value) pair as a 2-tuple.


    Pairs are returned in LIFO (last-in, first-out) order.

    Raises KeyError if the dict is empty.'
  signature: popitem()
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.setdefault
  name: setdefault
  summary: 'Insert key with a value of default if key is not in the dictionary.


    Return the value for key if key is in the dictionary, else default.'
  signature: setdefault(key, default=None, /)
  positionalOnlyParameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.update
  name: update
  summary: 'If E is present and has a .keys() method, then does:  for k in E: D[k]
    = E[k]

    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] =
    v

    In either case, this is followed by: for k in F:  D[k] = F[k]'
  signature: update([E], **F) -> None.  Update D from dict/iterable E and F.
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.values
  name: values
  signature: values() -> an object providing a view on D's values
attributes:
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.api_key
  name: api_key
  summary: API key of Azure OpenAI resource
  signature: 'api_key: str'
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.azure_endpoint
  name: azure_endpoint
  summary: Endpoint of Azure OpenAI resource to make request to
  signature: 'azure_endpoint: str'
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.api_version
  name: api_version
  signature: 'api_version: str'
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.azure_deployment
  name: azure_deployment
  signature: 'azure_deployment: str'
- uid: azure.ai.evaluation.AzureOpenAIModelConfiguration.type
  name: type
  signature: 'type: Literal[''azure_openai'']'
