### YamlMime:PythonClass
uid: azure.ai.evaluation.simulator.AdversarialSimulator
name: AdversarialSimulator
fullName: azure.ai.evaluation.simulator.AdversarialSimulator
module: azure.ai.evaluation.simulator
summary: '> [!NOTE]

  > This is an experimental class, and may change at any time. Please see [https://aka.ms/azuremlexperimental](https://aka.ms/azuremlexperimental)
  for more information.

  >


  Initializes the adversarial simulator with a project scope.


  Constructor.'
constructor:
  syntax: 'AdversarialSimulator(*, azure_ai_project: AzureAIProject, credential: TokenCredential)'
  parameters:
  - name: azure_ai_project
    description: 'The scope of the Azure AI project. It contains subscription id,
      resource group, and project

      name.'
    isRequired: true
    types:
    - <xref:azure.ai.evaluation.AzureAIProject>
  - name: credential
    description: The credential for connecting to Azure AI project.
    isRequired: true
    types:
    - <xref:azure.core.credentials.TokenCredential>
  keywordOnlyParameters:
  - name: azure_ai_project
    isRequired: true
  - name: credential
    isRequired: true
examples:
- "Run the AdversarialSimulator with an AdversarialConversation scenario to produce\
  \ 2 results with\n2 conversation turns each (4 messages per result).<!--[!code-python[Main](les\\\
  evaluation_samples_simulate.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
  \\windows\\\\Python\\\\3.11.10\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
  \\14\\\\azure_ai_evaluation-1.3.0\\\\samples\\\\evaluation_samples_simulate.py\"\
  , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
  : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   import os\n\
  \   import asyncio\n   from typing import List, Dict, Any, Optional\n   from azure.ai.evaluation.simulator\
  \ import AdversarialScenario, AdversarialSimulator\n   from azure.identity import\
  \ DefaultAzureCredential\n\n   azure_ai_project = {\n       \"subscription_id\"\
  : os.environ.get(\"AZURE_SUBSCRIPTION_ID\"),\n       \"resource_group_name\": os.environ.get(\"\
  AZURE_RESOURCE_GROUP_NAME\"),\n       \"project_name\": os.environ.get(\"AZURE_PROJECT_NAME\"\
  ),\n   }\n\n   async def callback(\n       messages: List[Dict],\n       stream:\
  \ bool = False,\n       session_state: Any = None,\n       context: Optional[Dict[str,\
  \ Any]] = None,\n   ) -> dict:\n       query = messages[\"messages\"][0][\"content\"\
  ]\n\n       formatted_response = {\"content\": query, \"role\": \"assistant\"}\n\
  \       messages[\"messages\"].append(formatted_response)\n       return {\n   \
  \        \"messages\": messages[\"messages\"],\n           \"stream\": stream,\n\
  \           \"session_state\": session_state,\n           \"context\": context,\n\
  \       }\n\n   simulator = AdversarialSimulator(azure_ai_project=azure_ai_project,\
  \ credential=DefaultAzureCredential())\n\n   outputs = asyncio.run(\n       simulator(\n\
  \           scenario=AdversarialScenario.ADVERSARIAL_CONVERSATION,\n           max_conversation_turns=2,\n\
  \           max_simulation_results=2,\n           target=callback,\n           api_call_retry_limit=3,\n\
  \           api_call_retry_sleep_sec=1,\n           api_call_delay_sec=30,\n   \
  \        concurrent_async_task=1,\n           randomization_seed=1,\n       )\n\
  \   )\n\n   ````\n"
methods:
- uid: azure.ai.evaluation.simulator.AdversarialSimulator.call_sync
  name: call_sync
  summary: "Call the adversarial simulator synchronously.\n:keyword scenario: Enum\
    \ value specifying the adversarial scenario used for generating inputs.\n.. admonition::\
    \ Example\n\n   * <xref:azure.ai.evaluation.simulator.adversarial_scenario.AdversarialScenario.ADVERSARIAL_QA>\
    \ \n\n   * <xref:azure.ai.evaluation.simulator.adversarial_scenario.AdversarialScenario.ADVERSARIAL_CONVERSATION>"
  signature: 'call_sync(*, scenario: AdversarialScenario, max_conversation_turns:
    int, max_simulation_results: int, target: Callable, api_call_retry_limit: int,
    api_call_retry_sleep_sec: int, api_call_delay_sec: int, concurrent_async_task:
    int) -> List[Dict[str, Any]]'
  keywordOnlyParameters:
  - name: max_conversation_turns
    description: The maximum number of conversation turns to simulate.
    types:
    - <xref:int>
  - name: max_simulation_results
    description: The maximum number of simulation results to return.
    types:
    - <xref:int>
  - name: target
    description: The target function to simulate adversarial inputs against.
    types:
    - <xref:typing.Callable>
  - name: api_call_retry_limit
    description: The maximum number of retries for each API call within the simulation.
    types:
    - <xref:int>
  - name: api_call_retry_sleep_sec
    description: The sleep duration (in seconds) between retries for API calls.
    types:
    - <xref:int>
  - name: api_call_delay_sec
    description: The delay (in seconds) before making an API call.
    types:
    - <xref:int>
  - name: concurrent_async_task
    description: The number of asynchronous tasks to run concurrently during the simulation.
    types:
    - <xref:int>
  - name: scenario
    isRequired: true
  return:
    description: A list of dictionaries, each representing a simulated conversation.
    types:
    - <xref:typing.List>[<xref:typing.Dict>[<xref:str>, <xref:typing.Any>]]
