### YamlMime:PythonClass
uid: msrest.Serializer
name: Serializer
fullName: msrest.Serializer
module: msrest
inheritances:
- builtins.object
summary: Request object model serializer.
constructor:
  syntax: Serializer(classes=None)
methods:
- uid: msrest.Serializer.body
  name: body
  summary: Serialize data intended for a request body.
  signature: body(data, data_type, **kwargs)
  parameters:
  - name: data
    description: The data to be serialized.
    isRequired: true
  - name: data_type
    description: The type to be serialized from.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:dict>
  exceptions:
  - type: SerializationError if serialization fails.
  - type: ValueError if data is None
- uid: msrest.Serializer.header
  name: header
  summary: Serialize data intended for a request header.
  signature: header(name, data, data_type, **kwargs)
  parameters:
  - name: data
    description: The data to be serialized.
    isRequired: true
  - name: data_type
    description: The type to be serialized from.
    isRequired: true
    types:
    - <xref:str>
  - name: data_type
    isRequired: true
  return:
    types:
    - <xref:str>
  exceptions:
  - type: TypeError if serialization fails.
  - type: ValueError if data is None
- uid: msrest.Serializer.query
  name: query
  summary: Serialize data intended for a URL query.
  signature: query(name, data, data_type, **kwargs)
  parameters:
  - name: data
    description: The data to be serialized.
    isRequired: true
  - name: data_type
    description: The type to be serialized from.
    isRequired: true
    types:
    - <xref:str>
  - name: data_type
    isRequired: true
  return:
    types:
    - <xref:str>
  exceptions:
  - type: TypeError if serialization fails.
  - type: ValueError if data is None
- uid: msrest.Serializer.serialize_base64
  name: serialize_base64
  summary: Serialize str into base-64 string.
  signature: serialize_base64(attr, **kwargs)
  parameters:
  - name: attr
    description: Object to be serialized.
    isRequired: true
  return:
    types:
    - <xref:str>
- uid: msrest.Serializer.serialize_basic
  name: serialize_basic
  summary: 'Serialize basic builting data type.

    Serializes objects to str, int, float or bool.


    Possible kwargs:

    - basic_types_serializers dict[str, callable] : If set, use the callable as serializer

    - is_xml bool : If set, use xml_basic_types_serializers'
  signature: serialize_basic(data, data_type, **kwargs)
  parameters:
  - name: data
    description: Object to be serialized.
    isRequired: true
  - name: data_type
    description: Type of object in the iterable.
    isRequired: true
    types:
    - <xref:str>
  - name: data_type
    isRequired: true
- uid: msrest.Serializer.serialize_bytearray
  name: serialize_bytearray
  summary: Serialize bytearray into base-64 string.
  signature: serialize_bytearray(attr, **kwargs)
  parameters:
  - name: attr
    description: Object to be serialized.
    isRequired: true
  return:
    types:
    - <xref:str>
- uid: msrest.Serializer.serialize_data
  name: serialize_data
  summary: Serialize generic data according to supplied data type.
  signature: serialize_data(data, data_type, **kwargs)
  parameters:
  - name: data
    description: The data to be serialized.
    isRequired: true
  - name: data_type
    description: The type to be serialized from.
    isRequired: true
    types:
    - <xref:str>
  - name: required
    description: 'Whether it''s essential that the data not be

      empty or None'
    isRequired: true
    types:
    - <xref:bool>
  exceptions:
  - type: AttributeError if required data is None.
  - type: ValueError if data is None
  - type: SerializationError if serialization fails.
- uid: msrest.Serializer.serialize_date
  name: serialize_date
  summary: Serialize Date object into ISO-8601 formatted string.
  signature: serialize_date(attr, **kwargs)
  parameters:
  - name: attr
    description: Object to be serialized.
    isRequired: true
    types:
    - <xref:Date>
  return:
    types:
    - <xref:str>
- uid: msrest.Serializer.serialize_decimal
  name: serialize_decimal
  summary: Serialize Decimal object to float.
  signature: serialize_decimal(attr, **kwargs)
  parameters:
  - name: attr
    description: Object to be serialized.
    isRequired: true
  return:
    types:
    - <xref:float>
- uid: msrest.Serializer.serialize_dict
  name: serialize_dict
  summary: Serialize a dictionary of objects.
  signature: serialize_dict(attr, dict_type, **kwargs)
  parameters:
  - name: attr
    description: Object to be serialized.
    isRequired: true
    types:
    - <xref:dict>
  - name: dict_type
    description: Type of object in the dictionary.
    isRequired: true
    types:
    - <xref:str>
  - name: required
    description: 'Whether the objects in the dictionary must

      not be None or empty.'
    isRequired: true
    types:
    - <xref:bool>
  return:
    types:
    - <xref:dict>
- uid: msrest.Serializer.serialize_duration
  name: serialize_duration
  summary: Serialize TimeDelta object into ISO-8601 formatted string.
  signature: serialize_duration(attr, **kwargs)
  parameters:
  - name: attr
    description: Object to be serialized.
    isRequired: true
    types:
    - <xref:TimeDelta>
  return:
    types:
    - <xref:str>
- uid: msrest.Serializer.serialize_enum
  name: serialize_enum
  signature: serialize_enum(attr, enum_obj=None)
  parameters:
  - name: attr
    isRequired: true
  - name: enum_obj
    defaultValue: None
- uid: msrest.Serializer.serialize_iso
  name: serialize_iso
  summary: Serialize Datetime object into ISO-8601 formatted string.
  signature: serialize_iso(attr, **kwargs)
  parameters:
  - name: attr
    description: Object to be serialized.
    isRequired: true
    types:
    - <xref:Datetime>
  return:
    types:
    - <xref:str>
  exceptions:
  - type: SerializationError if format invalid.
- uid: msrest.Serializer.serialize_iter
  name: serialize_iter
  summary: "Serialize iterable.\n\nSupported kwargs:\n- serialization_ctxt dict :\
    \ The current entry of _attribute_map, or same format.\n\n   serialization_ctxt['type']\
    \ should be same as data_type.\n\n* is_xml bool : If set, serialize as XML"
  signature: serialize_iter(data, iter_type, div=None, **kwargs)
  parameters:
  - name: attr
    description: Object to be serialized.
    isRequired: true
    types:
    - <xref:list>
  - name: iter_type
    description: Type of object in the iterable.
    isRequired: true
    types:
    - <xref:str>
  - name: required
    description: 'Whether the objects in the iterable must

      not be None or empty.'
    isRequired: true
    defaultValue: None
    types:
    - <xref:bool>
  - name: div
    description: 'If set, this str will be used to combine the elements

      in the iterable into a combined string. Default is ''None''.'
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:list>, <xref:str>
- uid: msrest.Serializer.serialize_long
  name: serialize_long
  summary: Serialize long (Py2) or int (Py3).
  signature: serialize_long(attr, **kwargs)
  parameters:
  - name: attr
    description: Object to be serialized.
    isRequired: true
  return:
    types:
    - <xref:int/long>
- uid: msrest.Serializer.serialize_object
  name: serialize_object
  summary: 'Serialize a generic object.

    This will be handled as a dictionary. If object passed in is not

    a basic type (str, int, float, dict, list) it will simply be

    cast to str.'
  signature: serialize_object(attr, **kwargs)
  parameters:
  - name: attr
    description: Object to be serialized.
    isRequired: true
    types:
    - <xref:dict>
  return:
    types:
    - <xref:dict>
    - <xref:str>
- uid: msrest.Serializer.serialize_rfc
  name: serialize_rfc
  summary: Serialize Datetime object into RFC-1123 formatted string.
  signature: serialize_rfc(attr, **kwargs)
  parameters:
  - name: attr
    description: Object to be serialized.
    isRequired: true
    types:
    - <xref:Datetime>
  return:
    types:
    - <xref:str>
  exceptions:
  - type: TypeError if format invalid.
- uid: msrest.Serializer.serialize_time
  name: serialize_time
  summary: Serialize Time object into ISO-8601 formatted string.
  signature: serialize_time(attr, **kwargs)
  parameters:
  - name: attr
    description: Object to be serialized.
    isRequired: true
    types:
    - <xref:datetime.time>
  return:
    types:
    - <xref:str>
- uid: msrest.Serializer.serialize_unicode
  name: serialize_unicode
  summary: 'Special handling for serializing unicode strings in Py2.

    Encode to UTF-8 if unicode, otherwise handle as a str.'
  signature: serialize_unicode(data)
  parameters:
  - name: data
    description: Object to be serialized.
    isRequired: true
  - name: data
    isRequired: true
  return:
    types:
    - <xref:str>
- uid: msrest.Serializer.serialize_unix
  name: serialize_unix
  summary: 'Serialize Datetime object into IntTime format.

    This is represented as seconds.'
  signature: serialize_unix(attr, **kwargs)
  parameters:
  - name: attr
    description: Object to be serialized.
    isRequired: true
    types:
    - <xref:Datetime>
  return:
    types:
    - <xref:int>
  exceptions:
  - type: SerializationError if format invalid
- uid: msrest.Serializer.url
  name: url
  summary: Serialize data intended for a URL path.
  signature: url(name, data, data_type, **kwargs)
  parameters:
  - name: data
    description: The data to be serialized.
    isRequired: true
  - name: data_type
    description: The type to be serialized from.
    isRequired: true
    types:
    - <xref:str>
  - name: data_type
    isRequired: true
  return:
    types:
    - <xref:str>
  exceptions:
  - type: TypeError if serialization fails.
  - type: ValueError if data is None
- uid: msrest.Serializer.validate
  name: validate
  summary: Validate that a piece of data meets certain conditions
  signature: validate(data, name, **kwargs)
  parameters:
  - name: cls
    isRequired: true
  - name: data
    isRequired: true
  - name: name
    isRequired: true
attributes:
- uid: msrest.Serializer.basic_types
  name: basic_types
  signature: 'basic_types = {<class ''str''>: ''str'', <class ''int''>: ''int'', <class
    ''bool''>: ''bool'', <class ''float''>: ''float''}'
- uid: msrest.Serializer.days
  name: days
  signature: 'days = {0: ''Mon'', 1: ''Tue'', 2: ''Wed'', 3: ''Thu'', 4: ''Fri'',
    5: ''Sat'', 6: ''Sun''}'
- uid: msrest.Serializer.months
  name: months
  signature: 'months = {1: ''Jan'', 2: ''Feb'', 3: ''Mar'', 4: ''Apr'', 5: ''May'',
    6: ''Jun'', 7: ''Jul'', 8: ''Aug'', 9: ''Sep'', 10: ''Oct'', 11: ''Nov'', 12:
    ''Dec''}'
- uid: msrest.Serializer.validation
  name: validation
  signature: 'validation = {''max_items'': <function Serializer.<lambda>>, ''max_length'':
    <function Serializer.<lambda>>, ''maximum'': <function Serializer.<lambda>>, ''maximum_ex'':
    <function Serializer.<lambda>>, ''min_items'': <function Serializer.<lambda>>,
    ''min_length'': <function Serializer.<lambda>>, ''minimum'': <function Serializer.<lambda>>,
    ''minimum_ex'': <function Serializer.<lambda>>, ''multiple'': <function Serializer.<lambda>>,
    ''pattern'': <function Serializer.<lambda>>, ''unique'': <function Serializer.<lambda>>}'
