### YamlMime:PythonClass
uid: msrest.polling.LROPoller
name: LROPoller
fullName: msrest.polling.LROPoller
module: msrest.polling
inheritances:
- builtins.object
summary: Poller for long running operations.
constructor:
  syntax: 'LROPoller(client: Any, initial_response: Union[ClientRawResponse, requests.Response],
    deserialization_callback: Union[Model, Callable[[requests.Response], Model]],
    polling_method: PollingMethod)'
  parameters:
  - name: client
    description: A msrest service client. Can be a SDK client and it will be casted
      to a ServiceClient.
    isRequired: true
    types:
    - <xref:msrest.service_client.ServiceClient>
  - name: initial_response
    description: The initial call response
    isRequired: true
    types:
    - <xref:requests.Response>
    - <xref:msrest.pipeline.ClientRawResponse>
  - name: deserialization_callback
    description: A callback that takes a Response and return a deserialized object.
      If a subclass of Model is given, this passes "deserialize" as callback.
    isRequired: true
    types:
    - <xref:callable>
    - <xref:msrest.serialization.Model>
  - name: polling_method
    description: The polling strategy to adopt
    isRequired: true
    types:
    - <xref:msrest.polling.PollingMethod>
methods:
- uid: msrest.polling.LROPoller.add_done_callback
  name: add_done_callback
  summary: 'Add callback function to be run once the long running operation

    has completed - regardless of the status of the operation.'
  signature: 'add_done_callback(func: Callable) -> None'
  parameters:
  - name: func
    description: 'Callback function that takes at least one

      argument, a completed LongRunningOperation.'
    isRequired: true
    types:
    - <xref:callable>
- uid: msrest.polling.LROPoller.done
  name: done
  summary: Check status of the long running operation.
  signature: done() -> bool
  return:
    description: '''True'' if the process has completed, else ''False''.'
- uid: msrest.polling.LROPoller.remove_done_callback
  name: remove_done_callback
  summary: Remove a callback from the long running operation.
  signature: 'remove_done_callback(func: Callable) -> None'
  parameters:
  - name: func
    description: The function to be removed from the callbacks.
    isRequired: true
    types:
    - <xref:callable>
  exceptions:
  - type: 'ValueError if the long running operation has already

      completed.'
- uid: msrest.polling.LROPoller.result
  name: result
  summary: 'Return the result of the long running operation, or

    the result available after the specified timeout.'
  signature: 'result(timeout: Optional[int] = None) -> msrest.serialization.Model'
  parameters:
  - name: timeout
    defaultValue: None
  return:
    description: 'The deserialized resource of the long running operation,

      if one is available.'
  exceptions:
  - description: Server problem with the query.
    type: CloudError
- uid: msrest.polling.LROPoller.status
  name: status
  summary: Returns the current status string.
  signature: status() -> str
  return:
    description: The current status string
    types:
    - <xref:str>
- uid: msrest.polling.LROPoller.wait
  name: wait
  summary: 'Wait on the long running operation for a specified length

    of time. You can check if this call as ended with timeout with the

    "done()" method.'
  signature: 'wait(timeout: Optional[int] = None) -> None'
  parameters:
  - name: timeout
    description: 'Period of time to wait for the long running

      operation to complete (in seconds).'
    defaultValue: None
    types:
    - <xref:int>
  exceptions:
  - description: Server problem with the query.
    type: CloudError
