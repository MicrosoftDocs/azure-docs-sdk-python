### YamlMime:UniversalReference
api_name: []
items:
- children:
  - msrest.pipeline.AsyncPipeline.run
  class: msrest.pipeline.AsyncPipeline
  fullName: msrest.pipeline.AsyncPipeline
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msrest.pipeline.async_abc.AbstractAsyncContextManager
  - inheritance:
    - type: builtins.object
    type: typing.Generic
  langs:
  - python
  module: msrest.pipeline
  name: AsyncPipeline
  summary: 'A pipeline implementation.


    This is implemented as a context manager, that will activate the context

    of the HTTP sender.'
  syntax:
    content: 'AsyncPipeline(policies: typing.List[typing.Union[msrest.pipeline.async_abc.AsyncHTTPPolicy,
      msrest.pipeline.SansIOHTTPPolicy]] = None, sender: typing.Union[msrest.pipeline.async_abc.AsyncHTTPSender[~HTTPRequestType,
      ~AsyncHTTPResponseType], NoneType] = None) -> None'
  type: class
  uid: msrest.pipeline.AsyncPipeline
- class: msrest.pipeline.AsyncPipeline
  fullName: msrest.pipeline.AsyncPipeline.run
  langs:
  - python
  module: msrest.pipeline
  name: 'run(request: msrest.pipeline.Request, **kwargs: typing.Any) -> msrest.pipeline.Response[HTTPRequestType,
    AsyncHTTPResponseType]'
  namewithoutparameters: run
  syntax:
    content: 'run(request: msrest.pipeline.Request, **kwargs: typing.Any) -> msrest.pipeline.Response[HTTPRequestType,
      AsyncHTTPResponseType]'
  type: method
  uid: msrest.pipeline.AsyncPipeline.run
references:
- fullName: msrest.pipeline.AsyncPipeline.run
  isExternal: false
  name: 'run(request: msrest.pipeline.Request, **kwargs: typing.Any) -> msrest.pipeline.Response[HTTPRequestType,
    AsyncHTTPResponseType]'
  parent: msrest.pipeline.AsyncPipeline
  uid: msrest.pipeline.AsyncPipeline.run
