### YamlMime:PythonClass
uid: msrest.pipeline.SansIOHTTPPolicy
name: SansIOHTTPPolicy
fullName: msrest.pipeline.SansIOHTTPPolicy
module: msrest.pipeline
inheritances:
- typing.Generic
summary: 'Represents a sans I/O policy.


  This policy can act before the I/O, and after the I/O.

  Use this policy if the actual I/O in the middle is an implementation

  detail.


  Context is not available, since it''s implementation dependent.

  if a policy needs a context of the Sender, it can''t be universal.


  Example: setting a UserAgent does not need to be tight to

  sync or async implementation or specific HTTP lib'
constructor:
  syntax: SansIOHTTPPolicy(*args, **kwds)
methods:
- uid: msrest.pipeline.SansIOHTTPPolicy.on_exception
  name: on_exception
  summary: "Is executed if an exception comes back fron the following\npolicy.\n\n\
    Return True if the exception has been handled and should not\nbe forwarded to\
    \ the caller.\n\nThis method is executed inside the exception handler.\nTo get\
    \ the exception, raise and catch it:\n\n   try:\n      raise\n\n   except MyError:\n\
    \      do_something()\n\nor use\n\n   exc_type, exc_value, exc_traceback = sys.exc_info()"
  signature: on_exception(request, **kwargs)
  parameters:
  - name: request
    isRequired: true
- uid: msrest.pipeline.SansIOHTTPPolicy.on_request
  name: on_request
  summary: Is executed before sending the request to next policy.
  signature: on_request(request, **kwargs)
  parameters:
  - name: request
    isRequired: true
- uid: msrest.pipeline.SansIOHTTPPolicy.on_response
  name: on_response
  summary: Is executed after the request comes back from the policy.
  signature: on_response(request, response, **kwargs)
  parameters:
  - name: request
    isRequired: true
  - name: response
    isRequired: true
