### YamlMime:PythonClass
uid: azure.search.documents.indexes.models.SynonymMap
name: SynonymMap
fullName: azure.search.documents.indexes.models.SynonymMap
module: azure.search.documents.indexes.models
inheritances:
- azure.search.documents.indexes._generated._serialization.Model
summary: 'Represents a synonym map definition.


  Variables are only populated by the server, and will be ignored when sending a request.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: SynonymMap(**kwargs)
variables:
- description: Required. The name of the synonym map.
  name: name
  types:
  - <xref:str>
- description: 'Required. The format of the synonym map. Only the ''solr'' format
    is currently

    supported. Default value: "solr".'
  name: format
  types:
  - <xref:str>
- description: 'Required. A series of synonym rules in the specified synonym map format.
    The

    rules must be separated by newlines.'
  name: synonyms
  types:
  - <xref:list>[<xref:str>]
- description: 'A description of an encryption key that you create in Azure Key Vault.

    This key is used to provide an additional level of encryption-at-rest for your
    data when you

    want full assurance that no one, not even Microsoft, can decrypt your data in
    Azure Cognitive

    Search. Once you have encrypted your data, it will always remain encrypted. Azure
    Cognitive

    Search will ignore attempts to set this property to null. You can change this
    property as

    needed if you want to rotate your encryption key; Your data will be unaffected.
    Encryption with

    customer-managed keys is not available for free search services, and is only available
    for paid

    services created on or after January 1, 2019.'
  name: encryption_key
  types:
  - <xref:azure.search.documents.indexes.models.SearchResourceEncryptionKey>
- description: The ETag of the synonym map.
  name: e_tag
  types:
  - <xref:str>
methods:
- uid: azure.search.documents.indexes.models.SynonymMap.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.search.documents.indexes.models.SynonymMap.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.search.documents.indexes.models.SynonymMap.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.search.documents.indexes.models.SynonymMap.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.search.documents.indexes.models.SynonymMap.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.search.documents.indexes.models.SynonymMap.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to server from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
attributes:
- uid: azure.search.documents.indexes.models.SynonymMap.format
  name: format
  signature: format = 'solr'
