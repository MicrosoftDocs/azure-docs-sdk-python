### YamlMime:PythonClass
uid: azure.search.documents.indexes.models.SearchField
name: SearchField
fullName: azure.search.documents.indexes.models.SearchField
module: azure.search.documents.indexes.models
inheritances:
- azure.search.documents.indexes._generated._serialization.Model
summary: 'Represents a field in an index definition, which describes the name, data
  type, and search behavior of a field.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: SearchField(**kwargs)
variables:
- description: 'The name of the field, which must be unique within the fields collection
    of the

    index or parent field. Required.'
  name: name
  types:
  - <xref:str>
- description: 'The data type of the field. Required. Known values are: "Edm.String",
    "Edm.Int32",

    "Edm.Int64", "Edm.Double", "Edm.Boolean", "Edm.DateTimeOffset", "Edm.GeographyPoint",

    "Edm.ComplexType", and "Edm.Single".'
  name: type
  types:
  - <xref:str>
  - <xref:search_service_client.models.SearchFieldDataType>
- description: 'A value indicating whether the field uniquely identifies documents
    in the index.

    Exactly one top-level field in each index must be chosen as the key field and
    it must be of

    type Edm.String. Key fields can be used to look up documents directly and update
    or delete

    specific documents. Default is false for simple fields and null for complex fields.'
  name: key
  types:
  - <xref:bool>
- description: 'A value indicating whether the field is full-text searchable. This
    means it

    will undergo analysis such as word-breaking during indexing. If you set a searchable
    field to a

    value like "sunny day", internally it will be split into the individual tokens
    "sunny" and

    "day". This enables full-text searches for these terms. Fields of type Edm.String
    or

    Collection(Edm.String) are searchable by default. This property must be false
    for simple fields

    of other non-string data types, and it must be null for complex fields. Note:
    searchable fields

    consume extra space in your index since Azure Cognitive Search will store an additional

    tokenized version of the field value for full-text searches. If you want to save
    space in your

    index and you don''t need a field to be included in searches, set searchable to
    false.'
  name: searchable
  types:
  - <xref:bool>
- description: 'A value indicating whether to enable the field to be referenced in
    $filter

    queries. filterable differs from searchable in how strings are handled. Fields
    of type

    Edm.String or Collection(Edm.String) that are filterable do not undergo word-breaking,
    so

    comparisons are for exact matches only. For example, if you set such a field f
    to "sunny day",

    $filter=f eq ''sunny'' will find no matches, but $filter=f eq ''sunny day'' will.
    This property

    must be null for complex fields. Default is true for simple fields and null for
    complex fields.'
  name: filterable
  types:
  - <xref:bool>
- description: 'A value indicating whether to enable the field to be referenced in
    $orderby

    expressions. By default Azure Cognitive Search sorts results by score, but in
    many experiences

    users will want to sort by fields in the documents. A simple field can be sortable
    only if it

    is single-valued (it has a single value in the scope of the parent document).
    Simple collection

    fields cannot be sortable, since they are multi-valued. Simple sub-fields of complex

    collections are also multi-valued, and therefore cannot be sortable. This is true
    whether it''s

    an immediate parent field, or an ancestor field, that''s the complex collection.
    Complex fields

    cannot be sortable and the sortable property must be null for such fields. The
    default for

    sortable is true for single-valued simple fields, false for multi-valued simple
    fields, and

    null for complex fields.'
  name: sortable
  types:
  - <xref:bool>
- description: 'A value indicating whether to enable the field to be referenced in
    facet

    queries. Typically used in a presentation of search results that includes hit
    count by category

    (for example, search for digital cameras and see hits by brand, by megapixels,
    by price, and so

    on). This property must be null for complex fields. Fields of type Edm.GeographyPoint
    or

    Collection(Edm.GeographyPoint) cannot be facetable. Default is true for all other
    simple

    fields.'
  name: facetable
  types:
  - <xref:bool>
- description: 'The name of the analyzer to use for the field. This option can be
    used only

    with searchable fields and it can''t be set together with either searchAnalyzer
    or

    indexAnalyzer. Once the analyzer is chosen, it cannot be changed for the field.
    Must be null

    for complex fields. Known values are: "ar.microsoft", "ar.lucene", "hy.lucene",
    "bn.microsoft",

    "eu.lucene", "bg.microsoft", "bg.lucene", "ca.microsoft", "ca.lucene", "zh-Hans.microsoft",

    "zh-Hans.lucene", "zh-Hant.microsoft", "zh-Hant.lucene", "hr.microsoft", "cs.microsoft",

    "cs.lucene", "da.microsoft", "da.lucene", "nl.microsoft", "nl.lucene", "en.microsoft",

    "en.lucene", "et.microsoft", "fi.microsoft", "fi.lucene", "fr.microsoft", "fr.lucene",

    "gl.lucene", "de.microsoft", "de.lucene", "el.microsoft", "el.lucene", "gu.microsoft",

    "he.microsoft", "hi.microsoft", "hi.lucene", "hu.microsoft", "hu.lucene", "is.microsoft",

    "id.microsoft", "id.lucene", "ga.lucene", "it.microsoft", "it.lucene", "ja.microsoft",

    "ja.lucene", "kn.microsoft", "ko.microsoft", "ko.lucene", "lv.microsoft", "lv.lucene",

    "lt.microsoft", "ml.microsoft", "ms.microsoft", "mr.microsoft", "nb.microsoft",
    "no.lucene",

    "fa.lucene", "pl.microsoft", "pl.lucene", "pt-BR.microsoft", "pt-BR.lucene", "pt-PT.microsoft",

    "pt-PT.lucene", "pa.microsoft", "ro.microsoft", "ro.lucene", "ru.microsoft", "ru.lucene",

    "sr-cyrillic.microsoft", "sr-latin.microsoft", "sk.microsoft", "sl.microsoft",
    "es.microsoft",

    "es.lucene", "sv.microsoft", "sv.lucene", "ta.microsoft", "te.microsoft", "th.microsoft",

    "th.lucene", "tr.microsoft", "tr.lucene", "uk.microsoft", "ur.microsoft", "vi.microsoft",

    "standard.lucene", "standardasciifolding.lucene", "keyword", "pattern", "simple",
    "stop", and

    "whitespace".'
  name: analyzer_name
  types:
  - <xref:str>
  - <xref:search_service_client.models.LexicalAnalyzerName>
- description: 'The name of the analyzer used at search time for the field. This option

    can be used only with searchable fields. It must be set together with indexAnalyzer
    and it

    cannot be set together with the analyzer option. This property cannot be set to
    the name of a

    language analyzer; use the analyzer property instead if you need a language analyzer.
    This

    analyzer can be updated on an existing field. Must be null for complex fields.
    Known values

    are: "ar.microsoft", "ar.lucene", "hy.lucene", "bn.microsoft", "eu.lucene", "bg.microsoft",

    "bg.lucene", "ca.microsoft", "ca.lucene", "zh-Hans.microsoft", "zh-Hans.lucene",

    "zh-Hant.microsoft", "zh-Hant.lucene", "hr.microsoft", "cs.microsoft", "cs.lucene",

    "da.microsoft", "da.lucene", "nl.microsoft", "nl.lucene", "en.microsoft", "en.lucene",

    "et.microsoft", "fi.microsoft", "fi.lucene", "fr.microsoft", "fr.lucene", "gl.lucene",

    "de.microsoft", "de.lucene", "el.microsoft", "el.lucene", "gu.microsoft", "he.microsoft",

    "hi.microsoft", "hi.lucene", "hu.microsoft", "hu.lucene", "is.microsoft", "id.microsoft",

    "id.lucene", "ga.lucene", "it.microsoft", "it.lucene", "ja.microsoft", "ja.lucene",

    "kn.microsoft", "ko.microsoft", "ko.lucene", "lv.microsoft", "lv.lucene", "lt.microsoft",

    "ml.microsoft", "ms.microsoft", "mr.microsoft", "nb.microsoft", "no.lucene", "fa.lucene",

    "pl.microsoft", "pl.lucene", "pt-BR.microsoft", "pt-BR.lucene", "pt-PT.microsoft",

    "pt-PT.lucene", "pa.microsoft", "ro.microsoft", "ro.lucene", "ru.microsoft", "ru.lucene",

    "sr-cyrillic.microsoft", "sr-latin.microsoft", "sk.microsoft", "sl.microsoft",
    "es.microsoft",

    "es.lucene", "sv.microsoft", "sv.lucene", "ta.microsoft", "te.microsoft", "th.microsoft",

    "th.lucene", "tr.microsoft", "tr.lucene", "uk.microsoft", "ur.microsoft", "vi.microsoft",

    "standard.lucene", "standardasciifolding.lucene", "keyword", "pattern", "simple",
    "stop", and

    "whitespace".'
  name: search_analyzer_name
  types:
  - <xref:str>
  - <xref:search_service_client.models.LexicalAnalyzerName>
- description: 'The name of the analyzer used at indexing time for the field. This
    option

    can be used only with searchable fields. It must be set together with searchAnalyzer
    and it

    cannot be set together with the analyzer option.  This property cannot be set
    to the name of a

    language analyzer; use the analyzer property instead if you need a language analyzer.
    Once the

    analyzer is chosen, it cannot be changed for the field. Must be null for complex
    fields. Known

    values are: "ar.microsoft", "ar.lucene", "hy.lucene", "bn.microsoft", "eu.lucene",

    "bg.microsoft", "bg.lucene", "ca.microsoft", "ca.lucene", "zh-Hans.microsoft",

    "zh-Hans.lucene", "zh-Hant.microsoft", "zh-Hant.lucene", "hr.microsoft", "cs.microsoft",

    "cs.lucene", "da.microsoft", "da.lucene", "nl.microsoft", "nl.lucene", "en.microsoft",

    "en.lucene", "et.microsoft", "fi.microsoft", "fi.lucene", "fr.microsoft", "fr.lucene",

    "gl.lucene", "de.microsoft", "de.lucene", "el.microsoft", "el.lucene", "gu.microsoft",

    "he.microsoft", "hi.microsoft", "hi.lucene", "hu.microsoft", "hu.lucene", "is.microsoft",

    "id.microsoft", "id.lucene", "ga.lucene", "it.microsoft", "it.lucene", "ja.microsoft",

    "ja.lucene", "kn.microsoft", "ko.microsoft", "ko.lucene", "lv.microsoft", "lv.lucene",

    "lt.microsoft", "ml.microsoft", "ms.microsoft", "mr.microsoft", "nb.microsoft",
    "no.lucene",

    "fa.lucene", "pl.microsoft", "pl.lucene", "pt-BR.microsoft", "pt-BR.lucene", "pt-PT.microsoft",

    "pt-PT.lucene", "pa.microsoft", "ro.microsoft", "ro.lucene", "ru.microsoft", "ru.lucene",

    "sr-cyrillic.microsoft", "sr-latin.microsoft", "sk.microsoft", "sl.microsoft",
    "es.microsoft",

    "es.lucene", "sv.microsoft", "sv.lucene", "ta.microsoft", "te.microsoft", "th.microsoft",

    "th.lucene", "tr.microsoft", "tr.lucene", "uk.microsoft", "ur.microsoft", "vi.microsoft",

    "standard.lucene", "standardasciifolding.lucene", "keyword", "pattern", "simple",
    "stop", and

    "whitespace".'
  name: index_analyzer_name
  types:
  - <xref:str>
  - <xref:search_service_client.models.LexicalAnalyzerName>
- description: The dimensionality of the vector field.
  name: vector_search_dimensions
  types:
  - <xref:int>
- description: 'The name of the vector search profile that specifies the algorithm

    to use when searching the vector field.'
  name: vector_search_profile_name
  types:
  - <xref:str>
- description: 'A list of the names of synonym maps to associate with this field.
    This

    option can be used only with searchable fields. Currently only one synonym map
    per field is

    supported. Assigning a synonym map to a field ensures that query terms targeting
    that field are

    expanded at query-time using the rules in the synonym map. This attribute can
    be changed on

    existing fields. Must be null or an empty collection for complex fields.'
  name: synonym_map_names
  types:
  - <xref:list>[<xref:str>]
- description: 'A list of sub-fields if this is a field of type Edm.ComplexType or

    Collection(Edm.ComplexType). Must be null or empty for simple fields.'
  name: fields
  types:
  - <xref:list>[<xref:search_service_client.models.SearchField>]
methods:
- uid: azure.search.documents.indexes.models.SearchField.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.search.documents.indexes.models.SearchField.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.search.documents.indexes.models.SearchField.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.search.documents.indexes.models.SearchField.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.search.documents.indexes.models.SearchField.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.search.documents.indexes.models.SearchField.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to server from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
