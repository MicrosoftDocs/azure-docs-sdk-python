### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.search.documents.indexes.models.SearchIndex
  fullName: azure.search.documents.indexes.models.SearchIndex
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msrest.serialization.Model
  langs:
  - python
  module: azure.search.documents.indexes.models
  name: SearchIndex
  summary: 'Represents a search index definition, which describes the fields and search
    behavior of an index.


    All required parameters must be populated in order to send to Azure.'
  syntax:
    content: 'SearchIndex(*, name: str, fields: typing.List[_ForwardRef(''SearchField'')],
      scoring_profiles: typing.Union[typing.List[_ForwardRef(''ScoringProfile'')],
      NoneType] = None, default_scoring_profile: typing.Union[str, NoneType] = None,
      cors_options: typing.Union[_ForwardRef(''CorsOptions''), NoneType] = None, suggesters:
      typing.Union[typing.List[_ForwardRef(''Suggester'')], NoneType] = None, analyzers:
      typing.Union[typing.List[_ForwardRef(''LexicalAnalyzer'')], NoneType] = None,
      tokenizers: typing.Union[typing.List[_ForwardRef(''LexicalTokenizer'')], NoneType]
      = None, token_filters: typing.Union[typing.List[_ForwardRef(''TokenFilter'')],
      NoneType] = None, char_filters: typing.Union[typing.List[_ForwardRef(''CharFilter'')],
      NoneType] = None, encryption_key: typing.Union[_ForwardRef(''SearchResourceEncryptionKey''),
      NoneType] = None, similarity: typing.Union[_ForwardRef(''Similarity''), NoneType]
      = None, e_tag: typing.Union[str, NoneType] = None, **kwargs)'
    parameters:
    - description: Required. The name of the index.
      id: name
      type:
      - str
    - description: Required. The fields of the index.
      id: fields
      type:
      - list[azure.search.documents.indexes.models.SearchField]
    - description: The scoring profiles for the index.
      id: scoring_profiles
      type:
      - list[azure.search.documents.indexes.models.ScoringProfile]
    - description: 'The name of the scoring profile to use if none is specified in

        the query. If this property is not set and no scoring profile is specified
        in the query, then

        default scoring (tf-idf) will be used.'
      id: default_scoring_profile
      type:
      - str
    - description: Options to control Cross-Origin Resource Sharing (CORS) for the
        index.
      id: cors_options
      type:
      - azure.search.documents.indexes.models.CorsOptions
    - description: The suggesters for the index.
      id: suggesters
      type:
      - list[azure.search.documents.indexes.models.Suggester]
    - description: The analyzers for the index.
      id: analyzers
      type:
      - list[azure.search.documents.indexes.models.LexicalAnalyzer]
    - description: The tokenizers for the index.
      id: tokenizers
      type:
      - list[azure.search.documents.indexes.models.LexicalTokenizer]
    - description: The token filters for the index.
      id: token_filters
      type:
      - list[azure.search.documents.indexes.models.TokenFilter]
    - description: The character filters for the index.
      id: char_filters
      type:
      - list[azure.search.documents.indexes.models.CharFilter]
    - description: 'A description of an encryption key that you create in Azure Key
        Vault.

        This key is used to provide an additional level of encryption-at-rest for
        your data when you

        want full assurance that no one, not even Microsoft, can decrypt your data
        in Azure Cognitive

        Search. Once you have encrypted your data, it will always remain encrypted.
        Azure Cognitive

        Search will ignore attempts to set this property to null. You can change this
        property as

        needed if you want to rotate your encryption key; Your data will be unaffected.
        Encryption with

        customer-managed keys is not available for free search services, and is only
        available for paid

        services created on or after January 1, 2019.'
      id: encryption_key
      type:
      - azure.search.documents.indexes.models.SearchResourceEncryptionKey
    - description: 'The type of similarity algorithm to be used when scoring and ranking
        the

        documents matching a search query. The similarity algorithm can only be defined
        at index

        creation time and cannot be modified on existing indexes. If null, the ClassicSimilarity

        algorithm is used.'
      id: similarity
      type:
      - azure.search.documents.indexes.models.Similarity
    - description: The ETag of the index.
      id: e_tag
      type:
      - str
  type: class
  uid: azure.search.documents.indexes.models.SearchIndex
references:
- fullName: list[azure.search.documents.indexes.models.SearchField]
  name: list[SearchField]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.search.documents.indexes.models.SearchField
    name: SearchField
    uid: azure.search.documents.indexes.models.SearchField
  - fullName: ']'
    name: ']'
  uid: list[azure.search.documents.indexes.models.SearchField]
- fullName: list[azure.search.documents.indexes.models.ScoringProfile]
  name: list[ScoringProfile]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.search.documents.indexes.models.ScoringProfile
    name: ScoringProfile
    uid: azure.search.documents.indexes.models.ScoringProfile
  - fullName: ']'
    name: ']'
  uid: list[azure.search.documents.indexes.models.ScoringProfile]
- fullName: list[azure.search.documents.indexes.models.Suggester]
  name: list[Suggester]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.search.documents.indexes.models.Suggester
    name: Suggester
    uid: azure.search.documents.indexes.models.Suggester
  - fullName: ']'
    name: ']'
  uid: list[azure.search.documents.indexes.models.Suggester]
- fullName: list[azure.search.documents.indexes.models.LexicalAnalyzer]
  name: list[LexicalAnalyzer]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.search.documents.indexes.models.LexicalAnalyzer
    name: LexicalAnalyzer
    uid: azure.search.documents.indexes.models.LexicalAnalyzer
  - fullName: ']'
    name: ']'
  uid: list[azure.search.documents.indexes.models.LexicalAnalyzer]
- fullName: list[azure.search.documents.indexes.models.LexicalTokenizer]
  name: list[LexicalTokenizer]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.search.documents.indexes.models.LexicalTokenizer
    name: LexicalTokenizer
    uid: azure.search.documents.indexes.models.LexicalTokenizer
  - fullName: ']'
    name: ']'
  uid: list[azure.search.documents.indexes.models.LexicalTokenizer]
- fullName: list[azure.search.documents.indexes.models.TokenFilter]
  name: list[TokenFilter]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.search.documents.indexes.models.TokenFilter
    name: TokenFilter
    uid: azure.search.documents.indexes.models.TokenFilter
  - fullName: ']'
    name: ']'
  uid: list[azure.search.documents.indexes.models.TokenFilter]
- fullName: list[azure.search.documents.indexes.models.CharFilter]
  name: list[CharFilter]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.search.documents.indexes.models.CharFilter
    name: CharFilter
    uid: azure.search.documents.indexes.models.CharFilter
  - fullName: ']'
    name: ']'
  uid: list[azure.search.documents.indexes.models.CharFilter]
