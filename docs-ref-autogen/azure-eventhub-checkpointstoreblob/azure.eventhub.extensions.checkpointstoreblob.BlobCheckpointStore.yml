### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.claim_ownership
  - azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.close
  - azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.from_connection_string
  - azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.list_checkpoints
  - azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.list_ownership
  - azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.update_checkpoint
  class: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  fullName: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.eventhub._eventprocessor.checkpoint_store.CheckpointStore
  langs:
  - python
  module: azure.eventhub.extensions.checkpointstoreblob
  name: BlobCheckpointStore
  summary: 'A CheckpointStore that uses Azure Blob Storage to store the partition
    ownership and checkpoint data.


    This class implements methods list_ownership, claim_ownership, update_checkpoint
    and list_checkpoints that are

    defined in class azure.eventhub.aio.CheckpointStore of package azure-eventhub.'
  syntax:
    content: BlobCheckpointStore(blob_account_url, container_name, credential=None,
      **kwargs)
    parameters:
    - description: 'The URI to the storage account. In order to create a client given
        the full URI to the container,

        use the <xref:azure.eventhub.extensions.checkpointstoreblob.from_container_url>
        classmethod.'
      id: account_url
      type:
      - str
    - description: The name of the container for the blob.
      id: container_name
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        an account

        shared access key, or an instance of a TokenCredentials class from azure.identity.

        If the URL already has a SAS token, specifying an explicit credential will
        take priority.'
      id: credential
    - description: The Storage API version to use for requests. Default value is '2019-07-07'.
      id: api_version
      type:
      - str
    - description: The hostname of the secondary endpoint.
      id: secondary_hostname
      type:
      - str
  type: class
  uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
- class: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  fullName: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.claim_ownership
  langs:
  - python
  module: azure.eventhub.extensions.checkpointstoreblob
  name: claim_ownership(ownership_list)
  namewithoutparameters: claim_ownership
  syntax:
    content: claim_ownership(ownership_list)
    parameters:
    - id: ownership_list
      isRequired: true
  type: method
  uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.claim_ownership
- class: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  fullName: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.close
  langs:
  - python
  module: azure.eventhub.extensions.checkpointstoreblob
  name: close()
  namewithoutparameters: close
  syntax:
    content: close()
    parameters: []
  type: method
  uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.close
- class: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  fullName: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.from_connection_string
  langs:
  - python
  module: azure.eventhub.extensions.checkpointstoreblob
  name: from_connection_string(conn_str, container_name, credential=None, **kwargs)
  namewithoutparameters: from_connection_string
  summary: Create BlobCheckpointStore from a storage connection string.
  syntax:
    content: from_connection_string(conn_str, container_name, credential=None, **kwargs)
    parameters:
    - description: A connection string to an Azure Storage account.
      id: conn_str
      isRequired: true
      type:
      - str
    - description: The container name for the blob.
      id: container_name
      isRequired: true
      type:
      - str
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token, or the connection string already has
        shared

        access key values. The value can be a SAS token string, an account

        shared access key, or an instance of a TokenCredentials class from azure.identity.

        Credentials provided here will take precedence over those in the connection
        string.'
      id: credential
      isRequired: true
    - defaultValue: None
      description: The Storage API version to use for requests. Default value is '2019-07-07'.
      id: api_version
      type:
      - str
    - description: The hostname of the secondary endpoint.
      id: secondary_hostname
      isRequired: true
      type:
      - str
    return:
      description: A blob checkpoint store.
      type:
      - azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  type: method
  uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.from_connection_string
- class: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  fullName: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.list_checkpoints
  langs:
  - python
  module: azure.eventhub.extensions.checkpointstoreblob
  name: list_checkpoints(fully_qualified_namespace, eventhub_name, consumer_group)
  namewithoutparameters: list_checkpoints
  syntax:
    content: list_checkpoints(fully_qualified_namespace, eventhub_name, consumer_group)
    parameters:
    - id: fully_qualified_namespace
      isRequired: true
    - id: eventhub_name
      isRequired: true
    - id: consumer_group
      isRequired: true
  type: method
  uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.list_checkpoints
- class: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  fullName: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.list_ownership
  langs:
  - python
  module: azure.eventhub.extensions.checkpointstoreblob
  name: list_ownership(fully_qualified_namespace, eventhub_name, consumer_group)
  namewithoutparameters: list_ownership
  syntax:
    content: list_ownership(fully_qualified_namespace, eventhub_name, consumer_group)
    parameters:
    - id: fully_qualified_namespace
      isRequired: true
    - id: eventhub_name
      isRequired: true
    - id: consumer_group
      isRequired: true
  type: method
  uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.list_ownership
- class: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  fullName: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.update_checkpoint
  langs:
  - python
  module: azure.eventhub.extensions.checkpointstoreblob
  name: update_checkpoint(checkpoint)
  namewithoutparameters: update_checkpoint
  syntax:
    content: update_checkpoint(checkpoint)
    parameters:
    - id: checkpoint
      isRequired: true
  type: method
  uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.update_checkpoint
references:
- fullName: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.claim_ownership
  isExternal: false
  name: claim_ownership(ownership_list)
  parent: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.claim_ownership
- fullName: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.close
  isExternal: false
  name: close()
  parent: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.close
- fullName: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, container_name, credential=None, **kwargs)
  parent: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.from_connection_string
- fullName: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.list_checkpoints
  isExternal: false
  name: list_checkpoints(fully_qualified_namespace, eventhub_name, consumer_group)
  parent: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.list_checkpoints
- fullName: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.list_ownership
  isExternal: false
  name: list_ownership(fully_qualified_namespace, eventhub_name, consumer_group)
  parent: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.list_ownership
- fullName: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.update_checkpoint
  isExternal: false
  name: update_checkpoint(checkpoint)
  parent: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
  uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.update_checkpoint
