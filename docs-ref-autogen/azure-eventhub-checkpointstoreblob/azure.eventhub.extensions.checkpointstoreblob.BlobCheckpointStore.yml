### YamlMime:PythonClass
uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
name: BlobCheckpointStore
fullName: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore
module: azure.eventhub.extensions.checkpointstoreblob
summary: 'A CheckpointStore that uses Azure Blob Storage to store the partition ownership
  and checkpoint data.


  This class implements methods list_ownership, claim_ownership, update_checkpoint
  and list_checkpoints that are

  defined in class azure.eventhub.aio.CheckpointStore of package azure-eventhub.'
constructor:
  syntax: 'BlobCheckpointStore(blob_account_url: str, container_name: str, credential:
    AzureNamedKeyCredential | AzureSasCredential | TokenCredential | None = None,
    *, api_version: str = ''2019-07-07'', secondary_hostname: str | None = None, **kwargs:
    Any)'
  parameters:
  - name: account_url
    description: 'The URI to the storage account. In order to create a client given
      the full URI to the container,

      use the <xref:azure.eventhub.extensions.checkpointstoreblob.from_container_url>
      classmethod.'
    isRequired: true
    types:
    - <xref:str>
  - name: container_name
    description: The name of the container for the blob.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be a AzureSasCredential,
      an AzureNamedKeyCredential,

      or a TokenCredential.If the URL already has a SAS token, specifying an explicit
      credential will take priority.'
    defaultValue: None
    types:
    - <xref:azure.core.credentials.TokenCredential>
    - <xref:azure.core.credentials.AzureSasCredential>
    - <xref:azure.core.credentials.AzureNamedKeyCredential>
    - <xref:None>
  - name: blob_account_url
    isRequired: true
  keywordOnlyParameters:
  - name: api_version
    description: The Storage API version to use for requests. Default value is '2019-07-07'.
    defaultValue: '2019-07-07'
    types:
    - <xref:str>
  - name: secondary_hostname
    description: The hostname of the secondary endpoint.
    defaultValue: None
    types:
    - <xref:str>
methods:
- uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.claim_ownership
  name: claim_ownership
  summary: Tries to claim ownership for a list of specified partitions.
  signature: 'claim_ownership(ownership_list: Iterable[Dict[str, Any]], **kwargs:
    Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: ownership_list
    description: Iterable of dictionaries containing all the ownerships to claim.
    isRequired: true
    types:
    - <xref:iterable>[<xref:dict>[<xref:str>, <xref:any>]]
  return:
    description: "Iterable of dictionaries containing partition ownership information:\n\
      \n* *fully_qualified_namespace* (str): The fully qualified namespace that the\
      \ Event Hub belongs to. The format is like \"<namespace>.servicebus.windows.net\"\
      . \n\n* *eventhub_name* (str): The name of the specific Event Hub the checkpoint\
      \ is associated with, relative to the Event Hubs namespace that contains it.\
      \ \n\n* *consumer_group* (str): The name of the consumer group the ownership\
      \ are associated with. \n\n* *partition_id* (str): The partition ID which the\
      \ checkpoint is created for. \n\n* *owner_id* (str): A UUID representing the\
      \ owner attempting to claim this partition. \n\n* *last_modified_time* (float):\
      \ The last time this ownership was claimed as a timestamp. \n\n* *etag* (str):\
      \ The Etag value for the last time this ownership was modified. Optional depending\
      \ on storage implementation."
    types:
    - <xref:iterable>[<xref:dict>[<xref:str>, <xref:any>]]
- uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.close
  name: close
  signature: close() -> None
- uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.from_connection_string
  name: from_connection_string
  summary: Create BlobCheckpointStore from a storage connection string.
  signature: 'from_connection_string(conn_str: str, container_name: str, credential:
    AzureNamedKeyCredential | AzureSasCredential | TokenCredential | None = None,
    *, api_version: str = ''2019-07-07'', secondary_hostname: str | None = None, **kwargs:
    Any) -> BlobCheckpointStore'
  parameters:
  - name: conn_str
    description: A connection string to an Azure Storage account.
    isRequired: true
    types:
    - <xref:str>
  - name: container_name
    description: The container name for the blob.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be a AzureSasCredential,
      an AzureNamedKeyCredential,

      or a TokenCredential.If the URL already has a SAS token, specifying an explicit
      credential will take priority.'
    defaultValue: None
    types:
    - <xref:azure.core.credentials.TokenCredential>
    - <xref:azure.core.credentials.AzureSasCredential>
    - <xref:azure.core.credentials.AzureNamedKeyCredential>
    - <xref:None>
  keywordOnlyParameters:
  - name: api_version
    description: The Storage API version to use for requests. Default value is '2019-07-07'.
    defaultValue: '2019-07-07'
    types:
    - <xref:str>
  - name: secondary_hostname
    description: The hostname of the secondary endpoint.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: A blob checkpoint store.
    types:
    - <xref:azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore>
- uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.list_checkpoints
  name: list_checkpoints
  summary: List the updated checkpoints from the storage blob.
  signature: 'list_checkpoints(fully_qualified_namespace: str, eventhub_name: str,
    consumer_group: str, **kwargs: Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified namespace that the Event Hub belongs to.

      The format is like "<namespace>.servicebus.windows.net".'
    isRequired: true
    types:
    - <xref:str>
  - name: eventhub_name
    description: 'The name of the specific Event Hub the checkpoints are associated
      with, relative to

      the Event Hubs namespace that contains it.'
    isRequired: true
    types:
    - <xref:str>
  - name: consumer_group
    description: The name of the consumer group the checkpoints are associated with.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: "Iterable of dictionaries containing partition checkpoint information:\n\
      \n* *fully_qualified_namespace* (str): The fully qualified namespace that the\
      \ Event Hub belongs to. The format is like \"<namespace>.servicebus.windows.net\"\
      . \n\n* *eventhub_name* (str): The name of the specific Event Hub the checkpoints\
      \ are associated with, relative to the Event Hubs namespace that contains it.\
      \ \n\n* *consumer_group* (str): The name of the consumer group the checkpoints\
      \ are associated with. \n\n* *partition_id* (str): The partition ID which the\
      \ checkpoint is created for. \n\n* *sequence_number* (int): The sequence number\
      \ of the <xref:azure.eventhub.EventData>. \n\n* *offset* (str): The offset of\
      \ the <xref:azure.eventhub.EventData>."
    types:
    - <xref:iterable>[<xref:dict>[<xref:str>,<xref:any>]]
- uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.list_ownership
  name: list_ownership
  summary: Retrieves a complete ownership list from the storage blob.
  signature: 'list_ownership(fully_qualified_namespace: str, eventhub_name: str, consumer_group:
    str, **kwargs: Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified namespace that the Event Hub belongs to.

      The format is like "<namespace>.servicebus.windows.net".'
    isRequired: true
    types:
    - <xref:str>
  - name: eventhub_name
    description: 'The name of the specific Event Hub the partition ownerships are
      associated with,

      relative to the Event Hubs namespace that contains it.'
    isRequired: true
    types:
    - <xref:str>
  - name: consumer_group
    description: The name of the consumer group the ownerships are associated with.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: "Iterable of dictionaries containing partition ownership information:\n\
      \n* *fully_qualified_namespace* (str): The fully qualified namespace that the\
      \ Event Hub belongs to. The format is like \"<namespace>.servicebus.windows.net\"\
      . \n\n* *eventhub_name* (str): The name of the specific Event Hub the checkpoint\
      \ is associated with, relative to the Event Hubs namespace that contains it.\
      \ \n\n* *consumer_group* (str): The name of the consumer group the ownership\
      \ are associated with. \n\n* *partition_id* (str): The partition ID which the\
      \ checkpoint is created for. \n\n* *owner_id* (str): A UUID representing the\
      \ current owner of this partition. \n\n* *last_modified_time* (float): The last\
      \ time this ownership was claimed as a timestamp. \n\n* *etag* (str): The Etag\
      \ value for the last time this ownership was modified. Optional depending on\
      \ storage implementation."
    types:
    - <xref:iterable>[<xref:dict>[<xref:str>, <xref:any>]]
- uid: azure.eventhub.extensions.checkpointstoreblob.BlobCheckpointStore.update_checkpoint
  name: update_checkpoint
  summary: 'Updates the checkpoint using the given information for the offset, associated
    partition and

    consumer group in the storage blob.


    Note: If you plan to implement a custom checkpoint store with the intention of
    running between

    cross-language EventHubs SDKs, it is recommended to persist the offset value as
    an integer.'
  signature: 'update_checkpoint(checkpoint: Dict[str, str | int], **kwargs: Any) ->
    None'
  parameters:
  - name: checkpoint
    description: "A dict containing checkpoint information:\n\n* *fully_qualified_namespace*\
      \ (str): The fully qualified namespace that the Event Hub belongs to. The format\
      \ is like \"<namespace>.servicebus.windows.net\". \n\n* *eventhub_name* (str):\
      \ The name of the specific Event Hub the checkpoint is associated with, relative\
      \ to the Event Hubs namespace that contains it. \n\n* *consumer_group* (str):\
      \ The name of the consumer group the checkpoint is associated with. \n\n* *partition_id*\
      \ (str): The partition ID which the checkpoint is created for. \n\n* *sequence_number*\
      \ (int): The sequence number of the <xref:azure.eventhub.EventData> the new\
      \ checkpoint will be associated with. \n\n* *offset* (str): The offset of the\
      \ <xref:azure.eventhub.EventData> the new checkpoint will be associated with."
    isRequired: true
    types:
    - <xref:dict>[<xref:str>,<xref:any>]
  return:
    types:
    - <xref:None>
