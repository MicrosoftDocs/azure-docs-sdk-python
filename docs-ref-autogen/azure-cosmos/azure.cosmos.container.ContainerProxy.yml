### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cosmos.container.ContainerProxy.create_item
  - azure.cosmos.container.ContainerProxy.delete_conflict
  - azure.cosmos.container.ContainerProxy.delete_item
  - azure.cosmos.container.ContainerProxy.get_conflict
  - azure.cosmos.container.ContainerProxy.list_conflicts
  - azure.cosmos.container.ContainerProxy.query_conflicts
  - azure.cosmos.container.ContainerProxy.query_items
  - azure.cosmos.container.ContainerProxy.query_items_change_feed
  - azure.cosmos.container.ContainerProxy.read
  - azure.cosmos.container.ContainerProxy.read_all_items
  - azure.cosmos.container.ContainerProxy.read_item
  - azure.cosmos.container.ContainerProxy.read_offer
  - azure.cosmos.container.ContainerProxy.replace_item
  - azure.cosmos.container.ContainerProxy.replace_throughput
  - azure.cosmos.container.ContainerProxy.upsert_item
  class: azure.cosmos.container.ContainerProxy
  fullName: azure.cosmos.container.ContainerProxy
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.cosmos.container
  name: ContainerProxy
  summary: 'An interface to interact with a specific DB Container.


    This class should not be instantiated directly. Instead, use the

    <xref:DatabaseProxy.get_container_client> method to get an existing

    container, or the <xref:Database.create_container> method to create a

    new container.


    A container in an Azure Cosmos DB SQL API database is a collection of

    documents, each of which is represented as an Item.'
  syntax:
    content: ContainerProxy(client_connection, database_link, id, properties=None)
    variables:
    - description: ID (name) of the container
      id: id
      type:
      - str
    - description: The session token for the container.
      id: session_token
      type:
      - str
  type: class
  uid: azure.cosmos.container.ContainerProxy
- class: azure.cosmos.container.ContainerProxy
  exceptions:
  - description: Item with the given ID already exists.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.container.ContainerProxy.create_item
  langs:
  - python
  module: azure.cosmos.container
  name: create_item(body, populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
    indexing_directive=None, **kwargs)
  namewithoutparameters: create_item
  summary: 'Create an item in the container.


    To update or replace an existing item, use the

    <xref:ContainerProxy.upsert_item> method.'
  syntax:
    content: create_item(body, populate_query_metrics=None, pre_trigger_include=None,
      post_trigger_include=None, indexing_directive=None, **kwargs)
    parameters:
    - description: A dict-like object representing the item to create.
      id: body
      isRequired: true
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      isRequired: true
    - description: trigger id to be used as pre operation trigger.
      id: pre_trigger_include
      isRequired: true
    - description: trigger id to be used as post operation trigger.
      id: post_trigger_include
      isRequired: true
    - description: Indicate whether the document should be omitted from indexing.
      id: indexing_directive
      isRequired: true
    - description: Token for use with Session consistency.
      id: session_token
      isRequired: true
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      isRequired: true
      type:
      - dict[str,str]
    - description: 'An ETag value, or the wildcard character (*). Used to check if
        the resource

        has changed, and act according to the condition specified by the *match_condition*
        parameter.'
      id: etag
      isRequired: true
      type:
      - str
    - description: The match condition to use upon the etag.
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: A dict representing the new item.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.container.ContainerProxy.create_item
- class: azure.cosmos.container.ContainerProxy
  exceptions:
  - description: The conflict wasn't deleted successfully.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  - description: The conflict does not exist in the container.
    type: ~azure.cosmos.exceptions.CosmosResourceNotFoundError
  fullName: azure.cosmos.container.ContainerProxy.delete_conflict
  langs:
  - python
  module: azure.cosmos.container
  name: delete_conflict(conflict, partition_key, **kwargs)
  namewithoutparameters: delete_conflict
  summary: 'Delete a specified conflict from the container.


    If the conflict does not already exist in the container, an exception is raised.'
  syntax:
    content: delete_conflict(conflict, partition_key, **kwargs)
    parameters:
    - description: The ID (name) or dict representing the conflict to be deleted.
      id: conflict
      isRequired: true
    - description: Partition key for the conflict to delete.
      id: partition_key
      isRequired: true
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      type:
      - None
  type: method
  uid: azure.cosmos.container.ContainerProxy.delete_conflict
- class: azure.cosmos.container.ContainerProxy
  exceptions:
  - description: The item wasn't deleted successfully.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  - description: The item does not exist in the container.
    type: ~azure.cosmos.exceptions.CosmosResourceNotFoundError
  fullName: azure.cosmos.container.ContainerProxy.delete_item
  langs:
  - python
  module: azure.cosmos.container
  name: delete_item(item, partition_key, populate_query_metrics=None, pre_trigger_include=None,
    post_trigger_include=None, **kwargs)
  namewithoutparameters: delete_item
  summary: 'Delete the specified item from the container.


    If the item does not already exist in the container, an exception is raised.'
  syntax:
    content: delete_item(item, partition_key, populate_query_metrics=None, pre_trigger_include=None,
      post_trigger_include=None, **kwargs)
    parameters:
    - description: The ID (name) or dict representing item to be deleted.
      id: item
      isRequired: true
    - description: Specifies the partition key value for the item.
      id: partition_key
      isRequired: true
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      isRequired: true
    - description: trigger id to be used as pre operation trigger.
      id: pre_trigger_include
      isRequired: true
    - description: trigger id to be used as post operation trigger.
      id: post_trigger_include
      isRequired: true
    - description: Token for use with Session consistency.
      id: session_token
      isRequired: true
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      isRequired: true
      type:
      - dict[str,str]
    - description: 'An ETag value, or the wildcard character (*). Used to check if
        the resource

        has changed, and act according to the condition specified by the *match_condition*
        parameter.'
      id: etag
      isRequired: true
      type:
      - str
    - description: The match condition to use upon the etag.
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      type:
      - None
  type: method
  uid: azure.cosmos.container.ContainerProxy.delete_item
- class: azure.cosmos.container.ContainerProxy
  exceptions:
  - description: The given conflict couldn't be retrieved.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.container.ContainerProxy.get_conflict
  langs:
  - python
  module: azure.cosmos.container
  name: get_conflict(conflict, partition_key, **kwargs)
  namewithoutparameters: get_conflict
  summary: Get the conflict identified by *conflict*.
  syntax:
    content: get_conflict(conflict, partition_key, **kwargs)
    parameters:
    - description: The ID (name) or dict representing the conflict to retrieve.
      id: conflict
      isRequired: true
    - description: Partition key for the conflict to retrieve.
      id: partition_key
      isRequired: true
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: A dict representing the retrieved conflict.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.container.ContainerProxy.get_conflict
- class: azure.cosmos.container.ContainerProxy
  fullName: azure.cosmos.container.ContainerProxy.list_conflicts
  langs:
  - python
  module: azure.cosmos.container
  name: list_conflicts(max_item_count=None, **kwargs)
  namewithoutparameters: list_conflicts
  summary: List all the conflicts in the container.
  syntax:
    content: list_conflicts(max_item_count=None, **kwargs)
    parameters:
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
      isRequired: true
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: An Iterable of conflicts (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.container.ContainerProxy.list_conflicts
- class: azure.cosmos.container.ContainerProxy
  fullName: azure.cosmos.container.ContainerProxy.query_conflicts
  langs:
  - python
  module: azure.cosmos.container
  name: query_conflicts(query, parameters=None, enable_cross_partition_query=None,
    partition_key=None, max_item_count=None, **kwargs)
  namewithoutparameters: query_conflicts
  summary: Return all conflicts matching a given *query*.
  syntax:
    content: query_conflicts(query, parameters=None, enable_cross_partition_query=None,
      partition_key=None, max_item_count=None, **kwargs)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
      isRequired: true
    - description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
      isRequired: true
    - description: 'Allows sending of more than one request to execute

        the query in the Azure Cosmos DB service.

        More than one request is necessary if the query is not scoped to single partition
        key value.'
      id: enable_cross_partition_query
      isRequired: true
    - description: Specifies the partition key value for the item.
      id: partition_key
      isRequired: true
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
      isRequired: true
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: An Iterable of conflicts (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.container.ContainerProxy.query_conflicts
- class: azure.cosmos.container.ContainerProxy
  example:
  - "Get all products that have not been discontinued:<!--[!code-python[Main](les\\\
    examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
    : [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\\
    dist_temp\\\\117\\\\azure-cosmos-4.0.0\\\\samples\\\\examples.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   import json\n\n   for item in\
    \ container.query_items(\n       query='SELECT * FROM products p WHERE p.productModel\
    \ <> \"DISCONTINUED\"',\n       enable_cross_partition_query=True,\n   ):\n  \
    \     print(json.dumps(item, indent=True))\n\n   ````\n\nParameterized query to\
    \ get all products that have been discontinued:<!--[!code-python[Main](les\\examples.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\117\\\\azure-cosmos-4.0.0\\\\samples\\\\examples.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   discontinued_items = container.query_items(\n  \
    \     query='SELECT * FROM products p WHERE p.productModel = @model AND p.productName=\"\
    Widget\"',\n       parameters=[dict(name=\"@model\", value=\"DISCONTINUED\")],\n\
    \   )\n   for item in discontinued_items:\n       print(json.dumps(item, indent=True))\n\
    \n   ````\n"
  fullName: azure.cosmos.container.ContainerProxy.query_items
  langs:
  - python
  module: azure.cosmos.container
  name: query_items(query, parameters=None, partition_key=None, enable_cross_partition_query=None,
    max_item_count=None, enable_scan_in_query=None, populate_query_metrics=None, **kwargs)
  namewithoutparameters: query_items
  summary: 'Return all results matching the given *query*.


    You can use any value for the container name in the FROM clause, but

    often the container name is used. In the examples below, the container

    name is "products," and is aliased as "p" for easier referencing in

    the WHERE clause.'
  syntax:
    content: query_items(query, parameters=None, partition_key=None, enable_cross_partition_query=None,
      max_item_count=None, enable_scan_in_query=None, populate_query_metrics=None,
      **kwargs)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
      isRequired: true
    - description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
      isRequired: true
    - description: Specifies the partition key value for the item.
      id: partition_key
      isRequired: true
    - description: 'Allows sending of more than one request to

        execute the query in the Azure Cosmos DB service.

        More than one request is necessary if the query is not scoped to single partition
        key value.'
      id: enable_cross_partition_query
      isRequired: true
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
      isRequired: true
    - description: 'Allow scan on the queries which couldn''t be served as

        indexing was opted out on the requested paths.'
      id: enable_scan_in_query
      isRequired: true
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      isRequired: true
    - description: Token for use with Session consistency.
      id: session_token
      isRequired: true
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      isRequired: true
      type:
      - dict[str,str]
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: An Iterable of items (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.container.ContainerProxy.query_items
- class: azure.cosmos.container.ContainerProxy
  fullName: azure.cosmos.container.ContainerProxy.query_items_change_feed
  langs:
  - python
  module: azure.cosmos.container
  name: query_items_change_feed(partition_key_range_id=None, is_start_from_beginning=False,
    continuation=None, max_item_count=None, **kwargs)
  namewithoutparameters: query_items_change_feed
  summary: Get a sorted list of items that were changed, in the order in which they
    were modified.
  syntax:
    content: query_items_change_feed(partition_key_range_id=None, is_start_from_beginning=False,
      continuation=None, max_item_count=None, **kwargs)
    parameters:
    - description: 'ChangeFeed requests can be executed against specific partition
        key ranges.

        This is used to process the change feed in parallel across multiple consumers.'
      id: partition_key_range_id
      isRequired: true
    - description: 'Get whether change feed should start from

        beginning (true) or from current (false). By default it''s start from current
        (false).'
      id: is_start_from_beginning
      isRequired: true
    - description: e_tag value to be used as continuation for reading change feed.
      id: continuation
      isRequired: true
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
      isRequired: true
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: An Iterable of items (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.container.ContainerProxy.query_items_change_feed
- class: azure.cosmos.container.ContainerProxy
  exceptions:
  - description: 'Raised if the container couldn''t be retrieved.

      This includes if the container does not exist.'
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.container.ContainerProxy.read
  langs:
  - python
  module: azure.cosmos.container
  name: read(populate_query_metrics=None, populate_partition_key_range_statistics=None,
    populate_quota_info=None, **kwargs)
  namewithoutparameters: read
  summary: Read the container properties.
  syntax:
    content: read(populate_query_metrics=None, populate_partition_key_range_statistics=None,
      populate_quota_info=None, **kwargs)
    parameters:
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      isRequired: true
    - description: 'Enable returning partition key

        range statistics in response headers.'
      id: populate_partition_key_range_statistics
      isRequired: true
    - description: Enable returning collection storage quota information in response
        headers.
      id: populate_quota_info
      isRequired: true
    - description: Token for use with Session consistency.
      id: session_token
      isRequired: true
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      isRequired: true
      type:
      - dict[str,str]
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: Dict representing the retrieved container.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.container.ContainerProxy.read
- class: azure.cosmos.container.ContainerProxy
  fullName: azure.cosmos.container.ContainerProxy.read_all_items
  langs:
  - python
  module: azure.cosmos.container
  name: read_all_items(max_item_count=None, populate_query_metrics=None, **kwargs)
  namewithoutparameters: read_all_items
  summary: List all the items in the container.
  syntax:
    content: read_all_items(max_item_count=None, populate_query_metrics=None, **kwargs)
    parameters:
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
      isRequired: true
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      isRequired: true
    - description: Token for use with Session consistency.
      id: session_token
      isRequired: true
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      isRequired: true
      type:
      - dict[str,str]
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: An Iterable of items (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.container.ContainerProxy.read_all_items
- class: azure.cosmos.container.ContainerProxy
  example:
  - "Get an item from the database and update one of its properties:<!--[!code-python[Main](les\\\
    examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
    : [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\\
    dist_temp\\\\117\\\\azure-cosmos-4.0.0\\\\samples\\\\examples.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   item = container.read_item(\"\
    item2\", partition_key=\"Widget\")\n   item[\"productModel\"] = \"DISCONTINUED\"\
    \n   updated_item = container.upsert_item(item)\n\n   ````\n"
  exceptions:
  - description: The given item couldn't be retrieved.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.container.ContainerProxy.read_item
  langs:
  - python
  module: azure.cosmos.container
  name: read_item(item, partition_key, populate_query_metrics=None, post_trigger_include=None,
    **kwargs)
  namewithoutparameters: read_item
  summary: Get the item identified by *item*.
  syntax:
    content: read_item(item, partition_key, populate_query_metrics=None, post_trigger_include=None,
      **kwargs)
    parameters:
    - description: The ID (name) or dict representing item to retrieve.
      id: item
      isRequired: true
    - description: Partition key for the item to retrieve.
      id: partition_key
      isRequired: true
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      isRequired: true
    - description: trigger id to be used as post operation trigger.
      id: post_trigger_include
      isRequired: true
    - description: Token for use with Session consistency.
      id: session_token
      isRequired: true
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      isRequired: true
      type:
      - dict[str,str]
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: Dict representing the item to be retrieved.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.container.ContainerProxy.read_item
- class: azure.cosmos.container.ContainerProxy
  exceptions:
  - description: 'No offer exists for the container or

      the offer could not be retrieved.'
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.container.ContainerProxy.read_offer
  langs:
  - python
  module: azure.cosmos.container
  name: read_offer(**kwargs)
  namewithoutparameters: read_offer
  summary: 'Read the Offer object for this container.


    If no Offer already exists for the container, an exception is raised.'
  syntax:
    content: read_offer(**kwargs)
    parameters:
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: Offer for the container.
      type:
      - azure.cosmos.Offer
  type: method
  uid: azure.cosmos.container.ContainerProxy.read_offer
- class: azure.cosmos.container.ContainerProxy
  exceptions:
  - description: 'The replace failed or the item with

      given id does not exist.'
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.container.ContainerProxy.replace_item
  langs:
  - python
  module: azure.cosmos.container
  name: replace_item(item, body, populate_query_metrics=None, pre_trigger_include=None,
    post_trigger_include=None, **kwargs)
  namewithoutparameters: replace_item
  summary: 'Replaces the specified item if it exists in the container.


    If the item does not already exist in the container, an exception is raised.'
  syntax:
    content: replace_item(item, body, populate_query_metrics=None, pre_trigger_include=None,
      post_trigger_include=None, **kwargs)
    parameters:
    - description: The ID (name) or dict representing item to be replaced.
      id: item
      isRequired: true
    - description: A dict-like object representing the item to replace.
      id: body
      isRequired: true
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      isRequired: true
    - description: trigger id to be used as pre operation trigger.
      id: pre_trigger_include
      isRequired: true
    - description: trigger id to be used as post operation trigger.
      id: post_trigger_include
      isRequired: true
    - description: Token for use with Session consistency.
      id: session_token
      isRequired: true
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      isRequired: true
      type:
      - dict[str,str]
    - description: 'An ETag value, or the wildcard character (*). Used to check if
        the resource

        has changed, and act according to the condition specified by the *match_condition*
        parameter.'
      id: etag
      isRequired: true
      type:
      - str
    - description: The match condition to use upon the etag.
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: A dict representing the item after replace went through.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.container.ContainerProxy.replace_item
- class: azure.cosmos.container.ContainerProxy
  exceptions:
  - description: 'No offer exists for the container

      or the offer could not be updated.'
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.container.ContainerProxy.replace_throughput
  langs:
  - python
  module: azure.cosmos.container
  name: replace_throughput(throughput, **kwargs)
  namewithoutparameters: replace_throughput
  summary: 'Replace the container''s throughput.


    If no Offer already exists for the container, an exception is raised.'
  syntax:
    content: replace_throughput(throughput, **kwargs)
    parameters:
    - description: The throughput to be set (an integer).
      id: throughput
      isRequired: true
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: Offer for the container, updated with new throughput.
      type:
      - azure.cosmos.Offer
  type: method
  uid: azure.cosmos.container.ContainerProxy.replace_throughput
- class: azure.cosmos.container.ContainerProxy
  exceptions:
  - description: The given item could not be upserted.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.container.ContainerProxy.upsert_item
  langs:
  - python
  module: azure.cosmos.container
  name: upsert_item(body, populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
    **kwargs)
  namewithoutparameters: upsert_item
  summary: 'Insert or update the specified item.


    If the item already exists in the container, it is replaced. If the item

    does not already exist, it is inserted.'
  syntax:
    content: upsert_item(body, populate_query_metrics=None, pre_trigger_include=None,
      post_trigger_include=None, **kwargs)
    parameters:
    - description: A dict-like object representing the item to update or insert.
      id: body
      isRequired: true
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      isRequired: true
    - description: trigger id to be used as pre operation trigger.
      id: pre_trigger_include
      isRequired: true
    - description: trigger id to be used as post operation trigger.
      id: post_trigger_include
      isRequired: true
    - description: Token for use with Session consistency.
      id: session_token
      isRequired: true
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      isRequired: true
      type:
      - dict[str,str]
    - description: 'An ETag value, or the wildcard character (*). Used to check if
        the resource

        has changed, and act according to the condition specified by the *match_condition*
        parameter.'
      id: etag
      isRequired: true
      type:
      - str
    - description: The match condition to use upon the etag.
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: A dict representing the upserted item.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.container.ContainerProxy.upsert_item
references:
- fullName: azure.cosmos.container.ContainerProxy.create_item
  isExternal: false
  name: create_item(body, populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
    indexing_directive=None, **kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.create_item
- fullName: azure.cosmos.container.ContainerProxy.delete_conflict
  isExternal: false
  name: delete_conflict(conflict, partition_key, **kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.delete_conflict
- fullName: azure.cosmos.container.ContainerProxy.delete_item
  isExternal: false
  name: delete_item(item, partition_key, populate_query_metrics=None, pre_trigger_include=None,
    post_trigger_include=None, **kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.delete_item
- fullName: azure.cosmos.container.ContainerProxy.get_conflict
  isExternal: false
  name: get_conflict(conflict, partition_key, **kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.get_conflict
- fullName: azure.cosmos.container.ContainerProxy.list_conflicts
  isExternal: false
  name: list_conflicts(max_item_count=None, **kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.list_conflicts
- fullName: azure.cosmos.container.ContainerProxy.query_conflicts
  isExternal: false
  name: query_conflicts(query, parameters=None, enable_cross_partition_query=None,
    partition_key=None, max_item_count=None, **kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.query_conflicts
- fullName: azure.cosmos.container.ContainerProxy.query_items
  isExternal: false
  name: query_items(query, parameters=None, partition_key=None, enable_cross_partition_query=None,
    max_item_count=None, enable_scan_in_query=None, populate_query_metrics=None, **kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.query_items
- fullName: azure.cosmos.container.ContainerProxy.query_items_change_feed
  isExternal: false
  name: query_items_change_feed(partition_key_range_id=None, is_start_from_beginning=False,
    continuation=None, max_item_count=None, **kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.query_items_change_feed
- fullName: azure.cosmos.container.ContainerProxy.read
  isExternal: false
  name: read(populate_query_metrics=None, populate_partition_key_range_statistics=None,
    populate_quota_info=None, **kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.read
- fullName: azure.cosmos.container.ContainerProxy.read_all_items
  isExternal: false
  name: read_all_items(max_item_count=None, populate_query_metrics=None, **kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.read_all_items
- fullName: azure.cosmos.container.ContainerProxy.read_item
  isExternal: false
  name: read_item(item, partition_key, populate_query_metrics=None, post_trigger_include=None,
    **kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.read_item
- fullName: azure.cosmos.container.ContainerProxy.read_offer
  isExternal: false
  name: read_offer(**kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.read_offer
- fullName: azure.cosmos.container.ContainerProxy.replace_item
  isExternal: false
  name: replace_item(item, body, populate_query_metrics=None, pre_trigger_include=None,
    post_trigger_include=None, **kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.replace_item
- fullName: azure.cosmos.container.ContainerProxy.replace_throughput
  isExternal: false
  name: replace_throughput(throughput, **kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.replace_throughput
- fullName: azure.cosmos.container.ContainerProxy.upsert_item
  isExternal: false
  name: upsert_item(body, populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
    **kwargs)
  parent: azure.cosmos.container.ContainerProxy
  uid: azure.cosmos.container.ContainerProxy.upsert_item
- fullName: dict[str,str]
  name: dict[str,str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str,str
    name: str,str
    uid: str,str
  - fullName: ']'
    name: ']'
  uid: dict[str,str]
- fullName: dict[str, Any]
  name: dict[str, Any]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: dict[str, Any]
- fullName: Iterable[dict[str, Any]]
  name: Iterable[dict[str, Any]]
  spec.python:
  - fullName: Iterable
    name: Iterable
    uid: Iterable
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: Iterable[dict[str, Any]]
