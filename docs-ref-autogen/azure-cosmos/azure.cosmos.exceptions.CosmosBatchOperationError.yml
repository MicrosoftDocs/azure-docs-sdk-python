### YamlMime:PythonClass
uid: azure.cosmos.exceptions.CosmosBatchOperationError
name: CosmosBatchOperationError
fullName: azure.cosmos.exceptions.CosmosBatchOperationError
module: azure.cosmos.exceptions
inheritances:
- azure.core.exceptions.HttpResponseError
summary: A transactional batch request to the Azure Cosmos database service has failed.
constructor:
  syntax: CosmosBatchOperationError(error_index=None, headers=None, status_code=None,
    message=None, operation_responses=None, **kwargs)
  parameters:
  - name: error_index
    defaultValue: None
  - name: headers
    defaultValue: None
  - name: status_code
    defaultValue: None
  - name: message
    defaultValue: None
  - name: operation_responses
    defaultValue: None
variables:
- description: Index of operation within the batch that caused the error.
  name: error_index
  types:
  - <xref:int>
- description: Error headers.
  name: headers
  types:
  - <xref:dict>[<xref:str>, <xref:typing.Any>]
- description: HTTP response code.
  name: status_code
  types:
  - <xref:int>
- description: Error message.
  name: message
  types:
  - <xref:str>
- description: List of failed operations' responses.
  name: operation_responses
  types:
  - <xref:typing.List>[<xref:dict>[<xref:str>, <xref:typing.Any>]]
examples:
- "Handle a CosmosBatchOperationError:<!--[!code-python[Main](les\\document_management.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
  \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\37\\\\azure-cosmos-4.6.0\\\
  \\samples\\\\document_management.py\", \"xml:space\": \"preserve\", \"force\": false,\
  \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
  : false} -->\n\n````python\n\n       batch_operations = [create_item_operation,\
  \ create_item_operation]\n       try:\n           container.execute_item_batch(batch_operations,\
  \ partition_key=\"Account1\")\n       except exceptions.CosmosBatchOperationError\
  \ as e:\n           error_operation_index = e.error_index\n           error_operation_response\
  \ = e.operation_responses[error_operation_index]\n           error_operation = batch_operations[error_operation_index]\n\
  \           print(\"\\nError operation: {}, error operation response: {}\\n\".format(error_operation,\
  \ error_operation_response))\n\n   ````\n"
methods:
- uid: azure.cosmos.exceptions.CosmosBatchOperationError.add_note
  name: add_note
  summary: "Exception.add_note(note) \u2013\nadd a note to the exception"
  signature: add_note()
- uid: azure.cosmos.exceptions.CosmosBatchOperationError.raise_with_traceback
  name: raise_with_traceback
  summary: 'Raise the exception with the existing traceback.


    *Deprecated since version 1.22.0:* This method is deprecated as we don''t support
    Python 2 anymore. Use raise/from instead.'
  signature: raise_with_traceback() -> None
- uid: azure.cosmos.exceptions.CosmosBatchOperationError.with_traceback
  name: with_traceback
  summary: "Exception.with_traceback(tb) \u2013\nset self.__traceback__ to tb and\
    \ return self."
  signature: with_traceback()
attributes:
- uid: azure.cosmos.exceptions.CosmosBatchOperationError.args
  name: args
