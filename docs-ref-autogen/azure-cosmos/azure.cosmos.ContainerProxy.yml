### YamlMime:PythonClass
uid: azure.cosmos.ContainerProxy
name: ContainerProxy
fullName: azure.cosmos.ContainerProxy
module: azure.cosmos
inheritances:
- builtins.object
summary: 'An interface to interact with a specific DB Container.


  This class should not be instantiated directly. Instead, use the

  <xref:azure.cosmos.DatabaseProxy.get_container_client> method to get an existing

  container, or the <xref:Database.create_container> method to create a

  new container.


  A container in an Azure Cosmos DB SQL API database is a collection of

  documents, each of which is represented as an Item.'
constructor:
  syntax: ContainerProxy(client_connection, database_link, id, properties=None)
variables:
- description: ID (name) of the container
  name: id
  types:
  - <xref:str>
- description: The session token for the container.
  name: session_token
  types:
  - <xref:str>
methods:
- uid: azure.cosmos.ContainerProxy.create_item
  name: create_item
  summary: 'Create an item in the container.


    To update or replace an existing item, use the

    <xref:ContainerProxy.upsert_item> method.'
  signature: create_item(body, populate_query_metrics=None, pre_trigger_include=None,
    post_trigger_include=None, indexing_directive=None, **kwargs)
  parameters:
  - name: body
    description: A dict-like object representing the item to create.
    isRequired: true
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
  - name: pre_trigger_include
    description: trigger id to be used as pre operation trigger.
    isRequired: true
  - name: post_trigger_include
    description: trigger id to be used as post operation trigger.
    isRequired: true
  - name: indexing_directive
    description: Indicate whether the document should be omitted from indexing.
    isRequired: true
  - name: session_token
    description: Token for use with Session consistency.
    isRequired: true
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    isRequired: true
    types:
    - <xref:dict>[<xref:str,str>]
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    isRequired: true
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    isRequired: true
    types:
    - <xref:azure.core.MatchConditions>
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    description: A dict representing the new item.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: Item with the given ID already exists.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.ContainerProxy.delete_conflict
  name: delete_conflict
  summary: 'Delete a specified conflict from the container.


    If the conflict does not already exist in the container, an exception is raised.'
  signature: delete_conflict(conflict, partition_key, **kwargs)
  parameters:
  - name: conflict
    description: The ID (name) or dict representing the conflict to be deleted.
    isRequired: true
  - name: partition_key
    description: Partition key for the conflict to delete.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    types:
    - <xref:None>
  exceptions:
  - description: The conflict wasn't deleted successfully.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  - description: The conflict does not exist in the container.
    type: ~azure.cosmos.exceptions.CosmosResourceNotFoundError
- uid: azure.cosmos.ContainerProxy.delete_item
  name: delete_item
  summary: 'Delete the specified item from the container.


    If the item does not already exist in the container, an exception is raised.'
  signature: delete_item(item, partition_key, populate_query_metrics=None, pre_trigger_include=None,
    post_trigger_include=None, **kwargs)
  parameters:
  - name: item
    description: The ID (name) or dict representing item to be deleted.
    isRequired: true
  - name: partition_key
    description: Specifies the partition key value for the item.
    isRequired: true
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
  - name: pre_trigger_include
    description: trigger id to be used as pre operation trigger.
    isRequired: true
  - name: post_trigger_include
    description: trigger id to be used as post operation trigger.
    isRequired: true
  - name: session_token
    description: Token for use with Session consistency.
    isRequired: true
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    isRequired: true
    types:
    - <xref:dict>[<xref:str,str>]
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    isRequired: true
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    isRequired: true
    types:
    - <xref:azure.core.MatchConditions>
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    types:
    - <xref:None>
  exceptions:
  - description: The item wasn't deleted successfully.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  - description: The item does not exist in the container.
    type: ~azure.cosmos.exceptions.CosmosResourceNotFoundError
- uid: azure.cosmos.ContainerProxy.get_conflict
  name: get_conflict
  summary: Get the conflict identified by *conflict*.
  signature: get_conflict(conflict, partition_key, **kwargs)
  parameters:
  - name: conflict
    description: The ID (name) or dict representing the conflict to retrieve.
    isRequired: true
  - name: partition_key
    description: Partition key for the conflict to retrieve.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    description: A dict representing the retrieved conflict.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: The given conflict couldn't be retrieved.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.ContainerProxy.list_conflicts
  name: list_conflicts
  summary: List all the conflicts in the container.
  signature: list_conflicts(max_item_count=None, **kwargs)
  parameters:
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    description: An Iterable of conflicts (dicts).
    types:
    - <xref:Iterable>[<xref:dict>[<xref:str>, <xref:Any>]]
- uid: azure.cosmos.ContainerProxy.query_conflicts
  name: query_conflicts
  summary: Return all conflicts matching a given *query*.
  signature: query_conflicts(query, parameters=None, enable_cross_partition_query=None,
    partition_key=None, max_item_count=None, **kwargs)
  parameters:
  - name: query
    description: The Azure Cosmos DB SQL query to execute.
    isRequired: true
  - name: parameters
    description: Optional array of parameters to the query. Ignored if no query is
      provided.
    isRequired: true
  - name: enable_cross_partition_query
    description: 'Allows sending of more than one request to execute

      the query in the Azure Cosmos DB service.

      More than one request is necessary if the query is not scoped to single partition
      key value.'
    isRequired: true
  - name: partition_key
    description: Specifies the partition key value for the item.
    isRequired: true
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    description: An Iterable of conflicts (dicts).
    types:
    - <xref:Iterable>[<xref:dict>[<xref:str>, <xref:Any>]]
- uid: azure.cosmos.ContainerProxy.query_items
  name: query_items
  summary: 'Return all results matching the given *query*.


    You can use any value for the container name in the FROM clause, but

    often the container name is used. In the examples below, the container

    name is "products," and is aliased as "p" for easier referencing in

    the WHERE clause.'
  signature: query_items(query, parameters=None, partition_key=None, enable_cross_partition_query=None,
    max_item_count=None, enable_scan_in_query=None, populate_query_metrics=None, **kwargs)
  parameters:
  - name: query
    description: The Azure Cosmos DB SQL query to execute.
    isRequired: true
  - name: parameters
    description: 'Optional array of parameters to the query.

      Each parameter is a dict() with ''name'' and ''value'' keys.

      Ignored if no query is provided.'
    isRequired: true
  - name: partition_key
    description: Specifies the partition key value for the item.
    isRequired: true
  - name: enable_cross_partition_query
    description: 'Allows sending of more than one request to

      execute the query in the Azure Cosmos DB service.

      More than one request is necessary if the query is not scoped to single partition
      key value.'
    isRequired: true
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  - name: enable_scan_in_query
    description: 'Allow scan on the queries which couldn''t be served as

      indexing was opted out on the requested paths.'
    isRequired: true
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
  - name: session_token
    description: Token for use with Session consistency.
    isRequired: true
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    isRequired: true
    types:
    - <xref:dict>[<xref:str,str>]
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    description: An Iterable of items (dicts).
    types:
    - <xref:Iterable>[<xref:dict>[<xref:str>, <xref:Any>]]
  examples:
  - "Get all products that have not been discontinued:<!--[!code-python[Main](les\\\
    examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
    : [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\\
    dist_temp\\\\122\\\\azure-cosmos-4.2.0\\\\samples\\\\examples.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   import json\n\n   for item in\
    \ container.query_items(\n       query='SELECT * FROM products p WHERE p.productModel\
    \ <> \"DISCONTINUED\"',\n       enable_cross_partition_query=True,\n   ):\n  \
    \     print(json.dumps(item, indent=True))\n\n   ````\n\nParameterized query to\
    \ get all products that have been discontinued:<!--[!code-python[Main](les\\examples.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\122\\\\azure-cosmos-4.2.0\\\\samples\\\\examples.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   discontinued_items = container.query_items(\n  \
    \     query='SELECT * FROM products p WHERE p.productModel = @model AND p.productName=\"\
    Widget\"',\n       parameters=[dict(name=\"@model\", value=\"DISCONTINUED\")],\n\
    \   )\n   for item in discontinued_items:\n       print(json.dumps(item, indent=True))\n\
    \n   ````\n"
- uid: azure.cosmos.ContainerProxy.query_items_change_feed
  name: query_items_change_feed
  summary: Get a sorted list of items that were changed, in the order in which they
    were modified.
  signature: query_items_change_feed(partition_key_range_id=None, is_start_from_beginning=False,
    continuation=None, max_item_count=None, **kwargs)
  parameters:
  - name: partition_key_range_id
    description: 'ChangeFeed requests can be executed against specific partition key
      ranges.

      This is used to process the change feed in parallel across multiple consumers.'
    isRequired: true
  - name: partition_key
    description: partition key at which ChangeFeed requests are targetted.
    isRequired: true
  - name: is_start_from_beginning
    description: 'Get whether change feed should start from

      beginning (true) or from current (false). By default it''s start from current
      (false).'
    isRequired: true
  - name: continuation
    description: e_tag value to be used as continuation for reading change feed.
    isRequired: true
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    description: An Iterable of items (dicts).
    types:
    - <xref:Iterable>[<xref:dict>[<xref:str>, <xref:Any>]]
- uid: azure.cosmos.ContainerProxy.read
  name: read
  summary: Read the container properties.
  signature: read(populate_query_metrics=None, populate_partition_key_range_statistics=None,
    populate_quota_info=None, **kwargs)
  parameters:
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
  - name: populate_partition_key_range_statistics
    description: 'Enable returning partition key

      range statistics in response headers.'
    isRequired: true
  - name: populate_quota_info
    description: Enable returning collection storage quota information in response
      headers.
    isRequired: true
  - name: session_token
    description: Token for use with Session consistency.
    isRequired: true
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    isRequired: true
    types:
    - <xref:dict>[<xref:str,str>]
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    description: Dict representing the retrieved container.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: 'Raised if the container couldn''t be retrieved.

      This includes if the container does not exist.'
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.ContainerProxy.read_all_items
  name: read_all_items
  summary: List all the items in the container.
  signature: read_all_items(max_item_count=None, populate_query_metrics=None, **kwargs)
  parameters:
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    isRequired: true
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
  - name: session_token
    description: Token for use with Session consistency.
    isRequired: true
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    isRequired: true
    types:
    - <xref:dict>[<xref:str,str>]
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    description: An Iterable of items (dicts).
    types:
    - <xref:Iterable>[<xref:dict>[<xref:str>, <xref:Any>]]
- uid: azure.cosmos.ContainerProxy.read_item
  name: read_item
  summary: Get the item identified by *item*.
  signature: read_item(item, partition_key, populate_query_metrics=None, post_trigger_include=None,
    **kwargs)
  parameters:
  - name: item
    description: The ID (name) or dict representing item to retrieve.
    isRequired: true
  - name: partition_key
    description: Partition key for the item to retrieve.
    isRequired: true
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
  - name: post_trigger_include
    description: trigger id to be used as post operation trigger.
    isRequired: true
  - name: session_token
    description: Token for use with Session consistency.
    isRequired: true
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    isRequired: true
    types:
    - <xref:dict>[<xref:str,str>]
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    description: Dict representing the item to be retrieved.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: The given item couldn't be retrieved.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  examples:
  - "Get an item from the database and update one of its properties:<!--[!code-python[Main](les\\\
    examples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
    : [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\\
    dist_temp\\\\122\\\\azure-cosmos-4.2.0\\\\samples\\\\examples.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   item = container.read_item(\"\
    item2\", partition_key=\"Widget\")\n   item[\"productModel\"] = \"DISCONTINUED\"\
    \n   updated_item = container.upsert_item(item)\n\n   ````\n"
- uid: azure.cosmos.ContainerProxy.read_offer
  name: read_offer
  summary: 'Read the Offer object for this container.


    If no Offer already exists for the container, an exception is raised.'
  signature: read_offer(**kwargs)
  parameters:
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    description: Offer for the container.
    types:
    - <xref:azure.cosmos.Offer>
  exceptions:
  - description: 'No offer exists for the container or

      the offer could not be retrieved.'
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.ContainerProxy.replace_item
  name: replace_item
  summary: 'Replaces the specified item if it exists in the container.


    If the item does not already exist in the container, an exception is raised.'
  signature: replace_item(item, body, populate_query_metrics=None, pre_trigger_include=None,
    post_trigger_include=None, **kwargs)
  parameters:
  - name: item
    description: The ID (name) or dict representing item to be replaced.
    isRequired: true
  - name: body
    description: A dict-like object representing the item to replace.
    isRequired: true
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
  - name: pre_trigger_include
    description: trigger id to be used as pre operation trigger.
    isRequired: true
  - name: post_trigger_include
    description: trigger id to be used as post operation trigger.
    isRequired: true
  - name: session_token
    description: Token for use with Session consistency.
    isRequired: true
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    isRequired: true
    types:
    - <xref:dict>[<xref:str,str>]
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    isRequired: true
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    isRequired: true
    types:
    - <xref:azure.core.MatchConditions>
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    description: A dict representing the item after replace went through.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: 'The replace failed or the item with

      given id does not exist.'
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.ContainerProxy.replace_throughput
  name: replace_throughput
  summary: 'Replace the container''s throughput.


    If no Offer already exists for the container, an exception is raised.'
  signature: replace_throughput(throughput, **kwargs)
  parameters:
  - name: throughput
    description: The throughput to be set (an integer).
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    description: Offer for the container, updated with new throughput.
    types:
    - <xref:azure.cosmos.Offer>
  exceptions:
  - description: 'No offer exists for the container

      or the offer could not be updated.'
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.ContainerProxy.upsert_item
  name: upsert_item
  summary: 'Insert or update the specified item.


    If the item already exists in the container, it is replaced. If the item

    does not already exist, it is inserted.'
  signature: upsert_item(body, populate_query_metrics=None, pre_trigger_include=None,
    post_trigger_include=None, **kwargs)
  parameters:
  - name: body
    description: A dict-like object representing the item to update or insert.
    isRequired: true
  - name: populate_query_metrics
    description: Enable returning query metrics in response headers.
    isRequired: true
  - name: pre_trigger_include
    description: trigger id to be used as pre operation trigger.
    isRequired: true
  - name: post_trigger_include
    description: trigger id to be used as post operation trigger.
    isRequired: true
  - name: session_token
    description: Token for use with Session consistency.
    isRequired: true
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    isRequired: true
    types:
    - <xref:dict>[<xref:str,str>]
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    isRequired: true
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    isRequired: true
    types:
    - <xref:azure.core.MatchConditions>
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    description: A dict representing the upserted item.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: The given item could not be upserted.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
