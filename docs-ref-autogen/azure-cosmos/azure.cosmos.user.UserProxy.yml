### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cosmos.user.UserProxy.create_permission
  - azure.cosmos.user.UserProxy.delete_permission
  - azure.cosmos.user.UserProxy.get_permission
  - azure.cosmos.user.UserProxy.list_permissions
  - azure.cosmos.user.UserProxy.query_permissions
  - azure.cosmos.user.UserProxy.read
  - azure.cosmos.user.UserProxy.replace_permission
  - azure.cosmos.user.UserProxy.upsert_permission
  class: azure.cosmos.user.UserProxy
  fullName: azure.cosmos.user.UserProxy
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.cosmos.user
  name: UserProxy
  summary: 'An interface to interact with a specific user.


    This class should not be instantiated directly. Instead, use the

    <xref:DatabaseProxy.get_user_client> method.'
  syntax:
    content: UserProxy(client_connection, id, database_link, properties=None)
  type: class
  uid: azure.cosmos.user.UserProxy
- class: azure.cosmos.user.UserProxy
  exceptions:
  - description: If the given permission couldn't be created.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.user.UserProxy.create_permission
  langs:
  - python
  module: azure.cosmos.user
  name: create_permission(body, **kwargs)
  namewithoutparameters: create_permission
  summary: 'Create a permission for the user.


    To update or replace an existing permision, use the <xref:UserProxy.upsert_permission>
    method.'
  syntax:
    content: create_permission(body, **kwargs)
    parameters:
    - description: A dict-like object representing the permission to create.
      id: body
      isRequired: true
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: A dict representing the new permission.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.user.UserProxy.create_permission
- class: azure.cosmos.user.UserProxy
  exceptions:
  - description: The permission wasn't deleted successfully.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  - description: The permission does not exist for the user.
    type: ~azure.cosmos.exceptions.CosmosResourceNotFoundError
  fullName: azure.cosmos.user.UserProxy.delete_permission
  langs:
  - python
  module: azure.cosmos.user
  name: delete_permission(permission, **kwargs)
  namewithoutparameters: delete_permission
  summary: 'Delete the specified permission from the user.


    If the permission does not already exist, an exception is raised.'
  syntax:
    content: delete_permission(permission, **kwargs)
    parameters:
    - description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.user.Permission>

        instance of the permission to be replaced.'
      id: permission
      isRequired: true
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      type:
      - None
  type: method
  uid: azure.cosmos.user.UserProxy.delete_permission
- class: azure.cosmos.user.UserProxy
  exceptions:
  - description: If the given permission couldn't be retrieved.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.user.UserProxy.get_permission
  langs:
  - python
  module: azure.cosmos.user
  name: get_permission(permission, **kwargs)
  namewithoutparameters: get_permission
  summary: Get the permission identified by *id*.
  syntax:
    content: get_permission(permission, **kwargs)
    parameters:
    - description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.user.Permission>

        instance of the permission to be retrieved.'
      id: permission
      isRequired: true
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: A dict representing the retrieved permission.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.user.UserProxy.get_permission
- class: azure.cosmos.user.UserProxy
  fullName: azure.cosmos.user.UserProxy.list_permissions
  langs:
  - python
  module: azure.cosmos.user
  name: list_permissions(max_item_count=None, **kwargs)
  namewithoutparameters: list_permissions
  summary: List all permission for the user.
  syntax:
    content: list_permissions(max_item_count=None, **kwargs)
    parameters:
    - description: Max number of permissions to be returned in the enumeration operation.
      id: max_item_count
      isRequired: true
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: An Iterable of permissions (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.user.UserProxy.list_permissions
- class: azure.cosmos.user.UserProxy
  fullName: azure.cosmos.user.UserProxy.query_permissions
  langs:
  - python
  module: azure.cosmos.user
  name: query_permissions(query, parameters=None, max_item_count=None, **kwargs)
  namewithoutparameters: query_permissions
  summary: Return all permissions matching the given *query*.
  syntax:
    content: query_permissions(query, parameters=None, max_item_count=None, **kwargs)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
      isRequired: true
    - description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
      isRequired: true
    - description: Max number of permissions to be returned in the enumeration operation.
      id: max_item_count
      isRequired: true
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: An Iterable of permissions (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.user.UserProxy.query_permissions
- class: azure.cosmos.user.UserProxy
  exceptions:
  - description: If the given user couldn't be retrieved.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.user.UserProxy.read
  langs:
  - python
  module: azure.cosmos.user
  name: read(**kwargs)
  namewithoutparameters: read
  summary: Read user propertes.
  syntax:
    content: read(**kwargs)
    parameters:
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: A dictionary of the retrieved user properties.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.user.UserProxy.read
- class: azure.cosmos.user.UserProxy
  exceptions:
  - description: 'If the replace failed or the permission

      with given id does not exist.'
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.user.UserProxy.replace_permission
  langs:
  - python
  module: azure.cosmos.user
  name: replace_permission(permission, body, **kwargs)
  namewithoutparameters: replace_permission
  summary: 'Replaces the specified permission if it exists for the user.


    If the permission does not already exist, an exception is raised.'
  syntax:
    content: replace_permission(permission, body, **kwargs)
    parameters:
    - description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.user.Permission>

        instance of the permission to be replaced.'
      id: permission
      isRequired: true
    - description: A dict-like object representing the permission to replace.
      id: body
      isRequired: true
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: A dict representing the permission after replace went through.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.user.UserProxy.replace_permission
- class: azure.cosmos.user.UserProxy
  exceptions:
  - description: If the given permission could not be upserted.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.user.UserProxy.upsert_permission
  langs:
  - python
  module: azure.cosmos.user
  name: upsert_permission(body, **kwargs)
  namewithoutparameters: upsert_permission
  summary: 'Insert or update the specified permission.


    If the permission already exists in the container, it is replaced. If

    the permission does not exist, it is inserted.'
  syntax:
    content: upsert_permission(body, **kwargs)
    parameters:
    - description: A dict-like object representing the permission to update or insert.
      id: body
      isRequired: true
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: A dict representing the upserted permission.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.user.UserProxy.upsert_permission
references:
- fullName: azure.cosmos.user.UserProxy.create_permission
  isExternal: false
  name: create_permission(body, **kwargs)
  parent: azure.cosmos.user.UserProxy
  uid: azure.cosmos.user.UserProxy.create_permission
- fullName: azure.cosmos.user.UserProxy.delete_permission
  isExternal: false
  name: delete_permission(permission, **kwargs)
  parent: azure.cosmos.user.UserProxy
  uid: azure.cosmos.user.UserProxy.delete_permission
- fullName: azure.cosmos.user.UserProxy.get_permission
  isExternal: false
  name: get_permission(permission, **kwargs)
  parent: azure.cosmos.user.UserProxy
  uid: azure.cosmos.user.UserProxy.get_permission
- fullName: azure.cosmos.user.UserProxy.list_permissions
  isExternal: false
  name: list_permissions(max_item_count=None, **kwargs)
  parent: azure.cosmos.user.UserProxy
  uid: azure.cosmos.user.UserProxy.list_permissions
- fullName: azure.cosmos.user.UserProxy.query_permissions
  isExternal: false
  name: query_permissions(query, parameters=None, max_item_count=None, **kwargs)
  parent: azure.cosmos.user.UserProxy
  uid: azure.cosmos.user.UserProxy.query_permissions
- fullName: azure.cosmos.user.UserProxy.read
  isExternal: false
  name: read(**kwargs)
  parent: azure.cosmos.user.UserProxy
  uid: azure.cosmos.user.UserProxy.read
- fullName: azure.cosmos.user.UserProxy.replace_permission
  isExternal: false
  name: replace_permission(permission, body, **kwargs)
  parent: azure.cosmos.user.UserProxy
  uid: azure.cosmos.user.UserProxy.replace_permission
- fullName: azure.cosmos.user.UserProxy.upsert_permission
  isExternal: false
  name: upsert_permission(body, **kwargs)
  parent: azure.cosmos.user.UserProxy
  uid: azure.cosmos.user.UserProxy.upsert_permission
- fullName: dict[str, Any]
  name: dict[str, Any]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: dict[str, Any]
- fullName: Iterable[dict[str, Any]]
  name: Iterable[dict[str, Any]]
  spec.python:
  - fullName: Iterable
    name: Iterable
    uid: Iterable
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: Iterable[dict[str, Any]]
