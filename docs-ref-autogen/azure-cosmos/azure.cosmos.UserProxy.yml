### YamlMime:PythonClass
uid: azure.cosmos.UserProxy
name: UserProxy
fullName: azure.cosmos.UserProxy
module: azure.cosmos
inheritances:
- builtins.object
summary: 'An interface to interact with a specific user.


  This class should not be instantiated directly. Instead, use the

  <xref:azure.cosmos.DatabaseProxy.get_user_client> method.'
constructor:
  syntax: 'UserProxy(client_connection: azure.cosmos._cosmos_client_connection.CosmosClientConnection,
    id: str, database_link: str, properties: Optional[Dict[str, Any]] = None)'
methods:
- uid: azure.cosmos.UserProxy.create_permission
  name: create_permission
  summary: 'Create a permission for the user.


    To update or replace an existing permision, use the <xref:azure.cosmos.UserProxy.upsert_permission>
    method.'
  signature: 'create_permission(body: Dict[str, Any], **kwargs: Any) -> azure.cosmos.permission.Permission'
  parameters:
  - name: body
    description: A dict-like object representing the permission to create.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: A dict representing the new permission.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: If the given permission couldn't be created.
    type: azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.UserProxy.delete_permission
  name: delete_permission
  summary: 'Delete the specified permission from the user.


    If the permission does not already exist, an exception is raised.'
  signature: 'delete_permission(permission: str, **kwargs: Any) -> None'
  parameters:
  - name: permission
    description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.Permission>

      instance of the permission to be replaced.'
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    types:
    - <xref:None>
  exceptions:
  - description: The permission wasn't deleted successfully.
    type: azure.cosmos.exceptions.CosmosHttpResponseError
  - description: The permission does not exist for the user.
    type: azure.cosmos.exceptions.CosmosResourceNotFoundError
- uid: azure.cosmos.UserProxy.get_permission
  name: get_permission
  summary: Get the permission identified by *id*.
  signature: 'get_permission(permission: str, **kwargs: Any) -> azure.cosmos.permission.Permission'
  parameters:
  - name: permission
    description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.Permission>

      instance of the permission to be retrieved.'
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: A dict representing the retrieved permission.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: If the given permission couldn't be retrieved.
    type: azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.UserProxy.list_permissions
  name: list_permissions
  summary: List all permission for the user.
  signature: 'list_permissions(max_item_count: Optional[int] = None, **kwargs: Any)
    -> Iterable[Dict[str, Any]]'
  parameters:
  - name: max_item_count
    description: Max number of permissions to be returned in the enumeration operation.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: An Iterable of permissions (dicts).
    types:
    - <xref:Iterable>[<xref:dict>[<xref:str>, <xref:Any>]]
- uid: azure.cosmos.UserProxy.query_permissions
  name: query_permissions
  summary: Return all permissions matching the given *query*.
  signature: 'query_permissions(query: str, parameters: Optional[List[str]] = None,
    max_item_count: Optional[int] = None, **kwargs: Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: query
    description: The Azure Cosmos DB SQL query to execute.
    isRequired: true
  - name: parameters
    description: Optional array of parameters to the query. Ignored if no query is
      provided.
    isRequired: true
  - name: max_item_count
    description: Max number of permissions to be returned in the enumeration operation.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: An Iterable of permissions (dicts).
    types:
    - <xref:Iterable>[<xref:dict>[<xref:str>, <xref:Any>]]
- uid: azure.cosmos.UserProxy.read
  name: read
  summary: Read user propertes.
  signature: 'read(**kwargs: Any) -> Dict[str, Any]'
  parameters:
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: A dictionary of the retrieved user properties.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: If the given user couldn't be retrieved.
    type: azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.UserProxy.replace_permission
  name: replace_permission
  summary: 'Replaces the specified permission if it exists for the user.


    If the permission does not already exist, an exception is raised.'
  signature: 'replace_permission(permission: str, body: Dict[str, Any], **kwargs:
    Any) -> azure.cosmos.permission.Permission'
  parameters:
  - name: permission
    description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.Permission>

      instance of the permission to be replaced.'
    isRequired: true
  - name: body
    description: A dict-like object representing the permission to replace.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>
  return:
    description: A dict representing the permission after replace went through.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: 'If the replace failed or the permission

      with given id does not exist.'
    type: azure.cosmos.exceptions.CosmosHttpResponseError
- uid: azure.cosmos.UserProxy.upsert_permission
  name: upsert_permission
  summary: 'Insert or update the specified permission.


    If the permission already exists in the container, it is replaced. If

    the permission does not exist, it is inserted.'
  signature: 'upsert_permission(body: Dict[str, Any], **kwargs: Any) -> azure.cosmos.permission.Permission'
  parameters:
  - name: body
    description: A dict-like object representing the permission to update or insert.
    isRequired: true
  - name: response_hook
    description: A callable invoked with the response metadata.
    isRequired: true
    types:
    - <xref:Callable>
  return:
    description: A dict representing the upserted permission.
    types:
    - <xref:dict>[<xref:str>, <xref:Any>]
  exceptions:
  - description: If the given permission could not be upserted.
    type: azure.cosmos.exceptions.CosmosHttpResponseError
