### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cosmos.CosmosClient.create_database
  - azure.cosmos.CosmosClient.create_database_if_not_exists
  - azure.cosmos.CosmosClient.delete_database
  - azure.cosmos.CosmosClient.from_connection_string
  - azure.cosmos.CosmosClient.get_database_account
  - azure.cosmos.CosmosClient.get_database_client
  - azure.cosmos.CosmosClient.list_databases
  - azure.cosmos.CosmosClient.query_databases
  class: azure.cosmos.CosmosClient
  example:
  - "Create a new instance of the Cosmos DB client:<!--[!code-python[Main](les\\examples.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\117\\\\azure-cosmos-4.0.0\\\\samples\\\\examples.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   from azure.cosmos import exceptions, CosmosClient,\
    \ PartitionKey\n\n   import os\n\n   url = os.environ[\"ACCOUNT_URI\"]\n   key\
    \ = os.environ[\"ACCOUNT_KEY\"]\n   client = CosmosClient(url, key)\n\n   ````\n"
  fullName: azure.cosmos.CosmosClient
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.cosmos
  name: CosmosClient
  summary: 'A client-side logical representation of an Azure Cosmos DB account.


    Use this client to configure and execute requests to the Azure Cosmos DB service.'
  syntax:
    content: CosmosClient(url, credential, consistency_level='Session', **kwargs)
    parameters:
    - description: The URL of the Cosmos DB account.
      id: url
      type:
      - str
    - description: Can be the account key, or a dictionary of resource tokens.
      id: credential
      type:
      - str
      - dict[str, str]
    - description: Consistency level to use for the session. The default value is
        "Session".
      id: consistency_level
      type:
      - str
    - description: An absolute timeout in seconds, for the combined HTTP request and
        response processing.
      id: timeout
      type:
      - int
    - description: The HTTP request timeout in seconds.
      id: request_timeout
      type:
      - int
    - description: The connection mode for the client - currently only supports 'Gateway'.
      id: connection_mode
      type:
      - str
    - description: Connection proxy configuration.
      id: proxy_config
      type:
      - azure.cosmos.ProxyConfiguration
    - description: Connection SSL configuration.
      id: ssl_config
      type:
      - azure.cosmos.SSLConfiguration
    - description: Whether to verify the connection, default value is True.
      id: connection_verify
      type:
      - bool
    - description: An alternative certificate to verify the connection.
      id: connection_cert
      type:
      - str
    - description: Maximum retry attempts.
      id: retry_total
      type:
      - int
    - description: Maximum retry wait time in seconds.
      id: retry_backoff_max
      type:
      - int
    - description: Fixed retry interval in milliseconds.
      id: retry_fixed_interval
      type:
      - int
    - description: Maximum number of socket read retry attempts.
      id: retry_read
      type:
      - int
    - description: Maximum number of connection error retry attempts.
      id: retry_connect
      type:
      - int
    - description: Maximum number of retry attempts on error status codes.
      id: retry_status
      type:
      - int
    - description: A list of specific status codes to retry on.
      id: retry_on_status_codes
      type:
      - list[int]
    - description: Factor to calculate wait time between retry attempts.
      id: retry_backoff_factor
      type:
      - float
    - description: 'Enable endpoint discovery for

        geo-replicated database accounts. (Default: True)'
      id: enable_endpoint_discovery
      type:
      - bool
    - description: The preferred locations for geo-replicated database accounts.
      id: preferred_locations
      type:
      - list[str]
  type: class
  uid: azure.cosmos.CosmosClient
- class: azure.cosmos.CosmosClient
  example:
  - "Create a database in the Cosmos DB account:<!--[!code-python[Main](les\\examples.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\117\\\\azure-cosmos-4.0.0\\\\samples\\\\examples.py\", \"xml:space\": \"preserve\"\
    , \"language\": \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\"\
    : 1}} -->\n\n````python\n\n   database_name = \"testDatabase\"\n   try:\n    \
    \   database = client.create_database(id=database_name)\n   except exceptions.CosmosResourceExistsError:\n\
    \       database = client.get_database_client(database=database_name)\n\n   ````\n"
  exceptions:
  - description: Database with the given ID already exists.
    type: ~azure.cosmos.exceptions.CosmosResourceExistsError
  fullName: azure.cosmos.CosmosClient.create_database
  langs:
  - python
  module: azure.cosmos
  name: create_database(id, populate_query_metrics=None, offer_throughput=None, **kwargs)
  namewithoutparameters: create_database
  summary: Create a new database with the given ID (name).
  syntax:
    content: create_database(id, populate_query_metrics=None, offer_throughput=None,
      **kwargs)
    parameters:
    - description: ID (name) of the database to create.
      id: id
      isRequired: true
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      isRequired: true
      type:
      - bool
    - description: The provisioned throughput for this offer.
      id: offer_throughput
      isRequired: true
      type:
      - int
    - description: Token for use with Session consistency.
      id: session_token
      isRequired: true
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      isRequired: true
      type:
      - dict[str,str]
    - description: 'An ETag value, or the wildcard character (*). Used to check if
        the resource

        has changed, and act according to the condition specified by the *match_condition*
        parameter.'
      id: etag
      isRequired: true
      type:
      - str
    - description: The match condition to use upon the etag.
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: A DatabaseProxy instance representing the new database.
      type:
      - azure.cosmos.DatabaseProxy
  type: method
  uid: azure.cosmos.CosmosClient.create_database
- class: azure.cosmos.CosmosClient
  exceptions:
  - description: The database read or creation failed.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.CosmosClient.create_database_if_not_exists
  langs:
  - python
  module: azure.cosmos
  name: create_database_if_not_exists(id, populate_query_metrics=None, offer_throughput=None,
    **kwargs)
  namewithoutparameters: create_database_if_not_exists
  summary: "Create the database if it does not exist already.\n\nIf the database already\
    \ exists, the existing settings are returned.\n\n..note::\n   This function does\
    \ not check or update existing database settings or\n   offer throughput if they\
    \ differ from what is passed in."
  syntax:
    content: create_database_if_not_exists(id, populate_query_metrics=None, offer_throughput=None,
      **kwargs)
    parameters:
    - description: ID (name) of the database to read or create.
      id: id
      isRequired: true
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      isRequired: true
      type:
      - bool
    - description: The provisioned throughput for this offer.
      id: offer_throughput
      isRequired: true
      type:
      - int
    - description: Token for use with Session consistency.
      id: session_token
      isRequired: true
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      isRequired: true
      type:
      - dict[str,str]
    - description: 'An ETag value, or the wildcard character (*). Used to check if
        the resource

        has changed, and act according to the condition specified by the *match_condition*
        parameter.'
      id: etag
      isRequired: true
      type:
      - str
    - description: The match condition to use upon the etag.
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: A DatabaseProxy instance representing the database.
      type:
      - azure.cosmos.DatabaseProxy
  type: method
  uid: azure.cosmos.CosmosClient.create_database_if_not_exists
- class: azure.cosmos.CosmosClient
  exceptions:
  - description: If the database couldn't be deleted.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.CosmosClient.delete_database
  langs:
  - python
  module: azure.cosmos
  name: delete_database(database, populate_query_metrics=None, **kwargs)
  namewithoutparameters: delete_database
  summary: Delete the database with the given ID (name).
  syntax:
    content: delete_database(database, populate_query_metrics=None, **kwargs)
    parameters:
    - description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.DatabaseProxy>

        instance of the database to delete.'
      id: database
      isRequired: true
      type:
      - str
      - dict(str, str)
      - azure.cosmos.DatabaseProxy
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      isRequired: true
      type:
      - bool
    - description: Token for use with Session consistency.
      id: session_token
      isRequired: true
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      isRequired: true
      type:
      - dict[str,str]
    - description: 'An ETag value, or the wildcard character (*). Used to check if
        the resource

        has changed, and act according to the condition specified by the *match_condition*
        parameter.'
      id: etag
      isRequired: true
      type:
      - str
    - description: The match condition to use upon the etag.
      id: match_condition
      isRequired: true
      type:
      - azure.core.MatchConditions
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      type:
      - None
  type: method
  uid: azure.cosmos.CosmosClient.delete_database
- class: azure.cosmos.CosmosClient
  fullName: azure.cosmos.CosmosClient.from_connection_string
  langs:
  - python
  module: azure.cosmos
  name: from_connection_string(conn_str, credential=None, consistency_level='Session',
    **kwargs)
  namewithoutparameters: from_connection_string
  summary: 'Create a CosmosClient instance from a connection string.


    This can be retrieved from the Azure portal.For full list of optional

    keyword arguments, see the CosmosClient constructor.'
  syntax:
    content: from_connection_string(conn_str, credential=None, consistency_level='Session',
      **kwargs)
    parameters:
    - description: The connection string.
      id: conn_str
      isRequired: true
      type:
      - str
    - description: 'Alternative credentials to use instead of the key

        provided in the connection string.'
      id: credential
      isRequired: true
      type:
      - str
      - dict(str, str)
    - defaultValue: None
      description: Consistency level to use for the session. The default value is
        "Session".
      id: consistency_level
      type:
      - str
    - defaultValue: Session
      id: consistency_level
  type: method
  uid: azure.cosmos.CosmosClient.from_connection_string
- class: azure.cosmos.CosmosClient
  fullName: azure.cosmos.CosmosClient.get_database_account
  langs:
  - python
  module: azure.cosmos
  name: get_database_account(**kwargs)
  namewithoutparameters: get_database_account
  summary: Retrieve the database account information.
  syntax:
    content: get_database_account(**kwargs)
    parameters:
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: A *DatabaseAccount* instance representing the Cosmos DB Database
        Account.
      type:
      - azure.cosmos.DatabaseAccount
  type: method
  uid: azure.cosmos.CosmosClient.get_database_account
- class: azure.cosmos.CosmosClient
  fullName: azure.cosmos.CosmosClient.get_database_client
  langs:
  - python
  module: azure.cosmos
  name: get_database_client(database)
  namewithoutparameters: get_database_client
  summary: Retrieve an existing database with the ID (name) *id*.
  syntax:
    content: get_database_client(database)
    parameters:
    - description: 'The ID (name), dict representing the properties or

        *DatabaseProxy* instance of the database to read.'
      id: database
      isRequired: true
      type:
      - str
      - dict(str, str)
      - azure.cosmos.DatabaseProxy
    return:
      description: A *DatabaseProxy* instance representing the retrieved database.
      type:
      - azure.cosmos.DatabaseProxy
  type: method
  uid: azure.cosmos.CosmosClient.get_database_client
- class: azure.cosmos.CosmosClient
  fullName: azure.cosmos.CosmosClient.list_databases
  langs:
  - python
  module: azure.cosmos
  name: list_databases(max_item_count=None, populate_query_metrics=None, **kwargs)
  namewithoutparameters: list_databases
  summary: List the databases in a Cosmos DB SQL database account.
  syntax:
    content: list_databases(max_item_count=None, populate_query_metrics=None, **kwargs)
    parameters:
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
      isRequired: true
      type:
      - int
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      isRequired: true
      type:
      - bool
    - description: Token for use with Session consistency.
      id: session_token
      isRequired: true
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      isRequired: true
      type:
      - dict[str,str]
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: An Iterable of database properties (dicts).
      type:
      - Iterable[dict[str, str]]
  type: method
  uid: azure.cosmos.CosmosClient.list_databases
- class: azure.cosmos.CosmosClient
  fullName: azure.cosmos.CosmosClient.query_databases
  langs:
  - python
  module: azure.cosmos
  name: query_databases(query=None, parameters=None, enable_cross_partition_query=None,
    max_item_count=None, populate_query_metrics=None, **kwargs)
  namewithoutparameters: query_databases
  summary: Query the databases in a Cosmos DB SQL database account.
  syntax:
    content: query_databases(query=None, parameters=None, enable_cross_partition_query=None,
      max_item_count=None, populate_query_metrics=None, **kwargs)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
      isRequired: true
      type:
      - str
    - description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
      isRequired: true
      type:
      - list[str]
    - description: 'Allow scan on the queries which couldn''t be

        served as indexing was opted out on the requested paths.'
      id: enable_cross_partition_query
      isRequired: true
      type:
      - bool
    - description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
      isRequired: true
      type:
      - int
    - description: Enable returning query metrics in response headers.
      id: populate_query_metrics
      isRequired: true
      type:
      - bool
    - description: Token for use with Session consistency.
      id: session_token
      isRequired: true
      type:
      - str
    - description: Initial headers to be sent as part of the request.
      id: initial_headers
      isRequired: true
      type:
      - dict[str,str]
    - description: A callable invoked with the response metadata.
      id: response_hook
      isRequired: true
      type:
      - Callable
    return:
      description: An Iterable of database properties (dicts).
      type:
      - Iterable[dict[str, str]]
  type: method
  uid: azure.cosmos.CosmosClient.query_databases
references:
- fullName: azure.cosmos.CosmosClient.create_database
  isExternal: false
  name: create_database(id, populate_query_metrics=None, offer_throughput=None, **kwargs)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.create_database
- fullName: azure.cosmos.CosmosClient.create_database_if_not_exists
  isExternal: false
  name: create_database_if_not_exists(id, populate_query_metrics=None, offer_throughput=None,
    **kwargs)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.create_database_if_not_exists
- fullName: azure.cosmos.CosmosClient.delete_database
  isExternal: false
  name: delete_database(database, populate_query_metrics=None, **kwargs)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.delete_database
- fullName: azure.cosmos.CosmosClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, credential=None, consistency_level='Session',
    **kwargs)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.from_connection_string
- fullName: azure.cosmos.CosmosClient.get_database_account
  isExternal: false
  name: get_database_account(**kwargs)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.get_database_account
- fullName: azure.cosmos.CosmosClient.get_database_client
  isExternal: false
  name: get_database_client(database)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.get_database_client
- fullName: azure.cosmos.CosmosClient.list_databases
  isExternal: false
  name: list_databases(max_item_count=None, populate_query_metrics=None, **kwargs)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.list_databases
- fullName: azure.cosmos.CosmosClient.query_databases
  isExternal: false
  name: query_databases(query=None, parameters=None, enable_cross_partition_query=None,
    max_item_count=None, populate_query_metrics=None, **kwargs)
  parent: azure.cosmos.CosmosClient
  uid: azure.cosmos.CosmosClient.query_databases
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
- fullName: list[int]
  name: list[int]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: int
    name: int
    uid: int
  - fullName: ']'
    name: ']'
  uid: list[int]
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
- fullName: dict[str,str]
  name: dict[str,str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str,str
    name: str,str
    uid: str,str
  - fullName: ']'
    name: ']'
  uid: dict[str,str]
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
- fullName: Iterable[dict[str, str]]
  name: Iterable[dict[str, str]]
  spec.python:
  - fullName: Iterable
    name: Iterable
    uid: Iterable
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: Iterable[dict[str, str]]
