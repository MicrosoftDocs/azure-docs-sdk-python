### YamlMime:PythonClass
uid: azure.cosmos.aio.DatabaseProxy
name: DatabaseProxy
fullName: azure.cosmos.aio.DatabaseProxy
module: azure.cosmos.aio
inheritances:
- builtins.object
summary: "An interface to interact with a specific database.\n\nThis class should\
  \ not be instantiated directly. Instead use the\n<xref:azure.cosmos.aio.CosmosClient.get_database_client>\
  \ method to get an existing\ndatabase, or the <xref:azure.cosmos.aio.CosmosClient.create_database>\
  \ method to create\na new database.\n\nA database contains one or more containers,\
  \ each of which can contain items,\nstored procedures, triggers, and user-defined\
  \ functions.\n\nA database can also have associated users, each of which is configured\
  \ with\na set of permissions for accessing certain containers, stored procedures,\n\
  triggers, user-defined functions, or items.\n\nAn Azure Cosmos DB SQL API database\
  \ has the following system-generated\nproperties. These properties are read-only:\n\
  \n* *_rid*:   The resource ID. \n\n* *_ts*:    When the resource was last updated.\
  \ The value is a timestamp. \n\n* *_self*:  The unique addressable URI for the resource.\
  \ \n\n* *_etag*:  The resource etag required for optimistic concurrency control.\
  \ \n\n* *_colls*: The addressable path of the collections resource. \n\n* *_users*:\
  \ The addressable path of the users resource."
constructor:
  syntax: 'DatabaseProxy(client_connection: CosmosClientConnection, id: str, properties:
    Dict[str, Any] | None = None)'
  parameters:
  - name: client_connection
    description: Client from which this database was retrieved.
    isRequired: true
    types:
    - <xref:azure.cosmos.aio.CosmosClientConnection>
  - name: id
    description: ID (name) of the database.
    isRequired: true
    types:
    - <xref:str>
  - name: properties
    defaultValue: None
variables:
- description: The ID (name) of the database.
  name: id
methods:
- uid: azure.cosmos.aio.DatabaseProxy.create_container
  name: create_container
  summary: 'Create a new container with the given ID (name).


    If a container with the given ID already exists, a CosmosResourceExistsError is
    raised.'
  signature: 'async create_container(id: str, partition_key: PartitionKey, *, indexing_policy:
    Dict[str, str] | None = None, default_ttl: int | None = None, offer_throughput:
    int | ThroughputProperties | None = None, unique_key_policy: Dict[str, str] |
    None = None, conflict_resolution_policy: Dict[str, str] | None = None, session_token:
    str | None = None, initial_headers: Dict[str, str] | None = None, etag: str |
    None = None, match_condition: MatchConditions | None = None, analytical_storage_ttl:
    int | None = None, **kwargs: Any) -> ContainerProxy'
  parameters:
  - name: id
    description: ID (name) of container to create.
    isRequired: true
    types:
    - <xref:str>
  - name: partition_key
    description: The partition key to use for the container.
    isRequired: true
    types:
    - <xref:azure.cosmos.PartitionKey>
  keywordOnlyParameters:
  - name: indexing_policy
    description: The indexing policy to apply to the container.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: default_ttl
    description: 'Default time to live (TTL) for items in the container.

      If unspecified, items do not expire.'
    types:
    - <xref:int>
  - name: offer_throughput
    description: The provisioned throughput for this offer.
    types:
    - <xref:typing.Union>[<xref:int>, <xref:azure.cosmos.ThroughputProperties>]
  - name: unique_key_policy
    description: The unique key policy to apply to the container.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: conflict_resolution_policy
    description: The conflict resolution policy to apply to the container.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: computed_properties
    description: '**provisional** Sets The computed properties for this

      container in the Azure Cosmos DB Service. For more Information on how to use
      computed properties visit

      *here: https://learn.microsoft.com/en-us/azure/cosmos-db/nosql/query/computed-properties?tabs=dotnet*'
    types:
    - <xref:typing.List>[<xref:typing.Dict>[<xref:str>, <xref:str>]]
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:typing.Dict>[<xref:str>,
      <xref:typing.Any>]], <xref:None>]
  - name: analytical_storage_ttl
    description: 'Analytical store time to live (TTL) for items in the container.  A
      value of

      None leaves analytical storage off and a value of -1 turns analytical storage
      on with no TTL. Please

      note that analytical storage can only be enabled on Synapse Link enabled accounts.'
    types:
    - <xref:int>
  return:
    description: A *ContainerProxy* instance representing the new container.
    types:
    - <xref:azure.cosmos.aio.ContainerProxy>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: The container creation failed.
  examples:
  - "Create a container with default settings:<!--[!code-python[Main](les\\examples_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    37\\\\azure-cosmos-4.6.0\\\\samples\\\\examples_async.py\", \"xml:space\": \"\
    preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\": {\"\
    linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n           container_name\
    \ = \"products\"\n           try:\n               container = await database.create_container(\n\
    \                   id=container_name, partition_key=PartitionKey(path=\"/productName\"\
    )\n               )\n           except exceptions.CosmosResourceExistsError:\n\
    \               container = database.get_container_client(container_name)\n\n\
    \   ````\n\nCreate a container with specific settings; in this case, a custom\
    \ partition key:<!--[!code-python[Main](les\\examples_async.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\
    \\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\37\\\\azure-cosmos-4.6.0\\\\\
    samples\\\\examples_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n           customer_container_name = \"customers\"\
    \n           try:\n               customer_container = await database.create_container(\n\
    \                   id=customer_container_name,\n                   partition_key=PartitionKey(path=\"\
    /city\"),\n                   default_ttl=200,\n               )\n           except\
    \ exceptions.CosmosResourceExistsError:\n               customer_container = database.get_container_client(customer_container_name)\n\
    \n   ````\n"
- uid: azure.cosmos.aio.DatabaseProxy.create_container_if_not_exists
  name: create_container_if_not_exists
  summary: 'Create a container if it does not exist already.


    If the container already exists, the existing settings are returned.

    Note: it does not check or update the existing container settings or offer throughput

    if they differ from what was passed into the method.'
  signature: 'async create_container_if_not_exists(id: str, partition_key: PartitionKey,
    *, indexing_policy: Dict[str, str] | None = None, default_ttl: int | None = None,
    offer_throughput: int | ThroughputProperties | None = None, unique_key_policy:
    Dict[str, str] | None = None, conflict_resolution_policy: Dict[str, str] | None
    = None, session_token: str | None = None, initial_headers: Dict[str, str] | None
    = None, etag: str | None = None, match_condition: MatchConditions | None = None,
    analytical_storage_ttl: int | None = None, **kwargs: Any) -> ContainerProxy'
  parameters:
  - name: id
    description: ID (name) of container to create.
    isRequired: true
    types:
    - <xref:str>
  - name: partition_key
    description: The partition key to use for the container.
    isRequired: true
    types:
    - <xref:azure.cosmos.PartitionKey>
  keywordOnlyParameters:
  - name: indexing_policy
    description: The indexing policy to apply to the container.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: default_ttl
    description: 'Default time to live (TTL) for items in the container.

      If unspecified, items do not expire.'
    types:
    - <xref:int>
  - name: offer_throughput
    description: The provisioned throughput for this offer.
    types:
    - <xref:typing.Union>[<xref:int>, <xref:azure.cosmos.ThroughputProperties>]
  - name: unique_key_policy
    description: The unique key policy to apply to the container.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: conflict_resolution_policy
    description: The conflict resolution policy to apply to the container.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: computed_properties
    description: '**provisional** Sets The computed properties for this

      container in the Azure Cosmos DB Service. For more Information on how to use
      computed properties visit

      *here: https://learn.microsoft.com/en-us/azure/cosmos-db/nosql/query/computed-properties?tabs=dotnet*'
    types:
    - <xref:typing.List>[<xref:typing.Dict>[<xref:str>, <xref:str>]]
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:typing.Dict>[<xref:str>,
      <xref:typing.Any>]], <xref:None>]
  - name: analytical_storage_ttl
    description: 'Analytical store time to live (TTL) for items in the container.  A
      value of

      None leaves analytical storage off and a value of -1 turns analytical storage
      on with no TTL. Please

      note that analytical storage can only be enabled on Synapse Link enabled accounts.'
    types:
    - <xref:int>
  return:
    description: A *ContainerProxy* instance representing the new container.
    types:
    - <xref:azure.cosmos.aio.ContainerProxy>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: The container creation failed.
- uid: azure.cosmos.aio.DatabaseProxy.create_user
  name: create_user
  summary: 'Create a new user in the container.


    To update or replace an existing user, use the

    <xref:ContainerProxy.upsert_user> method.'
  signature: 'async create_user(body: Dict[str, Any], **kwargs: Any) -> UserProxy'
  parameters:
  - name: body
    description: 'A dict object with an *id* key and value representing the user to
      be created.

      The user ID must be unique within the database, and consist of no more than
      255 characters.'
    isRequired: true
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]
  keywordOnlyParameters:
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:typing.Dict>[<xref:str>,
      <xref:typing.Any>]], <xref:None>]
  return:
    description: A *UserProxy* instance representing the new user.
    types:
    - <xref:azure.cosmos.aio.UserProxy>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: If the given user couldn't be created.
  examples:
  - "Create a database user:<!--[!code-python[Main](les\\examples_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\37\\\\azure-cosmos-4.6.0\\\
    \\samples\\\\examples_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n           try:\n               await database.create_user(dict(id=\"\
    Walter Harp\"))\n               print(\"Created user Walter Harp.\")\n       \
    \    except exceptions.CosmosResourceExistsError:\n               print(\"A user\
    \ with that ID already exists.\")\n           except exceptions.CosmosHttpResponseError\
    \ as failure:\n               print(\"Failed to create user. Status code:{}\"\
    .format(failure.status_code))\n\n   ````\n"
- uid: azure.cosmos.aio.DatabaseProxy.delete_container
  name: delete_container
  summary: Delete a container.
  signature: 'async delete_container(container: str | ContainerProxy | Mapping[str,
    Any], *, session_token: str | None = None, initial_headers: Dict[str, str] | None
    = None, etag: str | None = None, match_condition: MatchConditions | None = None,
    **kwargs: Any) -> None'
  parameters:
  - name: container
    description: 'The ID (name) of the container to delete. You can either

      pass in the ID of the container to delete, a <xref:azure.cosmos.aio.ContainerProxy>
      instance or

      a dict representing the properties of the container.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]
    - <xref:azure.cosmos.aio.ContainerProxy>
  keywordOnlyParameters:
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:None>],
      <xref:None>]
  return:
    types:
    - <xref:None>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: If the container couldn't be deleted.
- uid: azure.cosmos.aio.DatabaseProxy.delete_user
  name: delete_user
  summary: Delete the specified user from the container.
  signature: 'async delete_user(user: str | UserProxy | Mapping[str, Any], **kwargs:
    Any) -> None'
  parameters:
  - name: user
    description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.aio.UserProxy>

      instance of the user to be deleted.'
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:typing.Dict>[<xref:str>, <xref:typing.Any>],
      <xref:azure.cosmos.aio.UserProxy>]
  keywordOnlyParameters:
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:None>],
      <xref:None>]
  return:
    types:
    - <xref:None>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: The user wasn't deleted successfully.
  - type: azure.cosmos.exceptions.CosmosResourceNotFoundError
    description: The user does not exist in the container.
- uid: azure.cosmos.aio.DatabaseProxy.get_container_client
  name: get_container_client
  summary: Get a *ContainerProxy* for a container with specified ID (name).
  signature: 'get_container_client(container: str | ContainerProxy | Dict[str, Any])
    -> ContainerProxy'
  parameters:
  - name: container
    description: 'The ID (name), dict representing the properties, or <xref:azure.cosmos.aio.ContainerProxy>

      instance of the container to get.'
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:typing.Dict>[<xref:str>, <xref:typing.Any>],
      <xref:azure.cosmos.aio.ContainerProxy>]
  return:
    description: A *ContainerProxy* instance representing the container.
    types:
    - <xref:azure.cosmos.aio.ContainerProxy>
  examples:
  - "Get an existing container, handling a failure if encountered:<!--[!code-python[Main](les\\\
    examples_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
    names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
    \\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
    \\37\\\\azure-cosmos-4.6.0\\\\samples\\\\examples_async.py\", \"xml:space\": \"\
    preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\": {\"\
    linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n           database\
    \ = client.get_database_client(database_name)\n           container = database.get_container_client(container_name)\n\
    \n   ````\n"
- uid: azure.cosmos.aio.DatabaseProxy.get_throughput
  name: get_throughput
  summary: 'Get the ThroughputProperties object for this database.


    If no ThroughputProperties already exists for the database, an exception is raised.'
  signature: 'async get_throughput(**kwargs: Any) -> ThroughputProperties'
  keywordOnlyParameters:
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:typing.List>[<xref:typing.Dict>[<xref:str>,
      <xref:typing.Any>]]], <xref:None>]
  return:
    description: ThroughputProperties for the database.
    types:
    - <xref:azure.cosmos.offer.ThroughputProperties>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: 'No throughput properties exist for the database

      or the throughput properties could not be retrieved.'
- uid: azure.cosmos.aio.DatabaseProxy.get_user_client
  name: get_user_client
  summary: Get a *UserProxy* for a user with specified ID.
  signature: 'get_user_client(user: str | UserProxy | Mapping[str, Any]) -> UserProxy'
  parameters:
  - name: user
    description: 'The ID (name), dict representing the properties, or <xref:azure.cosmos.aio.UserProxy>

      instance of the user to get.'
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:typing.Dict>[<xref:str>, <xref:typing.Any>],
      <xref:azure.cosmos.aio.UserProxy>]
  return:
    description: A *UserProxy* instance representing the retrieved user.
    types:
    - <xref:azure.cosmos.aio.UserProxy>
- uid: azure.cosmos.aio.DatabaseProxy.list_containers
  name: list_containers
  summary: List the containers in the database.
  signature: 'list_containers(*, session_token: str | None = None, max_item_count:
    int | None = None, initial_headers: Dict[str, str] | None = None, **kwargs) ->
    AsyncItemPaged[Dict[str, Any]]'
  keywordOnlyParameters:
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    types:
    - <xref:int>
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:AsyncItemPaged>[<xref:typing.Dict>[<xref:str>,
      <xref:typing.Any>]]], <xref:None>]
  return:
    description: An AsyncItemPaged of container properties (dicts).
    types:
    - <xref:AsyncItemPaged>[<xref:typing.Dict>[<xref:str>, <xref:typing.Any>]]
  examples:
  - "List all containers in the database:<!--[!code-python[Main](les\\examples_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    37\\\\azure-cosmos-4.6.0\\\\samples\\\\examples_async.py\", \"xml:space\": \"\
    preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\": {\"\
    linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n           database\
    \ = client.get_database_client(database_name)\n           async for container\
    \ in database.list_containers():\n               print(\"Container ID: {}\".format(container['id']))\n\
    \n   ````\n"
- uid: azure.cosmos.aio.DatabaseProxy.list_users
  name: list_users
  summary: List all the users in the container.
  signature: 'list_users(*, max_item_count: int | None = None, **kwargs: Any) -> AsyncItemPaged[Dict[str,
    Any]]'
  keywordOnlyParameters:
  - name: max_item_count
    description: Max number of users to be returned in the enumeration operation.
    types:
    - <xref:int>
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:AsyncItemPaged>[<xref:typing.Dict>[<xref:str>,
      <xref:typing.Any>]]], <xref:None>]
  return:
    description: An AsyncItemPaged of user properties (dicts).
    types:
    - <xref:AsyncItemPaged>[<xref:typing.Dict>[<xref:str>, <xref:typing.Any>]]
- uid: azure.cosmos.aio.DatabaseProxy.query_containers
  name: query_containers
  summary: List the properties for containers in the current database.
  signature: 'query_containers(query: str, *, parameters: List[Dict[str, Any]] | None
    = None, session_token: str | None = None, max_item_count: int | None = None, initial_headers:
    Dict[str, str] | None = None, **kwargs: Any) -> AsyncItemPaged[Dict[str, Any]]'
  keywordOnlyParameters:
  - name: query
    description: The Azure Cosmos DB SQL query to execute.
    types:
    - <xref:typing.Union>[<xref:str>, <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]]
  - name: parameters
    description: 'Optional array of parameters to the query.

      Each parameter is a dict() with ''name'' and ''value'' keys.'
    types:
    - <xref:typing.Optional>[<xref:typing.List>[<xref:typing.Dict>[<xref:str>, <xref:typing.Any>]]]
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    types:
    - <xref:int>
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:AsyncItemPaged>[<xref:typing.Dict>[<xref:str>,
      <xref:typing.Any>]]], <xref:None>]
  return:
    description: An AsyncItemPaged of container properties (dicts).
    types:
    - <xref:AsyncItemPaged>[<xref:typing.Dict>[<xref:str>, <xref:typing.Any>]]
- uid: azure.cosmos.aio.DatabaseProxy.query_users
  name: query_users
  summary: Return all users matching the given *query*.
  signature: 'query_users(query: str, *, parameters: List[Dict[str, Any]] | None =
    None, max_item_count: int | None = None, **kwargs: Any) -> AsyncItemPaged[Dict[str,
    Any]]'
  parameters:
  - name: query
    description: The Azure Cosmos DB SQL query to execute.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: parameters
    description: 'Optional array of parameters to the query.

      Each parameter is a dict() with ''name'' and ''value'' keys.

      Ignored if no query is provided.'
    types:
    - <xref:typing.Optional>[<xref:typing.List>[<xref:typing.Dict>[<xref:str>, <xref:typing.Any>]]]
  - name: max_item_count
    description: Max number of users to be returned in the enumeration operation.
    types:
    - <xref:int>
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:AsyncItemPaged>[<xref:typing.Dict>[<xref:str>,
      <xref:typing.Any>]]], <xref:None>]
  return:
    description: An AsyncItemPaged of user properties (dicts).
    types:
    - <xref:AsyncItemPaged>[<xref:typing.Dict>[<xref:str>, <xref:typing.Any>]]
- uid: azure.cosmos.aio.DatabaseProxy.read
  name: read
  summary: Read the database properties.
  signature: 'async read(*, session_token: str | None = None, initial_headers: Dict[str,
    str] | None = None, **kwargs: Any) -> Dict[str, Any]'
  keywordOnlyParameters:
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:typing.Dict>[<xref:str>,
      <xref:typing.Any>]], <xref:None>]
  return:
    description: A dict representing the database properties
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: If the given database couldn't be retrieved.
- uid: azure.cosmos.aio.DatabaseProxy.replace_container
  name: replace_container
  summary: 'Reset the properties of the container.


    Property changes are persisted immediately. Any properties not specified

    will be reset to their default values.'
  signature: 'async replace_container(container: str | ContainerProxy | Mapping[str,
    Any], partition_key: PartitionKey, *, indexing_policy: Dict[str, str] | None =
    None, default_ttl: int | None = None, conflict_resolution_policy: Dict[str, str]
    | None = None, session_token: str | None = None, initial_headers: Dict[str, str]
    | None = None, etag: str | None = None, match_condition: MatchConditions | None
    = None, analytical_storage_ttl: int | None = None, **kwargs: Any) -> ContainerProxy'
  parameters:
  - name: container
    description: 'The ID (name), dict representing the properties or

      <xref:azure.cosmos.aio.ContainerProxy> instance of the container to be replaced.'
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:typing.Dict>[<xref:str>, <xref:typing.Any>],
      <xref:azure.cosmos.aio.ContainerProxy>]
  - name: partition_key
    description: The partition key to use for the container.
    isRequired: true
    types:
    - <xref:azure.cosmos.PartitionKey>
  keywordOnlyParameters:
  - name: indexing_policy
    description: The indexing policy to apply to the container.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: default_ttl
    description: 'Default time to live (TTL) for items in the container.

      If unspecified, items do not expire.'
    types:
    - <xref:int>
  - name: conflict_resolution_policy
    description: The conflict resolution policy to apply to the container.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: analytical_storage_ttl
    description: 'Analytical store time to live (TTL) for items in the container.  A
      value of

      None leaves analytical storage off and a value of -1 turns analytical storage
      on with no TTL.  Please

      note that analytical storage can only be enabled on Synapse Link enabled accounts.'
    types:
    - <xref:int>
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:typing.Dict>[<xref:str>,
      <xref:typing.Any>]], <xref:None>]
  return:
    description: A *ContainerProxy* instance representing the container after replace
      completed.
    types:
    - <xref:azure.cosmos.aio.ContainerProxy>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: 'Raised if the container couldn''t be replaced.

      This includes if the container with given id does not exist.'
  examples:
  - "Reset the TTL property on a container, and display the updated properties:<!--[!code-python[Main](les\\\
    examples_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
    names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
    \\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
    \\37\\\\azure-cosmos-4.6.0\\\\samples\\\\examples_async.py\", \"xml:space\": \"\
    preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\": {\"\
    linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n           # Set the\
    \ TTL on the container to 3600 seconds (one hour)\n           await database.replace_container(container,\
    \ partition_key=PartitionKey(path='/productName'), default_ttl=3600)\n\n     \
    \      # Display the new TTL setting for the container\n           container_props\
    \ = await database.get_container_client(container_name).read()\n           print(\"\
    New container TTL: {}\".format(json.dumps(container_props['defaultTtl'])))\n\n\
    \   ````\n"
- uid: azure.cosmos.aio.DatabaseProxy.replace_throughput
  name: replace_throughput
  summary: 'Replace the database-level throughput.


    If no ThroughputProperties already exist for the database, an exception is raised.'
  signature: 'async replace_throughput(throughput: int | ThroughputProperties, **kwargs:
    Any) -> ThroughputProperties'
  parameters:
  - name: throughput
    description: The throughput to be set.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:int>, <xref:azure.cosmos.ThroughputProperties>]
  keywordOnlyParameters:
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:typing.Dict>[<xref:str>,
      <xref:typing.Any>]], <xref:None>]
  return:
    description: ThroughputProperties for the database, updated with new throughput.
    types:
    - <xref:azure.cosmos.offer.ThroughputProperties>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: 'No throughput properties exist for the database

      or the throughput properties could not be updated.'
- uid: azure.cosmos.aio.DatabaseProxy.replace_user
  name: replace_user
  summary: Replaces the specified user if it exists in the container.
  signature: 'async replace_user(user: str | UserProxy | Mapping[str, Any], body:
    Dict[str, Any], **kwargs: Any) -> UserProxy'
  parameters:
  - name: user
    description: 'The ID (name), dict representing the properties or <xref:azure.cosmos.aio.UserProxy>

      instance of the user to be replaced.'
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:str>, <xref:typing.Dict>[<xref:str>, <xref:typing.Any>],
      <xref:azure.cosmos.aio.UserProxy>]
  - name: body
    description: A dict object representing the user to replace.
    isRequired: true
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]
  keywordOnlyParameters:
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:typing.Dict>[<xref:str>,
      <xref:typing.Any>]], <xref:None>]
  return:
    description: A *UserProxy* instance representing the user after replace went through.
    types:
    - <xref:azure.cosmos.aio.UserProxy>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: If the replace operation failed or the user with given ID does not
      exist.
- uid: azure.cosmos.aio.DatabaseProxy.upsert_user
  name: upsert_user
  summary: 'Insert or update the specified user.


    If the user already exists in the container, it is replaced. If the user

    does not already exist, it is inserted.'
  signature: 'async upsert_user(body: Dict[str, Any], **kwargs: Any) -> UserProxy'
  parameters:
  - name: body
    description: A dict-like object representing the user to update or insert.
    isRequired: true
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]
  keywordOnlyParameters:
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:typing.Callable>[[<xref:typing.Dict>[<xref:str>, <xref:str>], <xref:typing.Dict>[<xref:str>,
      <xref:typing.Any>]], <xref:None>]
  return:
    description: A *UserProxy* instance representing the upserted user.
    types:
    - <xref:azure.cosmos.aio.UserProxy>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: If the given user could not be upserted.
