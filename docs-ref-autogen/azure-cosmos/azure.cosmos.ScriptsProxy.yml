### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cosmos.ScriptsProxy.create_stored_procedure
  - azure.cosmos.ScriptsProxy.create_trigger
  - azure.cosmos.ScriptsProxy.create_user_defined_function
  - azure.cosmos.ScriptsProxy.delete_stored_procedure
  - azure.cosmos.ScriptsProxy.delete_trigger
  - azure.cosmos.ScriptsProxy.delete_user_defined_function
  - azure.cosmos.ScriptsProxy.execute_stored_procedure
  - azure.cosmos.ScriptsProxy.get_stored_procedure
  - azure.cosmos.ScriptsProxy.get_trigger
  - azure.cosmos.ScriptsProxy.get_user_defined_function
  - azure.cosmos.ScriptsProxy.list_stored_procedures
  - azure.cosmos.ScriptsProxy.list_triggers
  - azure.cosmos.ScriptsProxy.list_user_defined_functions
  - azure.cosmos.ScriptsProxy.query_stored_procedures
  - azure.cosmos.ScriptsProxy.query_triggers
  - azure.cosmos.ScriptsProxy.query_user_defined_functions
  - azure.cosmos.ScriptsProxy.replace_stored_procedure
  - azure.cosmos.ScriptsProxy.replace_trigger
  - azure.cosmos.ScriptsProxy.replace_user_defined_function
  class: azure.cosmos.ScriptsProxy
  fullName: azure.cosmos.ScriptsProxy
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.cosmos
  name: ScriptsProxy
  summary: 'An interface to interact with stored procedures.


    This class should not be instantiated directly. Instead, use the

    <xref:azure.cosmos.ContainerProxy.scripts> attribute.'
  syntax:
    content: ScriptsProxy(client_connection, container_link, is_system_key)
  type: class
  uid: azure.cosmos.ScriptsProxy
- class: azure.cosmos.ScriptsProxy
  exceptions:
  - description: If the given stored procedure couldn't be created.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.ScriptsProxy.create_stored_procedure
  langs:
  - python
  module: azure.cosmos
  name: create_stored_procedure(body, **kwargs)
  namewithoutparameters: create_stored_procedure
  summary: 'Create a new stored procedure in the container.


    To replace an existing sproc, use the <xref:Container.scripts.replace_stored_procedure>
    method.'
  syntax:
    content: create_stored_procedure(body, **kwargs)
    parameters:
    - description: A dict-like object representing the sproc to create.
      id: body
      isRequired: true
    return:
      description: A dict representing the new stored procedure.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ScriptsProxy.create_stored_procedure
- class: azure.cosmos.ScriptsProxy
  exceptions:
  - description: If the given trigger couldn't be created.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.ScriptsProxy.create_trigger
  langs:
  - python
  module: azure.cosmos
  name: create_trigger(body, **kwargs)
  namewithoutparameters: create_trigger
  summary: 'Create a trigger in the container.


    To replace an existing trigger, use the <xref:ContainerProxy.scripts.replace_trigger>
    method.'
  syntax:
    content: create_trigger(body, **kwargs)
    parameters:
    - description: A dict-like object representing the trigger to create.
      id: body
      isRequired: true
    return:
      description: A dict representing the new trigger.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ScriptsProxy.create_trigger
- class: azure.cosmos.ScriptsProxy
  exceptions:
  - description: If the user-defined function couldn't be created.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.ScriptsProxy.create_user_defined_function
  langs:
  - python
  module: azure.cosmos
  name: create_user_defined_function(body, **kwargs)
  namewithoutparameters: create_user_defined_function
  summary: 'Create a user-defined function in the container.


    To replace an existing UDF, use the <xref:ContainerProxy.scripts.replace_user_defined_function>
    method.'
  syntax:
    content: create_user_defined_function(body, **kwargs)
    parameters:
    - description: A dict-like object representing the udf to create.
      id: body
      isRequired: true
    return:
      description: A dict representing the new user-defined function.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ScriptsProxy.create_user_defined_function
- class: azure.cosmos.ScriptsProxy
  exceptions:
  - description: The sproc wasn't deleted successfully.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  - description: The sproc does not exist in the container.
    type: ~azure.cosmos.exceptions.CosmosResourceNotFoundError
  fullName: azure.cosmos.ScriptsProxy.delete_stored_procedure
  langs:
  - python
  module: azure.cosmos
  name: delete_stored_procedure(sproc, **kwargs)
  namewithoutparameters: delete_stored_procedure
  summary: 'Delete a specified stored procedure from the container.


    If the stored procedure does not already exist in the container, an exception
    is raised.'
  syntax:
    content: delete_stored_procedure(sproc, **kwargs)
    parameters:
    - description: The ID (name) or dict representing stored procedure to be deleted.
      id: sproc
      isRequired: true
    return:
      type:
      - None
  type: method
  uid: azure.cosmos.ScriptsProxy.delete_stored_procedure
- class: azure.cosmos.ScriptsProxy
  exceptions:
  - description: The trigger wasn't deleted successfully.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  - description: The trigger does not exist in the container.
    type: ~azure.cosmos.exceptions.CosmosResourceNotFoundError
  fullName: azure.cosmos.ScriptsProxy.delete_trigger
  langs:
  - python
  module: azure.cosmos
  name: delete_trigger(trigger, **kwargs)
  namewithoutparameters: delete_trigger
  summary: 'Delete a specified trigger from the container.


    If the trigger does not already exist in the container, an exception is raised.'
  syntax:
    content: delete_trigger(trigger, **kwargs)
    parameters:
    - description: The ID (name) or dict representing trigger to be deleted.
      id: trigger
      isRequired: true
    return:
      type:
      - None
  type: method
  uid: azure.cosmos.ScriptsProxy.delete_trigger
- class: azure.cosmos.ScriptsProxy
  exceptions:
  - description: The udf wasn't deleted successfully.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  - description: The UDF does not exist in the container.
    type: ~azure.cosmos.exceptions.CosmosResourceNotFoundError
  fullName: azure.cosmos.ScriptsProxy.delete_user_defined_function
  langs:
  - python
  module: azure.cosmos
  name: delete_user_defined_function(udf, **kwargs)
  namewithoutparameters: delete_user_defined_function
  summary: 'Delete a specified user-defined function from the container.


    If the UDF does not already exist in the container, an exception is raised.'
  syntax:
    content: delete_user_defined_function(udf, **kwargs)
    parameters:
    - description: The ID (name) or dict representing udf to be deleted.
      id: udf
      isRequired: true
    return:
      type:
      - None
  type: method
  uid: azure.cosmos.ScriptsProxy.delete_user_defined_function
- class: azure.cosmos.ScriptsProxy
  exceptions:
  - description: 'If the stored procedure execution failed

      or if the stored procedure with given id does not exists in the container.'
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.ScriptsProxy.execute_stored_procedure
  langs:
  - python
  module: azure.cosmos
  name: execute_stored_procedure(sproc, partition_key=None, params=None, enable_script_logging=None,
    **kwargs)
  namewithoutparameters: execute_stored_procedure
  summary: 'Execute a specified stored procedure.


    If the stored procedure does not already exist in the container, an exception
    is raised.'
  syntax:
    content: execute_stored_procedure(sproc, partition_key=None, params=None, enable_script_logging=None,
      **kwargs)
    parameters:
    - description: The ID (name) or dict representing stored procedure to be executed.
      id: sproc
      isRequired: true
    - defaultValue: None
      description: Specifies the partition key to indicate which partition the sproc
        should execute on.
      id: partition_key
    - defaultValue: None
      description: List of parameters to be passed to the stored procedure to be executed.
      id: params
    - defaultValue: None
      description: Enables or disables script logging for the current request.
      id: enable_script_logging
      type:
      - bool
    return:
      description: Result of the executed stored procedure for the given parameters.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ScriptsProxy.execute_stored_procedure
- class: azure.cosmos.ScriptsProxy
  exceptions:
  - description: If the given stored procedure couldn't be retrieved.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.ScriptsProxy.get_stored_procedure
  langs:
  - python
  module: azure.cosmos
  name: get_stored_procedure(sproc, **kwargs)
  namewithoutparameters: get_stored_procedure
  summary: Get the stored procedure identified by *id*.
  syntax:
    content: get_stored_procedure(sproc, **kwargs)
    parameters:
    - description: The ID (name) or dict representing stored procedure to retrieve.
      id: sproc
      isRequired: true
    return:
      description: A dict representing the retrieved stored procedure.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ScriptsProxy.get_stored_procedure
- class: azure.cosmos.ScriptsProxy
  exceptions:
  - description: If the given trigger couldn't be retrieved.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.ScriptsProxy.get_trigger
  langs:
  - python
  module: azure.cosmos
  name: get_trigger(trigger, **kwargs)
  namewithoutparameters: get_trigger
  summary: Get a trigger identified by *id*.
  syntax:
    content: get_trigger(trigger, **kwargs)
    parameters:
    - description: The ID (name) or dict representing trigger to retrieve.
      id: trigger
      isRequired: true
    return:
      description: A dict representing the retrieved trigger.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ScriptsProxy.get_trigger
- class: azure.cosmos.ScriptsProxy
  exceptions:
  - description: If the user-defined function couldn't be retrieved.
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.ScriptsProxy.get_user_defined_function
  langs:
  - python
  module: azure.cosmos
  name: get_user_defined_function(udf, **kwargs)
  namewithoutparameters: get_user_defined_function
  summary: Get a user-defined functions identified by *id*.
  syntax:
    content: get_user_defined_function(udf, **kwargs)
    parameters:
    - description: The ID (name) or dict representing udf to retrieve.
      id: udf
      isRequired: true
    return:
      description: A dict representing the retrieved user-defined function.
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.ScriptsProxy.get_user_defined_function
- class: azure.cosmos.ScriptsProxy
  fullName: azure.cosmos.ScriptsProxy.list_stored_procedures
  langs:
  - python
  module: azure.cosmos
  name: list_stored_procedures(max_item_count=None, **kwargs)
  namewithoutparameters: list_stored_procedures
  summary: List all stored procedures in the container.
  syntax:
    content: list_stored_procedures(max_item_count=None, **kwargs)
    parameters:
    - defaultValue: None
      description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
      type:
      - int
    return:
      description: An Iterable of stored procedures (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.ScriptsProxy.list_stored_procedures
- class: azure.cosmos.ScriptsProxy
  fullName: azure.cosmos.ScriptsProxy.list_triggers
  langs:
  - python
  module: azure.cosmos
  name: list_triggers(max_item_count=None, **kwargs)
  namewithoutparameters: list_triggers
  summary: List all triggers in the container.
  syntax:
    content: list_triggers(max_item_count=None, **kwargs)
    parameters:
    - defaultValue: None
      description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    return:
      description: An Iterable of triggers (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.ScriptsProxy.list_triggers
- class: azure.cosmos.ScriptsProxy
  fullName: azure.cosmos.ScriptsProxy.list_user_defined_functions
  langs:
  - python
  module: azure.cosmos
  name: list_user_defined_functions(max_item_count=None, **kwargs)
  namewithoutparameters: list_user_defined_functions
  summary: List all the user-defined functions in the container.
  syntax:
    content: list_user_defined_functions(max_item_count=None, **kwargs)
    parameters:
    - defaultValue: None
      description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    return:
      description: An Iterable of user-defined functions (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.ScriptsProxy.list_user_defined_functions
- class: azure.cosmos.ScriptsProxy
  fullName: azure.cosmos.ScriptsProxy.query_stored_procedures
  langs:
  - python
  module: azure.cosmos
  name: query_stored_procedures(query, parameters=None, max_item_count=None, **kwargs)
  namewithoutparameters: query_stored_procedures
  summary: Return all stored procedures matching the given *query*.
  syntax:
    content: query_stored_procedures(query, parameters=None, max_item_count=None,
      **kwargs)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
      isRequired: true
    - defaultValue: None
      description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
    - defaultValue: None
      description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    return:
      description: An Iterable of stored procedures (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.ScriptsProxy.query_stored_procedures
- class: azure.cosmos.ScriptsProxy
  fullName: azure.cosmos.ScriptsProxy.query_triggers
  langs:
  - python
  module: azure.cosmos
  name: query_triggers(query, parameters=None, max_item_count=None, **kwargs)
  namewithoutparameters: query_triggers
  summary: Return all triggers matching the given *query*.
  syntax:
    content: query_triggers(query, parameters=None, max_item_count=None, **kwargs)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
      isRequired: true
    - defaultValue: None
      description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
    - defaultValue: None
      description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    return:
      description: An Iterable of triggers (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.ScriptsProxy.query_triggers
- class: azure.cosmos.ScriptsProxy
  fullName: azure.cosmos.ScriptsProxy.query_user_defined_functions
  langs:
  - python
  module: azure.cosmos
  name: query_user_defined_functions(query, parameters=None, max_item_count=None,
    **kwargs)
  namewithoutparameters: query_user_defined_functions
  summary: Return user-defined functions matching a given *query*.
  syntax:
    content: query_user_defined_functions(query, parameters=None, max_item_count=None,
      **kwargs)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
      isRequired: true
    - defaultValue: None
      description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
    - defaultValue: None
      description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    return:
      description: An Iterable of user-defined functions (dicts).
      type:
      - Iterable[dict[str, Any]]
  type: method
  uid: azure.cosmos.ScriptsProxy.query_user_defined_functions
- class: azure.cosmos.ScriptsProxy
  exceptions:
  - description: 'If the replace failed or the stored

      procedure with given id does not exist.'
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.ScriptsProxy.replace_stored_procedure
  langs:
  - python
  module: azure.cosmos
  name: replace_stored_procedure(sproc, body, **kwargs)
  namewithoutparameters: replace_stored_procedure
  summary: 'Replace a specified stored procedure in the container.


    If the stored procedure does not already exist in the container, an exception
    is raised.'
  syntax:
    content: replace_stored_procedure(sproc, body, **kwargs)
    parameters:
    - description: The ID (name) or dict representing stored procedure to be replaced.
      id: sproc
      isRequired: true
    - description: A dict-like object representing the sproc to replace.
      id: body
      isRequired: true
    return:
      description: A dict representing the stored procedure after replace went through.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ScriptsProxy.replace_stored_procedure
- class: azure.cosmos.ScriptsProxy
  exceptions:
  - description: 'If the replace failed or the trigger with given

      id does not exist.'
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.ScriptsProxy.replace_trigger
  langs:
  - python
  module: azure.cosmos
  name: replace_trigger(trigger, body, **kwargs)
  namewithoutparameters: replace_trigger
  summary: 'Replace a specified tigger in the container.


    If the trigger does not already exist in the container, an exception is raised.'
  syntax:
    content: replace_trigger(trigger, body, **kwargs)
    parameters:
    - description: The ID (name) or dict representing trigger to be replaced.
      id: trigger
      isRequired: true
    - description: A dict-like object representing the trigger to replace.
      id: body
      isRequired: true
    return:
      description: A dict representing the trigger after replace went through.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ScriptsProxy.replace_trigger
- class: azure.cosmos.ScriptsProxy
  exceptions:
  - description: 'If the replace failed or the user-defined function

      with the given id does not exist.'
    type: ~azure.cosmos.exceptions.CosmosHttpResponseError
  fullName: azure.cosmos.ScriptsProxy.replace_user_defined_function
  langs:
  - python
  module: azure.cosmos
  name: replace_user_defined_function(udf, body, **kwargs)
  namewithoutparameters: replace_user_defined_function
  summary: 'Replace a specified user-defined function in the container.


    If the UDF does not already exist in the container, an exception is raised.'
  syntax:
    content: replace_user_defined_function(udf, body, **kwargs)
    parameters:
    - description: The ID (name) or dict representing udf to be replaced.
      id: udf
      isRequired: true
    - description: A dict-like object representing the udf to replace.
      id: body
      isRequired: true
    return:
      description: A dict representing the user-defined function after replace went
        through.
      type:
      - dict[str, Any]
  type: method
  uid: azure.cosmos.ScriptsProxy.replace_user_defined_function
references:
- fullName: azure.cosmos.ScriptsProxy.create_stored_procedure
  isExternal: false
  name: create_stored_procedure(body, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.create_stored_procedure
- fullName: azure.cosmos.ScriptsProxy.create_trigger
  isExternal: false
  name: create_trigger(body, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.create_trigger
- fullName: azure.cosmos.ScriptsProxy.create_user_defined_function
  isExternal: false
  name: create_user_defined_function(body, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.create_user_defined_function
- fullName: azure.cosmos.ScriptsProxy.delete_stored_procedure
  isExternal: false
  name: delete_stored_procedure(sproc, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.delete_stored_procedure
- fullName: azure.cosmos.ScriptsProxy.delete_trigger
  isExternal: false
  name: delete_trigger(trigger, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.delete_trigger
- fullName: azure.cosmos.ScriptsProxy.delete_user_defined_function
  isExternal: false
  name: delete_user_defined_function(udf, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.delete_user_defined_function
- fullName: azure.cosmos.ScriptsProxy.execute_stored_procedure
  isExternal: false
  name: execute_stored_procedure(sproc, partition_key=None, params=None, enable_script_logging=None,
    **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.execute_stored_procedure
- fullName: azure.cosmos.ScriptsProxy.get_stored_procedure
  isExternal: false
  name: get_stored_procedure(sproc, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.get_stored_procedure
- fullName: azure.cosmos.ScriptsProxy.get_trigger
  isExternal: false
  name: get_trigger(trigger, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.get_trigger
- fullName: azure.cosmos.ScriptsProxy.get_user_defined_function
  isExternal: false
  name: get_user_defined_function(udf, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.get_user_defined_function
- fullName: azure.cosmos.ScriptsProxy.list_stored_procedures
  isExternal: false
  name: list_stored_procedures(max_item_count=None, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.list_stored_procedures
- fullName: azure.cosmos.ScriptsProxy.list_triggers
  isExternal: false
  name: list_triggers(max_item_count=None, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.list_triggers
- fullName: azure.cosmos.ScriptsProxy.list_user_defined_functions
  isExternal: false
  name: list_user_defined_functions(max_item_count=None, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.list_user_defined_functions
- fullName: azure.cosmos.ScriptsProxy.query_stored_procedures
  isExternal: false
  name: query_stored_procedures(query, parameters=None, max_item_count=None, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.query_stored_procedures
- fullName: azure.cosmos.ScriptsProxy.query_triggers
  isExternal: false
  name: query_triggers(query, parameters=None, max_item_count=None, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.query_triggers
- fullName: azure.cosmos.ScriptsProxy.query_user_defined_functions
  isExternal: false
  name: query_user_defined_functions(query, parameters=None, max_item_count=None,
    **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.query_user_defined_functions
- fullName: azure.cosmos.ScriptsProxy.replace_stored_procedure
  isExternal: false
  name: replace_stored_procedure(sproc, body, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.replace_stored_procedure
- fullName: azure.cosmos.ScriptsProxy.replace_trigger
  isExternal: false
  name: replace_trigger(trigger, body, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.replace_trigger
- fullName: azure.cosmos.ScriptsProxy.replace_user_defined_function
  isExternal: false
  name: replace_user_defined_function(udf, body, **kwargs)
  parent: azure.cosmos.ScriptsProxy
  uid: azure.cosmos.ScriptsProxy.replace_user_defined_function
- fullName: dict[str, Any]
  name: dict[str, Any]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  uid: dict[str, Any]
- fullName: Iterable[dict[str, Any]]
  name: Iterable[dict[str, Any]]
  spec.python:
  - fullName: Iterable
    name: Iterable
    uid: Iterable
  - fullName: '['
    name: '['
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: Iterable[dict[str, Any]]
