### YamlMime:PythonClass
uid: azure.cosmos.CosmosDict
name: CosmosDict
fullName: azure.cosmos.CosmosDict
module: azure.cosmos
constructor:
  syntax: 'CosmosDict(original_dict: Mapping[str, Any] | None, /, *, response_headers:
    CaseInsensitiveDict)'
  positionalOnlyParameters:
  - name: original_dict
    isRequired: true
  keywordOnlyParameters:
  - name: response_headers
    isRequired: true
methods:
- uid: azure.cosmos.CosmosDict.clear
  name: clear
  signature: clear() -> None.  Remove all items from D.
- uid: azure.cosmos.CosmosDict.copy
  name: copy
  signature: copy() -> a shallow copy of D
- uid: azure.cosmos.CosmosDict.fromkeys
  name: fromkeys
  summary: Create a new dictionary with keys from iterable and values set to value.
  signature: fromkeys(value=None, /)
  positionalOnlyParameters:
  - name: iterable
    isRequired: true
  - name: value
    defaultValue: None
- uid: azure.cosmos.CosmosDict.get
  name: get
  summary: Return the value for key if key is in the dictionary, else default.
  signature: get(key, default=None, /)
  positionalOnlyParameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.cosmos.CosmosDict.get_response_headers
  name: get_response_headers
  summary: Returns a copy of the response headers associated to this response
  signature: get_response_headers() -> CaseInsensitiveDict
  return:
    description: Dict of response headers
    types:
    - <xref:azure.core.CaseInsensitiveDict>
- uid: azure.cosmos.CosmosDict.items
  name: items
  signature: items() -> a set-like object providing a view on D's items
- uid: azure.cosmos.CosmosDict.keys
  name: keys
  signature: keys() -> a set-like object providing a view on D's keys
- uid: azure.cosmos.CosmosDict.pop
  name: pop
  summary: 'If the key is not found, return the default if given; otherwise,

    raise a KeyError.'
  signature: pop(k, [d]) -> v, remove specified key and return the corresponding value.
- uid: azure.cosmos.CosmosDict.popitem
  name: popitem
  summary: 'Remove and return a (key, value) pair as a 2-tuple.


    Pairs are returned in LIFO (last-in, first-out) order.

    Raises KeyError if the dict is empty.'
  signature: popitem()
- uid: azure.cosmos.CosmosDict.setdefault
  name: setdefault
  summary: 'Insert key with a value of default if key is not in the dictionary.


    Return the value for key if key is in the dictionary, else default.'
  signature: setdefault(key, default=None, /)
  positionalOnlyParameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.cosmos.CosmosDict.update
  name: update
  summary: 'If E is present and has a .keys() method, then does:  for k in E: D[k]
    = E[k]

    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] =
    v

    In either case, this is followed by: for k in F:  D[k] = F[k]'
  signature: update([E], **F) -> None.  Update D from dict/iterable E and F.
- uid: azure.cosmos.CosmosDict.values
  name: values
  signature: values() -> an object providing a view on D's values
