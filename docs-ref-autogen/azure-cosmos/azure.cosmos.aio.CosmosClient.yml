### YamlMime:PythonClass
uid: azure.cosmos.aio.CosmosClient
name: CosmosClient
fullName: azure.cosmos.aio.CosmosClient
module: azure.cosmos.aio
inheritances:
- builtins.object
summary: 'A client-side logical representation of an Azure Cosmos DB account.


  Use this client to configure and execute requests to the Azure Cosmos DB service.'
constructor:
  syntax: 'CosmosClient(url: str, credential: str | Dict[str, str] | TokenCredential,
    *, consistency_level: str | None = None, **kwargs: Any)'
  parameters:
  - name: url
    description: The URL of the Cosmos DB account.
    isRequired: true
    types:
    - <xref:azure.cosmos.aio.str>
  - name: credential
    description: Can be the account key, or a dictionary of resource tokens.
    isRequired: true
    types:
    - <xref:azure.cosmos.aio.Union>[<xref:azure.cosmos.aio.str>, <xref:azure.cosmos.aio.Dict>[<xref:azure.cosmos.aio.str>,
      <xref:azure.cosmos.aio.str>], <xref:azure.core.credentials_async.AsyncTokenCredential>]
  - name: consistency_level
    description: 'Consistency level to use for the session. Default value is None
      (account-level).

      More on consistency levels and possible values: [https://aka.ms/cosmos-consistency-levels](https://aka.ms/cosmos-consistency-levels)'
    types:
    - <xref:str>
examples:
- "Create a new instance of the Cosmos DB client:<!--[!code-python[Main](les\\examples_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\\
  113\\\\azure-cosmos-4.3.0\\\\samples\\\\examples_async.py\", \"xml:space\": \"preserve\"\
  , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
  : 1}, \"linenos\": false} -->\n\n````python\n\n       async with CosmosClient(url,\
  \ key) as client:\n\n   ````\n"
methods:
- uid: azure.cosmos.aio.CosmosClient.close
  name: close
  summary: Close this instance of CosmosClient.
  signature: async close() -> None
- uid: azure.cosmos.aio.CosmosClient.create_database
  name: create_database
  summary: Create a new database with the given ID (name).
  signature: 'async create_database(id: str, **kwargs: Any) -> DatabaseProxy'
  parameters:
  - name: id
    description: ID (name) of the database to create.
    isRequired: true
    types:
    - <xref:azure.cosmos.aio.str>
  - name: offer_throughput
    description: The provisioned throughput for this offer.
    types:
    - <xref:int>
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>[[<xref:Dict>[<xref:str>, <xref:str>], <xref:Dict>[<xref:str>,
      <xref:Any>]], <xref:None>]
  return:
    description: A DatabaseProxy instance representing the new database.
    types:
    - <xref:azure.cosmos.aio.DatabaseProxy>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosResourceExistsError
    description: Database with the given ID already exists.
  examples:
  - "Create a database in the Cosmos DB account:<!--[!code-python[Main](les\\examples_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\113\\\\azure-cosmos-4.3.0\\\\samples\\\\examples_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n           database_name\
    \ = \"testDatabase\"\n           try:\n               database = await client.create_database(id=database_name)\n\
    \           except exceptions.CosmosResourceExistsError:\n               database\
    \ = client.get_database_client(database=database_name)\n\n   ````\n"
- uid: azure.cosmos.aio.CosmosClient.create_database_if_not_exists
  name: create_database_if_not_exists
  summary: "Create the database if it does not exist already.\n\nIf the database already\
    \ exists, the existing settings are returned.\n\n..note::\n   This function does\
    \ not check or update existing database settings or\n   offer throughput if they\
    \ differ from what is passed in."
  signature: 'async create_database_if_not_exists(id: str, **kwargs: Any) -> DatabaseProxy'
  parameters:
  - name: id
    description: ID (name) of the database to read or create.
    isRequired: true
    types:
    - <xref:azure.cosmos.aio.str>
  - name: offer_throughput
    description: The provisioned throughput for this offer.
    types:
    - <xref:int>
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>[[<xref:Dict>[<xref:str>, <xref:str>], <xref:Dict>[<xref:str>,
      <xref:Any>]], <xref:None>]
  return:
    description: A DatabaseProxy instance representing the database.
    types:
    - <xref:azure.cosmos.DatabaseProxy>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: The database read or creation failed.
- uid: azure.cosmos.aio.CosmosClient.delete_database
  name: delete_database
  summary: Delete the database with the given ID (name).
  signature: 'async delete_database(database: str | DatabaseProxy | Dict[str, Any],
    **kwargs: Any) -> None'
  parameters:
  - name: database
    description: 'The ID (name), dict representing the properties, or <xref:azure.cosmos.aio.DatabaseProxy>

      instance of the database to delete.'
    isRequired: true
    types:
    - <xref:azure.cosmos.aio.Union>[<xref:azure.cosmos.aio.str>, <xref:azure.cosmos.DatabaseProxy>,
      <xref:azure.cosmos.aio.Dict>[<xref:azure.cosmos.aio.str>, <xref:azure.cosmos.aio.Any>]]
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: etag
    description: 'An ETag value, or the wildcard character (*). Used to check if the
      resource

      has changed, and act according to the condition specified by the *match_condition*
      parameter.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag.
    types:
    - <xref:azure.core.MatchConditions>
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>[[<xref:Dict>[<xref:str>, <xref:str>]], <xref:None>]
  return:
    types:
    - <xref:azure.cosmos.aio.None>
  exceptions:
  - type: azure.cosmos.exceptions.CosmosHttpResponseError
    description: If the database couldn't be deleted.
- uid: azure.cosmos.aio.CosmosClient.from_connection_string
  name: from_connection_string
  summary: 'Create a CosmosClient instance from a connection string.


    This can be retrieved from the Azure portal.For full list of optional

    keyword arguments, see the CosmosClient constructor.'
  signature: 'from_connection_string(conn_str: str, *, credential: str | Dict[str,
    str] | None = None, consistency_level: str | None = None, **kwargs: Any) -> CosmosClient'
  parameters:
  - name: conn_str
    description: The connection string.
    isRequired: true
    types:
    - <xref:azure.cosmos.aio.str>
  - name: credential
    description: Alternative credentials to use instead of the key provided in the
      connection string.
    types:
    - <xref:Union>[<xref:str>, <xref:Dict>[<xref:str>, <xref:str>]]
  - name: consistency_level
    description: 'Consistency level to use for the session. Default value is None
      (account-level).

      More on consistency levels and possible values: [https://aka.ms/cosmos-consistency-levels](https://aka.ms/cosmos-consistency-levels)'
    types:
    - <xref:str>
  return:
    description: a CosmosClient instance
    types:
    - <xref:azure.cosmos.aio.CosmosClient>
- uid: azure.cosmos.aio.CosmosClient.get_database_client
  name: get_database_client
  summary: Retrieve an existing database with the ID (name) *id*.
  signature: 'get_database_client(database: str | DatabaseProxy | Dict[str, Any])
    -> DatabaseProxy'
  parameters:
  - name: database
    description: 'The ID (name), dict representing the properties, or <xref:azure.cosmos.aio.DatabaseProxy>

      instance of the database to get.'
    isRequired: true
    types:
    - <xref:azure.cosmos.aio.Union>[<xref:azure.cosmos.aio.str>, <xref:azure.cosmos.DatabaseProxy>,
      <xref:azure.cosmos.aio.Dict>[<xref:azure.cosmos.aio.str>, <xref:azure.cosmos.aio.Any>]]
  return:
    description: A *DatabaseProxy* instance representing the retrieved database.
    types:
    - <xref:azure.cosmos.DatabaseProxy>
- uid: azure.cosmos.aio.CosmosClient.list_databases
  name: list_databases
  summary: List the databases in a Cosmos DB SQL database account.
  signature: 'list_databases(**kwargs: Any) -> AsyncItemPaged[Dict[str, Any]]'
  parameters:
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    types:
    - <xref:int>
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>[[<xref:Dict>[<xref:str>, <xref:str>]], <xref:None>]
  return:
    description: An AsyncItemPaged of database properties (dicts).
    types:
    - <xref:azure.cosmos.aio.AsyncItemPaged>[<xref:azure.cosmos.aio.Dict>[<xref:azure.cosmos.aio.str>,
      <xref:azure.cosmos.aio.str>]]
- uid: azure.cosmos.aio.CosmosClient.query_databases
  name: query_databases
  summary: Query the databases in a Cosmos DB SQL database account.
  signature: 'query_databases(**kwargs: Any) -> AsyncItemPaged[Dict[str, Any]]'
  parameters:
  - name: query
    description: The Azure Cosmos DB SQL query to execute.
    types:
    - <xref:Union>[<xref:str>, <xref:Dict>[<xref:str>, <xref:Any>]]
  - name: parameters
    description: 'Optional array of parameters to the query.

      Each parameter is a dict() with ''name'' and ''value'' keys.'
    types:
    - <xref:List>[<xref:Dict>[<xref:str>, <xref:Any>]]
  - name: max_item_count
    description: Max number of items to be returned in the enumeration operation.
    types:
    - <xref:int>
  - name: session_token
    description: Token for use with Session consistency.
    types:
    - <xref:str>
  - name: initial_headers
    description: Initial headers to be sent as part of the request.
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: response_hook
    description: A callable invoked with the response metadata.
    types:
    - <xref:Callable>[[<xref:Dict>[<xref:str>, <xref:str>]], <xref:None>]
  return:
    description: An AsyncItemPaged of database properties (dicts).
    types:
    - <xref:azure.cosmos.aio.AsyncItemPaged>[<xref:azure.cosmos.aio.Dict>[<xref:azure.cosmos.aio.str>,
      <xref:azure.cosmos.aio.str>]]
