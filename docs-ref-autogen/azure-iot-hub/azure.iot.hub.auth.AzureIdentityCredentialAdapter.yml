### YamlMime:PythonClass
uid: azure.iot.hub.auth.AzureIdentityCredentialAdapter
name: AzureIdentityCredentialAdapter
fullName: azure.iot.hub.auth.AzureIdentityCredentialAdapter
module: azure.iot.hub.auth
inheritances:
- msrest.authentication.BasicTokenAuthentication
constructor:
  syntax: AzureIdentityCredentialAdapter(credential, resource_id='https://iothubs.azure.net/.default',
    **kwargs)
  parameters:
  - name: credential
  - name: resource_id
    defaultValue: https://iothubs.azure.net/.default
methods:
- uid: azure.iot.hub.auth.AzureIdentityCredentialAdapter.set_token
  name: set_token
  summary: 'Ask the azure-core BearerTokenCredentialPolicy policy to get a token.

    Using the policy gives us for free the caching system of azure-core.

    We could make this code simpler by using private method, but by definition

    I can''t assure they will be there forever, so mocking a fake call to the policy

    to extract the token, using 100% public API.'
  signature: set_token()
- uid: azure.iot.hub.auth.AzureIdentityCredentialAdapter.signed_session
  name: signed_session
  summary: 'Create requests session with any required auth headers

    applied.


    If a session object is provided, configure it directly. Otherwise,

    create a new session and return it.'
  signature: signed_session(session=None)
  parameters:
  - name: session
    description: The session to configure for authentication
    defaultValue: None
    types:
    - <xref:requests.Session>
  return:
    types:
    - <xref:requests.Session>
