### YamlMime:PythonClass
uid: azure.iot.hub.auth.AzureIdentityCredentialAdapter
name: AzureIdentityCredentialAdapter
fullName: azure.iot.hub.auth.AzureIdentityCredentialAdapter
module: azure.iot.hub.auth
inheritances:
- msrest.authentication.BasicTokenAuthentication
summary: 'Adapt any azure-identity credential to work with SDK that needs azure.common.credentials
  or msrestazure.

  Default resource is ARM (syntax of endpoint v2)

  :param credential: Any azure-identity credential (DefaultAzureCredential by default)

  :param str resource_id: The scope to use to get the token (default ARM)'
constructor:
  syntax: AzureIdentityCredentialAdapter(credential, resource_id='https://iothubs.azure.net/.default',
    **kwargs)
  parameters:
  - name: credential
    isRequired: true
  - name: resource_id
    defaultValue: https://iothubs.azure.net/.default
methods:
- uid: azure.iot.hub.auth.AzureIdentityCredentialAdapter.set_token
  name: set_token
  summary: 'Ask the azure-core BearerTokenCredentialPolicy policy to get a token.

    Using the policy gives us for free the caching system of azure-core.

    We could make this code simpler by using private method, but by definition

    I can''t assure they will be there forever, so mocking a fake call to the policy

    to extract the token, using 100% public API.'
  signature: set_token()
- uid: azure.iot.hub.auth.AzureIdentityCredentialAdapter.signed_session
  name: signed_session
  signature: signed_session(session=None)
  parameters:
  - name: session
    defaultValue: None
attributes:
- uid: azure.iot.hub.auth.AzureIdentityCredentialAdapter.header
  name: header
  signature: header = 'Authorization'
