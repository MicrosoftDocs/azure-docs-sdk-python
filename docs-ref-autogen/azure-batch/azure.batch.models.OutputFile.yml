### YamlMime:PythonClass
uid: azure.batch.models.OutputFile
name: OutputFile
fullName: azure.batch.models.OutputFile
module: azure.batch.models
inheritances:
- msrest.serialization.Model
summary: 'A specification for uploading files from an Azure Batch Compute Node to

  another location after the Batch service has finished executing the Task

  process.


  On every file uploads, Batch service writes two log files to the compute

  node, ''fileuploadout.txt'' and ''fileuploaderr.txt''. These log files are used

  to learn more about a specific failure.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'OutputFile(*, file_pattern: str, destination, upload_options, **kwargs)'
  parameters:
  - name: file_pattern
    description: 'Required. Both relative and absolute paths are

      supported. Relative paths are relative to the Task working directory. The

      following wildcards are supported: * matches 0 or more characters (for

      example pattern abc* would match abc or abcdef), ** matches any directory,

      ? matches any single character, [abc] matches one character in the

      brackets, and [a-c] matches one character in the range. Brackets can

      include a negation to match any character not specified (for example

      [!abc] matches any character but a, b, or c). If a file name starts with

      "." it is ignored by default but may be matched by specifying it

      explicitly (for example *.gif will not match .a.gif, but .*.gif will). A

      simple example: >>**<<*.txt matches any file that does not start in ''.'' and

      ends with .txt in the Task working directory or any subdirectory. If the

      filename contains a wildcard character it can be escaped using brackets

      (for example abc[*] would match a file named abc*). Note that both and

      / are treated as directory separators on Windows, but only / is on Linux.

      Environment variables (%var% on Windows or $var on Linux) are expanded

      prior to the pattern being applied.'
    isRequired: true
    types:
    - <xref:str>
  - name: destination
    description: Required. The destination for the output file(s).
    isRequired: true
    types:
    - <xref:azure.batch.models.OutputFileDestination>
  - name: upload_options
    description: 'Required. Additional options for the upload

      operation, including under what conditions to perform the upload.'
    isRequired: true
    types:
    - <xref:azure.batch.models.OutputFileUploadOptions>
  keywordOnlyParameters:
  - name: file_pattern
    isRequired: true
  - name: destination
    isRequired: true
  - name: upload_options
    isRequired: true
methods:
- uid: azure.batch.models.OutputFile.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.OutputFile.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.batch.models.OutputFile.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.batch.models.OutputFile.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.batch.models.OutputFile.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.batch.models.OutputFile.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.batch.models.OutputFile.validate
  name: validate
  summary: Validate this model recursively and return a list of ValidationError.
  signature: validate()
  return:
    description: A list of validation error
    types:
    - <xref:list>
