### YamlMime:UniversalReference
api_name: []
items:
- children:
  - uamqp.message.BatchMessage.gather
  - uamqp.message.BatchMessage.batch_format
  - uamqp.message.BatchMessage.max_message_length
  - uamqp.message.BatchMessage.size_offset
  class: uamqp.message.BatchMessage
  fullName: uamqp.message.BatchMessage
  inheritance:
  - inheritance:
    - type: builtins.object
    type: uamqp.message.Message
  langs:
  - python
  module: uamqp.message
  name: BatchMessage
  summary: 'A Batched AMQP message.


    This batch message encodes multiple message bodies into a single message

    to increase through-put over the wire. It requires server-side support

    to unpackage the batched messages and so will not be universally supported.'
  syntax:
    content: BatchMessage(data=None, properties=None, application_properties=None,
      annotations=None, header=None, multi_messages=False, encoding='UTF-8')
    parameters:
    - description: 'An iterable source of data, where each value will be considered
        the

        body of a single message in the batch.'
      id: data
      type:
      - iterable
    - description: 'Properties to add to the message. If multiple messages are created

        these properties will be applied to each message.'
      id: properties
      type:
      - uamqp.message.MessageProperties
    - description: 'Service specific application properties. If multiple messages

        are created these properties will be applied to each message.'
      id: application_properties
      type:
      - dict
    - description: 'Service specific message annotations. If multiple messages are
        created

        these properties will be applied to each message. Keys in the dictionary

        must be *types.AMQPSymbol* or *types.AMQPuLong*.'
      id: annotations
      type:
      - dict
    - description: The message header. This header will be applied to each message
        in the batch.
      id: header
      type:
      - uamqp.message.MessageHeader
    - description: 'Whether to send the supplied data across multiple messages. If
        set to

        *False*, all the data will be sent in a single message, and an error raised
        if the message

        is too large. If set to *True*, the data will automatically be divided across
        multiple messages

        of an appropriate size. The default is *False*.'
      id: multi_messages
      type:
      - bool
    - description: 'The encoding to use for parameters supplied as strings.

        Default is ''UTF-8'''
      id: encoding
      type:
      - str
    variables:
    - description: 'A custom callback to be run on completion of

        the send operation of this message. The callback must take two parameters,

        a result (of type ~uamqp.constants.MessageSendResult) and an error (of type

        Exception). The error parameter may be None if no error ocurred or the error

        information was undetermined.'
      id: on_send_complete
      type:
      - callable[uamqp.constants.MessageSendResult, Exception]
    - description: 'The is the specific message format to inform the service the

        the body should be interpreted as multiple messages. The value is 0x80013700.'
      id: batch_format
      type:
      - int
    - description: 'The maximum data size in bytes to allow in a single message.

        By default this is 256kb. If sending a single batch message, an error will
        be raised

        if the supplied data exceeds this maximum. If sending multiple batch messages,
        this

        value will be used to divide the supplied data between messages.'
      id: max_message_length
      type:
      - int
  type: class
  uid: uamqp.message.BatchMessage
- class: uamqp.message.BatchMessage
  fullName: uamqp.message.BatchMessage.gather
  langs:
  - python
  module: uamqp.message
  name: gather()
  namewithoutparameters: gather
  summary: 'Return all the messages represented by this object. This will convert

    the batch data into individual Message objects, which may be one

    or more if multi_messages is set to *True*.'
  syntax:
    content: gather()
    parameters: []
    return:
      type:
      - list[uamqp.message.Message]
  type: method
  uid: uamqp.message.BatchMessage.gather
- class: uamqp.message.BatchMessage
  fullName: uamqp.message.BatchMessage.batch_format
  langs:
  - python
  module: uamqp.message
  name: batch_format
  syntax:
    content: batch_format = 2147563264
  type: attribute
  uid: uamqp.message.BatchMessage.batch_format
- class: uamqp.message.BatchMessage
  fullName: uamqp.message.BatchMessage.max_message_length
  langs:
  - python
  module: uamqp.message
  name: max_message_length
  syntax:
    content: max_message_length = 1048576
  type: attribute
  uid: uamqp.message.BatchMessage.max_message_length
- class: uamqp.message.BatchMessage
  fullName: uamqp.message.BatchMessage.size_offset
  langs:
  - python
  module: uamqp.message
  name: size_offset
  syntax:
    content: size_offset = 0
  type: attribute
  uid: uamqp.message.BatchMessage.size_offset
references:
- fullName: uamqp.message.BatchMessage.gather
  isExternal: false
  name: gather()
  parent: uamqp.message.BatchMessage
  uid: uamqp.message.BatchMessage.gather
- fullName: callable[uamqp.constants.MessageSendResult, Exception]
  name: callable[MessageSendResult, Exception]
  spec.python:
  - fullName: callable
    name: callable
    uid: callable
  - fullName: '['
    name: '['
  - fullName: uamqp.constants.MessageSendResult
    name: MessageSendResult
    uid: uamqp.constants.MessageSendResult
  - fullName: ', '
    name: ', '
  - fullName: Exception
    name: Exception
    uid: Exception
  - fullName: ']'
    name: ']'
  uid: callable[uamqp.constants.MessageSendResult, Exception]
- fullName: uamqp.message.BatchMessage.batch_format
  isExternal: false
  name: batch_format
  parent: uamqp.message.BatchMessage
  uid: uamqp.message.BatchMessage.batch_format
- fullName: uamqp.message.BatchMessage.max_message_length
  isExternal: false
  name: max_message_length
  parent: uamqp.message.BatchMessage
  uid: uamqp.message.BatchMessage.max_message_length
- fullName: uamqp.message.BatchMessage.size_offset
  isExternal: false
  name: size_offset
  parent: uamqp.message.BatchMessage
  uid: uamqp.message.BatchMessage.size_offset
- fullName: list[uamqp.message.Message]
  name: list[Message]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: uamqp.message.Message
    name: Message
    uid: uamqp.message.Message
  - fullName: ']'
    name: ']'
  uid: list[uamqp.message.Message]
