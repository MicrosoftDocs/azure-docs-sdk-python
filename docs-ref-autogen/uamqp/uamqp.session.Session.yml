### YamlMime:UniversalReference
api_name: []
items:
- children:
  - uamqp.session.Session.destroy
  - uamqp.session.Session.mgmt_request
  class: uamqp.session.Session
  fullName: uamqp.session.Session
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: uamqp.session
  name: Session
  summary: 'An AMQP Session. A Connection can have multiple Sessions, and each

    Session can have multiple Links.'
  syntax:
    content: Session(connection, incoming_window=None, outgoing_window=None, handle_max=None,
      on_attach=None)
    parameters:
    - description: The underlying Connection for the Session.
      id: connection
      type:
      - uamqp.connection.Connection
    - description: The size of the allowed window for incoming messages.
      id: incoming_window
      type:
      - int
    - description: The size of the allowed window for outgoing messages.
      id: outgoing_window
      type:
      - int
    - description: The maximum number of concurrent link handles.
      id: handle_max
      type:
      - int
    - description: 'A callback function to be run on receipt of an ATTACH frame.

        The function must take 4 arguments: source, target, properties and error.'
      id: on_attach
      type:
      - func[uamqp.address.Source, uamqp.address.Target, dict, uamqp.errors.AMQPConnectionError]
    variables:
    - description: The size of the allowed window for incoming messages.
      id: incoming_window
      type:
      - int
    - description: The size of the allowed window for outgoing messages.
      id: outgoing_window
      type:
      - int
    - description: The maximum number of concurrent link handles.
      id: handle_max
      type:
      - int
  type: class
  uid: uamqp.session.Session
- class: uamqp.session.Session
  fullName: uamqp.session.Session.destroy
  langs:
  - python
  module: uamqp.session
  name: destroy()
  namewithoutparameters: destroy
  summary: 'Close any open management Links and close the Session.

    Cleans up and C objects for both mgmt Links and Session.'
  syntax:
    content: destroy()
    parameters: []
  type: method
  uid: uamqp.session.Session.destroy
- class: uamqp.session.Session
  fullName: uamqp.session.Session.mgmt_request
  langs:
  - python
  module: uamqp.session
  name: mgmt_request(message, operation, op_type=None, node=b'$management', **kwargs)
  namewithoutparameters: mgmt_request
  summary: 'Run a request/response operation. These are frequently used for management

    tasks against a $management node, however any node name can be specified

    and the available options will depend on the target service.'
  syntax:
    content: mgmt_request(message, operation, op_type=None, node=b'$management', **kwargs)
    parameters:
    - description: The message to send in the management request.
      id: message
      isRequired: true
      type:
      - uamqp.message.Message
    - description: 'The type of operation to be performed. This value will

        be service-specific, but common values include READ, CREATE and UPDATE.

        This value will be added as an application property on the message.'
      id: operation
      isRequired: true
      type:
      - bytes
    - defaultValue: None
      description: 'The type on which to carry out the operation. This will

        be specific to the entities of the service. This value will be added as

        an application property on the message.'
      id: op_type
      type:
      - bytes
    - defaultValue: b'$management'
      description: The target node. Default is *b"$management"*.
      id: node
      type:
      - bytes
    - description: 'Provide an optional timeout in milliseconds within which a response

        to the management request must be received.'
      id: timeout
      isRequired: true
      type:
      - float
    - description: 'Provide an alternate name for the status code in the

        response body which can vary between services due to the spec still being
        in draft.

        The default is *b"statusCode"*.'
      id: status_code_field
      isRequired: true
      type:
      - bytes
    - description: 'Provide an alternate name for the description in the

        response body which can vary between services due to the spec still being
        in draft.

        The default is *b"statusDescription"*.'
      id: description_fields
      isRequired: true
      type:
      - bytes
    - description: 'The encoding to use for parameters supplied as strings.

        Default is ''UTF-8'''
      id: encoding
      isRequired: true
      type:
      - str
    return:
      type:
      - uamqp.message.Message
  type: method
  uid: uamqp.session.Session.mgmt_request
references:
- fullName: uamqp.session.Session.destroy
  isExternal: false
  name: destroy()
  parent: uamqp.session.Session
  uid: uamqp.session.Session.destroy
- fullName: uamqp.session.Session.mgmt_request
  isExternal: false
  name: mgmt_request(message, operation, op_type=None, node=b'$management', **kwargs)
  parent: uamqp.session.Session
  uid: uamqp.session.Session.mgmt_request
- fullName: func[uamqp.address.Source, uamqp.address.Target, dict, uamqp.errors.AMQPConnectionError]
  name: func[Source, Target, dict, AMQPConnectionError]
  spec.python:
  - fullName: func
    name: func
    uid: func
  - fullName: '['
    name: '['
  - fullName: uamqp.address.Source
    name: Source
    uid: uamqp.address.Source
  - fullName: ', '
    name: ', '
  - fullName: uamqp.address.Target
    name: Target
    uid: uamqp.address.Target
  - fullName: ', '
    name: ', '
  - fullName: dict
    name: dict
    uid: dict
  - fullName: ', '
    name: ', '
  - fullName: uamqp.errors.AMQPConnectionError
    name: AMQPConnectionError
    uid: uamqp.errors.AMQPConnectionError
  - fullName: ']'
    name: ']'
  uid: func[uamqp.address.Source, uamqp.address.Target, dict, uamqp.errors.AMQPConnectionError]
