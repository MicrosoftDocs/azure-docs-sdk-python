### YamlMime:UniversalReference
api_name: []
items:
- children:
  - uamqp.receiver.MessageReceiver.close
  - uamqp.receiver.MessageReceiver.destroy
  - uamqp.receiver.MessageReceiver.get_state
  - uamqp.receiver.MessageReceiver.on_state_changed
  - uamqp.receiver.MessageReceiver.open
  - uamqp.receiver.MessageReceiver.reset_link_credit
  - uamqp.receiver.MessageReceiver.work
  class: uamqp.receiver.MessageReceiver
  fullName: uamqp.receiver.MessageReceiver
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: uamqp.receiver
  name: MessageReceiver
  summary: 'A Message Receiver that opens its own exclsuive Link on an

    existing Session.'
  syntax:
    content: 'MessageReceiver(session, source, target, on_message_received, name=None,
      receive_settle_mode=<ReceiverSettleMode.PeekLock: 1>, send_settle_mode=<SenderSettleMode.Unsettled:
      0>, max_message_size=1048576, prefetch=300, properties=None, error_policy=None,
      debug=False, encoding=''UTF-8'', desired_capabilities=None)'
    parameters:
    - description: The underlying Session with which to receive.
      id: session
      type:
      - uamqp.session.Session
    - description: The AMQP endpoint to receive from.
      id: source
      type:
      - uamqp.address.Source
    - description: The name of target (i.e. the client).
      id: target
      type:
      - str
      - bytes
    - description: A unique name for the receiver. If not specified a GUID will be
        used.
      id: name
      type:
      - str
      - bytes
    - description: 'The mode by which to settle message receive

        operations. If set to *PeekLock*, the receiver will lock a message once received
        until

        the client accepts or rejects the message. If set to *ReceiveAndDelete*, the
        service

        will assume successful receipt of the message and clear it from the queue.
        The

        default is *PeekLock*.'
      id: receive_settle_mode
      type:
      - uamqp.constants.ReceiverSettleMode
    - description: 'The mode by which to settle message send

        operations. If set to *Unsettled*, the client will wait for a confirmation

        from the service that the message was successfully sent. If set to ''Settled'',

        the client will not wait for confirmation and assume success.'
      id: send_settle_mode
      type:
      - uamqp.constants.SenderSettleMode
    - description: "The extension capabilities desired from the peer endpoint.\nTo\
        \ create an desired_capabilities object, please do as follows:\n\n   * 1.\
        \ Create an array of desired capability symbols: *capabilities_symbol_array\
        \ = [types.AMQPSymbol(string)]* \n\n\n   * 2. Transform the array to AMQPValue\
        \ object: *utils.data_factory(types.AMQPArray(capabilities_symbol_array))*"
      id: desired_capabilities
      type:
      - uamqp.c_uamqp.AMQPValue
    - description: The maximum allowed message size negotiated for the Link.
      id: max_message_size
      type:
      - int
    - description: 'The receiver Link credit that determines how many

        messages the Link will attempt to handle per connection iteration.'
      id: prefetch
      type:
      - int
    - description: Metadata to be sent in the Link ATTACH frame.
      id: properties
      type:
      - dict
    - description: 'A policy for parsing errors on link, connection and message

        disposition to determine whether the error should be retryable.'
      id: error_policy
      type:
      - uamqp.errors.ErrorPolicy
    - description: 'Whether to turn on network trace logs. If *True*, trace logs

        will be logged at INFO level. Default is *False*.'
      id: debug
      type:
      - bool
    - description: 'The encoding to use for parameters supplied as strings.

        Default is ''UTF-8'''
      id: encoding
      type:
      - str
    variables:
    - description: 'The mode by which to settle message receive

        operations. If set to *PeekLock*, the receiver will lock a message once received
        until

        the client accepts or rejects the message. If set to *ReceiveAndDelete*, the
        service

        will assume successful receipt of the message and clear it from the queue.
        The

        default is *PeekLock*.'
      id: receive_settle_mode
      type:
      - uamqp.constants.ReceiverSettleMode
    - description: 'The mode by which to settle message send

        operations. If set to *Unsettled*, the client will wait for a confirmation

        from the service that the message was successfully sent. If set to ''Settled'',

        the client will not wait for confirmation and assume success.'
      id: send_settle_mode
      type:
      - uamqp.constants.SenderSettleMode
    - description: The maximum allowed message size negotiated for the Link.
      id: max_message_size
      type:
      - int
  type: class
  uid: uamqp.receiver.MessageReceiver
- class: uamqp.receiver.MessageReceiver
  fullName: uamqp.receiver.MessageReceiver.close
  langs:
  - python
  module: uamqp.receiver
  name: close()
  namewithoutparameters: close
  summary: Close the Receiver, leaving the link intact.
  syntax:
    content: close()
    parameters: []
  type: method
  uid: uamqp.receiver.MessageReceiver.close
- class: uamqp.receiver.MessageReceiver
  fullName: uamqp.receiver.MessageReceiver.destroy
  langs:
  - python
  module: uamqp.receiver
  name: destroy()
  namewithoutparameters: destroy
  summary: Close both the Receiver and the Link. Clean up any C objects.
  syntax:
    content: destroy()
    parameters: []
  type: method
  uid: uamqp.receiver.MessageReceiver.destroy
- class: uamqp.receiver.MessageReceiver
  fullName: uamqp.receiver.MessageReceiver.get_state
  langs:
  - python
  module: uamqp.receiver
  name: get_state()
  namewithoutparameters: get_state
  summary: Get the state of the MessageReceiver and its underlying Link.
  syntax:
    content: get_state()
    parameters: []
    return:
      type:
      - uamqp.constants.MessageReceiverState
  type: method
  uid: uamqp.receiver.MessageReceiver.get_state
- class: uamqp.receiver.MessageReceiver
  fullName: uamqp.receiver.MessageReceiver.on_state_changed
  langs:
  - python
  module: uamqp.receiver
  name: on_state_changed(previous_state, new_state)
  namewithoutparameters: on_state_changed
  summary: 'Callback called whenever the underlying Receiver undergoes a change

    of state. This function can be overridden.'
  syntax:
    content: on_state_changed(previous_state, new_state)
    parameters:
    - description: The previous Receiver state.
      id: previous_state
      isRequired: true
      type:
      - uamqp.constants.MessageReceiverState
    - description: The new Receiver state.
      id: new_state
      isRequired: true
      type:
      - uamqp.constants.MessageReceiverState
  type: method
  uid: uamqp.receiver.MessageReceiver.on_state_changed
- class: uamqp.receiver.MessageReceiver
  fullName: uamqp.receiver.MessageReceiver.open
  langs:
  - python
  module: uamqp.receiver
  name: open()
  namewithoutparameters: open
  summary: Open the MessageReceiver in order to start processing messages.
  syntax:
    content: open()
    parameters: []
  type: method
  uid: uamqp.receiver.MessageReceiver.open
- class: uamqp.receiver.MessageReceiver
  fullName: uamqp.receiver.MessageReceiver.reset_link_credit
  langs:
  - python
  module: uamqp.receiver
  name: reset_link_credit(link_credit, **kwargs)
  namewithoutparameters: reset_link_credit
  summary: Reset the link credit. This method would send flow control frame to the
    sender.
  syntax:
    content: reset_link_credit(link_credit, **kwargs)
    parameters:
    - description: The link credit amount that is requested.
      id: link_credit
      isRequired: true
      type:
      - int
  type: method
  uid: uamqp.receiver.MessageReceiver.reset_link_credit
- class: uamqp.receiver.MessageReceiver
  fullName: uamqp.receiver.MessageReceiver.work
  langs:
  - python
  module: uamqp.receiver
  name: work()
  namewithoutparameters: work
  summary: Update the link status.
  syntax:
    content: work()
    parameters: []
  type: method
  uid: uamqp.receiver.MessageReceiver.work
references:
- fullName: uamqp.receiver.MessageReceiver.close
  isExternal: false
  name: close()
  parent: uamqp.receiver.MessageReceiver
  uid: uamqp.receiver.MessageReceiver.close
- fullName: uamqp.receiver.MessageReceiver.destroy
  isExternal: false
  name: destroy()
  parent: uamqp.receiver.MessageReceiver
  uid: uamqp.receiver.MessageReceiver.destroy
- fullName: uamqp.receiver.MessageReceiver.get_state
  isExternal: false
  name: get_state()
  parent: uamqp.receiver.MessageReceiver
  uid: uamqp.receiver.MessageReceiver.get_state
- fullName: uamqp.receiver.MessageReceiver.on_state_changed
  isExternal: false
  name: on_state_changed(previous_state, new_state)
  parent: uamqp.receiver.MessageReceiver
  uid: uamqp.receiver.MessageReceiver.on_state_changed
- fullName: uamqp.receiver.MessageReceiver.open
  isExternal: false
  name: open()
  parent: uamqp.receiver.MessageReceiver
  uid: uamqp.receiver.MessageReceiver.open
- fullName: uamqp.receiver.MessageReceiver.reset_link_credit
  isExternal: false
  name: reset_link_credit(link_credit, **kwargs)
  parent: uamqp.receiver.MessageReceiver
  uid: uamqp.receiver.MessageReceiver.reset_link_credit
- fullName: uamqp.receiver.MessageReceiver.work
  isExternal: false
  name: work()
  parent: uamqp.receiver.MessageReceiver
  uid: uamqp.receiver.MessageReceiver.work
