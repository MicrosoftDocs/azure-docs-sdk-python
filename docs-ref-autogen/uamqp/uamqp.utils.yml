### YamlMime:PythonModule
uid: uamqp.utils
name: utils
fullName: uamqp.utils
functions:
- uid: uamqp.utils.create_sas_token
  name: create_sas_token
  summary: Create a SAS token.
  signature: create_sas_token(key_name, shared_access_key, scope, expiry=datetime.timedelta(0,
    3600))
  parameters:
  - name: key_name
    description: The username/key name/policy name for the token.
    isRequired: true
    types:
    - <xref:bytes>
  - name: shared_access_key
    description: The shared access key to generate the token from.
    isRequired: true
    types:
    - <xref:bytes>
  - name: scope
    description: The token permissions scope.
    isRequired: true
    types:
    - <xref:bytes>
  - name: expiry
    description: The lifetime of the generated token. Default is 1 hour.
    isRequired: true
    defaultValue: '1:00:00'
    types:
    - <xref:datetime.timedelta>
  return:
    types:
    - <xref:bytes>
- uid: uamqp.utils.data_factory
  name: data_factory
  summary: 'Wrap a Python type in the equivalent C AMQP type.

    If the Python type has already been wrapped in a ~uamqp.types.AMQPType

    object - then this will be used to select the appropriate C type.

    - bool => c_uamqp.BoolValue

    - int => c_uamqp.IntValue, LongValue, DoubleValue

    - str => c_uamqp.StringValue

    - bytes => c_uamqp.BinaryValue

    - list/set/tuple => c_uamqp.ListValue

    - dict => c_uamqp.DictValue (AMQP map)

    - float => c_uamqp.DoubleValue

    - uuid.UUID => c_uamqp.UUIDValue'
  signature: data_factory(value, encoding='UTF-8')
  parameters:
  - name: value
    description: The value to wrap.
    isRequired: true
    types:
    - <xref:uamqp.types.AMQPType>
  - name: encoding
    defaultValue: UTF-8
  return:
    types:
    - <xref:uamqp.c_uamqp.AMQPValue>
- uid: uamqp.utils.get_running_loop
  name: get_running_loop
  signature: get_running_loop()
- uid: uamqp.utils.parse_connection_string
  name: parse_connection_string
  summary: 'Parse a connection string such as those provided by the Azure portal.

    Connection string should be formatted like: *Key=Value;Key=Value;Key=Value*.

    The connection string will be parsed into a dictionary.'
  signature: parse_connection_string(connect_str)
  parameters:
  - name: connect_str
    description: The connection string.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
