### YamlMime:PythonClass
uid: uamqp.authentication.cbs_auth_async.CBSAsyncAuthMixin
name: CBSAsyncAuthMixin
fullName: uamqp.authentication.cbs_auth_async.CBSAsyncAuthMixin
module: uamqp.authentication.cbs_auth_async
inheritances:
- uamqp.authentication.cbs_auth.CBSAuthMixin
summary: Mixin to handle sending and refreshing CBS auth tokens asynchronously.
constructor:
  syntax: CBSAsyncAuthMixin()
methods:
- uid: uamqp.authentication.cbs_auth_async.CBSAsyncAuthMixin.close_authenticator_async
  name: close_authenticator_async
  summary: Close the CBS auth channel and session asynchronously.
  signature: close_authenticator_async()
- uid: uamqp.authentication.cbs_auth_async.CBSAsyncAuthMixin.create_authenticator_async
  name: create_authenticator_async
  summary: 'Create the async AMQP session and the CBS channel with which

    to negotiate the token.'
  signature: create_authenticator_async(connection, debug=False, loop=None, **kwargs)
  parameters:
  - name: connection
    description: 'The underlying AMQP connection on which

      to create the session.'
    isRequired: true
    types:
    - <xref:uamqp.async_ops.connection_async.ConnectionAsync>
  - name: debug
    description: 'Whether to emit network trace logging events for the

      CBS session. Default is *False*. Logging events are set at INFO level.'
    isRequired: true
    defaultValue: 'False'
    types:
    - <xref:bool>
  - name: loop
    description: A user specified event loop.
    isRequired: true
    defaultValue: None
    types:
    - <xref:asycnio.AbstractEventLoop>
  return:
    types:
    - <xref:uamqp.c_uamqp.CBSTokenAuth>
- uid: uamqp.authentication.cbs_auth_async.CBSAsyncAuthMixin.handle_token_async
  name: handle_token_async
  summary: 'This coroutine is called periodically to check the status of the current

    token if there is one, and request a new one if needed.

    If the token request fails, it will be retried according to the retry policy.

    A token refresh will be attempted if the token will expire soon.


    This function will return a tuple of two booleans. The first represents whether

    the token authentication has not completed within it''s given timeout window.
    The

    second indicates whether the token negotiation is still in progress.'
  signature: handle_token_async()
  return:
    types:
    - <xref:tuple>[<xref:bool>, <xref:bool>]
  exceptions:
  - type: ~uamqp.errors.AuthenticationException if the token authentication fails.
  - type: '~uamqp.errors.TokenExpired if the token has expired and cannot be

      refreshed.'
