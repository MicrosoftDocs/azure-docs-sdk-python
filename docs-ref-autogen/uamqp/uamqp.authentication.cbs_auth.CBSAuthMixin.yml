### YamlMime:UniversalReference
api_name: []
items:
- children:
  - uamqp.authentication.cbs_auth.CBSAuthMixin.close_authenticator
  - uamqp.authentication.cbs_auth.CBSAuthMixin.create_authenticator
  - uamqp.authentication.cbs_auth.CBSAuthMixin.handle_token
  - uamqp.authentication.cbs_auth.CBSAuthMixin.update_token
  class: uamqp.authentication.cbs_auth.CBSAuthMixin
  fullName: uamqp.authentication.cbs_auth.CBSAuthMixin
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: uamqp.authentication.cbs_auth
  name: CBSAuthMixin
  summary: Mixin to handle sending and refreshing CBS auth tokens.
  syntax: {}
  type: class
  uid: uamqp.authentication.cbs_auth.CBSAuthMixin
- class: uamqp.authentication.cbs_auth.CBSAuthMixin
  fullName: uamqp.authentication.cbs_auth.CBSAuthMixin.close_authenticator
  langs:
  - python
  module: uamqp.authentication.cbs_auth
  name: close_authenticator()
  namewithoutparameters: close_authenticator
  summary: Close the CBS auth channel and session.
  syntax:
    content: close_authenticator()
    parameters: []
  type: method
  uid: uamqp.authentication.cbs_auth.CBSAuthMixin.close_authenticator
- class: uamqp.authentication.cbs_auth.CBSAuthMixin
  fullName: uamqp.authentication.cbs_auth.CBSAuthMixin.create_authenticator
  langs:
  - python
  module: uamqp.authentication.cbs_auth
  name: create_authenticator(connection, debug=False, **kwargs)
  namewithoutparameters: create_authenticator
  summary: 'Create the AMQP session and the CBS channel with which

    to negotiate the token.'
  syntax:
    content: create_authenticator(connection, debug=False, **kwargs)
    parameters:
    - description: 'The underlying AMQP connection on which

        to create the session.'
      id: connection
      isRequired: true
      type:
      - uamqp.connection.Connection
    - defaultValue: 'False'
      description: 'Whether to emit network trace logging events for the

        CBS session. Default is *False*. Logging events are set at INFO level.'
      id: debug
      type:
      - bool
    return:
      type:
      - uamqp.c_uamqp.CBSTokenAuth
  type: method
  uid: uamqp.authentication.cbs_auth.CBSAuthMixin.create_authenticator
- class: uamqp.authentication.cbs_auth.CBSAuthMixin
  fullName: uamqp.authentication.cbs_auth.CBSAuthMixin.handle_token
  langs:
  - python
  module: uamqp.authentication.cbs_auth
  name: handle_token()
  namewithoutparameters: handle_token
  summary: 'This function is called periodically to check the status of the current

    token if there is one, and request a new one if needed.

    If the token request fails, it will be retried according to the retry policy.

    A token refresh will be attempted if the token will expire soon.


    This function will return a tuple of two booleans. The first represents whether

    the token authentication has not completed within it''s given timeout window.
    The

    second indicates whether the token negotiation is still in progress.'
  syntax:
    content: handle_token()
    parameters: []
    return:
      type:
      - tuple[bool, bool]
  type: method
  uid: uamqp.authentication.cbs_auth.CBSAuthMixin.handle_token
- class: uamqp.authentication.cbs_auth.CBSAuthMixin
  fullName: uamqp.authentication.cbs_auth.CBSAuthMixin.update_token
  langs:
  - python
  module: uamqp.authentication.cbs_auth
  name: update_token()
  namewithoutparameters: update_token
  summary: 'Update a token that is about to expire. This is specific

    to a particular token type, and therefore must be implemented

    in a child class.'
  syntax:
    content: update_token()
    parameters: []
  type: method
  uid: uamqp.authentication.cbs_auth.CBSAuthMixin.update_token
references:
- fullName: uamqp.authentication.cbs_auth.CBSAuthMixin.close_authenticator
  isExternal: false
  name: close_authenticator()
  parent: uamqp.authentication.cbs_auth.CBSAuthMixin
  uid: uamqp.authentication.cbs_auth.CBSAuthMixin.close_authenticator
- fullName: uamqp.authentication.cbs_auth.CBSAuthMixin.create_authenticator
  isExternal: false
  name: create_authenticator(connection, debug=False, **kwargs)
  parent: uamqp.authentication.cbs_auth.CBSAuthMixin
  uid: uamqp.authentication.cbs_auth.CBSAuthMixin.create_authenticator
- fullName: uamqp.authentication.cbs_auth.CBSAuthMixin.handle_token
  isExternal: false
  name: handle_token()
  parent: uamqp.authentication.cbs_auth.CBSAuthMixin
  uid: uamqp.authentication.cbs_auth.CBSAuthMixin.handle_token
- fullName: uamqp.authentication.cbs_auth.CBSAuthMixin.update_token
  isExternal: false
  name: update_token()
  parent: uamqp.authentication.cbs_auth.CBSAuthMixin
  uid: uamqp.authentication.cbs_auth.CBSAuthMixin.update_token
- fullName: tuple[bool, bool]
  name: tuple[bool, bool]
  spec.python:
  - fullName: tuple
    name: tuple
    uid: tuple
  - fullName: '['
    name: '['
  - fullName: bool
    name: bool
    uid: bool
  - fullName: ', '
    name: ', '
  - fullName: bool
    name: bool
    uid: bool
  - fullName: ']'
    name: ']'
  uid: tuple[bool, bool]
