### YamlMime:UniversalReference
api_name: []
items:
- children:
  - uamqp.async_ops.client_async.ReceiveClientAsync.close_async
  - uamqp.async_ops.client_async.ReceiveClientAsync.receive_message_batch_async
  - uamqp.async_ops.client_async.ReceiveClientAsync.receive_messages_async
  - uamqp.async_ops.client_async.ReceiveClientAsync.receive_messages_iter_async
  - uamqp.async_ops.client_async.ReceiveClientAsync.redirect_async
  class: uamqp.async_ops.client_async.ReceiveClientAsync
  fullName: uamqp.async_ops.client_async.ReceiveClientAsync
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: uamqp.client.AMQPClient
    type: uamqp.client.ReceiveClient
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: uamqp.client.AMQPClient
    type: uamqp.async_ops.client_async.AMQPClientAsync
  langs:
  - python
  module: uamqp.async_ops.client_async
  name: ReceiveClientAsync
  summary: An AMQP client for receiving messages asynchronously.
  syntax:
    content: ReceiveClientAsync(source, auth=None, client_name=None, loop=None, debug=False,
      timeout=0, auto_complete=True, error_policy=None, keep_alive_interval=None,
      **kwargs)
    parameters:
    - description: 'The source AMQP service endpoint. This can either be the URI as

        a string or a ~uamqp.address.Source object.'
      id: target
      type:
      - str, bytes
      - uamqp.address.Source
    - description: "Authentication for the connection. This should be one of the subclasses\
        \ of\nuamqp.authentication.AMQPAuth. Currently this includes:\n\n   * uamqp.authentication.SASLAnonymous\
        \ \n\n   * uamqp.authentication.SASLPlain \n\n   * uamqp.authentication.SASTokenAsync\
        \ \n\nIf no authentication is supplied, SASLAnnoymous will be used by default."
      id: auth
      type:
      - uamqp.authentication.common.AMQPAuth
    - description: 'The name for the client, also known as the Container ID.

        If no name is provided, a random GUID will be used.'
      id: client_name
      type:
      - str
      - bytes
    - description: A user specified event loop.
      id: loop
      type:
      - asycnio.AbstractEventLoop
    - description: 'Whether to turn on network trace logs. If *True*, trace logs

        will be logged at INFO level. Default is *False*.'
      id: debug
      type:
      - bool
    - description: 'A timeout in milliseconds. The receiver will shut down if no

        new messages are received after the specified timeout. If set to 0, the receiver

        will never timeout and will continue to listen. The default is 0.'
      id: timeout
      type:
      - float
    - description: 'Whether to automatically settle message received via callback

        or via iterator. If the message has not been explicitly settled after processing

        the message will be accepted. Alternatively, when used with batch receive,
        this setting

        will determine whether the messages are pre-emptively settled during batching,
        or otherwise

        let to the user to be explicitly settled.'
      id: auto_complete
      type:
      - bool
    - description: 'A policy for parsing errors on link, connection and message

        disposition to determine whether the error should be retryable.'
      id: error_policy
      type:
      - uamqp.errors.ErrorPolicy
    - description: 'If set, a thread will be started to keep the connection

        alive during periods of user inactivity. The value will determine how long
        the

        thread will sleep (in seconds) between pinging the connection. If 0 or None,
        no

        thread will be started.'
      id: keep_alive_interval
      type:
      - int
    - description: 'The mode by which to settle message send

        operations. If set to *Unsettled*, the client will wait for a confirmation

        from the service that the message was successfully sent. If set to ''Settled'',

        the client will not wait for confirmation and assume success.'
      id: send_settle_mode
      type:
      - uamqp.constants.SenderSettleMode
    - description: 'The mode by which to settle message receive

        operations. If set to *PeekLock*, the receiver will lock a message once received
        until

        the client accepts or rejects the message. If set to *ReceiveAndDelete*, the
        service

        will assume successful receipt of the message and clear it from the queue.
        The

        default is *PeekLock*.'
      id: receive_settle_mode
      type:
      - uamqp.constants.ReceiverSettleMode
    - description: "The extension capabilities desired from the peer endpoint.\nTo\
        \ create an desired_capabilities object, please do as follows:\n\n   * 1.\
        \ Create an array of desired capability symbols: *capabilities_symbol_array\
        \ = [types.AMQPSymbol(string)]* \n\n\n   * 2. Transform the array to AMQPValue\
        \ object: *utils.data_factory(types.AMQPArray(capabilities_symbol_array))*"
      id: desired_capabilities
      type:
      - uamqp.c_uamqp.AMQPValue
    - description: The maximum allowed message size negotiated for the Link.
      id: max_message_size
      type:
      - int
    - description: Metadata to be sent in the Link ATTACH frame.
      id: link_properties
      type:
      - dict
    - description: 'The receiver Link credit that determines how many

        messages the Link will attempt to handle per connection iteration.

        The default is 300.'
      id: prefetch
      type:
      - int
    - description: Maximum AMQP frame size. Default is 63488 bytes.
      id: max_frame_size
      type:
      - int
    - description: Maximum number of Session channels in the Connection.
      id: channel_max
      type:
      - int
    - description: 'Timeout in milliseconds after which the Connection will close

        if there is no further activity.'
      id: idle_timeout
      type:
      - int
    - description: Connection properties.
      id: properties
      type:
      - dict
    - description: 'Ratio of empty frames to

        idle time for Connections with no activity. Value must be between

        0.0 and 1.0 inclusive. Default is 0.5.'
      id: remote_idle_timeout_empty_frame_send_ratio
      type:
      - float
    - description: The size of the allowed window for incoming messages.
      id: incoming_window
      type:
      - int
    - description: The size of the allowed window for outgoing messages.
      id: outgoing_window
      type:
      - int
    - description: The maximum number of concurrent link handles.
      id: handle_max
      type:
      - int
    - description: 'A callback function to be run on receipt of an ATTACH frame.

        The function must take 4 arguments: source, target, properties and error.'
      id: on_attach
      type:
      - func[uamqp.address.Source, uamqp.address.Target, dict, uamqp.errors.AMQPConnectionError]
    - description: 'The encoding to use for parameters supplied as strings.

        Default is ''UTF-8'''
      id: encoding
      type:
      - str
  type: class
  uid: uamqp.async_ops.client_async.ReceiveClientAsync
- class: uamqp.async_ops.client_async.ReceiveClientAsync
  fullName: uamqp.async_ops.client_async.ReceiveClientAsync.close_async
  langs:
  - python
  module: uamqp.async_ops.client_async
  name: close_async()
  namewithoutparameters: close_async
  summary: Asynchonously close the receive client.
  syntax:
    content: close_async()
    parameters: []
  type: method
  uid: uamqp.async_ops.client_async.ReceiveClientAsync.close_async
- class: uamqp.async_ops.client_async.ReceiveClientAsync
  fullName: uamqp.async_ops.client_async.ReceiveClientAsync.receive_message_batch_async
  langs:
  - python
  module: uamqp.async_ops.client_async
  name: receive_message_batch_async(max_batch_size=None, on_message_received=None,
    timeout=0)
  namewithoutparameters: receive_message_batch_async
  summary: 'Receive a batch of messages asynchronously. This method will return as
    soon as some

    messages are available rather than waiting to achieve a specific batch size, and

    therefore the number of messages returned per call will vary up to the maximum
    allowed.


    If the receive client is configured with *auto_complete=True* then the messages
    received

    in the batch returned by this function will already be settled. Alternatively,
    if

    *auto_complete=False*, then each message will need to be explicitly settled before

    it expires and is released.'
  syntax:
    content: receive_message_batch_async(max_batch_size=None, on_message_received=None,
      timeout=0)
    parameters:
    - defaultValue: None
      description: 'The maximum number of messages that can be returned in

        one call. This value cannot be larger than the prefetch value, and if not
        specified,

        the prefetch value will be used.'
      id: max_batch_size
      type:
      - int
    - defaultValue: None
      description: 'A callback to process messages as they arrive from the

        service. It takes a single argument, a ~uamqp.message.Message object.'
      id: on_message_received
      type:
      - callable[uamqp.message.Message]
    - defaultValue: '0'
      description: 'Timeout in milliseconds for which to wait to receive any messages.

        If no messages are received in this time, an empty list will be returned.
        If set to

        0, the client will continue to wait until at least one message is received.
        The

        default is 0.'
      id: timeout
      type:
      - float
  type: method
  uid: uamqp.async_ops.client_async.ReceiveClientAsync.receive_message_batch_async
- class: uamqp.async_ops.client_async.ReceiveClientAsync
  fullName: uamqp.async_ops.client_async.ReceiveClientAsync.receive_messages_async
  langs:
  - python
  module: uamqp.async_ops.client_async
  name: receive_messages_async(on_message_received)
  namewithoutparameters: receive_messages_async
  summary: 'Receive messages asynchronously. This function will run indefinitely,

    until the client closes either via timeout, error or forced

    interruption (e.g. keyboard interrupt).


    If the receive client is configured with *auto_complete=True* then the messages
    that

    have not been settled on completion of the provided callback will automatically
    be

    accepted provided it has not expired. If an error occurs or the message has expired

    it will be released. Alternatively if *auto_complete=False*, each message will
    need

    to be explicitly settled during the callback, otherwise it will be released.'
  syntax:
    content: receive_messages_async(on_message_received)
    parameters:
    - description: 'A callback to process messages as they arrive from the

        service. It takes a single argument, a ~uamqp.message.Message object.'
      id: on_message_received
      isRequired: true
      type:
      - callable[uamqp.message.Message]
  type: method
  uid: uamqp.async_ops.client_async.ReceiveClientAsync.receive_messages_async
- class: uamqp.async_ops.client_async.ReceiveClientAsync
  fullName: uamqp.async_ops.client_async.ReceiveClientAsync.receive_messages_iter_async
  langs:
  - python
  module: uamqp.async_ops.client_async
  name: receive_messages_iter_async(on_message_received=None)
  namewithoutparameters: receive_messages_iter_async
  summary: 'Receive messages by asynchronous generator. Messages returned in the

    generator have already been accepted - if you wish to add logic to accept

    or reject messages based on custom criteria, pass in a callback.


    If the receive client is configured with *auto_complete=True* then the messages
    received

    from the iterator returned by this function will be automatically settled when
    the iterator

    is incremented. Alternatively, if *auto_complete=False*, then each message will
    need to

    be explicitly settled before it expires and is released.'
  syntax:
    content: receive_messages_iter_async(on_message_received=None)
    parameters:
    - defaultValue: None
      description: 'A callback to process messages as they arrive from the

        service. It takes a single argument, a ~uamqp.message.Message object.'
      id: on_message_received
      type:
      - callable[uamqp.message.Message]
    return:
      type:
      - Generator[uamqp.message.Message]
  type: method
  uid: uamqp.async_ops.client_async.ReceiveClientAsync.receive_messages_iter_async
- class: uamqp.async_ops.client_async.ReceiveClientAsync
  fullName: uamqp.async_ops.client_async.ReceiveClientAsync.redirect_async
  langs:
  - python
  module: uamqp.async_ops.client_async
  name: redirect_async(redirect, auth)
  namewithoutparameters: redirect_async
  summary: 'Redirect the client endpoint using a Link DETACH redirect

    response.'
  syntax:
    content: redirect_async(redirect, auth)
    parameters:
    - description: The Link DETACH redirect details.
      id: redirect
      isRequired: true
      type:
      - uamqp.errors.LinkRedirect
    - description: Authentication credentials to the redirected endpoint.
      id: auth
      isRequired: true
      type:
      - uamqp.authentication.common.AMQPAuth
  type: method
  uid: uamqp.async_ops.client_async.ReceiveClientAsync.redirect_async
references:
- fullName: uamqp.async_ops.client_async.ReceiveClientAsync.close_async
  isExternal: false
  name: close_async()
  parent: uamqp.async_ops.client_async.ReceiveClientAsync
  uid: uamqp.async_ops.client_async.ReceiveClientAsync.close_async
- fullName: uamqp.async_ops.client_async.ReceiveClientAsync.receive_message_batch_async
  isExternal: false
  name: receive_message_batch_async(max_batch_size=None, on_message_received=None,
    timeout=0)
  parent: uamqp.async_ops.client_async.ReceiveClientAsync
  uid: uamqp.async_ops.client_async.ReceiveClientAsync.receive_message_batch_async
- fullName: uamqp.async_ops.client_async.ReceiveClientAsync.receive_messages_async
  isExternal: false
  name: receive_messages_async(on_message_received)
  parent: uamqp.async_ops.client_async.ReceiveClientAsync
  uid: uamqp.async_ops.client_async.ReceiveClientAsync.receive_messages_async
- fullName: uamqp.async_ops.client_async.ReceiveClientAsync.receive_messages_iter_async
  isExternal: false
  name: receive_messages_iter_async(on_message_received=None)
  parent: uamqp.async_ops.client_async.ReceiveClientAsync
  uid: uamqp.async_ops.client_async.ReceiveClientAsync.receive_messages_iter_async
- fullName: uamqp.async_ops.client_async.ReceiveClientAsync.redirect_async
  isExternal: false
  name: redirect_async(redirect, auth)
  parent: uamqp.async_ops.client_async.ReceiveClientAsync
  uid: uamqp.async_ops.client_async.ReceiveClientAsync.redirect_async
- fullName: str, bytes
  name: str, bytes
  spec.python:
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: bytes
    name: bytes
    uid: bytes
  uid: str, bytes
- fullName: func[uamqp.address.Source, uamqp.address.Target, dict, uamqp.errors.AMQPConnectionError]
  name: func[Source, Target, dict, AMQPConnectionError]
  spec.python:
  - fullName: func
    name: func
    uid: func
  - fullName: '['
    name: '['
  - fullName: uamqp.address.Source
    name: Source
    uid: uamqp.address.Source
  - fullName: ', '
    name: ', '
  - fullName: uamqp.address.Target
    name: Target
    uid: uamqp.address.Target
  - fullName: ', '
    name: ', '
  - fullName: dict
    name: dict
    uid: dict
  - fullName: ', '
    name: ', '
  - fullName: uamqp.errors.AMQPConnectionError
    name: AMQPConnectionError
    uid: uamqp.errors.AMQPConnectionError
  - fullName: ']'
    name: ']'
  uid: func[uamqp.address.Source, uamqp.address.Target, dict, uamqp.errors.AMQPConnectionError]
- fullName: callable[uamqp.message.Message]
  name: callable[Message]
  spec.python:
  - fullName: callable
    name: callable
    uid: callable
  - fullName: '['
    name: '['
  - fullName: uamqp.message.Message
    name: Message
    uid: uamqp.message.Message
  - fullName: ']'
    name: ']'
  uid: callable[uamqp.message.Message]
- fullName: Generator[uamqp.message.Message]
  name: Generator[Message]
  spec.python:
  - fullName: Generator
    name: Generator
    uid: Generator
  - fullName: '['
    name: '['
  - fullName: uamqp.message.Message
    name: Message
    uid: uamqp.message.Message
  - fullName: ']'
    name: ']'
  uid: Generator[uamqp.message.Message]
