### YamlMime:UniversalReference
api_name: []
items:
- children:
  - uamqp.message.Message.accept
  - uamqp.message.Message.decode_from_bytes
  - uamqp.message.Message.encode_message
  - uamqp.message.Message.gather
  - uamqp.message.Message.get_data
  - uamqp.message.Message.get_message
  - uamqp.message.Message.get_message_encoded_size
  - uamqp.message.Message.modify
  - uamqp.message.Message.reject
  - uamqp.message.Message.release
  - uamqp.message.Message.settled
  class: uamqp.message.Message
  fullName: uamqp.message.Message
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: uamqp.message
  name: Message
  summary: 'An AMQP message.


    When sending, depending on the nature of the data,

    different body encoding will be used. If the data is str or bytes,

    a single part DataBody will be sent. If the data is a list of str/bytes,

    a multipart DataBody will be sent. Any other type of list or any other

    type of data will be sent as a ValueBody.

    An empty payload will also be sent as a ValueBody.'
  syntax:
    content: Message(body=None, properties=None, application_properties=None, annotations=None,
      header=None, msg_format=None, message=None, settler=None, delivery_no=None,
      encoding='UTF-8')
    parameters:
    - description: The data to send in the message.
      id: body
      type:
      - Any Python data type.
    - description: Properties to add to the message.
      id: properties
      type:
      - uamqp.message.MessageProperties
    - description: Service specific application properties.
      id: application_properties
      type:
      - dict
    - description: 'Service specific message annotations. Keys in the dictionary

        must be *types.AMQPSymbol* or *types.AMQPuLong*.'
      id: annotations
      type:
      - dict
    - description: The message header.
      id: header
      type:
      - uamqp.message.MessageHeader
    - description: A custom message format. Default is 0.
      id: msg_format
      type:
      - int
    - description: 'Internal only. This is used to wrap an existing message

        that has been received from an AMQP service. If specified, all other

        parameters will be ignored.'
      id: message
      type:
      - uamqp.c_uamqp.cMessage
    - description: 'Internal only. This is used when wrapping an existing message

        that has been received from an AMQP service. Should only be specified together

        with *message* and is to settle the message.'
      id: settler
      type:
      - callable[uamqp.errors.MessageResponse]
    - description: 'Internal only. This is used when wrapping an existing message

        that has been received from an AMQP service. Should only be specified together

        with *message* and specifies the messages client delivery number.'
      id: delivery_no
    - description: 'The encoding to use for parameters supplied as strings.

        Default is ''UTF-8'''
      id: encoding
      type:
      - str
    variables:
    - description: 'A custom callback to be run on completion of

        the send operation of this message. The callback must take two parameters,

        a result (of type *MessageSendResult*) and an error (of type

        Exception). The error parameter may be None if no error ocurred or the error

        information was undetermined.'
      id: on_send_complete
      type:
      - callable[uamqp.constants.MessageSendResult, Exception]
  type: class
  uid: uamqp.message.Message
- class: uamqp.message.Message
  fullName: uamqp.message.Message.accept
  langs:
  - python
  module: uamqp.message
  name: accept()
  namewithoutparameters: accept
  summary: 'Send a response disposition to the service to indicate that

    a received message has been accepted. If the client is running in PeekLock

    mode, the service will wait on this disposition. Otherwise it will

    be ignored. Returns *True* is message was accepted, or *False* if the message

    was already settled.'
  syntax:
    content: accept()
    parameters: []
    return:
      type:
      - bool
  type: method
  uid: uamqp.message.Message.accept
- class: uamqp.message.Message
  fullName: uamqp.message.Message.decode_from_bytes
  langs:
  - python
  module: uamqp.message
  name: decode_from_bytes(data)
  namewithoutparameters: decode_from_bytes
  summary: 'Decode an AMQP message from a bytearray.

    The returned message will not have a delivery context and

    therefore will be considered to be in an "already settled" state.'
  syntax:
    content: decode_from_bytes(data)
    parameters:
    - description: The AMQP wire-encoded bytes to decode.
      id: data
      isRequired: true
      type:
      - bytes
      - bytearray
    - id: data
      isRequired: true
  type: method
  uid: uamqp.message.Message.decode_from_bytes
- class: uamqp.message.Message
  fullName: uamqp.message.Message.encode_message
  langs:
  - python
  module: uamqp.message
  name: encode_message()
  namewithoutparameters: encode_message
  summary: Encode message to AMQP wire-encoded bytearray.
  syntax:
    content: encode_message()
    parameters: []
    return:
      type:
      - bytearray
  type: method
  uid: uamqp.message.Message.encode_message
- class: uamqp.message.Message
  fullName: uamqp.message.Message.gather
  langs:
  - python
  module: uamqp.message
  name: gather()
  namewithoutparameters: gather
  summary: 'Return all the messages represented by this object.

    This will always be a list of a single message.'
  syntax:
    content: gather()
    parameters: []
    return:
      type:
      - list[uamqp.message.Message]
  type: method
  uid: uamqp.message.Message.gather
- class: uamqp.message.Message
  fullName: uamqp.message.Message.get_data
  langs:
  - python
  module: uamqp.message
  name: get_data()
  namewithoutparameters: get_data
  summary: 'Get the body data of the message. The format may vary depending

    on the body type.'
  syntax:
    content: get_data()
    parameters: []
    return:
      type:
      - generator
  type: method
  uid: uamqp.message.Message.get_data
- class: uamqp.message.Message
  fullName: uamqp.message.Message.get_message
  langs:
  - python
  module: uamqp.message
  name: get_message()
  namewithoutparameters: get_message
  summary: Get the underlying C message from this object.
  syntax:
    content: get_message()
    parameters: []
    return:
      type:
      - uamqp.c_uamqp.cMessage
  type: method
  uid: uamqp.message.Message.get_message
- class: uamqp.message.Message
  fullName: uamqp.message.Message.get_message_encoded_size
  langs:
  - python
  module: uamqp.message
  name: get_message_encoded_size()
  namewithoutparameters: get_message_encoded_size
  summary: 'Pre-emptively get the size of the message once it has been encoded

    to go over the wire so we can raise an error if the message will be

    rejected for being to large.


    This method is not available for messages that have been received.'
  syntax:
    content: get_message_encoded_size()
    parameters: []
    return:
      type:
      - int
  type: method
  uid: uamqp.message.Message.get_message_encoded_size
- class: uamqp.message.Message
  fullName: uamqp.message.Message.modify
  langs:
  - python
  module: uamqp.message
  name: modify(failed, deliverable, annotations=None)
  namewithoutparameters: modify
  summary: 'Send a response disposition to the service to indicate that

    a received message has been modified. If the client is running in PeekLock

    mode, the service will wait on this disposition. Otherwise it will

    be ignored. Returns *True* is message was modified, or *False* if the message

    was already settled.'
  syntax:
    content: modify(failed, deliverable, annotations=None)
    parameters:
    - description: 'Whether this delivery of this message failed. This does not

        indicate whether subsequence deliveries of this message would also fail.'
      id: failed
      isRequired: true
      type:
      - bool
    - description: 'Whether this message will be deliverable to this client

        on subsequent deliveries - i.e. whether delivery is retryable.'
      id: deliverable
      isRequired: true
      type:
      - bool
    - defaultValue: None
      description: Annotations to attach to response.
      id: annotations
      type:
      - dict
    return:
      type:
      - bool
  type: method
  uid: uamqp.message.Message.modify
- class: uamqp.message.Message
  fullName: uamqp.message.Message.reject
  langs:
  - python
  module: uamqp.message
  name: reject(condition=None, description=None, info=None)
  namewithoutparameters: reject
  summary: 'Send a response disposition to the service to indicate that

    a received message has been rejected. If the client is running in PeekLock

    mode, the service will wait on this disposition. Otherwise it will

    be ignored. A rejected message will increment the messages delivery count.

    Returns *True* is message was rejected, or *False* if the message

    was already settled.'
  syntax:
    content: reject(condition=None, description=None, info=None)
    parameters:
    - defaultValue: None
      description: The AMQP rejection code. By default this is *amqp:internal-error*.
      id: condition
      type:
      - bytes
      - str
    - defaultValue: None
      description: A description/reason to accompany the rejection.
      id: description
      type:
      - bytes
      - str
    - defaultValue: None
      description: Information about the error condition.
      id: info
      type:
      - dict
    return:
      type:
      - bool
  type: method
  uid: uamqp.message.Message.reject
- class: uamqp.message.Message
  fullName: uamqp.message.Message.release
  langs:
  - python
  module: uamqp.message
  name: release()
  namewithoutparameters: release
  summary: 'Send a response disposition to the service to indicate that

    a received message has been released. If the client is running in PeekLock

    mode, the service will wait on this disposition. Otherwise it will

    be ignored. A released message will not incremenet the messages

    delivery count. Returns *True* is message was released, or *False* if the message

    was already settled.'
  syntax:
    content: release()
    parameters: []
    return:
      type:
      - bool
  type: method
  uid: uamqp.message.Message.release
- class: uamqp.message.Message
  fullName: uamqp.message.Message.settled
  langs:
  - python
  module: uamqp.message
  name: settled
  summary: 'Whether the message transaction for this message has been completed.

    If this message is to be sent, the message will be *settled=True* once a

    disposition has been received from the service.

    If this message has been received, the message will be *settled=True* once

    a disposition has been sent to the service.'
  syntax:
    return:
      type:
      - bool
  type: attribute
  uid: uamqp.message.Message.settled
references:
- fullName: uamqp.message.Message.accept
  isExternal: false
  name: accept()
  parent: uamqp.message.Message
  uid: uamqp.message.Message.accept
- fullName: uamqp.message.Message.decode_from_bytes
  isExternal: false
  name: decode_from_bytes(data)
  parent: uamqp.message.Message
  uid: uamqp.message.Message.decode_from_bytes
- fullName: uamqp.message.Message.encode_message
  isExternal: false
  name: encode_message()
  parent: uamqp.message.Message
  uid: uamqp.message.Message.encode_message
- fullName: uamqp.message.Message.gather
  isExternal: false
  name: gather()
  parent: uamqp.message.Message
  uid: uamqp.message.Message.gather
- fullName: uamqp.message.Message.get_data
  isExternal: false
  name: get_data()
  parent: uamqp.message.Message
  uid: uamqp.message.Message.get_data
- fullName: uamqp.message.Message.get_message
  isExternal: false
  name: get_message()
  parent: uamqp.message.Message
  uid: uamqp.message.Message.get_message
- fullName: uamqp.message.Message.get_message_encoded_size
  isExternal: false
  name: get_message_encoded_size()
  parent: uamqp.message.Message
  uid: uamqp.message.Message.get_message_encoded_size
- fullName: uamqp.message.Message.modify
  isExternal: false
  name: modify(failed, deliverable, annotations=None)
  parent: uamqp.message.Message
  uid: uamqp.message.Message.modify
- fullName: uamqp.message.Message.reject
  isExternal: false
  name: reject(condition=None, description=None, info=None)
  parent: uamqp.message.Message
  uid: uamqp.message.Message.reject
- fullName: uamqp.message.Message.release
  isExternal: false
  name: release()
  parent: uamqp.message.Message
  uid: uamqp.message.Message.release
- fullName: uamqp.message.Message.settled
  isExternal: false
  name: settled
  parent: uamqp.message.Message
  uid: uamqp.message.Message.settled
- fullName: callable[uamqp.constants.MessageSendResult, Exception]
  name: callable[MessageSendResult, Exception]
  spec.python:
  - fullName: callable
    name: callable
    uid: callable
  - fullName: '['
    name: '['
  - fullName: uamqp.constants.MessageSendResult
    name: MessageSendResult
    uid: uamqp.constants.MessageSendResult
  - fullName: ', '
    name: ', '
  - fullName: Exception
    name: Exception
    uid: Exception
  - fullName: ']'
    name: ']'
  uid: callable[uamqp.constants.MessageSendResult, Exception]
- fullName: callable[uamqp.errors.MessageResponse]
  name: callable[MessageResponse]
  spec.python:
  - fullName: callable
    name: callable
    uid: callable
  - fullName: '['
    name: '['
  - fullName: uamqp.errors.MessageResponse
    name: MessageResponse
    uid: uamqp.errors.MessageResponse
  - fullName: ']'
    name: ']'
  uid: callable[uamqp.errors.MessageResponse]
- fullName: list[uamqp.message.Message]
  name: list[Message]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: uamqp.message.Message
    name: Message
    uid: uamqp.message.Message
  - fullName: ']'
    name: ']'
  uid: list[uamqp.message.Message]
