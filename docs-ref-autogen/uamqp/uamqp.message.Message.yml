### YamlMime:PythonClass
uid: uamqp.message.Message
name: Message
fullName: uamqp.message.Message
module: uamqp.message
inheritances:
- builtins.object
summary: 'An AMQP message.


  When sending, if body type information is not provided,

  then depending on the nature of the data,

  different body encoding will be used. If the data is str or bytes,

  a single part DataBody will be sent. If the data is a list of str/bytes,

  a multipart DataBody will be sent. Any other type of list or any other

  type of data will be sent as a ValueBody.

  An empty payload will also be sent as a ValueBody.

  If body type information is provided, then the Message will use the given

  body type to encode the data or raise error if the data doesn''t match the body
  type.'
constructor:
  syntax: Message(body=None, properties=None, application_properties=None, annotations=None,
    header=None, msg_format=None, message=None, settler=None, delivery_no=None, encoding='UTF-8',
    body_type=None, footer=None, delivery_annotations=None)
  parameters:
  - name: body
    description: The data to send in the message.
    isRequired: true
    types:
    - <xref:Any Python data type.>
  - name: properties
    description: Properties to add to the message.
    isRequired: true
    types:
    - <xref:uamqp.message.MessageProperties>
  - name: application_properties
    description: Service specific application properties.
    isRequired: true
    types:
    - <xref:dict>
  - name: annotations
    description: 'Service specific message annotations. Keys in the dictionary

      must be *types.AMQPSymbol* or *types.AMQPuLong*.'
    isRequired: true
    types:
    - <xref:dict>
  - name: header
    description: The message header.
    isRequired: true
    types:
    - <xref:uamqp.message.MessageHeader>
  - name: msg_format
    description: A custom message format. Default is 0.
    isRequired: true
    types:
    - <xref:int>
  - name: message
    description: 'Internal only. This is used to wrap an existing message

      that has been received from an AMQP service. If specified, all other

      parameters will be ignored.'
    isRequired: true
    types:
    - <xref:uamqp.c_uamqp.cMessage>
  - name: settler
    description: 'Internal only. This is used when wrapping an existing message

      that has been received from an AMQP service. Should only be specified together

      with *message* and is to settle the message.'
    isRequired: true
    types:
    - <xref:callable>[<xref:uamqp.errors.MessageResponse>]
  - name: delivery_no
    description: 'Internal only. This is used when wrapping an existing message

      that has been received from an AMQP service. Should only be specified together

      with *message* and specifies the messages client delivery number.'
    isRequired: true
  - name: encoding
    description: 'The encoding to use for parameters supplied as strings.

      Default is ''UTF-8'''
    isRequired: true
    types:
    - <xref:str>
  - name: body_type
    description: 'The AMQP body type used to specify the type of the body section
      of an amqp message.

      By default is None which means depending on the nature of the data,

      different body encoding will be used. If the data is str or bytes,

      a single part DataBody will be sent. If the data is a list of str/bytes,

      a multipart DataBody will be sent. Any other type of list or any other

      type of data will be sent as a ValueBody. An empty payload will also be sent
      as a ValueBody.

      Please check class ~uamqp.MessageBodyType for usage information of each body
      type.'
    isRequired: true
    types:
    - <xref:uamqp.MessageBodyType>
  - name: footer
    description: The message footer.
    isRequired: true
    types:
    - <xref:dict>
  - name: delivery_annotations
    description: Service specific delivery annotations.
    isRequired: true
    types:
    - <xref:dict>
variables:
- description: 'A custom callback to be run on completion of

    the send operation of this message. The callback must take two parameters,

    a result (of type *MessageSendResult*) and an error (of type

    Exception). The error parameter may be None if no error ocurred or the error

    information was undetermined.'
  name: on_send_complete
  types:
  - <xref:callable>[<xref:uamqp.constants.MessageSendResult>, <xref:Exception>]
methods:
- uid: uamqp.message.Message.accept
  name: accept
  summary: 'Send a response disposition to the service to indicate that

    a received message has been accepted. If the client is running in PeekLock

    mode, the service will wait on this disposition. Otherwise it will

    be ignored. Returns *True* is message was accepted, or *False* if the message

    was already settled.'
  signature: accept()
  return:
    types:
    - <xref:bool>
  exceptions:
  - type: TypeError if the message is being sent rather than received.
- uid: uamqp.message.Message.decode_from_bytes
  name: decode_from_bytes
  summary: 'Decode an AMQP message from a bytearray.

    The returned message will not have a delivery context and

    therefore will be considered to be in an "already settled" state.'
  signature: decode_from_bytes(data)
  parameters:
  - name: data
    description: The AMQP wire-encoded bytes to decode.
    isRequired: true
    types:
    - <xref:bytes>
    - <xref:bytearray>
  - name: data
    isRequired: true
- uid: uamqp.message.Message.encode_message
  name: encode_message
  summary: Encode message to AMQP wire-encoded bytearray.
  signature: encode_message()
  return:
    types:
    - <xref:bytearray>
- uid: uamqp.message.Message.gather
  name: gather
  summary: 'Return all the messages represented by this object.

    This will always be a list of a single message.'
  signature: gather()
  return:
    types:
    - <xref:list>[<xref:uamqp.message.Message>]
- uid: uamqp.message.Message.get_data
  name: get_data
  summary: 'Get the body data of the message. The format may vary depending

    on the body type.'
  signature: get_data()
  return:
    types:
    - <xref:generator>
- uid: uamqp.message.Message.get_message
  name: get_message
  summary: Get the underlying C message from this object.
  signature: get_message()
  return:
    types:
    - <xref:uamqp.c_uamqp.cMessage>
- uid: uamqp.message.Message.get_message_encoded_size
  name: get_message_encoded_size
  summary: 'Pre-emptively get the size of the message once it has been encoded

    to go over the wire so we can raise an error if the message will be

    rejected for being to large.


    This method is not available for messages that have been received.'
  signature: get_message_encoded_size()
  return:
    types:
    - <xref:int>
- uid: uamqp.message.Message.modify
  name: modify
  summary: 'Send a response disposition to the service to indicate that

    a received message has been modified. If the client is running in PeekLock

    mode, the service will wait on this disposition. Otherwise it will

    be ignored. Returns *True* is message was modified, or *False* if the message

    was already settled.'
  signature: modify(failed, deliverable, annotations=None)
  parameters:
  - name: failed
    description: 'Whether this delivery of this message failed. This does not

      indicate whether subsequence deliveries of this message would also fail.'
    isRequired: true
    types:
    - <xref:bool>
  - name: deliverable
    description: 'Whether this message will be deliverable to this client

      on subsequent deliveries - i.e. whether delivery is retryable.'
    isRequired: true
    types:
    - <xref:bool>
  - name: annotations
    description: Annotations to attach to response.
    isRequired: true
    defaultValue: None
    types:
    - <xref:dict>
  return:
    types:
    - <xref:bool>
  exceptions:
  - type: TypeError if the message is being sent rather than received.
- uid: uamqp.message.Message.reject
  name: reject
  summary: 'Send a response disposition to the service to indicate that

    a received message has been rejected. If the client is running in PeekLock

    mode, the service will wait on this disposition. Otherwise it will

    be ignored. A rejected message will increment the messages delivery count.

    Returns *True* is message was rejected, or *False* if the message

    was already settled.'
  signature: reject(condition=None, description=None, info=None)
  parameters:
  - name: condition
    description: The AMQP rejection code. By default this is *amqp:internal-error*.
    isRequired: true
    defaultValue: None
    types:
    - <xref:bytes>
    - <xref:str>
  - name: description
    description: A description/reason to accompany the rejection.
    isRequired: true
    defaultValue: None
    types:
    - <xref:bytes>
    - <xref:str>
  - name: info
    description: Information about the error condition.
    isRequired: true
    defaultValue: None
    types:
    - <xref:dict>
  return:
    types:
    - <xref:bool>
  exceptions:
  - type: TypeError if the message is being sent rather than received.
- uid: uamqp.message.Message.release
  name: release
  summary: 'Send a response disposition to the service to indicate that

    a received message has been released. If the client is running in PeekLock

    mode, the service will wait on this disposition. Otherwise it will

    be ignored. A released message will not incremenet the messages

    delivery count. Returns *True* is message was released, or *False* if the message

    was already settled.'
  signature: release()
  return:
    types:
    - <xref:bool>
  exceptions:
  - type: TypeError if the message is being sent rather than received.
attributes:
- uid: uamqp.message.Message.annotations
  name: annotations
- uid: uamqp.message.Message.application_properties
  name: application_properties
- uid: uamqp.message.Message.delivery_annotations
  name: delivery_annotations
- uid: uamqp.message.Message.footer
  name: footer
- uid: uamqp.message.Message.header
  name: header
- uid: uamqp.message.Message.properties
  name: properties
- uid: uamqp.message.Message.settled
  name: settled
  summary: 'Whether the message transaction for this message has been completed.

    If this message is to be sent, the message will be *settled=True* once a

    disposition has been received from the service.

    If this message has been received, the message will be *settled=True* once

    a disposition has been sent to the service.'
  return:
    types:
    - <xref:bool>
