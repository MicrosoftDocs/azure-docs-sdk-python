### YamlMime:UniversalReference
api_name: []
items:
- children:
  - uamqp.async_ops.receiver_async.MessageReceiverAsync.close_async
  - uamqp.async_ops.receiver_async.MessageReceiverAsync.destroy_async
  - uamqp.async_ops.receiver_async.MessageReceiverAsync.open_async
  - uamqp.async_ops.receiver_async.MessageReceiverAsync.reset_link_credit_async
  - uamqp.async_ops.receiver_async.MessageReceiverAsync.work_async
  class: uamqp.async_ops.receiver_async.MessageReceiverAsync
  fullName: uamqp.async_ops.receiver_async.MessageReceiverAsync
  inheritance:
  - inheritance:
    - type: builtins.object
    type: uamqp.receiver.MessageReceiver
  langs:
  - python
  module: uamqp.async_ops.receiver_async
  name: MessageReceiverAsync
  summary: 'An asynchronous Message Receiver that opens its own exclsuive Link on
    an

    existing Session.'
  syntax:
    content: 'MessageReceiverAsync(session, source, target, on_message_received, name=None,
      receive_settle_mode=<ReceiverSettleMode.PeekLock: 1>, send_settle_mode=<SenderSettleMode.Unsettled:
      0>, max_message_size=1048576, prefetch=300, properties=None, error_policy=None,
      debug=False, encoding=''UTF-8'', desired_capabilities=None, loop=None)'
    parameters:
    - description: The underlying Session with which to receive.
      id: session
      type:
      - uamqp.session.Session
    - description: The AMQP endpoint to receive from.
      id: source
      type:
      - uamqp.address.Source
    - description: The name of target (i.e. the client).
      id: target
      type:
      - str
      - bytes
    - description: A unique name for the receiver. If not specified a GUID will be
        used.
      id: name
      type:
      - str
      - bytes
    - description: 'The mode by which to settle message receive

        operations. If set to *PeekLock*, the receiver will lock a message once received
        until

        the client accepts or rejects the message. If set to *ReceiveAndDelete*, the
        service

        will assume successful receipt of the message and clear it from the queue.
        The

        default is *PeekLock*.'
      id: receive_settle_mode
      type:
      - uamqp.constants.ReceiverSettleMode
    - description: 'The mode by which to settle message send

        operations. If set to *Unsettled*, the client will wait for a confirmation

        from the service that the message was successfully sent. If set to ''Settled'',

        the client will not wait for confirmation and assume success.'
      id: send_settle_mode
      type:
      - uamqp.constants.SenderSettleMode
    - description: "The extension capabilities desired from the peer endpoint.\nTo\
        \ create an desired_capabilities object, please do as follows:\n\n   * 1.\
        \ Create an array of desired capability symbols: *capabilities_symbol_array\
        \ = [types.AMQPSymbol(string)]* \n\n\n   * 2. Transform the array to AMQPValue\
        \ object: *utils.data_factory(types.AMQPArray(capabilities_symbol_array))*"
      id: desired_capabilities
      type:
      - uamqp.c_uamqp.AMQPValue
    - description: The maximum allowed message size negotiated for the Link.
      id: max_message_size
      type:
      - int
    - description: 'The receiver Link credit that determines how many

        messages the Link will attempt to handle per connection iteration.'
      id: prefetch
      type:
      - int
    - description: Metadata to be sent in the Link ATTACH frame.
      id: properties
      type:
      - dict
    - description: 'A policy for parsing errors on link, connection and message

        disposition to determine whether the error should be retryable.'
      id: error_policy
      type:
      - uamqp.errors.ErrorPolicy
    - description: 'Whether to turn on network trace logs. If *True*, trace logs

        will be logged at INFO level. Default is *False*.'
      id: debug
      type:
      - bool
    - description: 'The encoding to use for parameters supplied as strings.

        Default is ''UTF-8'''
      id: encoding
      type:
      - str
    - description: A user specified event loop.
      id: loop
      type:
      - asycnio.AbstractEventLoop
    variables:
    - description: 'The mode by which to settle message receive

        operations. If set to *PeekLock*, the receiver will lock a message once received
        until

        the client accepts or rejects the message. If set to *ReceiveAndDelete*, the
        service

        will assume successful receipt of the message and clear it from the queue.
        The

        default is *PeekLock*.'
      id: receive_settle_mode
      type:
      - uamqp.constants.ReceiverSettleMode
    - description: 'The mode by which to settle message send

        operations. If set to *Unsettled*, the client will wait for a confirmation

        from the service that the message was successfully sent. If set to ''Settled'',

        the client will not wait for confirmation and assume success.'
      id: send_settle_mode
      type:
      - uamqp.constants.SenderSettleMode
    - description: The maximum allowed message size negotiated for the Link.
      id: max_message_size
      type:
      - int
  type: class
  uid: uamqp.async_ops.receiver_async.MessageReceiverAsync
- class: uamqp.async_ops.receiver_async.MessageReceiverAsync
  fullName: uamqp.async_ops.receiver_async.MessageReceiverAsync.close_async
  langs:
  - python
  module: uamqp.async_ops.receiver_async
  name: close_async()
  namewithoutparameters: close_async
  summary: Close the Receiver asynchronously, leaving the link intact.
  syntax:
    content: close_async()
    parameters: []
  type: method
  uid: uamqp.async_ops.receiver_async.MessageReceiverAsync.close_async
- class: uamqp.async_ops.receiver_async.MessageReceiverAsync
  fullName: uamqp.async_ops.receiver_async.MessageReceiverAsync.destroy_async
  langs:
  - python
  module: uamqp.async_ops.receiver_async
  name: destroy_async()
  namewithoutparameters: destroy_async
  summary: Asynchronously close both the Receiver and the Link. Clean up any C objects.
  syntax:
    content: destroy_async()
    parameters: []
  type: method
  uid: uamqp.async_ops.receiver_async.MessageReceiverAsync.destroy_async
- class: uamqp.async_ops.receiver_async.MessageReceiverAsync
  fullName: uamqp.async_ops.receiver_async.MessageReceiverAsync.open_async
  langs:
  - python
  module: uamqp.async_ops.receiver_async
  name: open_async()
  namewithoutparameters: open_async
  summary: 'Asynchronously open the MessageReceiver in order to start

    processing messages.'
  syntax:
    content: open_async()
    parameters: []
  type: method
  uid: uamqp.async_ops.receiver_async.MessageReceiverAsync.open_async
- class: uamqp.async_ops.receiver_async.MessageReceiverAsync
  fullName: uamqp.async_ops.receiver_async.MessageReceiverAsync.reset_link_credit_async
  langs:
  - python
  module: uamqp.async_ops.receiver_async
  name: reset_link_credit_async(link_credit, **kwargs)
  namewithoutparameters: reset_link_credit_async
  summary: Asynchronously reset the link credit. This method would send flow control
    frame to the sender.
  syntax:
    content: reset_link_credit_async(link_credit, **kwargs)
    parameters:
    - description: The link credit amount that is requested.
      id: link_credit
      isRequired: true
      type:
      - int
  type: method
  uid: uamqp.async_ops.receiver_async.MessageReceiverAsync.reset_link_credit_async
- class: uamqp.async_ops.receiver_async.MessageReceiverAsync
  fullName: uamqp.async_ops.receiver_async.MessageReceiverAsync.work_async
  langs:
  - python
  module: uamqp.async_ops.receiver_async
  name: work_async()
  namewithoutparameters: work_async
  summary: Update the link status.
  syntax:
    content: work_async()
    parameters: []
  type: method
  uid: uamqp.async_ops.receiver_async.MessageReceiverAsync.work_async
references:
- fullName: uamqp.async_ops.receiver_async.MessageReceiverAsync.close_async
  isExternal: false
  name: close_async()
  parent: uamqp.async_ops.receiver_async.MessageReceiverAsync
  uid: uamqp.async_ops.receiver_async.MessageReceiverAsync.close_async
- fullName: uamqp.async_ops.receiver_async.MessageReceiverAsync.destroy_async
  isExternal: false
  name: destroy_async()
  parent: uamqp.async_ops.receiver_async.MessageReceiverAsync
  uid: uamqp.async_ops.receiver_async.MessageReceiverAsync.destroy_async
- fullName: uamqp.async_ops.receiver_async.MessageReceiverAsync.open_async
  isExternal: false
  name: open_async()
  parent: uamqp.async_ops.receiver_async.MessageReceiverAsync
  uid: uamqp.async_ops.receiver_async.MessageReceiverAsync.open_async
- fullName: uamqp.async_ops.receiver_async.MessageReceiverAsync.reset_link_credit_async
  isExternal: false
  name: reset_link_credit_async(link_credit, **kwargs)
  parent: uamqp.async_ops.receiver_async.MessageReceiverAsync
  uid: uamqp.async_ops.receiver_async.MessageReceiverAsync.reset_link_credit_async
- fullName: uamqp.async_ops.receiver_async.MessageReceiverAsync.work_async
  isExternal: false
  name: work_async()
  parent: uamqp.async_ops.receiver_async.MessageReceiverAsync
  uid: uamqp.async_ops.receiver_async.MessageReceiverAsync.work_async
