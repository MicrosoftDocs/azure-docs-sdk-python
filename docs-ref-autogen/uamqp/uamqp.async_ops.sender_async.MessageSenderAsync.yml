### YamlMime:UniversalReference
api_name: []
items:
- children:
  - uamqp.async_ops.sender_async.MessageSenderAsync.close_async
  - uamqp.async_ops.sender_async.MessageSenderAsync.destroy_async
  - uamqp.async_ops.sender_async.MessageSenderAsync.open_async
  - uamqp.async_ops.sender_async.MessageSenderAsync.send_async
  - uamqp.async_ops.sender_async.MessageSenderAsync.work_async
  class: uamqp.async_ops.sender_async.MessageSenderAsync
  fullName: uamqp.async_ops.sender_async.MessageSenderAsync
  inheritance:
  - inheritance:
    - type: builtins.object
    type: uamqp.sender.MessageSender
  langs:
  - python
  module: uamqp.async_ops.sender_async
  name: MessageSenderAsync
  summary: 'An asynchronous Message Sender that opens its own exclsuive Link on an

    existing Session.'
  syntax:
    content: 'MessageSenderAsync(session, source, target, name=None, send_settle_mode=<SenderSettleMode.Unsettled:
      0>, receive_settle_mode=<ReceiverSettleMode.PeekLock: 1>, max_message_size=1048576,
      link_credit=None, properties=None, error_policy=None, debug=False, encoding=''UTF-8'',
      loop=None)'
    parameters:
    - description: The underlying Session with which to send.
      id: session
      type:
      - uamqp.async_ops.session_async.SessionAsync
    - description: The name of source (i.e. the client).
      id: source
      type:
      - str
      - bytes
    - description: The AMQP endpoint to send to.
      id: target
      type:
      - uamqp.address.Target
    - description: A unique name for the sender. If not specified a GUID will be used.
      id: name
      type:
      - str
      - bytes
    - description: 'The mode by which to settle message send

        operations. If set to *Unsettled*, the client will wait for a confirmation

        from the service that the message was successfully send. If set to ''Settled'',

        the client will not wait for confirmation and assume success.'
      id: send_settle_mode
      type:
      - uamqp.constants.SenderSettleMode
    - description: 'The mode by which to settle message receive

        operations. If set to *PeekLock*, the receiver will lock a message once received
        until

        the client accepts or rejects the message. If set to *ReceiveAndDelete*, the
        service

        will assume successful receipt of the message and clear it from the queue.
        The

        default is *PeekLock*.'
      id: receive_settle_mode
      type:
      - uamqp.constants.ReceiverSettleMode
    - description: The maximum allowed message size negotiated for the Link.
      id: max_message_size
      type:
      - int
    - description: 'The sender Link credit that determines how many

        messages the Link will attempt to handle per connection iteration.'
      id: link_credit
      type:
      - int
    - description: Metadata to be sent in the Link ATTACH frame.
      id: properties
      type:
      - dict
    - description: 'A policy for parsing errors on link, connection and message

        disposition to determine whether the error should be retryable.'
      id: error_policy
      type:
      - uamqp.errors.ErrorPolicy
    - description: 'Whether to turn on network trace logs. If *True*, trace logs

        will be logged at INFO level. Default is *False*.'
      id: debug
      type:
      - bool
    - description: 'The encoding to use for parameters supplied as strings.

        Default is ''UTF-8'''
      id: encoding
      type:
      - str
    - description: A user specified event loop.
      id: loop
      type:
      - asycnio.AbstractEventLoop
    variables:
    - description: 'The sender Link credit that determines how many

        messages the Link will attempt to handle per connection iteration.'
      id: link_credit
      type:
      - int
    - description: Metadata to be sent in the Link ATTACH frame.
      id: properties
      type:
      - dict
    - description: 'The mode by which to settle message send

        operations. If set to *Unsettled*, the client will wait for a confirmation

        from the service that the message was successfully send. If set to ''Settled'',

        the client will not wait for confirmation and assume success.'
      id: send_settle_mode
      type:
      - uamqp.constants.SenderSettleMode
    - description: 'The mode by which to settle message receive

        operations. If set to *PeekLock*, the receiver will lock a message once received
        until

        the client accepts or rejects the message. If set to *ReceiveAndDelete*, the
        service

        will assume successful receipt of the message and clear it from the queue.
        The

        default is *PeekLock*.'
      id: receive_settle_mode
      type:
      - uamqp.constants.ReceiverSettleMode
    - description: The maximum allowed message size negotiated for the Link.
      id: max_message_size
      type:
      - int
  type: class
  uid: uamqp.async_ops.sender_async.MessageSenderAsync
- class: uamqp.async_ops.sender_async.MessageSenderAsync
  fullName: uamqp.async_ops.sender_async.MessageSenderAsync.close_async
  langs:
  - python
  module: uamqp.async_ops.sender_async
  name: close_async()
  namewithoutparameters: close_async
  summary: Close the sender asynchronously, leaving the link intact.
  syntax:
    content: close_async()
    parameters: []
  type: method
  uid: uamqp.async_ops.sender_async.MessageSenderAsync.close_async
- class: uamqp.async_ops.sender_async.MessageSenderAsync
  fullName: uamqp.async_ops.sender_async.MessageSenderAsync.destroy_async
  langs:
  - python
  module: uamqp.async_ops.sender_async
  name: destroy_async()
  namewithoutparameters: destroy_async
  summary: Asynchronously close both the Sender and the Link. Clean up any C objects.
  syntax:
    content: destroy_async()
    parameters: []
  type: method
  uid: uamqp.async_ops.sender_async.MessageSenderAsync.destroy_async
- class: uamqp.async_ops.sender_async.MessageSenderAsync
  fullName: uamqp.async_ops.sender_async.MessageSenderAsync.open_async
  langs:
  - python
  module: uamqp.async_ops.sender_async
  name: open_async()
  namewithoutparameters: open_async
  summary: 'Asynchronously open the MessageSender in order to start

    processing messages.'
  syntax:
    content: open_async()
    parameters: []
  type: method
  uid: uamqp.async_ops.sender_async.MessageSenderAsync.open_async
- class: uamqp.async_ops.sender_async.MessageSenderAsync
  fullName: uamqp.async_ops.sender_async.MessageSenderAsync.send_async
  langs:
  - python
  module: uamqp.async_ops.sender_async
  name: send_async(message, callback, timeout=0)
  namewithoutparameters: send_async
  summary: 'Add a single message to the internal pending queue to be processed

    by the Connection without waiting for it to be sent.'
  syntax:
    content: send_async(message, callback, timeout=0)
    parameters:
    - description: The message to send.
      id: message
      isRequired: true
      type:
      - uamqp.message.Message
    - description: 'The callback to be run once a disposition is received

        in receipt of the message. The callback must take three arguments, the message,

        the send result and the optional delivery condition (exception).'
      id: callback
      isRequired: true
      type:
      - callable[uamqp.message.Message, uamqp.constants.MessageSendResult, uamqp.errors.MessageException]
    - defaultValue: '0'
      description: 'An expiry time for the message added to the queue. If the

        message is not sent within this timeout it will be discarded with an error

        state. If set to 0, the message will not expire. The default is 0.'
      id: timeout
  type: method
  uid: uamqp.async_ops.sender_async.MessageSenderAsync.send_async
- class: uamqp.async_ops.sender_async.MessageSenderAsync
  fullName: uamqp.async_ops.sender_async.MessageSenderAsync.work_async
  langs:
  - python
  module: uamqp.async_ops.sender_async
  name: work_async()
  namewithoutparameters: work_async
  summary: Update the link status.
  syntax:
    content: work_async()
    parameters: []
  type: method
  uid: uamqp.async_ops.sender_async.MessageSenderAsync.work_async
references:
- fullName: uamqp.async_ops.sender_async.MessageSenderAsync.close_async
  isExternal: false
  name: close_async()
  parent: uamqp.async_ops.sender_async.MessageSenderAsync
  uid: uamqp.async_ops.sender_async.MessageSenderAsync.close_async
- fullName: uamqp.async_ops.sender_async.MessageSenderAsync.destroy_async
  isExternal: false
  name: destroy_async()
  parent: uamqp.async_ops.sender_async.MessageSenderAsync
  uid: uamqp.async_ops.sender_async.MessageSenderAsync.destroy_async
- fullName: uamqp.async_ops.sender_async.MessageSenderAsync.open_async
  isExternal: false
  name: open_async()
  parent: uamqp.async_ops.sender_async.MessageSenderAsync
  uid: uamqp.async_ops.sender_async.MessageSenderAsync.open_async
- fullName: uamqp.async_ops.sender_async.MessageSenderAsync.send_async
  isExternal: false
  name: send_async(message, callback, timeout=0)
  parent: uamqp.async_ops.sender_async.MessageSenderAsync
  uid: uamqp.async_ops.sender_async.MessageSenderAsync.send_async
- fullName: uamqp.async_ops.sender_async.MessageSenderAsync.work_async
  isExternal: false
  name: work_async()
  parent: uamqp.async_ops.sender_async.MessageSenderAsync
  uid: uamqp.async_ops.sender_async.MessageSenderAsync.work_async
- fullName: callable[uamqp.message.Message, uamqp.constants.MessageSendResult, uamqp.errors.MessageException]
  name: callable[Message, MessageSendResult, MessageException]
  spec.python:
  - fullName: callable
    name: callable
    uid: callable
  - fullName: '['
    name: '['
  - fullName: uamqp.message.Message
    name: Message
    uid: uamqp.message.Message
  - fullName: ', '
    name: ', '
  - fullName: uamqp.constants.MessageSendResult
    name: MessageSendResult
    uid: uamqp.constants.MessageSendResult
  - fullName: ', '
    name: ', '
  - fullName: uamqp.errors.MessageException
    name: MessageException
    uid: uamqp.errors.MessageException
  - fullName: ']'
    name: ']'
  uid: callable[uamqp.message.Message, uamqp.constants.MessageSendResult, uamqp.errors.MessageException]
