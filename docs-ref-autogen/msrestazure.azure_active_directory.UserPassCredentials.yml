### YamlMime:UniversalReference
api_name: []
items:
- children:
  - msrestazure.azure_active_directory.UserPassCredentials.retrieve_session
  - msrestazure.azure_active_directory.UserPassCredentials.set_token
  class: msrestazure.azure_active_directory.UserPassCredentials
  fullName: msrestazure.azure_active_directory.UserPassCredentials
  inheritance:
  - inheritance:
    - inheritance:
      - inheritance:
        - inheritance:
          - type: builtins.object
          type: msrest.authentication.Authentication
        type: msrest.authentication.BasicTokenAuthentication
      type: msrest.authentication.OAuthTokenAuthentication
    type: msrestazure.azure_active_directory.AADMixin
  langs:
  - python
  module: msrestazure.azure_active_directory
  name: UserPassCredentials
  source:
    id: UserPassCredentials
    path: msrestazure-0.4.29-py3.6.egg\msrestazure\azure_active_directory.py
    remote:
      branch: master
      path: msrestazure-0.4.29-py3.6.egg\msrestazure\azure_active_directory.py
      repo: https://github.com/Azure/msrestazure-for-python.git
    startLine: 336
  summary: "Credentials object for Headless Authentication,\ni.e. AAD authentication\
    \ via username and password.\n\nHeadless Auth requires an AAD login (no a Live\
    \ ID) that already has\npermission to access the resource e.g. an organization\
    \ account, and\nthat 2-factor auth be disabled.\n\nOptional kwargs may include:\n\
    \n* cloud_environment (msrestazure.azure_cloud.Cloud): A targeted cloud environment\
    \ \n\n* china (bool): Configure auth for China-based service, default is 'False'.\
    \ \n\n* tenant (str): Alternative tenant, default is 'common'. \n\n* auth_uri\
    \ (str): Alternative authentication endpoint. \n\n* token_uri (str): Alternative\
    \ token retrieval endpoint. \n\n* resource (str): Alternative authentication resource,\
    \ default is '[https://management.core.windows.net/](https://management.core.windows.net/)'.\
    \ \n\n* verify (bool): Verify secure connection, default is 'True'. \n\n* keyring\
    \ (str): Name of local token cache, default is 'AzureAAD'. \n\n* timeout (int):\
    \ Timeout of the request in seconds. \n\n* cached (bool): If true, will not attempt\
    \ to collect a token, which can then be populated later from a cached token. \n\
    \n* proxies (dict): Dictionary mapping protocol or protocol and hostname to the\
    \ URL of the proxy. \n\n\n"
  syntax:
    content: UserPassCredentials(username, password, client_id=None, secret=None,
      **kwargs)
    parameters:
    - description: 'Account username.

        '
      id: username
      type:
      - str
    - description: 'Account password.

        '
      id: password
      type:
      - str
    - description: 'Client ID, if not set, Xplat Client ID

        will be used.

        '
      id: client_id
      type:
      - str
    - description: 'Client secret, only if required by server.

        '
      id: secret
      type:
      - str
  type: class
  uid: msrestazure.azure_active_directory.UserPassCredentials
- class: msrestazure.azure_active_directory.UserPassCredentials
  fullName: msrestazure.azure_active_directory.UserPassCredentials.retrieve_session
  langs:
  - python
  module: msrestazure.azure_active_directory
  name: retrieve_session
  source:
    id: retrieve_session
    path: msrestazure-0.4.29-py3.6.egg\msrestazure\azure_active_directory.py
    remote:
      branch: master
      path: msrestazure-0.4.29-py3.6.egg\msrestazure\azure_active_directory.py
      repo: https://github.com/Azure/msrestazure-for-python.git
    startLine: 385
  summary: 'Create ServicePrincipalCredentials from a cached token if it has not

    yet expired.

    '
  syntax:
    content: retrieve_session(username, client_id=None)
    parameters:
    - id: cls
    - id: username
    - defaultValue: None
      id: client_id
  type: method
  uid: msrestazure.azure_active_directory.UserPassCredentials.retrieve_session
- class: msrestazure.azure_active_directory.UserPassCredentials
  fullName: msrestazure.azure_active_directory.UserPassCredentials.set_token
  langs:
  - python
  module: msrestazure.azure_active_directory
  name: set_token
  source:
    id: set_token
    path: msrestazure-0.4.29-py3.6.egg\msrestazure\azure_active_directory.py
    remote:
      branch: master
      path: msrestazure-0.4.29-py3.6.egg\msrestazure\azure_active_directory.py
      repo: https://github.com/Azure/msrestazure-for-python.git
    startLine: 395
  summary: 'Get token using Username/Password credentials.

    '
  syntax:
    content: set_token()
    parameters:
    - id: self
  type: method
  uid: msrestazure.azure_active_directory.UserPassCredentials.set_token
references:
- fullName: msrestazure.azure_active_directory.UserPassCredentials.retrieve_session
  isExternal: false
  name: retrieve_session
  parent: msrestazure.azure_active_directory.UserPassCredentials
  uid: msrestazure.azure_active_directory.UserPassCredentials.retrieve_session
- fullName: msrestazure.azure_active_directory.UserPassCredentials.set_token
  isExternal: false
  name: set_token
  parent: msrestazure.azure_active_directory.UserPassCredentials
  uid: msrestazure.azure_active_directory.UserPassCredentials.set_token
