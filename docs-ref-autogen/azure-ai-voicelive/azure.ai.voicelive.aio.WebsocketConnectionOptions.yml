### YamlMime:PythonClass
uid: azure.ai.voicelive.aio.WebsocketConnectionOptions
name: WebsocketConnectionOptions
fullName: azure.ai.voicelive.aio.WebsocketConnectionOptions
module: azure.ai.voicelive.aio
summary: 'Transport-agnostic WebSocket connection options for VoiceLive.


  These control common WS behaviors (compression, message size limits,

  timeouts, ping/pong handling). Unless specified, defaults are determined

  by the underlying WebSocket library.'
constructor:
  syntax: WebsocketConnectionOptions()
  keywordOnlyParameters:
  - name: compression
    description: 'Enable per-message compression. Use `True` to enable,

      `False` to disable. Advanced users may pass an `int` to select a zlib

      window value if supported by the transport.'
  - name: max_msg_size
    description: 'Maximum message size in bytes before the client closes

      the connection.'
  - name: heartbeat
    description: Interval in seconds between keep-alive pings.
  - name: autoclose
    description: Automatically close when a close frame is received.
  - name: autoping
    description: Automatically respond to ping frames with pong frames.
  - name: receive_timeout
    description: 'Max seconds to wait for a single incoming message

      on an established WebSocket.'
  - name: close_timeout
    description: Max seconds to wait for a graceful close handshake.
  - name: handshake_timeout
    description: 'Max seconds for connection establishment

      (DNS/TCP/TLS + WS upgrade). Note: with aiohttp this is applied on the

      ClientSession (not a ws_connect kwarg), so must be handled by the caller.'
  - name: vendor_options
    description: 'Optional implementation-specific options passed

      through as-is to the underlying library (not part of the stable API).'
methods:
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.clear
  name: clear
  signature: clear() -> None.  Remove all items from D.
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.copy
  name: copy
  signature: copy() -> a shallow copy of D
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.fromkeys
  name: fromkeys
  summary: Create a new dictionary with keys from iterable and values set to value.
  signature: fromkeys(value=None, /)
  positionalOnlyParameters:
  - name: iterable
    isRequired: true
  - name: value
    defaultValue: None
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.get
  name: get
  summary: Return the value for key if key is in the dictionary, else default.
  signature: get(key, default=None, /)
  positionalOnlyParameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.items
  name: items
  signature: items() -> a set-like object providing a view on D's items
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.keys
  name: keys
  signature: keys() -> a set-like object providing a view on D's keys
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.pop
  name: pop
  summary: 'If the key is not found, return the default if given; otherwise,

    raise a KeyError.'
  signature: pop(k, [d]) -> v, remove specified key and return the corresponding value.
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.popitem
  name: popitem
  summary: 'Remove and return a (key, value) pair as a 2-tuple.


    Pairs are returned in LIFO (last-in, first-out) order.

    Raises KeyError if the dict is empty.'
  signature: popitem()
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.setdefault
  name: setdefault
  summary: 'Insert key with a value of default if key is not in the dictionary.


    Return the value for key if key is in the dictionary, else default.'
  signature: setdefault(key, default=None, /)
  positionalOnlyParameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.update
  name: update
  summary: 'If E is present and has a .keys() method, then does:  for k in E: D[k]
    = E[k]

    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] =
    v

    In either case, this is followed by: for k in F:  D[k] = F[k]'
  signature: update([E], **F) -> None.  Update D from dict/iterable E and F.
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.values
  name: values
  signature: values() -> an object providing a view on D's values
attributes:
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.autoclose
  name: autoclose
  signature: 'autoclose: bool'
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.autoping
  name: autoping
  signature: 'autoping: bool'
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.close_timeout
  name: close_timeout
  signature: 'close_timeout: float'
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.compression
  name: compression
  signature: 'compression: bool | int'
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.handshake_timeout
  name: handshake_timeout
  signature: 'handshake_timeout: float'
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.heartbeat
  name: heartbeat
  signature: 'heartbeat: float'
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.max_msg_size
  name: max_msg_size
  signature: 'max_msg_size: int'
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.receive_timeout
  name: receive_timeout
  signature: 'receive_timeout: float'
- uid: azure.ai.voicelive.aio.WebsocketConnectionOptions.vendor_options
  name: vendor_options
  signature: 'vendor_options: Mapping[str, Any]'
