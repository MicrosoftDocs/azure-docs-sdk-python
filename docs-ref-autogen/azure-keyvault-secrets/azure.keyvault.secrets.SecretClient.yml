### YamlMime:PythonClass
uid: azure.keyvault.secrets.SecretClient
name: SecretClient
fullName: azure.keyvault.secrets.SecretClient
module: azure.keyvault.secrets
inheritances:
- azure.keyvault.secrets._shared.client_base.KeyVaultClientBase
summary: A high-level interface for managing a vault's secrets.
constructor:
  syntax: 'SecretClient(vault_url: str, credential: TokenCredential, **kwargs: Any)'
  parameters:
  - name: vault_url
    description: 'URL of the vault the client will access. This is also called the
      vault''s "DNS Name".

      You should validate that this URL references a valid Key Vault resource. See
      [https://aka.ms/azsdk/blog/vault-uri](https://aka.ms/azsdk/blog/vault-uri)

      for details.'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'An object which can provide an access token for the vault, such
      as a credential from

      <xref:azure.identity>'
    isRequired: true
    types:
    - <xref:azure.core.credentials.TokenCredential>
  keywordOnlyParameters:
  - name: api_version
    description: Version of the service API to use. Defaults to the most recent.
    types:
    - <xref:azure.keyvault.secrets.ApiVersion>
    - <xref:str>
  - name: verify_challenge_resource
    description: 'Whether to verify the authentication challenge resource matches
      the Key

      Vault domain. Defaults to True.'
    types:
    - <xref:bool>
methods:
- uid: azure.keyvault.secrets.SecretClient.backup_secret
  name: backup_secret
  summary: Back up a secret in a protected form useable only by Azure Key Vault. Requires
    secrets/backup permission.
  signature: 'backup_secret(name: str, **kwargs: Any) -> bytes'
  parameters:
  - name: name
    description: Name of the secret to back up
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The backup result, in a protected bytes format that can only be used
      by Azure Key Vault.
    types:
    - <xref:bytes>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.HttpResponseError
    description: the former if the secret doesn't exist; the latter for other errors
- uid: azure.keyvault.secrets.SecretClient.begin_delete_secret
  name: begin_delete_secret
  summary: 'Delete all versions of a secret. Requires secrets/delete permission.


    When this method returns Key Vault has begun deleting the secret. Deletion may
    take several seconds in a vault

    with soft-delete enabled. This method therefore returns a poller enabling you
    to wait for deletion to complete.'
  signature: 'begin_delete_secret(name: str, **kwargs: Any) -> LROPoller[DeletedSecret]'
  parameters:
  - name: name
    description: Name of the secret to delete.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'A poller for the delete operation. The poller''s *result* method
      returns the

      <xref:azure.keyvault.secrets.DeletedSecret> without waiting for deletion to
      complete. If the vault has

      soft-delete enabled and you want to permanently delete the secret with <xref:azure.keyvault.secrets.SecretClient.purge_deleted_secret>,
      call

      the poller''s *wait* method first. It will block until the deletion is complete.
      The *wait* method requires

      secrets/get permission.'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.keyvault.secrets.DeletedSecret>]
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.HttpResponseError
    description: the former if the secret doesn't exist; the latter for other errors
- uid: azure.keyvault.secrets.SecretClient.begin_recover_deleted_secret
  name: begin_recover_deleted_secret
  summary: 'Recover a deleted secret to its latest version. Possible only in a vault
    with soft-delete enabled.


    Requires the secrets/recover permission. If the vault does not have soft-delete
    enabled,

    <xref:azure.keyvault.secrets.SecretClient.begin_delete_secret> is permanent, and
    this method will return an error. Attempting to recover a

    non-deleted secret will also return an error. When this method returns Key Vault
    has begun recovering the

    secret. Recovery may take several seconds. This method therefore returns a poller
    enabling you to wait for

    recovery to complete. Waiting is only necessary when you want to use the recovered
    secret in another operation

    immediately.'
  signature: 'begin_recover_deleted_secret(name: str, **kwargs: Any) -> LROPoller[SecretProperties]'
  parameters:
  - name: name
    description: Name of the deleted secret to recover
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'A poller for the recovery operation. The poller''s *result* method
      returns the recovered secret''s

      <xref:azure.keyvault.secrets.SecretProperties> without waiting for recovery
      to complete. If you want to

      use the recovered secret immediately, call the poller''s *wait* method, which
      blocks until the secret is

      ready to use. The *wait* method requires secrets/get permission.'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.keyvault.secrets.SecretProperties>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.keyvault.secrets.SecretClient.close
  name: close
  summary: 'Close sockets opened by the client.


    Calling this method is unnecessary when using the client as a context manager.'
  signature: close() -> None
- uid: azure.keyvault.secrets.SecretClient.get_deleted_secret
  name: get_deleted_secret
  summary: Get a deleted secret. Possible only in vaults with soft-delete enabled.
    Requires secrets/get permission.
  signature: 'get_deleted_secret(name: str, **kwargs: Any) -> DeletedSecret'
  parameters:
  - name: name
    description: Name of the deleted secret
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The deleted secret.
    types:
    - <xref:azure.keyvault.secrets.DeletedSecret>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.HttpResponseError
    description: the former if the deleted secret doesn't exist; the latter for other
      errors
- uid: azure.keyvault.secrets.SecretClient.get_secret
  name: get_secret
  summary: Get a secret. Requires the secrets/get permission.
  signature: 'get_secret(name: str, version: str | None = None, **kwargs: Any) ->
    KeyVaultSecret'
  parameters:
  - name: name
    description: The name of the secret
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: (optional) Version of the secret to get. If unspecified, gets the
      latest version.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The fetched secret.
    types:
    - <xref:azure.keyvault.secrets.KeyVaultSecret>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.HttpResponseError
    description: the former if the secret doesn't exist; the latter for other errors
- uid: azure.keyvault.secrets.SecretClient.list_deleted_secrets
  name: list_deleted_secrets
  summary: 'Lists all deleted secrets. Possible only in vaults with soft-delete enabled.


    Requires secrets/list permission.'
  signature: 'list_deleted_secrets(**kwargs: Any) -> ItemPaged[DeletedSecret]'
  return:
    description: An iterator of deleted secrets, excluding their values
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.keyvault.secrets.DeletedSecret>]
- uid: azure.keyvault.secrets.SecretClient.list_properties_of_secret_versions
  name: list_properties_of_secret_versions
  summary: 'List properties of all versions of a secret, excluding their values. Requires
    secrets/list permission.


    List items don''t include secret values. Use <xref:azure.keyvault.secrets.SecretClient.get_secret>
    to get a secret''s value.'
  signature: 'list_properties_of_secret_versions(name: str, **kwargs: Any) -> ItemPaged[SecretProperties]'
  parameters:
  - name: name
    description: Name of the secret
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterator of secrets, excluding their values
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.keyvault.secrets.SecretProperties>]
- uid: azure.keyvault.secrets.SecretClient.list_properties_of_secrets
  name: list_properties_of_secrets
  summary: 'List identifiers and attributes of all secrets in the vault. Requires
    secrets/list permission.


    List items don''t include secret values. Use <xref:azure.keyvault.secrets.SecretClient.get_secret>
    to get a secret''s value.'
  signature: 'list_properties_of_secrets(**kwargs: Any) -> ItemPaged[SecretProperties]'
  return:
    description: An iterator of secrets, excluding their values
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.keyvault.secrets.SecretProperties>]
- uid: azure.keyvault.secrets.SecretClient.purge_deleted_secret
  name: purge_deleted_secret
  summary: 'Permanently deletes a deleted secret. Possible only in vaults with soft-delete
    enabled.


    Performs an irreversible deletion of the specified secret, without possibility
    for recovery. The operation is

    not available if the <xref:azure.keyvault.secrets.SecretProperties.recovery_level>
    does not specify

    ''Purgeable''. This method is only necessary for purging a secret before its

    <xref:azure.keyvault.secrets.DeletedSecret.scheduled_purge_date>.


    Requires secrets/purge permission.'
  signature: 'purge_deleted_secret(name: str, **kwargs: Any) -> None'
  parameters:
  - name: name
    description: Name of the deleted secret to purge
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
    \   # if the vault has soft-delete enabled, purge permanently deletes the secret\n\
    \   # (with soft-delete disabled, begin_delete_secret is permanent)\n   secret_client.purge_deleted_secret(\"\
    secret-name\")\n   ````\n"
- uid: azure.keyvault.secrets.SecretClient.restore_secret_backup
  name: restore_secret_backup
  summary: Restore a backed up secret. Requires the secrets/restore permission.
  signature: 'restore_secret_backup(backup: bytes, **kwargs: Any) -> SecretProperties'
  parameters:
  - name: backup
    description: A secret backup as returned by <xref:azure.keyvault.secrets.SecretClient.backup_secret>
    isRequired: true
    types:
    - <xref:bytes>
  return:
    description: The restored secret
    types:
    - <xref:azure.keyvault.secrets.SecretProperties>
  exceptions:
  - type: azure.core.exceptions.ResourceExistsError
  - type: azure.core.exceptions.HttpResponseError
    description: the former if the secret's name is already in use; the latter for
      other errors
- uid: azure.keyvault.secrets.SecretClient.send_request
  name: send_request
  summary: 'Runs a network request using the client''s existing pipeline.


    The request URL can be relative to the vault URL. The service API version used
    for the request is the same as

    the client''s unless otherwise specified. This method does not raise if the response
    is an error; to raise an

    exception, call *raise_for_status()* on the returned response object. For more
    information about how to send

    custom requests with this method, see [https://aka.ms/azsdk/dpcodegen/python/send_request](https://aka.ms/azsdk/dpcodegen/python/send_request).'
  signature: 'send_request(request: HttpRequest, *, stream: bool = False, **kwargs:
    Any) -> HttpResponse'
  parameters:
  - name: request
    description: The network request you want to make.
    isRequired: true
    types:
    - <xref:azure.core.rest.HttpRequest>
  keywordOnlyParameters:
  - name: stream
    description: Whether the response payload will be streamed. Defaults to False.
    types:
    - <xref:bool>
  return:
    description: The response of your network call. Does not do error handling on
      your response.
    types:
    - <xref:azure.core.rest.HttpResponse>
- uid: azure.keyvault.secrets.SecretClient.set_secret
  name: set_secret
  summary: 'Set a secret value. If *name* is in use, create a new version of the secret.
    If not, create a new secret.


    Requires secrets/set permission.'
  signature: 'set_secret(name: str, value: str, **kwargs: Any) -> KeyVaultSecret'
  parameters:
  - name: name
    description: The name of the secret
    isRequired: true
    types:
    - <xref:str>
  - name: value
    description: The value of the secret
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: enabled
    description: Whether the secret is enabled for use.
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:str>]
    - <xref:None>
  - name: content_type
    description: An arbitrary string indicating the type of the secret, e.g. 'password'
    types:
    - <xref:str>
  - name: not_before
    description: Not before date of the secret in UTC
    types:
    - <xref:datetime.datetime>
  - name: expires_on
    description: Expiry date of the secret in UTC
    types:
    - <xref:datetime.datetime>
  return:
    description: The created or updated secret.
    types:
    - <xref:azure.keyvault.secrets.KeyVaultSecret>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.keyvault.secrets.SecretClient.update_secret_properties
  name: update_secret_properties
  summary: 'Update properties of a secret other than its value. Requires secrets/set
    permission.


    This method updates properties of the secret, such as whether it''s enabled, but
    can''t change the secret''s

    value. Use <xref:azure.keyvault.secrets.SecretClient.set_secret> to change the
    secret''s value.'
  signature: 'update_secret_properties(name: str, version: str | None = None, **kwargs:
    Any) -> SecretProperties'
  parameters:
  - name: name
    description: Name of the secret
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: (optional) Version of the secret to update. If unspecified, the latest
      version is updated.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: enabled
    description: Whether the secret is enabled for use.
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:str>]
    - <xref:None>
  - name: content_type
    description: An arbitrary string indicating the type of the secret, e.g. 'password'
    types:
    - <xref:str>
  - name: not_before
    description: Not before date of the secret in UTC
    types:
    - <xref:datetime.datetime>
  - name: expires_on
    description: Expiry date of the secret in UTC
    types:
    - <xref:datetime.datetime>
  return:
    description: The updated secret properties.
    types:
    - <xref:azure.keyvault.secrets.SecretProperties>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.HttpResponseError
    description: the former if the secret doesn't exist; the latter for other errors
attributes:
- uid: azure.keyvault.secrets.SecretClient.vault_url
  name: vault_url
