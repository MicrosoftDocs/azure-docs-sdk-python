### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.keyvault.secrets.SecretClient.backup_secret
  - azure.keyvault.secrets.SecretClient.begin_delete_secret
  - azure.keyvault.secrets.SecretClient.begin_recover_deleted_secret
  - azure.keyvault.secrets.SecretClient.get_deleted_secret
  - azure.keyvault.secrets.SecretClient.get_secret
  - azure.keyvault.secrets.SecretClient.list_deleted_secrets
  - azure.keyvault.secrets.SecretClient.list_properties_of_secret_versions
  - azure.keyvault.secrets.SecretClient.list_properties_of_secrets
  - azure.keyvault.secrets.SecretClient.purge_deleted_secret
  - azure.keyvault.secrets.SecretClient.restore_secret_backup
  - azure.keyvault.secrets.SecretClient.set_secret
  - azure.keyvault.secrets.SecretClient.update_secret_properties
  class: azure.keyvault.secrets.SecretClient
  example:
  - "Create a new `SecretClient`<!--[!code-python[Main](s\\test_samples_secrets.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\101\\\\azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   from azure.identity import DefaultAzureCredential\n\
    \   from azure.keyvault.secrets import SecretClient\n\n   # Create a SecretClient\
    \ using default Azure credentials\n   credentials = DefaultAzureCredential()\n\
    \   secret_client = SecretClient(vault_url, credentials)\n\n\n   ````\n"
  fullName: azure.keyvault.secrets.SecretClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.keyvault.secrets._shared.client_base.KeyVaultClientBase
  langs:
  - python
  module: azure.keyvault.secrets
  name: SecretClient
  summary: A high-level interface for managing a vault's secrets.
  syntax:
    content: SecretClient(vault_url, credential, **kwargs)
    parameters:
    - description: URL of the vault the client will access. This is also called the
        vault's "DNS Name".
      id: vault_url
      type:
      - str
    - description: 'An object which can provide an access token for the vault, such
        as a credential from

        <xref:azure.identity>'
      id: credential
    - description: version of the Key Vault API to use. Defaults to the most recent.
      id: api_version
      type:
      - str
    - description: transport to use. Defaults to <xref:azure.core.pipeline.transport.RequestsTransport>.
      id: transport
      type:
      - azure.core.pipeline.transport.HttpTransport
  type: class
  uid: azure.keyvault.secrets.SecretClient
- class: azure.keyvault.secrets.SecretClient
  example:
  - "Back up a secret<!--[!code-python[Main](s\\test_samples_secrets.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\101\\\\\
    azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   # backup secret\n   # returns\
    \ the raw bytes of the backed up secret\n   secret_backup = secret_client.backup_secret(\"\
    secret-name\")\n\n   print(secret_backup)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.secrets.SecretClient.backup_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: backup_secret(name, **kwargs)
  namewithoutparameters: backup_secret
  summary: Back up a secret in a protected form useable only by Azure Key Vault. Requires
    secrets/backup permission.
  syntax:
    content: backup_secret(name, **kwargs)
    parameters:
    - description: Name of the secret to back up
      id: name
      isRequired: true
      type:
      - str
    return:
      type:
      - bytes
  type: method
  uid: azure.keyvault.secrets.SecretClient.backup_secret
- class: azure.keyvault.secrets.SecretClient
  example:
  - "Delete a secret<!--[!code-python[Main](s\\test_samples_secrets.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\101\\\\azure-keyvault-secrets-4.1.0\\\
    \\tests\\\\test_samples_secrets.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n\n   # delete a secret\n   deleted_secret_poller = secret_client.begin_delete_secret(\"\
    secret-name\")\n   deleted_secret = deleted_secret_poller.result()\n\n   print(deleted_secret.name)\n\
    \n   # if the vault has soft-delete enabled, the secret's, deleted_date\n   #\
    \ scheduled purge date and recovery id are set\n   print(deleted_secret.deleted_date)\n\
    \   print(deleted_secret.scheduled_purge_date)\n   print(deleted_secret.recovery_id)\n\
    \n   # if you want to block until secret is deleted server-side, call wait() on\
    \ the poller\n   deleted_secret_poller.wait()\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.secrets.SecretClient.begin_delete_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: begin_delete_secret(name, **kwargs)
  namewithoutparameters: begin_delete_secret
  summary: 'Delete all versions of a secret. Requires secrets/delete permission.


    When this method returns Key Vault has begun deleting the secret. Deletion may
    take several seconds in a vault

    with soft-delete enabled. This method therefore returns a poller enabling you
    to wait for deletion to complete.'
  syntax:
    content: begin_delete_secret(name, **kwargs)
    parameters:
    - description: Name of the secret to delete.
      id: name
      isRequired: true
      type:
      - str
    return:
      description: 'A poller for the delete operation. The poller''s *result* method
        returns the

        <xref:azure.keyvault.secrets.DeletedSecret> without waiting for deletion to
        complete. If the vault has

        soft-delete enabled and you want to permanently delete the secret with <xref:azure.keyvault.secrets.purge_deleted_secret>,
        call the

        poller''s *wait* method first. It will block until the deletion is complete.
        The *wait* method requires

        secrets/get permission.'
      type:
      - azure.core.polling.LROPoller[azure.keyvault.secrets.DeletedSecret]
  type: method
  uid: azure.keyvault.secrets.SecretClient.begin_delete_secret
- class: azure.keyvault.secrets.SecretClient
  example:
  - "Recover a deleted secret<!--[!code-python[Main](s\\test_samples_secrets.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\101\\\\\
    azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # recover deleted secret to\
    \ the latest version\n   recover_secret_poller = secret_client.begin_recover_deleted_secret(\"\
    secret-name\")\n   recovered_secret = recover_secret_poller.result()\n   print(recovered_secret.id)\n\
    \   print(recovered_secret.name)\n\n   # if you want to block until secret is\
    \ recovered server-side, call wait() on the poller\n   recover_secret_poller.wait()\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.secrets.SecretClient.begin_recover_deleted_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: begin_recover_deleted_secret(name, **kwargs)
  namewithoutparameters: begin_recover_deleted_secret
  summary: 'Recover a deleted secret to its latest version. Possible only in a vault
    with soft-delete enabled.


    If the vault does not have soft-delete enabled, <xref:azure.keyvault.secrets.SecretClient.begin_delete_secret>
    is permanent, and this method will

    return an error. Attempting to recover a non-deleted secret will also return an
    error.


    When this method returns Key Vault has begun recovering the secret. Recovery may
    take several seconds. This

    method therefore returns a poller enabling you to wait for recovery to complete.
    Waiting is only necessary when

    you want to use the recovered secret in another operation immediately.


    Requires the secrets/recover permission.'
  syntax:
    content: begin_recover_deleted_secret(name, **kwargs)
    parameters:
    - description: Name of the deleted secret to recover
      id: name
      isRequired: true
      type:
      - str
    return:
      description: 'A poller for the recovery operation. The poller''s *result* method
        returns the recovered

        <xref:azure.keyvault.secrets.Secret> without waiting for recovery to complete.
        If you want to use the

        recovered secret immediately, call the poller''s *wait* method, which blocks
        until the secret is ready to use.

        The *wait* method requires secrets/get permission.'
      type:
      - azure.core.polling.LROPoller[azure.keyvault.secrets.SecretProperties]
  type: method
  uid: azure.keyvault.secrets.SecretClient.begin_recover_deleted_secret
- class: azure.keyvault.secrets.SecretClient
  example:
  - "Get a deleted secret<!--[!code-python[Main](s\\test_samples_secrets.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\101\\\\\
    azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   # gets a deleted secret (requires\
    \ soft-delete enabled for the vault)\n   deleted_secret = secret_client.get_deleted_secret(\"\
    secret-name\")\n   print(deleted_secret.name)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.secrets.SecretClient.get_deleted_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: get_deleted_secret(name, **kwargs)
  namewithoutparameters: get_deleted_secret
  summary: Get a deleted secret. Possible only in vaults with soft-delete enabled.
    Requires secrets/get permission.
  syntax:
    content: get_deleted_secret(name, **kwargs)
    parameters:
    - description: Name of the deleted secret
      id: name
      isRequired: true
      type:
      - str
    return:
      type:
      - azure.keyvault.secrets.DeletedSecret
  type: method
  uid: azure.keyvault.secrets.SecretClient.get_deleted_secret
- class: azure.keyvault.secrets.SecretClient
  example:
  - "Get a secret<!--[!code-python[Main](s\\test_samples_secrets.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\101\\\\azure-keyvault-secrets-4.1.0\\\
    \\tests\\\\test_samples_secrets.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n\n   # get the latest version of a secret\n   secret = secret_client.get_secret(\"\
    secret-name\")\n\n   # alternatively, specify a version\n   secret = secret_client.get_secret(\"\
    secret-name\", secret.properties.version)\n\n   print(secret.id)\n   print(secret.name)\n\
    \   print(secret.properties.version)\n   print(secret.properties.vault_url)\n\n\
    \n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.secrets.SecretClient.get_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: get_secret(name, version=None, **kwargs)
  namewithoutparameters: get_secret
  summary: Get a secret. Requires the secrets/get permission.
  syntax:
    content: get_secret(name, version=None, **kwargs)
    parameters:
    - description: The name of the secret
      id: name
      isRequired: true
      type:
      - str
    - description: (optional) Version of the secret to get. If unspecified, gets the
        latest version.
      id: version
      isRequired: true
      type:
      - str
    return:
      type:
      - azure.keyvault.secrets.KeyVaultSecret
  type: method
  uid: azure.keyvault.secrets.SecretClient.get_secret
- class: azure.keyvault.secrets.SecretClient
  example:
  - "List deleted secrets<!--[!code-python[Main](s\\test_samples_secrets.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\101\\\\\
    azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # gets an iterator of deleted\
    \ secrets (requires soft-delete enabled for the vault)\n   deleted_secrets = secret_client.list_deleted_secrets()\n\
    \n   for secret in deleted_secrets:\n       # the list doesn't include values\
    \ or versions of the deleted secrets\n       print(secret.id)\n       print(secret.name)\n\
    \       print(secret.scheduled_purge_date)\n       print(secret.recovery_id)\n\
    \       print(secret.deleted_date)\n\n\n   ````\n"
  fullName: azure.keyvault.secrets.SecretClient.list_deleted_secrets
  langs:
  - python
  module: azure.keyvault.secrets
  name: list_deleted_secrets(**kwargs)
  namewithoutparameters: list_deleted_secrets
  summary: 'Lists all deleted secrets. Possible only in vaults with soft-delete enabled.


    Requires secrets/list permission.'
  syntax:
    content: list_deleted_secrets(**kwargs)
    return:
      description: An iterator of deleted secrets, excluding their values
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.secrets.DeletedSecret]
  type: method
  uid: azure.keyvault.secrets.SecretClient.list_deleted_secrets
- class: azure.keyvault.secrets.SecretClient
  example:
  - "List all versions of a secret<!--[!code-python[Main](s\\test_samples_secrets.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\101\\\\azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   secret_versions = secret_client.list_properties_of_secret_versions(\"\
    secret-name\")\n\n   for secret in secrets:\n       # the list doesn't include\
    \ the values at each version\n       print(secret.id)\n       print(secret.enabled)\n\
    \       print(secret.updated_on)\n\n\n   ````\n"
  fullName: azure.keyvault.secrets.SecretClient.list_properties_of_secret_versions
  langs:
  - python
  module: azure.keyvault.secrets
  name: list_properties_of_secret_versions(name, **kwargs)
  namewithoutparameters: list_properties_of_secret_versions
  summary: 'List properties of all versions of a secret, excluding their values. Requires
    secrets/list permission.


    List items don''t include secret values. Use <xref:azure.keyvault.secrets.SecretClient.get_secret>
    to get a secret''s value.'
  syntax:
    content: list_properties_of_secret_versions(name, **kwargs)
    parameters:
    - description: Name of the secret
      id: name
      isRequired: true
      type:
      - str
    return:
      description: An iterator of secrets, excluding their values
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.secrets.SecretProperties]
  type: method
  uid: azure.keyvault.secrets.SecretClient.list_properties_of_secret_versions
- class: azure.keyvault.secrets.SecretClient
  example:
  - "List all secrets<!--[!code-python[Main](s\\test_samples_secrets.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\101\\\\\
    azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # list secrets\n   secrets =\
    \ secret_client.list_properties_of_secrets()\n\n   for secret in secrets:\n  \
    \     # the list doesn't include values or versions of the secrets\n       print(secret.id)\n\
    \       print(secret.name)\n       print(secret.enabled)\n\n\n   ````\n"
  fullName: azure.keyvault.secrets.SecretClient.list_properties_of_secrets
  langs:
  - python
  module: azure.keyvault.secrets
  name: list_properties_of_secrets(**kwargs)
  namewithoutparameters: list_properties_of_secrets
  summary: 'List identifiers and attributes of all secrets in the vault. Requires
    secrets/list permission.


    List items don''t include secret values. Use <xref:azure.keyvault.secrets.SecretClient.get_secret>
    to get a secret''s value.'
  syntax:
    content: list_properties_of_secrets(**kwargs)
    return:
      description: An iterator of secrets, excluding their values
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.secrets.SecretProperties]
  type: method
  uid: azure.keyvault.secrets.SecretClient.list_properties_of_secrets
- class: azure.keyvault.secrets.SecretClient
  example:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n   # if the\
    \ vault has soft-delete enabled, purge permanently deletes the secret\n   # (with\
    \ soft-delete disabled, begin_delete_secret is permanent)\n   secret_client.purge_deleted_secret(\"\
    secret-name\")\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.secrets.SecretClient.purge_deleted_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: purge_deleted_secret(name, **kwargs)
  namewithoutparameters: purge_deleted_secret
  summary: 'Permanently deletes a deleted secret. Possible only in vaults with soft-delete
    enabled.


    Performs an irreversible deletion of the specified secret, without

    possibility for recovery. The operation is not available if the

    <xref:azure.keyvault.secrets.SecretProperties.recovery_level> does not specify
    ''Purgeable''.

    This method is only necessary for purging a secret before its

    <xref:azure.keyvault.secrets.DeletedSecret.scheduled_purge_date>.


    Requires secrets/purge permission.'
  syntax:
    content: purge_deleted_secret(name, **kwargs)
    parameters:
    - description: Name of the secret to purge
      id: name
      isRequired: true
      type:
      - str
    return:
      description: None
  type: method
  uid: azure.keyvault.secrets.SecretClient.purge_deleted_secret
- class: azure.keyvault.secrets.SecretClient
  example:
  - "Restore a backed up secret<!--[!code-python[Main](s\\test_samples_secrets.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\101\\\\azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # restores a backed up secret\n\
    \   restored_secret = secret_client.restore_secret_backup(secret_backup)\n   print(restored_secret.id)\n\
    \   print(restored_secret.version)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceExistsError
  fullName: azure.keyvault.secrets.SecretClient.restore_secret_backup
  langs:
  - python
  module: azure.keyvault.secrets
  name: restore_secret_backup(backup, **kwargs)
  namewithoutparameters: restore_secret_backup
  summary: Restore a backed up secret. Requires the secrets/restore permission.
  syntax:
    content: restore_secret_backup(backup, **kwargs)
    parameters:
    - description: A secret backup as returned by <xref:azure.keyvault.secrets.SecretClient.backup_secret>
      id: backup
      isRequired: true
      type:
      - bytes
    return:
      description: The restored secret
      type:
      - azure.keyvault.secrets.SecretProperties
  type: method
  uid: azure.keyvault.secrets.SecretClient.restore_secret_backup
- class: azure.keyvault.secrets.SecretClient
  example:
  - "Set a secret's value<!--[!code-python[Main](s\\test_samples_secrets.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\101\\\\\
    azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from dateutil import parser as\
    \ date_parse\n\n   expires_on = date_parse.parse(\"2050-02-02T08:00:00.000Z\"\
    )\n\n   # create a secret, setting optional arguments\n   secret = secret_client.set_secret(\"\
    secret-name\", \"secret-value\", expires_on=expires_on)\n\n   print(secret.name)\n\
    \   print(secret.properties.version)\n   print(secret.properties.expires_on)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.secrets.SecretClient.set_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: set_secret(name, value, **kwargs)
  namewithoutparameters: set_secret
  summary: 'Set a secret value. If *name* is in use, create a new version of the secret.
    If not, create a new secret.


    Requires secrets/set permission.'
  syntax:
    content: set_secret(name, value, **kwargs)
    parameters:
    - description: The name of the secret
      id: name
      isRequired: true
      type:
      - str
    - description: The value of the secret
      id: value
      isRequired: true
      type:
      - str
    - description: Whether the secret is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: Application specific metadata in the form of key-value pairs.
      id: tags
      isRequired: true
      type:
      - dict[str, str]
    - description: An arbitrary string indicating the type of the secret, e.g. 'password'
      id: content_type
      isRequired: true
      type:
      - str
    - description: Not before date of the secret in UTC
      id: not_before
      isRequired: true
      type:
      - datetime.datetime
    - description: Expiry date of the secret in UTC
      id: expires_on
      isRequired: true
      type:
      - datetime.datetime
    return:
      type:
      - azure.keyvault.secrets.KeyVaultSecret
  type: method
  uid: azure.keyvault.secrets.SecretClient.set_secret
- class: azure.keyvault.secrets.SecretClient
  example:
  - "Update a secret's attributes<!--[!code-python[Main](s\\test_samples_secrets.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\101\\\\azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # update attributes of an existing\
    \ secret\n\n   content_type = \"text/plain\"\n   tags = {\"foo\": \"updated tag\"\
    }\n   updated_secret_properties = secret_client.update_secret_properties(\n  \
    \     \"secret-name\", content_type=content_type, tags=tags\n   )\n\n   print(updated_secret_properties.version)\n\
    \   print(updated_secret_properties.updated_on)\n   print(updated_secret_properties.content_type)\n\
    \   print(updated_secret_properties.tags)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.secrets.SecretClient.update_secret_properties
  langs:
  - python
  module: azure.keyvault.secrets
  name: update_secret_properties(name, version=None, **kwargs)
  namewithoutparameters: update_secret_properties
  summary: 'Update properties of a secret other than its value. Requires secrets/set
    permission.


    This method updates properties of the secret, such as whether it''s enabled, but
    can''t change the secret''s

    value. Use <xref:azure.keyvault.secrets.SecretClient.set_secret> to change the
    secret''s value.'
  syntax:
    content: update_secret_properties(name, version=None, **kwargs)
    parameters:
    - description: Name of the secret
      id: name
      isRequired: true
      type:
      - str
    - description: (optional) Version of the secret to update. If unspecified, the
        latest version is updated.
      id: version
      isRequired: true
      type:
      - str
    - description: Whether the secret is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: Application specific metadata in the form of key-value pairs.
      id: tags
      isRequired: true
      type:
      - dict[str, str]
    - description: An arbitrary string indicating the type of the secret, e.g. 'password'
      id: content_type
      isRequired: true
      type:
      - str
    - description: Not before date of the secret in UTC
      id: not_before
      isRequired: true
      type:
      - datetime.datetime
    - description: Expiry date of the secret in UTC
      id: expires_on
      isRequired: true
      type:
      - datetime.datetime
    return:
      type:
      - azure.keyvault.secrets.SecretProperties
  type: method
  uid: azure.keyvault.secrets.SecretClient.update_secret_properties
references:
- fullName: azure.keyvault.secrets.SecretClient.backup_secret
  isExternal: false
  name: backup_secret(name, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.backup_secret
- fullName: azure.keyvault.secrets.SecretClient.begin_delete_secret
  isExternal: false
  name: begin_delete_secret(name, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.begin_delete_secret
- fullName: azure.keyvault.secrets.SecretClient.begin_recover_deleted_secret
  isExternal: false
  name: begin_recover_deleted_secret(name, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.begin_recover_deleted_secret
- fullName: azure.keyvault.secrets.SecretClient.get_deleted_secret
  isExternal: false
  name: get_deleted_secret(name, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.get_deleted_secret
- fullName: azure.keyvault.secrets.SecretClient.get_secret
  isExternal: false
  name: get_secret(name, version=None, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.get_secret
- fullName: azure.keyvault.secrets.SecretClient.list_deleted_secrets
  isExternal: false
  name: list_deleted_secrets(**kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.list_deleted_secrets
- fullName: azure.keyvault.secrets.SecretClient.list_properties_of_secret_versions
  isExternal: false
  name: list_properties_of_secret_versions(name, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.list_properties_of_secret_versions
- fullName: azure.keyvault.secrets.SecretClient.list_properties_of_secrets
  isExternal: false
  name: list_properties_of_secrets(**kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.list_properties_of_secrets
- fullName: azure.keyvault.secrets.SecretClient.purge_deleted_secret
  isExternal: false
  name: purge_deleted_secret(name, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.purge_deleted_secret
- fullName: azure.keyvault.secrets.SecretClient.restore_secret_backup
  isExternal: false
  name: restore_secret_backup(backup, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.restore_secret_backup
- fullName: azure.keyvault.secrets.SecretClient.set_secret
  isExternal: false
  name: set_secret(name, value, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.set_secret
- fullName: azure.keyvault.secrets.SecretClient.update_secret_properties
  isExternal: false
  name: update_secret_properties(name, version=None, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.update_secret_properties
- fullName: azure.core.polling.LROPoller[azure.keyvault.secrets.DeletedSecret]
  name: LROPoller[DeletedSecret]
  spec.python:
  - fullName: azure.core.polling.LROPoller
    name: LROPoller
    uid: azure.core.polling.LROPoller
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.secrets.DeletedSecret
    name: DeletedSecret
    uid: azure.keyvault.secrets.DeletedSecret
  - fullName: ']'
    name: ']'
  uid: azure.core.polling.LROPoller[azure.keyvault.secrets.DeletedSecret]
- fullName: azure.core.polling.LROPoller[azure.keyvault.secrets.SecretProperties]
  name: LROPoller[SecretProperties]
  spec.python:
  - fullName: azure.core.polling.LROPoller
    name: LROPoller
    uid: azure.core.polling.LROPoller
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.secrets.SecretProperties
    name: SecretProperties
    uid: azure.keyvault.secrets.SecretProperties
  - fullName: ']'
    name: ']'
  uid: azure.core.polling.LROPoller[azure.keyvault.secrets.SecretProperties]
- fullName: azure.core.paging.ItemPaged[azure.keyvault.secrets.DeletedSecret]
  name: ItemPaged[DeletedSecret]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.secrets.DeletedSecret
    name: DeletedSecret
    uid: azure.keyvault.secrets.DeletedSecret
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.keyvault.secrets.DeletedSecret]
- fullName: azure.core.paging.ItemPaged[azure.keyvault.secrets.SecretProperties]
  name: ItemPaged[SecretProperties]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.secrets.SecretProperties
    name: SecretProperties
    uid: azure.keyvault.secrets.SecretProperties
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.keyvault.secrets.SecretProperties]
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
