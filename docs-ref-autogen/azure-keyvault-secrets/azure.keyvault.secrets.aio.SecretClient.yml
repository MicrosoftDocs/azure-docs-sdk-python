### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.keyvault.secrets.aio.SecretClient.backup_secret
  - azure.keyvault.secrets.aio.SecretClient.delete_secret
  - azure.keyvault.secrets.aio.SecretClient.get_deleted_secret
  - azure.keyvault.secrets.aio.SecretClient.get_secret
  - azure.keyvault.secrets.aio.SecretClient.list_deleted_secrets
  - azure.keyvault.secrets.aio.SecretClient.list_properties_of_secret_versions
  - azure.keyvault.secrets.aio.SecretClient.list_properties_of_secrets
  - azure.keyvault.secrets.aio.SecretClient.purge_deleted_secret
  - azure.keyvault.secrets.aio.SecretClient.recover_deleted_secret
  - azure.keyvault.secrets.aio.SecretClient.restore_secret_backup
  - azure.keyvault.secrets.aio.SecretClient.set_secret
  - azure.keyvault.secrets.aio.SecretClient.update_secret_properties
  class: azure.keyvault.secrets.aio.SecretClient
  example:
  - "Create a new `SecretClient`<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\101\\\\azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   from azure.identity.aio\
    \ import DefaultAzureCredential\n   from azure.keyvault.secrets.aio import SecretClient\n\
    \n   # Create a SecretClient using default Azure credentials\n   credentials =\
    \ DefaultAzureCredential()\n   secret_client = SecretClient(vault_url, credentials)\n\
    \n\n   ````\n"
  fullName: azure.keyvault.secrets.aio.SecretClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.keyvault.secrets._shared.async_client_base.AsyncKeyVaultClientBase
  langs:
  - python
  module: azure.keyvault.secrets.aio
  name: SecretClient
  summary: A high-level asynchronous interface for managing a vault's secrets.
  syntax:
    parameters:
    - description: URL of the vault the client will access
      id: vault_url
      type:
      - str
    - description: 'An object which can provide an access token for the vault, such
        as a credential from

        <xref:azure.identity.aio>'
      id: credential
    - description: version of the Key Vault API to use. Defaults to the most recent.
      id: api_version
      type:
      - str
    - description: 'transport to use. Defaults to

        <xref:azure.core.pipeline.transport.AioHttpTransport>.'
      id: transport
      type:
      - azure.core.pipeline.transport.AsyncHttpTransport
  type: class
  uid: azure.keyvault.secrets.aio.SecretClient
- class: azure.keyvault.secrets.aio.SecretClient
  fullName: azure.keyvault.secrets.aio.SecretClient.backup_secret
  langs:
  - python
  module: azure.keyvault.secrets.aio
  name: 'backup_secret(name: str, **kwargs: typing.Any) -> bytes'
  namewithoutparameters: backup_secret
  summary: Back up a secret in a protected form useable only by Azure Key Vault. Requires
    secrets/backup permission.
  syntax:
    content: 'backup_secret(name: str, **kwargs: typing.Any) -> bytes'
    parameters:
    - description: Name of the secret
      id: name
      isRequired: true
      type:
      - str
    return:
      type:
      - bytes
  type: method
  uid: azure.keyvault.secrets.aio.SecretClient.backup_secret
- class: azure.keyvault.secrets.aio.SecretClient
  example:
  - "Delete a secret<!--[!code-python[Main](s\\test_samples_secrets_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\101\\\\\
    azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # delete a secret\n   deleted_secret\
    \ = await secret_client.delete_secret(\"secret-name\")\n\n   print(deleted_secret.name)\n\
    \n   # if the vault has soft-delete enabled, the secret's deleted_date,\n   #\
    \ scheduled purge date and recovery id are set\n   print(deleted_secret.deleted_date)\n\
    \   print(deleted_secret.scheduled_purge_date)\n   print(deleted_secret.recovery_id)\n\
    \n\n   ````\n"
  fullName: azure.keyvault.secrets.aio.SecretClient.delete_secret
  langs:
  - python
  module: azure.keyvault.secrets.aio
  name: 'delete_secret(name: str, **kwargs: typing.Any) -> azure.keyvault.secrets._models.DeletedSecret'
  namewithoutparameters: delete_secret
  summary: 'Delete all versions of a secret. Requires secrets/delete permission.


    If the vault has soft-delete enabled, deletion may take several seconds to complete.'
  syntax:
    content: 'delete_secret(name: str, **kwargs: typing.Any) -> azure.keyvault.secrets._models.DeletedSecret'
    return:
      type:
      - azure.keyvault.secrets.DeletedSecret
  type: method
  uid: azure.keyvault.secrets.aio.SecretClient.delete_secret
- class: azure.keyvault.secrets.aio.SecretClient
  example:
  - "Get a deleted secret<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\101\\\\azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # gets a deleted\
    \ secret (requires soft-delete enabled for the vault)\n   deleted_secret = await\
    \ secret_client.get_deleted_secret(\"secret-name\")\n   print(deleted_secret.name)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.secrets.aio.SecretClient.get_deleted_secret
  langs:
  - python
  module: azure.keyvault.secrets.aio
  name: 'get_deleted_secret(name: str, **kwargs: typing.Any) -> azure.keyvault.secrets._models.DeletedSecret'
  namewithoutparameters: get_deleted_secret
  summary: Get a deleted secret. Possible only in vaults with soft-delete enabled.
    Requires secrets/get permission.
  syntax:
    content: 'get_deleted_secret(name: str, **kwargs: typing.Any) -> azure.keyvault.secrets._models.DeletedSecret'
    parameters:
    - description: Name of the deleted secret
      id: name
      isRequired: true
      type:
      - str
    return:
      type:
      - azure.keyvault.secrets.DeletedSecret
  type: method
  uid: azure.keyvault.secrets.aio.SecretClient.get_deleted_secret
- class: azure.keyvault.secrets.aio.SecretClient
  example:
  - "Get a secret<!--[!code-python[Main](s\\test_samples_secrets_async.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\101\\\\\
    azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get the latest version of\
    \ a secret\n   secret = await secret_client.get_secret(\"secret-name\")\n\n  \
    \ # alternatively, specify a version\n   secret = await secret_client.get_secret(\"\
    secret-name\", secret_version)\n\n   print(secret.id)\n   print(secret.name)\n\
    \   print(secret.properties.version)\n   print(secret.properties.vault_url)\n\n\
    \n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.secrets.aio.SecretClient.get_secret
  langs:
  - python
  module: azure.keyvault.secrets.aio
  name: 'get_secret(name: str, version: typing.Union[str, NoneType] = None, **kwargs:
    typing.Any) -> azure.keyvault.secrets._models.KeyVaultSecret'
  namewithoutparameters: get_secret
  summary: Get a secret. Requires the secrets/get permission.
  syntax:
    content: 'get_secret(name: str, version: typing.Union[str, NoneType] = None, **kwargs:
      typing.Any) -> azure.keyvault.secrets._models.KeyVaultSecret'
    parameters:
    - description: The name of the secret
      id: name
      isRequired: true
      type:
      - str
    - description: (optional) Version of the secret to get. If unspecified, gets the
        latest version.
      id: version
      isRequired: true
      type:
      - str
    return:
      type:
      - azure.keyvault.secrets.KeyVaultSecret
  type: method
  uid: azure.keyvault.secrets.aio.SecretClient.get_secret
- class: azure.keyvault.secrets.aio.SecretClient
  example:
  - "Lists deleted secrets<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\101\\\\azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # gets a list\
    \ of deleted secrets (requires soft-delete enabled for the vault)\n   deleted_secrets\
    \ = secret_client.list_deleted_secrets()\n\n   async for secret in deleted_secrets:\n\
    \       # the list doesn't include values or versions of the deleted secrets\n\
    \       print(secret.id)\n       print(secret.name)\n       print(secret.scheduled_purge_date)\n\
    \       print(secret.recovery_id)\n       print(secret.deleted_date)\n\n\n   ````\n"
  fullName: azure.keyvault.secrets.aio.SecretClient.list_deleted_secrets
  langs:
  - python
  module: azure.keyvault.secrets.aio
  name: list_deleted_secrets
  namewithoutparameters: list_deleted_secrets
  summary: 'Lists all deleted secrets. Possible only in vaults with soft-delete enabled.


    Requires secrets/list permission.'
  syntax:
    return:
      description: An iterator of deleted secrets, excluding their values
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.keyvault.secrets.DeletedSecret]
  type: method
  uid: azure.keyvault.secrets.aio.SecretClient.list_deleted_secrets
- class: azure.keyvault.secrets.aio.SecretClient
  example:
  - "List all versions of a secret<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\101\\\\azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # gets a list\
    \ of all versions of a secret\n   secret_versions = secret_client.list_properties_of_secret_versions(\"\
    secret-name\")\n\n   async for secret in secret_versions:\n       # the list doesn't\
    \ include the versions' values\n       print(secret.id)\n       print(secret.enabled)\n\
    \       print(secret.updated_on)\n\n\n   ````\n"
  fullName: azure.keyvault.secrets.aio.SecretClient.list_properties_of_secret_versions
  langs:
  - python
  module: azure.keyvault.secrets.aio
  name: list_properties_of_secret_versions
  namewithoutparameters: list_properties_of_secret_versions
  summary: 'List properties of all versions of a secret, excluding their values. Requires
    secrets/list permission.


    List items don''t include secret values. Use <xref:azure.keyvault.secrets.aio.SecretClient.get_secret>
    to get a secret''s value.'
  syntax:
    parameters:
    - description: Name of the secret
      id: name
      isRequired: true
      type:
      - str
    return:
      description: An iterator of secrets, excluding their values
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.keyvault.secrets.SecretProperties]
  type: method
  uid: azure.keyvault.secrets.aio.SecretClient.list_properties_of_secret_versions
- class: azure.keyvault.secrets.aio.SecretClient
  example:
  - "Lists all secrets<!--[!code-python[Main](s\\test_samples_secrets_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\101\\\\\
    azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # gets a list of secrets in\
    \ the vault\n   secrets = secret_client.list_properties_of_secrets()\n\n   async\
    \ for secret in secrets:\n       # the list doesn't include values or versions\
    \ of the secrets\n       print(secret.id)\n       print(secret.name)\n       print(secret.enabled)\n\
    \n\n   ````\n"
  fullName: azure.keyvault.secrets.aio.SecretClient.list_properties_of_secrets
  langs:
  - python
  module: azure.keyvault.secrets.aio
  name: list_properties_of_secrets
  namewithoutparameters: list_properties_of_secrets
  summary: 'List identifiers and attributes of all secrets in the vault. Requires
    secrets/list permission.


    List items don''t include secret values. Use <xref:azure.keyvault.secrets.aio.SecretClient.get_secret>
    to get a secret''s value.'
  syntax:
    return:
      description: An iterator of secrets
      type:
      - azure.core.async_paging.AsyncItemPaged[azure.keyvault.secrets.SecretProperties]
  type: method
  uid: azure.keyvault.secrets.aio.SecretClient.list_properties_of_secrets
- class: azure.keyvault.secrets.aio.SecretClient
  example:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n   # if the\
    \ vault has soft-delete enabled, purge permanently deletes the secret\n   # (with\
    \ soft-delete disabled, delete_secret is permanent)\n   await secret_client.purge_deleted_secret(\"\
    secret-name\")\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.secrets.aio.SecretClient.purge_deleted_secret
  langs:
  - python
  module: azure.keyvault.secrets.aio
  name: 'purge_deleted_secret(name: str, **kwargs: typing.Any) -> None'
  namewithoutparameters: purge_deleted_secret
  summary: 'Permanently delete a deleted secret. Possible only in vaults with soft-delete
    enabled.


    Performs an irreversible deletion of the specified secret, without

    possibility for recovery. The operation is not available if the

    <xref:azure.keyvault.secrets.SecretProperties.recovery_level> does not specify
    ''Purgeable''.

    This method is only necessary for purging a secret before its

    <xref:azure.keyvault.secrets.DeletedSecret.scheduled_purge_date>.


    Requires secrets/purge permission.'
  syntax:
    content: 'purge_deleted_secret(name: str, **kwargs: typing.Any) -> None'
    parameters:
    - description: Name of the deleted secret to purge
      id: name
      isRequired: true
      type:
      - str
    return:
      description: None
  type: method
  uid: azure.keyvault.secrets.aio.SecretClient.purge_deleted_secret
- class: azure.keyvault.secrets.aio.SecretClient
  example:
  - "Recover a deleted secret<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\101\\\\azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # recover deleted\
    \ secret to the latest version\n   recovered_secret = await secret_client.recover_deleted_secret(\"\
    secret-name\")\n   print(recovered_secret.id)\n   print(recovered_secret.name)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.secrets.aio.SecretClient.recover_deleted_secret
  langs:
  - python
  module: azure.keyvault.secrets.aio
  name: 'recover_deleted_secret(name: str, **kwargs: typing.Any) -> azure.keyvault.secrets._models.SecretProperties'
  namewithoutparameters: recover_deleted_secret
  summary: 'Recover a deleted secret to its latest version. This is possible only
    in vaults with soft-delete enabled.


    If the vault does not have soft-delete enabled, <xref:azure.keyvault.secrets.aio.SecretClient.delete_secret>
    is permanent, and this method will raise

    an error. Attempting to recover a non-deleted secret will also raise an error.


    Requires the secrets/recover permission.'
  syntax:
    content: 'recover_deleted_secret(name: str, **kwargs: typing.Any) -> azure.keyvault.secrets._models.SecretProperties'
    parameters:
    - description: Name of the deleted secret to recover
      id: name
      isRequired: true
      type:
      - str
    return:
      type:
      - azure.keyvault.secrets.SecretProperties
  type: method
  uid: azure.keyvault.secrets.aio.SecretClient.recover_deleted_secret
- class: azure.keyvault.secrets.aio.SecretClient
  example:
  - "Restore a backed up secret<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\101\\\\azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # restores a\
    \ backed up secret\n   restored_secret = await secret_client.restore_secret_backup(secret_backup)\n\
    \   print(restored_secret.id)\n   print(restored_secret.version)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceExistsError
  fullName: azure.keyvault.secrets.aio.SecretClient.restore_secret_backup
  langs:
  - python
  module: azure.keyvault.secrets.aio
  name: 'restore_secret_backup(backup: bytes, **kwargs: typing.Any) -> azure.keyvault.secrets._models.SecretProperties'
  namewithoutparameters: restore_secret_backup
  summary: Restore a backed up secret. Requires the secrets/restore permission.
  syntax:
    content: 'restore_secret_backup(backup: bytes, **kwargs: typing.Any) -> azure.keyvault.secrets._models.SecretProperties'
    parameters:
    - description: A secret backup as returned by <xref:azure.keyvault.secrets.aio.SecretClient.backup_secret>
      id: backup
      isRequired: true
      type:
      - bytes
    return:
      description: The restored secret
      type:
      - azure.keyvault.secrets.SecretProperties
  type: method
  uid: azure.keyvault.secrets.aio.SecretClient.restore_secret_backup
- class: azure.keyvault.secrets.aio.SecretClient
  example:
  - "Set a secret's value<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\101\\\\azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from dateutil\
    \ import parser as date_parse\n\n   expires_on = date_parse.parse(\"2050-02-02T08:00:00.000Z\"\
    )\n\n   # create a secret, setting optional arguments\n   secret = await secret_client.set_secret(\"\
    secret-name\", \"secret-value\", enabled=True, expires_on=expires_on)\n\n   print(secret.id)\n\
    \   print(secret.name)\n   print(secret.properties.enabled)\n   print(secret.properties.expires_on)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.secrets.aio.SecretClient.set_secret
  langs:
  - python
  module: azure.keyvault.secrets.aio
  name: 'set_secret(name: str, value: str, **kwargs: typing.Any) -> azure.keyvault.secrets._models.KeyVaultSecret'
  namewithoutparameters: set_secret
  summary: 'Set a secret value. If *name* is in use, create a new version of the secret.
    If not, create a new secret.


    Requires secrets/set permission.'
  syntax:
    content: 'set_secret(name: str, value: str, **kwargs: typing.Any) -> azure.keyvault.secrets._models.KeyVaultSecret'
    parameters:
    - description: The name of the secret
      id: name
      isRequired: true
      type:
      - str
    - description: The value of the secret
      id: value
      isRequired: true
      type:
      - str
    - description: Whether the secret is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: Application specific metadata in the form of key-value pairs.
      id: tags
      isRequired: true
      type:
      - dict[str, str]
    - description: An arbitrary string indicating the type of the secret, e.g. 'password'
      id: content_type
      isRequired: true
      type:
      - str
    - description: Not before date of the secret in UTC
      id: not_before
      isRequired: true
      type:
      - datetime.datetime
    - description: Expiry date of the secret in UTC
      id: expires_on
      isRequired: true
      type:
      - datetime.datetime
    return:
      type:
      - azure.keyvault.secrets.KeyVaultSecret
  type: method
  uid: azure.keyvault.secrets.aio.SecretClient.set_secret
- class: azure.keyvault.secrets.aio.SecretClient
  example:
  - "Updates a secret's attributes<!--[!code-python[Main](s\\test_samples_secrets_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\101\\\\azure-keyvault-secrets-4.1.0\\\\tests\\\\test_samples_secrets_async.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # update attributes\
    \ of an existing secret\n   content_type = \"text/plain\"\n   tags = {\"foo\"\
    : \"updated tag\"}\n   updated_secret_properties = await secret_client.update_secret_properties(\n\
    \       \"secret-name\", content_type=content_type, tags=tags\n   )\n\n   print(updated_secret_properties.version)\n\
    \   print(updated_secret_properties.updated_on)\n   print(updated_secret_properties.content_type)\n\
    \   print(updated_secret_properties.tags)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.secrets.aio.SecretClient.update_secret_properties
  langs:
  - python
  module: azure.keyvault.secrets.aio
  name: 'update_secret_properties(name: str, version: typing.Union[str, NoneType]
    = None, **kwargs: typing.Any) -> azure.keyvault.secrets._models.SecretProperties'
  namewithoutparameters: update_secret_properties
  summary: 'Update properties of a secret other than its value. Requires secrets/set
    permission.


    This method updates properties of the secret, such as whether it''s enabled, but
    can''t change the secret''s

    value. Use <xref:azure.keyvault.secrets.aio.SecretClient.set_secret> to change
    the secret''s value.'
  syntax:
    content: 'update_secret_properties(name: str, version: typing.Union[str, NoneType]
      = None, **kwargs: typing.Any) -> azure.keyvault.secrets._models.SecretProperties'
    parameters:
    - description: Name of the secret
      id: name
      isRequired: true
      type:
      - str
    - description: (optional) Version of the secret to update. If unspecified, the
        latest version is updated.
      id: version
      isRequired: true
      type:
      - str
    - description: Whether the secret is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: Application specific metadata in the form of key-value pairs.
      id: tags
      isRequired: true
      type:
      - dict[str, str]
    - description: An arbitrary string indicating the type of the secret, e.g. 'password'
      id: content_type
      isRequired: true
      type:
      - str
    - description: Not before date of the secret in UTC
      id: not_before
      isRequired: true
      type:
      - datetime.datetime
    - description: Expiry date of the secret in UTC
      id: expires_on
      isRequired: true
      type:
      - datetime.datetime
    return:
      type:
      - azure.keyvault.secrets.SecretProperties
  type: method
  uid: azure.keyvault.secrets.aio.SecretClient.update_secret_properties
references:
- fullName: azure.keyvault.secrets.aio.SecretClient.backup_secret
  isExternal: false
  name: 'backup_secret(name: str, **kwargs: typing.Any) -> bytes'
  parent: azure.keyvault.secrets.aio.SecretClient
  uid: azure.keyvault.secrets.aio.SecretClient.backup_secret
- fullName: azure.keyvault.secrets.aio.SecretClient.delete_secret
  isExternal: false
  name: 'delete_secret(name: str, **kwargs: typing.Any) -> azure.keyvault.secrets._models.DeletedSecret'
  parent: azure.keyvault.secrets.aio.SecretClient
  uid: azure.keyvault.secrets.aio.SecretClient.delete_secret
- fullName: azure.keyvault.secrets.aio.SecretClient.get_deleted_secret
  isExternal: false
  name: 'get_deleted_secret(name: str, **kwargs: typing.Any) -> azure.keyvault.secrets._models.DeletedSecret'
  parent: azure.keyvault.secrets.aio.SecretClient
  uid: azure.keyvault.secrets.aio.SecretClient.get_deleted_secret
- fullName: azure.keyvault.secrets.aio.SecretClient.get_secret
  isExternal: false
  name: 'get_secret(name: str, version: typing.Union[str, NoneType] = None, **kwargs:
    typing.Any) -> azure.keyvault.secrets._models.KeyVaultSecret'
  parent: azure.keyvault.secrets.aio.SecretClient
  uid: azure.keyvault.secrets.aio.SecretClient.get_secret
- fullName: azure.keyvault.secrets.aio.SecretClient.list_deleted_secrets
  isExternal: false
  name: list_deleted_secrets
  parent: azure.keyvault.secrets.aio.SecretClient
  uid: azure.keyvault.secrets.aio.SecretClient.list_deleted_secrets
- fullName: azure.keyvault.secrets.aio.SecretClient.list_properties_of_secret_versions
  isExternal: false
  name: list_properties_of_secret_versions
  parent: azure.keyvault.secrets.aio.SecretClient
  uid: azure.keyvault.secrets.aio.SecretClient.list_properties_of_secret_versions
- fullName: azure.keyvault.secrets.aio.SecretClient.list_properties_of_secrets
  isExternal: false
  name: list_properties_of_secrets
  parent: azure.keyvault.secrets.aio.SecretClient
  uid: azure.keyvault.secrets.aio.SecretClient.list_properties_of_secrets
- fullName: azure.keyvault.secrets.aio.SecretClient.purge_deleted_secret
  isExternal: false
  name: 'purge_deleted_secret(name: str, **kwargs: typing.Any) -> None'
  parent: azure.keyvault.secrets.aio.SecretClient
  uid: azure.keyvault.secrets.aio.SecretClient.purge_deleted_secret
- fullName: azure.keyvault.secrets.aio.SecretClient.recover_deleted_secret
  isExternal: false
  name: 'recover_deleted_secret(name: str, **kwargs: typing.Any) -> azure.keyvault.secrets._models.SecretProperties'
  parent: azure.keyvault.secrets.aio.SecretClient
  uid: azure.keyvault.secrets.aio.SecretClient.recover_deleted_secret
- fullName: azure.keyvault.secrets.aio.SecretClient.restore_secret_backup
  isExternal: false
  name: 'restore_secret_backup(backup: bytes, **kwargs: typing.Any) -> azure.keyvault.secrets._models.SecretProperties'
  parent: azure.keyvault.secrets.aio.SecretClient
  uid: azure.keyvault.secrets.aio.SecretClient.restore_secret_backup
- fullName: azure.keyvault.secrets.aio.SecretClient.set_secret
  isExternal: false
  name: 'set_secret(name: str, value: str, **kwargs: typing.Any) -> azure.keyvault.secrets._models.KeyVaultSecret'
  parent: azure.keyvault.secrets.aio.SecretClient
  uid: azure.keyvault.secrets.aio.SecretClient.set_secret
- fullName: azure.keyvault.secrets.aio.SecretClient.update_secret_properties
  isExternal: false
  name: 'update_secret_properties(name: str, version: typing.Union[str, NoneType]
    = None, **kwargs: typing.Any) -> azure.keyvault.secrets._models.SecretProperties'
  parent: azure.keyvault.secrets.aio.SecretClient
  uid: azure.keyvault.secrets.aio.SecretClient.update_secret_properties
- fullName: azure.core.async_paging.AsyncItemPaged[azure.keyvault.secrets.DeletedSecret]
  name: AsyncItemPaged[DeletedSecret]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.secrets.DeletedSecret
    name: DeletedSecret
    uid: azure.keyvault.secrets.DeletedSecret
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.keyvault.secrets.DeletedSecret]
- fullName: azure.core.async_paging.AsyncItemPaged[azure.keyvault.secrets.SecretProperties]
  name: AsyncItemPaged[SecretProperties]
  spec.python:
  - fullName: azure.core.async_paging.AsyncItemPaged
    name: AsyncItemPaged
    uid: azure.core.async_paging.AsyncItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.secrets.SecretProperties
    name: SecretProperties
    uid: azure.keyvault.secrets.SecretProperties
  - fullName: ']'
    name: ']'
  uid: azure.core.async_paging.AsyncItemPaged[azure.keyvault.secrets.SecretProperties]
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
