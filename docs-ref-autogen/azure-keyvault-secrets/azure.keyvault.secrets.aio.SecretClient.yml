### YamlMime:PythonClass
uid: azure.keyvault.secrets.aio.SecretClient
name: SecretClient
fullName: azure.keyvault.secrets.aio.SecretClient
module: azure.keyvault.secrets.aio
inheritances:
- azure.keyvault.secrets._shared.async_client_base.AsyncKeyVaultClientBase
summary: A high-level asynchronous interface for managing a vault's secrets.
constructor:
  syntax: 'SecretClient(vault_url: str, credential: AsyncTokenCredential, **kwargs:
    Any)'
  parameters:
  - name: vault_url
    description: 'URL of the vault the client will access. This is also called the
      vault''s "DNS Name".

      You should validate that this URL references a valid Key Vault resource. See
      [https://aka.ms/azsdk/blog/vault-uri](https://aka.ms/azsdk/blog/vault-uri)

      for details.'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'An object which can provide an access token for the vault, such
      as a credential from

      <xref:azure.identity.aio>'
    isRequired: true
    types:
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
  keywordOnlyParameters:
  - name: api_version
    description: Version of the service API to use. Defaults to the most recent.
    types:
    - <xref:azure.keyvault.secrets.ApiVersion>
    - <xref:str>
  - name: verify_challenge_resource
    description: 'Whether to verify the authentication challenge resource matches
      the Key

      Vault domain. Defaults to True.'
    types:
    - <xref:bool>
methods:
- uid: azure.keyvault.secrets.aio.SecretClient.backup_secret
  name: backup_secret
  summary: Back up a secret in a protected form useable only by Azure Key Vault. Requires
    secrets/backup permission.
  signature: 'async backup_secret(name: str, **kwargs: Any) -> bytes'
  parameters:
  - name: name
    description: Name of the secret to back up
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The backup result, in a protected bytes format that can only be used
      by Azure Key Vault.
    types:
    - <xref:bytes>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.HttpResponseError
    description: the former if the secret doesn't exist; the latter for other errors
- uid: azure.keyvault.secrets.aio.SecretClient.close
  name: close
  summary: 'Close sockets opened by the client.


    Calling this method is unnecessary when using the client as a context manager.'
  signature: async close() -> None
- uid: azure.keyvault.secrets.aio.SecretClient.delete_secret
  name: delete_secret
  summary: 'Delete all versions of a secret. Requires secrets/delete permission.


    If the vault has soft-delete enabled, deletion may take several seconds to complete.'
  signature: 'async delete_secret(name: str, **kwargs: Any) -> DeletedSecret'
  parameters:
  - name: name
    description: Name of the secret to delete.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The deleted secret.
    types:
    - <xref:azure.keyvault.secrets.DeletedSecret>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.HttpResponseError
    description: the former if the secret doesn't exist; the latter for other errors
- uid: azure.keyvault.secrets.aio.SecretClient.get_deleted_secret
  name: get_deleted_secret
  summary: Get a deleted secret. Possible only in vaults with soft-delete enabled.
    Requires secrets/get permission.
  signature: 'async get_deleted_secret(name: str, **kwargs: Any) -> DeletedSecret'
  parameters:
  - name: name
    description: Name of the deleted secret
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The deleted secret.
    types:
    - <xref:azure.keyvault.secrets.DeletedSecret>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.HttpResponseError
    description: the former if the deleted secret doesn't exist; the latter for other
      errors
- uid: azure.keyvault.secrets.aio.SecretClient.get_secret
  name: get_secret
  summary: Get a secret. Requires the secrets/get permission.
  signature: 'async get_secret(name: str, version: str | None = None, **kwargs: Any)
    -> KeyVaultSecret'
  parameters:
  - name: name
    description: The name of the secret
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: (optional) Version of the secret to get. If unspecified, gets the
      latest version.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The fetched secret.
    types:
    - <xref:azure.keyvault.secrets.KeyVaultSecret>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.HttpResponseError
    description: the former if the secret doesn't exist; the latter for other errors
- uid: azure.keyvault.secrets.aio.SecretClient.list_deleted_secrets
  name: list_deleted_secrets
  summary: 'Lists all deleted secrets. Possible only in vaults with soft-delete enabled.


    Requires secrets/list permission.'
  signature: 'list_deleted_secrets(**kwargs: Any) -> AsyncItemPaged[DeletedSecret]'
  return:
    description: An iterator of deleted secrets, excluding their values
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.keyvault.secrets.DeletedSecret>]
- uid: azure.keyvault.secrets.aio.SecretClient.list_properties_of_secret_versions
  name: list_properties_of_secret_versions
  summary: 'List properties of all versions of a secret, excluding their values. Requires
    secrets/list permission.


    List items don''t include secret values. Use <xref:azure.keyvault.secrets.aio.SecretClient.get_secret>
    to get a secret''s value.'
  signature: 'list_properties_of_secret_versions(name: str, **kwargs: Any) -> AsyncItemPaged[SecretProperties]'
  parameters:
  - name: name
    description: Name of the secret
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterator of secrets, excluding their values
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.keyvault.secrets.SecretProperties>]
- uid: azure.keyvault.secrets.aio.SecretClient.list_properties_of_secrets
  name: list_properties_of_secrets
  summary: 'List identifiers and attributes of all secrets in the vault. Requires
    secrets/list permission.


    List items don''t include secret values. Use <xref:azure.keyvault.secrets.aio.SecretClient.get_secret>
    to get a secret''s value.'
  signature: 'list_properties_of_secrets(**kwargs: Any) -> AsyncItemPaged[SecretProperties]'
  return:
    description: An iterator of secrets
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.keyvault.secrets.SecretProperties>]
- uid: azure.keyvault.secrets.aio.SecretClient.purge_deleted_secret
  name: purge_deleted_secret
  summary: 'Permanently delete a deleted secret. Possible only in vaults with soft-delete
    enabled.


    Performs an irreversible deletion of the specified secret, without possibility
    for recovery. The operation is

    not available if the <xref:azure.keyvault.secrets.SecretProperties.recovery_level>
    does not specify

    ''Purgeable''. This method is only necessary for purging a secret before its

    <xref:azure.keyvault.secrets.DeletedSecret.scheduled_purge_date>.


    Requires secrets/purge permission.'
  signature: 'async purge_deleted_secret(name: str, **kwargs: Any) -> None'
  parameters:
  - name: name
    description: Name of the deleted secret to purge
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
    : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
    \   # if the vault has soft-delete enabled, purge permanently deletes the secret\n\
    \   # (with soft-delete disabled, delete_secret is permanent)\n   await secret_client.purge_deleted_secret(\"\
    secret-name\")\n   ````\n"
- uid: azure.keyvault.secrets.aio.SecretClient.recover_deleted_secret
  name: recover_deleted_secret
  summary: 'Recover a deleted secret to its latest version. This is possible only
    in vaults with soft-delete enabled.


    Requires the secrets/recover permission. If the vault does not have soft-delete
    enabled, <xref:azure.keyvault.secrets.aio.SecretClient.delete_secret>

    is permanent, and this method will raise an error. Attempting to recover a non-deleted
    secret will also raise an

    error.'
  signature: 'async recover_deleted_secret(name: str, **kwargs: Any) -> SecretProperties'
  parameters:
  - name: name
    description: Name of the deleted secret to recover
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The recovered secret's properties.
    types:
    - <xref:azure.keyvault.secrets.SecretProperties>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.keyvault.secrets.aio.SecretClient.restore_secret_backup
  name: restore_secret_backup
  summary: Restore a backed up secret. Requires the secrets/restore permission.
  signature: 'async restore_secret_backup(backup: bytes, **kwargs: Any) -> SecretProperties'
  parameters:
  - name: backup
    description: A secret backup as returned by <xref:azure.keyvault.secrets.aio.SecretClient.backup_secret>
    isRequired: true
    types:
    - <xref:bytes>
  return:
    description: The restored secret
    types:
    - <xref:azure.keyvault.secrets.SecretProperties>
  exceptions:
  - type: azure.core.exceptions.ResourceExistsError
  - type: azure.core.exceptions.HttpResponseError
    description: the former if the secret's name is already in use; the latter for
      other errors
- uid: azure.keyvault.secrets.aio.SecretClient.send_request
  name: send_request
  summary: 'Runs a network request using the client''s existing pipeline.


    The request URL can be relative to the vault URL. The service API version used
    for the request is the same as

    the client''s unless otherwise specified. This method does not raise if the response
    is an error; to raise an

    exception, call *raise_for_status()* on the returned response object. For more
    information about how to send

    custom requests with this method, see [https://aka.ms/azsdk/dpcodegen/python/send_request](https://aka.ms/azsdk/dpcodegen/python/send_request).'
  signature: 'async send_request(request: HttpRequest, *, stream: bool = False, **kwargs:
    Any) -> Awaitable[AsyncHttpResponse]'
  parameters:
  - name: request
    description: The network request you want to make.
    isRequired: true
    types:
    - <xref:azure.core.rest.HttpRequest>
  keywordOnlyParameters:
  - name: stream
    description: Whether the response payload will be streamed. Defaults to False.
    types:
    - <xref:bool>
  return:
    description: The response of your network call. Does not do error handling on
      your response.
    types:
    - <xref:azure.core.rest.AsyncHttpResponse>
- uid: azure.keyvault.secrets.aio.SecretClient.set_secret
  name: set_secret
  summary: 'Set a secret value. If *name* is in use, create a new version of the secret.
    If not, create a new secret.


    Requires secrets/set permission.'
  signature: 'async set_secret(name: str, value: str, **kwargs: Any) -> KeyVaultSecret'
  parameters:
  - name: name
    description: The name of the secret
    isRequired: true
    types:
    - <xref:str>
  - name: value
    description: The value of the secret
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: enabled
    description: Whether the secret is enabled for use.
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:str>]
    - <xref:None>
  - name: content_type
    description: An arbitrary string indicating the type of the secret, e.g. 'password'
    types:
    - <xref:str>
  - name: not_before
    description: Not before date of the secret in UTC
    types:
    - <xref:datetime.datetime>
  - name: expires_on
    description: Expiry date of the secret in UTC
    types:
    - <xref:datetime.datetime>
  return:
    description: The created or updated secret.
    types:
    - <xref:azure.keyvault.secrets.KeyVaultSecret>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.keyvault.secrets.aio.SecretClient.update_secret_properties
  name: update_secret_properties
  summary: 'Update properties of a secret other than its value. Requires secrets/set
    permission.


    This method updates properties of the secret, such as whether it''s enabled, but
    can''t change the secret''s

    value. Use <xref:azure.keyvault.secrets.aio.SecretClient.set_secret> to change
    the secret''s value.'
  signature: 'async update_secret_properties(name: str, version: str | None = None,
    **kwargs: Any) -> SecretProperties'
  parameters:
  - name: name
    description: Name of the secret
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: (optional) Version of the secret to update. If unspecified, the latest
      version is updated.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: enabled
    description: Whether the secret is enabled for use.
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:str>]
    - <xref:None>
  - name: content_type
    description: An arbitrary string indicating the type of the secret, e.g. 'password'
    types:
    - <xref:str>
  - name: not_before
    description: Not before date of the secret in UTC
    types:
    - <xref:datetime.datetime>
  - name: expires_on
    description: Expiry date of the secret in UTC
    types:
    - <xref:datetime.datetime>
  return:
    description: The updated secret properties.
    types:
    - <xref:azure.keyvault.secrets.SecretProperties>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.HttpResponseError
    description: the former if the secret doesn't exist; the latter for other errors
attributes:
- uid: azure.keyvault.secrets.aio.SecretClient.vault_url
  name: vault_url
