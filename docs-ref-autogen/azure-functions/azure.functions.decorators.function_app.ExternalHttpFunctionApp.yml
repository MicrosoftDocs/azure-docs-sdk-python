### YamlMime:PythonClass
uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp
name: ExternalHttpFunctionApp
fullName: azure.functions.decorators.function_app.ExternalHttpFunctionApp
module: azure.functions.decorators.function_app
inheritances:
- azure.functions.decorators.function_app.FunctionRegister
- azure.functions.decorators.function_app.TriggerApi
- azure.functions.decorators.function_app.SettingsApi
- azure.functions.decorators.function_app.BindingApi
- abc.ABC
summary: 'Interface to extend for building third party http function apps.


  Interface for declaring top level function app class which will

  be directly indexed by Python Function runtime.


  on the request in order to invoke the function.

  :param args: Variable length argument list.

  :param kwargs: Arbitrary keyword arguments.'
constructor:
  syntax: 'ExternalHttpFunctionApp(auth_level: AuthLevel | str, *args, **kwargs)'
  parameters:
  - name: auth_level
    description: Determines what keys, if any, need to be present
    isRequired: true
methods:
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.activity_trigger
  name: activity_trigger
  summary: Register an Activity Function.
  signature: 'activity_trigger(input_name: str, activity: str | None = None)'
  parameters:
  - name: input_name
    description: Parameter name of the Activity input.
    isRequired: true
    types:
    - <xref:str>
  - name: activity
    description: Name of Activity Function.
    defaultValue: None
    types:
    - <xref:Optional>[<xref:str>]
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.assistant_create_output
  name: assistant_create_output
  summary: 'The assistantCreate output binding creates a new assistant with a

    specified system prompt.


    parameter value

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json'
  signature: 'assistant_create_output(arg_name: str, data_type: DataType | str | None
    = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.assistant_post_input
  name: assistant_post_input
  summary: 'The assistantPost output binding sends a message to the assistant and

    saves the response in its internal state.


    assistant to respond to.

    :param model: The OpenAI chat model to use.

    :param data_type: Defines how Functions runtime should treat the

    parameter value

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json'
  signature: 'assistant_post_input(arg_name: str, id: str, user_message: str, model:
    str | None = None, data_type: DataType | str | None = None, **kwargs) -> Callable[[...],
    Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: id
    isRequired: true
  - name: user_message
    isRequired: true
  - name: model
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.assistant_query_input
  name: assistant_query_input
  summary: 'The assistantQuery input binding fetches the assistant history and

    passes it to the function.


    history to fetch. The timestamp should be in ISO 8601 format - for

    example, 2023-08-01T00:00:00Z.

    :param id: The ID of the Assistant to query.

    :param data_type: Defines how Functions runtime should treat the

    parameter value

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json'
  signature: 'assistant_query_input(arg_name: str, id: str, timestamp_utc: str, data_type:
    DataType | str | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: id
    isRequired: true
  - name: timestamp_utc
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.assistant_skill_trigger
  name: assistant_skill_trigger
  summary: 'Assistants build on top of the chat functionality to provide assistants

    with custom skills defined as functions. This internally uses the

    function calling feature OpenAIs GPT models to select which functions

    to invoke and when.

    Ref: [https://platform.openai.com/docs/guides/function-calling](https://platform.openai.com/docs/guides/function-calling)


    You can define functions that can be triggered by assistants by using


    the *assistantSkillTrigger* trigger binding. These functions are

    invoked by the extension when an assistant signals that it would like

    to invoke a function in response to a user prompt.


    The name of the function, the description provided by the trigger,

    and the parameter name are all hints that the underlying language model

    use to determine when and how to invoke an assistant function.


    LLM.

    :param parameter_description_json: A JSON description of the function

    parameter, which is provided to the LLM.

    If no description is provided, the description will be autogenerated.

    :param model: The OpenAI chat model to use.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'assistant_skill_trigger(arg_name: str, function_description: str, function_name:
    str | None = None, parameter_description_json: str | None = None, model: OpenAIModels
    | None = OpenAIModels.DefaultChatModel, data_type: DataType | str | None = None,
    **kwargs: Any) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: function_description
    isRequired: true
  - name: function_name
    defaultValue: None
  - name: parameter_description_json
    defaultValue: None
  - name: model
    defaultValue: DefaultChatModel
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.blob_input
  name: blob_input
  summary: "The blob_input decorator adds <xref:azure.functions.decorators.function_app.BlobInput>\
    \ to the\n<xref:azure.functions.decorators.function_app.FunctionBuilder> object\n\
    for building <xref:azure.functions.decorators.function_app.Function> object used\
    \ in worker function\nindexing model. This is equivalent to defining BlobInput\n\
    in the function.json which enables function to write message(s) to\nthe storage\
    \ blobs.\nAll optional fields will be given default value by function host when\n\
    they are parsed by function host.\n\nRef: [https://aka.ms/azure-function-binding-storage-blob](https://aka.ms/azure-function-binding-storage-blob)\n\
    \nthat specifies how to connect to Azure Blobs.\n:param data_type: Defines how\
    \ Functions runtime should treat the\n\n   parameter value.\n\nfields to include\
    \ in the binding json."
  signature: 'blob_input(arg_name: str, path: str, connection: str, data_type: DataType
    | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: path
    isRequired: true
  - name: connection
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.blob_output
  name: blob_output
  summary: 'The blob_output decorator adds <xref:azure.functions.decorators.function_app.BlobOutput>
    to the

    <xref:azure.functions.decorators.function_app.FunctionBuilder> object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining BlobOutput

    in the function.json which enables function to write message(s) to

    the storage blobs.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-storage-blob](https://aka.ms/azure-function-binding-storage-blob)


    fields to include in the binding json.

    :return: Decorator function.'
  signature: 'blob_output(arg_name: str, path: str, connection: str, data_type: DataType
    | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    description: 'The name of the variable that represents the blob in

      function code.'
    isRequired: true
  - name: path
    description: The path to the blob.
    isRequired: true
  - name: connection
    description: 'The name of an app setting or setting collection

      that specifies how to connect to Azure Blobs.'
    isRequired: true
  - name: data_type
    description: 'Defines how Functions runtime should treat the

      parameter value.'
    defaultValue: None
  - name: kwargs
    description: Keyword arguments for specifying additional binding
    isRequired: true
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.blob_trigger
  name: blob_trigger
  summary: 'The blob_change_trigger decorator adds <xref:azure.functions.decorators.function_app.BlobTrigger>
    to the

    <xref:azure.functions.decorators.function_app.FunctionBuilder> object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining BlobTrigger

    in the function.json which enables function to be triggered when new

    message(s) are sent to the storage blobs.

    All optional fields will be given default value by function host when

    they are parsed by function host.

    Ref: [https://aka.ms/azure-function-binding-storage-blob](https://aka.ms/azure-function-binding-storage-blob)

    :param arg_name: The name of the variable that represents the

    <xref:azure.functions.decorators.function_app.InputStream> object in function
    code.

    :param path: The path to the blob.

    :param connection: The name of an app setting or setting collection

    that specifies how to connect to Azure Blobs.

    :param source: Sets the source of the triggering event.

    Use EventGrid for an Event Grid-based blob trigger,

    which provides much lower latency.

    The default is LogsAndContainerScan,

    which uses the standard polling mechanism to detect changes

    in the container.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'blob_trigger(arg_name: str, path: str, connection: str, source: BlobSource
    | None = None, data_type: DataType | None = None, **kwargs) -> Callable[[...],
    Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: path
    isRequired: true
  - name: connection
    isRequired: true
  - name: source
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.cosmos_db_input
  name: cosmos_db_input
  summary: "The cosmos_db_input decorator adds\n<xref:azure.functions.decorators.function_app.CosmosDBInput>\
    \ to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object\n\
    for building <xref:azure.functions.decorators.function_app.Function> object used\
    \ in worker function\nindexing model. This decorator will work only with extension\
    \ bundle 4.x\nand above. For additional details, please refer\n[https://aka.ms/cosmosdb-v4-update](https://aka.ms/cosmosdb-v4-update).\n\
    This is equivalent to defining CosmosDBInput in the function.json which\n\n  \
    \ enables function to read from CosmosDB.\n\nAll optional fields will be given\
    \ default value by function host when\nthey are parsed by function host.\n\nRef:\
    \ [https://aka.ms/azure-function-binding-cosmosdb-v4](https://aka.ms/azure-function-binding-cosmosdb-v4)\n\
    \n<xref:azure.functions.decorators.function_app.DocumentList> input object in\
    \ function code\n:param connection: The name of an app setting or setting container\
    \ that\n\n   specifies how to connect to the Azure Cosmos DB account being\n \
    \  monitored containing your Azure Cosmos DB connection string\n\ndocument\n:param\
    \ partition_key: Specifies the partition key value for the\nlookup\n:param id:\
    \ The ID of the document to retrieve\n:param sql_query: An Azure Cosmos DB SQL\
    \ query used for retrieving\nmultiple documents\n:param preferred_locations: (Optional)\
    \ Defines preferred locations\n(regions) for geo-replicated database accounts\
    \ in the Azure Cosmos DB\nservice. Values should be comma-separated. For example,\
    \ East US,South\nCentral US,North Europe\n:param data_type: Defines how Functions\
    \ runtime should treat the\nparameter value\n:param kwargs: Keyword arguments\
    \ for specifying additional binding\nfields to include in the binding json"
  signature: 'cosmos_db_input(arg_name: str, connection: str, database_name: str,
    container_name: str, partition_key: str | None = None, id: str | None = None,
    sql_query: str | None = None, preferred_locations: str | None = None, data_type:
    DataType | str | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: connection
    isRequired: true
  - name: database_name
    isRequired: true
  - name: container_name
    isRequired: true
  - name: partition_key
    defaultValue: None
  - name: id
    defaultValue: None
  - name: sql_query
    defaultValue: None
  - name: preferred_locations
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.cosmos_db_input_v3
  name: cosmos_db_input_v3
  summary: 'The cosmos_db_input_v3 decorator adds

    <xref:azure.functions.decorators.function_app.CosmosDBInput> to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This decorator will work only with extension bundle 2.x

    or 3.x. For additional details, please refer

    [https://aka.ms/cosmosdb-v4-update](https://aka.ms/cosmosdb-v4-update).

    This is equivalent to defining CosmosDBInput

    in the function.json which enables function to read from CosmosDB.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-cosmosdb-v2](https://aka.ms/azure-function-binding-cosmosdb-v2)


    <xref:azure.functions.decorators.function_app.DocumentList> input object in function
    code.

    :param database_name: The database containing the document.

    :param collection_name: The name of the collection that contains the

    document.

    :param connection_string_setting: The name of the app setting

    containing your Azure Cosmos DB connection string.

    :param id: The ID of the document to retrieve.

    :param sql_query: An Azure Cosmos DB SQL query used for retrieving

    multiple documents.

    :param partition_key: Specifies the partition key value for the

    lookup.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'cosmos_db_input_v3(arg_name: str, database_name: str, collection_name:
    str, connection_string_setting: str, id: str | None = None, sql_query: str | None
    = None, partition_key: str | None = None, data_type: DataType | str | None = None,
    **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: database_name
    isRequired: true
  - name: collection_name
    isRequired: true
  - name: connection_string_setting
    isRequired: true
  - name: id
    defaultValue: None
  - name: sql_query
    defaultValue: None
  - name: partition_key
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.cosmos_db_output
  name: cosmos_db_output
  summary: 'The cosmos_db_output decorator adds

    <xref:azure.functions.decorators.function_app.CosmosDBOutput> to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This decorator will work only with extension bundle 4.x

    and above. For additional details, please refer

    [https://aka.ms/cosmosdb-v4-update](https://aka.ms/cosmosdb-v4-update).

    This is equivalent to defining CosmosDBOutput

    in the function.json which enables function to write to the CosmosDB.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-cosmosdb-v4](https://aka.ms/azure-function-binding-cosmosdb-v4)


    output object in function code.

    :param connection: The name of an app setting or

    setting collection that specifies how to connect to the Azure Cosmos

    DB account being monitored

    :param database_name: The name of the Azure Cosmos DB database with

    the collection being monitored

    :param container_name: The name of the container being monitored

    :param create_if_not_exists: A boolean value to indicate whether the

    collection is created when it doesn''t exist

    :param partition_key: When CreateIfNotExists is true, it defines the

    partition key path for the created collection

    :param container_throughput: When createIfNotExists is true, it defines

    the throughput of the created container

    PreferredLocations, it can leverage multi-region writes in the Azure

    Cosmos DB service

    :param preferred_locations: Defines preferred locations (regions)

    for geo-replicated database accounts in the Azure Cosmos DB service

    :param data_type: Defines how Functions runtime should treat the

    parameter value

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json'
  signature: 'cosmos_db_output(arg_name: str, connection: str, database_name: str,
    container_name: str, create_if_not_exists: bool | None = None, partition_key:
    str | None = None, container_throughput: int | None = None, preferred_locations:
    str | None = None, data_type: DataType | str | None = None, **kwargs) -> Callable[[...],
    Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: connection
    isRequired: true
  - name: database_name
    isRequired: true
  - name: container_name
    isRequired: true
  - name: create_if_not_exists
    defaultValue: None
  - name: partition_key
    defaultValue: None
  - name: container_throughput
    defaultValue: None
  - name: preferred_locations
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.cosmos_db_output_v3
  name: cosmos_db_output_v3
  summary: "The cosmos_db_output_v3 decorator adds\n<xref:azure.functions.decorators.function_app.CosmosDBOutput>\
    \ to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object\n\
    for building <xref:azure.functions.decorators.function_app.Function> object used\
    \ in worker function\nindexing model. This decorator will work only with extension\
    \ bundle 2.x\nor 3.x. For additional details, please refer\n[https://aka.ms/cosmosdb-v4-update](https://aka.ms/cosmosdb-v4-update).\n\
    \n   This is equivalent to defining CosmosDBOutput\n\nin the function.json which\
    \ enables function to write to the CosmosDB.\nAll optional fields will be given\
    \ default value by function host when\nthey are parsed by function host.\n\nRef:\
    \ [https://aka.ms/azure-function-binding-cosmosdb-v2](https://aka.ms/azure-function-binding-cosmosdb-v2)\n\
    \noutput object in function code.\n:param database_name: The name of the Azure\
    \ Cosmos DB database with\nthe collection being monitored.\n:param collection_name:\
    \ The name of the collection being monitored.\n:param connection_string_setting:\
    \ The name of an app setting or\nsetting collection that specifies how to connect\
    \ to the Azure Cosmos\nDB account being monitored.\n:param create_if_not_exists:\
    \ A boolean value to indicate whether the\ncollection is created when it doesn't\
    \ exist.\n:param partition_key: When CreateIfNotExists is true, it defines the\n\
    partition key path for the created collection.\n:param collection_throughput:\
    \ When CreateIfNotExists is true,\nit defines the throughput of the created collection.\n\
    :param use_multiple_write_locations: When set to true along with\nPreferredLocations,\
    \ it can leverage multi-region writes in the Azure\nCosmos DB service.\n:param\
    \ preferred_locations: Defines preferred locations (regions)\nfor geo-replicated\
    \ database accounts in the Azure Cosmos DB service.\n:param data_type: Defines\
    \ how Functions runtime should treat the\nparameter value.\n:param kwargs: Keyword\
    \ arguments for specifying additional binding\nfields to include in the binding\
    \ json."
  signature: 'cosmos_db_output_v3(arg_name: str, database_name: str, collection_name:
    str, connection_string_setting: str, create_if_not_exists: bool | None = None,
    partition_key: str | None = None, collection_throughput: int | None = None, use_multiple_write_locations:
    bool | None = None, preferred_locations: str | None = None, data_type: DataType
    | str | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: database_name
    isRequired: true
  - name: collection_name
    isRequired: true
  - name: connection_string_setting
    isRequired: true
  - name: create_if_not_exists
    defaultValue: None
  - name: partition_key
    defaultValue: None
  - name: collection_throughput
    defaultValue: None
  - name: use_multiple_write_locations
    defaultValue: None
  - name: preferred_locations
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.cosmos_db_trigger
  name: cosmos_db_trigger
  summary: "The cosmos_db_trigger decorator adds <xref:azure.functions.decorators.function_app.CosmosDBTrigger>\n\
    to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object\n\
    for building <xref:azure.functions.decorators.function_app.Function> object used\
    \ in worker function\nindexing model. This decorator will work only with extension\
    \ bundle 4.x\nand above. For additional details, please refer\n[https://aka.ms/cosmosdb-v4-update](https://aka.ms/cosmosdb-v4-update).\n\
    This is equivalent to defining CosmosDBTrigger in the function.json\nwhich enables\
    \ function to be triggered when CosmosDB data is changed.\nAll optional fields\
    \ will be given default value by function host when\nthey are parsed by function\
    \ host.\n\nRef: [https://aka.ms/azure-function-binding-cosmosdb-v4](https://aka.ms/azure-function-binding-cosmosdb-v4)\n\
    \n<xref:azure.functions.decorators.function_app.DocumentList> object in function\
    \ code\n:param connection: The name of an app setting or setting collection\n\
    that specifies how to connect to the Azure Cosmos DB account being\n\n   monitored.\n\
    \nthe collection being monitored\n:param container_name: The name of the container\
    \ being monitored\n:param lease_connection: (Optional) The name of an app setting\
    \ or\n\n   setting container that specifies how to connect to the Azure Cosmos\n\
    \   DB account that holds the lease container\n\ncollection used to store leases\n\
    :param lease_container_name: (Optional) The name of the container used\n\n   to\
    \ store leases. When not set, the value leases is used\n\ntrue, the leases container\
    \ is automatically created when it doesn't\n   already exist. The default value\
    \ is false. When using Azure AD\n   identities if you set the value to true, creating\
    \ containers is not an\n\n      allowed operation and your Function won't be able\
    \ to start\n\nRequest Units to assign when the leases container is created. This\n\
    setting is only used when createLeaseContainerIfNotExists is set to\ntrue. This\
    \ parameter is automatically set when the binding is created\nusing the portal\n\
    :param lease_container_prefix: (Optional) When set, the value is added\nas a prefix\
    \ to the leases created in the Lease container for this\nfunction. Using a prefix\
    \ allows two separate Azure Functions to share\nthe same Lease container by using\
    \ different prefixes\n:param feed_poll_delay: The time (in milliseconds) for the\
    \ delay\nbetween polling a partition for new changes on the feed, after all\n\
    current changes are drained\n:param lease_acquire_interval: When set, it defines,\n\
    in milliseconds, the interval to kick off a task to compute if\npartitions are\
    \ distributed evenly among known host instances\n:param lease_expiration_interval:\
    \ When set, it defines,\nin milliseconds, the interval for which the lease is\
    \ taken on a\nlease representing a partition\n:param lease_renew_interval: When\
    \ set, it defines, in milliseconds,\nthe renew interval for all leases for partitions\
    \ currently held by\nan instance\n:param max_items_per_invocation: When set, this\
    \ property sets the\nmaximum number of items received per Function call\n:param\
    \ start_from_beginning: This option tells the Trigger to read\nchanges from the\
    \ beginning of the collection's change history\ninstead of starting at the current\
    \ time\n:param start_from_time: (Optional) Gets or sets the date and time from\n\
    which to initialize the change feed read operation. The recommended\nformat is\
    \ ISO 8601 with the UTC designator, such as\n2021-02-16T14:19:29Z. This is only\
    \ used to set the initial trigger\nstate. After the trigger has a lease state,\
    \ changing this value has\nno effect\n:param preferred_locations: Defines preferred\
    \ locations (regions)\nfor geo-replicated database accounts in the Azure Cosmos\
    \ DB service\n:param data_type: Defines how Functions runtime should treat the\n\
    parameter value\n:param kwargs: Keyword arguments for specifying additional binding\n\
    fields to include in the binding json"
  signature: 'cosmos_db_trigger(arg_name: str, connection: str, database_name: str,
    container_name: str, lease_connection: str | None = None, lease_database_name:
    str | None = None, lease_container_name: str | None = None, create_lease_container_if_not_exists:
    bool | None = None, leases_container_throughput: int | None = None, lease_container_prefix:
    str | None = None, feed_poll_delay: int | None = None, lease_acquire_interval:
    int | None = None, lease_expiration_interval: int | None = None, lease_renew_interval:
    int | None = None, max_items_per_invocation: int | None = None, start_from_beginning:
    time | None = None, start_from_time: time | None = None, preferred_locations:
    str | None = None, data_type: DataType | str | None = None, **kwargs: Any) ->
    Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: connection
    isRequired: true
  - name: database_name
    isRequired: true
  - name: container_name
    isRequired: true
  - name: lease_connection
    defaultValue: None
  - name: lease_database_name
    defaultValue: None
  - name: lease_container_name
    defaultValue: None
  - name: create_lease_container_if_not_exists
    defaultValue: None
  - name: leases_container_throughput
    defaultValue: None
  - name: lease_container_prefix
    defaultValue: None
  - name: feed_poll_delay
    defaultValue: None
  - name: lease_acquire_interval
    defaultValue: None
  - name: lease_expiration_interval
    defaultValue: None
  - name: lease_renew_interval
    defaultValue: None
  - name: max_items_per_invocation
    defaultValue: None
  - name: start_from_beginning
    defaultValue: None
  - name: start_from_time
    defaultValue: None
  - name: preferred_locations
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.cosmos_db_trigger_v3
  name: cosmos_db_trigger_v3
  summary: "The cosmos_db_trigger_v3 decorator adds <xref:azure.functions.decorators.function_app.CosmosDBTrigger>\n\
    to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object\n\
    for building <xref:azure.functions.decorators.function_app.Function> object used\
    \ in worker function\nindexing model. This decorator will work only with extension\
    \ bundle 2.x\nor 3.x. For additional details, please refer\n[https://aka.ms/cosmosdb-v4-update](https://aka.ms/cosmosdb-v4-update).\n\
    This is equivalent to defining CosmosDBTrigger in the function.json\n\n   which\
    \ enables function to be triggered when CosmosDB data is changed.\n\nAll optional\
    \ fields will be given default value by function host when\nthey are parsed by\
    \ function host.\n\nRef: [https://aka.ms/azure-function-binding-cosmosdb-v2](https://aka.ms/azure-function-binding-cosmosdb-v2)\n\
    \n<xref:azure.functions.decorators.function_app.DocumentList> object in function\
    \ code.\n:param database_name: The name of the Azure Cosmos DB database with\n\
    the collection being monitored.\n:param collection_name: The name of the collection\
    \ being monitored.\n:param connection_string_setting: The name of an app setting\
    \ or\nsetting collection that specifies how to connect to the Azure Cosmos\nDB\
    \ account being monitored.\n:param lease_collection_name: The name of the collection\
    \ used to\nstore leases.\n:param lease_connection_string_setting: The name of\
    \ an app setting\nor setting collection that specifies how to connect to the Azure\n\
    Cosmos DB account that holds the lease collection.\n:param lease_database_name:\
    \ The name of the database that holds the\ncollection used to store leases.\n\
    :param create_lease_collection_if_not_exists: When set to true,\nthe leases collection\
    \ is automatically created when it doesn't\nalready exist.\n:param leases_collection_throughput:\
    \ Defines the number of Request\nUnits to assign when the leases collection is\
    \ created.\n:param lease_collection_prefix: When set, the value is added as a\n\
    prefix to the leases created in the Lease collection for this\nFunction.\n:param\
    \ checkpoint_interval: When set, it defines, in milliseconds,\nthe interval between\
    \ lease checkpoints. Default is always after a\nFunction call.\n:param checkpoint_document_count:\
    \ Customizes the amount of documents\nbetween lease checkpoints. Default is always\
    \ after a Function call.\n:param feed_poll_delay: The time (in milliseconds) for\
    \ the delay\nbetween polling a partition for new changes on the feed, after all\n\
    current changes are drained.\n:param lease_renew_interval: When set, it defines,\
    \ in milliseconds,\nthe renew interval for all leases for partitions currently\
    \ held by\nan instance.\n:param lease_acquire_interval: When set, it defines,\n\
    in milliseconds, the interval to kick off a task to compute if\npartitions are\
    \ distributed evenly among known host instances.\n:param lease_expiration_interval:\
    \ When set, it defines,\nin milliseconds, the interval for which the lease is\
    \ taken on a\nlease representing a partition.\n:param max_items_per_invocation:\
    \ When set, this property sets the\nmaximum number of items received per Function\
    \ call.\n:param start_from_beginning: This option tells the Trigger to read\n\
    changes from the beginning of the collection's change history\ninstead of starting\
    \ at the current time.\n:param preferred_locations: Defines preferred locations\
    \ (regions)\nfor geo-replicated database accounts in the Azure Cosmos DB service.\n\
    :param data_type: Defines how Functions runtime should treat the\nparameter value.\n\
    :param kwargs: Keyword arguments for specifying additional binding\nfields to\
    \ include in the binding json."
  signature: 'cosmos_db_trigger_v3(arg_name: str, database_name: str, collection_name:
    str, connection_string_setting: str, lease_collection_name: str | None = None,
    lease_connection_string_setting: str | None = None, lease_database_name: str |
    None = None, create_lease_collection_if_not_exists: bool | None = None, leases_collection_throughput:
    int | None = None, lease_collection_prefix: str | None = None, checkpoint_interval:
    int | None = None, checkpoint_document_count: int | None = None, feed_poll_delay:
    int | None = None, lease_renew_interval: int | None = None, lease_acquire_interval:
    int | None = None, lease_expiration_interval: int | None = None, max_items_per_invocation:
    int | None = None, start_from_beginning: bool | None = None, preferred_locations:
    str | None = None, data_type: DataType | str | None = None, **kwargs: Any) ->
    Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: database_name
    isRequired: true
  - name: collection_name
    isRequired: true
  - name: connection_string_setting
    isRequired: true
  - name: lease_collection_name
    defaultValue: None
  - name: lease_connection_string_setting
    defaultValue: None
  - name: lease_database_name
    defaultValue: None
  - name: create_lease_collection_if_not_exists
    defaultValue: None
  - name: leases_collection_throughput
    defaultValue: None
  - name: lease_collection_prefix
    defaultValue: None
  - name: checkpoint_interval
    defaultValue: None
  - name: checkpoint_document_count
    defaultValue: None
  - name: feed_poll_delay
    defaultValue: None
  - name: lease_renew_interval
    defaultValue: None
  - name: lease_acquire_interval
    defaultValue: None
  - name: lease_expiration_interval
    defaultValue: None
  - name: max_items_per_invocation
    defaultValue: None
  - name: start_from_beginning
    defaultValue: None
  - name: preferred_locations
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.dapr_binding_output
  name: dapr_binding_output
  summary: 'The dapr_binding_output decorator adds

    <xref:azure.functions.decorators.function_app.DaprBindingOutput> to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model.

    This is equivalent to defining DaprBindingOutput

    in the function.json which enables function to send a value to

    a Dapr output binding.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-dapr-binding-output-binding](https://aka.ms/azure-function-dapr-binding-output-binding)


    output object in function code.

    :param binding_name: The configured name of the binding.

    :param operation:  The configured operation.

    :param dapr_address: Dapr address, it is optional field, by default

    it will be set to [http://localhost](http://localhost):{daprHttpPort}.

    :param data_type: Defines how Functions runtime should treat the

    parameter value

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json'
  signature: 'dapr_binding_output(arg_name: str, binding_name: str, operation: str,
    dapr_address: str | None = None, data_type: DataType | str | None = None, **kwargs)
    -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: binding_name
    isRequired: true
  - name: operation
    isRequired: true
  - name: dapr_address
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.dapr_binding_trigger
  name: dapr_binding_trigger
  summary: 'The dapr_binding_trigger decorator adds

    <xref:azure.functions.decorators.function_app.DaprBindingTrigger>

    to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining DaprBindingTrigger

    in the function.json which enables function to be triggered

    on Dapr input binding.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-dapr-trigger-binding](https://aka.ms/azure-function-dapr-trigger-binding)


    If not specified, the name of the function is used as the trigger name.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'dapr_binding_trigger(arg_name: str, binding_name: str, data_type: DataType
    | str | None = None, **kwargs: Any) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: binding_name
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.dapr_invoke_output
  name: dapr_invoke_output
  summary: 'The dapr_invoke_output decorator adds

    <xref:azure.functions.decorators.function_app.DaprInvokeOutput> to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model.

    This is equivalent to defining DaprInvokeOutput

    in the function.json which enables function to invoke another Dapr App.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-dapr-invoke-output-binding](https://aka.ms/azure-function-dapr-invoke-output-binding)


    output object in function code.

    :param app_id: The dapr app name to invoke.

    :param method_name: The method name of the app to invoke.

    :param http_verb: The http verb of the app to invoke.

    :param dapr_address: Dapr address, it is optional field, by default

    it will be set to [http://localhost](http://localhost):{daprHttpPort}.

    :param data_type: Defines how Functions runtime should treat the

    parameter value

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json'
  signature: 'dapr_invoke_output(arg_name: str, app_id: str, method_name: str, http_verb:
    str, dapr_address: str | None = None, data_type: DataType | str | None = None,
    **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: app_id
    isRequired: true
  - name: method_name
    isRequired: true
  - name: http_verb
    isRequired: true
  - name: dapr_address
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.dapr_publish_output
  name: dapr_publish_output
  summary: "The dapr_publish_output decorator adds\n<xref:azure.functions.decorators.function_app.DaprPublishOutput>\
    \ to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object\n\
    for building <xref:azure.functions.decorators.function_app.Function> object used\
    \ in worker function\nindexing model.\nThis is equivalent to defining DaprPublishOutput\n\
    in the function.json which enables function to publish topic.\nAll optional fields\
    \ will be given default value by function host when\nthey are parsed by function\
    \ host.\n\nRef: [https://aka.ms/azure-function-dapr-publish-output-binding](https://aka.ms/azure-function-dapr-publish-output-binding)\n\
    \noutput object in function code.\n:param pub_sub_name: The pub/sub name to publish\
    \ to.\n:param topic:  The name of the topic to publish to.\n:param dapr_address:\
    \ Dapr address, it is optional field, by default\n\xDFit will be set to [http://localhost](http://localhost):{daprHttpPort}.\n\
    :param data_type: Defines how Functions runtime should treat the\nparameter value\n\
    :param kwargs: Keyword arguments for specifying additional binding\nfields to\
    \ include in the binding json"
  signature: 'dapr_publish_output(arg_name: str, pub_sub_name: str, topic: str, dapr_address:
    str | None = None, data_type: DataType | str | None = None, **kwargs) -> Callable[[...],
    Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: pub_sub_name
    isRequired: true
  - name: topic
    isRequired: true
  - name: dapr_address
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.dapr_secret_input
  name: dapr_secret_input
  summary: 'The dapr_secret_input decorator adds

    <xref:azure.functions.decorators.function_app.DaprSecretInput> to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining DaprSecretInput

    in the function.json which enables function to read secret from

    underlying secret store component.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-dapr-secret-input-binding](https://aka.ms/azure-function-dapr-secret-input-binding)


    input object in function code.

    :param secret_store_name: The name of the secret store to

    get the secret from.

    :param key: The key identifying the name of the secret to get.

    :param metadata: An array of metadata properties in the form

    "key1=value1&amp;key2=value2".

    :param dapr_address: Dapr address, it is optional field, by default

    it will be set to [http://localhost](http://localhost):{daprHttpPort}.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'dapr_secret_input(arg_name: str, secret_store_name: str, key: str, metadata:
    str, dapr_address: str | None = None, data_type: DataType | str | None = None,
    **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: secret_store_name
    isRequired: true
  - name: key
    isRequired: true
  - name: metadata
    isRequired: true
  - name: dapr_address
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.dapr_service_invocation_trigger
  name: dapr_service_invocation_trigger
  summary: 'The dapr_service_invocation_trigger decorator adds

    <xref:azure.functions.decorators.function_app.DaprServiceInvocationTrigger>

    to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining

    DaprServiceInvocationTrigger

    in the function.json which enables function to be triggered when new

    service invocation occurs through Dapr.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-dapr-trigger-service-invocation](https://aka.ms/azure-function-dapr-trigger-service-invocation)


    If not specified, the name of the function is used as the method name.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'dapr_service_invocation_trigger(arg_name: str, method_name: str, data_type:
    DataType | str | None = None, **kwargs: Any) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: method_name
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.dapr_state_input
  name: dapr_state_input
  summary: 'The dapr_state_input decorator adds

    <xref:azure.functions.decorators.function_app.DaprStateInput> to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining DaprStateInput

    in the function.json which enables function to read state from

    underlying state store component.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-dapr-state-input-binding](https://aka.ms/azure-function-dapr-state-input-binding)


    input object in function code.

    :param state_store: State store containing the state.

    :param key: The name of the key.

    :param dapr_address: Dapr address, it is optional field, by default

    it will be set to [http://localhost](http://localhost):{daprHttpPort}.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'dapr_state_input(arg_name: str, state_store: str, key: str, dapr_address:
    str | None = None, data_type: DataType | str | None = None, **kwargs) -> Callable[[...],
    Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: state_store
    isRequired: true
  - name: key
    isRequired: true
  - name: dapr_address
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.dapr_state_output
  name: dapr_state_output
  summary: 'The dapr_state_output decorator adds

    <xref:azure.functions.decorators.function_app.DaprStateOutput> to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model.

    This is equivalent to defining DaprStateOutput

    in the function.json which enables function to write to the dapr

    state store.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-dapr-state-output-binding](https://aka.ms/azure-function-dapr-state-output-binding)


    output object in function code.

    :param state_store: State store containing the state for keys.

    :param key: The name of the key.

    :param dapr_address: Dapr address, it is optional field, by default

    it will be set to [http://localhost](http://localhost):{daprHttpPort}.

    :param data_type: Defines how Functions runtime should treat the

    parameter value

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json'
  signature: 'dapr_state_output(arg_name: str, state_store: str, key: str, dapr_address:
    str | None = None, data_type: DataType | str | None = None, **kwargs) -> Callable[[...],
    Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: state_store
    isRequired: true
  - name: key
    isRequired: true
  - name: dapr_address
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.dapr_topic_trigger
  name: dapr_topic_trigger
  summary: 'The dapr_topic_trigger decorator adds

    <xref:azure.functions.decorators.function_app.DaprTopicTrigger>

    to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining DaprTopicTrigger

    in the function.json which enables function to be triggered when new

    message(s) are sent to the Dapr pubsub.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-dapr-trigger-topic](https://aka.ms/azure-function-dapr-trigger-topic)


    the topic name will be used.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'dapr_topic_trigger(arg_name: str, pub_sub_name: str, topic: str, route:
    str | None = None, data_type: DataType | str | None = None, **kwargs: Any) ->
    Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: pub_sub_name
    isRequired: true
  - name: topic
    isRequired: true
  - name: route
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.durable_client_input
  name: durable_client_input
  summary: Register a Durable-client Function.
  signature: 'durable_client_input(client_name: str, task_hub: str | None = None,
    connection_name: str | None = None)'
  parameters:
  - name: client_name
    description: Parameter name of durable client.
    isRequired: true
    types:
    - <xref:str>
  - name: task_hub
    description: 'Used in scenarios where multiple function apps share the

      same storage account but need to be isolated from each other.

      If not specified, the default value from host.json is used.

      This value must match the value used by the target

      orchestrator functions.'
    defaultValue: None
    types:
    - <xref:Optional>[<xref:str>]
  - name: connection_name
    description: 'The name of an app setting that contains a storage account

      connection string.  The storage account represented by this

      connection string must be the same one used by the target

      orchestrator functions. If not specified, the default storage

      account connection string for the function app is used.'
    defaultValue: None
    types:
    - <xref:Optional>[<xref:str>]
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.embeddings_input
  name: embeddings_input
  summary: 'The embeddings input decorator creates embeddings which will be used to

    measure the relatedness of text strings.


    Ref: [https://platform.openai.com/docs/guides/embeddings](https://platform.openai.com/docs/guides/embeddings)


    embeddings for.

    :param input_type: The type of the input.

    :param model: The ID of the model to use.

    :param max_chunk_length: The maximum number of characters to chunk the

    input into. Default value: 8 * 1024

    :param max_overlap: The maximum number of characters to overlap

    between chunks. Default value: 128

    :param data_type: Defines how Functions runtime should treat the

    parameter value

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json'
  signature: 'embeddings_input(arg_name: str, input: str, input_type: InputType, model:
    str | None = None, max_chunk_length: int | None = 8192, max_overlap: int | None
    = 128, data_type: DataType | str | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: input
    isRequired: true
  - name: input_type
    isRequired: true
  - name: model
    defaultValue: None
  - name: max_chunk_length
    defaultValue: '8192'
  - name: max_overlap
    defaultValue: '128'
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.embeddings_store_output
  name: embeddings_store_output
  summary: "Supported list of embeddings store is extensible, and more can be\nadded\
    \ by authoring a specially crafted NuGet package. Visit the\ncurrently supported\
    \ vector specific folder for specific usage\ninformation:\n\n* Azure AI Search\
    \ \n\n* Azure Data Explorer \n\n* Azure Cosmos DB using MongoDB \n\nvariable which\
    \ contains a connection string value\n:param collection: The collection or table\
    \ to search.\n:param model: The ID of the model to use.\n:param max_chunk_length:\
    \ The maximum number of characters to chunk the\ninput into.\n:param max_overlap:\
    \ The maximum number of characters to overlap between\nchunks.\n:param data_type:\
    \ Optional. Defines how Functions runtime should treat\nthe parameter value. Default\
    \ value: None\n:param kwargs: Keyword arguments for specifying additional binding\n\
    fields to include in the binding json"
  signature: 'embeddings_store_output(arg_name: str, input: str, input_type: InputType,
    connection_name: str, collection: str, model: OpenAIModels | None = OpenAIModels.DefaultEmbeddingsModel,
    max_chunk_length: int | None = 8192, max_overlap: int | None = 128, data_type:
    DataType | str | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: input
    isRequired: true
  - name: input_type
    isRequired: true
  - name: connection_name
    isRequired: true
  - name: collection
    isRequired: true
  - name: model
    defaultValue: DefaultEmbeddingsModel
  - name: max_chunk_length
    defaultValue: '8192'
  - name: max_overlap
    defaultValue: '128'
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.entity_trigger
  name: entity_trigger
  summary: Register an Entity Function.
  signature: 'entity_trigger(context_name: str, entity_name: str | None = None)'
  parameters:
  - name: context_name
    description: Parameter name of the Entity input.
    isRequired: true
    types:
    - <xref:str>
  - name: entity_name
    description: Name of Entity Function.
    defaultValue: None
    types:
    - <xref:Optional>[<xref:str>]
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.event_grid_output
  name: event_grid_output
  summary: 'The event_grid_output decorator adds

    <xref:azure.functions.decorators.function_app.EventGridOutput>

    to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining output binding

    in the function.json which enables function to

    write events to a custom topic.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/eventgridtrigger](https://aka.ms/eventgridtrigger)


    represents the event.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param topic_endpoint_uri:      The name of an app setting that

    contains the URI for the custom topic.

    :param topic_key_setting: The name of an app setting that

    contains an access key for the custom topic.

    :param connection: The value of the common prefix for the setting that

    contains the topic endpoint URI.

    :return: Decorator function.'
  signature: 'event_grid_output(arg_name: str, topic_endpoint_uri: str | None = None,
    topic_key_setting: str | None = None, connection: str | None = None, data_type:
    DataType | str | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    description: The variable name used in function code that
    isRequired: true
  - name: topic_endpoint_uri
    defaultValue: None
  - name: topic_key_setting
    defaultValue: None
  - name: connection
    defaultValue: None
  - name: data_type
    defaultValue: None
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.event_grid_trigger
  name: event_grid_trigger
  summary: 'The event_grid_trigger decorator adds

    <xref:azure.functions.decorators.function_app.EventGridTrigger>

    to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining event grid trigger

    in the function.json which enables function to be triggered to

    respond to an event sent to an event grid topic.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/eventgridtrigger](https://aka.ms/eventgridtrigger)


    parameter value.

    :return: Decorator function.'
  signature: 'event_grid_trigger(arg_name: str, data_type: DataType | str | None =
    None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    description: 'the variable name used in function code for the

      parameter that receives the event data.'
    isRequired: true
  - name: data_type
    description: Defines how Functions runtime should treat the
    defaultValue: None
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.event_hub_message_trigger
  name: event_hub_message_trigger
  summary: 'The event_hub_message_trigger decorator adds

    <xref:azure.functions.decorators.function_app.EventHubTrigger>

    to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining EventHubTrigger

    in the function.json which enables function to be triggered when new

    message(s) are sent to the event hub.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-event-hubs](https://aka.ms/azure-function-binding-event-hubs)


    <xref:azure.functions.decorators.function_app.EventHubEvent> object in function
    code.

    :param connection: The name of an app setting or setting collection

    that specifies how to connect to Event Hubs.

    :param event_hub_name: The name of the event hub.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param cardinality: Set to many in order to enable batching.

    :param consumer_group: An optional property that sets the consumer

    group used to subscribe to events in the hub.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'event_hub_message_trigger(arg_name: str, connection: str, event_hub_name:
    str, data_type: DataType | str | None = None, cardinality: Cardinality | str |
    None = None, consumer_group: str | None = None, **kwargs: Any) -> Callable[[...],
    Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: connection
    isRequired: true
  - name: event_hub_name
    isRequired: true
  - name: data_type
    defaultValue: None
  - name: cardinality
    defaultValue: None
  - name: consumer_group
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.event_hub_output
  name: event_hub_output
  summary: 'The event_hub_output decorator adds

    <xref:azure.functions.decorators.function_app.EventHubOutput> to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining EventHubOutput

    in the function.json which enables function to write message(s) to

    the event hub.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-event-hubs](https://aka.ms/azure-function-binding-event-hubs)


    output object in function code.

    :param connection: The name of an app setting or setting collection

    that specifies how to connect to Event Hub.

    :param event_hub_name: The name of the event hub.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'event_hub_output(arg_name: str, connection: str, event_hub_name: str,
    data_type: DataType | str | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: connection
    isRequired: true
  - name: event_hub_name
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.function_name
  name: function_name
  summary: 'Optional: Sets name of the <xref:azure.functions.decorators.function_app.Function>
    object. If not set,

    it will default to the name of the method name.


    additional setting fields

    :return: Decorator function.'
  signature: 'function_name(name: str, setting_extra_fields: Dict[str, Any] | None
    = None) -> Callable[[...], Any]'
  parameters:
  - name: name
    description: Name of the function.
    isRequired: true
  - name: setting_extra_fields
    description: Keyword arguments for specifying
    defaultValue: None
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.generic_input_binding
  name: generic_input_binding
  summary: 'The generic_input_binding decorator adds <xref:azure.functions.decorators.function_app.GenericInputBinding>

    to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object for
    building <xref:azure.functions.decorators.function_app.Function>

    object used in worker function indexing model.

    This is equivalent to defining a generic input binding in the

    function.json which enables function to read data from a

    custom defined input source.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-custom](https://aka.ms/azure-function-binding-custom)


    fields to include in the binding json.'
  signature: 'generic_input_binding(arg_name: str, type: str, data_type: DataType
    | str | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: type
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.generic_output_binding
  name: generic_output_binding
  summary: 'The generic_output_binding decorator adds <xref:azure.functions.decorators.function_app.GenericOutputBinding>

    to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object for
    building <xref:azure.functions.decorators.function_app.Function>

    object used in worker function indexing model.

    This is equivalent to defining a generic output binding in the

    function.json which enables function to write data from a

    custom defined output source.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-custom](https://aka.ms/azure-function-binding-custom)


    fields to include in the binding json.'
  signature: 'generic_output_binding(arg_name: str, type: str, data_type: DataType
    | str | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: type
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.generic_trigger
  name: generic_trigger
  summary: 'The generic_trigger decorator adds <xref:azure.functions.decorators.function_app.GenericTrigger>

    to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object for
    building <xref:azure.functions.decorators.function_app.Function>

    object used in worker function indexing model.

    This is equivalent to defining a generic trigger in the

    function.json which triggers function to execute when generic trigger

    events are received by host.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-custom](https://aka.ms/azure-function-binding-custom)


    fields to include in the binding json.'
  signature: 'generic_trigger(arg_name: str, type: str, data_type: DataType | str
    | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: type
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.get_functions
  name: get_functions
  summary: Get the function objects in the function app.
  signature: get_functions() -> List[Function]
  return:
    description: List of functions in the function app.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.http_type
  name: http_type
  summary: Set http type of the <xref:azure.functions.decorators.function_app.Function>
    object.
  signature: 'http_type(http_type: str) -> Callable[[...], Any]'
  parameters:
  - name: http_type
    description: Http type of the function.
    isRequired: true
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.kafka_output
  name: kafka_output
  summary: "The kafka_output decorator adds\n<xref:azure.functions.decorators.function_app.KafkaOutput>\n\
    to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object\n\
    for building <xref:azure.functions.decorators.function_app.Function> object used\
    \ in worker function\nindexing model. This is equivalent to defining output binding\n\
    in the function.json which enables function to\nwrite events to a kafka topic.\n\
    All optional fields will be given default value by function host when\nthey are\
    \ parsed by function host.\n\nRef: [https://aka.ms/kafkaoutput](https://aka.ms/kafkaoutput)\n\
    \nrepresents the event.\n:param topic: The topic monitored by the trigger.\n:param\
    \ broker_list: The list of Kafka brokers monitored by the trigger.\n:param avro_schema:\
    \ This should be used only if a generic record\nshould be generated.\n:param username:\
    \ SASL username for use with the PLAIN and SASL-SCRAM-..\n\n   mechanisms. Default\
    \ is empty string. This is equivalent to\n\n'sasl.username' in librdkafka.\n:param\
    \ password: SASL password for use with the PLAIN and SASL-SCRAM-..\n\n   mechanisms.\
    \ Default is empty string. This is equivalent to\n\n'sasl.password' in librdkafka.\n\
    :param ssl_key_location: Path to client's private key (PEM) used for\n\n   authentication.\
    \ Default is empty string. This is equivalent to\n\n'ssl.key.location' in librdkafka.\n\
    :param ssl_ca_location: Path to CA certificate file for verifying the\nbroker's\
    \ certificate. This is equivalent to 'ssl.ca.location' in\nlibrdkafka.\n:param\
    \ ssl_certificate_location: Path to client's certificate. This is\nequivalent\
    \ to 'ssl.certificate.location' in librdkafka.\n:param ssl_key_password: Password\
    \ for client's certificate. This is\nequivalent to 'ssl.key.password' in librdkafka.\n\
    :param schema_registry_url: URL for the Avro Schema Registry.\n:param schema_registry_username:\
    \ Username for the Avro Schema Registry.\n:param schema_registry_password: Password\
    \ for the Avro Schema Registry.\n:param o_auth_bearer_method: Either 'default'\
    \ or 'oidc'.\nsasl.oauthbearer in librdkafka.\n:param o_auth_bearer_client_id:\
    \ Specify only when o_auth_bearer_method\nis 'oidc'. sasl.oauthbearer.client.id\
    \ in librdkafka.\n:param o_auth_bearer_client_secret: Specify only when\no_auth_bearer_method\
    \ is 'oidc'. sasl.oauthbearer.client.secret in\nlibrdkafka.\n:param o_auth_bearer_scope:\
    \ Specify only when o_auth_bearer_method\nis 'oidc'. Client use this to specify\
    \ the scope of the access request\nto the broker. sasl.oauthbearer.scope in librdkafka.\n\
    :param o_auth_bearer_token_endpoint_url: Specify only when\no_auth_bearer_method\
    \ is 'oidc'. sasl.oauthbearer.token.endpoint.url\nin librdkafka.\n:param o_auth_bearer_extensions:\
    \ Allow additional information to be\nprovided to the broker. Comma-separated\
    \ list of key=value pairs. E.g.,\n\"supportFeatureX=true,organizationId=sales-emea\"\
    .\nsasl.oauthbearer.extensions in librdkafka\n:param max_message_bytes: Maximum\
    \ transmit message size. Default is 1MB\n:param batch_size: Maximum number of\
    \ messages batched in one MessageSet\nDefault is 10000.\n:param enable_idempotence:\
    \ When set to *true*, the producer will ensure\n\n   that messages are successfully\
    \ produced exactly once and in the\n   original produce order. Default is false.\n\
    \nenforced locally and limits the time a produced message waits for\nsuccessful\
    \ delivery. A time of 0 is infinite. This is the maximum time\n\n   used to deliver\
    \ a message (including retries). Delivery error occurs\n\nwhen either the retry\
    \ count or the message timeout are exceeded.\nDefault is 300000.\n:param request_timeout_ms:\
    \ The ack timeout of the producer request in\nmilliseconds. Default is 5000.\n\
    :param max_retries: How many times to retry sending a failing Message.\nDefault\
    \ is 2147483647. Retrying may cause reordering unless\n'EnableIdempotence' is\
    \ set to 'True'.\n:param authentication_mode: SASL mechanism to use for authentication.\n\
    Allowed values: Gssapi, Plain, ScramSha256, ScramSha512. Default is\nPlain. This\
    \ is equivalent to 'sasl.mechanism' in librdkafka.\n:param protocol: Gets or sets\
    \ the security protocol used to communicate\n\n   with brokers. Default is plain\
    \ text. This is equivalent to\n\n'security.protocol' in librdkafka.\n:param linger_ms:\
    \ Linger.MS property provides the time between batches\nof messages being sent\
    \ to cluster. Larger value allows more batching\nresults in high throughput.\n\
    :param data_type: Defines how Functions runtime should treat the\nparameter value.\n\
    :param kwargs: Keyword arguments for specifying additional binding\nfields to\
    \ include in the binding json"
  signature: 'kafka_output(arg_name: str, topic: str, broker_list: str, avro_schema:
    str | None = None, username: str | None = None, password: str | None = None, ssl_key_location:
    str | None = None, ssl_ca_location: str | None = None, ssl_certificate_location:
    str | None = None, ssl_key_password: str | None = None, schema_registry_url: str
    | None = None, schema_registry_username: str | None = None, schema_registry_password:
    str | None = None, o_auth_bearer_method: OAuthBearerMethod | str | None = None,
    o_auth_bearer_client_id: str | None = None, o_auth_bearer_client_secret: str |
    None = None, o_auth_bearer_scope: str | None = None, o_auth_bearer_token_endpoint_url:
    str | None = None, o_auth_bearer_extensions: str | None = None, max_message_bytes:
    int = 1000000, batch_size: int = 10000, enable_idempotence: bool = False, message_timeout_ms:
    int = 300000, request_timeout_ms: int = 5000, max_retries: int = 2147483647, authentication_mode:
    BrokerAuthenticationMode | str | None = ''NOTSET'', protocol: BrokerProtocol |
    str | None = ''NOTSET'', linger_ms: int = 5, data_type: DataType | str | None
    = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: topic
    isRequired: true
  - name: broker_list
    isRequired: true
  - name: avro_schema
    defaultValue: None
  - name: username
    defaultValue: None
  - name: password
    defaultValue: None
  - name: ssl_key_location
    defaultValue: None
  - name: ssl_ca_location
    defaultValue: None
  - name: ssl_certificate_location
    defaultValue: None
  - name: ssl_key_password
    defaultValue: None
  - name: schema_registry_url
    defaultValue: None
  - name: schema_registry_username
    defaultValue: None
  - name: schema_registry_password
    defaultValue: None
  - name: o_auth_bearer_method
    defaultValue: None
  - name: o_auth_bearer_client_id
    defaultValue: None
  - name: o_auth_bearer_client_secret
    defaultValue: None
  - name: o_auth_bearer_scope
    defaultValue: None
  - name: o_auth_bearer_token_endpoint_url
    defaultValue: None
  - name: o_auth_bearer_extensions
    defaultValue: None
  - name: max_message_bytes
    defaultValue: '1000000'
  - name: batch_size
    defaultValue: '10000'
  - name: enable_idempotence
    defaultValue: 'False'
  - name: message_timeout_ms
    defaultValue: '300000'
  - name: request_timeout_ms
    defaultValue: '5000'
  - name: max_retries
    defaultValue: '2147483647'
  - name: authentication_mode
    defaultValue: NOTSET
  - name: protocol
    defaultValue: NOTSET
  - name: linger_ms
    defaultValue: '5'
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.kafka_trigger
  name: kafka_trigger
  summary: "The kafka_trigger decorator adds\n<xref:azure.functions.decorators.function_app.KafkaTrigger>\n\
    to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object\n\
    for building <xref:azure.functions.decorators.function_app.Function> object used\
    \ in worker function\nindexing model. This is equivalent to defining kafka trigger\n\
    in the function.json which enables function to be triggered to\nrespond to an\
    \ event sent to a kafka topic.\nAll optional fields will be given default value\
    \ by function host when\nthey are parsed by function host.\n\nRef: [https://aka.ms/kafkatrigger](https://aka.ms/kafkatrigger)\n\
    \ncontains the connection string for the eventhub when using Kafka\nprotocol header\
    \ feature of Azure EventHubs.\n:param consumer_group: Kafka consumer group used\
    \ by the trigger.\n:param avro_schema: This should be used only if a generic record\n\
    should be generated.\n:param username: SASL username for use with the PLAIN and\
    \ SASL-SCRAM-..\n\n   mechanisms. Default is empty string. This is equivalent\
    \ to\n\n'sasl.username' in librdkafka.\n:param password: SASL password for use\
    \ with the PLAIN and SASL-SCRAM-..\n\n   mechanisms. Default is empty string.\
    \ This is equivalent to\n\n'sasl.password' in librdkafka.\n:param ssl_key_location:\
    \ Path to client's private key (PEM) used for\n\n   authentication. Default is\
    \ empty string. This is equivalent to\n\n'ssl.key.location' in librdkafka.\n:param\
    \ ssl_ca_location: Path to CA certificate file for verifying the\nbroker's certificate.\
    \ This is equivalent to 'ssl.ca.location' in\nlibrdkafka.\n:param ssl_certificate_location:\
    \ Path to client's certificate. This is\nequivalent to 'ssl.certificate.location'\
    \ in librdkafka.\n:param ssl_key_password: Password for client's certificate.\
    \ This is\nequivalent to 'ssl.key.password' in librdkafka.\n:param schema_registry_url:\
    \ URL for the Avro Schema Registry.\n:param schema_registry_username: Username\
    \ for the Avro Schema Registry.\n:param schema_registry_password: Password for\
    \ the Avro Schema Registry.\n:param o_auth_bearer_method: Either 'default' or\
    \ 'oidc'.\nsasl.oauthbearer in librdkafka.\n:param o_auth_bearer_client_id: Specify\
    \ only when o_auth_bearer_method\nis 'oidc'. sasl.oauthbearer.client.id in librdkafka.\n\
    :param o_auth_bearer_client_secret: Specify only when\no_auth_bearer_method is\
    \ 'oidc'. sasl.oauthbearer.client.secret in\nlibrdkafka.\n:param o_auth_bearer_scope:\
    \ Specify only when o_auth_bearer_method\nis 'oidc'. Client use this to specify\
    \ the scope of the access request\nto the broker. sasl.oauthbearer.scope in librdkafka.\n\
    :param o_auth_bearer_token_endpoint_url: Specify only when\no_auth_bearer_method\
    \ is 'oidc'. sasl.oauthbearer.token.endpoint.url\nin librdkafka.\n:param o_auth_bearer_extensions:\
    \ Allow additional information to be\nprovided to the broker. Comma-separated\
    \ list of key=value pairs. E.g.,\n\"supportFeatureX=true,organizationId=sales-emea\"\
    .\nsasl.oauthbearer.extensions in librdkafka\n:param authentication_mode: SASL\
    \ mechanism to use for authentication.\nAllowed values: Gssapi, Plain, ScramSha256,\
    \ ScramSha512. Default is\nPlain. This is equivalent to 'sasl.mechanism' in librdkafka.\n\
    :param protocol: Gets or sets the security protocol used to communicate\n\n  \
    \ with brokers. Default is plain text. This is equivalent to\n\n'security.protocol'\
    \ in librdkafka. TODO\n:param lag_threshold: Maximum number of unprocessed messages\
    \ a worker\nis expected to have at an instance. When target-based scaling is not\n\
    disabled, this is used to divide total unprocessed event count to\ndetermine the\
    \ number of worker instances, which will then be rounded\nup to a worker instance\
    \ count that creates a balanced partition\ndistribution. Default is 1000.\n:param\
    \ data_type: Defines how Functions runtime should treat the\nparameter value.\n\
    :param kwargs: Keyword arguments for specifying additional binding\nfields to\
    \ include in the binding json\n:return: Decorator function."
  signature: 'kafka_trigger(arg_name: str, topic: str, broker_list: str, event_hub_connection_string:
    str | None = None, consumer_group: str | None = None, avro_schema: str | None
    = None, username: str | None = None, password: str | None = None, ssl_key_location:
    str | None = None, ssl_ca_location: str | None = None, ssl_certificate_location:
    str | None = None, ssl_key_password: str | None = None, schema_registry_url: str
    | None = None, schema_registry_username: str | None = None, schema_registry_password:
    str | None = None, o_auth_bearer_method: OAuthBearerMethod | str | None = None,
    o_auth_bearer_client_id: str | None = None, o_auth_bearer_client_secret: str |
    None = None, o_auth_bearer_scope: str | None = None, o_auth_bearer_token_endpoint_url:
    str | None = None, o_auth_bearer_extensions: str | None = None, authentication_mode:
    BrokerAuthenticationMode | str | None = ''NotSet'', protocol: BrokerProtocol |
    str | None = ''NotSet'', cardinality: Cardinality | str | None = ''One'', lag_threshold:
    int = 1000, data_type: DataType | str | None = None, **kwargs) -> Callable[[...],
    Any]'
  parameters:
  - name: arg_name
    description: 'the variable name used in function code for the

      parameter that has the kafka event data.'
    isRequired: true
  - name: topic
    description: The topic monitored by the trigger.
    isRequired: true
  - name: broker_list
    description: The list of Kafka brokers monitored by the trigger.
    isRequired: true
  - name: event_hub_connection_string
    description: The name of an app setting that
    defaultValue: None
  - name: consumer_group
    defaultValue: None
  - name: avro_schema
    defaultValue: None
  - name: username
    defaultValue: None
  - name: password
    defaultValue: None
  - name: ssl_key_location
    defaultValue: None
  - name: ssl_ca_location
    defaultValue: None
  - name: ssl_certificate_location
    defaultValue: None
  - name: ssl_key_password
    defaultValue: None
  - name: schema_registry_url
    defaultValue: None
  - name: schema_registry_username
    defaultValue: None
  - name: schema_registry_password
    defaultValue: None
  - name: o_auth_bearer_method
    defaultValue: None
  - name: o_auth_bearer_client_id
    defaultValue: None
  - name: o_auth_bearer_client_secret
    defaultValue: None
  - name: o_auth_bearer_scope
    defaultValue: None
  - name: o_auth_bearer_token_endpoint_url
    defaultValue: None
  - name: o_auth_bearer_extensions
    defaultValue: None
  - name: authentication_mode
    defaultValue: NotSet
  - name: protocol
    defaultValue: NotSet
  - name: cardinality
    defaultValue: One
  - name: lag_threshold
    defaultValue: '1000'
  - name: data_type
    defaultValue: None
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.orchestration_trigger
  name: orchestration_trigger
  summary: Register an Orchestrator Function.
  signature: 'orchestration_trigger(context_name: str, orchestration: str | None =
    None)'
  parameters:
  - name: context_name
    description: Parameter name of the DurableOrchestrationContext object.
    isRequired: true
    types:
    - <xref:str>
  - name: orchestration
    description: 'Name of Orchestrator Function.

      By default, the name of the method is used.'
    defaultValue: None
    types:
    - <xref:Optional>[<xref:str>]
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.queue_output
  name: queue_output
  summary: "The queue_output decorator adds <xref:azure.functions.decorators.function_app.QueueOutput>\
    \ to the\n<xref:azure.functions.decorators.function_app.FunctionBuilder> object\n\
    for building <xref:azure.functions.decorators.function_app.Function> object used\
    \ in worker function\nindexing model. This is equivalent to defining QueueOutput\n\
    in the function.json which enables function to write message(s) to\nthe storage\
    \ queue.\nAll optional fields will be given default value by function host when\n\
    they are parsed by function host.\n\nRef: [https://aka.ms/azure-function-binding-queue](https://aka.ms/azure-function-binding-queue)\n\
    \nqueue output object in function code.\n:param queue_name: The name of the queue\
    \ to poll.\n:param connection: The name of an app setting or setting collection\n\
    that specifies how to connect to Azure Queues.\n:param data_type: Defines how\
    \ Functions runtime should treat the\n\n   parameter value.\n\nfields to include\
    \ in the binding json."
  signature: 'queue_output(arg_name: str, queue_name: str, connection: str, data_type:
    DataType | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: queue_name
    isRequired: true
  - name: connection
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.queue_trigger
  name: queue_trigger
  summary: 'The queue_trigger decorator adds <xref:azure.functions.decorators.function_app.QueueTrigger>
    to the

    <xref:azure.functions.decorators.function_app.FunctionBuilder> object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining QueueTrigger

    in the function.json which enables function to be triggered when new

    message(s) are sent to the storage queue.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-queue](https://aka.ms/azure-function-binding-queue)


    <xref:azure.functions.decorators.function_app.QueueMessage> object in function
    code.

    :param queue_name: The name of the queue to poll.

    :param connection: The name of an app setting or setting collection

    that specifies how to connect to Azure Queues.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'queue_trigger(arg_name: str, queue_name: str, connection: str, data_type:
    DataType | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: queue_name
    isRequired: true
  - name: connection
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.register_blueprint
  name: register_blueprint
  summary: 'Register a list of functions in the function app.


    which contains a list of functions.'
  signature: 'register_blueprint(function_container: DecoratorApi) -> None'
  parameters:
  - name: function_container
    description: Instance extending <xref:azure.functions.decorators.function_app.DecoratorApi>
    isRequired: true
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.register_functions
  name: register_functions
  summary: 'Register a list of functions in the function app.


    which contains a list of functions.'
  signature: 'register_functions(function_container: DecoratorApi) -> None'
  parameters:
  - name: function_container
    description: Instance extending <xref:azure.functions.decorators.function_app.DecoratorApi>
    isRequired: true
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.retry
  name: retry
  summary: 'The retry decorator adds <xref:azure.functions.decorators.function_app.RetryPolicy>
    to the function

    settings object for building <xref:azure.functions.decorators.function_app.Function>
    object used in worker

    function indexing model. This is equivalent to defining RetryPolicy

    in the function.json which enables function to retry on failure.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure_functions_retries](https://aka.ms/azure_functions_retries)


    attempts.

    :param maximum_interval: The maximum delay interval between retry

    attempts.

    :param setting_extra_fields: Keyword arguments for specifying

    additional setting fields.

    :return: Decorator function.'
  signature: 'retry(strategy: str, max_retry_count: str, delay_interval: str | None
    = None, minimum_interval: str | None = None, maximum_interval: str | None = None,
    setting_extra_fields: Dict[str, Any] | None = None) -> Callable[[...], Any]'
  parameters:
  - name: strategy
    description: The retry strategy to use.
    isRequired: true
  - name: max_retry_count
    description: The maximum number of retry attempts.
    isRequired: true
  - name: delay_interval
    description: The delay interval between retry attempts.
    defaultValue: None
  - name: minimum_interval
    description: The minimum delay interval between retry
    defaultValue: None
  - name: maximum_interval
    defaultValue: None
  - name: setting_extra_fields
    defaultValue: None
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.route
  name: route
  summary: 'The route decorator adds <xref:azure.functions.decorators.function_app.HttpTrigger>
    and

    <xref:azure.functions.decorators.function_app.HttpOutput> binding to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining HttpTrigger

    and HttpOutput binding in the function.json which enables your

    function be triggered when http requests hit the specified route.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-http](https://aka.ms/azure-function-binding-http)


    to function name if present or user defined python function name.

    :param trigger_arg_name: Argument name for <xref:azure.functions.decorators.function_app.HttpRequest>,

    defaults to ''req''.

    :param binding_arg_name: Argument name for <xref:azure.functions.decorators.function_app.HttpResponse>,

    defaults to ''$return''.

    :param methods: A tuple of the HTTP methods to which the function

    responds.

    :param auth_level: Determines what keys, if any, need to be present

    on the request in order to invoke the function.

    :return: Decorator function.

    :param trigger_extra_fields: Additional fields to include in trigger

    json. For example,

    >>> data_type=''STRING'' # ''dataType'': ''STRING'' in trigger json

    :param binding_extra_fields: Additional fields to include in binding

    json. For example,

    >>> data_type=''STRING'' # ''dataType'': ''STRING'' in binding json'
  signature: 'route(route: str | None = None, trigger_arg_name: str = ''req'', binding_arg_name:
    str = ''$return'', methods: Iterable[str] | Iterable[HttpMethod] | None = None,
    auth_level: AuthLevel | str | None = None, trigger_extra_fields: Dict[str, Any]
    | None = None, binding_extra_fields: Dict[str, Any] | None = None) -> Callable[[...],
    Any]'
  parameters:
  - name: route
    description: Route for the http endpoint, if None, it will be set
    defaultValue: None
  - name: trigger_arg_name
    defaultValue: req
  - name: binding_arg_name
    defaultValue: $return
  - name: methods
    defaultValue: None
  - name: auth_level
    defaultValue: None
  - name: trigger_extra_fields
    defaultValue: None
  - name: binding_extra_fields
    defaultValue: None
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.schedule
  name: schedule
  summary: 'The schedule or timer decorator adds <xref:azure.functions.decorators.function_app.TimerTrigger>
    to the

    <xref:azure.functions.decorators.function_app.FunctionBuilder> object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining TimerTrigger

    in the function.json which enables your function be triggered on the

    specified schedule.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-timer](https://aka.ms/azure-function-binding-timer)


    <xref:azure.functions.decorators.function_app.TimerRequest> object in function
    code.

    :param schedule: A string representing a CRON expression that will

    be used to schedule a function to run.

    :param run_on_startup: If true, the function is invoked when the

    runtime starts.

    :param use_monitor: Set to true or false to indicate whether the

    schedule should be monitored.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :return: Decorator function.'
  signature: 'schedule(arg_name: str, schedule: str, run_on_startup: bool | None =
    None, use_monitor: bool | None = None, data_type: DataType | str | None = None,
    **kwargs: Any) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    description: The name of the variable that represents the
    isRequired: true
  - name: schedule
    isRequired: true
  - name: run_on_startup
    defaultValue: None
  - name: use_monitor
    defaultValue: None
  - name: data_type
    defaultValue: None
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.semantic_search_input
  name: semantic_search_input
  summary: "The semantic search feature allows you to import documents into a\nvector\
    \ database using an output binding and query the documents in that\ndatabase using\
    \ an input binding. For example, you can have a function\nthat imports documents\
    \ into a vector database and another function that\nissues queries to OpenAI using\
    \ content stored in the vector database as\n\n   context (also known as the Retrieval\
    \ Augmented Generation, or RAG\n   technique).\n\nRef: [https://platform.openai.com/docs/guides/embeddings](https://platform.openai.com/docs/guides/embeddings)\n\
    \ncontains a connection string value.\n:param collection: The name of the collection\
    \ or table to search or\nstore.\n:param query: The semantic query text to use\
    \ for searching.\n:param embeddings_model: The ID of the model to use for embeddings.\n\
    The default value is \"text-embedding-ada-002\".\n:param chat_model: The name\
    \ of the Large Language Model to invoke for\nchat responses. The default value\
    \ is \"gpt-3.5-turbo\".\n:param system_prompt: Optional. The system prompt to\
    \ use for prompting\nthe large language model.\n:param max_knowledge_count: Optional.\
    \ The number of knowledge items to\ninject into the SystemPrompt. Default value:\
    \ 1\n:param data_type: Optional. Defines how Functions runtime should treat\n\
    the parameter value. Default value: None\n:param kwargs: Keyword arguments for\
    \ specifying additional binding\nfields to include in the binding json"
  signature: 'semantic_search_input(arg_name: str, connection_name: str, collection:
    str, query: str | None = None, embeddings_model: OpenAIModels | None = OpenAIModels.DefaultEmbeddingsModel,
    chat_model: OpenAIModels | None = OpenAIModels.DefaultChatModel, system_prompt:
    str | None = ''You are a helpful assistant. You are responding to requests\n    from
    a user about internal emails and documents. You can and\n    should refer to the
    internal documents to help respond to\n    requests. If a user makes a request
    that\''s not covered by the\n    internal emails and documents, explain that you
    don\''t know the\n    answer or that you don\''t have access to the information.\n\n    The
    following is a list of documents that you can refer to when\n    answering questions.
    The documents are in the format\n    [filename]: [text] and are separated by newlines.
    If you answer\n    a question by referencing any of the documents, please cite
    the\n    document in your answer. For example, if you answer a question\n    by
    referencing info.txt, you should add "Reference: info.txt"\n    to the end of
    your answer on a separate line.'', max_knowledge_count: int | None = 1, data_type:
    DataType | str | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: connection_name
    isRequired: true
  - name: collection
    isRequired: true
  - name: query
    defaultValue: None
  - name: embeddings_model
    defaultValue: DefaultEmbeddingsModel
  - name: chat_model
    defaultValue: DefaultChatModel
  - name: system_prompt
    defaultValue: "You are a helpful assistant. You are responding to requests\n \
      \   from a user about internal emails and documents. You can and\n    should\
      \ refer to the internal documents to help respond to\n    requests. If a user\
      \ makes a request that's not covered by the\n    internal emails and documents,\
      \ explain that you don't know the\n    answer or that you don't have access\
      \ to the information.\n\n    The following is a list of documents that you can\
      \ refer to when\n    answering questions. The documents are in the format\n\
      \    [filename]: [text] and are separated by newlines. If you answer\n    a\
      \ question by referencing any of the documents, please cite the\n    document\
      \ in your answer. For example, if you answer a question\n    by referencing\
      \ info.txt, you should add \"Reference: info.txt\"\n    to the end of your answer\
      \ on a separate line."
  - name: max_knowledge_count
    defaultValue: '1'
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.service_bus_queue_output
  name: service_bus_queue_output
  summary: 'The service_bus_queue_output decorator adds

    <xref:azure.functions.decorators.function_app.ServiceBusQueueOutput> to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining ServiceBusQueueOutput

    in the function.json which enables function to write message(s) to

    the service bus queue.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-service-bus](https://aka.ms/azure-function-binding-service-bus)


    bus queue output object in function code.

    :param connection: The name of an app setting or setting collection

    that specifies how to connect to Service Bus.

    :param queue_name: Name of the queue to monitor.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param access_rights: Access rights for the connection string.

    :return: Decorator function.'
  signature: 'service_bus_queue_output(arg_name: str, connection: str, queue_name:
    str, data_type: DataType | str | None = None, access_rights: AccessRights | str
    | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    description: The name of the variable that represents service
    isRequired: true
  - name: connection
    isRequired: true
  - name: queue_name
    isRequired: true
  - name: data_type
    defaultValue: None
  - name: access_rights
    defaultValue: None
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.service_bus_queue_trigger
  name: service_bus_queue_trigger
  summary: 'The on_service_bus_queue_change decorator adds

    <xref:azure.functions.decorators.function_app.ServiceBusQueueTrigger> to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining ServiceBusQueueTrigger

    in the function.json which enables your function be triggered when

    new message(s) are sent to the service bus queue.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-service-bus](https://aka.ms/azure-function-binding-service-bus)


    <xref:azure.functions.decorators.function_app.ServiceBusMessage> object in function
    code.

    :param connection: The name of an app setting or setting collection

    that specifies how to connect to Service Bus.

    :param queue_name: Name of the queue to monitor.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param access_rights: Access rights for the connection string.

    :param is_sessions_enabled: True if connecting to a session-aware

    queue or subscription.

    :param cardinality: Set to many in order to enable batching.

    :return: Decorator function.'
  signature: 'service_bus_queue_trigger(arg_name: str, connection: str, queue_name:
    str, data_type: DataType | str | None = None, access_rights: AccessRights | str
    | None = None, is_sessions_enabled: bool | None = None, cardinality: Cardinality
    | str | None = None, **kwargs: Any) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    description: The name of the variable that represents the
    isRequired: true
  - name: connection
    isRequired: true
  - name: queue_name
    isRequired: true
  - name: data_type
    defaultValue: None
  - name: access_rights
    defaultValue: None
  - name: is_sessions_enabled
    defaultValue: None
  - name: cardinality
    defaultValue: None
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.service_bus_topic_output
  name: service_bus_topic_output
  summary: 'The service_bus_topic_output decorator adds

    <xref:azure.functions.decorators.function_app.ServiceBusTopicOutput> to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining ServiceBusTopicOutput

    in the function.json which enables function to write message(s) to

    the service bus topic.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-service-bus](https://aka.ms/azure-function-binding-service-bus)


    bus topic output object in function code.

    :param connection: The name of an app setting or setting collection

    that specifies how to connect to Service Bus.

    :param topic_name: Name of the topic to monitor.

    :param subscription_name: Name of the subscription to monitor.

    :param data_type: Defines how Functions runtime should treat the

    parameter value, defaults to DataType.UNDEFINED.

    :param access_rights: Access rights for the connection string.

    :return: Decorator function.'
  signature: 'service_bus_topic_output(arg_name: str, connection: str, topic_name:
    str, subscription_name: str | None = None, data_type: DataType | str | None =
    None, access_rights: AccessRights | str | None = None, **kwargs) -> Callable[[...],
    Any]'
  parameters:
  - name: arg_name
    description: The name of the variable that represents service
    isRequired: true
  - name: connection
    isRequired: true
  - name: topic_name
    isRequired: true
  - name: subscription_name
    defaultValue: None
  - name: data_type
    defaultValue: None
  - name: access_rights
    defaultValue: None
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.service_bus_topic_trigger
  name: service_bus_topic_trigger
  summary: 'The on_service_bus_topic_change decorator adds

    <xref:azure.functions.decorators.function_app.ServiceBusTopicTrigger> to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining ServiceBusTopicTrigger

    in the function.json which enables function to be triggered when new

    message(s) are sent to the service bus topic.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-service-bus](https://aka.ms/azure-function-binding-service-bus)


    <xref:azure.functions.decorators.function_app.ServiceBusMessage> object in function
    code.

    :param connection: The name of an app setting or setting collection

    that specifies how to connect to Service Bus.

    :param topic_name: Name of the topic to monitor.

    :param subscription_name: Name of the subscription to monitor.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param access_rights: Access rights for the connection string.

    :param is_sessions_enabled: True if connecting to a session-aware

    queue or subscription.

    :param cardinality: Set to many in order to enable batching.

    :return: Decorator function.'
  signature: 'service_bus_topic_trigger(arg_name: str, connection: str, topic_name:
    str, subscription_name: str, data_type: DataType | str | None = None, access_rights:
    AccessRights | str | None = None, is_sessions_enabled: bool | None = None, cardinality:
    Cardinality | str | None = None, **kwargs: Any) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    description: The name of the variable that represents the
    isRequired: true
  - name: connection
    isRequired: true
  - name: topic_name
    isRequired: true
  - name: subscription_name
    isRequired: true
  - name: data_type
    defaultValue: None
  - name: access_rights
    defaultValue: None
  - name: is_sessions_enabled
    defaultValue: None
  - name: cardinality
    defaultValue: None
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.sql_input
  name: sql_input
  summary: 'The sql_input decorator adds

    <xref:azure.functions.decorators.function_app.SqlInput> to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This decorator will work only with extension bundle 4.x

    and above.

    This is equivalent to defining SqlInput in the function.json which

    enables the function to read from a Sql database.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/sqlbindings](https://aka.ms/sqlbindings)


    <xref:azure.functions.decorators.function_app.SqlRowList> input object in function
    code

    :param command_text: The Transact-SQL query command or name of the

    stored procedure executed by the binding

    :param connection_string_setting: The name of an app setting that

    contains the connection string for the database against which the

    query or stored procedure is being executed

    :param command_type: A CommandType value, which is Text for a query

    and StoredProcedure for a stored procedure

    :param parameters: Zero or more parameter values passed to the

    command during execution as a single string. Must follow the format

    @param1=param1,@param2=param2

    :param data_type: Defines how Functions runtime should treat the

    parameter value

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json'
  signature: 'sql_input(arg_name: str, command_text: str, connection_string_setting:
    str, command_type: str | None = ''Text'', parameters: str | None = None, data_type:
    DataType | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: command_text
    isRequired: true
  - name: connection_string_setting
    isRequired: true
  - name: command_type
    defaultValue: Text
  - name: parameters
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.sql_output
  name: sql_output
  summary: 'The sql_output decorator adds

    <xref:azure.functions.decorators.function_app.SqlOutput> to the <xref:azure.functions.decorators.function_app.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This decorator will work only with extension bundle 4.x

    and above.

    This is equivalent to defining SqlOutput in the function.json which

    enables the function to write to a Sql database.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/sqlbindings](https://aka.ms/sqlbindings)


    Sql output object in function code

    :param command_text: The Transact-SQL query command or name of the

    stored procedure executed by the binding

    :param connection_string_setting: The name of an app setting that

    contains the connection string for the database against which the

    query or stored procedure is being executed

    :param data_type: Defines how Functions runtime should treat the

    parameter value

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json'
  signature: 'sql_output(arg_name: str, command_text: str, connection_string_setting:
    str, data_type: DataType | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: command_text
    isRequired: true
  - name: connection_string_setting
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.sql_trigger
  name: sql_trigger
  summary: 'The sql_trigger decorator adds <xref:azure.functions.decorators.function_app.SqlTrigger>

    to the <xref:azure.functions.decorators.function_app.FunctionBuilder> object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This decorator will work only with extension bundle 4.x

    and above.

    This is equivalent to defining SqlTrigger in the function.json which

    enables function to be triggered when there are changes in the Sql

    table.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/sqlbindings](https://aka.ms/sqlbindings)


    <xref:azure.functions.decorators.function_app.SqlRowList> object in the function
    code

    :param table_name: The name of the table monitored by the trigger

    :param connection_string_setting: The name of an app setting that

    contains the connection string for the database against which the

    query or stored procedure is being executed

    :param leases_table_name: The name of the table used to store

    leases. If not specified, the leases table name will be

    Leases_{FunctionId}_{TableId}.

    :param data_type: Defines how Functions runtime should treat the

    parameter value

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json'
  signature: 'sql_trigger(arg_name: str, table_name: str, connection_string_setting:
    str, leases_table_name: str | None = None, data_type: DataType | None = None,
    **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: table_name
    isRequired: true
  - name: connection_string_setting
    isRequired: true
  - name: leases_table_name
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.table_input
  name: table_input
  summary: "The table_input decorator adds <xref:azure.functions.decorators.function_app.TableInput>\
    \ to the\n<xref:azure.functions.decorators.function_app.FunctionBuilder> object\n\
    for building <xref:azure.functions.decorators.function_app.Function> object used\
    \ in worker function\nindexing model. This is equivalent to defining TableInput\n\
    in the function.json which enables function to read a table in\nan Azure Storage\
    \ or Cosmos DB account\nAll optional fields will be given default value by function\
    \ host when\nthey are parsed by function host.\n\nRef: [https://aka.ms/tablesbindings](https://aka.ms/tablesbindings)\n\
    \nthe table or entity in function code.\n:param connection: The name of an app\
    \ setting or setting collection\nthat specifies how to connect to the table service.\n\
    :param table_name: The Name of the table\n:param row_key: The row key of the table\
    \ entity to read.\n:param partition_key: The partition key of the table entity\
    \ to read.\n:param take: The maximum number of entities to return\n:param filter:\
    \ An OData filter expression for the entities to return\n\n   from the table."
  signature: 'table_input(arg_name: str, connection: str, table_name: str, row_key:
    str | None = None, partition_key: str | None = None, take: int | None = None,
    filter: str | None = None, data_type: DataType | str | None = None) -> Callable[[...],
    Any]'
  parameters:
  - name: data_type
    description: 'Defines how Functions runtime should treat the

      parameter value.'
    defaultValue: None
  - name: arg_name
    isRequired: true
  - name: connection
    isRequired: true
  - name: table_name
    isRequired: true
  - name: row_key
    defaultValue: None
  - name: partition_key
    defaultValue: None
  - name: take
    defaultValue: None
  - name: filter
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.table_output
  name: table_output
  summary: "The table_output decorator adds <xref:azure.functions.decorators.function_app.TableOutput>\
    \ to the\n<xref:azure.functions.decorators.function_app.FunctionBuilder> object\n\
    for building <xref:azure.functions.decorators.function_app.Function> object used\
    \ in worker function\nindexing model. This is equivalent to defining TableOutput\n\
    in the function.json which enables function to write entities\nto a table in an\
    \ Azure Storage\nAll optional fields will be given default value by function host\
    \ when\nthey are parsed by function host.\n\nRef: [https://aka.ms/tablesbindings](https://aka.ms/tablesbindings)\n\
    \nthe table or entity in function code.\n:param connection: The name of an app\
    \ setting or setting collection\nthat specifies how to connect to the table service.\n\
    :param table_name: The Name of the table\n:param row_key: The row key of the table\
    \ entity to read.\n:param partition_key: The partition key of the table entity\
    \ to read.\n:param data_type: Defines how Functions runtime should treat the\n\
    \n   parameter value."
  signature: 'table_output(arg_name: str, connection: str, table_name: str, row_key:
    str | None = None, partition_key: str | None = None, data_type: DataType | str
    | None = None) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: connection
    isRequired: true
  - name: table_name
    isRequired: true
  - name: row_key
    defaultValue: None
  - name: partition_key
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.text_completion_input
  name: text_completion_input
  summary: 'The textCompletion input binding can be used to invoke the

    OpenAI Chat Completions API and return the results to the function.


    Ref: [https://platform.openai.com/docs/guides/text-generation/chat-completions-vs-completions](https://platform.openai.com/docs/guides/text-generation/chat-completions-vs-completions)  #
    NoQA


    The examples below define "who is" HTTP-triggered functions with a

    hardcoded *"who is {name}?"* prompt, where *{name}* is the substituted

    with the value in the HTTP request path. The OpenAI input binding

    invokes the OpenAI GPT endpoint to surface the answer to the prompt to

    the function, which then returns the result text as the response

    content.


    string.

    :param model: the ID of the model to use.

    :param temperature: The sampling temperature to use, between 0 and 2.

    Higher values like 0.8 will make the output more random, while lower

    values like 0.2 will make it more focused and deterministic.

    :param top_p: An alternative to sampling with temperature, called

    nucleus sampling, where the model considers the results of the tokens

    with top_p probability mass. So 0.1 means only the tokens comprising

    the top 10% probability mass are considered. It''s generally recommend

    to use this or temperature

    :param max_tokens: The maximum number of tokens to generate in the

    completion. The token count of your prompt plus max_tokens cannot

    exceed the model''s context length. Most models have a context length of

    2048 tokens (except for the newest models, which support 4096).

    :param data_type: Defines how Functions runtime should treat the

    parameter value

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json'
  signature: 'text_completion_input(arg_name: str, prompt: str, model: OpenAIModels
    | None = OpenAIModels.DefaultChatModel, temperature: str | None = ''0.5'', top_p:
    str | None = None, max_tokens: str | None = ''100'', data_type: DataType | str
    | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: prompt
    isRequired: true
  - name: model
    defaultValue: DefaultChatModel
  - name: temperature
    defaultValue: '0.5'
  - name: top_p
    defaultValue: None
  - name: max_tokens
    defaultValue: '100'
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.timer_trigger
  name: timer_trigger
  summary: 'The schedule or timer decorator adds <xref:azure.functions.decorators.function_app.TimerTrigger>
    to the

    <xref:azure.functions.decorators.function_app.FunctionBuilder> object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining TimerTrigger

    in the function.json which enables your function be triggered on the

    specified schedule.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-timer](https://aka.ms/azure-function-binding-timer)


    <xref:azure.functions.decorators.function_app.TimerRequest> object in function
    code.

    :param schedule: A string representing a CRON expression that will

    be used to schedule a function to run.

    :param run_on_startup: If true, the function is invoked when the

    runtime starts.

    :param use_monitor: Set to true or false to indicate whether the

    schedule should be monitored.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :return: Decorator function.'
  signature: 'timer_trigger(arg_name: str, schedule: str, run_on_startup: bool | None
    = None, use_monitor: bool | None = None, data_type: DataType | str | None = None,
    **kwargs: Any) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    description: The name of the variable that represents the
    isRequired: true
  - name: schedule
    isRequired: true
  - name: run_on_startup
    defaultValue: None
  - name: use_monitor
    defaultValue: None
  - name: data_type
    defaultValue: None
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.validate_function_names
  name: validate_function_names
  summary: 'The functions_bindings dict contains the function name and

    its bindings for all functions in an app. If a previous function

    has the same name, indexing will fail here.'
  signature: 'validate_function_names(functions: List[Function])'
  parameters:
  - name: functions
    isRequired: true
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.warm_up_trigger
  name: warm_up_trigger
  summary: 'The warm up decorator adds <xref:azure.functions.decorators.function_app.WarmUpTrigger>
    to the

    <xref:azure.functions.decorators.function_app.FunctionBuilder> object

    for building <xref:azure.functions.decorators.function_app.Function> object used
    in worker function

    indexing model. This is equivalent to defining WarmUpTrigger

    in the function.json which enables your function be triggered on the

    specified schedule.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-warmup](https://aka.ms/azure-function-binding-warmup)


    <xref:azure.functions.decorators.function_app.TimerRequest> object in function
    code.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :return: Decorator function.'
  signature: 'warm_up_trigger(arg_name: str, data_type: DataType | str | None = None,
    **kwargs) -> Callable'
  parameters:
  - name: arg_name
    description: The name of the variable that represents the
    isRequired: true
  - name: data_type
    defaultValue: None
attributes:
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.app_script_file
  name: app_script_file
  summary: "Name of function app script file in which all the functions\n   are defined.\n\
    \n   Script file defined here is for placeholder purpose, please refer to\n  \
    \ worker defined script file path as the single point of truth."
  return:
    description: Script file name.
- uid: azure.functions.decorators.function_app.ExternalHttpFunctionApp.auth_level
  name: auth_level
  summary: "Authorization level of the function app. Will be applied to the http\n\
    \   trigger functions which do not have authorization level specified."
  return:
    description: Authorization level of the function app.
