### YamlMime:PythonClass
uid: azure.functions.decorators.Function
name: Function
fullName: azure.functions.decorators.Function
module: azure.functions.decorators
inheritances:
- builtins.object
summary: 'The function object represents a function in Function App. It

  encapsulates function metadata and callable and used in the worker

  function indexing model. Ref: [https://aka.ms/azure-function-ref](https://aka.ms/azure-function-ref)


  Constructor of <xref:azure.functions.decorators.FunctionBuilder> object.'
constructor:
  syntax: 'Function(func: Callable[[...], Any], script_file: str)'
  parameters:
  - name: func
    description: User defined python function instance.
    isRequired: true
  - name: script_file
    description: File name indexed by worker to find function.
    isRequired: true
  - name: trigger
    description: The trigger object of the function.
    isRequired: true
  - name: bindings
    description: The list of binding objects of a function.
    isRequired: true
  - name: settings
    description: The list of setting objects of a function.
    isRequired: true
  - name: http_type
    description: Http function type.
    isRequired: true
  - name: is_http_function
    description: Whether the function is a http function.
    isRequired: true
methods:
- uid: azure.functions.decorators.Function.add_binding
  name: add_binding
  summary: Add a binding instance to the function.
  signature: 'add_binding(binding: Binding) -> None'
  parameters:
  - name: binding
    description: The binding object to add.
    isRequired: true
- uid: azure.functions.decorators.Function.add_setting
  name: add_setting
  summary: Add a setting instance to the function.
  signature: 'add_setting(setting: Setting) -> None'
  parameters:
  - name: setting
    description: The setting object to add
    isRequired: true
- uid: azure.functions.decorators.Function.add_trigger
  name: add_trigger
  summary: Add a trigger instance to the function.
  signature: 'add_trigger(trigger: Trigger) -> None'
  parameters:
  - name: trigger
    description: The trigger object to add.
    isRequired: true
  exceptions:
  - type: ValueError
    description: 'Raises trigger already exists error if a trigger is

      being added to a function which has trigger attached.'
- uid: azure.functions.decorators.Function.get_bindings
  name: get_bindings
  summary: Get all the bindings attached to the function.
  signature: get_bindings() -> List[Binding]
  return:
    description: Bindings attached to the function.
- uid: azure.functions.decorators.Function.get_bindings_dict
  name: get_bindings_dict
  summary: Get dictionary representation of the bindings of the function.
  signature: get_bindings_dict() -> Dict
  return:
    description: Dictionary representation of the bindings.
- uid: azure.functions.decorators.Function.get_dict_repr
  name: get_dict_repr
  summary: Get the dictionary representation of the function.
  signature: get_dict_repr() -> Dict
  return:
    description: The dictionary representation of the function.
- uid: azure.functions.decorators.Function.get_function_json
  name: get_function_json
  summary: Get the json stringified form of function.
  signature: get_function_json() -> str
  return:
    description: The json stringified form of function.
- uid: azure.functions.decorators.Function.get_function_name
  name: get_function_name
  summary: 'Get the name of the function.

    :return: The name of the function.'
  signature: get_function_name() -> str | None
- uid: azure.functions.decorators.Function.get_raw_bindings
  name: get_raw_bindings
  signature: get_raw_bindings() -> List[str]
- uid: azure.functions.decorators.Function.get_setting
  name: get_setting
  summary: Get a specific setting attached to the function.
  signature: 'get_setting(setting_name: str) -> Setting | None'
  parameters:
  - name: setting_name
    description: The name of the setting to search for.
    isRequired: true
  return:
    description: The setting attached to the function (or None if not found).
- uid: azure.functions.decorators.Function.get_settings_dict
  name: get_settings_dict
  summary: 'Get a dictionary representation of a setting.


    found).'
  signature: get_settings_dict(setting_name) -> Dict | None
  parameters:
  - name: setting_name
    isRequired: true
  return:
    description: The dictionary representation of the setting (or None if not
- uid: azure.functions.decorators.Function.get_trigger
  name: get_trigger
  summary: Get attached trigger instance of the function.
  signature: get_trigger() -> Trigger | None
  return:
    description: Trigger instance or None.
- uid: azure.functions.decorators.Function.get_user_function
  name: get_user_function
  summary: Get the python function customer defined.
  signature: get_user_function() -> Callable[[...], Any]
  return:
    description: The python function customer defined.
- uid: azure.functions.decorators.Function.is_http_function
  name: is_http_function
  signature: is_http_function() -> bool
- uid: azure.functions.decorators.Function.set_http_type
  name: set_http_type
  summary: 'Set or update the http type for the function if >>:param:`http_type`<<

    .

    :param http_type: Http function type.'
  signature: 'set_http_type(http_type: str) -> None'
  parameters:
  - name: http_type
    isRequired: true
