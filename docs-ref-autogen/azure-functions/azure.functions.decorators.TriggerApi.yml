### YamlMime:PythonClass
uid: azure.functions.decorators.TriggerApi
name: TriggerApi
fullName: azure.functions.decorators.TriggerApi
module: azure.functions.decorators
inheritances:
- azure.functions.decorators.function_app.DecoratorApi
- abc.ABC
summary: Interface to extend for using existing trigger decorator functions.
constructor:
  syntax: TriggerApi(*args, **kwargs)
methods:
- uid: azure.functions.decorators.TriggerApi.activity_trigger
  name: activity_trigger
  summary: Register an Activity Function.
  signature: 'activity_trigger(input_name: str, activity: str | None = None)'
  parameters:
  - name: input_name
    description: Parameter name of the Activity input.
    isRequired: true
    types:
    - <xref:str>
  - name: activity
    description: Name of Activity Function.
    defaultValue: None
    types:
    - <xref:Optional>[<xref:str>]
- uid: azure.functions.decorators.TriggerApi.assistant_skill_trigger
  name: assistant_skill_trigger
  summary: 'Assistants build on top of the chat functionality to provide assistants

    with custom skills defined as functions. This internally uses the

    function calling feature OpenAIs GPT models to select which functions

    to invoke and when.

    Ref: [https://platform.openai.com/docs/guides/function-calling](https://platform.openai.com/docs/guides/function-calling)


    You can define functions that can be triggered by assistants by using


    the *assistantSkillTrigger* trigger binding. These functions are

    invoked by the extension when an assistant signals that it would like

    to invoke a function in response to a user prompt.


    The name of the function, the description provided by the trigger,

    and the parameter name are all hints that the underlying language model

    use to determine when and how to invoke an assistant function.


    LLM.

    :param parameter_description_json: A JSON description of the function

    parameter, which is provided to the LLM.

    If no description is provided, the description will be autogenerated.

    :param model: The OpenAI chat model to use.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'assistant_skill_trigger(arg_name: str, function_description: str, function_name:
    str | None = None, parameter_description_json: str | None = None, model: OpenAIModels
    | None = OpenAIModels.DefaultChatModel, data_type: DataType | str | None = None,
    **kwargs: Any) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: function_description
    isRequired: true
  - name: function_name
    defaultValue: None
  - name: parameter_description_json
    defaultValue: None
  - name: model
    defaultValue: DefaultChatModel
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.TriggerApi.blob_trigger
  name: blob_trigger
  summary: 'The blob_change_trigger decorator adds <xref:azure.functions.decorators.BlobTrigger>
    to the

    <xref:azure.functions.decorators.FunctionBuilder> object

    for building <xref:azure.functions.decorators.Function> object used in worker
    function

    indexing model. This is equivalent to defining BlobTrigger

    in the function.json which enables function to be triggered when new

    message(s) are sent to the storage blobs.

    All optional fields will be given default value by function host when

    they are parsed by function host.

    Ref: [https://aka.ms/azure-function-binding-storage-blob](https://aka.ms/azure-function-binding-storage-blob)

    :param arg_name: The name of the variable that represents the

    <xref:azure.functions.decorators.InputStream> object in function code.

    :param path: The path to the blob.

    :param connection: The name of an app setting or setting collection

    that specifies how to connect to Azure Blobs.

    :param source: Sets the source of the triggering event.

    Use EventGrid for an Event Grid-based blob trigger,

    which provides much lower latency.

    The default is LogsAndContainerScan,

    which uses the standard polling mechanism to detect changes

    in the container.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'blob_trigger(arg_name: str, path: str, connection: str, source: BlobSource
    | None = None, data_type: DataType | None = None, **kwargs) -> Callable[[...],
    Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: path
    isRequired: true
  - name: connection
    isRequired: true
  - name: source
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.TriggerApi.cosmos_db_trigger
  name: cosmos_db_trigger
  summary: "The cosmos_db_trigger decorator adds <xref:azure.functions.decorators.CosmosDBTrigger>\n\
    to the <xref:azure.functions.decorators.FunctionBuilder> object\nfor building\
    \ <xref:azure.functions.decorators.Function> object used in worker function\n\
    indexing model. This decorator will work only with extension bundle 4.x\nand above.\
    \ For additional details, please refer\n[https://aka.ms/cosmosdb-v4-update](https://aka.ms/cosmosdb-v4-update).\n\
    This is equivalent to defining CosmosDBTrigger in the function.json\nwhich enables\
    \ function to be triggered when CosmosDB data is changed.\nAll optional fields\
    \ will be given default value by function host when\nthey are parsed by function\
    \ host.\n\nRef: [https://aka.ms/azure-function-binding-cosmosdb-v4](https://aka.ms/azure-function-binding-cosmosdb-v4)\n\
    \n<xref:azure.functions.decorators.DocumentList> object in function code\n:param\
    \ connection: The name of an app setting or setting collection\nthat specifies\
    \ how to connect to the Azure Cosmos DB account being\n\n   monitored.\n\nthe\
    \ collection being monitored\n:param container_name: The name of the container\
    \ being monitored\n:param lease_connection: (Optional) The name of an app setting\
    \ or\n\n   setting container that specifies how to connect to the Azure Cosmos\n\
    \   DB account that holds the lease container\n\ncollection used to store leases\n\
    :param lease_container_name: (Optional) The name of the container used\n\n   to\
    \ store leases. When not set, the value leases is used\n\ntrue, the leases container\
    \ is automatically created when it doesn't\n   already exist. The default value\
    \ is false. When using Azure AD\n   identities if you set the value to true, creating\
    \ containers is not an\n\n      allowed operation and your Function won't be able\
    \ to start\n\nRequest Units to assign when the leases container is created. This\n\
    setting is only used when createLeaseContainerIfNotExists is set to\ntrue. This\
    \ parameter is automatically set when the binding is created\nusing the portal\n\
    :param lease_container_prefix: (Optional) When set, the value is added\nas a prefix\
    \ to the leases created in the Lease container for this\nfunction. Using a prefix\
    \ allows two separate Azure Functions to share\nthe same Lease container by using\
    \ different prefixes\n:param feed_poll_delay: The time (in milliseconds) for the\
    \ delay\nbetween polling a partition for new changes on the feed, after all\n\
    current changes are drained\n:param lease_acquire_interval: When set, it defines,\n\
    in milliseconds, the interval to kick off a task to compute if\npartitions are\
    \ distributed evenly among known host instances\n:param lease_expiration_interval:\
    \ When set, it defines,\nin milliseconds, the interval for which the lease is\
    \ taken on a\nlease representing a partition\n:param lease_renew_interval: When\
    \ set, it defines, in milliseconds,\nthe renew interval for all leases for partitions\
    \ currently held by\nan instance\n:param max_items_per_invocation: When set, this\
    \ property sets the\nmaximum number of items received per Function call\n:param\
    \ start_from_beginning: This option tells the Trigger to read\nchanges from the\
    \ beginning of the collection's change history\ninstead of starting at the current\
    \ time\n:param start_from_time: (Optional) Gets or sets the date and time from\n\
    which to initialize the change feed read operation. The recommended\nformat is\
    \ ISO 8601 with the UTC designator, such as\n2021-02-16T14:19:29Z. This is only\
    \ used to set the initial trigger\nstate. After the trigger has a lease state,\
    \ changing this value has\nno effect\n:param preferred_locations: Defines preferred\
    \ locations (regions)\nfor geo-replicated database accounts in the Azure Cosmos\
    \ DB service\n:param data_type: Defines how Functions runtime should treat the\n\
    parameter value\n:param kwargs: Keyword arguments for specifying additional binding\n\
    fields to include in the binding json"
  signature: 'cosmos_db_trigger(arg_name: str, connection: str, database_name: str,
    container_name: str, lease_connection: str | None = None, lease_database_name:
    str | None = None, lease_container_name: str | None = None, create_lease_container_if_not_exists:
    bool | None = None, leases_container_throughput: int | None = None, lease_container_prefix:
    str | None = None, feed_poll_delay: int | None = None, lease_acquire_interval:
    int | None = None, lease_expiration_interval: int | None = None, lease_renew_interval:
    int | None = None, max_items_per_invocation: int | None = None, start_from_beginning:
    time | None = None, start_from_time: time | None = None, preferred_locations:
    str | None = None, data_type: DataType | str | None = None, **kwargs: Any) ->
    Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: connection
    isRequired: true
  - name: database_name
    isRequired: true
  - name: container_name
    isRequired: true
  - name: lease_connection
    defaultValue: None
  - name: lease_database_name
    defaultValue: None
  - name: lease_container_name
    defaultValue: None
  - name: create_lease_container_if_not_exists
    defaultValue: None
  - name: leases_container_throughput
    defaultValue: None
  - name: lease_container_prefix
    defaultValue: None
  - name: feed_poll_delay
    defaultValue: None
  - name: lease_acquire_interval
    defaultValue: None
  - name: lease_expiration_interval
    defaultValue: None
  - name: lease_renew_interval
    defaultValue: None
  - name: max_items_per_invocation
    defaultValue: None
  - name: start_from_beginning
    defaultValue: None
  - name: start_from_time
    defaultValue: None
  - name: preferred_locations
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.TriggerApi.cosmos_db_trigger_v3
  name: cosmos_db_trigger_v3
  summary: "The cosmos_db_trigger_v3 decorator adds <xref:azure.functions.decorators.CosmosDBTrigger>\n\
    to the <xref:azure.functions.decorators.FunctionBuilder> object\nfor building\
    \ <xref:azure.functions.decorators.Function> object used in worker function\n\
    indexing model. This decorator will work only with extension bundle 2.x\nor 3.x.\
    \ For additional details, please refer\n[https://aka.ms/cosmosdb-v4-update](https://aka.ms/cosmosdb-v4-update).\n\
    This is equivalent to defining CosmosDBTrigger in the function.json\n\n   which\
    \ enables function to be triggered when CosmosDB data is changed.\n\nAll optional\
    \ fields will be given default value by function host when\nthey are parsed by\
    \ function host.\n\nRef: [https://aka.ms/azure-function-binding-cosmosdb-v2](https://aka.ms/azure-function-binding-cosmosdb-v2)\n\
    \n<xref:azure.functions.decorators.DocumentList> object in function code.\n:param\
    \ database_name: The name of the Azure Cosmos DB database with\nthe collection\
    \ being monitored.\n:param collection_name: The name of the collection being monitored.\n\
    :param connection_string_setting: The name of an app setting or\nsetting collection\
    \ that specifies how to connect to the Azure Cosmos\nDB account being monitored.\n\
    :param lease_collection_name: The name of the collection used to\nstore leases.\n\
    :param lease_connection_string_setting: The name of an app setting\nor setting\
    \ collection that specifies how to connect to the Azure\nCosmos DB account that\
    \ holds the lease collection.\n:param lease_database_name: The name of the database\
    \ that holds the\ncollection used to store leases.\n:param create_lease_collection_if_not_exists:\
    \ When set to true,\nthe leases collection is automatically created when it doesn't\n\
    already exist.\n:param leases_collection_throughput: Defines the number of Request\n\
    Units to assign when the leases collection is created.\n:param lease_collection_prefix:\
    \ When set, the value is added as a\nprefix to the leases created in the Lease\
    \ collection for this\nFunction.\n:param checkpoint_interval: When set, it defines,\
    \ in milliseconds,\nthe interval between lease checkpoints. Default is always\
    \ after a\nFunction call.\n:param checkpoint_document_count: Customizes the amount\
    \ of documents\nbetween lease checkpoints. Default is always after a Function\
    \ call.\n:param feed_poll_delay: The time (in milliseconds) for the delay\nbetween\
    \ polling a partition for new changes on the feed, after all\ncurrent changes\
    \ are drained.\n:param lease_renew_interval: When set, it defines, in milliseconds,\n\
    the renew interval for all leases for partitions currently held by\nan instance.\n\
    :param lease_acquire_interval: When set, it defines,\nin milliseconds, the interval\
    \ to kick off a task to compute if\npartitions are distributed evenly among known\
    \ host instances.\n:param lease_expiration_interval: When set, it defines,\nin\
    \ milliseconds, the interval for which the lease is taken on a\nlease representing\
    \ a partition.\n:param max_items_per_invocation: When set, this property sets\
    \ the\nmaximum number of items received per Function call.\n:param start_from_beginning:\
    \ This option tells the Trigger to read\nchanges from the beginning of the collection's\
    \ change history\ninstead of starting at the current time.\n:param preferred_locations:\
    \ Defines preferred locations (regions)\nfor geo-replicated database accounts\
    \ in the Azure Cosmos DB service.\n:param data_type: Defines how Functions runtime\
    \ should treat the\nparameter value.\n:param kwargs: Keyword arguments for specifying\
    \ additional binding\nfields to include in the binding json."
  signature: 'cosmos_db_trigger_v3(arg_name: str, database_name: str, collection_name:
    str, connection_string_setting: str, lease_collection_name: str | None = None,
    lease_connection_string_setting: str | None = None, lease_database_name: str |
    None = None, create_lease_collection_if_not_exists: bool | None = None, leases_collection_throughput:
    int | None = None, lease_collection_prefix: str | None = None, checkpoint_interval:
    int | None = None, checkpoint_document_count: int | None = None, feed_poll_delay:
    int | None = None, lease_renew_interval: int | None = None, lease_acquire_interval:
    int | None = None, lease_expiration_interval: int | None = None, max_items_per_invocation:
    int | None = None, start_from_beginning: bool | None = None, preferred_locations:
    str | None = None, data_type: DataType | str | None = None, **kwargs: Any) ->
    Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: database_name
    isRequired: true
  - name: collection_name
    isRequired: true
  - name: connection_string_setting
    isRequired: true
  - name: lease_collection_name
    defaultValue: None
  - name: lease_connection_string_setting
    defaultValue: None
  - name: lease_database_name
    defaultValue: None
  - name: create_lease_collection_if_not_exists
    defaultValue: None
  - name: leases_collection_throughput
    defaultValue: None
  - name: lease_collection_prefix
    defaultValue: None
  - name: checkpoint_interval
    defaultValue: None
  - name: checkpoint_document_count
    defaultValue: None
  - name: feed_poll_delay
    defaultValue: None
  - name: lease_renew_interval
    defaultValue: None
  - name: lease_acquire_interval
    defaultValue: None
  - name: lease_expiration_interval
    defaultValue: None
  - name: max_items_per_invocation
    defaultValue: None
  - name: start_from_beginning
    defaultValue: None
  - name: preferred_locations
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.TriggerApi.dapr_binding_trigger
  name: dapr_binding_trigger
  summary: 'The dapr_binding_trigger decorator adds

    <xref:azure.functions.decorators.DaprBindingTrigger>

    to the <xref:azure.functions.decorators.FunctionBuilder> object

    for building <xref:azure.functions.decorators.Function> object used in worker
    function

    indexing model. This is equivalent to defining DaprBindingTrigger

    in the function.json which enables function to be triggered

    on Dapr input binding.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-dapr-trigger-binding](https://aka.ms/azure-function-dapr-trigger-binding)


    If not specified, the name of the function is used as the trigger name.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'dapr_binding_trigger(arg_name: str, binding_name: str, data_type: DataType
    | str | None = None, **kwargs: Any) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: binding_name
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.TriggerApi.dapr_service_invocation_trigger
  name: dapr_service_invocation_trigger
  summary: 'The dapr_service_invocation_trigger decorator adds

    <xref:azure.functions.decorators.DaprServiceInvocationTrigger>

    to the <xref:azure.functions.decorators.FunctionBuilder> object

    for building <xref:azure.functions.decorators.Function> object used in worker
    function

    indexing model. This is equivalent to defining

    DaprServiceInvocationTrigger

    in the function.json which enables function to be triggered when new

    service invocation occurs through Dapr.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-dapr-trigger-service-invocation](https://aka.ms/azure-function-dapr-trigger-service-invocation)


    If not specified, the name of the function is used as the method name.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'dapr_service_invocation_trigger(arg_name: str, method_name: str, data_type:
    DataType | str | None = None, **kwargs: Any) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: method_name
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.TriggerApi.dapr_topic_trigger
  name: dapr_topic_trigger
  summary: 'The dapr_topic_trigger decorator adds

    <xref:azure.functions.decorators.DaprTopicTrigger>

    to the <xref:azure.functions.decorators.FunctionBuilder> object

    for building <xref:azure.functions.decorators.Function> object used in worker
    function

    indexing model. This is equivalent to defining DaprTopicTrigger

    in the function.json which enables function to be triggered when new

    message(s) are sent to the Dapr pubsub.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-dapr-trigger-topic](https://aka.ms/azure-function-dapr-trigger-topic)


    the topic name will be used.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'dapr_topic_trigger(arg_name: str, pub_sub_name: str, topic: str, route:
    str | None = None, data_type: DataType | str | None = None, **kwargs: Any) ->
    Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: pub_sub_name
    isRequired: true
  - name: topic
    isRequired: true
  - name: route
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.TriggerApi.entity_trigger
  name: entity_trigger
  summary: Register an Entity Function.
  signature: 'entity_trigger(context_name: str, entity_name: str | None = None)'
  parameters:
  - name: context_name
    description: Parameter name of the Entity input.
    isRequired: true
    types:
    - <xref:str>
  - name: entity_name
    description: Name of Entity Function.
    defaultValue: None
    types:
    - <xref:Optional>[<xref:str>]
- uid: azure.functions.decorators.TriggerApi.event_grid_trigger
  name: event_grid_trigger
  summary: 'The event_grid_trigger decorator adds

    <xref:azure.functions.decorators.EventGridTrigger>

    to the <xref:azure.functions.decorators.FunctionBuilder> object

    for building <xref:azure.functions.decorators.Function> object used in worker
    function

    indexing model. This is equivalent to defining event grid trigger

    in the function.json which enables function to be triggered to

    respond to an event sent to an event grid topic.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/eventgridtrigger](https://aka.ms/eventgridtrigger)


    parameter value.

    :return: Decorator function.'
  signature: 'event_grid_trigger(arg_name: str, data_type: DataType | str | None =
    None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    description: 'the variable name used in function code for the

      parameter that receives the event data.'
    isRequired: true
  - name: data_type
    description: Defines how Functions runtime should treat the
    defaultValue: None
- uid: azure.functions.decorators.TriggerApi.event_hub_message_trigger
  name: event_hub_message_trigger
  summary: 'The event_hub_message_trigger decorator adds

    <xref:azure.functions.decorators.EventHubTrigger>

    to the <xref:azure.functions.decorators.FunctionBuilder> object

    for building <xref:azure.functions.decorators.Function> object used in worker
    function

    indexing model. This is equivalent to defining EventHubTrigger

    in the function.json which enables function to be triggered when new

    message(s) are sent to the event hub.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-event-hubs](https://aka.ms/azure-function-binding-event-hubs)


    <xref:azure.functions.decorators.EventHubEvent> object in function code.

    :param connection: The name of an app setting or setting collection

    that specifies how to connect to Event Hubs.

    :param event_hub_name: The name of the event hub.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param cardinality: Set to many in order to enable batching.

    :param consumer_group: An optional property that sets the consumer

    group used to subscribe to events in the hub.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'event_hub_message_trigger(arg_name: str, connection: str, event_hub_name:
    str, data_type: DataType | str | None = None, cardinality: Cardinality | str |
    None = None, consumer_group: str | None = None, **kwargs: Any) -> Callable[[...],
    Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: connection
    isRequired: true
  - name: event_hub_name
    isRequired: true
  - name: data_type
    defaultValue: None
  - name: cardinality
    defaultValue: None
  - name: consumer_group
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.TriggerApi.function_name
  name: function_name
  summary: 'Optional: Sets name of the <xref:azure.functions.decorators.Function>
    object. If not set,

    it will default to the name of the method name.


    additional setting fields

    :return: Decorator function.'
  signature: 'function_name(name: str, setting_extra_fields: Dict[str, Any] | None
    = None) -> Callable[[...], Any]'
  parameters:
  - name: name
    description: Name of the function.
    isRequired: true
  - name: setting_extra_fields
    description: Keyword arguments for specifying
    defaultValue: None
- uid: azure.functions.decorators.TriggerApi.generic_trigger
  name: generic_trigger
  summary: 'The generic_trigger decorator adds <xref:azure.functions.decorators.GenericTrigger>

    to the <xref:azure.functions.decorators.FunctionBuilder> object for building <xref:azure.functions.decorators.Function>

    object used in worker function indexing model.

    This is equivalent to defining a generic trigger in the

    function.json which triggers function to execute when generic trigger

    events are received by host.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-custom](https://aka.ms/azure-function-binding-custom)


    fields to include in the binding json.'
  signature: 'generic_trigger(arg_name: str, type: str, data_type: DataType | str
    | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: type
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.TriggerApi.http_type
  name: http_type
  summary: Set http type of the <xref:azure.functions.decorators.Function> object.
  signature: 'http_type(http_type: str) -> Callable[[...], Any]'
  parameters:
  - name: http_type
    description: Http type of the function.
    isRequired: true
  return:
    description: Decorator function.
- uid: azure.functions.decorators.TriggerApi.kafka_trigger
  name: kafka_trigger
  summary: "The kafka_trigger decorator adds\n<xref:azure.functions.decorators.KafkaTrigger>\n\
    to the <xref:azure.functions.decorators.FunctionBuilder> object\nfor building\
    \ <xref:azure.functions.decorators.Function> object used in worker function\n\
    indexing model. This is equivalent to defining kafka trigger\nin the function.json\
    \ which enables function to be triggered to\nrespond to an event sent to a kafka\
    \ topic.\nAll optional fields will be given default value by function host when\n\
    they are parsed by function host.\n\nRef: [https://aka.ms/kafkatrigger](https://aka.ms/kafkatrigger)\n\
    \ncontains the connection string for the eventhub when using Kafka\nprotocol header\
    \ feature of Azure EventHubs.\n:param consumer_group: Kafka consumer group used\
    \ by the trigger.\n:param avro_schema: This should be used only if a generic record\n\
    should be generated.\n:param username: SASL username for use with the PLAIN and\
    \ SASL-SCRAM-..\n\n   mechanisms. Default is empty string. This is equivalent\
    \ to\n\n'sasl.username' in librdkafka.\n:param password: SASL password for use\
    \ with the PLAIN and SASL-SCRAM-..\n\n   mechanisms. Default is empty string.\
    \ This is equivalent to\n\n'sasl.password' in librdkafka.\n:param ssl_key_location:\
    \ Path to client's private key (PEM) used for\n\n   authentication. Default is\
    \ empty string. This is equivalent to\n\n'ssl.key.location' in librdkafka.\n:param\
    \ ssl_ca_location: Path to CA certificate file for verifying the\nbroker's certificate.\
    \ This is equivalent to 'ssl.ca.location' in\nlibrdkafka.\n:param ssl_certificate_location:\
    \ Path to client's certificate. This is\nequivalent to 'ssl.certificate.location'\
    \ in librdkafka.\n:param ssl_key_password: Password for client's certificate.\
    \ This is\nequivalent to 'ssl.key.password' in librdkafka.\n:param schema_registry_url:\
    \ URL for the Avro Schema Registry.\n:param schema_registry_username: Username\
    \ for the Avro Schema Registry.\n:param schema_registry_password: Password for\
    \ the Avro Schema Registry.\n:param o_auth_bearer_method: Either 'default' or\
    \ 'oidc'.\nsasl.oauthbearer in librdkafka.\n:param o_auth_bearer_client_id: Specify\
    \ only when o_auth_bearer_method\nis 'oidc'. sasl.oauthbearer.client.id in librdkafka.\n\
    :param o_auth_bearer_client_secret: Specify only when\no_auth_bearer_method is\
    \ 'oidc'. sasl.oauthbearer.client.secret in\nlibrdkafka.\n:param o_auth_bearer_scope:\
    \ Specify only when o_auth_bearer_method\nis 'oidc'. Client use this to specify\
    \ the scope of the access request\nto the broker. sasl.oauthbearer.scope in librdkafka.\n\
    :param o_auth_bearer_token_endpoint_url: Specify only when\no_auth_bearer_method\
    \ is 'oidc'. sasl.oauthbearer.token.endpoint.url\nin librdkafka.\n:param o_auth_bearer_extensions:\
    \ Allow additional information to be\nprovided to the broker. Comma-separated\
    \ list of key=value pairs. E.g.,\n\"supportFeatureX=true,organizationId=sales-emea\"\
    .\nsasl.oauthbearer.extensions in librdkafka\n:param authentication_mode: SASL\
    \ mechanism to use for authentication.\nAllowed values: Gssapi, Plain, ScramSha256,\
    \ ScramSha512. Default is\nPlain. This is equivalent to 'sasl.mechanism' in librdkafka.\n\
    :param protocol: Gets or sets the security protocol used to communicate\n\n  \
    \ with brokers. Default is plain text. This is equivalent to\n\n'security.protocol'\
    \ in librdkafka. TODO\n:param lag_threshold: Maximum number of unprocessed messages\
    \ a worker\nis expected to have at an instance. When target-based scaling is not\n\
    disabled, this is used to divide total unprocessed event count to\ndetermine the\
    \ number of worker instances, which will then be rounded\nup to a worker instance\
    \ count that creates a balanced partition\ndistribution. Default is 1000.\n:param\
    \ data_type: Defines how Functions runtime should treat the\nparameter value.\n\
    :param kwargs: Keyword arguments for specifying additional binding\nfields to\
    \ include in the binding json\n:return: Decorator function."
  signature: 'kafka_trigger(arg_name: str, topic: str, broker_list: str, event_hub_connection_string:
    str | None = None, consumer_group: str | None = None, avro_schema: str | None
    = None, username: str | None = None, password: str | None = None, ssl_key_location:
    str | None = None, ssl_ca_location: str | None = None, ssl_certificate_location:
    str | None = None, ssl_key_password: str | None = None, schema_registry_url: str
    | None = None, schema_registry_username: str | None = None, schema_registry_password:
    str | None = None, o_auth_bearer_method: OAuthBearerMethod | str | None = None,
    o_auth_bearer_client_id: str | None = None, o_auth_bearer_client_secret: str |
    None = None, o_auth_bearer_scope: str | None = None, o_auth_bearer_token_endpoint_url:
    str | None = None, o_auth_bearer_extensions: str | None = None, authentication_mode:
    BrokerAuthenticationMode | str | None = ''NotSet'', protocol: BrokerProtocol |
    str | None = ''NotSet'', cardinality: Cardinality | str | None = ''One'', lag_threshold:
    int = 1000, data_type: DataType | str | None = None, **kwargs) -> Callable[[...],
    Any]'
  parameters:
  - name: arg_name
    description: 'the variable name used in function code for the

      parameter that has the kafka event data.'
    isRequired: true
  - name: topic
    description: The topic monitored by the trigger.
    isRequired: true
  - name: broker_list
    description: The list of Kafka brokers monitored by the trigger.
    isRequired: true
  - name: event_hub_connection_string
    description: The name of an app setting that
    defaultValue: None
  - name: consumer_group
    defaultValue: None
  - name: avro_schema
    defaultValue: None
  - name: username
    defaultValue: None
  - name: password
    defaultValue: None
  - name: ssl_key_location
    defaultValue: None
  - name: ssl_ca_location
    defaultValue: None
  - name: ssl_certificate_location
    defaultValue: None
  - name: ssl_key_password
    defaultValue: None
  - name: schema_registry_url
    defaultValue: None
  - name: schema_registry_username
    defaultValue: None
  - name: schema_registry_password
    defaultValue: None
  - name: o_auth_bearer_method
    defaultValue: None
  - name: o_auth_bearer_client_id
    defaultValue: None
  - name: o_auth_bearer_client_secret
    defaultValue: None
  - name: o_auth_bearer_scope
    defaultValue: None
  - name: o_auth_bearer_token_endpoint_url
    defaultValue: None
  - name: o_auth_bearer_extensions
    defaultValue: None
  - name: authentication_mode
    defaultValue: NotSet
  - name: protocol
    defaultValue: NotSet
  - name: cardinality
    defaultValue: One
  - name: lag_threshold
    defaultValue: '1000'
  - name: data_type
    defaultValue: None
- uid: azure.functions.decorators.TriggerApi.orchestration_trigger
  name: orchestration_trigger
  summary: Register an Orchestrator Function.
  signature: 'orchestration_trigger(context_name: str, orchestration: str | None =
    None)'
  parameters:
  - name: context_name
    description: Parameter name of the DurableOrchestrationContext object.
    isRequired: true
    types:
    - <xref:str>
  - name: orchestration
    description: 'Name of Orchestrator Function.

      By default, the name of the method is used.'
    defaultValue: None
    types:
    - <xref:Optional>[<xref:str>]
- uid: azure.functions.decorators.TriggerApi.queue_trigger
  name: queue_trigger
  summary: 'The queue_trigger decorator adds <xref:azure.functions.decorators.QueueTrigger>
    to the

    <xref:azure.functions.decorators.FunctionBuilder> object

    for building <xref:azure.functions.decorators.Function> object used in worker
    function

    indexing model. This is equivalent to defining QueueTrigger

    in the function.json which enables function to be triggered when new

    message(s) are sent to the storage queue.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-queue](https://aka.ms/azure-function-binding-queue)


    <xref:azure.functions.decorators.QueueMessage> object in function code.

    :param queue_name: The name of the queue to poll.

    :param connection: The name of an app setting or setting collection

    that specifies how to connect to Azure Queues.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json.'
  signature: 'queue_trigger(arg_name: str, queue_name: str, connection: str, data_type:
    DataType | None = None, **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: queue_name
    isRequired: true
  - name: connection
    isRequired: true
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.TriggerApi.route
  name: route
  summary: 'The route decorator adds <xref:azure.functions.decorators.HttpTrigger>
    and

    <xref:azure.functions.decorators.HttpOutput> binding to the <xref:azure.functions.decorators.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.Function> object used in worker
    function

    indexing model. This is equivalent to defining HttpTrigger

    and HttpOutput binding in the function.json which enables your

    function be triggered when http requests hit the specified route.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-http](https://aka.ms/azure-function-binding-http)


    to function name if present or user defined python function name.

    :param trigger_arg_name: Argument name for <xref:azure.functions.decorators.HttpRequest>,

    defaults to ''req''.

    :param binding_arg_name: Argument name for <xref:azure.functions.decorators.HttpResponse>,

    defaults to ''$return''.

    :param methods: A tuple of the HTTP methods to which the function

    responds.

    :param auth_level: Determines what keys, if any, need to be present

    on the request in order to invoke the function.

    :return: Decorator function.

    :param trigger_extra_fields: Additional fields to include in trigger

    json. For example,

    >>> data_type=''STRING'' # ''dataType'': ''STRING'' in trigger json

    :param binding_extra_fields: Additional fields to include in binding

    json. For example,

    >>> data_type=''STRING'' # ''dataType'': ''STRING'' in binding json'
  signature: 'route(route: str | None = None, trigger_arg_name: str = ''req'', binding_arg_name:
    str = ''$return'', methods: Iterable[str] | Iterable[HttpMethod] | None = None,
    auth_level: AuthLevel | str | None = None, trigger_extra_fields: Dict[str, Any]
    | None = None, binding_extra_fields: Dict[str, Any] | None = None) -> Callable[[...],
    Any]'
  parameters:
  - name: route
    description: Route for the http endpoint, if None, it will be set
    defaultValue: None
  - name: trigger_arg_name
    defaultValue: req
  - name: binding_arg_name
    defaultValue: $return
  - name: methods
    defaultValue: None
  - name: auth_level
    defaultValue: None
  - name: trigger_extra_fields
    defaultValue: None
  - name: binding_extra_fields
    defaultValue: None
- uid: azure.functions.decorators.TriggerApi.schedule
  name: schedule
  summary: 'The schedule or timer decorator adds <xref:azure.functions.decorators.TimerTrigger>
    to the

    <xref:azure.functions.decorators.FunctionBuilder> object

    for building <xref:azure.functions.decorators.Function> object used in worker
    function

    indexing model. This is equivalent to defining TimerTrigger

    in the function.json which enables your function be triggered on the

    specified schedule.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-timer](https://aka.ms/azure-function-binding-timer)


    <xref:azure.functions.decorators.TimerRequest> object in function code.

    :param schedule: A string representing a CRON expression that will

    be used to schedule a function to run.

    :param run_on_startup: If true, the function is invoked when the

    runtime starts.

    :param use_monitor: Set to true or false to indicate whether the

    schedule should be monitored.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :return: Decorator function.'
  signature: 'schedule(arg_name: str, schedule: str, run_on_startup: bool | None =
    None, use_monitor: bool | None = None, data_type: DataType | str | None = None,
    **kwargs: Any) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    description: The name of the variable that represents the
    isRequired: true
  - name: schedule
    isRequired: true
  - name: run_on_startup
    defaultValue: None
  - name: use_monitor
    defaultValue: None
  - name: data_type
    defaultValue: None
- uid: azure.functions.decorators.TriggerApi.service_bus_queue_trigger
  name: service_bus_queue_trigger
  summary: 'The on_service_bus_queue_change decorator adds

    <xref:azure.functions.decorators.ServiceBusQueueTrigger> to the <xref:azure.functions.decorators.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.Function> object used in worker
    function

    indexing model. This is equivalent to defining ServiceBusQueueTrigger

    in the function.json which enables your function be triggered when

    new message(s) are sent to the service bus queue.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-service-bus](https://aka.ms/azure-function-binding-service-bus)


    <xref:azure.functions.decorators.ServiceBusMessage> object in function code.

    :param connection: The name of an app setting or setting collection

    that specifies how to connect to Service Bus.

    :param queue_name: Name of the queue to monitor.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param access_rights: Access rights for the connection string.

    :param is_sessions_enabled: True if connecting to a session-aware

    queue or subscription.

    :param cardinality: Set to many in order to enable batching.

    :return: Decorator function.'
  signature: 'service_bus_queue_trigger(arg_name: str, connection: str, queue_name:
    str, data_type: DataType | str | None = None, access_rights: AccessRights | str
    | None = None, is_sessions_enabled: bool | None = None, cardinality: Cardinality
    | str | None = None, **kwargs: Any) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    description: The name of the variable that represents the
    isRequired: true
  - name: connection
    isRequired: true
  - name: queue_name
    isRequired: true
  - name: data_type
    defaultValue: None
  - name: access_rights
    defaultValue: None
  - name: is_sessions_enabled
    defaultValue: None
  - name: cardinality
    defaultValue: None
- uid: azure.functions.decorators.TriggerApi.service_bus_topic_trigger
  name: service_bus_topic_trigger
  summary: 'The on_service_bus_topic_change decorator adds

    <xref:azure.functions.decorators.ServiceBusTopicTrigger> to the <xref:azure.functions.decorators.FunctionBuilder>
    object

    for building <xref:azure.functions.decorators.Function> object used in worker
    function

    indexing model. This is equivalent to defining ServiceBusTopicTrigger

    in the function.json which enables function to be triggered when new

    message(s) are sent to the service bus topic.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-service-bus](https://aka.ms/azure-function-binding-service-bus)


    <xref:azure.functions.decorators.ServiceBusMessage> object in function code.

    :param connection: The name of an app setting or setting collection

    that specifies how to connect to Service Bus.

    :param topic_name: Name of the topic to monitor.

    :param subscription_name: Name of the subscription to monitor.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :param access_rights: Access rights for the connection string.

    :param is_sessions_enabled: True if connecting to a session-aware

    queue or subscription.

    :param cardinality: Set to many in order to enable batching.

    :return: Decorator function.'
  signature: 'service_bus_topic_trigger(arg_name: str, connection: str, topic_name:
    str, subscription_name: str, data_type: DataType | str | None = None, access_rights:
    AccessRights | str | None = None, is_sessions_enabled: bool | None = None, cardinality:
    Cardinality | str | None = None, **kwargs: Any) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    description: The name of the variable that represents the
    isRequired: true
  - name: connection
    isRequired: true
  - name: topic_name
    isRequired: true
  - name: subscription_name
    isRequired: true
  - name: data_type
    defaultValue: None
  - name: access_rights
    defaultValue: None
  - name: is_sessions_enabled
    defaultValue: None
  - name: cardinality
    defaultValue: None
- uid: azure.functions.decorators.TriggerApi.sql_trigger
  name: sql_trigger
  summary: 'The sql_trigger decorator adds <xref:azure.functions.decorators.SqlTrigger>

    to the <xref:azure.functions.decorators.FunctionBuilder> object

    for building <xref:azure.functions.decorators.Function> object used in worker
    function

    indexing model. This decorator will work only with extension bundle 4.x

    and above.

    This is equivalent to defining SqlTrigger in the function.json which

    enables function to be triggered when there are changes in the Sql

    table.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/sqlbindings](https://aka.ms/sqlbindings)


    <xref:azure.functions.decorators.SqlRowList> object in the function code

    :param table_name: The name of the table monitored by the trigger

    :param connection_string_setting: The name of an app setting that

    contains the connection string for the database against which the

    query or stored procedure is being executed

    :param leases_table_name: The name of the table used to store

    leases. If not specified, the leases table name will be

    Leases_{FunctionId}_{TableId}.

    :param data_type: Defines how Functions runtime should treat the

    parameter value

    :param kwargs: Keyword arguments for specifying additional binding

    fields to include in the binding json'
  signature: 'sql_trigger(arg_name: str, table_name: str, connection_string_setting:
    str, leases_table_name: str | None = None, data_type: DataType | None = None,
    **kwargs) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    isRequired: true
  - name: table_name
    isRequired: true
  - name: connection_string_setting
    isRequired: true
  - name: leases_table_name
    defaultValue: None
  - name: data_type
    defaultValue: None
  return:
    description: Decorator function.
- uid: azure.functions.decorators.TriggerApi.timer_trigger
  name: timer_trigger
  summary: 'The schedule or timer decorator adds <xref:azure.functions.decorators.TimerTrigger>
    to the

    <xref:azure.functions.decorators.FunctionBuilder> object

    for building <xref:azure.functions.decorators.Function> object used in worker
    function

    indexing model. This is equivalent to defining TimerTrigger

    in the function.json which enables your function be triggered on the

    specified schedule.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-timer](https://aka.ms/azure-function-binding-timer)


    <xref:azure.functions.decorators.TimerRequest> object in function code.

    :param schedule: A string representing a CRON expression that will

    be used to schedule a function to run.

    :param run_on_startup: If true, the function is invoked when the

    runtime starts.

    :param use_monitor: Set to true or false to indicate whether the

    schedule should be monitored.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :return: Decorator function.'
  signature: 'timer_trigger(arg_name: str, schedule: str, run_on_startup: bool | None
    = None, use_monitor: bool | None = None, data_type: DataType | str | None = None,
    **kwargs: Any) -> Callable[[...], Any]'
  parameters:
  - name: arg_name
    description: The name of the variable that represents the
    isRequired: true
  - name: schedule
    isRequired: true
  - name: run_on_startup
    defaultValue: None
  - name: use_monitor
    defaultValue: None
  - name: data_type
    defaultValue: None
- uid: azure.functions.decorators.TriggerApi.warm_up_trigger
  name: warm_up_trigger
  summary: 'The warm up decorator adds <xref:azure.functions.decorators.WarmUpTrigger>
    to the

    <xref:azure.functions.decorators.FunctionBuilder> object

    for building <xref:azure.functions.decorators.Function> object used in worker
    function

    indexing model. This is equivalent to defining WarmUpTrigger

    in the function.json which enables your function be triggered on the

    specified schedule.

    All optional fields will be given default value by function host when

    they are parsed by function host.


    Ref: [https://aka.ms/azure-function-binding-warmup](https://aka.ms/azure-function-binding-warmup)


    <xref:azure.functions.decorators.TimerRequest> object in function code.

    :param data_type: Defines how Functions runtime should treat the

    parameter value.

    :return: Decorator function.'
  signature: 'warm_up_trigger(arg_name: str, data_type: DataType | str | None = None,
    **kwargs) -> Callable'
  parameters:
  - name: arg_name
    description: The name of the variable that represents the
    isRequired: true
  - name: data_type
    defaultValue: None
attributes:
- uid: azure.functions.decorators.TriggerApi.app_script_file
  name: app_script_file
  summary: "Name of function app script file in which all the functions\n   are defined.\n\
    \n   Script file defined here is for placeholder purpose, please refer to\n  \
    \ worker defined script file path as the single point of truth."
  return:
    description: Script file name.
