### YamlMime:PythonClass
uid: azure.functions.extension.extension_meta.ExtensionMeta
name: ExtensionMeta
fullName: azure.functions.extension.extension_meta.ExtensionMeta
module: azure.functions.extension.extension_meta
inheritances:
- abc.ABCMeta
summary: "The metaclass handles extension registration.\n\nAppExtension is registered\
  \ in __init__, it is applied to all triggers.\nFuncExtension is registered in __call__,\
  \ as users need to instantiate it\ninside hook script.\n\nAfter registration, the\
  \ extension class will be flatten into the following\nstructure to speed up worker\
  \ lookup:\n\n   _func_exts[<trigger_name>].<hook_name>.(ext_name, ext_impl)\n  \
  \ (e.g. _func_exts['HttpTrigger'].pre_invocation.ext_impl)\n\n   _app_exts.<hook_name>.(ext_name,\
  \ ext_impl)\n   (e.g. _app_exts.pre_invocation_app_level.ext_impl)\n\nThe extension\
  \ tree information is stored in _info for diagnostic\npurpose. The dictionary is\
  \ serializable to json:\n\n   _info['FuncExtension']['<Trigger>'] = list(<Extension>)\n\
  \   _info['AppExtension'] = list(<Extension>)\n\nExecutes on 'import extension',\
  \ once the AppExtension class is\nloaded, call the setup() method and add the life-cycle\
  \ hooks into\n_app_exts."
constructor:
  syntax: ExtensionMeta(name, bases, namespace, /, **kwargs)
methods:
- uid: azure.functions.extension.extension_meta.ExtensionMeta.get_application_hooks
  name: get_application_hooks
  summary: Return all application hooks
  signature: get_application_hooks() -> AppExtensionHooks | None
  return:
    description: 'Example to look up a certain life-cycle name:

      get_application_hooks().pre_invocation_app_level.ext_name'
    types:
    - <xref:typing.Optional>[<xref:azure.functions.extension.app_extension_hooks.AppExtensionHooks>]
- uid: azure.functions.extension.extension_meta.ExtensionMeta.get_function_hooks
  name: get_function_hooks
  summary: Return all function extension hooks indexed by trigger name.
  signature: 'get_function_hooks(name: str) -> FuncExtensionHooks | None'
  parameters:
  - name: name
    isRequired: true
  return:
    description: 'Example to look up a certain life-cycle name:

      get_function_hooks(''HttpTrigger'').pre_invocation.ext_name'
    types:
    - <xref:typing.Optional>[<xref:azure.functions.extension.func_extension_hooks.FuncExtensionHooks>]
- uid: azure.functions.extension.extension_meta.ExtensionMeta.get_registered_extensions_json
  name: get_registered_extensions_json
  summary: Return a json string of the registered
  signature: get_registered_extensions_json() -> str
  return:
    description: "The json string will be constructed in a structure of\n{\n\n   \"\
      FuncExtension\": {\n      \"<TriggerA>\": [\n         \"ExtensionName\"\n\n\
      \      ]\n\n   },\n   \"AppExtension\": [\n\n      \"ExtensionName\"\n\n   ]\n\
      \n}"
    types:
    - <xref:str>
- uid: azure.functions.extension.extension_meta.ExtensionMeta.mro
  name: mro
  summary: Return a type's method resolution order.
  signature: mro()
- uid: azure.functions.extension.extension_meta.ExtensionMeta.register
  name: register
  summary: 'Register a virtual subclass of an ABC.


    Returns the subclass, to allow usage as a class decorator.'
  signature: register(subclass)
  parameters:
  - name: subclass
    isRequired: true
