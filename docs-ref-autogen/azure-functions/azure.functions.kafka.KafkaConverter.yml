### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.functions.kafka.KafkaConverter.check_input_type_annotation
  - azure.functions.kafka.KafkaConverter.check_output_type_annotation
  - azure.functions.kafka.KafkaConverter.decode
  - azure.functions.kafka.KafkaConverter.decode_multiple_events
  - azure.functions.kafka.KafkaConverter.decode_single_event
  - azure.functions.kafka.KafkaConverter.encode
  class: azure.functions.kafka.KafkaConverter
  fullName: azure.functions.kafka.KafkaConverter
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.functions.meta._BaseConverter
    type: azure.functions.meta.InConverter
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.functions.meta._BaseConverter
    type: azure.functions.meta.OutConverter
  langs:
  - python
  module: azure.functions.kafka
  name: KafkaConverter
  source:
    id: KafkaConverter
    path: azure\functions\kafka.py
    remote:
      branch: master
      path: azure\functions\kafka.py
      repo: https://github.com/Azure/azure-functions-python-library
    startLine: 85
  summary: ''
  syntax: {}
  type: class
  uid: azure.functions.kafka.KafkaConverter
- class: azure.functions.kafka.KafkaConverter
  fullName: azure.functions.kafka.KafkaConverter.check_input_type_annotation
  langs:
  - python
  module: azure.functions.kafka
  name: check_input_type_annotation(pytype) -> bool
  namewithoutparameters: check_input_type_annotation
  source:
    id: check_input_type_annotation
    path: azure\functions\kafka.py
    remote:
      branch: master
      path: azure\functions\kafka.py
      repo: https://github.com/Azure/azure-functions-python-library
    startLine: 86
  syntax:
    content: check_input_type_annotation(pytype) -> bool
  type: method
  uid: azure.functions.kafka.KafkaConverter.check_input_type_annotation
- class: azure.functions.kafka.KafkaConverter
  fullName: azure.functions.kafka.KafkaConverter.check_output_type_annotation
  langs:
  - python
  module: azure.functions.kafka
  name: check_output_type_annotation(pytype) -> bool
  namewithoutparameters: check_output_type_annotation
  source:
    id: check_output_type_annotation
    path: azure\functions\kafka.py
    remote:
      branch: master
      path: azure\functions\kafka.py
      repo: https://github.com/Azure/azure-functions-python-library
    startLine: 95
  syntax:
    content: check_output_type_annotation(pytype) -> bool
  type: method
  uid: azure.functions.kafka.KafkaConverter.check_output_type_annotation
- class: azure.functions.kafka.KafkaConverter
  fullName: azure.functions.kafka.KafkaConverter.decode
  langs:
  - python
  module: azure.functions.kafka
  name: 'decode(data: azure.functions.meta.Datum, *, trigger_metadata) -> typing.Union[azure.functions.kafka.KafkaEvent,
    typing.List[azure.functions.kafka.KafkaEvent]]'
  namewithoutparameters: decode
  source:
    id: decode
    path: azure\functions\kafka.py
    remote:
      branch: master
      path: azure\functions\kafka.py
      repo: https://github.com/Azure/azure-functions-python-library
    startLine: 103
  syntax:
    content: 'decode(data: azure.functions.meta.Datum, *, trigger_metadata) -> typing.Union[azure.functions.kafka.KafkaEvent,
      typing.List[azure.functions.kafka.KafkaEvent]]'
  type: method
  uid: azure.functions.kafka.KafkaConverter.decode
- class: azure.functions.kafka.KafkaConverter
  fullName: azure.functions.kafka.KafkaConverter.decode_multiple_events
  langs:
  - python
  module: azure.functions.kafka
  name: 'decode_multiple_events(data: azure.functions.meta.Datum, trigger_metadata)
    -> typing.List[azure.functions.kafka.KafkaEvent]'
  namewithoutparameters: decode_multiple_events
  source:
    id: decode_multiple_events
    path: azure\functions\kafka.py
    remote:
      branch: master
      path: azure\functions\kafka.py
      repo: https://github.com/Azure/azure-functions-python-library
    startLine: 136
  syntax:
    content: 'decode_multiple_events(data: azure.functions.meta.Datum, trigger_metadata)
      -> typing.List[azure.functions.kafka.KafkaEvent]'
  type: method
  uid: azure.functions.kafka.KafkaConverter.decode_multiple_events
- class: azure.functions.kafka.KafkaConverter
  fullName: azure.functions.kafka.KafkaConverter.decode_single_event
  langs:
  - python
  module: azure.functions.kafka
  name: 'decode_single_event(data: azure.functions.meta.Datum, trigger_metadata) ->
    azure.functions.kafka.KafkaEvent'
  namewithoutparameters: decode_single_event
  source:
    id: decode_single_event
    path: azure\functions\kafka.py
    remote:
      branch: master
      path: azure\functions\kafka.py
      repo: https://github.com/Azure/azure-functions-python-library
    startLine: 119
  syntax:
    content: 'decode_single_event(data: azure.functions.meta.Datum, trigger_metadata)
      -> azure.functions.kafka.KafkaEvent'
  type: method
  uid: azure.functions.kafka.KafkaConverter.decode_single_event
- class: azure.functions.kafka.KafkaConverter
  fullName: azure.functions.kafka.KafkaConverter.encode
  langs:
  - python
  module: azure.functions.kafka
  name: 'encode(obj: typing.Any, *, expected_type: typing.Union[type, NoneType]) ->
    azure.functions.meta.Datum'
  namewithoutparameters: encode
  source:
    id: encode
    path: azure\functions\kafka.py
    remote:
      branch: master
      path: azure\functions\kafka.py
      repo: https://github.com/Azure/azure-functions-python-library
    startLine: 147
  syntax:
    content: 'encode(obj: typing.Any, *, expected_type: typing.Union[type, NoneType])
      -> azure.functions.meta.Datum'
  type: method
  uid: azure.functions.kafka.KafkaConverter.encode
references:
- fullName: azure.functions.kafka.KafkaConverter.check_input_type_annotation
  isExternal: false
  name: check_input_type_annotation(pytype) -> bool
  parent: azure.functions.kafka.KafkaConverter
  uid: azure.functions.kafka.KafkaConverter.check_input_type_annotation
- fullName: azure.functions.kafka.KafkaConverter.check_output_type_annotation
  isExternal: false
  name: check_output_type_annotation(pytype) -> bool
  parent: azure.functions.kafka.KafkaConverter
  uid: azure.functions.kafka.KafkaConverter.check_output_type_annotation
- fullName: azure.functions.kafka.KafkaConverter.decode
  isExternal: false
  name: 'decode(data: azure.functions.meta.Datum, *, trigger_metadata) -> typing.Union[azure.functions.kafka.KafkaEvent,
    typing.List[azure.functions.kafka.KafkaEvent]]'
  parent: azure.functions.kafka.KafkaConverter
  uid: azure.functions.kafka.KafkaConverter.decode
- fullName: azure.functions.kafka.KafkaConverter.decode_multiple_events
  isExternal: false
  name: 'decode_multiple_events(data: azure.functions.meta.Datum, trigger_metadata)
    -> typing.List[azure.functions.kafka.KafkaEvent]'
  parent: azure.functions.kafka.KafkaConverter
  uid: azure.functions.kafka.KafkaConverter.decode_multiple_events
- fullName: azure.functions.kafka.KafkaConverter.decode_single_event
  isExternal: false
  name: 'decode_single_event(data: azure.functions.meta.Datum, trigger_metadata) ->
    azure.functions.kafka.KafkaEvent'
  parent: azure.functions.kafka.KafkaConverter
  uid: azure.functions.kafka.KafkaConverter.decode_single_event
- fullName: azure.functions.kafka.KafkaConverter.encode
  isExternal: false
  name: 'encode(obj: typing.Any, *, expected_type: typing.Union[type, NoneType]) ->
    azure.functions.meta.Datum'
  parent: azure.functions.kafka.KafkaConverter
  uid: azure.functions.kafka.KafkaConverter.encode
