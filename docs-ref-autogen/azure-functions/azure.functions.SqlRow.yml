### YamlMime:PythonClass
uid: azure.functions.SqlRow
name: SqlRow
fullName: azure.functions.SqlRow
module: azure.functions
inheritances:
- azure.functions._sql.BaseSqlRow
- collections.UserDict
summary: 'A SQL Row.


  SqlRow objects are ''''UserDict'''' subclasses and behave like dicts.'
constructor:
  syntax: SqlRow(dict=None, /, **kwargs)
  positionalOnlyParameters:
  - name: dict
    defaultValue: None
methods:
- uid: azure.functions.SqlRow.clear
  name: clear
  signature: clear() -> None.  Remove all items from D.
- uid: azure.functions.SqlRow.copy
  name: copy
  signature: copy()
- uid: azure.functions.SqlRow.from_dict
  name: from_dict
  summary: Create a SqlRow from a dict object
  signature: 'from_dict(dct: dict) -> BaseSqlRow'
  parameters:
  - name: dct
    isRequired: true
- uid: azure.functions.SqlRow.from_json
  name: from_json
  summary: Create a SqlRow from a JSON string.
  signature: 'from_json(json_data: str) -> BaseSqlRow'
  parameters:
  - name: json_data
    isRequired: true
- uid: azure.functions.SqlRow.fromkeys
  name: fromkeys
  signature: fromkeys(iterable, value=None)
  parameters:
  - name: iterable
    isRequired: true
  - name: value
    defaultValue: None
- uid: azure.functions.SqlRow.get
  name: get
  signature: get(k, [d]) -> D[k] if k in D, else d.  d defaults to None.
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.functions.SqlRow.items
  name: items
  signature: items() -> a set-like object providing a view on D's items
- uid: azure.functions.SqlRow.keys
  name: keys
  signature: keys() -> a set-like object providing a view on D's keys
- uid: azure.functions.SqlRow.pop
  name: pop
  summary: If key is not found, d is returned if given, otherwise KeyError is raised.
  signature: pop(k, [d]) -> v, remove specified key and return the corresponding value.
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.functions.SqlRow.popitem
  name: popitem
  summary: as a 2-tuple; but raise KeyError if D is empty.
  signature: popitem() -> (k, v), remove and return some (key, value) pair
- uid: azure.functions.SqlRow.setdefault
  name: setdefault
  signature: setdefault(k, [d]) -> D.get(k,d), also set D[k]=d if k not in D
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.functions.SqlRow.to_json
  name: to_json
  summary: Return the JSON representation of the SqlRow
  signature: to_json() -> str
- uid: azure.functions.SqlRow.update
  name: update
  summary: 'If E present and has a .keys() method, does:     for k in E: D[k] = E[k]

    If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v

    In either case, this is followed by: for k, v in F.items(): D[k] = v'
  signature: update([E], **F) -> None.  Update D from mapping/iterable E and F.
  positionalOnlyParameters:
  - name: other
    defaultValue: ()
- uid: azure.functions.SqlRow.values
  name: values
  signature: values() -> an object providing a view on D's values
