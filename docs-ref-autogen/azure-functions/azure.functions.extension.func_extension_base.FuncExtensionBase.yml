### YamlMime:PythonClass
uid: azure.functions.extension.func_extension_base.FuncExtensionBase
name: FuncExtensionBase
fullName: azure.functions.extension.func_extension_base.FuncExtensionBase
module: azure.functions.extension.func_extension_base
inheritances:
- builtins.object
summary: 'An abstract class defines the life-cycle hooks which to be implemented

  by customer''s extension.


  Everytime when a new extension is initialized in customer function scripts,

  the ExtensionManager._func_exts field records the extension to this

  specific function name.


  Constructor for extension. This needs to be implemented and ensure

  super().__init__(file_path) is called.


  The initializer serializes the extension to a tree. This speeds

  up the worker lookup and reduce the overhead on each invocation.

  _func_exts[<trigger_name>].<hook_name>.(ext_name, ext_impl)

  (e.g. _func_exts[''HttpTrigger''].pre_invocation.ext_impl)'
constructor:
  syntax: FuncExtensionBase(*args, **kwargs)
  parameters:
  - name: file_path
    description: The name of trigger the extension attaches to (e.g. __file__).
    isRequired: true
    types:
    - <xref:str>
methods:
- uid: azure.functions.extension.func_extension_base.FuncExtensionBase.post_function_load
  name: post_function_load
  summary: 'This hook will be called right after a customer''s function loaded.

    In this stage, the customer''s logger is not fully initialized, so it

    is not provided. Please use print() to emit message if necessary.'
  signature: 'post_function_load(function_name: str, function_directory: str, *args,
    **kwargs) -> None'
  parameters:
  - name: function_name
    description: The name of customer's function (e.g. HttpTrigger)
    isRequired: true
    types:
    - <xref:str>
  - name: function_directory
    description: 'The path to customer''s function directory

      (e.g. /home/site/wwwroot/HttpTrigger)'
    isRequired: true
    types:
    - <xref:str>
- uid: azure.functions.extension.func_extension_base.FuncExtensionBase.post_invocation
  name: post_invocation
  summary: 'This hook will be called right after a customer''s function

    is executed.'
  signature: 'post_invocation(logger: Logger, context: Context, func_args: Dict[str,
    object] | None = None, func_ret: object | None = None, *args, **kwargs) -> None'
  parameters:
  - name: logger
    description: 'A logger provided by Python worker. Extension developer should

      use this logger to emit telemetry to Azure Functions customers.'
    isRequired: true
    types:
    - <xref:logging.Logger>
  - name: context
    description: 'This will include the function_name, function_directory and an

      invocation_id of this specific invocation.'
    isRequired: true
    types:
    - <xref:azure.functions.Context>
  - name: func_args
    description: 'Arguments that are passed into the Azure Functions. The name of

      each parameter is defined in function.json. Extension developers

      may also want to do isinstance() check if you want to apply

      operations to specific trigger types or input binding types.'
    defaultValue: None
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:object>]
  - name: func_ret
    description: 'Return value from Azure Functions. This is usually the value

      defined in function.json $return section. Extension developers

      may also want to do isinstance() check if you want to apply

      operations to specific types or input binding types.'
    defaultValue: None
    types:
    - <xref:typing.Optional>[<xref:object>]
- uid: azure.functions.extension.func_extension_base.FuncExtensionBase.pre_invocation
  name: pre_invocation
  summary: 'This hook will be called right before customer''s function

    is being executed.'
  signature: 'pre_invocation(logger: Logger, context: Context, func_args: Dict[str,
    object] | None = None, *args, **kwargs) -> None'
  parameters:
  - name: logger
    description: 'A logger provided by Python worker. Extension developer should

      use this logger to emit telemetry to Azure Functions customers.'
    isRequired: true
    types:
    - <xref:logging.Logger>
  - name: context
    description: 'This will include the function_name, function_directory and an

      invocation_id of this specific invocation.'
    isRequired: true
    types:
    - <xref:azure.functions.Context>
  - name: func_args
    description: 'Arguments that are passed into the Azure Functions. The name of

      each parameter is defined in function.json. Extension developers

      may also want to do isinstance() check if you want to apply

      operations to specific trigger types or input binding types.'
    defaultValue: None
    types:
    - <xref:typing.Dict>[<xref:str>, <xref:object>]
