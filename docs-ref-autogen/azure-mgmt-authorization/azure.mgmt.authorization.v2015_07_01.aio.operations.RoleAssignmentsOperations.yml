### YamlMime:PythonClass
uid: azure.mgmt.authorization.v2015_07_01.aio.operations.RoleAssignmentsOperations
name: RoleAssignmentsOperations
fullName: azure.mgmt.authorization.v2015_07_01.aio.operations.RoleAssignmentsOperations
module: azure.mgmt.authorization.v2015_07_01.aio.operations
inheritances:
- builtins.object
summary: 'RoleAssignmentsOperations async operations.


  You should not instantiate this class directly. Instead, you should create a Client
  instance that

  instantiates it for you and attaches it as an attribute.'
constructor:
  syntax: RoleAssignmentsOperations(client, config, serializer, deserializer) -> None
  parameters:
  - name: client
    description: Client for service requests.
    isRequired: true
  - name: config
    description: Configuration of service client.
    isRequired: true
  - name: serializer
    description: An object model serializer.
    isRequired: true
  - name: deserializer
    description: An object model deserializer.
    isRequired: true
variables:
- description: Alias to model classes used in this operation group.
  name: models
methods:
- uid: azure.mgmt.authorization.v2015_07_01.aio.operations.RoleAssignmentsOperations.create
  name: create
  summary: Creates a role assignment.
  signature: 'create(scope: str, role_assignment_name: str, parameters: azure.mgmt.authorization.v2015_07_01.models._models_py3.RoleAssignmentCreateParameters,
    **kwargs) -> azure.mgmt.authorization.v2015_07_01.models._models_py3.RoleAssignment'
  parameters:
  - name: scope
    description: 'The scope of the role assignment to create. The scope can be any
      REST resource

      instance. For example, use ''/subscriptions/{subscription-id}/'' for a subscription,

      ''/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}'' for
      a resource group,

      and ''/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-

      provider}/{resource-type}/{resource-name}'' for a resource.'
    isRequired: true
    types:
    - <xref:str>
  - name: role_assignment_name
    description: 'The name of the role assignment to create. It can be any valid

      GUID.'
    isRequired: true
    types:
    - <xref:str>
  - name: parameters
    description: Parameters for the role assignment.
    isRequired: true
    types:
    - <xref:azure.mgmt.authorization.v2015_07_01.models.RoleAssignmentCreateParameters>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: RoleAssignment, or the result of cls(response)
    types:
    - <xref:azure.mgmt.authorization.v2015_07_01.models.RoleAssignment>
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.authorization.v2015_07_01.aio.operations.RoleAssignmentsOperations.create_by_id
  name: create_by_id
  summary: Creates a role assignment by ID.
  signature: 'create_by_id(role_assignment_id: str, parameters: azure.mgmt.authorization.v2015_07_01.models._models_py3.RoleAssignmentCreateParameters,
    **kwargs) -> azure.mgmt.authorization.v2015_07_01.models._models_py3.RoleAssignment'
  parameters:
  - name: role_assignment_id
    description: 'The fully qualified ID of the role assignment, including the scope,

      resource name and resource type. Use the format,

      /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
      Example:

      /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.'
    isRequired: true
    types:
    - <xref:str>
  - name: parameters
    description: Parameters for the role assignment.
    isRequired: true
    types:
    - <xref:azure.mgmt.authorization.v2015_07_01.models.RoleAssignmentCreateParameters>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: RoleAssignment, or the result of cls(response)
    types:
    - <xref:azure.mgmt.authorization.v2015_07_01.models.RoleAssignment>
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.authorization.v2015_07_01.aio.operations.RoleAssignmentsOperations.delete
  name: delete
  summary: Deletes a role assignment.
  signature: 'delete(scope: str, role_assignment_name: str, **kwargs) -> azure.mgmt.authorization.v2015_07_01.models._models_py3.RoleAssignment'
  parameters:
  - name: scope
    description: The scope of the role assignment to delete.
    isRequired: true
    types:
    - <xref:str>
  - name: role_assignment_name
    description: The name of the role assignment to delete.
    isRequired: true
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: RoleAssignment, or the result of cls(response)
    types:
    - <xref:azure.mgmt.authorization.v2015_07_01.models.RoleAssignment>
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.authorization.v2015_07_01.aio.operations.RoleAssignmentsOperations.delete_by_id
  name: delete_by_id
  summary: Deletes a role assignment.
  signature: 'delete_by_id(role_assignment_id: str, **kwargs) -> azure.mgmt.authorization.v2015_07_01.models._models_py3.RoleAssignment'
  parameters:
  - name: role_assignment_id
    description: 'The fully qualified ID of the role assignment, including the scope,

      resource name and resource type. Use the format,

      /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
      Example:

      /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.'
    isRequired: true
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: RoleAssignment, or the result of cls(response)
    types:
    - <xref:azure.mgmt.authorization.v2015_07_01.models.RoleAssignment>
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.authorization.v2015_07_01.aio.operations.RoleAssignmentsOperations.get
  name: get
  summary: Get the specified role assignment.
  signature: 'get(scope: str, role_assignment_name: str, **kwargs) -> azure.mgmt.authorization.v2015_07_01.models._models_py3.RoleAssignment'
  parameters:
  - name: scope
    description: The scope of the role assignment.
    isRequired: true
    types:
    - <xref:str>
  - name: role_assignment_name
    description: The name of the role assignment to get.
    isRequired: true
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: RoleAssignment, or the result of cls(response)
    types:
    - <xref:azure.mgmt.authorization.v2015_07_01.models.RoleAssignment>
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.authorization.v2015_07_01.aio.operations.RoleAssignmentsOperations.get_by_id
  name: get_by_id
  summary: Gets a role assignment by ID.
  signature: 'get_by_id(role_assignment_id: str, **kwargs) -> azure.mgmt.authorization.v2015_07_01.models._models_py3.RoleAssignment'
  parameters:
  - name: role_assignment_id
    description: 'The fully qualified ID of the role assignment, including the scope,

      resource name and resource type. Use the format,

      /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
      Example:

      /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.'
    isRequired: true
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: RoleAssignment, or the result of cls(response)
    types:
    - <xref:azure.mgmt.authorization.v2015_07_01.models.RoleAssignment>
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.authorization.v2015_07_01.aio.operations.RoleAssignmentsOperations.list
  name: list
  summary: Gets all role assignments for the subscription.
  signature: 'list(filter: Optional[str] = None, **kwargs) -> AsyncIterable[azure.mgmt.authorization.v2015_07_01.models._models_py3.RoleAssignmentListResult]'
  parameters:
  - name: filter
    description: 'The filter to apply on the operation. Use $filter=atScope() to return
      all role

      assignments at or above the scope. Use $filter=principalId eq {id} to return
      all role

      assignments at, above or below the scope for the specified principal.'
    isRequired: true
    defaultValue: None
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: An iterator like instance of either RoleAssignmentListResult or the
      result of cls(response)
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.mgmt.authorization.v2015_07_01.models.RoleAssignmentListResult>]
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.authorization.v2015_07_01.aio.operations.RoleAssignmentsOperations.list_for_resource
  name: list_for_resource
  summary: Gets role assignments for a resource.
  signature: 'list_for_resource(resource_group_name: str, resource_provider_namespace:
    str, parent_resource_path: str, resource_type: str, resource_name: str, filter:
    Optional[str] = None, **kwargs) -> AsyncIterable[azure.mgmt.authorization.v2015_07_01.models._models_py3.RoleAssignmentListResult]'
  parameters:
  - name: resource_group_name
    description: The name of the resource group.
    isRequired: true
    types:
    - <xref:str>
  - name: resource_provider_namespace
    description: The namespace of the resource provider.
    isRequired: true
    types:
    - <xref:str>
  - name: parent_resource_path
    description: The parent resource identity.
    isRequired: true
    types:
    - <xref:str>
  - name: resource_type
    description: The resource type of the resource.
    isRequired: true
    types:
    - <xref:str>
  - name: resource_name
    description: The name of the resource to get role assignments for.
    isRequired: true
    types:
    - <xref:str>
  - name: filter
    description: 'The filter to apply on the operation. Use $filter=atScope() to return
      all role

      assignments at or above the scope. Use $filter=principalId eq {id} to return
      all role

      assignments at, above or below the scope for the specified principal.'
    isRequired: true
    defaultValue: None
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: An iterator like instance of either RoleAssignmentListResult or the
      result of cls(response)
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.mgmt.authorization.v2015_07_01.models.RoleAssignmentListResult>]
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.authorization.v2015_07_01.aio.operations.RoleAssignmentsOperations.list_for_resource_group
  name: list_for_resource_group
  summary: Gets role assignments for a resource group.
  signature: 'list_for_resource_group(resource_group_name: str, filter: Optional[str]
    = None, **kwargs) -> AsyncIterable[azure.mgmt.authorization.v2015_07_01.models._models_py3.RoleAssignmentListResult]'
  parameters:
  - name: resource_group_name
    description: The name of the resource group.
    isRequired: true
    types:
    - <xref:str>
  - name: filter
    description: 'The filter to apply on the operation. Use $filter=atScope() to return
      all role

      assignments at or above the scope. Use $filter=principalId eq {id} to return
      all role

      assignments at, above or below the scope for the specified principal.'
    isRequired: true
    defaultValue: None
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: An iterator like instance of either RoleAssignmentListResult or the
      result of cls(response)
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.mgmt.authorization.v2015_07_01.models.RoleAssignmentListResult>]
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.authorization.v2015_07_01.aio.operations.RoleAssignmentsOperations.list_for_scope
  name: list_for_scope
  summary: Gets role assignments for a scope.
  signature: 'list_for_scope(scope: str, filter: Optional[str] = None, **kwargs) ->
    AsyncIterable[azure.mgmt.authorization.v2015_07_01.models._models_py3.RoleAssignmentListResult]'
  parameters:
  - name: scope
    description: The scope of the role assignments.
    isRequired: true
    types:
    - <xref:str>
  - name: filter
    description: 'The filter to apply on the operation. Use $filter=atScope() to return
      all role

      assignments at or above the scope. Use $filter=principalId eq {id} to return
      all role

      assignments at, above or below the scope for the specified principal.'
    isRequired: true
    defaultValue: None
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: An iterator like instance of either RoleAssignmentListResult or the
      result of cls(response)
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.mgmt.authorization.v2015_07_01.models.RoleAssignmentListResult>]
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
attributes:
- uid: azure.mgmt.authorization.v2015_07_01.aio.operations.RoleAssignmentsOperations.models
  name: models
  signature: models = <module 'azure.mgmt.authorization.v2015_07_01.models' from 'C:\\hostedtoolcache\\windows\\Python\\3.6.8\\x64\\lib\\site-packages\\azure\\mgmt\\authorization\\v2015_07_01\\models\\__init__.py'>
