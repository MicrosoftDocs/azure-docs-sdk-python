### YamlMime:PythonClass
uid: azure.cognitiveservices.search.entitysearch.models.Entities
name: Entities
fullName: azure.cognitiveservices.search.entitysearch.models.Entities
module: azure.cognitiveservices.search.entitysearch.models
inheritances:
- azure.cognitiveservices.search.entitysearch.models._models_py3.SearchResultsAnswer
summary: 'Defines an entity answer.


  Variables are only populated by the server, and will be ignored when

  sending a request.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: Entities(*, value, **kwargs)
  parameters:
  - name: _type
    description: Required. Constant filled by server.
    isRequired: true
    types:
    - <xref:str>
  - name: value
    description: Required. A list of entities.
    isRequired: true
    types:
    - <xref:list>[<xref:azure.cognitiveservices.search.entitysearch.models.Thing>]
  keywordOnlyParameters:
  - name: value
    isRequired: true
variables:
- description: A String identifier.
  name: id
  types:
  - <xref:str>
- description: 'A list of rules that you must adhere to if you

    display the item.'
  name: contractual_rules
  types:
  - <xref:list>[<xref:azure.cognitiveservices.search.entitysearch.models.ContractualRulesContractualRule>]
- description: The URL To Bing's search result for this item.
  name: web_search_url
  types:
  - <xref:str>
- name: query_context
  types:
  - <xref:azure.cognitiveservices.search.entitysearch.models.QueryContext>
- description: 'The supported query scenario. This field is set to

    DominantEntity or DisambiguationItem. The field is set to DominantEntity

    if Bing determines that only a single entity satisfies the request. For

    example, a book, movie, person, or attraction. If multiple entities could

    satisfy the request, the field is set to DisambiguationItem. For example,

    if the request uses the generic title of a movie franchise, the entity''s

    type would likely be DisambiguationItem. But, if the request specifies a

    specific title from the franchise, the entity''s type would likely be

    DominantEntity. Possible values include: ''DominantEntity'',

    ''DominantEntityWithDisambiguation'', ''Disambiguation'', ''List'',

    ''ListWithPivot''. Default value: "DominantEntity" .'
  name: query_scenario
  types:
  - <xref:str>
  - <xref:azure.cognitiveservices.search.entitysearch.models.EntityQueryScenario>
methods:
- uid: azure.cognitiveservices.search.entitysearch.models.Entities.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.cognitiveservices.search.entitysearch.models.Entities.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.cognitiveservices.search.entitysearch.models.Entities.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.cognitiveservices.search.entitysearch.models.Entities.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.cognitiveservices.search.entitysearch.models.Entities.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.cognitiveservices.search.entitysearch.models.Entities.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.cognitiveservices.search.entitysearch.models.Entities.validate
  name: validate
  summary: Validate this model recursively and return a list of ValidationError.
  signature: validate()
  return:
    description: A list of validation error
    types:
    - <xref:list>
