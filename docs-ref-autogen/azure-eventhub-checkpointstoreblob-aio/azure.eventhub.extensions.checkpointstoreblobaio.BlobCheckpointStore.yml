### YamlMime:PythonClass
uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
name: BlobCheckpointStore
fullName: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore
module: azure.eventhub.extensions.checkpointstoreblobaio
inheritances:
- azure.eventhub.aio._eventprocessor.checkpoint_store.CheckpointStore
summary: 'A CheckpointStore that uses Azure Blob Storage to store the partition ownership
  and checkpoint data.


  This class implements methods list_ownership, claim_ownership, update_checkpoint
  and list_checkpoints that are

  defined in class azure.eventhub.aio.CheckpointStore of package azure-eventhub.'
constructor:
  syntax: BlobCheckpointStore(blob_account_url, container_name, *, credential=None,
    **kwargs)
  parameters:
  - name: blob_account_url
    description: The URI to the storage account.
    isRequired: true
    types:
    - <xref:str>
  - name: container_name
    description: The name of the container for the blobs.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be a SAS token string, an
      account

      shared access key, or an instance of a TokenCredentials class from azure.identity.

      If the URL already has a SAS token, specifying an explicit credential will take
      priority.'
    isRequired: true
  keywordOnlyParameters:
  - name: api_version
    description: The Storage API version to use for requests. Default value is '2019-07-07'.
    types:
    - <xref:str>
  - name: secondary_hostname
    description: The hostname of the secondary endpoint.
    types:
    - <xref:str>
  - name: credential
    isRequired: true
methods:
- uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.claim_ownership
  name: claim_ownership
  summary: Tries to claim ownership for a list of specified partitions.
  signature: 'async claim_ownership(ownership_list: Iterable[Dict[str, Any]], **kwargs:
    Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: ownership_list
    description: Iterable of dictionaries containing all the ownerships to claim.
    isRequired: true
    types:
    - <xref:typing.Iterable>[<xref:typing.Dict>[<xref:str>,<xref:typing.Any>]]
  return:
    types:
    - "<xref:typing.Iterable>[<xref:typing.Dict>[<xref:str>,<xref:typing.Any>]], <xref:typing.Iterable>\
      \ <xref:of> <xref:dictionaries> <xref:containing> <xref:partition> <xref:ownership>\
      \ <xref:information>:<xref:fully_qualified_namespace> (<xref:str>): <xref:The>\
      \ <xref:fully> <xref:qualified> <xref:namespace> <xref:that> <xref:the> <xref:Event>\
      \ <xref:Hub> <xref:belongs> <xref:to.> <xref:The> <xref:format> <xref:is> <xref:like>\
      \ \u201C<<xref:namespace>><xref:.servicebus.windows.net>\u201D<xref:.>  <xref:eventhub_name>\
      \ (<xref:str>): <xref:The> <xref:name> <xref:of> <xref:the> <xref:specific>\
      \ <xref:Event> <xref:Hub> <xref:the> <xref:checkpoint> <xref:is> <xref:associated>\
      \ <xref:with>, <xref:relative> <xref:to> <xref:the> <xref:Event> <xref:Hubs>\
      \ <xref:namespace> <xref:that> <xref:contains> <xref:it.>  <xref:consumer_group>\
      \ (<xref:str>): <xref:The> <xref:name> <xref:of> <xref:the> <xref:consumer>\
      \ <xref:group> <xref:the> <xref:ownership> <xref:are> <xref:associated> <xref:with.>\
      \  <xref:partition_id> (<xref:str>): <xref:The> <xref:partition> <xref:ID> <xref:which>\
      \ <xref:the> <xref:checkpoint> <xref:is> <xref:created> <xref:for.>  <xref:owner_id>\
      \ (<xref:str>): <xref:A> <xref:UUID> <xref:representing> <xref:the> <xref:owner>\
      \ <xref:attempting> <xref:to> <xref:claim> <xref:this> <xref:partition.>  <xref:last_modified_time>\
      \ (<xref:UTC> <xref:datetime.datetime>): <xref:The> <xref:last> <xref:time>\
      \ <xref:this> <xref:ownership> <xref:was> <xref:claimed.>  <xref:etag> (<xref:str>):\
      \ <xref:The> <xref:Etag> <xref:value> <xref:for> <xref:the> <xref:last> <xref:time>\
      \ <xref:this> <xref:ownership> <xref:was> <xref:modified.> <xref:typing.Optional>\
      \ <xref:depending> <xref:on> <xref:storage> <xref:implementation.>"
- uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.close
  name: close
  summary: Close an open HTTP session and connection.
  signature: async close() -> None
- uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.from_connection_string
  name: from_connection_string
  summary: Create BlobCheckpointStore from a storage connection string.
  signature: 'from_connection_string(conn_str: str, container_name: str, *, credential:
    Any = None, **kwargs: Any | None) -> BlobCheckpointStore'
  parameters:
  - name: conn_str
    description: A connection string to an Azure Storage account.
    isRequired: true
    types:
    - <xref:str>
  - name: container_name
    description: The container name for the blobs.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token, or the connection string already has shared

      access key values. The value can be a SAS token string, an account shared access

      key, or an instance of a TokenCredentials class from azure.identity.

      Credentials provided here will take precedence over those in the connection
      string.'
    isRequired: true
  keywordOnlyParameters:
  - name: api_version
    description: The Storage API version to use for requests. Default value is '2019-07-07'.
    types:
    - <xref:str>
  - name: secondary_hostname
    description: The hostname of the secondary endpoint.
    types:
    - <xref:str>
  - name: credential
    isRequired: true
  return:
    description: A blob checkpoint store.
    types:
    - <xref:azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore>
- uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.list_checkpoints
  name: list_checkpoints
  summary: List the updated checkpoints from the storage blob.
  signature: async list_checkpoints(fully_qualified_namespace, eventhub_name, consumer_group,
    **kwargs)
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified namespace that the Event Hub belongs to.

      The format is like "<namespace>.servicebus.windows.net".'
    isRequired: true
    types:
    - <xref:str>
  - name: eventhub_name
    description: 'The name of the specific Event Hub the checkpoints are associated
      with, relative to

      the Event Hubs namespace that contains it.'
    isRequired: true
    types:
    - <xref:str>
  - name: consumer_group
    description: The name of the consumer group the checkpoints are associated with.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - "<xref:typing.Iterable>[<xref:typing.Dict>[<xref:str>,<xref:typing.Any>]], <xref:typing.Iterable>\
      \ <xref:of> <xref:dictionaries> <xref:containing> <xref:partition> <xref:checkpoint>\
      \ <xref:information>:<xref:fully_qualified_namespace> (<xref:str>): <xref:The>\
      \ <xref:fully> <xref:qualified> <xref:namespace> <xref:that> <xref:the> <xref:Event>\
      \ <xref:Hub> <xref:belongs> <xref:to.> <xref:The> <xref:format> <xref:is> <xref:like>\
      \ \u201C<<xref:namespace>><xref:.servicebus.windows.net>\u201D<xref:.>  <xref:eventhub_name>\
      \ (<xref:str>): <xref:The> <xref:name> <xref:of> <xref:the> <xref:specific>\
      \ <xref:Event> <xref:Hub> <xref:the> <xref:checkpoints> <xref:are> <xref:associated>\
      \ <xref:with>, <xref:relative> <xref:to> <xref:the> <xref:Event> <xref:Hubs>\
      \ <xref:namespace> <xref:that> <xref:contains> <xref:it.>  <xref:consumer_group>\
      \ (<xref:str>): <xref:The> <xref:name> <xref:of> <xref:the> <xref:consumer>\
      \ <xref:group> <xref:the> <xref:checkpoints> <xref:are> <xref:associated> <xref:with.>\
      \  <xref:partition_id> (<xref:str>): <xref:The> <xref:partition> <xref:ID> <xref:which>\
      \ <xref:the> <xref:checkpoint> <xref:is> <xref:created> <xref:for.>  <xref:sequence_number>\
      \ (<xref:int>): <xref:The> <xref:sequence> <xref:number> <xref:of> <xref:the>\
      \ <xref:EventData.>  <xref:offset> (<xref:str>): <xref:The> <xref:offset> <xref:of>\
      \ <xref:the> <xref:EventData.>"
- uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.list_ownership
  name: list_ownership
  summary: Retrieves a complete ownership list from the storage blob.
  signature: 'async list_ownership(fully_qualified_namespace: str, eventhub_name:
    str, consumer_group: str, **kwargs: Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified namespace that the Event Hub belongs to.

      The format is like "<namespace>.servicebus.windows.net".'
    isRequired: true
    types:
    - <xref:str>
  - name: eventhub_name
    description: 'The name of the specific Event Hub the partition ownerships are
      associated with,

      relative to the Event Hubs namespace that contains it.'
    isRequired: true
    types:
    - <xref:str>
  - name: consumer_group
    description: The name of the consumer group the ownerships are associated with.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - "<xref:typing.Iterable>[<xref:typing.Dict>[<xref:str>, <xref:typing.Any>]],\
      \ <xref:typing.Iterable> <xref:of> <xref:dictionaries> <xref:containing> <xref:partition>\
      \ <xref:ownership> <xref:information>:<xref:fully_qualified_namespace> (<xref:str>):\
      \ <xref:The> <xref:fully> <xref:qualified> <xref:namespace> <xref:that> <xref:the>\
      \ <xref:Event> <xref:Hub> <xref:belongs> <xref:to.> <xref:The> <xref:format>\
      \ <xref:is> <xref:like> \u201C<<xref:namespace>><xref:.servicebus.windows.net>\u201D\
      <xref:.>  <xref:eventhub_name> (<xref:str>): <xref:The> <xref:name> <xref:of>\
      \ <xref:the> <xref:specific> <xref:Event> <xref:Hub> <xref:the> <xref:checkpoint>\
      \ <xref:is> <xref:associated> <xref:with>, <xref:relative> <xref:to> <xref:the>\
      \ <xref:Event> <xref:Hubs> <xref:namespace> <xref:that> <xref:contains> <xref:it.>\
      \  <xref:consumer_group> (<xref:str>): <xref:The> <xref:name> <xref:of> <xref:the>\
      \ <xref:consumer> <xref:group> <xref:the> <xref:ownership> <xref:are> <xref:associated>\
      \ <xref:with.>  <xref:partition_id> (<xref:str>): <xref:The> <xref:partition>\
      \ <xref:ID> <xref:which> <xref:the> <xref:checkpoint> <xref:is> <xref:created>\
      \ <xref:for.>  <xref:owner_id> (<xref:str>): <xref:A> <xref:UUID> <xref:representing>\
      \ <xref:the> <xref:current> <xref:owner> <xref:of> <xref:this> <xref:partition.>\
      \  <xref:last_modified_time> (<xref:UTC> <xref:datetime.datetime>): <xref:The>\
      \ <xref:last> <xref:time> <xref:this> <xref:ownership> <xref:was> <xref:claimed.>\
      \  <xref:etag> (<xref:str>): <xref:The> <xref:Etag> <xref:value> <xref:for>\
      \ <xref:the> <xref:last> <xref:time> <xref:this> <xref:ownership> <xref:was>\
      \ <xref:modified.> <xref:typing.Optional> <xref:depending> <xref:on> <xref:storage>\
      \ <xref:implementation.>"
- uid: azure.eventhub.extensions.checkpointstoreblobaio.BlobCheckpointStore.update_checkpoint
  name: update_checkpoint
  summary: 'Updates the checkpoint using the given information for the offset, associated
    partition and

    consumer group in the storage blob.


    Note: If you plan to implement a custom checkpoint store with the intention of
    running between

    cross-language EventHubs SDKs, it is recommended to persist the offset value as
    an integer.'
  signature: 'async update_checkpoint(checkpoint: Dict[str, Any], **kwargs: Any) ->
    None'
  parameters:
  - name: checkpoint
    description: "A dict containing checkpoint information:\n\n* *fully_qualified_namespace*\
      \ (str): The fully qualified namespace that the Event Hub belongs to. The format\
      \ is like \"<namespace>.servicebus.windows.net\". \n\n* *eventhub_name* (str):\
      \ The name of the specific Event Hub the checkpoint is associated with, relative\
      \ to the Event Hubs namespace that contains it. \n\n* *consumer_group* (str):\
      \ The name of the consumer group the checkpoint is associated with. \n\n* *partition_id*\
      \ (str): The partition ID which the checkpoint is created for. \n\n* *sequence_number*\
      \ (int): The sequence number of the <xref:azure.eventhub.EventData> the new\
      \ checkpoint will be associated with. \n\n* *offset* (str): The offset of the\
      \ <xref:azure.eventhub.EventData> the new checkpoint will be associated with."
    isRequired: true
    types:
    - <xref:typing.Dict>[<xref:str>,<xref:typing.Any>]
  return:
    types:
    - <xref:None>
