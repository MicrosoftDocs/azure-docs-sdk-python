### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cosmosdb.table.tableservice.TableService.batch
  - azure.cosmosdb.table.tableservice.TableService.commit_batch
  - azure.cosmosdb.table.tableservice.TableService.create_table
  - azure.cosmosdb.table.tableservice.TableService.delete_entity
  - azure.cosmosdb.table.tableservice.TableService.delete_table
  - azure.cosmosdb.table.tableservice.TableService.exists
  - azure.cosmosdb.table.tableservice.TableService.generate_account_shared_access_signature
  - azure.cosmosdb.table.tableservice.TableService.generate_table_shared_access_signature
  - azure.cosmosdb.table.tableservice.TableService.get_entity
  - azure.cosmosdb.table.tableservice.TableService.get_table_acl
  - azure.cosmosdb.table.tableservice.TableService.get_table_service_properties
  - azure.cosmosdb.table.tableservice.TableService.get_table_service_stats
  - azure.cosmosdb.table.tableservice.TableService.insert_entity
  - azure.cosmosdb.table.tableservice.TableService.insert_or_merge_entity
  - azure.cosmosdb.table.tableservice.TableService.insert_or_replace_entity
  - azure.cosmosdb.table.tableservice.TableService.list_tables
  - azure.cosmosdb.table.tableservice.TableService.merge_entity
  - azure.cosmosdb.table.tableservice.TableService.query_entities
  - azure.cosmosdb.table.tableservice.TableService.set_table_acl
  - azure.cosmosdb.table.tableservice.TableService.set_table_service_properties
  - azure.cosmosdb.table.tableservice.TableService.update_entity
  class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.common.storageclient.StorageClient
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: TableService
  source:
    id: TableService
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 100
  summary: 'This is the main class managing Azure Table resources.


    The Azure Table service offers structured storage in the form of tables. Tables

    store data as collections of entities. Entities are similar to rows. An entity

    has a primary key and a set of properties. A property is a name, typed-value pair,

    similar to a column. The Table service does not enforce any schema for tables,

    so two entities in the same table may have different sets of properties. Developers

    may choose to enforce a schema on the client side. A table may contain any number

    of entities.






















    '
  syntax:
    content: TableService(account_name=None, account_key=None, sas_token=None, is_emulated=False,
      protocol='https', endpoint_suffix='core.windows.net', request_session=None,
      connection_string=None, socket_timeout=None)
    variables:
    - description: 'The key-encryption-key optionally provided by the user. If provided,
        will be used to

        encrypt/decrypt in supported methods.

        For methods requiring decryption, either the key_encryption_key OR the resolver
        must be provided.

        If both are provided, the resolver will take precedence.

        Must implement the following methods for APIs requiring encryption:

        wrap_key(key)--wraps the specified key (bytes) using an algorithm of the user''s
        choice. Returns the encrypted key as bytes.

        get_key_wrap_algorithm()--returns the algorithm used to wrap the specified
        symmetric key.

        get_kid()--returns a string key id for this key-encryption-key.

        Must implement the following methods for APIs requiring decryption:

        unwrap_key(key, algorithm)--returns the unwrapped form of the specified symmetric
        key using the string-specified algorithm.

        get_kid()--returns a string key id for this key-encryption-key.

        '
      id: key_encryption_key
      type:
      - object
    - description: 'A function to resolve keys optionally provided by the user. If
        provided, will be used to decrypt in supported methods.

        For methods requiring decryption, either the key_encryption_key OR

        the resolver must be provided. If both are provided, the resolver will take
        precedence.

        It uses the kid string to return a key-encryption-key implementing the interface
        defined above.

        '
      id: key_resolver_function(kid)
      type:
      - function
    - description: 'A function that takes in an entity''s partition key, row key,
        and property name and returns

        a boolean that indicates whether that property should be encrypted.

        '
      id: row_key, property_name) encryption_resolver_functions
      type:
      - function(partition_key,
    - description: 'A flag that may be set to ensure that all messages successfully
        uploaded to the queue and all those downloaded and

        successfully read from the queue are/were encrypted while on the server. If
        this flag is set, all required

        parameters for encryption/decryption must be provided. See the above comments
        on the key_encryption_key and resolver.

        '
      id: require_encryption
      type:
      - bool
  type: class
  uid: azure.cosmosdb.table.tableservice.TableService
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.batch
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: batch
  source:
    id: batch
    path: contextlib.py
    remote:
      branch: master
      path: contextlib.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 847
  summary: 'Creates a batch object which can be used as a context manager. Commits
    the batch on exit.

    '
  syntax:
    content: batch(table_name, timeout=None)
    parameters:
    - description: 'The name of the table to commit the batch to.

        '
      id: table_name
      type:
      - str
    - description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.batch
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.commit_batch
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: commit_batch
  source:
    id: commit_batch
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 806
  summary: 'Commits a @azure.storage.table.TableBatch request.

    '
  syntax:
    content: commit_batch(table_name, batch, timeout=None)
    parameters:
    - description: 'The name of the table to commit the batch to.

        '
      id: table_name
      type:
      - str
    - description: 'The batch to commit.

        '
      id: batch
      type:
      - TableBatch
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A list of the batch responses corresponding to the requests in
        the batch.

        The items could either be an etag, in case of success, or an error object
        in case of failure.

        '
      type:
      - list(azure.storage.table.models.AzureBatchOperationError, str)
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.commit_batch
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.create_table
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: create_table
  source:
    id: create_table
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 504
  summary: 'Creates a new table in the storage account.

    '
  syntax:
    content: create_table(table_name, fail_on_exist=False, timeout=None)
    parameters:
    - description: 'The name of the table to create. The table name may contain only

        alphanumeric characters and cannot begin with a numeric character.

        It is case-insensitive and must be from 3 to 63 characters long.

        '
      id: table_name
      type:
      - str
    - defaultValue: 'False'
      description: 'Specifies whether to throw an exception if the table already exists.

        '
      id: fail_on_exist
      type:
      - bool
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A boolean indicating whether the table was created. If fail_on_exist

        was set to True, this will throw instead of returning false.

        '
      type:
      - bool
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.create_table
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.delete_entity
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: delete_entity
  source:
    id: delete_entity
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 1010
  summary: 'Deletes an existing entity in a table. Throws if the entity does not exist.


    When an entity is successfully deleted, the entity is immediately marked

    for deletion and is no longer accessible to clients. The entity is later

    removed from the Table service during garbage collection.

    '
  syntax:
    content: delete_entity(table_name, partition_key, row_key, if_match='*', timeout=None)
    parameters:
    - description: 'The name of the table containing the entity to delete.

        '
      id: table_name
      type:
      - str
    - description: 'The PartitionKey of the entity.

        '
      id: partition_key
      type:
      - str
    - description: 'The RowKey of the entity.

        '
      id: row_key
      type:
      - str
    - defaultValue: '*'
      description: 'The client may specify the ETag for the entity on the

        request in order to compare to the ETag maintained by the service

        for the purpose of optimistic concurrency. The delete operation

        will be performed only if the ETag sent by the client matches the

        value maintained by the server, indicating that the entity has

        not been modified since it was retrieved by the client. To force

        an unconditional delete, set If-Match to the wildcard character (*).

        '
      id: if_match
      type:
      - str
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.delete_entity
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.delete_table
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: delete_table
  source:
    id: delete_table
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 571
  summary: 'Deletes the specified table and any data it contains.


    When a table is successfully deleted, it is immediately marked for deletion

    and is no longer accessible to clients. The table is later removed from

    the Table service during garbage collection.


    Note that deleting a table is likely to take at least 40 seconds to complete.

    If an operation is attempted against the table while it was being deleted,

    an @azure.cosmosdb.table.tableservice.AzureConflictHttpError will be thrown.

    '
  syntax:
    content: delete_table(table_name, fail_not_exist=False, timeout=None)
    parameters:
    - description: 'The name of the table to delete.

        '
      id: table_name
      type:
      - str
    - defaultValue: 'False'
      description: 'Specifies whether to throw an exception if the table doesn''t
        exist.

        '
      id: fail_not_exist
      type:
      - bool
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A boolean indicating whether the table was deleted. If fail_not_exist

        was set to True, this will throw instead of returning false.

        '
      type:
      - bool
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.delete_table
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.exists
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: exists
  source:
    id: exists
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 545
  summary: 'Returns a boolean indicating whether the table exists.

    '
  syntax:
    content: exists(table_name, timeout=None)
    parameters:
    - description: 'The name of table to check for existence.

        '
      id: table_name
      type:
      - str
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A boolean indicating whether the table exists.

        '
      type:
      - bool
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.exists
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.generate_account_shared_access_signature
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: generate_account_shared_access_signature
  source:
    id: generate_account_shared_access_signature
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 202
  summary: 'Generates a shared access signature for the table service.

    Use the returned signature with the sas_token parameter of TableService.

    '
  syntax:
    content: generate_account_shared_access_signature(resource_types, permission,
      expiry, start=None, ip=None, protocol=None)
    parameters:
    - description: 'Specifies the resource types that are accessible with the account
        SAS.

        '
      id: resource_types
      type:
      - ResourceTypes
    - description: 'The permissions associated with the shared access signature. The

        user is restricted to operations allowed by the permissions.

        Required unless an id is given referencing a stored access policy

        which contains this field. This field must be omitted if it has been

        specified in an associated stored access policy.

        '
      id: permission
      type:
      - AccountPermissions
    - description: 'The time at which the shared access signature becomes invalid.

        Required unless an id is given referencing a stored access policy

        which contains this field. This field must be omitted if it has

        been specified in an associated stored access policy. Azure will always

        convert values to UTC. If a date is passed in without timezone info, it

        is assumed to be UTC.

        '
      id: expiry
      type:
      - datetime
      - str
    - defaultValue: None
      description: 'The time at which the shared access signature becomes valid. If

        omitted, start time for this call is assumed to be the time when the

        storage service receives the request. Azure will always convert values

        to UTC. If a date is passed in without timezone info, it is assumed to

        be UTC.

        '
      id: start
      type:
      - datetime
      - str
    - defaultValue: None
      description: 'Specifies an IP address or a range of IP addresses from which
        to accept requests.

        If the IP address from which the request originates does not match the IP
        address

        or address range specified on the SAS token, the request is not authenticated.

        For example, specifying sip=168.1.5.65 or sip=168.1.5.60-168.1.5.70 on the
        SAS

        restricts the request to those IP addresses.

        '
      id: ip
      type:
      - str
    - defaultValue: None
      description: 'Specifies the protocol permitted for a request made. The default
        value

        is https,http. See @azure.storage.common.models.Protocol for possible values.

        '
      id: protocol
      type:
      - str
    return:
      description: 'A Shared Access Signature (sas) token.

        '
      type:
      - str
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.generate_account_shared_access_signature
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.generate_table_shared_access_signature
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: generate_table_shared_access_signature
  source:
    id: generate_table_shared_access_signature
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 250
  summary: 'Generates a shared access signature for the table.

    Use the returned signature with the sas_token parameter of TableService.

    '
  syntax:
    content: generate_table_shared_access_signature(table_name, permission=None, expiry=None,
      start=None, id=None, ip=None, protocol=None, start_pk=None, start_rk=None, end_pk=None,
      end_rk=None)
    parameters:
    - description: 'The name of the table to create a SAS token for.

        '
      id: table_name
      type:
      - str
    - defaultValue: None
      description: 'The permissions associated with the shared access signature. The

        user is restricted to operations allowed by the permissions.

        Required unless an id is given referencing a stored access policy

        which contains this field. This field must be omitted if it has been

        specified in an associated stored access policy.

        '
      id: permission
      type:
      - TablePermissions
    - defaultValue: None
      description: 'The time at which the shared access signature becomes invalid.

        Required unless an id is given referencing a stored access policy

        which contains this field. This field must be omitted if it has

        been specified in an associated stored access policy. Azure will always

        convert values to UTC. If a date is passed in without timezone info, it

        is assumed to be UTC.

        '
      id: expiry
      type:
      - datetime
      - str
    - defaultValue: None
      description: 'The time at which the shared access signature becomes valid. If

        omitted, start time for this call is assumed to be the time when the

        storage service receives the request. Azure will always convert values

        to UTC. If a date is passed in without timezone info, it is assumed to

        be UTC.

        '
      id: start
      type:
      - datetime
      - str
    - defaultValue: None
      description: 'A unique value up to 64 characters in length that correlates to
        a

        stored access policy. To create a stored access policy, use @azure.cosmosdb.table.tableservice.set_table_acl.

        '
      id: id
      type:
      - str
    - defaultValue: None
      description: 'Specifies an IP address or a range of IP addresses from which
        to accept requests.

        If the IP address from which the request originates does not match the IP
        address

        or address range specified on the SAS token, the request is not authenticated.

        For example, specifying sip=''168.1.5.65'' or sip=''168.1.5.60-168.1.5.70''
        on the SAS

        restricts the request to those IP addresses.

        '
      id: ip
      type:
      - str
    - defaultValue: None
      description: 'Specifies the protocol permitted for a request made. The default
        value

        is https,http. See @azure.storage.common.models.Protocol for possible values.

        '
      id: protocol
      type:
      - str
    - defaultValue: None
      description: 'The minimum partition key accessible with this shared access

        signature. startpk must accompany startrk. Key values are inclusive.

        If omitted, there is no lower bound on the table entities that can

        be accessed.

        '
      id: start_pk
      type:
      - str
    - defaultValue: None
      description: 'The minimum row key accessible with this shared access signature.

        startpk must accompany startrk. Key values are inclusive. If

        omitted, there is no lower bound on the table entities that can be

        accessed.

        '
      id: start_rk
      type:
      - str
    - defaultValue: None
      description: 'The maximum partition key accessible with this shared access

        signature. endpk must accompany endrk. Key values are inclusive. If

        omitted, there is no upper bound on the table entities that can be

        accessed.

        '
      id: end_pk
      type:
      - str
    - defaultValue: None
      description: 'The maximum row key accessible with this shared access signature.

        endpk must accompany endrk. Key values are inclusive. If omitted,

        there is no upper bound on the table entities that can be accessed.

        '
      id: end_rk
      type:
      - str
    return:
      description: 'A Shared Access Signature (sas) token.

        '
      type:
      - str
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.generate_table_shared_access_signature
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.get_entity
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: get_entity
  source:
    id: get_entity
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 861
  summary: 'Get an entity from the specified table. Throws if the entity does not
    exist.

    '
  syntax:
    content: get_entity(table_name, partition_key, row_key, select=None, accept='application/json;odata=minimalmetadata',
      property_resolver=None, timeout=None)
    parameters:
    - description: 'The name of the table to get the entity from.

        '
      id: table_name
      type:
      - str
    - description: 'The PartitionKey of the entity.

        '
      id: partition_key
      type:
      - str
    - description: 'The RowKey of the entity.

        '
      id: row_key
      type:
      - str
    - defaultValue: None
      description: 'Returns only the desired properties of an entity from the set.

        '
      id: select
      type:
      - str
    - defaultValue: application/json;odata=minimalmetadata
      description: 'Specifies the accepted content type of the response payload. See

        @azure.storage.table.models.TablePayloadFormat for possible

        values.

        '
      id: accept
      type:
      - str
    - defaultValue: None
      description: 'A function which given the partition key, row key, property name,

        property value, and the property EdmType if returned by the service,

        returns the EdmType of the property. Generally used if accept is set

        to JSON_NO_METADATA.

        '
      id: property_resolver
      type:
      - func(pk, rk, prop_name, prop_value, service_edm_type)
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'The retrieved entity.

        '
      type:
      - azure.storage.table.models.Entity
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.get_entity
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.get_table_acl
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: get_table_acl
  source:
    id: get_table_acl
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 613
  summary: 'Returns details about any stored access policies specified on the

    table that may be used with Shared Access Signatures.

    '
  syntax:
    content: get_table_acl(table_name, timeout=None)
    parameters:
    - description: 'The name of an existing table.

        '
      id: table_name
      type:
      - str
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A dictionary of access policies associated with the table.

        '
      type:
      - dict(str, azure.storage.common.models.AccessPolicy)
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.get_table_acl
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.get_table_service_properties
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: get_table_service_properties
  source:
    id: get_table_service_properties
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 371
  summary: 'Gets the properties of a storage account''s Table service, including

    logging, analytics and CORS rules.

    '
  syntax:
    content: get_table_service_properties(timeout=None)
    parameters:
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'The table service properties.

        '
      type:
      - azure.storage.common.models.ServiceProperties
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.get_table_service_properties
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.get_table_service_stats
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: get_table_service_stats
  source:
    id: get_table_service_stats
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 335
  summary: 'Retrieves statistics related to replication for the Table service. It
    is

    only available when read-access geo-redundant replication is enabled for

    the storage account.


    With geo-redundant replication, Azure Storage maintains your data durable

    in two locations. In both locations, Azure Storage constantly maintains

    multiple healthy replicas of your data. The location where you read,

    create, update, or delete data is the primary storage account location.

    The primary location exists in the region you choose at the time you

    create an account via the Azure Management Azure classic portal, for

    example, North Central US. The location to which your data is replicated

    is the secondary location. The secondary location is automatically

    determined based on the location of the primary; it is in a second data

    center that resides in the same region as the primary location. Read-only

    access is available from the secondary location, if read-access geo-redundant

    replication is enabled for your storage account.

    '
  syntax:
    content: get_table_service_stats(timeout=None)
    parameters:
    - defaultValue: None
      description: 'The timeout parameter is expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'The table service stats.

        '
      type:
      - azure.storage.common.models.ServiceStats
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.get_table_service_stats
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.insert_entity
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: insert_entity
  source:
    id: insert_entity
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 900
  summary: 'Inserts a new entity into the table. Throws if an entity with the same

    PartitionKey and RowKey already exists.


    When inserting an entity into a table, you must specify values for the

    PartitionKey and RowKey system properties. Together, these properties

    form the primary key and must be unique within the table. Both the

    PartitionKey and RowKey values must be string values; each key value may

    be up to 64 KB in size. If you are using an integer value for the key

    value, you should convert the integer to a fixed-width string, because

    they are canonically sorted. For example, you should convert the value

    1 to 0000001 to ensure proper sorting.

    '
  syntax:
    content: insert_entity(table_name, entity, timeout=None)
    parameters:
    - description: 'The name of the table to insert the entity into.

        '
      id: table_name
      type:
      - str
    - description: 'The entity to insert. Could be a dict or an entity object.

        Must contain a PartitionKey and a RowKey.

        '
      id: entity
      type:
      - dict
      - azure.storage.table.models.Entity
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'The etag of the inserted entity.

        '
      type:
      - str
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.insert_entity
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.insert_or_merge_entity
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: insert_or_merge_entity
  source:
    id: insert_or_merge_entity
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 1074
  summary: 'Merges an existing entity or inserts a new entity if it does not exist

    in the table.


    If insert_or_merge_entity is used to merge an entity, any properties from

    the previous entity will be retained if the request does not define or

    include them.

    '
  syntax:
    content: insert_or_merge_entity(table_name, entity, timeout=None)
    parameters:
    - description: 'The name of the table in which to insert or merge the entity.

        '
      id: table_name
      type:
      - str
    - description: 'The entity to insert or merge. Could be a dict or an entity object.

        Must contain a PartitionKey and a RowKey.

        '
      id: entity
      type:
      - dict
      - azure.storage.table.models.Entity
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'The etag of the entity.

        '
      type:
      - str
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.insert_or_merge_entity
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.insert_or_replace_entity
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: insert_or_replace_entity
  source:
    id: insert_or_replace_entity
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 1044
  summary: 'Replaces an existing entity or inserts a new entity if it does not

    exist in the table. Because this operation can insert or update an

    entity, it is also known as an "upsert" operation.


    If insert_or_replace_entity is used to replace an entity, any properties

    from the previous entity will be removed if the new entity does not define

    them.

    '
  syntax:
    content: insert_or_replace_entity(table_name, entity, timeout=None)
    parameters:
    - description: 'The name of the table in which to insert or replace the entity.

        '
      id: table_name
      type:
      - str
    - description: 'The entity to insert or replace. Could be a dict or an entity
        object.

        Must contain a PartitionKey and a RowKey.

        '
      id: entity
      type:
      - dict
      - azure.storage.table.models.Entity
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'The etag of the entity.

        '
      type:
      - str
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.insert_or_replace_entity
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.list_tables
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: list_tables
  source:
    id: list_tables
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 434
  summary: 'Returns a generator to list the tables. The generator will lazily follow

    the continuation tokens returned by the service and stop when all tables

    have been returned or num_results is reached.


    If num_results is specified and the account has more than that number of

    tables, the generator will have a populated next_marker field once it

    finishes. This marker can be used to create a new generator if more

    results are desired.

    '
  syntax:
    content: list_tables(num_results=None, marker=None, timeout=None)
    parameters:
    - defaultValue: None
      description: 'The maximum number of tables to return.

        '
      id: num_results
      type:
      - int
    - defaultValue: None
      description: 'An opaque continuation object. This value can be retrieved from
        the

        next_marker field of a previous generator object if num_results was

        specified and that generator has finished enumerating results. If

        specified, this generator will begin returning results from the point

        where the previous generator stopped.

        '
      id: marker
      type:
      - obj
    - defaultValue: None
      description: 'The server timeout, expressed in seconds. This function may make
        multiple

        calls to the service in which case the timeout value specified will be

        applied to each individual call.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A generator which produces @azure.storage.common.models.table.Table
        objects.

        '
      type:
      - 'azure.storage.common.models.ListGenerator:'
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.list_tables
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.merge_entity
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: merge_entity
  source:
    id: merge_entity
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 969
  summary: 'Updates an existing entity by merging the entity''s properties. Throws

    if the entity does not exist.


    This operation does not replace the existing entity as the update_entity

    operation does. A property cannot be removed with merge_entity.


    Any properties with null values are ignored. All other properties will be

    updated or added.

    '
  syntax:
    content: merge_entity(table_name, entity, if_match='*', timeout=None)
    parameters:
    - description: 'The name of the table containing the entity to merge.

        '
      id: table_name
      type:
      - str
    - description: 'The entity to merge. Could be a dict or an entity object.

        Must contain a PartitionKey and a RowKey.

        '
      id: entity
      type:
      - dict
      - azure.storage.table.models.Entity
    - defaultValue: '*'
      description: 'The client may specify the ETag for the entity on the

        request in order to compare to the ETag maintained by the service

        for the purpose of optimistic concurrency. The merge operation

        will be performed only if the ETag sent by the client matches the

        value maintained by the server, indicating that the entity has

        not been modified since it was retrieved by the client. To force

        an unconditional merge, set If-Match to the wildcard character (*).

        '
      id: if_match
      type:
      - str
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'The etag of the entity.

        '
      type:
      - str
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.merge_entity
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.query_entities
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: query_entities
  source:
    id: query_entities
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 678
  summary: 'Returns a generator to list the entities in the table specified. The

    generator will lazily follow the continuation tokens returned by the

    service and stop when all entities have been returned or num_results is

    reached.


    If num_results is specified and the account has more than that number of

    entities, the generator will have a populated next_marker field once it

    finishes. This marker can be used to create a new generator if more

    results are desired.

    '
  syntax:
    content: query_entities(table_name, filter=None, select=None, num_results=None,
      marker=None, accept='application/json;odata=minimalmetadata', property_resolver=None,
      timeout=None)
    parameters:
    - description: 'The name of the table to query.

        '
      id: table_name
      type:
      - str
    - defaultValue: None
      description: 'Returns only entities that satisfy the specified filter. Note
        that

        no more than 15 discrete comparisons are permitted within a $filter

        string. See [http://msdn.microsoft.com/en-us/library/windowsazure/dd894031.aspx](http://msdn.microsoft.com/en-us/library/windowsazure/dd894031.aspx)

        for more information on constructing filters.

        '
      id: filter
      type:
      - str
    - defaultValue: None
      description: 'Returns only the desired properties of an entity from the set.

        '
      id: select
      type:
      - str
    - defaultValue: None
      description: 'The maximum number of entities to return.

        '
      id: num_results
      type:
      - int
    - defaultValue: None
      description: 'An opaque continuation object. This value can be retrieved from
        the

        next_marker field of a previous generator object if max_results was

        specified and that generator has finished enumerating results. If

        specified, this generator will begin returning results from the point

        where the previous generator stopped.

        '
      id: marker
      type:
      - obj
    - defaultValue: application/json;odata=minimalmetadata
      description: 'Specifies the accepted content type of the response payload. See

        @azure.storage.table.models.TablePayloadFormat for possible

        values.

        '
      id: accept
      type:
      - str
    - defaultValue: None
      description: 'A function which given the partition key, row key, property name,

        property value, and the property EdmType if returned by the service,

        returns the EdmType of the property. Generally used if accept is set

        to JSON_NO_METADATA.

        '
      id: property_resolver
      type:
      - func(pk, rk, prop_name, prop_value, service_edm_type)
    - defaultValue: None
      description: 'The server timeout, expressed in seconds. This function may make
        multiple

        calls to the service in which case the timeout value specified will be

        applied to each individual call.

        '
      id: timeout
      type:
      - int
    return:
      description: 'A generator which produces @azure.storage.table.models.Entity
        objects.

        '
      type:
      - azure.storage.common.models.ListGenerator
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.query_entities
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.set_table_acl
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: set_table_acl
  source:
    id: set_table_acl
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 637
  summary: 'Sets stored access policies for the table that may be used with Shared

    Access Signatures.


    When you set permissions for a table, the existing permissions are replaced.

    To update the table''s permissions, call @azure.cosmosdb.table.tableservice.TableService.get_table_acl
    to fetch

    all access policies associated with the table, modify the access policy

    that you wish to change, and then call this function with the complete

    set of data to perform the update.


    When you establish a stored access policy on a table, it may take up to

    30 seconds to take effect. During this interval, a shared access signature

    that is associated with the stored access policy will throw an

    @azure.cosmosdb.table.tableservice.AzureHttpError until the access policy becomes
    active.

    '
  syntax:
    content: set_table_acl(table_name, signed_identifiers=None, timeout=None)
    parameters:
    - description: 'The name of an existing table.

        '
      id: table_name
      type:
      - str
    - defaultValue: None
      description: 'A dictionary of access policies to associate with the table. The

        dictionary may contain up to 5 elements. An empty dictionary

        will clear the access policies set on the service.

        '
      id: signed_identifiers
      type:
      - dict(str, azure.storage.common.models.AccessPolicy)
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.set_table_acl
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.set_table_service_properties
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: set_table_service_properties
  source:
    id: set_table_service_properties
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 393
  summary: 'Sets the properties of a storage account''s Table service, including

    Azure Storage Analytics. If an element (ex Logging) is left as None, the

    existing settings on the service for that functionality are preserved.

    For more information on Azure Storage Analytics, see

    [https://msdn.microsoft.com/en-us/library/azure/hh343270.aspx](https://msdn.microsoft.com/en-us/library/azure/hh343270.aspx).

    '
  syntax:
    content: set_table_service_properties(logging=None, hour_metrics=None, minute_metrics=None,
      cors=None, timeout=None)
    parameters:
    - defaultValue: None
      description: 'The logging settings provide request logs.

        '
      id: logging
      type:
      - Logging
    - defaultValue: None
      description: 'The hour metrics settings provide a summary of request

        statistics grouped by API in hourly aggregates for tables.

        '
      id: hour_metrics
      type:
      - Metrics
    - defaultValue: None
      description: 'The minute metrics settings provide request statistics

        for each minute for tables.

        '
      id: minute_metrics
      type:
      - Metrics
    - defaultValue: None
      description: 'You can include up to five CorsRule elements in the

        list. If an empty list is specified, all CORS rules will be deleted,

        and CORS will be disabled for the service. For detailed information

        about CORS rules and evaluation logic, see

        [https://msdn.microsoft.com/en-us/library/azure/dn535601.aspx](https://msdn.microsoft.com/en-us/library/azure/dn535601.aspx).

        '
      id: cors
      type:
      - list(azure.storage.common.models.CorsRule)
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.set_table_service_properties
- class: azure.cosmosdb.table.tableservice.TableService
  fullName: azure.cosmosdb.table.tableservice.TableService.update_entity
  langs:
  - python
  module: azure.cosmosdb.table.tableservice
  name: update_entity
  source:
    id: update_entity
    path: azure\cosmosdb\table\tableservice.py
    remote:
      branch: master
      path: azure\cosmosdb\table\tableservice.py
      repo: https://github.com/Azure/azure-cosmosdb-python.git
    startLine: 935
  summary: 'Updates an existing entity in a table. Throws if the entity does not exist.

    The update_entity operation replaces the entire entity and can be used to

    remove properties.

    '
  syntax:
    content: update_entity(table_name, entity, if_match='*', timeout=None)
    parameters:
    - description: 'The name of the table containing the entity to update.

        '
      id: table_name
      type:
      - str
    - description: 'The entity to update. Could be a dict or an entity object.

        Must contain a PartitionKey and a RowKey.

        '
      id: entity
      type:
      - dict
      - azure.storage.table.models.Entity
    - defaultValue: '*'
      description: 'The client may specify the ETag for the entity on the

        request in order to compare to the ETag maintained by the service

        for the purpose of optimistic concurrency. The update operation

        will be performed only if the ETag sent by the client matches the

        value maintained by the server, indicating that the entity has

        not been modified since it was retrieved by the client. To force

        an unconditional update, set If-Match to the wildcard character (*).

        '
      id: if_match
      type:
      - str
    - defaultValue: None
      description: 'The server timeout, expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'The etag of the entity.

        '
      type:
      - str
  type: method
  uid: azure.cosmosdb.table.tableservice.TableService.update_entity
references:
- fullName: azure.cosmosdb.table.tableservice.TableService.batch
  isExternal: false
  name: batch
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.batch
- fullName: azure.cosmosdb.table.tableservice.TableService.commit_batch
  isExternal: false
  name: commit_batch
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.commit_batch
- fullName: azure.cosmosdb.table.tableservice.TableService.create_table
  isExternal: false
  name: create_table
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.create_table
- fullName: azure.cosmosdb.table.tableservice.TableService.delete_entity
  isExternal: false
  name: delete_entity
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.delete_entity
- fullName: azure.cosmosdb.table.tableservice.TableService.delete_table
  isExternal: false
  name: delete_table
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.delete_table
- fullName: azure.cosmosdb.table.tableservice.TableService.exists
  isExternal: false
  name: exists
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.exists
- fullName: azure.cosmosdb.table.tableservice.TableService.generate_account_shared_access_signature
  isExternal: false
  name: generate_account_shared_access_signature
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.generate_account_shared_access_signature
- fullName: azure.cosmosdb.table.tableservice.TableService.generate_table_shared_access_signature
  isExternal: false
  name: generate_table_shared_access_signature
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.generate_table_shared_access_signature
- fullName: azure.cosmosdb.table.tableservice.TableService.get_entity
  isExternal: false
  name: get_entity
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.get_entity
- fullName: azure.cosmosdb.table.tableservice.TableService.get_table_acl
  isExternal: false
  name: get_table_acl
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.get_table_acl
- fullName: azure.cosmosdb.table.tableservice.TableService.get_table_service_properties
  isExternal: false
  name: get_table_service_properties
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.get_table_service_properties
- fullName: azure.cosmosdb.table.tableservice.TableService.get_table_service_stats
  isExternal: false
  name: get_table_service_stats
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.get_table_service_stats
- fullName: azure.cosmosdb.table.tableservice.TableService.insert_entity
  isExternal: false
  name: insert_entity
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.insert_entity
- fullName: azure.cosmosdb.table.tableservice.TableService.insert_or_merge_entity
  isExternal: false
  name: insert_or_merge_entity
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.insert_or_merge_entity
- fullName: azure.cosmosdb.table.tableservice.TableService.insert_or_replace_entity
  isExternal: false
  name: insert_or_replace_entity
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.insert_or_replace_entity
- fullName: azure.cosmosdb.table.tableservice.TableService.list_tables
  isExternal: false
  name: list_tables
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.list_tables
- fullName: azure.cosmosdb.table.tableservice.TableService.merge_entity
  isExternal: false
  name: merge_entity
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.merge_entity
- fullName: azure.cosmosdb.table.tableservice.TableService.query_entities
  isExternal: false
  name: query_entities
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.query_entities
- fullName: azure.cosmosdb.table.tableservice.TableService.set_table_acl
  isExternal: false
  name: set_table_acl
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.set_table_acl
- fullName: azure.cosmosdb.table.tableservice.TableService.set_table_service_properties
  isExternal: false
  name: set_table_service_properties
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.set_table_service_properties
- fullName: azure.cosmosdb.table.tableservice.TableService.update_entity
  isExternal: false
  name: update_entity
  parent: azure.cosmosdb.table.tableservice.TableService
  uid: azure.cosmosdb.table.tableservice.TableService.update_entity
- fullName: function(partition_key,
  name: function(partition_key,
  spec.python:
  - fullName: function
    name: function
    uid: function
  - fullName: (
    name: (
  - fullName: partition_key,
    name: partition_key,
    uid: partition_key,
  uid: function(partition_key,
- fullName: list(azure.storage.table.models.AzureBatchOperationError, str)
  name: list(AzureBatchOperationError, str)
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: azure.storage.table.models.AzureBatchOperationError
    name: AzureBatchOperationError
    uid: azure.storage.table.models.AzureBatchOperationError
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: list(azure.storage.table.models.AzureBatchOperationError, str)
- fullName: func(pk, rk, prop_name, prop_value, service_edm_type)
  name: func(pk, rk, prop_name, prop_value, service_edm_type)
  spec.python:
  - fullName: func
    name: func
    uid: func
  - fullName: (
    name: (
  - fullName: pk
    name: pk
    uid: pk
  - fullName: ', '
    name: ', '
  - fullName: rk
    name: rk
    uid: rk
  - fullName: ', '
    name: ', '
  - fullName: prop_name
    name: prop_name
    uid: prop_name
  - fullName: ', '
    name: ', '
  - fullName: prop_value
    name: prop_value
    uid: prop_value
  - fullName: ', '
    name: ', '
  - fullName: service_edm_type
    name: service_edm_type
    uid: service_edm_type
  - fullName: )
    name: )
  uid: func(pk, rk, prop_name, prop_value, service_edm_type)
- fullName: dict(str, azure.storage.common.models.AccessPolicy)
  name: dict(str, AccessPolicy)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: azure.storage.common.models.AccessPolicy
    name: AccessPolicy
    uid: azure.storage.common.models.AccessPolicy
  - fullName: )
    name: )
  uid: dict(str, azure.storage.common.models.AccessPolicy)
- fullName: list(azure.storage.common.models.CorsRule)
  name: list(CorsRule)
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: azure.storage.common.models.CorsRule
    name: CorsRule
    uid: azure.storage.common.models.CorsRule
  - fullName: )
    name: )
  uid: list(azure.storage.common.models.CorsRule)
