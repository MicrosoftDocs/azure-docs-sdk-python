### YamlMime:PythonClass
uid: azure.data.tables.TableClient
name: TableClient
fullName: azure.data.tables.TableClient
module: azure.data.tables
inheritances:
- azure.data.tables._base_client.TablesBaseClient
summary: 'A client to interact with a specific Table in an Azure Tables account.


  Create TableClient from a Credential.'
constructor:
  syntax: 'TableClient(endpoint: str, table_name: str, *, credential: AzureSasCredential
    | AzureNamedKeyCredential | TokenCredential | None = None, api_version: str |
    None = None, **kwargs: Any)'
  parameters:
  - name: endpoint
    description: A URL to an Azure Tables account.
    isRequired: true
    types:
    - <xref:str>
  - name: table_name
    description: The table name.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be one of AzureNamedKeyCredential
      (azure-core),

      AzureSasCredential (azure-core), or a TokenCredential implementation from azure-identity.'
    types:
    - <xref:azure.core.credentials.AzureNamedKeyCredential>
    - <xref:azure.core.credentials.AzureSasCredential>
    - <xref:azure.core.credentials.TokenCredential>
    - <xref:None>
  - name: api_version
    description: 'Specifies the version of the operation to use for this request.
      Default value

      is "2019-02-02".'
    types:
    - <xref:str>
variables:
- description: The name of the Tables account.
  name: account_name
  types:
  - <xref:str>
- description: The name of the table.
  name: table_name
  types:
  - <xref:str>
- description: The scheme component in the full URL to the Tables account.
  name: scheme
  types:
  - <xref:str>
- description: The full endpoint URL to this entity, including SAS token if used.
  name: url
  types:
  - <xref:str>
- description: The version of the Storage API used for requests.
  name: api_version
  types:
  - <xref:str>
- description: 'The credentials with which to authenticate. This is optional if the

    account URL already has a SAS token. The value can be one of AzureNamedKeyCredential
    (azure-core),

    AzureSasCredential (azure-core), or a TokenCredential implementation from azure-identity.'
  name: credential
  types:
  - <xref:azure.core.credentials.AzureNamedKeyCredential>
  - <xref:azure.core.credentials.AzureSasCredential>
  - <xref:azure.core.credentials.TokenCredential>
  - <xref:None>
methods:
- uid: azure.data.tables.TableClient.close
  name: close
  summary: 'This method is to close the sockets opened by the client.

    It need not be used when using with a context manager.'
  signature: close() -> None
- uid: azure.data.tables.TableClient.create_entity
  name: create_entity
  summary: Insert entity in a table.
  signature: 'create_entity(entity: TableEntity | Mapping[str, Any], **kwargs) ->
    Dict[str, Any]'
  parameters:
  - name: entity
    description: The properties for the table entity.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:azure.data.tables.TableEntity>, <xref:typing.Mapping>[<xref:str>,
      <xref:typing.Any>]]
  return:
    description: Dictionary mapping operation metadata returned from the service
    types:
    - <xref:dict>[<xref:str>, <xref:typing.Any>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Creating and adding an entity to a Table<!--[!code-python[Main](les\\sample_insert_delete_entities.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    39\\\\azure-data-tables-12.5.0\\\\samples\\\\sample_insert_delete_entities.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   try:\n       resp = table_client.create_entity(entity=self.entity)\n    \
    \   print(resp)\n   except ResourceExistsError:\n       print(\"Entity already\
    \ exists\")\n\n   ````\n"
- uid: azure.data.tables.TableClient.create_table
  name: create_table
  summary: Creates a new table under the current account.
  signature: create_table(**kwargs) -> TableItem
  return:
    description: A TableItem representing the created table.
    types:
    - <xref:azure.data.tables.TableItem>
  exceptions:
  - type: azure.core.exceptions.ResourceExistsError
    description: If the entity already exists
  examples:
  - "Creating a table from the TableClient object<!--[!code-python[Main](les\\sample_create_delete_table.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    39\\\\azure-data-tables-12.5.0\\\\samples\\\\sample_create_delete_table.py\",\
    \ \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   with TableClient.from_connection_string(\n       conn_str=self.connection_string,\
    \ table_name=self.table_name\n   ) as table_client:\n       try:\n           table_item\
    \ = table_client.create_table()\n           print(f\"Created table {table_item.name}!\"\
    )\n       except ResourceExistsError:\n           print(\"Table already exists\"\
    )\n\n   ````\n"
- uid: azure.data.tables.TableClient.delete_entity
  name: delete_entity
  signature: 'delete_entity(partition_key: str, row_key: str, *, etag: str | None
    = None, match_condition: MatchConditions | None = None, **kwargs: Any) -> None'
- uid: azure.data.tables.TableClient.delete_table
  name: delete_table
  summary: 'Deletes the table under the current account. No error will be raised

    if the table does not exist'
  signature: delete_table(**kwargs) -> None
  return:
    description: None
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Deleting a table from the TableClient object<!--[!code-python[Main](les\\sample_create_delete_table.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    39\\\\azure-data-tables-12.5.0\\\\samples\\\\sample_create_delete_table.py\",\
    \ \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   with TableClient.from_connection_string(\n       conn_str=self.connection_string,\
    \ table_name=self.table_name\n   ) as table_client:\n       table_client.delete_table()\n\
    \       print(f\"Deleted table {table_client.table_name}!\")\n\n   ````\n"
- uid: azure.data.tables.TableClient.from_connection_string
  name: from_connection_string
  summary: Create TableClient from a Connection String.
  signature: 'from_connection_string(conn_str: str, table_name: str, **kwargs: Any)
    -> TableClient'
  parameters:
  - name: conn_str
    description: A connection string to an Azure Tables account.
    isRequired: true
    types:
    - <xref:str>
  - name: table_name
    description: The table name.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A table client.
    types:
    - <xref:azure.data.tables.TableClient>
  examples:
  - "Authenticating a TableServiceClient from a connection_string<!--[!code-python[Main](les\\\
    sample_create_client.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\39\\\\azure-data-tables-12.5.0\\\\samples\\\\sample_create_client.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.data.tables import TableClient\n\n   with TableClient.from_connection_string(\n\
    \       conn_str=self.connection_string, table_name=\"tableName\"\n   ) as table_client:\n\
    \       print(f\"Table name: {table_client.table_name}\")\n\n   ````\n"
- uid: azure.data.tables.TableClient.from_table_url
  name: from_table_url
  summary: "A client to interact with a specific Table.\n\nAzureSasCredential (azure-core),\
    \ or a TokenCredential implementation from azure-identity.\n:paramtype credential:\n\
    \n   ~azure.core.credentials.AzureNamedKeyCredential or\n   ~azure.core.credentials.AzureSasCredential\
    \ or None"
  signature: 'from_table_url(table_url: str, *, credential: AzureNamedKeyCredential
    | AzureSasCredential | None = None, **kwargs: Any) -> TableClient'
  parameters:
  - name: table_url
    isRequired: true
  keywordOnlyParameters:
  - name: credential
    isRequired: true
  return:
    description: A table client.
    types:
    - <xref:azure.data.tables.TableClient>
- uid: azure.data.tables.TableClient.get_entity
  name: get_entity
  summary: Get a single entity in a table.
  signature: 'get_entity(partition_key: str, row_key: str, *, select: str | List[str]
    | None = None, **kwargs) -> TableEntity'
  parameters:
  - name: partition_key
    description: The partition key of the entity.
    isRequired: true
    types:
    - <xref:str>
  - name: row_key
    description: The row key of the entity.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: select
    description: Specify desired properties of an entity to return.
    types:
    - <xref:str>
    - <xref:list>[<xref:str>]
  return:
    description: Dictionary mapping operation metadata returned from the service
    types:
    - <xref:azure.data.tables.TableEntity>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Get a single entity from a table<!--[!code-python[Main](les\\sample_update_upsert_merge_entities.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    39\\\\azure-data-tables-12.5.0\\\\samples\\\\sample_update_upsert_merge_entities.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # Get Entity by partition and row key\n   got_entity = table.get_entity(partition_key=my_entity[\"\
    PartitionKey\"], row_key=my_entity[\"RowKey\"])\n   print(f\"Received entity:\
    \ {got_entity}\")\n\n   ````\n"
- uid: azure.data.tables.TableClient.get_table_access_policy
  name: get_table_access_policy
  summary: 'Retrieves details about any stored access policies specified on the table
    that may be

    used with Shared Access Signatures.'
  signature: get_table_access_policy(**kwargs) -> Dict[str, TableAccessPolicy | None]
  return:
    description: Dictionary of SignedIdentifiers
    types:
    - <xref:dict>[<xref:str>, <xref:azure.data.tables.TableAccessPolicy>]
    - <xref:dict>[<xref:str>, <xref:None>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.data.tables.TableClient.list_entities
  name: list_entities
  summary: Lists entities in a table.
  signature: 'list_entities(*, results_per_page: int | None = None, select: str |
    List[str] | None = None, **kwargs) -> ItemPaged[TableEntity]'
  keywordOnlyParameters:
  - name: results_per_page
    description: Number of entities returned per service request.
    types:
    - <xref:int>
  - name: select
    description: Specify desired properties of an entity to return.
    types:
    - <xref:str>
    - <xref:list>[<xref:str>]
  return:
    description: An iterator of <xref:azure.data.tables.TableEntity>
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.data.tables.TableEntity>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "List all entities held within a table<!--[!code-python[Main](les\\sample_update_upsert_merge_entities.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    39\\\\azure-data-tables-12.5.0\\\\samples\\\\sample_update_upsert_merge_entities.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # Query the entities in the table\n   entities = list(table.list_entities())\n\
    \   for i, entity in enumerate(entities):\n       print(f\"Entity #{entity}: {i}\"\
    )\n\n   ````\n"
- uid: azure.data.tables.TableClient.query_entities
  name: query_entities
  summary: Lists entities in a table.
  signature: 'query_entities(query_filter: str, *, results_per_page: int | None =
    None, select: str | List[str] | None = None, parameters: Dict[str, Any] | None
    = None, **kwargs) -> ItemPaged[TableEntity]'
  parameters:
  - name: query_filter
    description: 'Specify a filter to return certain entities. For more information

      on filter formatting, see the [samples documentation](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples#writing-filters).'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: results_per_page
    description: Number of entities returned per service request.
    types:
    - <xref:int>
  - name: select
    description: Specify desired properties of an entity to return.
    types:
    - <xref:str>
    - <xref:list>[<xref:str>]
  - name: parameters
    description: Dictionary for formatting query with additional, user defined parameters
    types:
    - <xref:dict>[<xref:str>, <xref:typing.Any>]
  return:
    description: An iterator of <xref:azure.data.tables.TableEntity>
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.data.tables.TableEntity>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Query entities held within a table<!--[!code-python[Main](les\\sample_query_table.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    39\\\\azure-data-tables-12.5.0\\\\samples\\\\sample_query_table.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   with TableClient.from_connection_string(self.connection_string,\
    \ self.table_name) as table_client:\n       try:\n           print(\"Basic sample:\"\
    )\n           print(\"Entities with name: marker\")\n           parameters: Dict[str,\
    \ Any] = {\"name\": \"marker\"}\n           name_filter = \"Name eq @name\"\n\
    \           queried_entities = table_client.query_entities(\n               query_filter=name_filter,\
    \ select=[\"Brand\", \"Color\"], parameters=parameters\n           )\n\n     \
    \      for entity_chosen in queried_entities:\n               print(entity_chosen)\n\
    \n           print(\"Sample for querying entities with multiple params:\")\n \
    \          print(\"Entities with name: marker and brand: Crayola\")\n        \
    \   parameters = {\"name\": \"marker\", \"brand\": \"Crayola\"}\n           name_filter\
    \ = \"Name eq @name and Brand eq @brand\"\n           queried_entities = table_client.query_entities(\n\
    \               query_filter=name_filter, select=[\"Brand\", \"Color\"], parameters=parameters\n\
    \           )\n           for entity_chosen in queried_entities:\n           \
    \    print(entity_chosen)\n\n           print(\"Sample for querying entities'\
    \ values:\")\n           print(\"Entities with 25 < Value < 50\")\n          \
    \ parameters = {\"lower\": 25, \"upper\": 50}\n           name_filter = \"Value\
    \ gt @lower and Value lt @upper\"\n           queried_entities = table_client.query_entities(\n\
    \               query_filter=name_filter, select=[\"Value\"], parameters=parameters\n\
    \           )\n           for entity_chosen in queried_entities:\n           \
    \    print(entity_chosen)\n       except HttpResponseError as e:\n           raise\n\
    \n   ````\n"
- uid: azure.data.tables.TableClient.set_table_access_policy
  name: set_table_access_policy
  summary: Sets stored access policies for the table that may be used with Shared
    Access Signatures.
  signature: 'set_table_access_policy(signed_identifiers: Dict[str, TableAccessPolicy
    | None], **kwargs) -> None'
  parameters:
  - name: signed_identifiers
    description: Access policies to set for the table
    isRequired: true
    types:
    - <xref:dict>[<xref:str>, <xref:azure.data.tables.TableAccessPolicy>]
    - <xref:dict>[<xref:str>, <xref:None>]
  return:
    description: None
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.data.tables.TableClient.submit_transaction
  name: submit_transaction
  summary: 'Commit a list of operations as a single transaction.


    If any one of these operations fails, the entire transaction will be rejected.'
  signature: 'submit_transaction(operations: Iterable[Tuple[TransactionOperation |
    str, TableEntity | Mapping[str, Any]] | Tuple[TransactionOperation | str, TableEntity
    | Mapping[str, Any], Mapping[str, Any]]], **kwargs) -> List[Mapping[str, Any]]'
  parameters:
  - name: operations
    description: "The list of operations to commit in a transaction. This should be\
      \ an iterable of\ntuples containing an operation name, the entity on which to\
      \ operate, and optionally, a dict of additional\nkwargs for that operation.\
      \ For example:\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
      : [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\"\
      : \"default\", \"force\": false, \"linenos\": false} -->\n\n````default\n\n\
      \   - ('upsert', {'PartitionKey': 'A', 'RowKey': 'B'})\n   - ('upsert', {'PartitionKey':\
      \ 'A', 'RowKey': 'B'}, {'mode': UpdateMode.REPLACE})\n   ````"
    isRequired: true
    types:
    - <xref:typing.Iterable>[<xref:typing.Tuple>[<xref:str>, <xref:azure.data.tables.TableEntity>,
      <xref:typing.Mapping>[<xref:str>, <xref:typing.Any>]]]
  return:
    description: A list of mappings with response metadata for each operation in the
      transaction.
    types:
    - <xref:list>[<xref:typing.Mapping>[<xref:str>, <xref:typing.Any>]]
  exceptions:
  - type: azure.data.tables.TableTransactionError
  examples:
  - "Using transactions to send multiple requests at once<!--[!code-python[Main](les\\\
    sample_batching.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
    \\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
    \\39\\\\azure-data-tables-12.5.0\\\\samples\\\\sample_batching.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.data.tables\
    \ import TableClient, TableTransactionError\n   from azure.core.exceptions import\
    \ ResourceExistsError\n\n   self.table_client = TableClient.from_connection_string(\n\
    \       conn_str=self.connection_string, table_name=self.table_name\n   )\n\n\
    \   try:\n       self.table_client.create_table()\n       print(\"Created table\"\
    )\n   except ResourceExistsError:\n       print(\"Table already exists\")\n\n\
    \   self.table_client.upsert_entity(entity2)\n   self.table_client.upsert_entity(entity3)\n\
    \   self.table_client.upsert_entity(entity4)\n\n   operations: List[TransactionOperationType]\
    \ = [\n       (\"upsert\", entity1),\n       (\"delete\", entity2),\n       (\"\
    upsert\", entity3),\n       (\"update\", entity4, {\"mode\": \"replace\"}),\n\
    \   ]\n   try:\n       self.table_client.submit_transaction(operations)\n   except\
    \ TableTransactionError as e:\n       print(\"There was an error with the transaction\
    \ operation\")\n       print(f\"Error: {e}\")\n\n   ````\n"
- uid: azure.data.tables.TableClient.update_entity
  name: update_entity
  summary: Update entity in a table.
  signature: 'update_entity(entity: TableEntity | Mapping[str, Any], mode: UpdateMode
    = UpdateMode.MERGE, *, etag: str | None = None, match_condition: MatchConditions
    | None = None, **kwargs) -> Dict[str, Any]'
  parameters:
  - name: entity
    description: The properties for the table entity.
    isRequired: true
    types:
    - <xref:azure.data.tables.TableEntity>
    - <xref:dict>[<xref:str>, <xref:typing.Any>]
  - name: mode
    description: Merge or Replace entity
    isRequired: true
    types:
    - <xref:azure.data.tables.UpdateMode>
  keywordOnlyParameters:
  - name: etag
    description: Etag of the entity
    types:
    - <xref:str>
  - name: match_condition
    description: 'The condition under which to perform the operation.

      Supported values include: MatchConditions.IfNotModified, MatchConditions.Unconditionally.

      The default value is Unconditionally.'
    types:
    - <xref:azure.core.MatchConditions>
  return:
    description: Dictionary mapping operation metadata returned from the service
    types:
    - <xref:dict>[<xref:str>, <xref:typing.Any>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Updating an already exiting entity in a Table<!--[!code-python[Main](les\\sample_update_upsert_merge_entities.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    39\\\\azure-data-tables-12.5.0\\\\samples\\\\sample_update_upsert_merge_entities.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # Update the entity\n   created[\"text\"] = \"NewMarker\"\n   table.update_entity(mode=UpdateMode.REPLACE,\
    \ entity=created)\n\n   # Get the replaced entity\n   replaced = table.get_entity(partition_key=str(created[\"\
    PartitionKey\"]), row_key=str(created[\"RowKey\"]))\n   print(f\"Replaced entity:\
    \ {replaced}\")\n\n   # Merge the entity\n   replaced[\"color\"] = \"Blue\"\n\
    \   table.update_entity(mode=UpdateMode.MERGE, entity=replaced)\n\n   # Get the\
    \ merged entity\n   merged = table.get_entity(partition_key=str(replaced[\"PartitionKey\"\
    ]), row_key=str(replaced[\"RowKey\"]))\n   print(f\"Merged entity: {merged}\"\
    )\n\n   ````\n"
- uid: azure.data.tables.TableClient.upsert_entity
  name: upsert_entity
  summary: Update/Merge or Insert entity into table.
  signature: 'upsert_entity(entity: TableEntity | Mapping[str, Any], mode: UpdateMode
    = UpdateMode.MERGE, **kwargs) -> Dict[str, Any]'
  parameters:
  - name: entity
    description: The properties for the table entity.
    isRequired: true
    types:
    - <xref:azure.data.tables.TableEntity>
    - <xref:dict>[<xref:str>, <xref:typing.Any>]
  - name: mode
    description: Merge or Replace entity
    isRequired: true
    types:
    - <xref:azure.data.tables.UpdateMode>
  return:
    description: Dictionary mapping operation metadata returned from the service
    types:
    - <xref:dict>[<xref:str>, <xref:typing.Any>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Update/merge or insert an entity into a table<!--[!code-python[Main](les\\sample_update_upsert_merge_entities.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    39\\\\azure-data-tables-12.5.0\\\\samples\\\\sample_update_upsert_merge_entities.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   # Try Replace and insert on fail\n   insert_entity = table.upsert_entity(mode=UpdateMode.REPLACE,\
    \ entity=entity1)\n   print(f\"Inserted entity: {insert_entity}\")\n\n   created[\"\
    text\"] = \"NewMarker\"\n   merged_entity = table.upsert_entity(mode=UpdateMode.MERGE,\
    \ entity=entity)\n   print(f\"Merged entity: {merged_entity}\")\n\n   ````\n"
attributes:
- uid: azure.data.tables.TableClient.api_version
  name: api_version
  summary: The version of the Storage API used for requests.
  return:
    description: The Storage API version.
- uid: azure.data.tables.TableClient.url
  name: url
  summary: 'The full endpoint URL to this entity, including SAS token if used.


    This could be either the primary endpoint,

    or the secondary endpoint depending on the current <xref:azure.data.tables.location_mode>.'
  return:
    description: The full endpoint URL including SAS token if used.
    types:
    - <xref:str>
