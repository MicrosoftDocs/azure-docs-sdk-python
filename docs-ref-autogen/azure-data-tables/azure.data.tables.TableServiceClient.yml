### YamlMime:PythonClass
uid: azure.data.tables.TableServiceClient
name: TableServiceClient
fullName: azure.data.tables.TableServiceClient
module: azure.data.tables
inheritances:
- azure.data.tables._base_client.TablesBaseClient
summary: 'A client to interact with the Table Service at the account level.


  This client provides operations to retrieve and configure the account properties

  as well as list, create and delete tables within the account.

  For operations relating to a specific table, a client for this entity

  can be retrieved using the <xref:azure.data.tables.TableServiceClient.get_table_client>
  function.'
constructor:
  syntax: TableServiceClient(endpoint, **kwargs)
  parameters:
  - name: endpoint
    description: 'The URL to the table service endpoint. Any other entities included

      in the URL path (e.g. table) will be discarded. This URL can be optionally

      authenticated with a SAS token.'
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be one of AzureNamedKeyCredential
      (azure-core),

      AzureSasCredential (azure-core), or TokenCredentials from azure-identity.'
    types:
    - <xref:azure.core.credentials.AzureNamedKeyCredential>
    - <xref:azure.core.credentials.AzureSasCredential>
    - <xref:azure.core.credentials.TokenCredential>
  - name: api_version
    description: "The Storage API version to use for requests. Default value is '2019-02-02'.\n\
      Setting to an older version may result in reduced feature compatibility.\n\n\
      \n\n## Example:Authenticating a TableServiceClient from a Shared Access Key<!--[!code-python[Main](les\\\
      sample_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
      : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
      a\\\\1\\\\s\\\\dist_temp\\\\167\\\\azure-data-tables-12.1.0\\\\samples\\\\sample_authentication.py\"\
      , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
      highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
      \n   from azure.data.tables import TableServiceClient\n   from azure.core.credentials\
      \ import AzureNamedKeyCredential, AzureSasCredential\n\n   # Create a SAS token\
      \ to use for authentication of a client\n   from azure.data.tables import generate_account_sas,\
      \ ResourceTypes, AccountSasPermissions\n\n   print(\"Account name: {}\".format(self.account_name))\n\
      \   credential = AzureNamedKeyCredential(self.account_name, self.access_key)\n\
      \   sas_token = generate_account_sas(\n       credential,\n       resource_types=ResourceTypes(service=True),\n\
      \       permission=AccountSasPermissions(read=True),\n       expiry=datetime.utcnow()\
      \ + timedelta(hours=1),\n   )\n\n   with TableServiceClient(endpoint=self.endpoint,\
      \ credential=AzureSasCredential(sas_token)) as token_auth_table_service:\n \
      \      properties = token_auth_table_service.get_service_properties()\n    \
      \   print(\"Shared Access Signature: {}\".format(properties))\n\n   ````\n\n\
      Authenticating a TableServiceClient from a Shared Account Key<!--[!code-python[Main](les\\\
      sample_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
      : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
      a\\\\1\\\\s\\\\dist_temp\\\\167\\\\azure-data-tables-12.1.0\\\\samples\\\\sample_authentication.py\"\
      , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
      highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
      \n   from azure.data.tables import TableServiceClient\n   from azure.core.credentials\
      \ import AzureNamedKeyCredential\n\n   credential = AzureNamedKeyCredential(self.account_name,\
      \ self.access_key)\n   with TableServiceClient(endpoint=self.endpoint, credential=credential)\
      \ as table_service:\n       properties = table_service.get_service_properties()\n\
      \       print(\"Shared Key: {}\".format(properties))\n\n   ````"
    types:
    - <xref:str>
variables:
- description: The name of the Tables account.
  name: account_name
  types:
  - <xref:str>
- description: The full URL to the Tables account.
  name: url
  types:
  - <xref:str>
methods:
- uid: azure.data.tables.TableServiceClient.create_table
  name: create_table
  summary: Creates a new table under the current account.
  signature: create_table(table_name, **kwargs)
  parameters:
  - name: table_name
    description: The Table name.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: TableClient
    types:
    - <xref:azure.data.tables.TableClient>
  exceptions:
  - type: azure.core.exceptions.ResourceExistsError
  examples:
  - "Creating a table from the TableServiceClient object<!--[!code-python[Main](les\\\
    sample_create_delete_table.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\167\\\\azure-data-tables-12.1.0\\\\samples\\\\sample_create_delete_table.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   with TableServiceClient.from_connection_string(self.connection_string) as\
    \ table_service_client:\n       try:\n           table_client = table_service_client.create_table(table_name=\"\
    myTable\")\n           print(\"Created table {}!\".format(table_client.table_name))\n\
    \       except ResourceExistsError:\n           print(\"Table already exists\"\
    )\n\n   ````\n"
- uid: azure.data.tables.TableServiceClient.create_table_if_not_exists
  name: create_table_if_not_exists
  summary: 'Creates a new table if it does not currently exist.

    If the table currently exists, the current table is

    returned.'
  signature: create_table_if_not_exists(table_name, **kwargs)
  parameters:
  - name: table_name
    description: The Table name.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: TableClient
    types:
    - <xref:azure.data.tables.TableClient>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Deleting a table from the TableServiceClient object<!--[!code-python[Main](les\\\
    sample_create_delete_table.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\167\\\\azure-data-tables-12.1.0\\\\samples\\\\sample_create_delete_table.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   with TableServiceClient.from_connection_string(self.connection_string) as\
    \ table_service_client:\n       table_client = TableServiceClient.create_table_if_not_exists(table_name=\"\
    myTable\")\n       print(\"Table name: {}\".format(table_client.table_name))\n\
    \n   ````\n"
- uid: azure.data.tables.TableServiceClient.delete_table
  name: delete_table
  summary: 'Deletes the table under the current account. No error will be raised

    if the given table is not found.'
  signature: delete_table(table_name, **kwargs)
  parameters:
  - name: table_name
    description: The Table name.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Deleting a table from the TableServiceClient object<!--[!code-python[Main](les\\\
    sample_create_delete_table.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\167\\\\azure-data-tables-12.1.0\\\\samples\\\\sample_create_delete_table.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   with TableServiceClient.from_connection_string(self.connection_string) as\
    \ table_service_client:\n       table_service_client.delete_table(table_name=\"\
    myTable\")\n       print(\"Deleted table {}!\".format(\"myTable\"))\n\n   ````\n"
- uid: azure.data.tables.TableServiceClient.from_connection_string
  name: from_connection_string
  summary: Create TableServiceClient from a connection string.
  signature: from_connection_string(conn_str, **kwargs)
  parameters:
  - name: conn_str
    description: A connection string to an Azure Storage or Cosmos account.
    isRequired: true
    types:
    - <xref:str>
  - name: conn_str
    isRequired: true
  return:
    description: A Table service client.
    types:
    - <xref:azure.data.tables.TableServiceClient>
  examples:
  - "Authenticating a TableServiceClient from a connection_string<!--[!code-python[Main](les\\\
    sample_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\167\\\\azure-data-tables-12.1.0\\\\samples\\\\sample_authentication.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.data.tables import TableServiceClient\n\n   with TableServiceClient.from_connection_string(conn_str=self.connection_string)\
    \ as table_service:\n       properties = table_service.get_service_properties()\n\
    \       print(\"Connection String: {}\".format(properties))\n\n   ````\n"
- uid: azure.data.tables.TableServiceClient.get_service_properties
  name: get_service_properties
  summary: 'Gets the properties of an account''s Table service,

    including properties for Analytics and CORS (Cross-Origin Resource Sharing) rules.'
  signature: get_service_properties(**kwargs)
  return:
    description: Dictionary of service properties
    types:
    - <xref:Dict>[<xref:str>, <xref:object>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.data.tables.TableServiceClient.get_service_stats
  name: get_service_stats
  summary: 'Retrieves statistics related to replication for the Table service. It
    is only available on the secondary

    location endpoint when read-access geo-redundant replication is enabled for the
    account.'
  signature: get_service_stats(**kwargs)
  return:
    description: Dictionary of service stats
    types:
    - <xref:Dict>[<xref:str>, <xref:object>]
  exceptions:
  - type: 'azure.core.exceptions.HttpResponseError:'
- uid: azure.data.tables.TableServiceClient.get_table_client
  name: get_table_client
  summary: 'Get a client to interact with the specified table.


    The table need not already exist.'
  signature: get_table_client(table_name, **kwargs)
  parameters:
  - name: table_name
    description: The table name
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A <xref:azure.data.tables.TableClient> object.
    types:
    - <xref:azure.data.tables.TableClient>
- uid: azure.data.tables.TableServiceClient.list_tables
  name: list_tables
  summary: Queries tables under the given account.
  signature: list_tables(**kwargs)
  parameters:
  - name: results_per_page
    description: Number of tables per page in returned ItemPaged
    types:
    - <xref:int>
  return:
    description: ItemPaged[<xref:azure.data.tables.TableItem>]
    types:
    - <xref:azure.core.paging.ItemPaged>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Listing all tables in a storage account<!--[!code-python[Main](les\\sample_query_tables.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\167\\\\azure-data-tables-12.1.0\\\\samples\\\\sample_query_tables.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   # List all\
    \ the tables in the service\n   list_tables = table_service.list_tables()\n  \
    \ print(\"Listing tables:\")\n   for table in list_tables:\n       print(\"\\\
    t{}\".format(table.name))\n\n   ````\n"
- uid: azure.data.tables.TableServiceClient.query_tables
  name: query_tables
  summary: Queries tables under the given account.
  signature: query_tables(query_filter, **kwargs)
  parameters:
  - name: query_filter
    description: Specify a filter to return certain tables.
    isRequired: true
    types:
    - <xref:str>
  - name: results_per_page
    description: Number of tables per page in return ItemPaged
    types:
    - <xref:int>
  - name: parameters
    description: Dictionary for formatting query with additional, user defined parameters
    types:
    - <xref:Dict>[<xref:str>, <xref:Any>]
  return:
    description: ItemPaged[<xref:azure.data.tables.TableItem>]
    types:
    - <xref:azure.core.paging.ItemPaged>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Querying tables in a storage account<!--[!code-python[Main](les\\sample_query_tables.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\167\\\\azure-data-tables-12.1.0\\\\samples\\\\sample_query_tables.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   table_name\
    \ = \"mytable1\"\n   name_filter = \"TableName eq '{}'\".format(table_name)\n\
    \   queried_tables = table_service.query_tables(name_filter)\n\n   print(\"Queried_tables\"\
    )\n   for table in queried_tables:\n       print(\"\\t{}\".format(table.name))\n\
    \n   ````\n"
- uid: azure.data.tables.TableServiceClient.set_service_properties
  name: set_service_properties
  summary: "Sets properties for an account's Table service endpoint,\n   including\
    \ properties for Analytics and CORS (Cross-Origin Resource Sharing) rules."
  signature: set_service_properties(**kwargs)
  parameters:
  - name: analytics_logging
    description: Properties for analytics
    types:
    - <xref:azure.data.tables.TableAnalyticsLogging>
  - name: hour_metrics
    description: Hour level metrics
    types:
    - <xref:azure.data.tables.TableMetrics>
  - name: minute_metrics
    description: Minute level metrics
    types:
    - <xref:azure.data.tables.TableMetrics>
  - name: cors
    description: Cross-origin resource sharing rules
    types:
    - <xref:List>[<xref:azure.data.tables.TableCorsRule>]
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
