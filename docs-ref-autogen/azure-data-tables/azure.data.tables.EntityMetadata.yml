### YamlMime:PythonClass
uid: azure.data.tables.EntityMetadata
name: EntityMetadata
fullName: azure.data.tables.EntityMetadata
module: azure.data.tables
inheritances:
- builtins.dict
constructor:
  syntax: EntityMetadata()
methods:
- uid: azure.data.tables.EntityMetadata.clear
  name: clear
  signature: clear() -> None.  Remove all items from D.
- uid: azure.data.tables.EntityMetadata.copy
  name: copy
  signature: copy() -> a shallow copy of D
- uid: azure.data.tables.EntityMetadata.fromkeys
  name: fromkeys
  summary: Create a new dictionary with keys from iterable and values set to value.
  signature: fromkeys(value=None, /)
  positionalOnlyParameters:
  - name: iterable
    isRequired: true
  - name: value
    defaultValue: None
  parameters:
  - name: type
    isRequired: true
- uid: azure.data.tables.EntityMetadata.get
  name: get
  summary: Return the value for key if key is in the dictionary, else default.
  signature: get(key, default=None, /)
  positionalOnlyParameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.data.tables.EntityMetadata.items
  name: items
  signature: items() -> a set-like object providing a view on D's items
- uid: azure.data.tables.EntityMetadata.keys
  name: keys
  signature: keys() -> a set-like object providing a view on D's keys
- uid: azure.data.tables.EntityMetadata.pop
  name: pop
  summary: 'If the key is not found, return the default if given; otherwise,

    raise a KeyError.'
  signature: pop(k, [d]) -> v, remove specified key and return the corresponding value.
- uid: azure.data.tables.EntityMetadata.popitem
  name: popitem
  summary: 'Remove and return a (key, value) pair as a 2-tuple.


    Pairs are returned in LIFO (last-in, first-out) order.

    Raises KeyError if the dict is empty.'
  signature: popitem()
- uid: azure.data.tables.EntityMetadata.setdefault
  name: setdefault
  summary: 'Insert key with a value of default if key is not in the dictionary.


    Return the value for key if key is in the dictionary, else default.'
  signature: setdefault(key, default=None, /)
  positionalOnlyParameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.data.tables.EntityMetadata.update
  name: update
  summary: 'If E is present and has a .keys() method, then does:  for k in E: D[k]
    = E[k]

    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] =
    v

    In either case, this is followed by: for k in F:  D[k] = F[k]'
  signature: update([E], **F) -> None.  Update D from dict/iterable E and F.
- uid: azure.data.tables.EntityMetadata.values
  name: values
  signature: values() -> an object providing a view on D's values
attributes:
- uid: azure.data.tables.EntityMetadata.editLink
  name: editLink
  summary: 'The link used to edit/update the entry, if the entity is updatable and
    the odata.id does not represent a URL

    that can be used to edit the entity. This is not returned by default, and only
    returned if full metadata is

    requested.'
  signature: 'editLink: str'
- uid: azure.data.tables.EntityMetadata.etag
  name: etag
  summary: A string representation of the timestamp property. Used to provide optimistic
    concurrency.
  signature: 'etag: str | None'
- uid: azure.data.tables.EntityMetadata.id
  name: id
  summary: 'The entity ID, which is generally the URL to the resource. This is not
    returned by default, and only returned if

    full metadata is requested.'
  signature: 'id: str'
- uid: azure.data.tables.EntityMetadata.timestamp
  name: timestamp
  summary: 'A datetime value that is maintained on the server side to record the time
    an entity was last modified. The Table

    service uses the Timestamp property internally to provide optimistic concurrency.'
  signature: 'timestamp: datetime | None'
- uid: azure.data.tables.EntityMetadata.type
  name: type
  summary: 'The type name of the containing object. This is not returned by default,
    and only returned if full metadata is

    requested.'
  signature: 'type: str'
