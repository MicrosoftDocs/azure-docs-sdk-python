### YamlMime:PythonClass
uid: azure.data.tables.aio.TableClient
name: TableClient
fullName: azure.data.tables.aio.TableClient
module: azure.data.tables.aio
inheritances:
- azure.data.tables.aio._base_client_async.AsyncTablesBaseClient
summary: "A client to interact with a specific Table in an Azure Tables account.\n\
  \nCreate TableClient from a Credential.\n\nAzureSasCredential (azure-core), or an\
  \ AsyncTokenCredential implementation from azure-identity.\n:paramtype credential:\n\
  \n   ~azure.core.credentials.AzureNamedKeyCredential or\n   ~azure.core.credentials.AzureSasCredential\
  \ or\n   ~azure.core.credentials_async.AsyncTokenCredential or None"
constructor:
  syntax: 'TableClient(endpoint: str, table_name: str, *, credential: AzureSasCredential
    | AzureNamedKeyCredential | AsyncTokenCredential | None = None, api_version: str
    | None = None, **kwargs: Any)'
  parameters:
  - name: endpoint
    description: A URL to an Azure Tables account.
    isRequired: true
    types:
    - <xref:str>
  - name: table_name
    description: The table name.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be one of AzureNamedKeyCredential
      (azure-core),'
  - name: api_version
    description: 'Specifies the version of the operation to use for this request.
      Default value

      is "2019-02-02". Note that overriding this default value may result in unsupported
      behavior.'
    types:
    - <xref:str>
variables:
- description: The name of the Tables account.
  name: account_name
  types:
  - <xref:str>
- description: The name of the table.
  name: table_name
  types:
  - <xref:str>
- description: The scheme component in the full URL to the Tables account.
  name: scheme
  types:
  - <xref:str>
- description: The full endpoint URL to this entity, including SAS token if used.
  name: url
  types:
  - <xref:str>
- description: The version of the Storage API used for requests.
  name: api_version
  types:
  - <xref:str>
- description: 'The credentials with which to authenticate. This is optional if the

    account URL already has a SAS token. The value can be one of AzureNamedKeyCredential
    (azure-core),

    AzureSasCredential (azure-core), or a AsyncTokenCredential implementation from
    azure-identity.'
  name: credential
  types:
  - <xref:azure.core.credentials.AzureNamedKeyCredential>
  - <xref:azure.core.credentials.AzureSasCredential>
  - <xref:azure.core.credentials_async.AsyncTokenCredential>
  - <xref:None>
methods:
- uid: azure.data.tables.aio.TableClient.close
  name: close
  summary: 'This method is to close the sockets opened by the client.

    It need not be used when using with a context manager.'
  signature: async close() -> None
- uid: azure.data.tables.aio.TableClient.create_entity
  name: create_entity
  summary: Insert entity in a table.
  signature: 'async create_entity(entity: TableEntity | Mapping[str, Any], **kwargs)
    -> Mapping[str, Any]'
  parameters:
  - name: entity
    description: The properties for the table entity.
    isRequired: true
    types:
    - <xref:azure.data.tables.TableEntity>
    - <xref:typing.Mapping>
  return:
    description: Dictionary mapping operation metadata returned from the service
    types:
    - <xref:dict>[<xref:str>, <xref:typing.Any>]
  exceptions:
  - type: azure.core.exceptions.ResourceExistsError
    description: If the entity already exists
  examples:
  - "Adding an entity to a Table<!--[!code-python[Main](les\\async_samples\\sample_insert_delete_entities_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    39\\\\azure-data-tables-12.5.0\\\\samples\\\\async_samples\\\\sample_insert_delete_entities_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   async with table_client:\n       try:\n           await table_client.create_table()\n\
    \       except HttpResponseError:\n           print(\"Table already exists\")\n\
    \n       try:\n           resp = await table_client.create_entity(entity=self.entity)\n\
    \           print(resp)\n       except ResourceExistsError:\n           print(\"\
    Entity already exists\")\n\n   ````\n"
- uid: azure.data.tables.aio.TableClient.create_table
  name: create_table
  summary: Creates a new table under the given account.
  signature: async create_table(**kwargs) -> TableItem
  return:
    description: A TableItem representing the created table.
    types:
    - <xref:azure.data.tables.TableItem>
  exceptions:
  - type: azure.core.exceptions.ResourceExistsError
    description: If the entity already exists
- uid: azure.data.tables.aio.TableClient.delete_entity
  name: delete_entity
  signature: 'async delete_entity(partition_key: str, row_key: str, *, etag: str |
    None = None, match_condition: MatchConditions | None = None, **kwargs: Any) ->
    None'
- uid: azure.data.tables.aio.TableClient.delete_table
  name: delete_table
  summary: 'Deletes the table under the current account. No error will be raised if

    the given table name is not found.'
  signature: async delete_table(**kwargs) -> None
  return:
    description: None
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Deleting a table from the TableClient object.<!--[!code-python[Main](les\\async_samples\\\
    sample_create_delete_table_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\39\\\\azure-data-tables-12.5.0\\\\samples\\\\async_samples\\\
    \\sample_create_delete_table_async.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   async with TableClient.from_connection_string(\n\
    \       conn_str=self.connection_string, table_name=self.table_name\n   ) as table_client:\n\
    \       await table_client.delete_table()\n       print(f\"Deleted table {table_client.table_name}!\"\
    )\n\n   ````\n"
- uid: azure.data.tables.aio.TableClient.from_connection_string
  name: from_connection_string
  summary: Create TableClient from a Connection string.
  signature: 'from_connection_string(conn_str: str, table_name: str, **kwargs: Any)
    -> TableClient'
  parameters:
  - name: conn_str
    description: A connection string to an Azure Tables account.
    isRequired: true
    types:
    - <xref:str>
  - name: table_name
    description: The table name.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A table client.
    types:
    - <xref:azure.data.tables.TableClient>
  examples:
  - "Creating the TableClient from a connection string.<!--[!code-python[Main](les\\\
    async_samples\\sample_create_client_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\39\\\\azure-data-tables-12.5.0\\\\samples\\\\async_samples\\\
    \\sample_create_client_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.data.tables.aio import TableClient\n\
    \n   async with TableClient.from_connection_string(\n       conn_str=self.connection_string,\
    \ table_name=\"tableName\"\n   ) as table_client:\n       print(f\"Table name:\
    \ {table_client.table_name}\")\n\n   ````\n"
- uid: azure.data.tables.aio.TableClient.from_table_url
  name: from_table_url
  summary: A client to interact with a specific Table.
  signature: 'from_table_url(table_url: str, *, credential: AzureNamedKeyCredential
    | AzureSasCredential | None = None, **kwargs: Any) -> TableClient'
  parameters:
  - name: table_url
    description: The full URI to the table, including SAS token if used.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      table URL already has a SAS token.'
    types:
    - <xref:azure.core.credentials.AzureNamedKeyCredential>
    - <xref:azure.core.credentials.AzureSasCredential>
    - <xref:None>
  return:
    description: A table client.
    types:
    - <xref:azure.data.tables.TableClient>
- uid: azure.data.tables.aio.TableClient.get_entity
  name: get_entity
  summary: Get a single entity in a table.
  signature: 'async get_entity(partition_key: str, row_key: str, *, select: str |
    List[str] | None = None, **kwargs) -> TableEntity'
  parameters:
  - name: partition_key
    description: The partition key of the entity.
    isRequired: true
    types:
    - <xref:str>
  - name: row_key
    description: The row key of the entity.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: select
    description: Specify desired properties of an entity to return.
    types:
    - <xref:str>
    - <xref:list>[<xref:str>]
  return:
    description: Dictionary mapping operation metadata returned from the service
    types:
    - <xref:azure.data.tables.TableEntity>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Getting an entity from PartitionKey and RowKey<!--[!code-python[Main](les\\async_samples\\\
    sample_update_upsert_merge_entities_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\39\\\\azure-data-tables-12.5.0\\\\samples\\\\async_samples\\\
    \\sample_update_upsert_merge_entities_async.py\", \"xml:space\": \"preserve\"\
    , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
    : 1}, \"linenos\": false} -->\n\n````python\n\n   # Get Entity by partition and\
    \ row key\n   got_entity = await table.get_entity(\n       partition_key=my_entity[\"\
    PartitionKey\"], row_key=my_entity[\"RowKey\"]\n   )\n   print(f\"Received entity:\
    \ {got_entity}\")\n\n   ````\n"
- uid: azure.data.tables.aio.TableClient.get_table_access_policy
  name: get_table_access_policy
  summary: 'Retrieves details about any stored access policies specified on the table
    that may be

    used with Shared Access Signatures.'
  signature: async get_table_access_policy(**kwargs) -> Mapping[str, TableAccessPolicy
    | None]
  return:
    description: Dictionary of SignedIdentifiers
    types:
    - <xref:dict>[<xref:str>, <xref:azure.data.tables.TableAccessPolicy>]
    - <xref:dict>[<xref:str>, <xref:None>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.data.tables.aio.TableClient.list_entities
  name: list_entities
  summary: Lists entities in a table.
  signature: 'list_entities(*, results_per_page: int | None = None, select: str |
    List[str] | None = None, **kwargs) -> AsyncItemPaged[TableEntity]'
  keywordOnlyParameters:
  - name: results_per_page
    description: Number of entities returned per service request.
    types:
    - <xref:int>
  - name: select
    description: Specify desired properties of an entity to return.
    types:
    - <xref:str>
    - <xref:list>[<xref:str>]
  return:
    description: An async iterator of <xref:azure.data.tables.TableEntity>
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.data.tables.TableEntity>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Querying entities from a TableClient<!--[!code-python[Main](les\\async_samples\\\
    sample_update_upsert_merge_entities_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\39\\\\azure-data-tables-12.5.0\\\\samples\\\\async_samples\\\
    \\sample_update_upsert_merge_entities_async.py\", \"xml:space\": \"preserve\"\
    , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
    : 1}, \"linenos\": false} -->\n\n````python\n\n   # Query the entities in the\
    \ table\n   i = 0\n   async for entity in table.list_entities():\n       print(f\"\
    Entity #{entity}: {i}\")\n       i += 1\n\n   ````\n"
- uid: azure.data.tables.aio.TableClient.query_entities
  name: query_entities
  summary: Lists entities in a table.
  signature: 'query_entities(query_filter: str, *, results_per_page: int | None =
    None, select: str | List[str] | None = None, parameters: Dict[str, Any] | None
    = None, **kwargs) -> AsyncItemPaged[TableEntity]'
  parameters:
  - name: query_filter
    description: 'Specify a filter to return certain entities.  For more information

      on filter formatting, see the [samples documentation](https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/tables/azure-data-tables/samples#writing-filters).'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: results_per_page
    description: Number of entities returned per service request.
    types:
    - <xref:int>
  - name: select
    description: Specify desired properties of an entity to return.
    types:
    - <xref:str>
    - <xref:list>[<xref:str>]
  - name: parameters
    description: Dictionary for formatting query with additional, user defined parameters
    types:
    - <xref:dict>[<xref:str>, <xref:typing.Any>]
  return:
    description: An async iterator of <xref:azure.data.tables.TableEntity>
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.data.tables.TableEntity>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Querying entities from a TableClient<!--[!code-python[Main](les\\async_samples\\\
    sample_query_table_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\39\\\\azure-data-tables-12.5.0\\\\samples\\\\async_samples\\\
    \\sample_query_table_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   async with TableClient.from_connection_string(self.connection_string,\
    \ self.table_name) as table_client:\n       try:\n           print(\"Basic sample:\"\
    )\n           print(\"Entities with name: marker\")\n           parameters: Dict[str,\
    \ Any] = {\"name\": \"marker\"}\n           name_filter = \"Name eq @name\"\n\
    \           queried_entities = table_client.query_entities(\n               query_filter=name_filter,\
    \ select=[\"Brand\", \"Color\"], parameters=parameters\n           )\n       \
    \    async for entity_chosen in queried_entities:\n               print(entity_chosen)\n\
    \n           print(\"Sample for querying entities with multiple params:\")\n \
    \          print(\"Entities with name: marker and brand: Crayola\")\n        \
    \   parameters = {\"name\": \"marker\", \"brand\": \"Crayola\"}\n           name_filter\
    \ = \"Name eq @name and Brand eq @brand\"\n           queried_entities = table_client.query_entities(\n\
    \               query_filter=name_filter, select=[\"Brand\", \"Color\"], parameters=parameters\n\
    \           )\n           async for entity_chosen in queried_entities:\n     \
    \          print(entity_chosen)\n\n           print(\"Sample for querying entities'\
    \ values:\")\n           print(\"Entities with 25 < Value < 50\")\n          \
    \ parameters = {\"lower\": 25, \"upper\": 50}\n           name_filter = \"Value\
    \ gt @lower and Value lt @upper\"\n           queried_entities = table_client.query_entities(\n\
    \               query_filter=name_filter, select=[\"Value\"], parameters=parameters\n\
    \           )\n           async for entity_chosen in queried_entities:\n     \
    \          print(entity_chosen)\n       except HttpResponseError as e:\n     \
    \      raise\n\n   ````\n"
- uid: azure.data.tables.aio.TableClient.set_table_access_policy
  name: set_table_access_policy
  summary: Sets stored access policies for the table that may be used with Shared
    Access Signatures.
  signature: 'async set_table_access_policy(signed_identifiers: Mapping[str, TableAccessPolicy
    | None], **kwargs) -> None'
  parameters:
  - name: signed_identifiers
    description: Access policies to set for the table
    isRequired: true
    types:
    - <xref:dict>[<xref:str>, <xref:azure.data.tables.TableAccessPolicy>]
  return:
    description: None
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.data.tables.aio.TableClient.submit_transaction
  name: submit_transaction
  summary: 'Commit a list of operations as a single transaction.


    If any one of these operations fails, the entire transaction will be rejected.'
  signature: 'async submit_transaction(operations: Iterable[Tuple[TransactionOperation
    | str, TableEntity | Mapping[str, Any]] | Tuple[TransactionOperation | str, TableEntity
    | Mapping[str, Any], Mapping[str, Any]]] | AsyncIterable[Tuple[TransactionOperation
    | str, TableEntity | Mapping[str, Any]] | Tuple[TransactionOperation | str, TableEntity
    | Mapping[str, Any], Mapping[str, Any]]], **kwargs) -> List[Mapping[str, Any]]'
  parameters:
  - name: operations
    description: "The list of operations to commit in a transaction. This should be\
      \ an iterable\n(or async iterable) of tuples containing an operation name, the\
      \ entity on which to operate,\nand optionally, a dict of additional kwargs for\
      \ that operation. For example:\n\n<!-- literal_block {\"ids\": [], \"classes\"\
      : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\"\
      , \"language\": \"default\", \"force\": false, \"linenos\": false} -->\n\n````default\n\
      \n   - ('upsert', {'PartitionKey': 'A', 'RowKey': 'B'})\n   - ('upsert', {'PartitionKey':\
      \ 'A', 'RowKey': 'B'}, {'mode': UpdateMode.REPLACE})\n   ````"
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:typing.Iterable>[<xref:typing.Tuple>[<xref:str>, <xref:Entity>,
      <xref:typing.Mapping>[<xref:str>, <xref:typing.Any>]]],<xref:typing.AsyncIterable>[<xref:typing.Tuple>[<xref:str>,
      <xref:Entity>, <xref:typing.Mapping>[<xref:str>, <xref:typing.Any>]]]]
  return:
    description: A list of mappings with response metadata for each operation in the
      transaction.
    types:
    - <xref:list>[<xref:typing.Mapping>[<xref:str>, <xref:typing.Any>]]
  exceptions:
  - type: azure.data.tables.TableTransactionError
  examples:
  - "Using transactions to send multiple requests at once<!--[!code-python[Main](les\\\
    async_samples\\sample_batching_async.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\39\\\\azure-data-tables-12.5.0\\\\samples\\\\async_samples\\\
    \\sample_batching_async.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.data.tables.aio import TableClient\n\
    \   from azure.data.tables import TableTransactionError\n   from azure.core.exceptions\
    \ import ResourceExistsError\n\n   self.table_client = TableClient.from_connection_string(\n\
    \       conn_str=self.connection_string, table_name=self.table_name\n   )\n\n\
    \   try:\n       await self.table_client.create_table()\n       print(\"Created\
    \ table\")\n   except ResourceExistsError:\n       print(\"Table already exists\"\
    )\n\n   await self._create_entities()\n\n   operations: List[TransactionOperationType]\
    \ = [\n       (\"create\", self.entity1),\n       (\"delete\", self.entity2),\n\
    \       (\"upsert\", self.entity3),\n       (\"update\", self.entity4, {\"mode\"\
    : \"replace\"}),\n   ]\n   try:\n       await self.table_client.submit_transaction(operations)\n\
    \   except TableTransactionError as e:\n       print(\"There was an error with\
    \ the transaction operation\")\n       print(f\"Error: {e}\")\n\n   ````\n"
- uid: azure.data.tables.aio.TableClient.update_entity
  name: update_entity
  summary: Update entity in a table.
  signature: 'async update_entity(entity: TableEntity | Mapping[str, Any], mode: str
    | UpdateMode = UpdateMode.MERGE, *, etag: str | None = None, match_condition:
    MatchConditions | None = None, **kwargs) -> Mapping[str, Any]'
  parameters:
  - name: entity
    description: The properties for the table entity.
    isRequired: true
    types:
    - <xref:azure.data.tables.TableEntity>
    - <xref:dict>[<xref:str>, <xref:typing.Any>]
  - name: mode
    description: Merge or Replace entity
    isRequired: true
    types:
    - <xref:azure.data.tables.UpdateMode>
  keywordOnlyParameters:
  - name: etag
    description: Etag of the entity
    types:
    - <xref:str>
  - name: match_condition
    description: 'The condition under which to perform the operation.

      Supported values include: MatchConditions.IfNotModified, MatchConditions.Unconditionally.

      The default value is Unconditionally.'
    types:
    - <xref:azure.core.MatchCondition>
  return:
    description: Dictionary of operation metadata returned from service
    types:
    - <xref:dict>[<xref:str>, <xref:typing.Any>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Querying entities from a TableClient<!--[!code-python[Main](les\\async_samples\\\
    sample_update_upsert_merge_entities_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\39\\\\azure-data-tables-12.5.0\\\\samples\\\\async_samples\\\
    \\sample_update_upsert_merge_entities_async.py\", \"xml:space\": \"preserve\"\
    , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
    : 1}, \"linenos\": false} -->\n\n````python\n\n   # Update the entity\n   created[\"\
    text\"] = \"NewMarker\"\n   await table.update_entity(mode=UpdateMode.REPLACE,\
    \ entity=created)\n\n   # Get the replaced entity\n   replaced = await table.get_entity(partition_key=created[\"\
    PartitionKey\"], row_key=created[\"RowKey\"])\n   print(f\"Replaced entity: {replaced}\"\
    )\n\n   # Merge the entity\n   replaced[\"color\"] = \"Blue\"\n   await table.update_entity(mode=UpdateMode.MERGE,\
    \ entity=replaced)\n\n   # Get the merged entity\n   merged = await table.get_entity(partition_key=replaced[\"\
    PartitionKey\"], row_key=replaced[\"RowKey\"])\n   print(f\"Merged entity: {merged}\"\
    )\n\n   ````\n"
- uid: azure.data.tables.aio.TableClient.upsert_entity
  name: upsert_entity
  summary: Update/Merge or Insert entity into table.
  signature: 'async upsert_entity(entity: TableEntity | Mapping[str, Any], mode: str
    | UpdateMode = UpdateMode.MERGE, **kwargs) -> Mapping[str, Any]'
  parameters:
  - name: entity
    description: The properties for the table entity.
    isRequired: true
    types:
    - <xref:azure.data.tables.TableEntity>
    - <xref:dict>[<xref:str>, <xref:typing.Any>]
  - name: mode
    description: Merge or Replace entity
    isRequired: true
    types:
    - <xref:azure.data.tables.UpdateMode>
  return:
    description: Dictionary mapping operation metadata returned from the service
    types:
    - <xref:dict>[<xref:str>, <xref:typing.Any>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Update/Merge or Insert an entity into a table<!--[!code-python[Main](les\\async_samples\\\
    sample_update_upsert_merge_entities_async.py )]-->\n\n<!-- literal_block {\"ids\"\
    : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\39\\\\azure-data-tables-12.5.0\\\\samples\\\\async_samples\\\
    \\sample_update_upsert_merge_entities_async.py\", \"xml:space\": \"preserve\"\
    , \"force\": false, \"language\": \"python\", \"highlight_args\": {\"linenostart\"\
    : 1}, \"linenos\": false} -->\n\n````python\n\n   # Try Replace and insert on\
    \ fail\n   insert_entity = await table.upsert_entity(mode=UpdateMode.REPLACE,\
    \ entity=entity1)\n   print(f\"Inserted entity: {insert_entity}\")\n\n   created[\"\
    text\"] = \"NewMarker\"\n   merged_entity = await table.upsert_entity(mode=UpdateMode.MERGE,\
    \ entity=entity)\n   print(f\"Merged entity: {merged_entity}\")\n\n   ````\n"
attributes:
- uid: azure.data.tables.aio.TableClient.api_version
  name: api_version
  summary: The version of the Storage API used for requests.
  return:
    description: The Storage API version.
- uid: azure.data.tables.aio.TableClient.url
  name: url
  summary: 'The full endpoint URL to this entity, including SAS token if used.


    This could be either the primary endpoint,

    or the secondary endpoint depending on the current <xref:azure.data.tables.aio.location_mode>.'
  return:
    description: The full endpoint URL including SAS token if used.
    types:
    - <xref:str>
