### YamlMime:PythonClass
uid: azure.mgmt.support.aio.operations.SupportTicketsOperations
name: SupportTicketsOperations
fullName: azure.mgmt.support.aio.operations.SupportTicketsOperations
module: azure.mgmt.support.aio.operations
inheritances:
- builtins.object
summary: 'SupportTicketsOperations async operations.


  You should not instantiate this class directly. Instead, you should create a Client
  instance that

  instantiates it for you and attaches it as an attribute.'
constructor:
  syntax: SupportTicketsOperations(client, config, serializer, deserializer)
  parameters:
  - name: client
    description: Client for service requests.
    isRequired: true
  - name: config
    description: Configuration of service client.
    isRequired: true
  - name: serializer
    description: An object model serializer.
    isRequired: true
  - name: deserializer
    description: An object model deserializer.
    isRequired: true
variables:
- description: Alias to model classes used in this operation group.
  name: models
methods:
- uid: azure.mgmt.support.aio.operations.SupportTicketsOperations.begin_create
  name: begin_create
  summary: 'Creates a new support ticket for Subscription and Service limits (Quota),
    Technical, Billing,

    and Subscription Management issues for the specified subscription. Learn the [prerequisites](https://aka.ms/supportAPI)
    required to create a support

    ticket.:code:*<br/>*`<br/>`Always call the Services and ProblemClassifications
    API to get

    the most recent set of services and problem categories required for support ticket

    creation.:code:`<br/>`>>:code:`<br/>`Adding attachments is not currently supported
    via the API.

    To add a file to an existing support ticket, visit the `Manage support ticket

    <https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest>`_<<

    page in the Azure portal, select the support ticket, and use the file upload control
    to add a

    new file.:code:*<br/>*`<br/>`Providing consent to share diagnostic information
    with Azure

    support is currently not supported via the API. The Azure support engineer working
    on your

    ticket will reach out to you for consent if your issue requires gathering diagnostic

    information from your Azure resources.:code:`<br/>``<br/>`**Creating a support
    ticket

    for on-behalf-of**: Include *x-ms-authorization-auxiliary* header to provide an
    auxiliary

    token as per [documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant).
    The primary token will be from the tenant for

    whom a support ticket is being raised against the subscription, i.e. Cloud solution
    provider

    (CSP) customer tenant. The auxiliary token will be from the Cloud solution provider
    (CSP)

    partner tenant.'
  signature: 'begin_create(support_ticket_name: str, create_support_ticket_parameters:
    azure.mgmt.support.models._models_py3.SupportTicketDetails, **kwargs) -> azure.core.polling._async_poller.AsyncLROPoller[azure.mgmt.support.models._models_py3.SupportTicketDetails]'
  parameters:
  - name: support_ticket_name
    description: Support ticket name.
    isRequired: true
    types:
    - <xref:str>
  - name: create_support_ticket_parameters
    description: Support ticket request payload.
    isRequired: true
    types:
    - <xref:azure.mgmt.support.models.SupportTicketDetails>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  - name: continuation_token
    description: A continuation token to restart a poller from a saved state.
    types:
    - <xref:str>
  - name: polling
    description: 'True for ARMPolling, False for no polling, or a

      polling object for personal polling strategy'
    types:
    - <xref:bool>
    - <xref:azure.core.polling.AsyncPollingMethod>
  - name: polling_interval
    description: Default waiting time between two polls for LRO operations if no Retry-After
      header is present.
    types:
    - <xref:int>
  return:
    description: An instance of AsyncLROPoller that returns either SupportTicketDetails
      or the result of cls(response)
    types:
    - <xref:azure.core.polling.AsyncLROPoller>[<xref:azure.mgmt.support.models.SupportTicketDetails>]
  exceptions:
  - description: ''
    type: azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.support.aio.operations.SupportTicketsOperations.check_name_availability
  name: check_name_availability
  summary: 'Check the availability of a resource name. This API should be used to
    check the uniqueness of

    the name for support ticket creation for the selected subscription.'
  signature: 'check_name_availability(check_name_availability_input: azure.mgmt.support.models._models_py3.CheckNameAvailabilityInput,
    **kwargs) -> azure.mgmt.support.models._models_py3.CheckNameAvailabilityOutput'
  parameters:
  - name: check_name_availability_input
    description: Input to check.
    isRequired: true
    types:
    - <xref:azure.mgmt.support.models.CheckNameAvailabilityInput>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: CheckNameAvailabilityOutput, or the result of cls(response)
    types:
    - <xref:azure.mgmt.support.models.CheckNameAvailabilityOutput>
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.support.aio.operations.SupportTicketsOperations.get
  name: get
  summary: 'Get ticket details for an Azure subscription. Support ticket data is available
    for 18 months

    after ticket creation. If a ticket was created more than 18 months ago, a request
    for data

    might cause an error.'
  signature: 'get(support_ticket_name: str, **kwargs) -> azure.mgmt.support.models._models_py3.SupportTicketDetails'
  parameters:
  - name: support_ticket_name
    description: Support ticket name.
    isRequired: true
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: SupportTicketDetails, or the result of cls(response)
    types:
    - <xref:azure.mgmt.support.models.SupportTicketDetails>
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.support.aio.operations.SupportTicketsOperations.list
  name: list
  summary: 'Lists all the support tickets for an Azure subscription. You can also
    filter the support

    tickets by *Status* or *CreatedDate* using the $filter parameter. Output will
    be a paged result

    with *nextLink*, using which you can retrieve the next set of support tickets.

    `<br/>`:code:>>`<<<br/>`Support ticket data is available for 18 months after ticket
    creation.

    If a ticket was created more than 18 months ago, a request for data might cause
    an error.'
  signature: 'list(top: Optional[int] = None, filter: Optional[str] = None, **kwargs)
    -> AsyncIterable[azure.mgmt.support.models._models_py3.SupportTicketsListResult]'
  parameters:
  - name: top
    description: The number of values to return in the collection. Default is 25 and
      max is 100.
    defaultValue: None
    types:
    - <xref:int>
  - name: filter
    description: 'The filter to apply on the operation. We support ''odata v4.0''
      filter semantics.

      [Learn more](https://docs.microsoft.com/odata/concepts/queryoptions-overview).
      *Status*

      filter can only be used with Equals (''eq'') operator. For *CreatedDate* filter,
      the supported

      operators are Greater Than (''gt'') and Greater Than or Equals (''ge''). When
      using both filters,

      combine them using the logical ''AND''.'
    defaultValue: None
    types:
    - <xref:str>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: An iterator like instance of either SupportTicketsListResult or the
      result of cls(response)
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.mgmt.support.models.SupportTicketsListResult>]
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
- uid: azure.mgmt.support.aio.operations.SupportTicketsOperations.update
  name: update
  summary: 'This API allows you to update the severity level, ticket status, and your
    contact information

    in the support ticket.:code:*<br/>*`<br/>`Note: The severity levels cannot be
    changed if

    a support ticket is actively being worked upon by an Azure support engineer. In
    such a case,

    contact your support engineer to request severity update by adding a new communication
    using

    the Communications API.:code:`<br/>`:code:>>`<<<br/>`Changing the ticket status
    to *closed* is

    allowed only on an unassigned case. When an engineer is actively working on the
    ticket, send

    your ticket closure request by sending a note to your engineer.'
  signature: 'update(support_ticket_name: str, update_support_ticket: azure.mgmt.support.models._models_py3.UpdateSupportTicket,
    **kwargs) -> azure.mgmt.support.models._models_py3.SupportTicketDetails'
  parameters:
  - name: support_ticket_name
    description: Support ticket name.
    isRequired: true
    types:
    - <xref:str>
  - name: update_support_ticket
    description: UpdateSupportTicket object.
    isRequired: true
    types:
    - <xref:azure.mgmt.support.models.UpdateSupportTicket>
  - name: cls
    description: A custom type or function that will be passed the direct response
    types:
    - <xref:callable>
  return:
    description: SupportTicketDetails, or the result of cls(response)
    types:
    - <xref:azure.mgmt.support.models.SupportTicketDetails>
  exceptions:
  - type: ~azure.core.exceptions.HttpResponseError
attributes:
- uid: azure.mgmt.support.aio.operations.SupportTicketsOperations.models
  name: models
  signature: models = <module 'azure.mgmt.support.models' from 'C:\\hostedtoolcache\\windows\\Python\\3.9.9\\x64\\lib\\site-packages\\azure\\mgmt\\support\\models\\__init__.py'>
