### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.synapse.aio.operations_async.WorkspaceAclOperations.get_access_control_info
  - azure.synapse.aio.operations_async.WorkspaceAclOperations.set_workspace_administrators
  - azure.synapse.aio.operations_async.WorkspaceAclOperations.models
  class: azure.synapse.aio.operations_async.WorkspaceAclOperations
  fullName: azure.synapse.aio.operations_async.WorkspaceAclOperations
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.synapse.aio.operations_async
  name: WorkspaceAclOperations
  summary: 'WorkspaceAclOperations async operations.


    You should not instantiate directly this class, but create a Client instance that
    will create it for you and attach it as attribute.'
  syntax:
    content: WorkspaceAclOperations(client, config, serializer, deserializer) -> None
    parameters:
    - description: Client for service requests.
      id: client
    - description: Configuration of service client.
      id: config
    - description: An object model serializer.
      id: serializer
    - description: An object model deserializer.
      id: deserializer
    variables:
    - description: Alias to model classes used in this operation group.
      id: models
  type: class
  uid: azure.synapse.aio.operations_async.WorkspaceAclOperations
- class: azure.synapse.aio.operations_async.WorkspaceAclOperations
  fullName: azure.synapse.aio.operations_async.WorkspaceAclOperations.get_access_control_info
  langs:
  - python
  module: azure.synapse.aio.operations_async
  name: 'get_access_control_info(workspace_name: str, artifact_name: typing.Union[str,
    NoneType] = None, **kwargs) -> azure.synapse.models._models_py3.WorkspaceAccessControlResponse'
  namewithoutparameters: get_access_control_info
  summary: Get access control info.
  syntax:
    content: 'get_access_control_info(workspace_name: str, artifact_name: typing.Union[str,
      NoneType] = None, **kwargs) -> azure.synapse.models._models_py3.WorkspaceAccessControlResponse'
    parameters:
    - description: The name of the workspace to execute operations on.
      id: workspace_name
      isRequired: true
      type:
      - str
    - description: ''
      id: artifact_name
      isRequired: true
      type:
      - str
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: WorkspaceAccessControlResponse or the result of cls(response)
      type:
      - azure.synapse.models.WorkspaceAccessControlResponse
  type: method
  uid: azure.synapse.aio.operations_async.WorkspaceAclOperations.get_access_control_info
- class: azure.synapse.aio.operations_async.WorkspaceAclOperations
  fullName: azure.synapse.aio.operations_async.WorkspaceAclOperations.set_workspace_administrators
  langs:
  - python
  module: azure.synapse.aio.operations_async
  name: 'set_workspace_administrators(workspace_name: str, administrators: typing.Union[typing.List[str],
    NoneType] = None, **kwargs) -> azure.synapse.models._models_py3.WorkspaceAccessControlResponse'
  namewithoutparameters: set_workspace_administrators
  summary: Replace Admins of the Workspace.
  syntax:
    content: 'set_workspace_administrators(workspace_name: str, administrators: typing.Union[typing.List[str],
      NoneType] = None, **kwargs) -> azure.synapse.models._models_py3.WorkspaceAccessControlResponse'
    parameters:
    - description: The name of the workspace to execute operations on.
      id: workspace_name
      isRequired: true
      type:
      - str
    - description: ''
      id: administrators
      isRequired: true
      type:
      - list[str]
    - description: A custom type or function that will be passed the direct response
      id: cls
      isRequired: true
      type:
      - callable
    return:
      description: WorkspaceAccessControlResponse or the result of cls(response)
      type:
      - azure.synapse.models.WorkspaceAccessControlResponse
  type: method
  uid: azure.synapse.aio.operations_async.WorkspaceAclOperations.set_workspace_administrators
- class: azure.synapse.aio.operations_async.WorkspaceAclOperations
  fullName: azure.synapse.aio.operations_async.WorkspaceAclOperations.models
  langs:
  - python
  module: azure.synapse.aio.operations_async
  name: models
  syntax:
    content: models = <module 'azure.synapse.models' from 'c:\\hostedtoolcache\\windows\\python\\3.6.8\\x64\\lib\\site-packages\\azure\\synapse\\models\\__init__.py'>
  type: attribute
  uid: azure.synapse.aio.operations_async.WorkspaceAclOperations.models
references:
- fullName: azure.synapse.aio.operations_async.WorkspaceAclOperations.get_access_control_info
  isExternal: false
  name: 'get_access_control_info(workspace_name: str, artifact_name: typing.Union[str,
    NoneType] = None, **kwargs) -> azure.synapse.models._models_py3.WorkspaceAccessControlResponse'
  parent: azure.synapse.aio.operations_async.WorkspaceAclOperations
  uid: azure.synapse.aio.operations_async.WorkspaceAclOperations.get_access_control_info
- fullName: azure.synapse.aio.operations_async.WorkspaceAclOperations.set_workspace_administrators
  isExternal: false
  name: 'set_workspace_administrators(workspace_name: str, administrators: typing.Union[typing.List[str],
    NoneType] = None, **kwargs) -> azure.synapse.models._models_py3.WorkspaceAccessControlResponse'
  parent: azure.synapse.aio.operations_async.WorkspaceAclOperations
  uid: azure.synapse.aio.operations_async.WorkspaceAclOperations.set_workspace_administrators
- fullName: azure.synapse.aio.operations_async.WorkspaceAclOperations.models
  isExternal: false
  name: models
  parent: azure.synapse.aio.operations_async.WorkspaceAclOperations
  uid: azure.synapse.aio.operations_async.WorkspaceAclOperations.models
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
