### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.servicebusservice.ServiceBusService.create_event_hub
  - azure.servicebus.servicebusservice.ServiceBusService.create_queue
  - azure.servicebus.servicebusservice.ServiceBusService.create_rule
  - azure.servicebus.servicebusservice.ServiceBusService.create_subscription
  - azure.servicebus.servicebusservice.ServiceBusService.create_topic
  - azure.servicebus.servicebusservice.ServiceBusService.delete_event_hub
  - azure.servicebus.servicebusservice.ServiceBusService.delete_queue
  - azure.servicebus.servicebusservice.ServiceBusService.delete_queue_message
  - azure.servicebus.servicebusservice.ServiceBusService.delete_rule
  - azure.servicebus.servicebusservice.ServiceBusService.delete_subscription
  - azure.servicebus.servicebusservice.ServiceBusService.delete_subscription_message
  - azure.servicebus.servicebusservice.ServiceBusService.delete_topic
  - azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_queue_name
  - azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_subscription_name
  - azure.servicebus.servicebusservice.ServiceBusService.get_event_hub
  - azure.servicebus.servicebusservice.ServiceBusService.get_queue
  - azure.servicebus.servicebusservice.ServiceBusService.get_rule
  - azure.servicebus.servicebusservice.ServiceBusService.get_subscription
  - azure.servicebus.servicebusservice.ServiceBusService.get_topic
  - azure.servicebus.servicebusservice.ServiceBusService.list_queues
  - azure.servicebus.servicebusservice.ServiceBusService.list_rules
  - azure.servicebus.servicebusservice.ServiceBusService.list_subscriptions
  - azure.servicebus.servicebusservice.ServiceBusService.list_topics
  - azure.servicebus.servicebusservice.ServiceBusService.peek_lock_queue_message
  - azure.servicebus.servicebusservice.ServiceBusService.peek_lock_subscription_message
  - azure.servicebus.servicebusservice.ServiceBusService.read_delete_queue_message
  - azure.servicebus.servicebusservice.ServiceBusService.read_delete_subscription_message
  - azure.servicebus.servicebusservice.ServiceBusService.receive_queue_message
  - azure.servicebus.servicebusservice.ServiceBusService.receive_subscription_message
  - azure.servicebus.servicebusservice.ServiceBusService.renew_lock_queue_message
  - azure.servicebus.servicebusservice.ServiceBusService.renew_lock_subscription_message
  - azure.servicebus.servicebusservice.ServiceBusService.send_event
  - azure.servicebus.servicebusservice.ServiceBusService.send_queue_message
  - azure.servicebus.servicebusservice.ServiceBusService.send_queue_message_batch
  - azure.servicebus.servicebusservice.ServiceBusService.send_topic_message
  - azure.servicebus.servicebusservice.ServiceBusService.send_topic_message_batch
  - azure.servicebus.servicebusservice.ServiceBusService.set_proxy
  - azure.servicebus.servicebusservice.ServiceBusService.unlock_queue_message
  - azure.servicebus.servicebusservice.ServiceBusService.unlock_subscription_message
  - azure.servicebus.servicebusservice.ServiceBusService.update_event_hub
  - azure.servicebus.servicebusservice.ServiceBusService.with_filter
  class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: ServiceBusService
  source:
    id: ServiceBusService
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 78
  summary: '











































    '
  syntax:
    content: ServiceBusService(service_namespace=None, account_key=None, issuer=None,
      x_ms_version='2011-06-01', host_base='.servicebus.windows.net', shared_access_key_name=None,
      shared_access_key_value=None, authentication=None, timeout=65, request_session=None)
  type: class
  uid: azure.servicebus.servicebusservice.ServiceBusService
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.create_event_hub
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: create_event_hub
  source:
    id: create_event_hub
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 1097
  summary: "Creates a new Event Hub.\n\nhub_name:\n   Name of event hub.\n\nhub:\n\
    \   Optional. Event hub properties. Instance of EventHub class.\n\nhub.message_retention_in_days:\n\
    \   Number of days to retain the events for this Event Hub.\n\n\nhub.status: Status\
    \ of the Event Hub (enabled or disabled).\nhub.user_metadata: User metadata.\n\
    hub.partition_count: Number of shards on the Event Hub.\nfail_on_exist:\n\n\n\
    \   Specify whether to throw an exception when the event hub exists.\n"
  syntax:
    content: create_event_hub(hub_name, hub=None, fail_on_exist=False)
    parameters:
    - id: self
    - id: hub_name
    - defaultValue: None
      id: hub
    - defaultValue: 'False'
      id: fail_on_exist
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_event_hub
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.create_queue
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: create_queue
  source:
    id: create_queue
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 230
  summary: "Creates a new queue. Once created, this queue's resource manifest is\n\
    immutable.\n\nqueue_name:\n   Name of the queue to create.\n\nqueue:\n   Queue\
    \ object to create.\n\nfail_on_exist:\n   Specify whether to throw an exception\
    \ when the queue exists.\n"
  syntax:
    content: create_queue(queue_name, queue=None, fail_on_exist=False)
    parameters:
    - id: self
    - id: queue_name
    - defaultValue: None
      id: queue
    - defaultValue: 'False'
      id: fail_on_exist
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_queue
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.create_rule
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: create_rule
  source:
    id: create_rule
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 414
  summary: "Creates a new rule. Once created, this rule's resource manifest is\nimmutable.\n\
    \ntopic_name:\n   Name of the topic.\n\nsubscription_name:\n   Name of the subscription.\n\
    \nrule_name:\n   Name of the rule.\n\nfail_on_exist:\n   Specify whether to throw\
    \ an exception when the rule exists.\n"
  syntax:
    content: create_rule(topic_name, subscription_name, rule_name, rule=None, fail_on_exist=False)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - id: rule_name
    - defaultValue: None
      id: rule
    - defaultValue: 'False'
      id: fail_on_exist
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_rule
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.create_subscription
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: create_subscription
  source:
    id: create_subscription
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 539
  summary: "Creates a new subscription. Once created, this subscription resource\n\
    manifest is immutable.\n\ntopic_name:\n   Name of the topic.\n\nsubscription_name:\n\
    \   Name of the subscription.\n\nfail_on_exist:\n   Specify whether throw exception\
    \ when subscription exists.\n"
  syntax:
    content: create_subscription(topic_name, subscription_name, subscription=None,
      fail_on_exist=False)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - defaultValue: None
      id: subscription
    - defaultValue: 'False'
      id: fail_on_exist
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_subscription
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.create_topic
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: create_topic
  source:
    id: create_topic
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 322
  summary: "Creates a new topic. Once created, this topic resource manifest is\nimmutable.\n\
    \ntopic_name:\n   Name of the topic to create.\n\ntopic:\n   Topic object to create.\n\
    \nfail_on_exist:\n   Specify whether to throw an exception when the topic exists.\n"
  syntax:
    content: create_topic(topic_name, topic=None, fail_on_exist=False)
    parameters:
    - id: self
    - id: topic_name
    - defaultValue: None
      id: topic
    - defaultValue: 'False'
      id: fail_on_exist
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_topic
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_event_hub
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: delete_event_hub
  source:
    id: delete_event_hub
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 1156
  summary: "Deletes an Event Hub. This operation will also remove all associated\n\
    state.\n\nhub_name:\n   Name of the event hub to delete.\n\nfail_not_exist:\n\
    \   Specify whether to throw an exception if the event hub doesn't exist.\n"
  syntax:
    content: delete_event_hub(hub_name, fail_not_exist=False)
    parameters:
    - id: self
    - id: hub_name
    - defaultValue: 'False'
      id: fail_not_exist
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_event_hub
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_queue
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: delete_queue
  source:
    id: delete_queue
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 261
  summary: "Deletes an existing queue. This operation will also remove all\nassociated\
    \ state including messages in the queue.\n\nqueue_name:\n   Name of the queue\
    \ to delete.\n\nfail_not_exist:\n   Specify whether to throw an exception if the\
    \ queue doesn't exist.\n"
  syntax:
    content: delete_queue(queue_name, fail_not_exist=False)
    parameters:
    - id: self
    - id: queue_name
    - defaultValue: 'False'
      id: fail_not_exist
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_queue
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_queue_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: delete_queue_message
  source:
    id: delete_queue_message
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 1027
  summary: "Completes processing on a locked message and delete it from the queue.\n\
    This operation should only be called after processing a previously\nlocked message\
    \ is successful to maintain At-Least-Once delivery\nassurances.\n\nqueue_name:\n\
    \   Name of the queue.\n\nsequence_number:\n   The sequence number of the message\
    \ to be deleted as returned in\n   BrokerProperties['SequenceNumber'] by the Peek\
    \ Message operation.\n\nlock_token:\n   The ID of the lock as returned by the\
    \ Peek Message operation in\n   BrokerProperties['LockToken']\n"
  syntax:
    content: delete_queue_message(queue_name, sequence_number, lock_token)
    parameters:
    - id: self
    - id: queue_name
    - id: sequence_number
    - id: lock_token
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_queue_message
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_rule
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: delete_rule
  source:
    id: delete_rule
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 452
  summary: "Deletes an existing rule.\n\ntopic_name:\n   Name of the topic.\n\nsubscription_name:\n\
    \   Name of the subscription.\n\nrule_name:\n   Name of the rule to delete.  DEFAULT_RULE_NAME=$Default.\n\
    \   Use DEFAULT_RULE_NAME to delete default rule for the subscription.\n\nfail_not_exist:\n\
    \   Specify whether throw exception when rule doesn't exist.\n"
  syntax:
    content: delete_rule(topic_name, subscription_name, rule_name, fail_not_exist=False)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - id: rule_name
    - defaultValue: 'False'
      id: fail_not_exist
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_rule
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: delete_subscription
  source:
    id: delete_subscription
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 574
  summary: "Deletes an existing subscription.\n\ntopic_name:\n   Name of the topic.\n\
    \nsubscription_name:\n   Name of the subscription to delete.\n\nfail_not_exist:\n\
    \   Specify whether to throw an exception when the subscription\n   doesn't exist.\n"
  syntax:
    content: delete_subscription(topic_name, subscription_name, fail_not_exist=False)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - defaultValue: 'False'
      id: fail_not_exist
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: delete_subscription_message
  source:
    id: delete_subscription_message
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 833
  summary: "Completes processing on a locked message and delete it from the\nsubscription.\
    \ This operation should only be called after processing a\npreviously locked message\
    \ is successful to maintain At-Least-Once\ndelivery assurances.\n\ntopic_name:\n\
    \   Name of the topic.\n\nsubscription_name:\n   Name of the subscription.\n\n\
    sequence_number:\n   The sequence number of the message to be deleted as returned\
    \ in\n   BrokerProperties['SequenceNumber'] by the Peek Message operation.\n\n\
    lock_token:\n   The ID of the lock as returned by the Peek Message operation in\n\
    \   BrokerProperties['LockToken']\n"
  syntax:
    content: delete_subscription_message(topic_name, subscription_name, sequence_number,
      lock_token)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - id: sequence_number
    - id: lock_token
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription_message
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_topic
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: delete_topic
  source:
    id: delete_topic
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 353
  summary: "Deletes an existing topic. This operation will also remove all\nassociated\
    \ state including associated subscriptions.\n\ntopic_name:\n   Name of the topic\
    \ to delete.\n\nfail_not_exist:\n   Specify whether throw exception when topic\
    \ doesn't exist.\n"
  syntax:
    content: delete_topic(topic_name, fail_not_exist=False)
    parameters:
    - id: self
    - id: topic_name
    - defaultValue: 'False'
      id: fail_not_exist
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_topic
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_queue_name
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: format_dead_letter_queue_name
  source:
    id: format_dead_letter_queue_name
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 157
  summary: 'Get the dead letter name of this queue

    '
  syntax:
    content: format_dead_letter_queue_name(queue_name)
    parameters:
    - id: queue_name
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_queue_name
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_subscription_name
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: format_dead_letter_subscription_name
  source:
    id: format_dead_letter_subscription_name
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 162
  summary: 'Get the dead letter name of this subscription

    '
  syntax:
    content: format_dead_letter_subscription_name(subscription_name)
    parameters:
    - id: subscription_name
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_subscription_name
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.get_event_hub
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: get_event_hub
  source:
    id: get_event_hub
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 1184
  summary: "Retrieves an existing event hub.\n\nhub_name:\n   Name of the event hub.\n"
  syntax:
    content: get_event_hub(hub_name)
    parameters:
    - id: self
    - id: hub_name
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_event_hub
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.get_queue
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: get_queue
  source:
    id: get_queue
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 289
  summary: "Retrieves an existing queue.\n\nqueue_name:\n   Name of the queue.\n"
  syntax:
    content: get_queue(queue_name)
    parameters:
    - id: self
    - id: queue_name
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_queue
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.get_rule
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: get_rule
  source:
    id: get_rule
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 489
  summary: "Retrieves the description for the specified rule.\n\ntopic_name:\n   Name\
    \ of the topic.\n\nsubscription_name:\n   Name of the subscription.\n\nrule_name:\n\
    \   Name of the rule.\n"
  syntax:
    content: get_rule(topic_name, subscription_name, rule_name)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - id: rule_name
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_rule
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.get_subscription
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: get_subscription
  source:
    id: get_subscription
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 607
  summary: "Gets an existing subscription.\n\ntopic_name:\n   Name of the topic.\n\
    \nsubscription_name:\n   Name of the subscription.\n"
  syntax:
    content: get_subscription(topic_name, subscription_name)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_subscription
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.get_topic
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: get_topic
  source:
    id: get_topic
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 381
  summary: "Retrieves the description for the specified topic.\n\ntopic_name:\n  \
    \ Name of the topic.\n"
  syntax:
    content: get_topic(topic_name)
    parameters:
    - id: self
    - id: topic_name
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_topic
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.list_queues
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: list_queues
  source:
    id: list_queues
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 307
  summary: 'Enumerates the queues in the service namespace.

    '
  syntax:
    content: list_queues()
    parameters:
    - id: self
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_queues
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.list_rules
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: list_rules
  source:
    id: list_rules
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 515
  summary: "Retrieves the rules that exist under the specified subscription.\n\ntopic_name:\n\
    \   Name of the topic.\n\nsubscription_name:\n   Name of the subscription.\n"
  syntax:
    content: list_rules(topic_name, subscription_name)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_rules
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.list_subscriptions
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: list_subscriptions
  source:
    id: list_subscriptions
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 629
  summary: "Retrieves the subscriptions in the specified topic.\n\ntopic_name:\n \
    \  Name of the topic.\n"
  syntax:
    content: list_subscriptions(topic_name)
    parameters:
    - id: self
    - id: topic_name
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_subscriptions
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.list_topics
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: list_topics
  source:
    id: list_topics
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 399
  summary: 'Retrieves the topics in the service namespace.

    '
  syntax:
    content: list_topics()
    parameters:
    - id: self
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_topics
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_queue_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: peek_lock_queue_message
  source:
    id: peek_lock_queue_message
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 917
  summary: "Automically retrieves and locks a message from a queue for processing.\n\
    The message is guaranteed not to be delivered to other receivers (on\nthe same\
    \ subscription only) during the lock duration period specified\nin the queue description.\
    \ Once the lock expires, the message will be\navailable to other receivers. In\
    \ order to complete processing of the\nmessage, the receiver should issue a delete\
    \ command with the lock ID\nreceived from this operation. To abandon processing\
    \ of the message and\nunlock it for other receivers, an Unlock Message command\
    \ should be\nissued, or the lock duration period can expire.\n\nqueue_name:\n\
    \   Name of the queue.\n\ntimeout:\n   Optional. The timeout parameter is expressed\
    \ in seconds.\n"
  syntax:
    content: peek_lock_queue_message(queue_name, timeout='60')
    parameters:
    - id: self
    - id: queue_name
    - defaultValue: '60'
      id: timeout
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_queue_message
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_subscription_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: peek_lock_subscription_message
  source:
    id: peek_lock_subscription_message
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 698
  summary: "This operation is used to atomically retrieve and lock a message for\n\
    processing. The message is guaranteed not to be delivered to other\nreceivers\
    \ during the lock duration period specified in buffer\ndescription. Once the lock\
    \ expires, the message will be available to\nother receivers (on the same subscription\
    \ only) during the lock\nduration period specified in the topic description. Once\
    \ the lock\nexpires, the message will be available to other receivers. In order\
    \ to\ncomplete processing of the message, the receiver should issue a delete\n\
    command with the lock ID received from this operation. To abandon\nprocessing\
    \ of the message and unlock it for other receivers, an Unlock\nMessage command\
    \ should be issued, or the lock duration period can\nexpire.\n\ntopic_name:\n\
    \   Name of the topic.\n\nsubscription_name:\n   Name of the subscription.\n\n\
    timeout:\n   Optional. The timeout parameter is expressed in seconds.\n"
  syntax:
    content: peek_lock_subscription_message(topic_name, subscription_name, timeout='60')
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - defaultValue: '60'
      id: timeout
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_subscription_message
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.read_delete_queue_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: read_delete_queue_message
  source:
    id: read_delete_queue_message
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 1003
  summary: "Reads and deletes a message from a queue as an atomic operation. This\n\
    operation should be used when a best-effort guarantee is sufficient\nfor an application;\
    \ that is, using this operation it is possible for\nmessages to be lost if processing\
    \ fails.\n\nqueue_name:\n   Name of the queue.\n\ntimeout:\n   Optional. The timeout\
    \ parameter is expressed in seconds.\n"
  syntax:
    content: read_delete_queue_message(queue_name, timeout='60')
    parameters:
    - id: self
    - id: queue_name
    - defaultValue: '60'
      id: timeout
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.read_delete_queue_message
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.read_delete_subscription_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: read_delete_subscription_message
  source:
    id: read_delete_subscription_message
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 803
  summary: "Read and delete a message from a subscription as an atomic operation.\n\
    This operation should be used when a best-effort guarantee is\nsufficient for\
    \ an application; that is, using this operation it is\npossible for messages to\
    \ be lost if processing fails.\n\ntopic_name:\n   Name of the topic.\n\nsubscription_name:\n\
    \   Name of the subscription.\n\ntimeout:\n   Optional. The timeout parameter\
    \ is expressed in seconds.\n"
  syntax:
    content: read_delete_subscription_message(topic_name, subscription_name, timeout='60')
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - defaultValue: '60'
      id: timeout
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.read_delete_subscription_message
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.receive_queue_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: receive_queue_message
  source:
    id: receive_queue_message
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 1056
  summary: "Receive a message from a queue for processing.\n\nqueue_name:\n   Name\
    \ of the queue.\n\npeek_lock:\n   Optional. True to retrieve and lock the message.\
    \ False to read and\n   delete the message. Default is True (lock).\n\ntimeout:\n\
    \   Optional. The timeout parameter is expressed in seconds.\n"
  syntax:
    content: receive_queue_message(queue_name, peek_lock=True, timeout=60)
    parameters:
    - id: self
    - id: queue_name
    - defaultValue: 'True'
      id: peek_lock
    - defaultValue: '60'
      id: timeout
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.receive_queue_message
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.receive_subscription_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: receive_subscription_message
  source:
    id: receive_subscription_message
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 1073
  summary: "Receive a message from a subscription for processing.\n\ntopic_name:\n\
    \   Name of the topic.\n\nsubscription_name:\n   Name of the subscription.\n\n\
    peek_lock:\n   Optional. True to retrieve and lock the message. False to read\
    \ and\n   delete the message. Default is True (lock).\n\ntimeout:\n   Optional.\
    \ The timeout parameter is expressed in seconds.\n"
  syntax:
    content: receive_subscription_message(topic_name, subscription_name, peek_lock=True,
      timeout=60)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - defaultValue: 'True'
      id: peek_lock
    - defaultValue: '60'
      id: timeout
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.receive_subscription_message
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_queue_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: renew_lock_queue_message
  source:
    id: renew_lock_queue_message
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 975
  summary: "Renew lock on an already locked message on a given\nqueue. A message must\
    \ have first been locked by a\nreceiver before this operation is called.\n\nqueue_name:\n\
    \   Name of the queue.\n\nsequence_number:\n   The sequence number of the message\
    \ to be unlocked as returned in\n   BrokerProperties['SequenceNumber'] by the\
    \ Peek Message operation.\n\nlock_token:\n   The ID of the lock as returned by\
    \ the Peek Message operation in\n   BrokerProperties['LockToken']\n"
  syntax:
    content: renew_lock_queue_message(queue_name, sequence_number, lock_token)
    parameters:
    - id: self
    - id: queue_name
    - id: sequence_number
    - id: lock_token
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_queue_message
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_subscription_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: renew_lock_subscription_message
  source:
    id: renew_lock_subscription_message
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 770
  summary: "Renew the lock on an already locked message on a given\nsubscription.\
    \ A message must have first been locked by a\nreceiver before this operation is\
    \ called.\n\ntopic_name:\n   Name of the topic.\n\nsubscription_name:\n   Name\
    \ of the subscription.\n\nsequence_number:\n   The sequence number of the message\
    \ to be unlocked as returned in\n   BrokerProperties['SequenceNumber'] by the\
    \ Peek Message operation.\n\nlock_token:\n   The ID of the lock as returned by\
    \ the Peek Message operation in\n   BrokerProperties['LockToken']\n"
  syntax:
    content: renew_lock_subscription_message(topic_name, subscription_name, sequence_number,
      lock_token)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - id: sequence_number
    - id: lock_token
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_subscription_message
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.send_event
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: send_event
  source:
    id: send_event
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 1202
  summary: 'Sends a new message event to an Event Hub.

    '
  syntax:
    content: send_event(hub_name, message, device_id=None, broker_properties=None)
    parameters:
    - id: self
    - id: hub_name
    - id: message
    - defaultValue: None
      id: device_id
    - defaultValue: None
      id: broker_properties
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_event
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: send_queue_message
  source:
    id: send_queue_message
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 867
  summary: "Sends a message into the specified queue. The limit to the number of\n\
    messages which may be present in the queue is governed by the message\nsize the\
    \ MaxTopicSizeInMegaBytes. If this message will cause the queue\nto exceed its\
    \ quota, a quota exceeded error is returned and the\nmessage will be rejected.\n\
    \nqueue_name:\n   Name of the queue.\n\nmessage:\n   Message object containing\
    \ message body and properties.\n"
  syntax:
    content: send_queue_message(queue_name, message=None)
    parameters:
    - id: self
    - id: queue_name
    - defaultValue: None
      id: message
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message_batch
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: send_queue_message_batch
  source:
    id: send_queue_message_batch
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 892
  summary: "Sends a batch of messages into the specified queue. The limit to the number\
    \ of\nmessages which may be present in the topic is governed by the message\n\
    size the MaxTopicSizeInMegaBytes. If this message will cause the queue\nto exceed\
    \ its quota, a quota exceeded error is returned and the\nmessage will be rejected.\n\
    \nqueue_name:\n   Name of the queue.\n\nmessages:\n   List of message objects\
    \ containing message body and properties.\n"
  syntax:
    content: send_queue_message_batch(queue_name, messages=None)
    parameters:
    - id: self
    - id: queue_name
    - defaultValue: None
      id: messages
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message_batch
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: send_topic_message
  source:
    id: send_topic_message
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 648
  summary: "Enqueues a message into the specified topic. The limit to the number\n\
    of messages which may be present in the topic is governed by the\nmessage size\
    \ in MaxTopicSizeInBytes. If this message causes the topic\nto exceed its quota,\
    \ a quota exceeded error is returned and the\nmessage will be rejected.\n\ntopic_name:\n\
    \   Name of the topic.\n\nmessage:\n   Message object containing message body\
    \ and properties.\n"
  syntax:
    content: send_topic_message(topic_name, message=None)
    parameters:
    - id: self
    - id: topic_name
    - defaultValue: None
      id: message
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message_batch
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: send_topic_message_batch
  source:
    id: send_topic_message_batch
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 673
  summary: "Sends a batch of messages into the specified topic. The limit to the number\
    \ of\nmessages which may be present in the topic is governed by the message\n\
    size the MaxTopicSizeInMegaBytes. If this message will cause the topic\nto exceed\
    \ its quota, a quota exceeded error is returned and the\nmessage will be rejected.\n\
    \ntopic_name:\n   Name of the topic.\n\nmessages:\n   List of message objects\
    \ containing message body and properties.\n"
  syntax:
    content: send_topic_message_batch(topic_name, messages=None)
    parameters:
    - id: self
    - id: topic_name
    - defaultValue: None
      id: messages
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message_batch
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.set_proxy
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: set_proxy
  source:
    id: set_proxy
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 207
  summary: "Sets the proxy server host and port for the HTTP CONNECT Tunnelling.\n\
    \nhost:\n   Address of the proxy. Ex: '192.168.0.100'\n\nport:\n   Port of the\
    \ proxy. Ex: 6000\n\nuser:\n   User for proxy authorization.\n\npassword:\n  \
    \ Password for proxy authorization.\n"
  syntax:
    content: set_proxy(host, port, user=None, password=None)
    parameters:
    - id: self
    - id: host
    - id: port
    - defaultValue: None
      id: user
    - defaultValue: None
      id: password
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.set_proxy
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.unlock_queue_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: unlock_queue_message
  source:
    id: unlock_queue_message
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 946
  summary: "Unlocks a message for processing by other receivers on a given\nqueue.\
    \ This operation deletes the lock object, causing the\nmessage to be unlocked.\
    \ A message must have first been locked by a\nreceiver before this operation is\
    \ called.\n\nqueue_name:\n   Name of the queue.\n\nsequence_number:\n   The sequence\
    \ number of the message to be unlocked as returned in\n   BrokerProperties['SequenceNumber']\
    \ by the Peek Message operation.\n\nlock_token:\n   The ID of the lock as returned\
    \ by the Peek Message operation in\n   BrokerProperties['LockToken']\n"
  syntax:
    content: unlock_queue_message(queue_name, sequence_number, lock_token)
    parameters:
    - id: self
    - id: queue_name
    - id: sequence_number
    - id: lock_token
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.unlock_queue_message
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.unlock_subscription_message
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: unlock_subscription_message
  source:
    id: unlock_subscription_message
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 736
  summary: "Unlock a message for processing by other receivers on a given\nsubscription.\
    \ This operation deletes the lock object, causing the\nmessage to be unlocked.\
    \ A message must have first been locked by a\nreceiver before this operation is\
    \ called.\n\ntopic_name:\n   Name of the topic.\n\nsubscription_name:\n   Name\
    \ of the subscription.\n\nsequence_number:\n   The sequence number of the message\
    \ to be unlocked as returned in\n   BrokerProperties['SequenceNumber'] by the\
    \ Peek Message operation.\n\nlock_token:\n   The ID of the lock as returned by\
    \ the Peek Message operation in\n   BrokerProperties['LockToken']\n"
  syntax:
    content: unlock_subscription_message(topic_name, subscription_name, sequence_number,
      lock_token)
    parameters:
    - id: self
    - id: topic_name
    - id: subscription_name
    - id: sequence_number
    - id: lock_token
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.unlock_subscription_message
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.update_event_hub
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: update_event_hub
  source:
    id: update_event_hub
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 1132
  summary: "Updates an Event Hub.\n\nhub_name:\n   Name of event hub.\n\nhub:\n  \
    \ Optional. Event hub properties. Instance of EventHub class.\n\nhub.message_retention_in_days:\n\
    \   Number of days to retain the events for this Event Hub.\n"
  syntax:
    content: update_event_hub(hub_name, hub=None)
    parameters:
    - id: self
    - id: hub_name
    - defaultValue: None
      id: hub
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.update_event_hub
- class: azure.servicebus.servicebusservice.ServiceBusService
  fullName: azure.servicebus.servicebusservice.ServiceBusService.with_filter
  langs:
  - python
  module: azure.servicebus.servicebusservice
  name: with_filter
  source:
    id: with_filter
    path: azure-servicebus\azure\servicebus\servicebusservice.py
    remote:
      branch: master
      path: azure-servicebus\azure\servicebus\servicebusservice.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 186
  summary: 'Returns a new service which will process requests with the specified

    filter.  Filtering operations can include logging, automatic retrying,

    etc...  The filter is a lambda which receives the HTTPRequest and

    another lambda.  The filter can perform any pre-processing on the

    request, pass it off to the next lambda, and then perform any

    post-processing on the response.

    '
  syntax:
    content: with_filter(filter)
    parameters:
    - id: self
    - id: filter
  type: method
  uid: azure.servicebus.servicebusservice.ServiceBusService.with_filter
references:
- fullName: azure.servicebus.servicebusservice.ServiceBusService.create_event_hub
  isExternal: false
  name: create_event_hub
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_event_hub
- fullName: azure.servicebus.servicebusservice.ServiceBusService.create_queue
  isExternal: false
  name: create_queue
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_queue
- fullName: azure.servicebus.servicebusservice.ServiceBusService.create_rule
  isExternal: false
  name: create_rule
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_rule
- fullName: azure.servicebus.servicebusservice.ServiceBusService.create_subscription
  isExternal: false
  name: create_subscription
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_subscription
- fullName: azure.servicebus.servicebusservice.ServiceBusService.create_topic
  isExternal: false
  name: create_topic
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.create_topic
- fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_event_hub
  isExternal: false
  name: delete_event_hub
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_event_hub
- fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_queue
  isExternal: false
  name: delete_queue
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_queue
- fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_queue_message
  isExternal: false
  name: delete_queue_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_queue_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_rule
  isExternal: false
  name: delete_rule
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_rule
- fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription
  isExternal: false
  name: delete_subscription
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription
- fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription_message
  isExternal: false
  name: delete_subscription_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_subscription_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.delete_topic
  isExternal: false
  name: delete_topic
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.delete_topic
- fullName: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_queue_name
  isExternal: false
  name: format_dead_letter_queue_name
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_queue_name
- fullName: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_subscription_name
  isExternal: false
  name: format_dead_letter_subscription_name
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.format_dead_letter_subscription_name
- fullName: azure.servicebus.servicebusservice.ServiceBusService.get_event_hub
  isExternal: false
  name: get_event_hub
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_event_hub
- fullName: azure.servicebus.servicebusservice.ServiceBusService.get_queue
  isExternal: false
  name: get_queue
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_queue
- fullName: azure.servicebus.servicebusservice.ServiceBusService.get_rule
  isExternal: false
  name: get_rule
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_rule
- fullName: azure.servicebus.servicebusservice.ServiceBusService.get_subscription
  isExternal: false
  name: get_subscription
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_subscription
- fullName: azure.servicebus.servicebusservice.ServiceBusService.get_topic
  isExternal: false
  name: get_topic
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.get_topic
- fullName: azure.servicebus.servicebusservice.ServiceBusService.list_queues
  isExternal: false
  name: list_queues
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_queues
- fullName: azure.servicebus.servicebusservice.ServiceBusService.list_rules
  isExternal: false
  name: list_rules
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_rules
- fullName: azure.servicebus.servicebusservice.ServiceBusService.list_subscriptions
  isExternal: false
  name: list_subscriptions
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_subscriptions
- fullName: azure.servicebus.servicebusservice.ServiceBusService.list_topics
  isExternal: false
  name: list_topics
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.list_topics
- fullName: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_queue_message
  isExternal: false
  name: peek_lock_queue_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_queue_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_subscription_message
  isExternal: false
  name: peek_lock_subscription_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.peek_lock_subscription_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.read_delete_queue_message
  isExternal: false
  name: read_delete_queue_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.read_delete_queue_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.read_delete_subscription_message
  isExternal: false
  name: read_delete_subscription_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.read_delete_subscription_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.receive_queue_message
  isExternal: false
  name: receive_queue_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.receive_queue_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.receive_subscription_message
  isExternal: false
  name: receive_subscription_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.receive_subscription_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_queue_message
  isExternal: false
  name: renew_lock_queue_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_queue_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_subscription_message
  isExternal: false
  name: renew_lock_subscription_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.renew_lock_subscription_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.send_event
  isExternal: false
  name: send_event
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_event
- fullName: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message
  isExternal: false
  name: send_queue_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message_batch
  isExternal: false
  name: send_queue_message_batch
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_queue_message_batch
- fullName: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message
  isExternal: false
  name: send_topic_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message_batch
  isExternal: false
  name: send_topic_message_batch
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.send_topic_message_batch
- fullName: azure.servicebus.servicebusservice.ServiceBusService.set_proxy
  isExternal: false
  name: set_proxy
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.set_proxy
- fullName: azure.servicebus.servicebusservice.ServiceBusService.unlock_queue_message
  isExternal: false
  name: unlock_queue_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.unlock_queue_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.unlock_subscription_message
  isExternal: false
  name: unlock_subscription_message
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.unlock_subscription_message
- fullName: azure.servicebus.servicebusservice.ServiceBusService.update_event_hub
  isExternal: false
  name: update_event_hub
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.update_event_hub
- fullName: azure.servicebus.servicebusservice.ServiceBusService.with_filter
  isExternal: false
  name: with_filter
  parent: azure.servicebus.servicebusservice.ServiceBusService
  uid: azure.servicebus.servicebusservice.ServiceBusService.with_filter
