### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.core.pipeline.transport.AioHttpTransport.close
  - azure.core.pipeline.transport.AioHttpTransport.open
  - azure.core.pipeline.transport.AioHttpTransport.send
  class: azure.core.pipeline.transport.AioHttpTransport
  example:
  - "Asynchronous transport with aiohttp.<!--[!code-python[Main](les\\test_example_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\102\\\\azure-core-1.8.1\\\\samples\\\\test_example_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.core.pipeline.transport\
    \ import AioHttpTransport\n\n   async with AsyncPipeline(AioHttpTransport(), policies=policies)\
    \ as pipeline:\n       response = await pipeline.run(request)\n\n   ````\n"
  fullName: azure.core.pipeline.transport.AioHttpTransport
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.core.pipeline.transport._base_async.AbstractAsyncContextManager
    - inheritance:
      - type: builtins.object
      type: abc.ABC
    - inheritance:
      - type: builtins.object
      type: typing.Generic
    type: azure.core.pipeline.transport._base_async.AsyncHttpTransport
  langs:
  - python
  module: azure.core.pipeline.transport
  name: AioHttpTransport
  summary: 'AioHttp HTTP sender implementation.


    Fully asynchronous implementation using the aiohttp library.'
  syntax:
    content: AioHttpTransport(*, session=None, loop=None, session_owner=True, **kwargs)
    parameters:
    - description: The client session.
      id: session
    - description: The event loop.
      id: loop
    - description: Session owner. Defaults True.
      id: session_owner
      type:
      - bool
    - description: Uses proxy settings from environment. Defaults to True.
      id: use_env_settings
      type:
      - bool
  type: class
  uid: azure.core.pipeline.transport.AioHttpTransport
- class: azure.core.pipeline.transport.AioHttpTransport
  fullName: azure.core.pipeline.transport.AioHttpTransport.close
  langs:
  - python
  module: azure.core.pipeline.transport
  name: close()
  namewithoutparameters: close
  summary: Closes the connection.
  syntax:
    content: close()
    parameters: []
  type: method
  uid: azure.core.pipeline.transport.AioHttpTransport.close
- class: azure.core.pipeline.transport.AioHttpTransport
  fullName: azure.core.pipeline.transport.AioHttpTransport.open
  langs:
  - python
  module: azure.core.pipeline.transport
  name: open()
  namewithoutparameters: open
  summary: Opens the connection.
  syntax:
    content: open()
    parameters: []
  type: method
  uid: azure.core.pipeline.transport.AioHttpTransport.open
- class: azure.core.pipeline.transport.AioHttpTransport
  fullName: azure.core.pipeline.transport.AioHttpTransport.send
  langs:
  - python
  module: azure.core.pipeline.transport
  name: 'send(request: azure.core.pipeline.transport._base.HttpRequest, **config:
    typing.Any) -> typing.Union[azure.core.pipeline.transport._base_async.AsyncHttpResponse,
    NoneType]'
  namewithoutparameters: send
  summary: 'Send the request using this HTTP sender.


    Will pre-load the body into memory to be available with a sync method.

    Pass stream=True to avoid this behavior.'
  syntax:
    content: 'send(request: azure.core.pipeline.transport._base.HttpRequest, **config:
      typing.Any) -> typing.Union[azure.core.pipeline.transport._base_async.AsyncHttpResponse,
      NoneType]'
    parameters:
    - description: The HttpRequest object
      id: request
      isRequired: true
      type:
      - azure.core.pipeline.transport.HttpRequest
    - description: Any keyword arguments
      id: config
      isRequired: true
    - description: Defaults to False.
      id: stream
      isRequired: true
      type:
      - bool
    - description: dict of proxy to used based on protocol. Proxy is a dict (protocol,
        url)
      id: proxies
      isRequired: true
      type:
      - dict
    - description: will define the proxy to use all the time
      id: proxy
      isRequired: true
      type:
      - str
    return:
      description: The AsyncHttpResponse
      type:
      - azure.core.pipeline.transport.AsyncHttpResponse
  type: method
  uid: azure.core.pipeline.transport.AioHttpTransport.send
references:
- fullName: azure.core.pipeline.transport.AioHttpTransport.close
  isExternal: false
  name: close()
  parent: azure.core.pipeline.transport.AioHttpTransport
  uid: azure.core.pipeline.transport.AioHttpTransport.close
- fullName: azure.core.pipeline.transport.AioHttpTransport.open
  isExternal: false
  name: open()
  parent: azure.core.pipeline.transport.AioHttpTransport
  uid: azure.core.pipeline.transport.AioHttpTransport.open
- fullName: azure.core.pipeline.transport.AioHttpTransport.send
  isExternal: false
  name: 'send(request: azure.core.pipeline.transport._base.HttpRequest, **config:
    typing.Any) -> typing.Union[azure.core.pipeline.transport._base_async.AsyncHttpResponse,
    NoneType]'
  parent: azure.core.pipeline.transport.AioHttpTransport
  uid: azure.core.pipeline.transport.AioHttpTransport.send
