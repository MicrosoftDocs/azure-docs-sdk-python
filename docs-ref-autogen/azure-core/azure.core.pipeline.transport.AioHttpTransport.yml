### YamlMime:PythonClass
uid: azure.core.pipeline.transport.AioHttpTransport
name: AioHttpTransport
fullName: azure.core.pipeline.transport.AioHttpTransport
module: azure.core.pipeline.transport
inheritances:
- azure.core.pipeline.transport._base_async.AsyncHttpTransport
summary: 'AioHttp HTTP sender implementation.


  Fully asynchronous implementation using the aiohttp library.'
constructor:
  syntax: 'AioHttpTransport(*, session: ClientSession | None = None, loop=None, session_owner:
    bool = True, **kwargs)'
  keywordOnlyParameters:
  - name: session
    description: The client session.
    types:
    - <xref:aiohttp.ClientSession>
  - name: session_owner
    description: Session owner. Defaults True.
    defaultValue: 'True'
    types:
    - <xref:bool>
  - name: use_env_settings
    description: Uses proxy settings from environment. Defaults to True.
    types:
    - <xref:bool>
  - name: loop
    isRequired: true
examples:
- "Asynchronous transport with aiohttp.<!--[!code-python[Main](les\\test_example_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
  \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\36\\\\azure-core-1.30.1\\\
  \\samples\\\\test_example_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
  \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
  : false} -->\n\n````python\n\n   from azure.core.pipeline.transport import AioHttpTransport\n\
  \n   async with AsyncPipeline(AioHttpTransport(), policies=policies) as pipeline:\n\
  \       response = await pipeline.run(request)\n\n   ````\n"
methods:
- uid: azure.core.pipeline.transport.AioHttpTransport.close
  name: close
  summary: Closes the connection.
  signature: async close()
- uid: azure.core.pipeline.transport.AioHttpTransport.open
  name: open
  summary: Opens the connection.
  signature: async open()
- uid: azure.core.pipeline.transport.AioHttpTransport.send
  name: send
  summary: 'Send the request using this HTTP sender.


    Will pre-load the body into memory to be available with a sync method.

    Pass stream=True to avoid this behavior.'
  signature: 'async send(request: HttpRequest, *, stream: bool = False, proxies: MutableMapping[str,
    str] | None = None, **config: Any) -> AsyncHttpResponse'
  parameters:
  - name: request
    description: The HttpRequest object
    isRequired: true
    types:
    - <xref:azure.core.rest.HttpRequest>
  keywordOnlyParameters:
  - name: stream
    description: Defaults to False.
    types:
    - <xref:bool>
  - name: proxies
    description: dict of proxy to used based on protocol. Proxy is a dict (protocol,
      url)
    types:
    - <xref:typing.MutableMapping>
  return:
    description: The AsyncHttpResponse
    types:
    - <xref:azure.core.rest.AsyncHttpResponse>
- uid: azure.core.pipeline.transport.AioHttpTransport.sleep
  name: sleep
  summary: 'Sleep for the specified duration.


    You should always ask the transport to sleep, and not call directly

    the stdlib. This is mostly important in async, as the transport

    may not use asyncio but other implementation like trio and they their own

    way to sleep, but to keep design

    consistent, it''s cleaner to always ask the transport to sleep and let the transport

    implementor decide how to do it.

    By default, this method will use "asyncio", and don''t need to be overridden

    if your transport does too.'
  signature: 'async sleep(duration: float) -> None'
  parameters:
  - name: duration
    description: The number of seconds to sleep.
    isRequired: true
    types:
    - <xref:float>
