### YamlMime:PythonClass
uid: azure.core.utils.CaseInsensitiveDict
name: CaseInsensitiveDict
fullName: azure.core.utils.CaseInsensitiveDict
module: azure.core.utils
inheritances:
- collections.abc.MutableMapping
- typing.Generic
summary: 'NOTE: This implementation is heavily inspired from the case insensitive
  dictionary from the requests library.

  Thank you !!

  Case insensitive dictionary implementation.

  The keys are expected to be strings and will be stored in lower case.

  case_insensitive_dict = CaseInsensitiveDict()

  case_insensitive_dict[''Key''] = ''some_value''

  case_insensitive_dict[''key''] == ''some_value'' #True'
constructor:
  syntax: 'CaseInsensitiveDict(data: Mapping[str, Any] | Iterable[Tuple[str, Any]]
    | None = None, **kwargs: Any)'
  parameters:
  - name: data
    description: Initial data to store in the dictionary.
    defaultValue: None
    types:
    - <xref:typing.Mapping>[<xref:str>, <xref:typing.Any>]
    - <xref:typing.Iterable>[<xref:typing.Tuple>[<xref:str>, <xref:typing.Any>]]
methods:
- uid: azure.core.utils.CaseInsensitiveDict.clear
  name: clear
  signature: clear() -> None.  Remove all items from D.
- uid: azure.core.utils.CaseInsensitiveDict.copy
  name: copy
  signature: copy() -> CaseInsensitiveDict
- uid: azure.core.utils.CaseInsensitiveDict.get
  name: get
  signature: get(k, [d]) -> D[k] if k in D, else d.  d defaults to None.
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.core.utils.CaseInsensitiveDict.items
  name: items
  signature: items() -> a set-like object providing a view on D's items
- uid: azure.core.utils.CaseInsensitiveDict.keys
  name: keys
  signature: keys() -> a set-like object providing a view on D's keys
- uid: azure.core.utils.CaseInsensitiveDict.lowerkey_items
  name: lowerkey_items
  signature: lowerkey_items() -> Iterator[Tuple[str, Any]]
- uid: azure.core.utils.CaseInsensitiveDict.pop
  name: pop
  summary: If key is not found, d is returned if given, otherwise KeyError is raised.
  signature: pop(k, [d]) -> v, remove specified key and return the corresponding value.
  parameters:
  - name: key
    isRequired: true
  - name: default
- uid: azure.core.utils.CaseInsensitiveDict.popitem
  name: popitem
  summary: as a 2-tuple; but raise KeyError if D is empty.
  signature: popitem() -> (k, v), remove and return some (key, value) pair
- uid: azure.core.utils.CaseInsensitiveDict.setdefault
  name: setdefault
  signature: setdefault(k, [d]) -> D.get(k,d), also set D[k]=d if k not in D
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.core.utils.CaseInsensitiveDict.update
  name: update
  summary: 'If E present and has a .keys() method, does:     for k in E: D[k] = E[k]

    If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v

    In either case, this is followed by: for k, v in F.items(): D[k] = v'
  signature: update([E], **F) -> None.  Update D from mapping/iterable E and F.
  positionalOnlyParameters:
  - name: other
    defaultValue: ()
- uid: azure.core.utils.CaseInsensitiveDict.values
  name: values
  signature: values() -> an object providing a view on D's values
