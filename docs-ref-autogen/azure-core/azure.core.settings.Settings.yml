### YamlMime:PythonClass
uid: azure.core.settings.Settings
name: Settings
fullName: azure.core.settings.Settings
module: azure.core.settings
inheritances:
- builtins.object
summary: "Settings for globally used Azure configuration values.\n\nYou probably don't\
  \ want to create an instance of this class, but call the singleton instance:\n\n\
  <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
  \ \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
  : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
  \   from azure.core.settings import settings\n   settings.log_level = log_level\
  \ = logging.DEBUG\n   ````\n\nThe following methods are searched in order for a\
  \ setting:\n\n4. immediate values\n3. previously user-set value\n2. environment\
  \ variable\n1. system setting\n0. implicit default\n\nAn implicit default is (optionally)\
  \ defined by the setting attribute itself.\n\nA system setting value can be obtained\
  \ from registries or other OS configuration\nfor settings that support that method.\n\
  \nAn environment variable value is obtained from `os.environ`\n\nUser-set values\
  \ many be specified by assigning to the attribute:\n\n<!-- literal_block {\"ids\"\
  : [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\"\
  : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\":\
  \ {}, \"linenos\": false} -->\n\n````python\n\n   settings.log_level = log_level\
  \ = logging.DEBUG\n   ````\n\nImmediate values are (optionally) provided when the\
  \ setting is retrieved:\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
  names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"\
  force\": false, \"language\": \"python\", \"highlight_args\": {}, \"linenos\": false}\
  \ -->\n\n````python\n\n   settings.log_level(logging.DEBUG())\n   ````\n\nImmediate\
  \ values are most often useful to provide from optional arguments\nto client functions.\
  \ If the argument value is not None, it will be returned\nas-is. Otherwise, the\
  \ setting searches other methods according to the\nprecedence rules.\n\nImmutable\
  \ configuration snapshots can be created with the following methods:\n\n* settings.defaults\
  \ returns the base defaultsvalues , ignoring any environment or system or user settings\
  \ \n\n* settings.current returns the current computation of settings including prioritization\
  \ of configuration sources, unless defaults_only is set to True (in which case the\
  \ result is identical to settings.defaults) \n\n* settings.config can be called\
  \ with specific values to override what settings.current would provide \n\n<!--\
  \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
  \ \"backrefs\": [], \"xml:space\": \"preserve\", \"force\": false, \"language\"\
  : \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\n````python\n\n\
  \   # return current settings with log level overridden\n   settings.config(log_level=logging.DEBUG)\n\
  \   ````\n\n```\n\n>>> import logging\n>>> from azure.core.settings import settings\n\
  >>> settings.log_level = logging.DEBUG\n>>> settings.log_level()\n10\n```\n\n```\n\
  \n>>> settings.log_level(logging.WARN)\n30\n```"
constructor:
  syntax: Settings()
variables:
- description: a log level to use across all Azure client SDKs (AZURE_LOG_LEVEL)
  name: log_level
- description: Whether tracing should be enabled across Azure SDKs (AZURE_TRACING_ENABLED)
  name: tracing_enabled
- description: The tracing implementation to use (AZURE_SDK_TRACING_IMPLEMENTATION)
  name: tracing_implementation
methods:
- uid: azure.core.settings.Settings.config
  name: config
  summary: "Return the currently computed settings, with values overridden by parameter\
    \ values.\n\nExamples:\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
    names\": [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\",\
    \ \"force\": false, \"language\": \"python\", \"highlight_args\": {}, \"linenos\"\
    : false} -->\n\n````python\n\n   # return current settings with log level overridden\n\
    \   settings.config(log_level=logging.DEBUG)\n   ````"
  signature: config(**kwargs)
  parameters:
  - name: kwargs
    description: Settings to override
    types:
    - <xref:dict>
  return:
    description: The current values for all settings, with values overridden by parameter
      values
    types:
    - <xref:namedtuple>
attributes:
- uid: azure.core.settings.Settings.current
  name: current
  summary: Return the current values for all settings.
  return:
    description: The current values for all settings
    types:
    - <xref:namedtuple>
- uid: azure.core.settings.Settings.defaults
  name: defaults
  summary: Return implicit default values for all settings, ignoring environment and
    system.
  return:
    description: The implicit default values for all settings
    types:
    - <xref:namedtuple>
- uid: azure.core.settings.Settings.defaults_only
  name: defaults_only
  summary: Whether to ignore environment and system settings and return only base
    default values.
  return:
    description: Whether to ignore environment and system settings and return only
      base default values.
    types:
    - <xref:bool>
- uid: azure.core.settings.Settings.log_level
  name: log_level
  summary: 'Return a value for a global setting according to configuration precedence.


    The following methods are searched in order for the setting:


    4. immediate values

    3. previously user-set value

    2. environment variable

    1. system setting

    0. implicit default


    If a value cannot be determined, a RuntimeError is raised.


    The `env_var` argument specifies the name of an environment to check for

    setting values, e.g. `"AZURE_LOG_LEVEL"`.


    The optional `system_hook` can be used to specify a function that will

    attempt to look up a value for the setting from system-wide configurations.


    The optional `default` argument specified an implicit default value for

    the setting that is returned if no other methods provide a value.


    A `convert` argument may be provided to convert values before they are

    returned. For instance to concert log levels in environment variables

    to `logging` module values.'
- uid: azure.core.settings.Settings.tracing_enabled
  name: tracing_enabled
  summary: 'Return a value for a global setting according to configuration precedence.


    The following methods are searched in order for the setting:


    4. immediate values

    3. previously user-set value

    2. environment variable

    1. system setting

    0. implicit default


    If a value cannot be determined, a RuntimeError is raised.


    The `env_var` argument specifies the name of an environment to check for

    setting values, e.g. `"AZURE_LOG_LEVEL"`.


    The optional `system_hook` can be used to specify a function that will

    attempt to look up a value for the setting from system-wide configurations.


    The optional `default` argument specified an implicit default value for

    the setting that is returned if no other methods provide a value.


    A `convert` argument may be provided to convert values before they are

    returned. For instance to concert log levels in environment variables

    to `logging` module values.'
- uid: azure.core.settings.Settings.tracing_implementation
  name: tracing_implementation
  summary: 'Return a value for a global setting according to configuration precedence.


    The following methods are searched in order for the setting:


    4. immediate values

    3. previously user-set value

    2. environment variable

    1. system setting

    0. implicit default


    If a value cannot be determined, a RuntimeError is raised.


    The `env_var` argument specifies the name of an environment to check for

    setting values, e.g. `"AZURE_LOG_LEVEL"`.


    The optional `system_hook` can be used to specify a function that will

    attempt to look up a value for the setting from system-wide configurations.


    The optional `default` argument specified an implicit default value for

    the setting that is returned if no other methods provide a value.


    A `convert` argument may be provided to convert values before they are

    returned. For instance to concert log levels in environment variables

    to `logging` module values.'
