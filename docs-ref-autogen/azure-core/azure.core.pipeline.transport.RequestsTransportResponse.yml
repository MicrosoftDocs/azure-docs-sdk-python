### YamlMime:PythonClass
uid: azure.core.pipeline.transport.RequestsTransportResponse
name: RequestsTransportResponse
fullName: azure.core.pipeline.transport.RequestsTransportResponse
module: azure.core.pipeline.transport
inheritances:
- azure.core.pipeline.transport._base.HttpResponse
- azure.core.pipeline.transport._requests_basic._RequestsTransportResponseBase
summary: Streaming of data from the response.
constructor:
  syntax: RequestsTransportResponse(request, requests_response, block_size=None)
  parameters:
  - name: request
    isRequired: true
  - name: requests_response
    isRequired: true
  - name: block_size
    defaultValue: None
methods:
- uid: azure.core.pipeline.transport.RequestsTransportResponse.body
  name: body
  signature: body()
- uid: azure.core.pipeline.transport.RequestsTransportResponse.parts
  name: parts
  summary: Assuming the content-type is multipart/mixed, will return the parts as
    an iterator.
  signature: parts() -> Iterator[HttpResponse]
  return:
    description: The iterator of HttpResponse if request was multipart/mixed
    types:
    - <xref:iterator>[<xref:azure.core.pipeline.transport.HttpResponse>]
  exceptions:
  - type: ValueError
    description: If the content is not multipart/mixed
- uid: azure.core.pipeline.transport.RequestsTransportResponse.raise_for_status
  name: raise_for_status
  summary: 'Raises an HttpResponseError if the response has an error status code.

    If response is good, does nothing.'
  signature: raise_for_status() -> None
- uid: azure.core.pipeline.transport.RequestsTransportResponse.stream_download
  name: stream_download
  summary: Generator for streaming request body data.
  signature: 'stream_download(pipeline: PipelineType, **kwargs) -> Iterator[bytes]'
  parameters:
  - name: pipeline
    description: The pipeline object
    isRequired: true
    types:
    - <xref:azure.core.pipeline.Pipeline>
  return:
    description: The stream of data
    types:
    - <xref:iterator>[<xref:bytes>]
- uid: azure.core.pipeline.transport.RequestsTransportResponse.text
  name: text
  summary: 'Return the whole body as a string.


    If encoding is not provided, mostly rely on requests auto-detection, except

    for BOM, that requests ignores. If we see a UTF8 BOM, we assumes UTF8 unlike requests.'
  signature: 'text(encoding: str | None = None) -> str'
  parameters:
  - name: encoding
    description: The encoding to apply.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: The body as text.
    types:
    - <xref:str>
