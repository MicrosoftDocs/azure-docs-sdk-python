### YamlMime:PythonClass
uid: azure.core.serialization.AzureJSONEncoder
name: AzureJSONEncoder
fullName: azure.core.serialization.AzureJSONEncoder
module: azure.core.serialization
inheritances:
- json.encoder.JSONEncoder
summary: 'A JSON encoder that''s capable of serializing datetime objects and bytes.


  Constructor for JSONEncoder, with sensible defaults.


  If skipkeys is false, then it is a TypeError to attempt

  encoding of keys that are not str, int, float or None.  If

  skipkeys is True, such items are simply skipped.


  If ensure_ascii is true, the output is guaranteed to be str

  objects with all incoming non-ASCII characters escaped.  If

  ensure_ascii is false, the output can contain non-ASCII characters.


  If check_circular is true, then lists, dicts, and custom encoded

  objects will be checked for circular references during encoding to

  prevent an infinite recursion (which would cause an RecursionError).

  Otherwise, no such check takes place.


  If allow_nan is true, then NaN, Infinity, and -Infinity will be

  encoded as such.  This behavior is not JSON specification compliant,

  but is consistent with most JavaScript based encoders and decoders.

  Otherwise, it will be a ValueError to encode such floats.


  If sort_keys is true, then the output of dictionaries will be

  sorted by key; this is useful for regression tests to ensure

  that JSON serializations can be compared on a day-to-day basis.


  If indent is a non-negative integer, then JSON array

  elements and object members will be pretty-printed with that

  indent level.  An indent level of 0 will only insert newlines.

  None is the most compact representation.


  If specified, separators should be an (item_separator, key_separator)

  tuple.  The default is ('', '', '': '') if *indent* is `None` and

  ('','', '': '') otherwise.  To get the most compact JSON representation,

  you should specify ('','', '':'') to eliminate whitespace.


  If specified, default is a function that gets called for objects

  that can''t otherwise be serialized.  It should return a JSON encodable

  version of the object or raise a `TypeError`.'
constructor:
  syntax: AzureJSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True,
    allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)
  keywordOnlyParameters:
  - name: skipkeys
    isRequired: true
  - name: ensure_ascii
    defaultValue: 'True'
  - name: check_circular
    defaultValue: 'True'
  - name: allow_nan
    defaultValue: 'True'
  - name: sort_keys
    isRequired: true
  - name: indent
    isRequired: true
  - name: separators
    isRequired: true
  - name: default
    isRequired: true
methods:
- uid: azure.core.serialization.AzureJSONEncoder.default
  name: default
  signature: 'default(o: Any) -> Any'
  parameters:
  - name: o
    isRequired: true
- uid: azure.core.serialization.AzureJSONEncoder.encode
  name: encode
  summary: 'Return a JSON string representation of a Python data structure.


    ```


    >>> from json.encoder import JSONEncoder

    >>> JSONEncoder().encode({"foo": ["bar", "baz"]})

    ''{"foo": ["bar", "baz"]}''

    ```'
  signature: encode(o)
  parameters:
  - name: o
    isRequired: true
- uid: azure.core.serialization.AzureJSONEncoder.iterencode
  name: iterencode
  summary: "Encode the given object and yield each string\nrepresentation as available.\n\
    \nFor example:\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
    : [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\"\
    : \"default\", \"force\": false, \"linenos\": false} -->\n\n````default\n\n  \
    \ for chunk in JSONEncoder().iterencode(bigobject):\n       mysocket.write(chunk)\n\
    \   ````"
  signature: iterencode(o, _one_shot=False)
  parameters:
  - name: o
    isRequired: true
  - name: _one_shot
    defaultValue: 'False'
attributes:
- uid: azure.core.serialization.AzureJSONEncoder.item_separator
  name: item_separator
  signature: item_separator = ', '
- uid: azure.core.serialization.AzureJSONEncoder.key_separator
  name: key_separator
  signature: 'key_separator = '': '''
