### YamlMime:PythonClass
uid: azure.core.serialization.AzureJSONEncoder
name: AzureJSONEncoder
fullName: azure.core.serialization.AzureJSONEncoder
module: azure.core.serialization
inheritances:
- json.encoder.JSONEncoder
summary: A JSON encoder that's capable of serializing datetime objects and bytes.
constructor:
  syntax: AzureJSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True,
    allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)
methods:
- uid: azure.core.serialization.AzureJSONEncoder.default
  name: default
  summary: "Implement this method in a subclass such that it returns\na serializable\
    \ object for `o`, or calls the base implementation\n(to raise a `TypeError`).\n\
    \nFor example, to support arbitrary iterators, you could\nimplement default like\
    \ this:\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"\
    default\", \"force\": false, \"linenos\": false} -->\n\n````default\n\n   def\
    \ default(self, o):\n       try:\n           iterable = iter(o)\n       except\
    \ TypeError:\n           pass\n       else:\n           return list(iterable)\n\
    \       # Let the base class default method raise the TypeError\n       return\
    \ JSONEncoder.default(self, o)\n   ````"
  signature: default(o)
  parameters:
  - name: o
    isRequired: true
