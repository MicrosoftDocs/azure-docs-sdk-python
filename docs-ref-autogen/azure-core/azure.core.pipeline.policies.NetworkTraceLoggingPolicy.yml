### YamlMime:PythonClass
uid: azure.core.pipeline.policies.NetworkTraceLoggingPolicy
name: NetworkTraceLoggingPolicy
fullName: azure.core.pipeline.policies.NetworkTraceLoggingPolicy
module: azure.core.pipeline.policies
inheritances:
- azure.core.pipeline.policies._base.SansIOHTTPPolicy
summary: 'The logging policy in the pipeline is used to output HTTP network trace
  to the configured logger.


  This accepts both global configuration, and per-request level with "enable_http_logger"'
constructor:
  syntax: 'NetworkTraceLoggingPolicy(logging_enable: bool = False, **kwargs: Any)'
  parameters:
  - name: logging_enable
    description: Use to enable per operation. Defaults to False.
    defaultValue: 'False'
    types:
    - <xref:bool>
examples:
- "Configuring a network trace logging policy.<!--[!code-python[Main](les\\test_example_sansio.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\\
  79\\\\azure-core-1.28.0\\\\samples\\\\test_example_sansio.py\", \"xml:space\": \"\
  preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\": {\"\
  linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.core.pipeline.policies\
  \ import NetworkTraceLoggingPolicy\n   import sys\n   import logging\n\n   # Create\
  \ a logger for the 'azure' SDK\n   logger = logging.getLogger(\"azure\")\n   logger.setLevel(logging.DEBUG)\n\
  \n   # Configure a console output\n   handler = logging.StreamHandler(stream=sys.stdout)\n\
  \   logger.addHandler(handler)\n\n   # Configure a file output\n   file_handler\
  \ = logging.FileHandler(filename)\n   logger.addHandler(file_handler)\n\n   # Enable\
  \ network trace logging. This will be logged at DEBUG level.\n   # By default, logging\
  \ is disabled.\n   logging_policy = NetworkTraceLoggingPolicy()\n   logging_policy.enable_http_logger\
  \ = True\n\n   # The logger can also be enabled per operation.\n   policies.append(logging_policy)\n\
  \   client: PipelineClient[HttpRequest, HttpResponse] = PipelineClient(base_url=url,\
  \ policies=policies)\n   request = HttpRequest(\"GET\", url)\n   pipeline_response\
  \ = client._pipeline.run(request, logging_enable=True)\n\n\n   ````\n"
methods:
- uid: azure.core.pipeline.policies.NetworkTraceLoggingPolicy.on_request
  name: on_request
  summary: Logs HTTP request to the DEBUG logger.
  signature: 'on_request(request: PipelineRequest[HttpRequest | HttpRequest]) -> None'
  parameters:
  - name: request
    description: The PipelineRequest object.
    isRequired: true
    types:
    - <xref:azure.core.pipeline.PipelineRequest>
- uid: azure.core.pipeline.policies.NetworkTraceLoggingPolicy.on_response
  name: on_response
  summary: Logs HTTP response to the DEBUG logger.
  signature: 'on_response(request: PipelineRequest[HttpRequest | HttpRequest], response:
    PipelineResponse[HttpRequest | HttpRequest, _HttpResponseBase | _HttpResponseBase])
    -> None'
  parameters:
  - name: request
    description: The PipelineRequest object.
    isRequired: true
    types:
    - <xref:azure.core.pipeline.PipelineRequest>
  - name: response
    description: The PipelineResponse object.
    isRequired: true
    types:
    - <xref:azure.core.pipeline.PipelineResponse>
