### YamlMime:PythonClass
uid: azure.core.pipeline.transport.RequestsTransport
name: RequestsTransport
fullName: azure.core.pipeline.transport.RequestsTransport
module: azure.core.pipeline.transport
inheritances:
- azure.core.pipeline.transport._base.HttpTransport
summary: 'Implements a basic requests HTTP sender.


  Since requests team recommends to use one session per requests, you should

  not consider this class as thread-safe, since it will use one Session

  per instance.


  In this simple implementation:

  - You provide the configured session if you want to, or a basic session is created.

  - All kwargs received by "send" are sent to session.request directly'
constructor:
  syntax: RequestsTransport(**kwargs)
  keywordOnlyParameters:
  - name: session
    description: Request session to use instead of the default one.
    types:
    - <xref:requests.Session>
  - name: session_owner
    description: Decide if the session provided by user is owned by this transport.
      Default to True.
    types:
    - <xref:bool>
  - name: use_env_settings
    description: Uses proxy settings from environment. Defaults to True.
    types:
    - <xref:bool>
examples:
- "Synchronous transport with Requests.<!--[!code-python[Main](les\\test_example_sync.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
  \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\36\\\\azure-core-1.30.1\\\
  \\samples\\\\test_example_sync.py\", \"xml:space\": \"preserve\", \"force\": false,\
  \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
  : false} -->\n\n````python\n\n   from azure.core.pipeline.transport import RequestsTransport\n\
  \n   with Pipeline(transport=RequestsTransport(), policies=policies) as pipeline:\n\
  \       response = pipeline.run(request)\n\n   ````\n"
methods:
- uid: azure.core.pipeline.transport.RequestsTransport.close
  name: close
  signature: close()
- uid: azure.core.pipeline.transport.RequestsTransport.open
  name: open
  signature: open()
- uid: azure.core.pipeline.transport.RequestsTransport.send
  name: send
  summary: Send request object according to configuration.
  signature: 'send(request: HttpRequest, *, proxies: MutableMapping[str, str] | None
    = None, **kwargs) -> HttpResponse'
  parameters:
  - name: request
    description: The request object to be sent.
    isRequired: true
    types:
    - <xref:azure.core.pipeline.transport.HttpRequest>
  keywordOnlyParameters:
  - name: proxies
    description: will define the proxy to use. Proxy is a dict (protocol, url)
    types:
    - <xref:typing.MutableMapping>
  return:
    description: An HTTPResponse object.
    types:
    - <xref:azure.core.pipeline.transport.HttpResponse>
- uid: azure.core.pipeline.transport.RequestsTransport.sleep
  name: sleep
  summary: 'Sleep for the specified duration.


    You should always ask the transport to sleep, and not call directly

    the stdlib. This is mostly important in async, as the transport

    may not use asyncio but other implementations like trio and they have their own

    way to sleep, but to keep design

    consistent, it''s cleaner to always ask the transport to sleep and let the transport

    implementor decide how to do it.'
  signature: 'sleep(duration: float) -> None'
  parameters:
  - name: duration
    description: The number of seconds to sleep.
    isRequired: true
    types:
    - <xref:float>
