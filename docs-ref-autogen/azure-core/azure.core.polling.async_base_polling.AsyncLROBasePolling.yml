### YamlMime:PythonClass
uid: azure.core.polling.async_base_polling.AsyncLROBasePolling
name: AsyncLROBasePolling
fullName: azure.core.polling.async_base_polling.AsyncLROBasePolling
module: azure.core.polling.async_base_polling
inheritances:
- azure.core.polling.base_polling._SansIOLROBasePolling
- azure.core.polling._async_poller.AsyncPollingMethod
summary: 'A base LRO async poller.


  This assumes a basic flow:

  - I analyze the response to decide the polling approach

  - I poll

  - I ask the final resource depending of the polling approach


  If your polling need are more specific, you could implement a PollingMethod directly'
constructor:
  syntax: 'AsyncLROBasePolling(timeout: float = 30, lro_algorithms: List[LongRunningOperation]
    | None = None, lro_options: Dict[str, Any] | None = None, path_format_arguments:
    Dict[str, str] | None = None, **operation_config: Any)'
  parameters:
  - name: timeout
    defaultValue: '30'
  - name: lro_algorithms
    defaultValue: None
  - name: lro_options
    defaultValue: None
  - name: path_format_arguments
    defaultValue: None
methods:
- uid: azure.core.polling.async_base_polling.AsyncLROBasePolling.request_status
  name: request_status
  summary: 'Do a simple GET to this status link.


    This method re-inject ''x-ms-client-request-id''.'
  signature: 'async request_status(status_link: str) -> PipelineResponse[HttpRequestTypeVar,
    AsyncHttpResponseTypeVar]'
  parameters:
  - name: status_link
    description: URL to poll.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The response of the status request.
    types:
    - <xref:azure.core.pipeline.PipelineResponse>
- uid: azure.core.polling.async_base_polling.AsyncLROBasePolling.run
  name: run
  signature: async run() -> None
- uid: azure.core.polling.async_base_polling.AsyncLROBasePolling.update_status
  name: update_status
  summary: Update the current status of the LRO.
  signature: async update_status()
