### YamlMime:PythonClass
uid: azure.core.credentials_async.AsyncTokenCredential
name: AsyncTokenCredential
fullName: azure.core.credentials_async.AsyncTokenCredential
module: azure.core.credentials_async
inheritances:
- typing_extensions.Protocol
- contextlib.AbstractAsyncContextManager
- typing.Generic
summary: Protocol for classes able to provide OAuth tokens.
constructor:
  syntax: AsyncTokenCredential(*args, **kwargs)
methods:
- uid: azure.core.credentials_async.AsyncTokenCredential.close
  name: close
  signature: async close() -> None
- uid: azure.core.credentials_async.AsyncTokenCredential.get_token
  name: get_token
  summary: Request an access token for *scopes*.
  signature: 'async get_token(*scopes: str, claims: str | None = None, tenant_id:
    str | None = None, enable_cae: bool = False, **kwargs: Any) -> AccessToken'
  parameters:
  - name: scopes
    description: The type of access needed.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: claims
    description: 'Additional claims required in the token, such as those returned
      in a resource

      provider''s claims challenge following an authorization failure.'
    types:
    - <xref:str>
  - name: tenant_id
    description: Optional tenant to include in the token request.
    types:
    - <xref:str>
  - name: enable_cae
    description: 'Indicates whether to enable Continuous Access Evaluation (CAE) for
      the requested

      token. Defaults to False.'
    types:
    - <xref:bool>
  return:
    description: An AccessToken instance containing the token string and its expiration
      time in Unix time.
    types:
    - <xref:azure.core.credentials.AccessToken>
