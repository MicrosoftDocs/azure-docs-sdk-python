### YamlMime:PythonClass
uid: azure.core.pipeline.policies.AsyncRedirectPolicy
name: AsyncRedirectPolicy
fullName: azure.core.pipeline.policies.AsyncRedirectPolicy
module: azure.core.pipeline.policies
inheritances:
- azure.core.pipeline.policies._redirect.RedirectPolicyBase
- azure.core.pipeline.policies._base_async.AsyncHTTPPolicy
summary: 'An async redirect policy.


  An async redirect policy in the pipeline can be configured directly or per operation.'
constructor:
  syntax: 'AsyncRedirectPolicy(**kwargs: Any)'
  keywordOnlyParameters:
  - name: permit_redirects
    description: Whether the client allows redirects. Defaults to True.
    types:
    - <xref:bool>
  - name: redirect_max
    description: The maximum allowed redirects. Defaults to 30.
    types:
    - <xref:int>
examples:
- "Configuring an async redirect policy.<!--[!code-python[Main](les\\test_example_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
  \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\36\\\\azure-core-1.30.1\\\
  \\samples\\\\test_example_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
  \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
  : false} -->\n\n````python\n\n   from azure.core.pipeline.policies import AsyncRedirectPolicy\n\
  \n   redirect_policy = AsyncRedirectPolicy()\n\n   # Client allows redirects. Defaults\
  \ to True.\n   redirect_policy.allow = True\n\n   # The maximum allowed redirects.\
  \ The default value is 30\n   redirect_policy.max_redirects = 10\n\n   # Alternatively\
  \ you can disable redirects entirely\n   redirect_policy = AsyncRedirectPolicy.no_redirects()\n\
  \n   # It can also be overridden per operation.\n   async with AsyncPipelineClient[HttpRequest,\
  \ AsyncHttpResponse](base_url=url, policies=[redirect_policy]) as client:\n    \
  \   response = await client._pipeline.run(request, permit_redirects=True, redirect_max=5)\n\
  \n\n   ````\n"
methods:
- uid: azure.core.pipeline.policies.AsyncRedirectPolicy.configure_redirects
  name: configure_redirects
  summary: Configures the redirect settings.
  signature: 'configure_redirects(options: Dict[str, Any]) -> Dict[str, Any]'
  parameters:
  - name: options
    description: Keyword arguments from context.
    isRequired: true
    types:
    - <xref:dict>
  return:
    description: A dict containing redirect settings and a history of redirects.
    types:
    - <xref:dict>
- uid: azure.core.pipeline.policies.AsyncRedirectPolicy.get_redirect_location
  name: get_redirect_location
  summary: Checks for redirect status code and gets redirect location.
  signature: 'get_redirect_location(response: PipelineResponse[Any, AllHttpResponseType])
    -> str | None | Literal[False]'
  parameters:
  - name: response
    description: The PipelineResponse object
    isRequired: true
    types:
    - <xref:azure.core.pipeline.PipelineResponse>
  return:
    description: 'Truthy redirect location string if we got a redirect status

      code and valid location. `None` if redirect status and no

      location. `False` if not a redirect status code.'
    types:
    - <xref:str>
    - <xref:bool>
    - <xref:None>
- uid: azure.core.pipeline.policies.AsyncRedirectPolicy.increment
  name: increment
  summary: Increment the redirect attempts for this request.
  signature: 'increment(settings: Dict[str, Any], response: PipelineResponse[Any,
    AllHttpResponseType], redirect_location: str) -> bool'
  parameters:
  - name: settings
    description: The redirect settings
    isRequired: true
    types:
    - <xref:dict>
  - name: response
    description: A pipeline response object.
    isRequired: true
    types:
    - <xref:azure.core.pipeline.PipelineResponse>
  - name: redirect_location
    description: The redirected endpoint.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'Whether further redirect attempts are remaining.

      False if exhausted; True if more redirect attempts available.'
    types:
    - <xref:bool>
- uid: azure.core.pipeline.policies.AsyncRedirectPolicy.no_redirects
  name: no_redirects
  summary: Disable redirects.
  signature: no_redirects() -> ClsRedirectPolicy
  return:
    description: A redirect policy with redirects disabled.
    types:
    - <xref:azure.core.pipeline.policies.RedirectPolicy>
    - <xref:azure.core.pipeline.policies.AsyncRedirectPolicy>
- uid: azure.core.pipeline.policies.AsyncRedirectPolicy.send
  name: send
  summary: 'Sends the PipelineRequest object to the next policy.

    Uses redirect settings to send the request to redirect endpoint if necessary.'
  signature: 'async send(request: PipelineRequest[HTTPRequestType]) -> PipelineResponse[HTTPRequestType,
    AsyncHTTPResponseType]'
  parameters:
  - name: request
    description: The PipelineRequest object
    isRequired: true
    types:
    - <xref:azure.core.pipeline.PipelineRequest>
  return:
    description: Returns the PipelineResponse or raises error if maximum redirects
      exceeded.
    types:
    - <xref:azure.core.pipeline.PipelineResponse>
  exceptions:
  - type: azure.core.exceptions.TooManyRedirectsError if maximum redirects exceeded.
attributes:
- uid: azure.core.pipeline.policies.AsyncRedirectPolicy.next
  name: next
  summary: Pointer to the next policy or a transport (wrapped as a policy). Will be
    set at pipeline creation.
  signature: 'next: AsyncHTTPPolicy[HTTPRequestType, AsyncHTTPResponseType]'
- uid: azure.core.pipeline.policies.AsyncRedirectPolicy.REDIRECT_HEADERS_BLACKLIST
  name: REDIRECT_HEADERS_BLACKLIST
  signature: REDIRECT_HEADERS_BLACKLIST = frozenset({'Authorization'})
- uid: azure.core.pipeline.policies.AsyncRedirectPolicy.REDIRECT_STATUSES
  name: REDIRECT_STATUSES
  signature: REDIRECT_STATUSES = frozenset({300, 301, 302, 303, 307, 308})
