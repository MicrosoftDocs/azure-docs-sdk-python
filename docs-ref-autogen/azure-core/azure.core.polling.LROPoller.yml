### YamlMime:PythonClass
uid: azure.core.polling.LROPoller
name: LROPoller
fullName: azure.core.polling.LROPoller
module: azure.core.polling
inheritances:
- typing.Generic
summary: Poller for long running operations.
constructor:
  syntax: 'LROPoller(client: Any, initial_response: Any, deserialization_callback:
    Callable[[Any], PollingReturnType_co], polling_method: PollingMethod[PollingReturnType_co])'
  parameters:
  - name: client
    description: A pipeline service client
    isRequired: true
    types:
    - <xref:azure.core.PipelineClient>
  - name: initial_response
    description: The initial call response
    isRequired: true
    types:
    - <xref:azure.core.pipeline.PipelineResponse>
  - name: deserialization_callback
    description: 'A callback that takes a Response and return a deserialized object.

      If a subclass of Model is given, this passes "deserialize" as callback.'
    isRequired: true
    types:
    - <xref:callable>
    - <xref:msrest.serialization.Model>
  - name: polling_method
    description: The polling strategy to adopt
    isRequired: true
    types:
    - <xref:azure.core.polling.PollingMethod>
methods:
- uid: azure.core.polling.LROPoller.add_done_callback
  name: add_done_callback
  summary: 'Add callback function to be run once the long running operation

    has completed - regardless of the status of the operation.'
  signature: 'add_done_callback(func: Callable) -> None'
  parameters:
  - name: func
    description: 'Callback function that takes at least one

      argument, a completed LongRunningOperation.'
    isRequired: true
    types:
    - <xref:callable>
- uid: azure.core.polling.LROPoller.continuation_token
  name: continuation_token
  summary: Return a continuation token that allows to restart the poller later.
  signature: continuation_token() -> str
  return:
    description: An opaque continuation token
    types:
    - <xref:str>
- uid: azure.core.polling.LROPoller.done
  name: done
  summary: Check status of the long running operation.
  signature: done() -> bool
  return:
    description: '''True'' if the process has completed, else ''False''.'
    types:
    - <xref:bool>
- uid: azure.core.polling.LROPoller.from_continuation_token
  name: from_continuation_token
  signature: 'from_continuation_token(polling_method: PollingMethod[PollingReturnType_co],
    continuation_token: str, **kwargs) -> LROPoller[PollingReturnType_co]'
  parameters:
  - name: polling_method
    isRequired: true
  - name: continuation_token
    isRequired: true
- uid: azure.core.polling.LROPoller.polling_method
  name: polling_method
  summary: Return the polling method associated to this poller.
  signature: polling_method() -> PollingMethod[PollingReturnType_co]
  return:
    description: The polling method
    types:
    - <xref:azure.core.polling.PollingMethod>
- uid: azure.core.polling.LROPoller.remove_done_callback
  name: remove_done_callback
  summary: Remove a callback from the long running operation.
  signature: 'remove_done_callback(func: Callable) -> None'
  parameters:
  - name: func
    description: The function to be removed from the callbacks.
    isRequired: true
    types:
    - <xref:callable>
  exceptions:
  - type: ValueError
    description: if the long running operation has already completed.
- uid: azure.core.polling.LROPoller.result
  name: result
  summary: 'Return the result of the long running operation, or

    the result available after the specified timeout.'
  signature: 'result(timeout: float | None = None) -> PollingReturnType_co'
  parameters:
  - name: timeout
    description: Period of time to wait before getting back control.
    defaultValue: None
    types:
    - <xref:float>
  return:
    description: The deserialized resource of the long running operation, if one is
      available.
    types:
    - <xref:any>
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
    description: Server problem with the query.
- uid: azure.core.polling.LROPoller.status
  name: status
  summary: Returns the current status string.
  signature: status() -> str
  return:
    description: The current status string
    types:
    - <xref:str>
- uid: azure.core.polling.LROPoller.wait
  name: wait
  summary: 'Wait on the long running operation for a specified length

    of time. You can check if this call as ended with timeout with the

    "done()" method.'
  signature: 'wait(timeout: float | None = None) -> None'
  parameters:
  - name: timeout
    description: 'Period of time to wait for the long running

      operation to complete (in seconds).'
    isRequired: true
    types:
    - <xref:float>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
    description: Server problem with the query.
