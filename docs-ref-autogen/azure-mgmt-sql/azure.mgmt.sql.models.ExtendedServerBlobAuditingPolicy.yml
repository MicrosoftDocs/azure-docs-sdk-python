### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.mgmt.sql.models.ExtendedServerBlobAuditingPolicy
  fullName: azure.mgmt.sql.models.ExtendedServerBlobAuditingPolicy
  inheritance:
  - inheritance:
    - inheritance:
      - inheritance:
        - type: builtins.object
        type: msrest.serialization.Model
      type: azure.mgmt.sql.models._models_py3.Resource
    type: azure.mgmt.sql.models._models_py3.ProxyResource
  langs:
  - python
  module: azure.mgmt.sql.models
  name: ExtendedServerBlobAuditingPolicy
  summary: 'An extended server blob auditing policy.


    Variables are only populated by the server, and will be ignored when

    sending a request.


    All required parameters must be populated in order to send to Azure.'
  syntax:
    content: 'ExtendedServerBlobAuditingPolicy(*, state, predicate_expression: str
      = None, storage_endpoint: str = None, storage_account_access_key: str = None,
      retention_days: int = None, audit_actions_and_groups=None, storage_account_subscription_id:
      str = None, is_storage_secondary_key_in_use: bool = None, is_azure_monitor_target_enabled:
      bool = None, queue_delay_ms: int = None, **kwargs) -> None'
    parameters:
    - description: 'Specifies condition of where clause when

        creating an audit.'
      id: predicate_expression
      type:
      - str
    - description: 'Required. Specifies the state of the policy. If state is

        Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.

        Possible values include: ''Enabled'', ''Disabled'''
      id: state
      type:
      - str
      - azure.mgmt.sql.models.BlobAuditingPolicyState
    - description: 'Specifies the blob storage endpoint (e.g.

        [https://MyAccount.blob.core.windows.net](https://MyAccount.blob.core.windows.net)).
        If state is Enabled,

        storageEndpoint or isAzureMonitorTargetEnabled is required.'
      id: storage_endpoint
      type:
      - str
    - description: 'Specifies the identifier key of the

        auditing storage account.

        If state is Enabled and storageEndpoint is specified, not specifying the

        storageAccountAccessKey will use SQL server system-assigned managed

        identity to access the storage.

        Prerequisites for using managed identity authentication:

        1. Assign SQL Server a system-assigned managed identity in Azure Active

        Directory (AAD).

        2. Grant SQL Server identity access to the storage account by adding

        ''Storage Blob Data Contributor'' RBAC role to the server identity.

        For more information, see [Auditing to storage using Managed Identity

        authentication]([https://go.microsoft.com/fwlink/?linkid=2114355](https://go.microsoft.com/fwlink/?linkid=2114355))'
      id: storage_account_access_key
      type:
      - str
    - description: 'Specifies the number of days to keep in the audit

        logs in the storage account.'
      id: retention_days
      type:
      - int
    - description: 'Specifies the Actions-Groups and Actions

        to audit.

        The recommended set of action groups to use is the following combination -

        this will audit all the queries and stored procedures executed against the

        database, as well as successful and failed logins:

        BATCH_COMPLETED_GROUP,

        SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,

        FAILED_DATABASE_AUTHENTICATION_GROUP.

        This above combination is also the set that is configured by default when

        enabling auditing from the Azure portal.

        The supported action groups to audit are (note: choose only specific

        groups that cover your auditing needs. Using unnecessary groups could lead

        to very large quantities of audit records):

        APPLICATION_ROLE_CHANGE_PASSWORD_GROUP

        BACKUP_RESTORE_GROUP

        DATABASE_LOGOUT_GROUP

        DATABASE_OBJECT_CHANGE_GROUP

        DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP

        DATABASE_OBJECT_PERMISSION_CHANGE_GROUP

        DATABASE_OPERATION_GROUP

        DATABASE_PERMISSION_CHANGE_GROUP

        DATABASE_PRINCIPAL_CHANGE_GROUP

        DATABASE_PRINCIPAL_IMPERSONATION_GROUP

        DATABASE_ROLE_MEMBER_CHANGE_GROUP

        FAILED_DATABASE_AUTHENTICATION_GROUP

        SCHEMA_OBJECT_ACCESS_GROUP

        SCHEMA_OBJECT_CHANGE_GROUP

        SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP

        SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP

        SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP

        USER_CHANGE_PASSWORD_GROUP

        BATCH_STARTED_GROUP

        BATCH_COMPLETED_GROUP

        These are groups that cover all sql statements and stored procedures

        executed against the database, and should not be used in combination with

        other groups as this will result in duplicate audit logs.

        For more information, see [Database-Level Audit Action

        Groups]([https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups)).

        For Database auditing policy, specific Actions can also be specified (note

        that Actions cannot be specified for Server auditing policy). The

        supported actions to audit are:

        SELECT

        UPDATE

        INSERT

        DELETE

        EXECUTE

        RECEIVE

        REFERENCES

        The general form for defining an action to be audited is:

        {action} ON {object} BY {principal}

        Note that <object> in the above format can refer to an object like a

        table, view, or stored procedure, or an entire database or schema. For the

        latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are

        used, respectively.

        For example:

        SELECT on dbo.myTable by public

        SELECT on DATABASE::myDatabase by public

        SELECT on SCHEMA::mySchema by public

        For more information, see [Database-Level Audit

        Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)'
      id: audit_actions_and_groups
      type:
      - list[str]
    - description: 'Specifies the blob storage

        subscription Id.'
      id: storage_account_subscription_id
      type:
      - str
    - description: 'Specifies whether

        storageAccountAccessKey value is the storage''s secondary key.'
      id: is_storage_secondary_key_in_use
      type:
      - bool
    - description: 'Specifies whether audit events are

        sent to Azure Monitor.

        In order to send the events to Azure Monitor, specify ''state'' as ''Enabled''

        and ''isAzureMonitorTargetEnabled'' as true.

        When using REST API to configure auditing, Diagnostic Settings with

        ''SQLSecurityAuditEvents'' diagnostic logs category on the database should

        be also created.

        Note that for server level audit you should use the ''master'' database as

        {databaseName}.

        Diagnostic Settings URI format:

        PUT

        [https://management.azure.com/subscriptions](https://management.azure.com/subscriptions)/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview

        For more information, see [Diagnostic Settings REST

        API]([https://go.microsoft.com/fwlink/?linkid=2033207](https://go.microsoft.com/fwlink/?linkid=2033207))

        or [Diagnostic Settings

        PowerShell]([https://go.microsoft.com/fwlink/?linkid=2033043](https://go.microsoft.com/fwlink/?linkid=2033043))'
      id: is_azure_monitor_target_enabled
      type:
      - bool
    - description: 'Specifies the amount of time in milliseconds that

        can elapse before audit actions are forced to be processed.

        The default minimum value is 1000 (1 second). The maximum is

        2,147,483,647.'
      id: queue_delay_ms
      type:
      - int
    variables:
    - description: Resource ID.
      id: id
      type:
      - str
    - description: Resource name.
      id: name
      type:
      - str
    - description: Resource type.
      id: type
      type:
      - str
  type: class
  uid: azure.mgmt.sql.models.ExtendedServerBlobAuditingPolicy
references:
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
