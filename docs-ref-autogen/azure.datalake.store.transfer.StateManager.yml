### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.datalake.store.transfer.StateManager.contains_all
  - azure.datalake.store.transfer.StateManager.contains_none
  class: azure.datalake.store.transfer.StateManager
  example:
  - '

    ```


    >>> StateManager(''draft'', ''review'', ''complete'')  # doctest: +SKIP

    <StateManager: draft=0 review=0 complete=0>

    >>> mgr = StateManager(''off'', ''on'')

    >>> mgr[''foo''] = ''on''

    >>> mgr[''bar''] = ''off''

    >>> mgr[''quux''] = ''on''

    >>> mgr  # doctest: +SKIP

    <StateManager: off=1 on=2>

    >>> mgr.contains_all(''on'')

    False

    >>> mgr[''bar''] = ''on''

    >>> mgr.contains_all(''on'')

    True

    >>> mgr.contains_none(''off'')

    True

    ```


    Internal class used by *ADLTransferClient*.

    '
  fullName: azure.datalake.store.transfer.StateManager
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.datalake.store.transfer
  name: StateManager
  source:
    id: StateManager
    path: azure\datalake\store\transfer.py
    remote:
      branch: master
      path: azure\datalake\store\transfer.py
      repo: https://github.com/Azure/azure-data-lake-store-python
    startLine: 31
  summary: 'Manages state for any hashable object.


    When tracking multiple files and their chunks, each file/chunk can be in

    any valid state for that particular type.


    At the simplest level, we need to set and retrieve an object''s current

    state, while only allowing valid states to be used. In addition, we also

    need to give statistics about a group of objects (are all objects in one

    state? how many objects are in each available state?).





    '
  syntax:
    content: StateManager(*states)
    parameters:
    - description: 'Managed objects can only use these defined states.

        '
      id: states
      type:
      - list of valid states
  type: class
  uid: azure.datalake.store.transfer.StateManager
- class: azure.datalake.store.transfer.StateManager
  fullName: azure.datalake.store.transfer.StateManager.contains_all
  langs:
  - python
  module: azure.datalake.store.transfer
  name: contains_all
  source:
    id: contains_all
    path: azure\datalake\store\transfer.py
    remote:
      branch: master
      path: azure\datalake\store\transfer.py
      repo: https://github.com/Azure/azure-data-lake-store-python
    startLine: 92
  summary: 'Return whether all managed objects are in the given state

    '
  syntax:
    content: contains_all(state)
    parameters:
    - id: state
  type: method
  uid: azure.datalake.store.transfer.StateManager.contains_all
- class: azure.datalake.store.transfer.StateManager
  fullName: azure.datalake.store.transfer.StateManager.contains_none
  langs:
  - python
  module: azure.datalake.store.transfer
  name: contains_none
  source:
    id: contains_none
    path: azure\datalake\store\transfer.py
    remote:
      branch: master
      path: azure\datalake\store\transfer.py
      repo: https://github.com/Azure/azure-data-lake-store-python
    startLine: 97
  summary: 'Return whether no managed objects are in the given states

    '
  syntax:
    content: contains_none(*states)
    parameters: []
  type: method
  uid: azure.datalake.store.transfer.StateManager.contains_none
references:
- fullName: azure.datalake.store.transfer.StateManager.contains_all
  isExternal: false
  name: contains_all
  parent: azure.datalake.store.transfer.StateManager
  uid: azure.datalake.store.transfer.StateManager.contains_all
- fullName: azure.datalake.store.transfer.StateManager.contains_none
  isExternal: false
  name: contains_none
  parent: azure.datalake.store.transfer.StateManager
  uid: azure.datalake.store.transfer.StateManager.contains_none
