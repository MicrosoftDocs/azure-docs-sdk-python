### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.get_purge_status
  - azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.purge
  - azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.models
  class: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations
  fullName: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.mgmt.loganalytics.operations
  name: WorkspacePurgeOperations
  summary: 'WorkspacePurgeOperations operations.


    You should not instantiate directly this class, but create a Client instance that
    will create it for you and attach it as attribute.'
  syntax:
    content: WorkspacePurgeOperations(client, config, serializer, deserializer)
    parameters:
    - description: Client for service requests.
      id: client
    - description: Configuration of service client.
      id: config
    - description: An object model serializer.
      id: serializer
    - description: An object model deserializer.
      id: deserializer
    variables:
    - description: 'The API version to use for this operation. Constant value: "2020-08-01".'
      id: api_version
  type: class
  uid: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations
- class: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations
  exceptions:
  - type: msrestazure.azure_exceptions.CloudError
  fullName: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.get_purge_status
  langs:
  - python
  module: azure.mgmt.loganalytics.operations
  name: get_purge_status(resource_group_name, workspace_name, purge_id, custom_headers=None,
    raw=False, **operation_config)
  namewithoutparameters: get_purge_status
  summary: Gets status of an ongoing purge operation.
  syntax:
    content: get_purge_status(resource_group_name, workspace_name, purge_id, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: 'The name of the resource group. The name

        is case insensitive.'
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: The name of the workspace.
      id: workspace_name
      isRequired: true
      type:
      - str
    - description: 'In a purge status request, this is the Id of the

        operation the status of which is returned.'
      id: purge_id
      isRequired: true
      type:
      - str
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: WorkspacePurgeStatusResponse or ClientRawResponse if raw=true
      type:
      - azure.mgmt.loganalytics.models.WorkspacePurgeStatusResponse
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.get_purge_status
- class: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations
  exceptions:
  - type: msrestazure.azure_exceptions.CloudError
  fullName: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.purge
  langs:
  - python
  module: azure.mgmt.loganalytics.operations
  name: purge(resource_group_name, workspace_name, table, filters, custom_headers=None,
    raw=False, **operation_config)
  namewithoutparameters: purge
  summary: 'Purges data in an Log Analytics workspace by a set of user-defined

    filters.

    In order to manage system resources, purge requests are throttled at 50

    requests per hour. You should batch the execution of purge requests by

    sending a single command whose predicate includes all user identities

    that require purging. Use the in operator to specify multiple

    identities. You should run the query prior to using for a purge request

    to verify that the results are expected.'
  syntax:
    content: purge(resource_group_name, workspace_name, table, filters, custom_headers=None,
      raw=False, **operation_config)
    parameters:
    - description: 'The name of the resource group. The name

        is case insensitive.'
      id: resource_group_name
      isRequired: true
      type:
      - str
    - description: The name of the workspace.
      id: workspace_name
      isRequired: true
      type:
      - str
    - description: Table from which to purge data.
      id: table
      isRequired: true
      type:
      - str
    - description: 'The set of columns and filters (queries) to run over

        them to purge the resulting data.'
      id: filters
      isRequired: true
      type:
      - list[azure.mgmt.loganalytics.models.WorkspacePurgeBodyFilters]
    - defaultValue: None
      description: headers that will be added to the request
      id: custom_headers
      type:
      - dict
    - defaultValue: 'False'
      description: 'returns the direct response alongside the

        deserialized response'
      id: raw
      type:
      - bool
    - description: '*Operation configuration

        overrides*.'
      id: operation_config
      isRequired: true
    return:
      description: WorkspacePurgeResponse or ClientRawResponse if raw=true
      type:
      - azure.mgmt.loganalytics.models.WorkspacePurgeResponse
      - msrest.pipeline.ClientRawResponse
  type: method
  uid: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.purge
- class: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations
  fullName: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.models
  langs:
  - python
  module: azure.mgmt.loganalytics.operations
  name: models
  syntax:
    content: models = <module 'azure.mgmt.loganalytics.models' from 'c:\\hostedtoolcache\\windows\\python\\3.6.8\\x64\\lib\\site-packages\\azure\\mgmt\\loganalytics\\models\\__init__.py'>
  type: attribute
  uid: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.models
references:
- fullName: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.get_purge_status
  isExternal: false
  name: get_purge_status(resource_group_name, workspace_name, purge_id, custom_headers=None,
    raw=False, **operation_config)
  parent: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations
  uid: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.get_purge_status
- fullName: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.purge
  isExternal: false
  name: purge(resource_group_name, workspace_name, table, filters, custom_headers=None,
    raw=False, **operation_config)
  parent: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations
  uid: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.purge
- fullName: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.models
  isExternal: false
  name: models
  parent: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations
  uid: azure.mgmt.loganalytics.operations.WorkspacePurgeOperations.models
- fullName: list[azure.mgmt.loganalytics.models.WorkspacePurgeBodyFilters]
  name: list[WorkspacePurgeBodyFilters]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.mgmt.loganalytics.models.WorkspacePurgeBodyFilters
    name: WorkspacePurgeBodyFilters
    uid: azure.mgmt.loganalytics.models.WorkspacePurgeBodyFilters
  - fullName: ']'
    name: ']'
  uid: list[azure.mgmt.loganalytics.models.WorkspacePurgeBodyFilters]
