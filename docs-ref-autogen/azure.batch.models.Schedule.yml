### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.batch.models.Schedule
  fullName: azure.batch.models.Schedule
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msrest.serialization.Model
  langs:
  - python
  module: azure.batch.models
  name: Schedule
  source:
    id: Schedule
    path: azure-batch\azure\batch\models\schedule.py
    remote:
      branch: master
      path: azure-batch\azure\batch\models\schedule.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 15
  summary: 'The schedule according to which jobs will be created.

    '
  syntax:
    content: Schedule(do_not_run_until=None, do_not_run_after=None, start_window=None,
      recurrence_interval=None)
    parameters:
    - description: 'The earliest time at which any job may be created

        under this job schedule. If you do not specify a doNotRunUntil time, the

        schedule becomes ready to create jobs immediately.

        '
      id: do_not_run_until
      type:
      - datetime
    - description: 'A time after which no job will be created under

        this job schedule. The schedule will move to the completed state as soon

        as this deadline is past and there is no active job under this job

        schedule. If you do not specify a doNotRunAfter time, and you are creating

        a recurring job schedule, the job schedule will remain active until you

        explicitly terminate it.

        '
      id: do_not_run_after
      type:
      - datetime
    - description: 'The time interval, starting from the time at which

        the schedule indicates a job should be created, within which a job must be

        created. If a job is not created within the startWindow interval, then the

        ''opportunity'' is lost; no job will be created until the next recurrence
        of

        the schedule. If the schedule is recurring, and the startWindow is longer

        than the recurrence interval, then this is equivalent to an infinite

        startWindow, because the job that is ''due'' in one recurrenceInterval is

        not carried forward into the next recurrence interval. The default is

        infinite. The minimum value is 1 minute. If you specify a lower value, the

        Batch service rejects the schedule with an error; if you are calling the

        REST API directly, the HTTP status code is 400 (Bad Request).

        '
      id: start_window
      type:
      - timedelta
    - description: 'The time interval between the start times of

        two successive jobs under the job schedule. A job schedule can have at

        most one active job under it at any given time. Because a job schedule can

        have at most one active job under it at any given time, if it is time to

        create a new job under a job schedule, but the previous job is still

        running, the Batch service will not create the new job until the previous

        job finishes. If the previous job does not finish within the startWindow

        period of the new recurrenceInterval, then no new job will be scheduled

        for that interval. For recurring jobs, you should normally specify a

        jobManagerTask in the jobSpecification. If you do not use jobManagerTask,

        you will need an external process to monitor when jobs are created, add

        tasks to the jobs and terminate the jobs ready for the next recurrence.

        The default is that the schedule does not recur: one job is created,

        within the startWindow after the doNotRunUntil time, and the schedule is

        complete as soon as that job finishes. The minimum value is 1 minute. If

        you specify a lower value, the Batch service rejects the schedule with an

        error; if you are calling the REST API directly, the HTTP status code is

        400 (Bad Request).

        '
      id: recurrence_interval
      type:
      - timedelta
  type: class
  uid: azure.batch.models.Schedule
references: []
