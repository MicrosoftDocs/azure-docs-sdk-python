### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.batch.models.JobManagerTask
  fullName: azure.batch.models.JobManagerTask
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msrest.serialization.Model
  langs:
  - python
  module: azure.batch.models
  name: JobManagerTask
  source:
    id: JobManagerTask
    path: azure-batch\azure\batch\models\job_manager_task.py
    remote:
      branch: master
      path: azure-batch\azure\batch\models\job_manager_task.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 15
  summary: 'Specifies details of a Job Manager task.


    The Job Manager task is automatically started when the job is created. The

    Batch service tries to schedule the Job Manager task before any other tasks

    in the job. When shrinking a pool, the Batch service tries to preserve

    compute nodes where Job Manager tasks are running for as long as possible

    (that is, nodes running ''normal'' tasks are removed before nodes running Job

    Manager tasks). When a Job Manager task fails and needs to be restarted,

    the system tries to schedule it at the highest priority. If there are no

    idle nodes available, the system may terminate one of the running tasks in

    the pool and return it to the queue in order to make room for the Job

    Manager task to restart. Note that a Job Manager task in one job does not

    have priority over tasks in other jobs. Across jobs, only job level

    priorities are observed. For example, if a Job Manager in a priority 0 job

    needs to be restarted, it will not displace tasks of a priority 1 job.

    Batch will retry tasks when a recovery operation is triggered on a compute

    node. Examples of recovery operations include (but are not limited to) when

    an unhealthy compute node is rebooted or a compute node disappeared due to

    host failure. Retries due to recovery operations are independent of and are

    not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is

    0, an internal retry due to a recovery operation may occur. Because of

    this, all tasks should be idempotent. This means tasks need to tolerate

    being interrupted and restarted without causing any corruption or duplicate

    data. The best practice for long running tasks is to use some form of

    checkpointing.

    '
  syntax:
    content: JobManagerTask(id, command_line, display_name=None, container_settings=None,
      resource_files=None, output_files=None, environment_settings=None, constraints=None,
      kill_job_on_completion=None, user_identity=None, run_exclusive=None, application_package_references=None,
      authentication_token_settings=None, allow_low_priority_node=None)
    parameters:
    - description: 'A string that uniquely identifies the Job Manager task within

        the job. The ID can contain any combination of alphanumeric characters

        including hyphens and underscores and cannot contain more than 64

        characters.

        '
      id: id
      type:
      - str
    - description: 'The display name of the Job Manager task. It need not

        be unique and can contain any Unicode characters up to a maximum length of

        1024.

        '
      id: display_name
      type:
      - str
    - description: 'The command line of the Job Manager task. The command

        line does not run under a shell, and therefore cannot take advantage of

        shell features such as environment variable expansion. If you want to take

        advantage of such features, you should invoke the shell in the command

        line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c

        MyCommand" in Linux. If the command line refers to file paths, it should

        use a relative path (relative to the task working directory), or use the

        Batch provided environment variable

        ([https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables](https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables)).

        '
      id: command_line
      type:
      - str
    - description: 'The settings for the container under which the

        Job Manager task runs. If the pool that will run this task has

        containerConfiguration set, this must be set as well. If the pool that

        will run this task doesn''t have containerConfiguration set, this must not

        be set. When this is specified, all directories recursively below the

        AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node)

        are mapped into the container, all task environment variables are mapped

        into the container, and the task command line is executed in the

        container.

        '
      id: container_settings
      type:
      - azure.batch.models.TaskContainerSettings
    - description: 'A list of files that the Batch service will

        download to the compute node before running the command line. Files listed

        under this element are located in the task''s working directory.

        '
      id: resource_files
      type:
      - list[azure.batch.models.ResourceFile]
    - description: 'A list of files that the Batch service will upload

        from the compute node after running the command line. For multi-instance

        tasks, the files will only be uploaded from the compute node on which the

        primary task is executed.

        '
      id: output_files
      type:
      - list[azure.batch.models.OutputFile]
    - description: 'A list of environment variable settings for

        the Job Manager task.

        '
      id: environment_settings
      type:
      - list[azure.batch.models.EnvironmentSetting]
    - description: 'Constraints that apply to the Job Manager task.

        '
      id: constraints
      type:
      - azure.batch.models.TaskConstraints
    - description: 'Whether completion of the Job Manager task

        signifies completion of the entire job. If true, when the Job Manager task

        completes, the Batch service marks the job as complete. If any tasks are

        still running at this time (other than Job Release), those tasks are

        terminated. If false, the completion of the Job Manager task does not

        affect the job status. In this case, you should either use the

        onAllTasksComplete attribute to terminate the job, or have a client or

        user terminate the job explicitly. An example of this is if the Job

        Manager creates a set of tasks but then takes no further role in their

        execution. The default value is true. If you are using the

        onAllTasksComplete and onTaskFailure attributes to control job lifetime,

        and using the Job Manager task only to create the tasks for the job (not

        to monitor progress), then it is important to set killJobOnCompletion to

        false.

        '
      id: kill_job_on_completion
      type:
      - bool
    - description: 'The user identity under which the Job Manager task

        runs. If omitted, the task runs as a non-administrative user unique to the

        task.

        '
      id: user_identity
      type:
      - azure.batch.models.UserIdentity
    - description: 'Whether the Job Manager task requires exclusive use

        of the compute node where it runs. If true, no other tasks will run on the

        same compute node for as long as the Job Manager is running. If false,

        other tasks can run simultaneously with the Job Manager on a compute node.

        The Job Manager task counts normally against the node''s concurrent task

        limit, so this is only relevant if the node allows multiple concurrent

        tasks. The default value is true.

        '
      id: run_exclusive
      type:
      - bool
    - description: 'A list of application packages that

        the Batch service will deploy to the compute node before running the

        command line. Application packages are downloaded and deployed to a shared

        directory, not the task working directory. Therefore, if a referenced

        package is already on the compute node, and is up to date, then it is not

        re-downloaded; the existing copy on the compute node is used. If a

        referenced application package cannot be installed, for example because

        the package has been deleted or because download failed, the task fails.

        '
      id: application_package_references
      type:
      - list[azure.batch.models.ApplicationPackageReference]
    - description: 'The settings for an authentication

        token that the task can use to perform Batch service operations. If this

        property is set, the Batch service provides the task with an

        authentication token which can be used to authenticate Batch service

        operations without requiring an account access key. The token is provided

        via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations

        that the task can carry out using the token depend on the settings. For

        example, a task can request job permissions in order to add other tasks to

        the job, or check the status of the job or of other tasks under the job.

        '
      id: authentication_token_settings
      type:
      - azure.batch.models.AuthenticationTokenSettings
    - description: 'Whether the Job Manager task may run on a

        low-priority compute node. The default value is true.

        '
      id: allow_low_priority_node
      type:
      - bool
  type: class
  uid: azure.batch.models.JobManagerTask
references:
- fullName: list[azure.batch.models.ResourceFile]
  name: list[ResourceFile]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.batch.models.ResourceFile
    name: ResourceFile
    uid: azure.batch.models.ResourceFile
  - fullName: ']'
    name: ']'
  uid: list[azure.batch.models.ResourceFile]
- fullName: list[azure.batch.models.OutputFile]
  name: list[OutputFile]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.batch.models.OutputFile
    name: OutputFile
    uid: azure.batch.models.OutputFile
  - fullName: ']'
    name: ']'
  uid: list[azure.batch.models.OutputFile]
- fullName: list[azure.batch.models.EnvironmentSetting]
  name: list[EnvironmentSetting]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.batch.models.EnvironmentSetting
    name: EnvironmentSetting
    uid: azure.batch.models.EnvironmentSetting
  - fullName: ']'
    name: ']'
  uid: list[azure.batch.models.EnvironmentSetting]
- fullName: list[azure.batch.models.ApplicationPackageReference]
  name: list[ApplicationPackageReference]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.batch.models.ApplicationPackageReference
    name: ApplicationPackageReference
    uid: azure.batch.models.ApplicationPackageReference
  - fullName: ']'
    name: ']'
  uid: list[azure.batch.models.ApplicationPackageReference]
