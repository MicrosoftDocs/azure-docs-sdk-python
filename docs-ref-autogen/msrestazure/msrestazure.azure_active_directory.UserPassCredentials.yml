### YamlMime:PythonClass
uid: msrestazure.azure_active_directory.UserPassCredentials
name: UserPassCredentials
fullName: msrestazure.azure_active_directory.UserPassCredentials
module: msrestazure.azure_active_directory
inheritances:
- msrestazure.azure_active_directory.AADMixin
summary: "Credentials object for Headless Authentication,\ni.e. AAD authentication\
  \ via username and password.\n\nHeadless Auth requires an AAD login (no a Live ID)\
  \ that already has\npermission to access the resource e.g. an organization account,\
  \ and\nthat 2-factor auth be disabled.\n\nOptional kwargs may include:\n\n* cloud_environment\
  \ (msrestazure.azure_cloud.Cloud): A targeted cloud environment \n\n* china (bool):\
  \ Configure auth for China-based service, default is 'False'. \n\n* tenant (str):\
  \ Alternative tenant, default is 'common'. \n\n* resource (str): Alternative authentication\
  \ resource, default is '[https://management.core.windows.net/](https://management.core.windows.net/)'.\
  \ \n\n* verify (bool): Verify secure connection, default is 'True'. \n\n* timeout\
  \ (int): Timeout of the request in seconds. \n\n* proxies (dict): Dictionary mapping\
  \ protocol or protocol and hostname to the URL of the proxy. \n\n* cache (adal.TokenCache):\
  \ A adal.TokenCache, see ADAL configuration \n\nfor details. This parameter is not\
  \ used here and directly passed to ADAL."
constructor:
  syntax: UserPassCredentials(username, password, client_id=None, secret=None, **kwargs)
  parameters:
  - name: username
    description: Account username.
    isRequired: true
    types:
    - <xref:str>
  - name: password
    description: Account password.
    isRequired: true
    types:
    - <xref:str>
  - name: client_id
    description: 'Client ID, if not set, Xplat Client ID

      will be used.'
    isRequired: true
    types:
    - <xref:str>
  - name: secret
    description: Client secret, only if required by server.
    isRequired: true
    types:
    - <xref:str>
methods:
- uid: msrestazure.azure_active_directory.UserPassCredentials.set_token
  name: set_token
  summary: Get token using Username/Password credentials.
  signature: set_token()
  exceptions:
  - type: AuthenticationError if credentials invalid, or call fails.
