### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.servicebus_client.ReceiveClientMixin.get_deadletter_receiver
  - azure.servicebus.servicebus_client.ReceiveClientMixin.get_receiver
  - azure.servicebus.servicebus_client.ReceiveClientMixin.list_sessions
  - azure.servicebus.servicebus_client.ReceiveClientMixin.peek
  - azure.servicebus.servicebus_client.ReceiveClientMixin.receive_deferred_messages
  - azure.servicebus.servicebus_client.ReceiveClientMixin.settle_deferred_messages
  class: azure.servicebus.servicebus_client.ReceiveClientMixin
  fullName: azure.servicebus.servicebus_client.ReceiveClientMixin
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.servicebus.servicebus_client
  name: ReceiveClientMixin
  summary: ''
  syntax: {}
  type: class
  uid: azure.servicebus.servicebus_client.ReceiveClientMixin
- class: azure.servicebus.servicebus_client.ReceiveClientMixin
  fullName: azure.servicebus.servicebus_client.ReceiveClientMixin.get_deadletter_receiver
  langs:
  - python
  module: azure.servicebus.servicebus_client
  name: 'get_deadletter_receiver(transfer_deadletter=False, prefetch=0, mode=<ReceiveSettleMode.PeekLock:
    <ReceiverSettleMode.PeekLock: 1>>, idle_timeout=0, **kwargs)'
  namewithoutparameters: get_deadletter_receiver
  summary: 'Get a Receiver for the deadletter endpoint of the queue.


    A Receiver represents a single open Connection with which multiple receive operations
    can be made.'
  syntax:
    content: 'get_deadletter_receiver(transfer_deadletter=False, prefetch=0, mode=<ReceiveSettleMode.PeekLock:
      <ReceiverSettleMode.PeekLock: 1>>, idle_timeout=0, **kwargs)'
    parameters:
    - defaultValue: 'False'
      description: 'Whether to connect to the transfer deadletter queue, or the standard

        deadletter queue. Default is False, using the standard deadletter endpoint.'
      id: transfer_deadletter
      type:
      - bool
    - defaultValue: '0'
      description: 'The maximum number of messages to cache with each request to the
        service.

        The default value is 0, meaning messages will be received from the service
        and processed

        one at a time. Increasing this value will improve message throughput performance
        but increase

        the change that messages will expire while they are cached if they''re not
        processed fast enough.'
      id: prefetch
      type:
      - int
    - defaultValue: ReceiveSettleMode.PeekLock
      description: 'The mode with which messages will be retrieved from the entity.
        The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the queue. Messages received
        with ReceiveAndDelete

        will be immediately removed from the queue, and cannot be subsequently rejected
        or re-received if

        the client fails to process the message. The default mode is PeekLock.'
      id: mode
      type:
      - azure.servicebus.common.constants.ReceiveSettleMode
    - defaultValue: '0'
      description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically shutdown. The default value is 0, meaning no timeout.'
      id: idle_timeout
      type:
      - int
    return:
      description: A Receiver instance with an unopened Connection.
      type:
      - azure.servicebus.receive_handler.Receiver
  type: method
  uid: azure.servicebus.servicebus_client.ReceiveClientMixin.get_deadletter_receiver
- class: azure.servicebus.servicebus_client.ReceiveClientMixin
  fullName: azure.servicebus.servicebus_client.ReceiveClientMixin.get_receiver
  langs:
  - python
  module: azure.servicebus.servicebus_client
  name: 'get_receiver(session=None, prefetch=0, mode=<ReceiveSettleMode.PeekLock:
    <ReceiverSettleMode.PeekLock: 1>>, idle_timeout=0, **kwargs)'
  namewithoutparameters: get_receiver
  summary: 'Get a Receiver for the Service Bus endpoint.


    A Receiver represents a single open Connection with which multiple receive operations
    can be made.'
  syntax:
    content: 'get_receiver(session=None, prefetch=0, mode=<ReceiveSettleMode.PeekLock:
      <ReceiverSettleMode.PeekLock: 1>>, idle_timeout=0, **kwargs)'
    parameters:
    - defaultValue: None
      description: 'A specific session from which to receive. This must be specified
        for a

        sessionful entity, otherwise it must be None. In order to receive the next
        available

        session, set this to NEXT_AVAILABLE.'
      id: session
      type:
      - str
      - azure.servicebus.common.constants.NEXT_AVAILABLE
    - defaultValue: '0'
      description: 'The maximum number of messages to cache with each request to the
        service.

        The default value is 0, meaning messages will be received from the service
        and processed

        one at a time. Increasing this value will improve message throughput performance
        but increase

        the change that messages will expire while they are cached if they''re not
        processed fast enough.'
      id: prefetch
      type:
      - int
    - defaultValue: ReceiveSettleMode.PeekLock
      description: 'The mode with which messages will be retrieved from the entity.
        The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the queue. Messages received
        with ReceiveAndDelete

        will be immediately removed from the queue, and cannot be subsequently rejected
        or re-received if

        the client fails to process the message. The default mode is PeekLock.'
      id: mode
      type:
      - azure.servicebus.common.constants.ReceiveSettleMode
    - defaultValue: '0'
      description: 'The timeout in seconds between received messages after which the
        receiver will

        automatically shutdown. The default value is 0, meaning no timeout.'
      id: idle_timeout
      type:
      - int
    return:
      description: A Receiver instance with an unopened Connection.
      type:
      - azure.servicebus.receive_handler.Receiver
  type: method
  uid: azure.servicebus.servicebus_client.ReceiveClientMixin.get_receiver
- class: azure.servicebus.servicebus_client.ReceiveClientMixin
  fullName: azure.servicebus.servicebus_client.ReceiveClientMixin.list_sessions
  langs:
  - python
  module: azure.servicebus.servicebus_client
  name: list_sessions(updated_since=None, max_results=100, skip=0, **kwargs)
  namewithoutparameters: list_sessions
  summary: 'List session IDs.


    List the Session IDs with pending messages in the queue where the state of the
    session

    has been updated since the timestamp provided. If no timestamp is provided, all
    will be returned.

    If the state of a session has never been set, it will not be returned regardless
    of whether

    there are messages pending.'
  syntax:
    content: list_sessions(updated_since=None, max_results=100, skip=0, **kwargs)
    parameters:
    - defaultValue: None
      description: The UTC datetime from which to return updated pending Session IDs.
      id: updated_since
      type:
      - datetime.datetime
    - defaultValue: '100'
      description: The maximum number of Session IDs to return. Default value is 100.
      id: max_results
      type:
      - int
    - defaultValue: '0'
      description: The page value to jump to. Default value is 0.
      id: skip
      type:
      - int
    return:
      type:
      - list[str]
  type: method
  uid: azure.servicebus.servicebus_client.ReceiveClientMixin.list_sessions
- class: azure.servicebus.servicebus_client.ReceiveClientMixin
  fullName: azure.servicebus.servicebus_client.ReceiveClientMixin.peek
  langs:
  - python
  module: azure.servicebus.servicebus_client
  name: peek(count=1, start_from=0, session=None, **kwargs)
  namewithoutparameters: peek
  summary: 'Browse messages currently pending in the queue.


    Peeked messages are not removed from queue, nor are they locked. They cannot be
    completed,

    deferred or dead-lettered.'
  syntax:
    content: peek(count=1, start_from=0, session=None, **kwargs)
    parameters:
    - defaultValue: '1'
      description: 'The maximum number of messages to try and peek. The default

        value is 1.'
      id: count
      type:
      - int
    - defaultValue: '0'
      description: A message sequence number from which to start browsing messages.
      id: start_from
      type:
      - int
    - defaultValue: None
      description: 'If the entity requires sessions, a session ID must be supplied

        in order that only messages from that session will be browsed. If the entity

        does not require sessions this value will be ignored.'
      id: session
      type:
      - str
    return:
      type:
      - list[azure.servicebus.common.message.PeekMessage]
  type: method
  uid: azure.servicebus.servicebus_client.ReceiveClientMixin.peek
- class: azure.servicebus.servicebus_client.ReceiveClientMixin
  fullName: azure.servicebus.servicebus_client.ReceiveClientMixin.receive_deferred_messages
  langs:
  - python
  module: azure.servicebus.servicebus_client
  name: 'receive_deferred_messages(sequence_numbers, mode=<ReceiveSettleMode.PeekLock:
    <ReceiverSettleMode.PeekLock: 1>>, **kwargs)'
  namewithoutparameters: receive_deferred_messages
  summary: 'Receive messages by sequence number that have been previously deferred.


    When receiving deferred messages from a partitioned entity, all of the supplied

    sequence numbers must be messages from the same partition.'
  syntax:
    content: 'receive_deferred_messages(sequence_numbers, mode=<ReceiveSettleMode.PeekLock:
      <ReceiverSettleMode.PeekLock: 1>>, **kwargs)'
    parameters:
    - description: 'A list of the sequence numbers of messages that have been

        deferred.'
      id: sequence_numbers
      isRequired: true
      type:
      - list[int]
    - defaultValue: ReceiveSettleMode.PeekLock
      description: 'The mode with which messages will be retrieved from the entity.
        The two options

        are PeekLock and ReceiveAndDelete. Messages received with PeekLock must be
        settled within a given

        lock period before they will be removed from the queue. Messages received
        with ReceiveAndDelete

        will be immediately removed from the queue, and cannot be subsequently rejected
        or re-received if

        the client fails to process the message. The default mode is PeekLock.'
      id: mode
      type:
      - azure.servicebus.common.constants.ReceiveSettleMode
    return:
      type:
      - list[azure.servicebus.common.message.Message]
  type: method
  uid: azure.servicebus.servicebus_client.ReceiveClientMixin.receive_deferred_messages
- class: azure.servicebus.servicebus_client.ReceiveClientMixin
  fullName: azure.servicebus.servicebus_client.ReceiveClientMixin.settle_deferred_messages
  langs:
  - python
  module: azure.servicebus.servicebus_client
  name: settle_deferred_messages(settlement, messages, **kwargs)
  namewithoutparameters: settle_deferred_messages
  summary: Settle messages that have been previously deferred.
  syntax:
    content: settle_deferred_messages(settlement, messages, **kwargs)
    parameters:
    - description: 'How the messages are to be settled. This must be a string

        of one of the following values: ''completed'', ''suspended'', ''abandoned''.'
      id: settlement
      isRequired: true
      type:
      - str
    - description: A list of deferred messages to be settled.
      id: messages
      isRequired: true
      type:
      - list[azure.servicebus.common.message.DeferredMessage]
  type: method
  uid: azure.servicebus.servicebus_client.ReceiveClientMixin.settle_deferred_messages
references:
- fullName: azure.servicebus.servicebus_client.ReceiveClientMixin.get_deadletter_receiver
  isExternal: false
  name: 'get_deadletter_receiver(transfer_deadletter=False, prefetch=0, mode=<ReceiveSettleMode.PeekLock:
    <ReceiverSettleMode.PeekLock: 1>>, idle_timeout=0, **kwargs)'
  parent: azure.servicebus.servicebus_client.ReceiveClientMixin
  uid: azure.servicebus.servicebus_client.ReceiveClientMixin.get_deadletter_receiver
- fullName: azure.servicebus.servicebus_client.ReceiveClientMixin.get_receiver
  isExternal: false
  name: 'get_receiver(session=None, prefetch=0, mode=<ReceiveSettleMode.PeekLock:
    <ReceiverSettleMode.PeekLock: 1>>, idle_timeout=0, **kwargs)'
  parent: azure.servicebus.servicebus_client.ReceiveClientMixin
  uid: azure.servicebus.servicebus_client.ReceiveClientMixin.get_receiver
- fullName: azure.servicebus.servicebus_client.ReceiveClientMixin.list_sessions
  isExternal: false
  name: list_sessions(updated_since=None, max_results=100, skip=0, **kwargs)
  parent: azure.servicebus.servicebus_client.ReceiveClientMixin
  uid: azure.servicebus.servicebus_client.ReceiveClientMixin.list_sessions
- fullName: azure.servicebus.servicebus_client.ReceiveClientMixin.peek
  isExternal: false
  name: peek(count=1, start_from=0, session=None, **kwargs)
  parent: azure.servicebus.servicebus_client.ReceiveClientMixin
  uid: azure.servicebus.servicebus_client.ReceiveClientMixin.peek
- fullName: azure.servicebus.servicebus_client.ReceiveClientMixin.receive_deferred_messages
  isExternal: false
  name: 'receive_deferred_messages(sequence_numbers, mode=<ReceiveSettleMode.PeekLock:
    <ReceiverSettleMode.PeekLock: 1>>, **kwargs)'
  parent: azure.servicebus.servicebus_client.ReceiveClientMixin
  uid: azure.servicebus.servicebus_client.ReceiveClientMixin.receive_deferred_messages
- fullName: azure.servicebus.servicebus_client.ReceiveClientMixin.settle_deferred_messages
  isExternal: false
  name: settle_deferred_messages(settlement, messages, **kwargs)
  parent: azure.servicebus.servicebus_client.ReceiveClientMixin
  uid: azure.servicebus.servicebus_client.ReceiveClientMixin.settle_deferred_messages
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
- fullName: list[azure.servicebus.common.message.PeekMessage]
  name: list[PeekMessage]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.servicebus.common.message.PeekMessage
    name: PeekMessage
    uid: azure.servicebus.common.message.PeekMessage
  - fullName: ']'
    name: ']'
  uid: list[azure.servicebus.common.message.PeekMessage]
- fullName: list[int]
  name: list[int]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: int
    name: int
    uid: int
  - fullName: ']'
    name: ']'
  uid: list[int]
- fullName: list[azure.servicebus.common.message.Message]
  name: list[Message]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.servicebus.common.message.Message
    name: Message
    uid: azure.servicebus.common.message.Message
  - fullName: ']'
    name: ']'
  uid: list[azure.servicebus.common.message.Message]
- fullName: list[azure.servicebus.common.message.DeferredMessage]
  name: list[DeferredMessage]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.servicebus.common.message.DeferredMessage
    name: DeferredMessage
    uid: azure.servicebus.common.message.DeferredMessage
  - fullName: ']'
    name: ']'
  uid: list[azure.servicebus.common.message.DeferredMessage]
