### YamlMime:PythonClass
uid: azure.servicebus.ServiceBusReceivedMessage
name: ServiceBusReceivedMessage
fullName: azure.servicebus.ServiceBusReceivedMessage
module: azure.servicebus
inheritances:
- azure.servicebus._common.message.ServiceBusMessage
summary: A Service Bus Message received from service side.
constructor:
  syntax: 'ServiceBusReceivedMessage(message: ''Message'' | ''pyamqp_Message'', receive_mode:
    ServiceBusReceiveMode | str = ServiceBusReceiveMode.PEEK_LOCK, frame: ''TransferFrame''
    | None = None, **kwargs: Any)'
  parameters:
  - name: message
    isRequired: true
  - name: receive_mode
    defaultValue: ServiceBusReceiveMode.PEEK_LOCK
  - name: frame
    defaultValue: None
variables:
- description: Error when AutoLockRenewer is used and it fails to renew the message
    lock.
  name: auto_renew_error
  types:
  - <xref:azure.servicebus.AutoLockRenewTimeout>
  - <xref:azure.servicebus.AutoLockRenewFailed>
examples:
- "Checking the properties on a received message.<!--[!code-python[Main](les\\sync_samples\\\
  sample_code_servicebus.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
  : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
  \\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
  \\221\\\\azure-servicebus-7.12.1\\\\samples\\\\sync_samples\\\\sample_code_servicebus.py\"\
  , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
  : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n       from typing\
  \ import List\n       from azure.servicebus import ServiceBusReceivedMessage\n \
  \      messages_complex: List[ServiceBusReceivedMessage] = servicebus_receiver.receive_messages(max_wait_time=5)\n\
  \       for message in messages_complex:\n           print(\"Receiving: {}\".format(message))\n\
  \           print(\"Time to live: {}\".format(message.time_to_live))\n         \
  \  print(\"Sequence number: {}\".format(message.sequence_number))\n           print(\"\
  Enqueued Sequence number: {}\".format(message.enqueued_sequence_number))\n     \
  \      print(\"Partition Key: {}\".format(message.partition_key))\n           print(\"\
  Application Properties: {}\".format(message.application_properties))\n         \
  \  print(\"Delivery count: {}\".format(message.delivery_count))\n           print(\"\
  Message ID: {}\".format(message.message_id))\n           print(\"Locked until: {}\"\
  .format(message.locked_until_utc))\n           print(\"Lock Token: {}\".format(message.lock_token))\n\
  \           print(\"Enqueued time: {}\".format(message.enqueued_time_utc))\n\n \
  \  ````\n"
attributes:
- uid: azure.servicebus.ServiceBusReceivedMessage.application_properties
  name: application_properties
  summary: The user defined properties on the message.
  return:
    types:
    - <xref:dict>[<xref:str>
    - <xref:bytes>, <xref:PrimitiveTypes>]
    - <xref:None>
- uid: azure.servicebus.ServiceBusReceivedMessage.body
  name: body
  summary: 'The body of the Message. The format may vary depending on the body type:

    For <xref:azure.servicebus.amqp.AmqpMessageBodyType.DATA>,

    the body could be bytes or Iterable[bytes].

    For

    <xref:azure.servicebus.amqp.AmqpMessageBodyType.SEQUENCE>,

    the body could be List or Iterable[List].

    For <xref:azure.servicebus.amqp.AmqpMessageBodyType.VALUE>,

    the body could be any type.'
  return:
    types:
    - <xref:typing.Any>
- uid: azure.servicebus.ServiceBusReceivedMessage.body_type
  name: body_type
  summary: The body type of the underlying AMQP message.
  return:
    types:
    - <xref:azure.servicebus.amqp.AmqpMessageBodyType>
- uid: azure.servicebus.ServiceBusReceivedMessage.content_type
  name: content_type
  summary: 'The content type descriptor.


    Optionally describes the payload of the message, with a descriptor following the
    format of RFC2045, Section 5,

    for example "application/json".'
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.servicebus.ServiceBusReceivedMessage.correlation_id
  name: correlation_id
  summary: 'The correlation identifier.


    Allows an application to specify a context for the message for the purposes of
    correlation, for example

    reflecting the MessageId of a message that is being replied to.


    See Message Routing and Correlation in

    *https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation*.'
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.servicebus.ServiceBusReceivedMessage.dead_letter_error_description
  name: dead_letter_error_description
  summary: Dead letter error description, when the message is received from a deadletter
    subqueue of an entity.
  return:
    types:
    - <xref:str>
- uid: azure.servicebus.ServiceBusReceivedMessage.dead_letter_reason
  name: dead_letter_reason
  summary: Dead letter reason, when the message is received from a deadletter subqueue
    of an entity.
  return:
    types:
    - <xref:str>
- uid: azure.servicebus.ServiceBusReceivedMessage.dead_letter_source
  name: dead_letter_source
  summary: 'The name of the queue or subscription that this message was enqueued on,
    before it was deadlettered.

    This property is only set in messages that have been dead-lettered and subsequently
    auto-forwarded

    from the dead-letter queue to another entity. Indicates the entity in which the
    message was dead-lettered.'
  return:
    types:
    - <xref:str>
- uid: azure.servicebus.ServiceBusReceivedMessage.delivery_count
  name: delivery_count
  summary: 'Number of deliveries that have been attempted for this message. The count
    is incremented

    when a message lock expires or the message is explicitly abandoned by the receiver.'
  return:
    types:
    - <xref:int>
- uid: azure.servicebus.ServiceBusReceivedMessage.enqueued_sequence_number
  name: enqueued_sequence_number
  summary: 'For messages that have been auto-forwarded, this property reflects the
    sequence number that had

    first been assigned to the message at its original point of submission.'
  return:
    types:
    - <xref:int>
- uid: azure.servicebus.ServiceBusReceivedMessage.enqueued_time_utc
  name: enqueued_time_utc
  summary: The UTC datetime at which the message has been accepted and stored in the
    entity.
  return:
    types:
    - <xref:datetime.datetime>
- uid: azure.servicebus.ServiceBusReceivedMessage.expires_at_utc
  name: expires_at_utc
  summary: 'The UTC datetime at which the message is marked for removal and no longer
    available for retrieval

    from the entity due to expiration. Expiry is controlled by the *Message.time_to_live*
    property.

    This property is computed from *Message.enqueued_time_utc* + *Message.time_to_live*.'
  return:
    types:
    - <xref:datetime.datetime>
- uid: azure.servicebus.ServiceBusReceivedMessage.lock_token
  name: lock_token
  summary: 'The lock token for the current message serving as a reference to the lock
    that

    is being held by the broker in PEEK_LOCK mode.'
  return:
    types:
    - <xref:uuid.UUID>
    - <xref:str>
- uid: azure.servicebus.ServiceBusReceivedMessage.locked_until_utc
  name: locked_until_utc
  summary: 'The UTC datetime until which the message will be locked in the queue/subscription.

    When the lock expires, delivery count of the message is incremented and the message

    is again available for retrieval.'
  return:
    types:
    - <xref:datetime.datetime>
- uid: azure.servicebus.ServiceBusReceivedMessage.message
  name: message
  summary: "Get the underlying LegacyMessage.\n   This is deprecated and will be removed\
    \ in a later release."
  return:
    types:
    - <xref:LegacyMessage>
- uid: azure.servicebus.ServiceBusReceivedMessage.message_id
  name: message_id
  summary: 'The id to identify the message.


    The message identifier is an application-defined value that uniquely identifies
    the message and its payload.

    The identifier is a free-form string and can reflect a GUID or an identifier derived
    from the

    application context.  If enabled, the duplicate detection (see

    *https://docs.microsoft.com/azure/service-bus-messaging/duplicate-detection*)

    feature identifies and removes second and further submissions of messages with
    the same message id.'
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.servicebus.ServiceBusReceivedMessage.partition_key
  name: partition_key
  summary: 'The partition key for sending a message to a partitioned entity.


    Setting this value enables assigning related messages to the same internal partition,
    so that submission

    sequence order is correctly recorded.

    The partition is chosen by a hash function over this value and cannot be chosen
    directly.


    See Partitioned queues and topics in

    *https://docs.microsoft.com/azure/service-bus-messaging/service-bus-partitioning*.'
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.servicebus.ServiceBusReceivedMessage.raw_amqp_message
  name: raw_amqp_message
  summary: 'Advanced usage only. The internal AMQP message payload that is sent or
    received.

    :rtype: ~azure.servicebus.amqp.AmqpAnnotatedMessage'
- uid: azure.servicebus.ServiceBusReceivedMessage.reply_to
  name: reply_to
  summary: 'The address of an entity to send replies to.


    This optional and application-defined value is a standard way to express a reply
    path to the receiver of

    the message. When a sender expects a reply, it sets the value to the absolute
    or relative path of the queue

    or topic it expects the reply to be sent to.


    See Message Routing and Correlation in

    *https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation*.'
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.servicebus.ServiceBusReceivedMessage.reply_to_session_id
  name: reply_to_session_id
  summary: 'The session identifier augmenting the *reply_to* address.


    This value augments the *reply_to* information and specifies which session id
    should be set for the reply

    when sent to the reply entity.


    See Message Routing and Correlation in

    *https://docs.microsoft.com/azure/service-bus-messaging/service-bus-messages-payloads?#message-routing-and-correlation*.'
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.servicebus.ServiceBusReceivedMessage.scheduled_enqueue_time_utc
  name: scheduled_enqueue_time_utc
  summary: 'The utc scheduled enqueue time to the message.


    This property can be used for scheduling when sending a message through *ServiceBusSender.send*
    method.

    If cancelling scheduled messages is required, you should use the *ServiceBusSender.schedule*
    method,

    which returns sequence numbers that can be used for future cancellation.

    *scheduled_enqueue_time_utc* is None if not set.'
  return:
    types:
    - <xref:datetime.datetime>
- uid: azure.servicebus.ServiceBusReceivedMessage.sequence_number
  name: sequence_number
  summary: 'The unique number assigned to a message by Service Bus. The sequence number
    is a unique 64-bit integer

    assigned to a message as it is accepted and stored by the broker and functions
    as its true identifier.

    For partitioned entities, the topmost 16 bits reflect the partition identifier.

    Sequence numbers monotonically increase. They roll over to 0 when the 48-64 bit
    range is exhausted.'
  return:
    types:
    - <xref:int>
- uid: azure.servicebus.ServiceBusReceivedMessage.session_id
  name: session_id
  summary: 'The session identifier of the message for a sessionful entity.


    For sessionful entities, this application-defined value specifies the session
    affiliation of the message.

    Messages with the same session identifier are subject to summary locking and enable
    exact in-order

    processing and demultiplexing. For non-sessionful entities, this value is ignored.


    See Message Sessions in *https://docs.microsoft.com/azure/service-bus-messaging/message-sessions*.'
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.servicebus.ServiceBusReceivedMessage.state
  name: state
  summary: 'Defaults to Active. Represents the message state of the message. Can be
    Active, Deferred.

    or Scheduled.'
  return:
    types:
    - <xref:azure.servicebus.ServiceBusMessageState>
- uid: azure.servicebus.ServiceBusReceivedMessage.subject
  name: subject
  summary: 'The application specific subject, sometimes referred to as a label.


    This property enables the application to indicate the purpose of the message to
    the receiver in a standardized

    fashion, similar to an email subject line.'
  return:
    types:
    - <xref:str>
- uid: azure.servicebus.ServiceBusReceivedMessage.time_to_live
  name: time_to_live
  summary: 'The life duration of a message.


    This value is the relative duration after which the message expires, starting
    from the instant the message

    has been accepted and stored by the broker, as captured in *enqueued_time_utc*.

    When not set explicitly, the assumed value is the DefaultTimeToLive for the respective
    queue or topic.

    A message-level time-to-live value cannot be longer than the entity''s time-to-live
    setting and it is silently

    adjusted if it does.


    See Expiration in *https://docs.microsoft.com/azure/service-bus-messaging/message-expiration*'
  return:
    types:
    - <xref:datetime.timedelta>
- uid: azure.servicebus.ServiceBusReceivedMessage.to
  name: to
  summary: 'The *to* address.


    This property is reserved for future use in routing scenarios and presently ignored
    by the broker itself.

    Applications can use this value in rule-driven auto-forward chaining scenarios
    to indicate the intended

    logical destination of the message.


    See [https://docs.microsoft.com/azure/service-bus-messaging/service-bus-auto-forwarding](https://docs.microsoft.com/azure/service-bus-messaging/service-bus-auto-forwarding)
    for more details.'
  return:
    types:
    - <xref:str>
    - <xref:None>
