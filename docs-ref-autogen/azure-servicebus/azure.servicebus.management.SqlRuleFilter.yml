### YamlMime:PythonClass
uid: azure.servicebus.management.SqlRuleFilter
name: SqlRuleFilter
fullName: azure.servicebus.management.SqlRuleFilter
module: azure.servicebus.management
inheritances:
- builtins.object
summary: 'Represents a filter which is a composition of an expression and an action

  that is executed in the pub/sub pipeline.'
constructor:
  syntax: 'SqlRuleFilter(sql_expression: Optional[str] = None, parameters: Optional[Dict[str,
    Union[str, int, float, bool, datetime.datetime, datetime.timedelta]]] = None)'
  parameters:
  - name: sql_expression
    description: The SQL expression. e.g. MyProperty='ABC'
    isRequired: true
    types:
    - <xref:str>
  - name: parameters
    description: Sets the value of the sql expression parameters if any.
    isRequired: true
    types:
    - <xref:dict>[<xref:str>, <xref:Union>[<xref:str>, <xref:int>, <xref:float>, <xref:bool>,
      <xref:datetime>, <xref:timedelta>]]
examples:
- "Create SqlRuleFilter.\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\"\
  : [], \"dupnames\": [], \"backrefs\": [], \"xml:space\": \"preserve\", \"force\"\
  : false, \"language\": \"python\", \"highlight_args\": {}, \"linenos\": false} -->\n\
  \n````python\n\n   sql_filter = SqlRuleFilter(\"property1 = 'value'\")\n   sql_filter_parametrized\
  \ = SqlRuleFilter(\n       \"property1 = @param1 AND property2 = @param2\",\n  \
  \     parameters={\n           \"@param1\": \"value\",\n           \"@param2\" :\
  \ 1\n       }\n   )\n   ````\n"
