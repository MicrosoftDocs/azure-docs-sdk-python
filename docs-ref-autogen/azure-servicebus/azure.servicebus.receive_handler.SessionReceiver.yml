### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.receive_handler.SessionReceiver.get_session_state
  - azure.servicebus.receive_handler.SessionReceiver.list_sessions
  - azure.servicebus.receive_handler.SessionReceiver.peek
  - azure.servicebus.receive_handler.SessionReceiver.receive_deferred_messages
  - azure.servicebus.receive_handler.SessionReceiver.renew_lock
  - azure.servicebus.receive_handler.SessionReceiver.set_session_state
  class: azure.servicebus.receive_handler.SessionReceiver
  fullName: azure.servicebus.receive_handler.SessionReceiver
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.servicebus.base_handler.BaseHandler
    type: azure.servicebus.receive_handler.Receiver
  - inheritance:
    - type: builtins.object
    type: azure.servicebus.common.mixins.SessionMixin
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: SessionReceiver
  summary: 'A session message receiver.


    This receive handler acts as an iterable message stream for retrieving

    messages for a sessionful Service Bus entity. It operates a single connection
    that must be opened and

    closed on completion. The service connection will remain open for the entirety
    of the iterator.

    If you find yourself only partially iterating the message stream, you should run
    the receiver

    in a *with* statement to ensure the connection is closed.

    The Receiver should not be instantiated directly, and should be accessed from
    a *QueueClient* or

    *SubscriptionClient* using the *get_receiver()* method.

    When receiving messages from a session, connection errors that would normally
    be automatically

    retried will instead raise an error due to the loss of the lock on a particular
    session.

    A specific session can be specified, or the receiver can retrieve any available
    session using

    the *NEXT_AVAILABLE* constant.



    > [!NOTE]

    > This object is not thread-safe.

    >'
  syntax:
    content: SessionReceiver(handler_id, source, auth_config, session=None, connection=None,
      encoding='UTF-8', debug=False, **kwargs)
    parameters:
    - description: The ID used as the connection name for the Receiver.
      id: handler_id
      type:
      - str
    - description: The endpoint from which to receive messages.
      id: source
      type:
      - uamqp.Source
    - description: The SASL auth credentials.
      id: auth_config
      type:
      - dict[str, str]
    - description: The ID of the session to receive from.
      id: session
      type:
      - str
      - azure.servicebus.common.constants.NEXT_AVAILABLE
    - description: An async event loop
      id: loop
      type:
      - asyncio.EventLoop
    - description: A shared connection [not yet supported].
      id: connection
      type:
      - uamqp.Connection
    - description: The receive connection mode. Value must be either PeekLock or ReceiveAndDelete.
      id: mode
      type:
      - azure.servicebus.common.constants.ReceiveSettleMode
    - description: The encoding used for string properties. Default is 'UTF-8'.
      id: encoding
      type:
      - str
    - description: Whether to enable network trace debug logs.
      id: debug
      type:
      - bool
  type: class
  uid: azure.servicebus.receive_handler.SessionReceiver
- class: azure.servicebus.receive_handler.SessionReceiver
  fullName: azure.servicebus.receive_handler.SessionReceiver.get_session_state
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: get_session_state()
  namewithoutparameters: get_session_state
  summary: 'Get the session state.


    Returns None if no state has been set.'
  syntax:
    content: get_session_state()
    parameters: []
    return:
      type:
      - str
  type: method
  uid: azure.servicebus.receive_handler.SessionReceiver.get_session_state
- class: azure.servicebus.receive_handler.SessionReceiver
  fullName: azure.servicebus.receive_handler.SessionReceiver.list_sessions
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: list_sessions(updated_since=None, max_results=100, skip=0)
  namewithoutparameters: list_sessions
  summary: 'List session IDs.


    List the Session IDs with pending messages in the queue where the state of the
    session

    has been updated since the timestamp provided. If no timestamp is provided, all
    will be returned.

    If the state of a Session has never been set, it will not be returned regardless
    of whether

    there are messages pending.'
  syntax:
    content: list_sessions(updated_since=None, max_results=100, skip=0)
    parameters:
    - defaultValue: None
      description: The UTC datetime from which to return updated pending Session IDs.
      id: updated_since
      type:
      - datetime.datetime
    - defaultValue: '100'
      description: The maximum number of Session IDs to return. Default value is 100.
      id: max_results
      type:
      - int
    - defaultValue: '0'
      description: The page value to jump to. Default value is 0.
      id: skip
      type:
      - int
    return:
      type:
      - list[str]
  type: method
  uid: azure.servicebus.receive_handler.SessionReceiver.list_sessions
- class: azure.servicebus.receive_handler.SessionReceiver
  fullName: azure.servicebus.receive_handler.SessionReceiver.peek
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: peek(count=1, start_from=None)
  namewithoutparameters: peek
  summary: 'Browse messages currently pending in the queue.


    Peeked messages are not removed from queue, nor are they locked. They cannot be
    completed,

    deferred or dead-lettered.

    This operation will only peek pending messages in the current session.'
  syntax:
    content: peek(count=1, start_from=None)
    parameters:
    - defaultValue: '1'
      description: 'The maximum number of messages to try and peek. The default

        value is 1.'
      id: count
      type:
      - int
    - defaultValue: None
      description: A message sequence number from which to start browsing messages.
      id: start_from
      type:
      - int
    return:
      type:
      - list[azure.servicebus.common.message.PeekMessage]
  type: method
  uid: azure.servicebus.receive_handler.SessionReceiver.peek
- class: azure.servicebus.receive_handler.SessionReceiver
  fullName: azure.servicebus.receive_handler.SessionReceiver.receive_deferred_messages
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: 'receive_deferred_messages(sequence_numbers, mode=<ReceiveSettleMode.PeekLock:
    <ReceiverSettleMode.PeekLock: 1>>)'
  namewithoutparameters: receive_deferred_messages
  summary: 'Receive messages that have previously been deferred.


    This operation can only receive deferred messages from the current session.

    When receiving deferred messages from a partitioned entity, all of the supplied

    sequence numbers must be messages from the same partition.'
  syntax:
    content: 'receive_deferred_messages(sequence_numbers, mode=<ReceiveSettleMode.PeekLock:
      <ReceiverSettleMode.PeekLock: 1>>)'
    parameters:
    - description: 'A list of the sequence numbers of messages that have been

        deferred.'
      id: sequence_numbers
      isRequired: true
      type:
      - list[int]
    - defaultValue: ReceiveSettleMode.PeekLock
      description: The receive mode, default value is PeekLock.
      id: mode
      type:
      - azure.servicebus.common.constants.ReceiveSettleMode
    return:
      type:
      - list[azure.servicebus.common.message.DeferredMessage]
  type: method
  uid: azure.servicebus.receive_handler.SessionReceiver.receive_deferred_messages
- class: azure.servicebus.receive_handler.SessionReceiver
  fullName: azure.servicebus.receive_handler.SessionReceiver.renew_lock
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: renew_lock()
  namewithoutparameters: renew_lock
  summary: 'Renew the session lock.


    This operation must be performed periodically in order to retain a lock on the

    session to continue message processing.

    Once the lock is lost the connection will be closed. This operation can

    also be performed as a threaded background task by registering the session

    with an *azure.servicebus.AutoLockRenew* instance.'
  syntax:
    content: renew_lock()
    parameters: []
  type: method
  uid: azure.servicebus.receive_handler.SessionReceiver.renew_lock
- class: azure.servicebus.receive_handler.SessionReceiver
  fullName: azure.servicebus.receive_handler.SessionReceiver.set_session_state
  langs:
  - python
  module: azure.servicebus.receive_handler
  name: set_session_state(state)
  namewithoutparameters: set_session_state
  summary: Set the session state.
  syntax:
    content: set_session_state(state)
    parameters:
    - description: The state value.
      id: state
      isRequired: true
      type:
      - str, bytes
      - bytearray
  type: method
  uid: azure.servicebus.receive_handler.SessionReceiver.set_session_state
references:
- fullName: azure.servicebus.receive_handler.SessionReceiver.get_session_state
  isExternal: false
  name: get_session_state()
  parent: azure.servicebus.receive_handler.SessionReceiver
  uid: azure.servicebus.receive_handler.SessionReceiver.get_session_state
- fullName: azure.servicebus.receive_handler.SessionReceiver.list_sessions
  isExternal: false
  name: list_sessions(updated_since=None, max_results=100, skip=0)
  parent: azure.servicebus.receive_handler.SessionReceiver
  uid: azure.servicebus.receive_handler.SessionReceiver.list_sessions
- fullName: azure.servicebus.receive_handler.SessionReceiver.peek
  isExternal: false
  name: peek(count=1, start_from=None)
  parent: azure.servicebus.receive_handler.SessionReceiver
  uid: azure.servicebus.receive_handler.SessionReceiver.peek
- fullName: azure.servicebus.receive_handler.SessionReceiver.receive_deferred_messages
  isExternal: false
  name: 'receive_deferred_messages(sequence_numbers, mode=<ReceiveSettleMode.PeekLock:
    <ReceiverSettleMode.PeekLock: 1>>)'
  parent: azure.servicebus.receive_handler.SessionReceiver
  uid: azure.servicebus.receive_handler.SessionReceiver.receive_deferred_messages
- fullName: azure.servicebus.receive_handler.SessionReceiver.renew_lock
  isExternal: false
  name: renew_lock()
  parent: azure.servicebus.receive_handler.SessionReceiver
  uid: azure.servicebus.receive_handler.SessionReceiver.renew_lock
- fullName: azure.servicebus.receive_handler.SessionReceiver.set_session_state
  isExternal: false
  name: set_session_state(state)
  parent: azure.servicebus.receive_handler.SessionReceiver
  uid: azure.servicebus.receive_handler.SessionReceiver.set_session_state
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
- fullName: list[azure.servicebus.common.message.PeekMessage]
  name: list[PeekMessage]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.servicebus.common.message.PeekMessage
    name: PeekMessage
    uid: azure.servicebus.common.message.PeekMessage
  - fullName: ']'
    name: ']'
  uid: list[azure.servicebus.common.message.PeekMessage]
- fullName: list[int]
  name: list[int]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: int
    name: int
    uid: int
  - fullName: ']'
    name: ']'
  uid: list[int]
- fullName: list[azure.servicebus.common.message.DeferredMessage]
  name: list[DeferredMessage]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.servicebus.common.message.DeferredMessage
    name: DeferredMessage
    uid: azure.servicebus.common.message.DeferredMessage
  - fullName: ']'
    name: ']'
  uid: list[azure.servicebus.common.message.DeferredMessage]
- fullName: str, bytes
  name: str, bytes
  spec.python:
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: bytes
    name: bytes
    uid: bytes
  uid: str, bytes
