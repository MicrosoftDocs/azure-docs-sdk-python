### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.aio.async_message.Message.abandon
  - azure.servicebus.aio.async_message.Message.complete
  - azure.servicebus.aio.async_message.Message.dead_letter
  - azure.servicebus.aio.async_message.Message.defer
  - azure.servicebus.aio.async_message.Message.renew_lock
  class: azure.servicebus.aio.async_message.Message
  fullName: azure.servicebus.aio.async_message.Message
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.servicebus.common.message.Message
  langs:
  - python
  module: azure.servicebus.aio.async_message
  name: Message
  summary: A Service Bus Message.
  syntax:
    content: Message(body, *, encoding='UTF-8', loop=None, **kwargs)
    parameters:
    - description: The data to send in a single message. The maximum size per message
        is 256 kB.
      id: body
      type:
      - str
      - bytes
    - description: The encoding for string data. Default is UTF-8.
      id: encoding
      type:
      - str
  type: class
  uid: azure.servicebus.aio.async_message.Message
- class: azure.servicebus.aio.async_message.Message
  fullName: azure.servicebus.aio.async_message.Message.abandon
  langs:
  - python
  module: azure.servicebus.aio.async_message
  name: abandon()
  namewithoutparameters: abandon
  summary: 'Abandon the message.


    This message will be returned to the queue to be reprocessed.'
  syntax:
    content: abandon()
    parameters: []
  type: method
  uid: azure.servicebus.aio.async_message.Message.abandon
- class: azure.servicebus.aio.async_message.Message
  fullName: azure.servicebus.aio.async_message.Message.complete
  langs:
  - python
  module: azure.servicebus.aio.async_message
  name: complete()
  namewithoutparameters: complete
  summary: Complete the message. This removes the message from the queue.
  syntax:
    content: complete()
    parameters: []
  type: method
  uid: azure.servicebus.aio.async_message.Message.complete
- class: azure.servicebus.aio.async_message.Message
  fullName: azure.servicebus.aio.async_message.Message.dead_letter
  langs:
  - python
  module: azure.servicebus.aio.async_message
  name: dead_letter(description=None)
  namewithoutparameters: dead_letter
  summary: 'Move the message to the Dead Letter queue.


    The Dead Letter queue is a sub-queue that can be

    used to store messages that failed to process correctly, or otherwise require
    further inspection

    or processing. The queue can also be configured to send expired messages to the
    Dead Letter queue.

    To receive dead-lettered messages, use *QueueClient.get_deadletter_receiver()*
    or

    *SubscriptionClient.get_deadletter_receiver()*.'
  syntax:
    content: dead_letter(description=None)
    parameters:
    - defaultValue: None
      description: The reason for dead-lettering the message.
      id: description
      type:
      - str
  type: method
  uid: azure.servicebus.aio.async_message.Message.dead_letter
- class: azure.servicebus.aio.async_message.Message
  fullName: azure.servicebus.aio.async_message.Message.defer
  langs:
  - python
  module: azure.servicebus.aio.async_message
  name: defer()
  namewithoutparameters: defer
  summary: 'Defer the message.


    This message will remain in the queue but must be received

    specifically by its sequence number in order to be processed.'
  syntax:
    content: defer()
    parameters: []
  type: method
  uid: azure.servicebus.aio.async_message.Message.defer
- class: azure.servicebus.aio.async_message.Message
  fullName: azure.servicebus.aio.async_message.Message.renew_lock
  langs:
  - python
  module: azure.servicebus.aio.async_message
  name: renew_lock()
  namewithoutparameters: renew_lock
  summary: 'Renew the message lock.


    This will maintain the lock on the message to ensure

    it is not returned to the queue to be reprocessed. In order to complete (or otherwise
    settle)

    the message, the lock must be maintained. Messages received via ReceiveAndDelete
    mode are not

    locked, and therefore cannot be renewed. This operation can also be performed
    as an asynchronous

    background task by registering the message with an *azure.servicebus.aio.AutoLockRenew*
    instance.

    This operation is only available for non-sessionful messages.'
  syntax:
    content: renew_lock()
    parameters: []
  type: method
  uid: azure.servicebus.aio.async_message.Message.renew_lock
references:
- fullName: azure.servicebus.aio.async_message.Message.abandon
  isExternal: false
  name: abandon()
  parent: azure.servicebus.aio.async_message.Message
  uid: azure.servicebus.aio.async_message.Message.abandon
- fullName: azure.servicebus.aio.async_message.Message.complete
  isExternal: false
  name: complete()
  parent: azure.servicebus.aio.async_message.Message
  uid: azure.servicebus.aio.async_message.Message.complete
- fullName: azure.servicebus.aio.async_message.Message.dead_letter
  isExternal: false
  name: dead_letter(description=None)
  parent: azure.servicebus.aio.async_message.Message
  uid: azure.servicebus.aio.async_message.Message.dead_letter
- fullName: azure.servicebus.aio.async_message.Message.defer
  isExternal: false
  name: defer()
  parent: azure.servicebus.aio.async_message.Message
  uid: azure.servicebus.aio.async_message.Message.defer
- fullName: azure.servicebus.aio.async_message.Message.renew_lock
  isExternal: false
  name: renew_lock()
  parent: azure.servicebus.aio.async_message.Message
  uid: azure.servicebus.aio.async_message.Message.renew_lock
