### YamlMime:PythonClass
uid: azure.servicebus.amqp.AmqpMessageHeader
name: AmqpMessageHeader
fullName: azure.servicebus.amqp.AmqpMessageHeader
module: azure.servicebus.amqp
inheritances:
- azure.servicebus.amqp._amqp_message.DictMixin
summary: 'The Message header.

  The Message header. This is only used on received message, and not

  set on messages being sent. The properties set on any given message

  will depend on the Service and not all messages will have all properties.

  Please refer to the AMQP spec:

  [http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-header](http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-header)

  for more information on the message header.'
constructor:
  syntax: 'AmqpMessageHeader(*, delivery_count: int | None = None, time_to_live: int
    | None = None, durable: bool | None = None, first_acquirer: bool | None = None,
    priority: int | None = None, **kwargs: Any)'
  keywordOnlyParameters:
  - name: delivery_count
    description: 'The number of unsuccessful previous attempts to deliver

      this message. If this value is non-zero it can be taken as an indication that
      the

      delivery might be a duplicate. On first delivery, the value is zero. It is

      incremented upon an outcome being settled at the sender, according to rules

      defined for each outcome.'
    types:
    - <xref:typing.Optional>[<xref:int>]
  - name: time_to_live
    description: 'Duration in milliseconds for which the message is to be considered
      "live".

      If this is set then a message expiration time will be computed based on the
      time of arrival

      at an intermediary. Messages that live longer than their expiration time will
      be discarded

      (or dead lettered). When a message is transmitted by an intermediary that was
      received

      with a ttl, the transmitted message''s header SHOULD contain a ttl that is computed
      as the

      difference between the current time and the formerly computed message expiration
      time,

      i.e., the reduced ttl, so that messages will eventually die if they end up in
      a delivery loop.'
    types:
    - <xref:typing.Optional>[<xref:int>]
  - name: durable
    description: 'Durable messages MUST NOT be lost even if an intermediary is unexpectedly
      terminated

      and restarted. A target which is not capable of fulfilling this guarantee MUST
      NOT accept messages

      where the durable header is set to *True*: if the source allows the rejected
      outcome then the

      message SHOULD be rejected with the precondition-failed error, otherwise the
      link MUST be detached

      by the receiver with the same error.'
    types:
    - <xref:typing.Optional>[<xref:bool>]
  - name: first_acquirer
    description: 'If this value is *True*, then this message has not been acquired

      by any other link. If this value is *False*, then this message MAY have previously

      been acquired by another link or links.'
    types:
    - <xref:typing.Optional>[<xref:bool>]
  - name: priority
    description: 'This field contains the relative message priority. Higher numbers
      indicate higher

      priority messages. Messages with higher priorities MAY be delivered before those
      with lower priorities.'
    types:
    - <xref:typing.Optional>[<xref:int>]
variables:
- description: 'The number of unsuccessful previous attempts to deliver

    this message. If this value is non-zero it can be taken as an indication that
    the

    delivery might be a duplicate. On first delivery, the value is zero. It is

    incremented upon an outcome being settled at the sender, according to rules

    defined for each outcome.'
  name: delivery_count
  types:
  - <xref:typing.Optional>[<xref:int>]
- description: 'Duration in milliseconds for which the message is to be considered
    "live".

    If this is set then a message expiration time will be computed based on the time
    of arrival

    at an intermediary. Messages that live longer than their expiration time will
    be discarded

    (or dead lettered). When a message is transmitted by an intermediary that was
    received

    with a ttl, the transmitted message''s header SHOULD contain a ttl that is computed
    as the

    difference between the current time and the formerly computed message expiration
    time,

    i.e., the reduced ttl, so that messages will eventually die if they end up in
    a delivery loop.'
  name: time_to_live
  types:
  - <xref:typing.Optional>[<xref:int>]
- description: 'Durable messages MUST NOT be lost even if an intermediary is unexpectedly
    terminated

    and restarted. A target which is not capable of fulfilling this guarantee MUST
    NOT accept messages

    where the durable header is set to *True*: if the source allows the rejected outcome
    then the

    message SHOULD be rejected with the precondition-failed error, otherwise the link
    MUST be detached

    by the receiver with the same error.'
  name: durable
  types:
  - <xref:typing.Optional>[<xref:bool>]
- description: 'If this value is *True*, then this message has not been acquired

    by any other link. If this value is *False*, then this message MAY have previously

    been acquired by another link or links.'
  name: first_acquirer
  types:
  - <xref:typing.Optional>[<xref:bool>]
- description: 'This field contains the relative message priority. Higher numbers
    indicate higher

    priority messages. Messages with higher priorities MAY be delivered before those
    with lower priorities.'
  name: priority
  types:
  - <xref:typing.Optional>[<xref:int>]
methods:
- uid: azure.servicebus.amqp.AmqpMessageHeader.get
  name: get
  signature: 'get(key: str, default: Any | None = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.servicebus.amqp.AmqpMessageHeader.has_key
  name: has_key
  signature: 'has_key(k: str) -> bool'
  parameters:
  - name: k
    isRequired: true
- uid: azure.servicebus.amqp.AmqpMessageHeader.items
  name: items
  signature: items() -> List[Tuple[str, Any]]
- uid: azure.servicebus.amqp.AmqpMessageHeader.keys
  name: keys
  signature: keys() -> List[str]
- uid: azure.servicebus.amqp.AmqpMessageHeader.update
  name: update
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.servicebus.amqp.AmqpMessageHeader.values
  name: values
  signature: values() -> List[Any]
