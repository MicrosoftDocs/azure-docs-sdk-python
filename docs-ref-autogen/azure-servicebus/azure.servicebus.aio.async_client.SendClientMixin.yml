### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.aio.async_client.SendClientMixin.get_sender
  - azure.servicebus.aio.async_client.SendClientMixin.send
  class: azure.servicebus.aio.async_client.SendClientMixin
  fullName: azure.servicebus.aio.async_client.SendClientMixin
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.servicebus.aio.async_client
  name: SendClientMixin
  summary: ''
  syntax: {}
  type: class
  uid: azure.servicebus.aio.async_client.SendClientMixin
- class: azure.servicebus.aio.async_client.SendClientMixin
  fullName: azure.servicebus.aio.async_client.SendClientMixin.get_sender
  langs:
  - python
  module: azure.servicebus.aio.async_client
  name: get_sender(message_timeout=0, session=None, **kwargs)
  namewithoutparameters: get_sender
  summary: 'Get a Sender for the Service Bus endpoint.


    A Sender represents a single open connection within which multiple send operations
    can be made.'
  syntax:
    content: get_sender(message_timeout=0, session=None, **kwargs)
    parameters:
    - defaultValue: '0'
      description: 'The period in seconds during which messages sent with

        this Sender must be sent. If the send is not completed in this time it will
        fail.'
      id: message_timeout
      type:
      - int
    - defaultValue: None
      description: 'An optional session ID. If supplied this session ID will be

        applied to every outgoing message sent with this Sender.

        If an individual message already has a session ID, that will be

        used instead. If no session ID is supplied here, nor set on an outgoing

        message, a ValueError will be raised if the entity is sessionful.'
      id: session
      type:
      - str
      - uuid.Guid
    return:
      description: A Sender instance with an unopened connection.
      type:
      - azure.servicebus.aio.async_send_handler.Sender
  type: method
  uid: azure.servicebus.aio.async_client.SendClientMixin.get_sender
- class: azure.servicebus.aio.async_client.SendClientMixin
  fullName: azure.servicebus.aio.async_client.SendClientMixin.send
  langs:
  - python
  module: azure.servicebus.aio.async_client
  name: send(messages, message_timeout=0, session=None, **kwargs)
  namewithoutparameters: send
  summary: 'Send one or more messages to the current entity.


    This operation will open a single-use connection, send the supplied messages,
    and close

    connection. If the entity requires sessions, a session ID must be either

    provided here, or set on each outgoing message.'
  syntax:
    content: send(messages, message_timeout=0, session=None, **kwargs)
    parameters:
    - description: One or more messages to be sent.
      id: messages
      isRequired: true
      type:
      - azure.servicebus.aio.async_message.Message
      - list[azure.servicebus.aio.async_message.Message]
    - defaultValue: '0'
      description: 'The period in seconds during which the Message must be

        sent. If the send is not completed in this time it will return a failure result.'
      id: message_timeout
      type:
      - int
    - defaultValue: None
      description: 'An optional session ID. If supplied this session ID will be

        applied to every outgoing message sent with this Sender.

        If an individual message already has a session ID, that will be

        used instead. If no session ID is supplied here, nor set on an outgoing

        message, a ValueError will be raised if the entity is sessionful.'
      id: session
      type:
      - str
      - uuid.Guid
    return:
      description: 'A list of the send results of all the messages. Each

        send result is a tuple with two values. The first is a boolean, indicating
        *True*

        if the message sent, or *False* if it failed. The second is an error if the
        message

        failed, otherwise it will be *None*.'
      type:
      - list[tuple[bool, azure.servicebus.common.errors.MessageSendFailed]]
  type: method
  uid: azure.servicebus.aio.async_client.SendClientMixin.send
references:
- fullName: azure.servicebus.aio.async_client.SendClientMixin.get_sender
  isExternal: false
  name: get_sender(message_timeout=0, session=None, **kwargs)
  parent: azure.servicebus.aio.async_client.SendClientMixin
  uid: azure.servicebus.aio.async_client.SendClientMixin.get_sender
- fullName: azure.servicebus.aio.async_client.SendClientMixin.send
  isExternal: false
  name: send(messages, message_timeout=0, session=None, **kwargs)
  parent: azure.servicebus.aio.async_client.SendClientMixin
  uid: azure.servicebus.aio.async_client.SendClientMixin.send
- fullName: list[azure.servicebus.aio.async_message.Message]
  name: list[Message]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.servicebus.aio.async_message.Message
    name: Message
    uid: azure.servicebus.aio.async_message.Message
  - fullName: ']'
    name: ']'
  uid: list[azure.servicebus.aio.async_message.Message]
- fullName: list[tuple[bool, azure.servicebus.common.errors.MessageSendFailed]]
  name: list[tuple[bool, MessageSendFailed]]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: tuple
    name: tuple
    uid: tuple
  - fullName: '['
    name: '['
  - fullName: bool
    name: bool
    uid: bool
  - fullName: ', '
    name: ', '
  - fullName: azure.servicebus.common.errors.MessageSendFailed
    name: MessageSendFailed
    uid: azure.servicebus.common.errors.MessageSendFailed
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: list[tuple[bool, azure.servicebus.common.errors.MessageSendFailed]]
