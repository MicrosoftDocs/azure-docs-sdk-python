### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.send_handler.SessionSender.queue_message
  - azure.servicebus.send_handler.SessionSender.schedule
  - azure.servicebus.send_handler.SessionSender.send
  class: azure.servicebus.send_handler.SessionSender
  fullName: azure.servicebus.send_handler.SessionSender
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.servicebus.base_handler.BaseHandler
    - inheritance:
      - type: builtins.object
      type: azure.servicebus.common.mixins.SenderMixin
    type: azure.servicebus.send_handler.Sender
  langs:
  - python
  module: azure.servicebus.send_handler
  name: SessionSender
  summary: 'A session message sender.


    This handler is for sending messages to a sessionful Service Bus entity.

    It operates a single connection that must be opened and closed on completion.

    The Sender can be run within a context manager to ensure that the connection is
    closed on exit.

    The Sender should not be instantiated directly, and should be accessed from a
    *QueueClient* or

    *TopicClient* using the *get_sender()* method.

    An attempt to send a message without a session ID specified either on the Sender
    or the message

    will raise a *ValueError*.



    > [!NOTE]

    > This object is not thread-safe.

    >'
  syntax:
    content: SessionSender(handler_id, target, auth_config, session=None, connection=None,
      encoding='UTF-8', debug=False, **kwargs)
    parameters:
    - description: The ID used as the connection name for the Sender.
      id: handler_id
      type:
      - str
    - description: The endpoint to send messages to.
      id: target
      type:
      - uamqp.Target
    - description: The SASL auth credentials.
      id: auth_config
      type:
      - dict[str, str]
    - description: 'An optional session ID. If supplied, all outgoing messages will
        have this

        session ID added (unless they already have one specified).'
      id: session
      type:
      - str
    - description: A shared connection [not yet supported].
      id: connection
      type:
      - uamqp.Connection
    - description: The encoding used for string properties. Default is 'UTF-8'.
      id: encoding
      type:
      - str
    - description: Whether to enable network trace debug logs.
      id: debug
      type:
      - bool
  type: class
  uid: azure.servicebus.send_handler.SessionSender
- class: azure.servicebus.send_handler.SessionSender
  fullName: azure.servicebus.send_handler.SessionSender.queue_message
  langs:
  - python
  module: azure.servicebus.send_handler
  name: queue_message(message)
  namewithoutparameters: queue_message
  summary: 'Queue a message to be sent later.


    This operation should be followed up with send_pending_messages. If neither the
    Sender nor the message

    has a session ID, a *ValueError* will be raised.'
  syntax:
    content: queue_message(message)
    parameters:
    - description: The message to be sent.
      id: message
      isRequired: true
      type:
      - azure.servicebus.Message
  type: method
  uid: azure.servicebus.send_handler.SessionSender.queue_message
- class: azure.servicebus.send_handler.SessionSender
  fullName: azure.servicebus.send_handler.SessionSender.schedule
  langs:
  - python
  module: azure.servicebus.send_handler
  name: schedule(schedule_time, *messages)
  namewithoutparameters: schedule
  summary: 'Send one or more messages to be enqueued at a specific time.


    Returns a list of the sequence numbers of the enqueued messages.'
  syntax:
    content: schedule(schedule_time, *messages)
    parameters:
    - description: The date and time to enqueue the messages.
      id: schedule_time
      isRequired: true
      type:
      - datetime.datetime
    - description: The messages to schedule.
      id: messages
      isRequired: true
      type:
      - azure.servicebus.common.message.Message
    return:
      type:
      - list[int]
  type: method
  uid: azure.servicebus.send_handler.SessionSender.schedule
- class: azure.servicebus.send_handler.SessionSender
  fullName: azure.servicebus.send_handler.SessionSender.send
  langs:
  - python
  module: azure.servicebus.send_handler
  name: send(message)
  namewithoutparameters: send
  summary: 'Send a message and blocks until acknowledgement is received or the operation
    fails.


    If neither the Sender nor the message has a session ID, a *ValueError* will be
    raised.'
  syntax:
    content: send(message)
    parameters:
    - description: The message to be sent.
      id: message
      isRequired: true
      type:
      - azure.servicebus.common.message.Message
  type: method
  uid: azure.servicebus.send_handler.SessionSender.send
references:
- fullName: azure.servicebus.send_handler.SessionSender.queue_message
  isExternal: false
  name: queue_message(message)
  parent: azure.servicebus.send_handler.SessionSender
  uid: azure.servicebus.send_handler.SessionSender.queue_message
- fullName: azure.servicebus.send_handler.SessionSender.schedule
  isExternal: false
  name: schedule(schedule_time, *messages)
  parent: azure.servicebus.send_handler.SessionSender
  uid: azure.servicebus.send_handler.SessionSender.schedule
- fullName: azure.servicebus.send_handler.SessionSender.send
  isExternal: false
  name: send(message)
  parent: azure.servicebus.send_handler.SessionSender
  uid: azure.servicebus.send_handler.SessionSender.send
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
- fullName: list[int]
  name: list[int]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: int
    name: int
    uid: int
  - fullName: ']'
    name: ']'
  uid: list[int]
