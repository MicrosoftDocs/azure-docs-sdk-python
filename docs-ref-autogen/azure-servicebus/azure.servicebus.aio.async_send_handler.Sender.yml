### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.servicebus.aio.async_send_handler.Sender.cancel_scheduled_messages
  - azure.servicebus.aio.async_send_handler.Sender.reconnect
  - azure.servicebus.aio.async_send_handler.Sender.schedule
  - azure.servicebus.aio.async_send_handler.Sender.send
  - azure.servicebus.aio.async_send_handler.Sender.send_pending_messages
  class: azure.servicebus.aio.async_send_handler.Sender
  fullName: azure.servicebus.aio.async_send_handler.Sender
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.servicebus.aio.async_base_handler.BaseHandler
  - inheritance:
    - type: builtins.object
    type: azure.servicebus.common.mixins.SenderMixin
  langs:
  - python
  module: azure.servicebus.aio.async_send_handler
  name: Sender
  summary: 'This handler is for sending messages to a Service Bus entity.


    It operates a single connection that must be opened and closed on completion.

    The Sender can be run within a context manager to ensure that the connection is
    closed on exit.

    The Sender should not be instantiated directly, and should be accessed from a
    *QueueClient* or

    *TopicClient* using the *get_sender()* method.



    > [!NOTE]

    > This object is not thread-safe.

    >'
  syntax:
    content: Sender(handler_id, target, auth_config, *, session=None, loop=None, connection=None,
      encoding='UTF-8', debug=False, **kwargs)
    parameters:
    - description: The ID used as the connection name for the Sender.
      id: handler_id
      type:
      - str
    - description: The endpoint to send messages to.
      id: target
      type:
      - uamqp.Target
    - description: The SASL auth credentials.
      id: auth_config
      type:
      - dict[str, str]
    - description: 'An optional session ID. If supplied, all outgoing messages will
        have this

        session ID added (unless they already have one specified).'
      id: session
      type:
      - str
    - description: An async event loop
      id: loop
      type:
      - asyncio.EventLoop
    - description: A shared connection [not yet supported].
      id: connection
      type:
      - uamqp.Connection
    - description: The encoding used for string properties. Default is 'UTF-8'.
      id: encoding
      type:
      - str
    - description: Whether to enable network trace debug logs.
      id: debug
      type:
      - bool
  type: class
  uid: azure.servicebus.aio.async_send_handler.Sender
- class: azure.servicebus.aio.async_send_handler.Sender
  fullName: azure.servicebus.aio.async_send_handler.Sender.cancel_scheduled_messages
  langs:
  - python
  module: azure.servicebus.aio.async_send_handler
  name: cancel_scheduled_messages(*sequence_numbers)
  namewithoutparameters: cancel_scheduled_messages
  summary: Cancel one or more messages that have previsouly been scheduled and are
    still pending.
  syntax:
    content: cancel_scheduled_messages(*sequence_numbers)
    parameters:
    - description: The seqeuence numbers of the scheduled messages.
      id: sequence_numbers
      isRequired: true
      type:
      - int
  type: method
  uid: azure.servicebus.aio.async_send_handler.Sender.cancel_scheduled_messages
- class: azure.servicebus.aio.async_send_handler.Sender
  fullName: azure.servicebus.aio.async_send_handler.Sender.reconnect
  langs:
  - python
  module: azure.servicebus.aio.async_send_handler
  name: reconnect()
  namewithoutparameters: reconnect
  summary: 'Reconnect the handler.


    If the handler was disconnected from the service with

    a retryable error - attempt to reconnect.

    This method will be called automatically for most retryable errors.

    Also attempts to re-queue any messages that were pending before the reconnect.'
  syntax:
    content: reconnect()
    parameters: []
  type: method
  uid: azure.servicebus.aio.async_send_handler.Sender.reconnect
- class: azure.servicebus.aio.async_send_handler.Sender
  fullName: azure.servicebus.aio.async_send_handler.Sender.schedule
  langs:
  - python
  module: azure.servicebus.aio.async_send_handler
  name: schedule(schedule_time, *messages)
  namewithoutparameters: schedule
  summary: 'Send one or more messages to be enqueued at a specific time.


    Returns a list of the sequence numbers of the enqueued messages.'
  syntax:
    content: schedule(schedule_time, *messages)
    parameters:
    - description: The date and time to enqueue the messages.
      id: schedule_time
      isRequired: true
      type:
      - datetime.datetime
    - description: The messages to schedule.
      id: messages
      isRequired: true
      type:
      - azure.servicebus.aio.async_message.Message
    return:
      type:
      - list[int]
  type: method
  uid: azure.servicebus.aio.async_send_handler.Sender.schedule
- class: azure.servicebus.aio.async_send_handler.Sender
  fullName: azure.servicebus.aio.async_send_handler.Sender.send
  langs:
  - python
  module: azure.servicebus.aio.async_send_handler
  name: send(message)
  namewithoutparameters: send
  summary: Send a message and blocks until acknowledgement is received or the operation
    fails.
  syntax:
    content: send(message)
    parameters:
    - description: The message to be sent.
      id: message
      isRequired: true
      type:
      - azure.servicebus.aio.async_message.Message
  type: method
  uid: azure.servicebus.aio.async_send_handler.Sender.send
- class: azure.servicebus.aio.async_send_handler.Sender
  fullName: azure.servicebus.aio.async_send_handler.Sender.send_pending_messages
  langs:
  - python
  module: azure.servicebus.aio.async_send_handler
  name: send_pending_messages()
  namewithoutparameters: send_pending_messages
  summary: Wait until all pending messages have been sent.
  syntax:
    content: send_pending_messages()
    parameters: []
    return:
      description: 'A list of the send results of all the pending messages. Each

        send result is a tuple with two values. The first is a boolean, indicating
        *True*

        if the message sent, or *False* if it failed. The second is an error if the
        message

        failed, otherwise it will be *None*.'
      type:
      - list[tuple[bool, azure.servicebus.common.errors.MessageSendFailed]]
  type: method
  uid: azure.servicebus.aio.async_send_handler.Sender.send_pending_messages
references:
- fullName: azure.servicebus.aio.async_send_handler.Sender.cancel_scheduled_messages
  isExternal: false
  name: cancel_scheduled_messages(*sequence_numbers)
  parent: azure.servicebus.aio.async_send_handler.Sender
  uid: azure.servicebus.aio.async_send_handler.Sender.cancel_scheduled_messages
- fullName: azure.servicebus.aio.async_send_handler.Sender.reconnect
  isExternal: false
  name: reconnect()
  parent: azure.servicebus.aio.async_send_handler.Sender
  uid: azure.servicebus.aio.async_send_handler.Sender.reconnect
- fullName: azure.servicebus.aio.async_send_handler.Sender.schedule
  isExternal: false
  name: schedule(schedule_time, *messages)
  parent: azure.servicebus.aio.async_send_handler.Sender
  uid: azure.servicebus.aio.async_send_handler.Sender.schedule
- fullName: azure.servicebus.aio.async_send_handler.Sender.send
  isExternal: false
  name: send(message)
  parent: azure.servicebus.aio.async_send_handler.Sender
  uid: azure.servicebus.aio.async_send_handler.Sender.send
- fullName: azure.servicebus.aio.async_send_handler.Sender.send_pending_messages
  isExternal: false
  name: send_pending_messages()
  parent: azure.servicebus.aio.async_send_handler.Sender
  uid: azure.servicebus.aio.async_send_handler.Sender.send_pending_messages
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
- fullName: list[int]
  name: list[int]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: int
    name: int
    uid: int
  - fullName: ']'
    name: ']'
  uid: list[int]
- fullName: list[tuple[bool, azure.servicebus.common.errors.MessageSendFailed]]
  name: list[tuple[bool, MessageSendFailed]]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: tuple
    name: tuple
    uid: tuple
  - fullName: '['
    name: '['
  - fullName: bool
    name: bool
    uid: bool
  - fullName: ', '
    name: ', '
  - fullName: azure.servicebus.common.errors.MessageSendFailed
    name: MessageSendFailed
    uid: azure.servicebus.common.errors.MessageSendFailed
  - fullName: ']'
    name: ']'
  - fullName: ']'
    name: ']'
  uid: list[tuple[bool, azure.servicebus.common.errors.MessageSendFailed]]
