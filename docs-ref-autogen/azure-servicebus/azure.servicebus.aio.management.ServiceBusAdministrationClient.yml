### YamlMime:PythonClass
uid: azure.servicebus.aio.management.ServiceBusAdministrationClient
name: ServiceBusAdministrationClient
fullName: azure.servicebus.aio.management.ServiceBusAdministrationClient
module: azure.servicebus.aio.management
inheritances:
- builtins.object
summary: Use this client to create, update, list, and delete resources of a ServiceBus
  namespace.
constructor:
  syntax: 'ServiceBusAdministrationClient(fully_qualified_namespace: str, credential:
    AsyncTokenCredential, *, api_version: str | ApiVersion = ApiVersion.V2021_05,
    **kwargs: Any)'
  parameters:
  - name: fully_qualified_namespace
    description: The fully qualified host name for the Service Bus namespace.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: To authenticate to manage the entities of the ServiceBus namespace.
    isRequired: true
    types:
    - <xref:AsyncTokenCredential>
  keywordOnlyParameters:
  - name: api_version
    description: 'The Service Bus API version to use for requests. Default value is
      the most

      recent service version that is compatible with the current SDK. Setting to an
      older version may result

      in reduced feature compatibility.'
    defaultValue: ApiVersion.V2021_05
    types:
    - <xref:str>
    - <xref:azure.servicebus.management.ApiVersion>
methods:
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.close
  name: close
  signature: async close() -> None
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.create_queue
  name: create_queue
  summary: Create a queue.
  signature: 'async create_queue(queue_name: str, *, authorization_rules: List[AuthorizationRule]
    | None = None, auto_delete_on_idle: timedelta | str | None = None, dead_lettering_on_message_expiration:
    bool | None = None, default_message_time_to_live: timedelta | str | None = None,
    duplicate_detection_history_time_window: timedelta | str | None = None, enable_batched_operations:
    bool | None = None, enable_express: bool | None = None, enable_partitioning: bool
    | None = None, lock_duration: timedelta | str | None = None, max_delivery_count:
    int | None = None, max_size_in_megabytes: int | None = None, requires_duplicate_detection:
    bool | None = None, requires_session: bool | None = None, forward_to: str | None
    = None, user_metadata: str | None = None, forward_dead_lettered_messages_to: str
    | None = None, max_message_size_in_kilobytes: int | None = None, **kwargs: Any)
    -> QueueProperties'
  parameters:
  - name: queue_name
    description: Name of the queue.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: authorization_rules
    description: Authorization rules for resource.
    types:
    - <xref:list>[<xref:azure.servicebus.management.AuthorizationRule>]
  - name: auto_delete_on_idle
    description: 'ISO 8601 timeSpan idle interval after which the queue is

      automatically deleted. The minimum duration is 5 minutes.

      Input value of either type ~datetime.timedelta or string in ISO 8601 duration
      format like "PT300S" is accepted.'
    types:
    - <xref:typing.Union>[<xref:datetime.timedelta>, <xref:str>]
  - name: dead_lettering_on_message_expiration
    description: 'A value that indicates whether this queue has dead

      letter support when a message expires.'
    types:
    - <xref:bool>
  - name: default_message_time_to_live
    description: 'ISO 8601 default message timespan to live value. This is

      the duration after which the message expires, starting from when the message
      is sent to Service

      Bus. This is the default value used when TimeToLive is not set on a message
      itself.

      Input value of either type ~datetime.timedelta or string in ISO 8601 duration
      format like "PT300S" is accepted.'
    types:
    - <xref:typing.Union>[<xref:datetime.timedelta>, <xref:str>]
  - name: duplicate_detection_history_time_window
    description: 'ISO 8601 timeSpan structure that defines the

      duration of the duplicate detection history. The default value is 10 minutes.

      Input value of either type ~datetime.timedelta or string in ISO 8601 duration
      format like "PT300S" is accepted.'
    types:
    - <xref:typing.Union>[<xref:datetime.timedelta>, <xref:str>]
  - name: enable_batched_operations
    description: 'Value that indicates whether server-side batched operations

      are enabled.'
    types:
    - <xref:bool>
  - name: enable_express
    description: 'A value that indicates whether Express Entities are enabled. An
      express

      queue holds a message in memory temporarily before writing it to persistent
      storage.'
    types:
    - <xref:bool>
  - name: enable_partitioning
    description: 'A value that indicates whether the queue is to be partitioned

      across multiple message brokers.'
    types:
    - <xref:bool>
  - name: lock_duration
    description: 'ISO 8601 timespan duration of a peek-lock; that is, the amount of
      time

      that the message is locked for other receivers. The maximum value for LockDuration
      is 5

      minutes; the default value is 1 minute.

      Input value of either type ~datetime.timedelta or string in ISO 8601 duration
      format like "PT300S" is accepted.'
    types:
    - <xref:typing.Union>[<xref:datetime.timedelta>, <xref:str>]
  - name: max_delivery_count
    description: 'The maximum delivery count. A message is automatically deadlettered

      after this number of deliveries. Default value is 10.'
    types:
    - <xref:int>
  - name: max_size_in_megabytes
    description: 'The maximum size of the queue in megabytes, which is the size of

      memory allocated for the queue.'
    types:
    - <xref:int>
  - name: requires_duplicate_detection
    description: 'A value indicating if this queue requires duplicate

      detection.'
    types:
    - <xref:bool>
  - name: requires_session
    description: 'A value that indicates whether the queue supports the concept of

      sessions.'
    types:
    - <xref:bool>
  - name: forward_to
    description: 'The name of the recipient entity to which all the messages sent
      to the queue

      are forwarded to.'
    types:
    - <xref:str>
  - name: user_metadata
    description: 'Custom metdata that user can associate with the description. Max
      length

      is 1024 chars.'
    types:
    - <xref:str>
  - name: forward_dead_lettered_messages_to
    description: 'The name of the recipient entity to which all the

      dead-lettered messages of this subscription are forwarded to.'
    types:
    - <xref:str>
  - name: max_message_size_in_kilobytes
    description: 'The maximum size in kilobytes of message payload that

      can be accepted by the queue. This feature is only available when using a Premium
      namespace

      and Service Bus API version "2021-05" or higher.

      The minimum allowed value is 1024 while the maximum allowed value is 102400.
      Default value is 1024.'
    types:
    - <xref:int>
  return:
    types:
    - <xref:azure.servicebus.management.QueueProperties>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.create_rule
  name: create_rule
  summary: Create a rule for a topic subscription.
  signature: 'async create_rule(topic_name: str, subscription_name: str, rule_name:
    str, *, filter: ~azure.servicebus.management._models.CorrelationRuleFilter | ~azure.servicebus.management._models.SqlRuleFilter
    = <azure.servicebus.management._models.TrueRuleFilter object>, action: ~azure.servicebus.management._models.SqlRuleAction
    | None = None, **kwargs: ~typing.Any) -> RuleProperties'
  parameters:
  - name: topic_name
    description: 'The topic that will own the

      to-be-created subscription rule.'
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: 'The subscription that

      will own the to-be-created rule.'
    isRequired: true
    types:
    - <xref:str>
  - name: rule_name
    description: Name of the rule.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: filter
    description: The filter of the rule. The default value is ~azure.servicebus.management.TrueRuleFilter
    defaultValue: <azure.servicebus.management._models.TrueRuleFilter object at 0x0000025E89CB8C90>
    types:
    - <xref:typing.Union>[<xref:azure.servicebus.management.CorrelationRuleFilter>,
      <xref:azure.servicebus.management.SqlRuleFilter>]
  - name: action
    description: The action of the rule.
    types:
    - <xref:typing.Optional>[<xref:azure.servicebus.management.SqlRuleAction>]
  return:
    types:
    - <xref:azure.servicebus.management.RuleProperties>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.create_subscription
  name: create_subscription
  summary: Create a topic subscription.
  signature: 'async create_subscription(topic_name: str, subscription_name: str, *,
    lock_duration: timedelta | str | None = None, requires_session: bool | None =
    None, default_message_time_to_live: timedelta | str | None = None, dead_lettering_on_message_expiration:
    bool | None = None, dead_lettering_on_filter_evaluation_exceptions: bool | None
    = None, max_delivery_count: int | None = None, enable_batched_operations: bool
    | None = None, forward_to: str | None = None, user_metadata: str | None = None,
    forward_dead_lettered_messages_to: str | None = None, auto_delete_on_idle: timedelta
    | str | None = None, **kwargs: Any) -> SubscriptionProperties'
  parameters:
  - name: topic_name
    description: 'The topic that will own the

      to-be-created subscription.'
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: Name of the subscription.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: lock_duration
    description: 'ISO 8601 timespan duration of a peek-lock; that is, the amount of
      time

      that the message is locked for other receivers. The maximum value for LockDuration
      is 5

      minutes; the default value is 1 minute.

      Input value of either type ~datetime.timedelta or string in ISO 8601 duration
      format like "PT300S" is accepted.'
    types:
    - <xref:typing.Union>[<xref:datetime.timedelta>, <xref:str>]
  - name: requires_session
    description: 'A value that indicates whether the queue supports the concept of

      sessions.'
    types:
    - <xref:bool>
  - name: default_message_time_to_live
    description: 'ISO 8601 default message timespan to live value. This is

      the duration after which the message expires, starting from when the message
      is sent to Service

      Bus. This is the default value used when TimeToLive is not set on a message
      itself.

      Input value of either type ~datetime.timedelta or string in ISO 8601 duration
      format like "PT300S" is accepted.'
    types:
    - <xref:typing.Union>[<xref:datetime.timedelta>, <xref:str>]
  - name: dead_lettering_on_message_expiration
    description: 'A value that indicates whether this subscription

      has dead letter support when a message expires.'
    types:
    - <xref:bool>
  - name: dead_lettering_on_filter_evaluation_exceptions
    description: 'A value that indicates whether this

      subscription has dead letter support when a message expires.'
    types:
    - <xref:bool>
  - name: max_delivery_count
    description: 'The maximum delivery count. A message is automatically deadlettered

      after this number of deliveries. Default value is 10.'
    types:
    - <xref:int>
  - name: enable_batched_operations
    description: 'Value that indicates whether server-side batched operations

      are enabled.'
    types:
    - <xref:bool>
  - name: forward_to
    description: 'The name of the recipient entity to which all the messages sent
      to the

      subscription are forwarded to.'
    types:
    - <xref:str>
  - name: user_metadata
    description: 'Metadata associated with the subscription. Maximum number of characters

      is 1024.'
    types:
    - <xref:str>
  - name: forward_dead_lettered_messages_to
    description: 'The name of the recipient entity to which all the

      messages sent to the subscription are forwarded to.'
    types:
    - <xref:str>
  - name: auto_delete_on_idle
    description: 'ISO 8601 timeSpan idle interval after which the subscription is

      automatically deleted. The minimum duration is 5 minutes.

      Input value of either type ~datetime.timedelta or string in ISO 8601 duration
      format like "PT300S" is accepted.'
    types:
    - <xref:typing.Union>[<xref:datetime.timedelta>, <xref:str>]
  return:
    types:
    - <xref:azure.servicebus.management.SubscriptionProperties>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.create_topic
  name: create_topic
  summary: Create a topic.
  signature: 'async create_topic(topic_name: str, *, default_message_time_to_live:
    timedelta | str | None = None, max_size_in_megabytes: int | None = None, requires_duplicate_detection:
    bool | None = None, duplicate_detection_history_time_window: timedelta | str |
    None = None, enable_batched_operations: bool | None = None, size_in_bytes: int
    | None = None, filtering_messages_before_publishing: bool | None = None, authorization_rules:
    List[AuthorizationRule] | None = None, support_ordering: bool | None = None, auto_delete_on_idle:
    timedelta | str | None = None, enable_partitioning: bool | None = None, enable_express:
    bool | None = None, user_metadata: str | None = None, max_message_size_in_kilobytes:
    int | None = None, **kwargs: Any) -> TopicProperties'
  parameters:
  - name: topic_name
    description: Name of the topic.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: default_message_time_to_live
    description: 'ISO 8601 default message timespan to live value. This is

      the duration after which the message expires, starting from when the message
      is sent to Service

      Bus. This is the default value used when TimeToLive is not set on a message
      itself.

      Input value of either type ~datetime.timedelta or string in ISO 8601 duration
      format like "PT300S" is accepted.'
    types:
    - <xref:typing.Union>[<xref:datetime.timedelta>, <xref:str>]
  - name: max_size_in_megabytes
    description: 'The maximum size of the topic in megabytes, which is the size of

      memory allocated for the topic.'
    types:
    - <xref:int>
  - name: requires_duplicate_detection
    description: 'A value indicating if this topic requires duplicate

      detection.'
    types:
    - <xref:bool>
  - name: duplicate_detection_history_time_window
    description: 'ISO 8601 timeSpan structure that defines the

      duration of the duplicate detection history. The default value is 10 minutes.

      Input value of either type ~datetime.timedelta or string in ISO 8601 duration
      format like "PT300S" is accepted.'
    types:
    - <xref:typing.Union>[<xref:datetime.timedelta>, <xref:str>]
  - name: enable_batched_operations
    description: 'Value that indicates whether server-side batched operations

      are enabled.'
    types:
    - <xref:bool>
  - name: size_in_bytes
    description: The size of the topic, in bytes.
    types:
    - <xref:int>
  - name: filtering_messages_before_publishing
    description: Filter messages before publishing.
    types:
    - <xref:bool>
  - name: authorization_rules
    description: Authorization rules for resource.
    types:
    - <xref:list>[<xref:azure.servicebus.management.AuthorizationRule>]
  - name: support_ordering
    description: A value that indicates whether the topic supports ordering.
    types:
    - <xref:bool>
  - name: auto_delete_on_idle
    description: 'ISO 8601 timeSpan idle interval after which the topic is

      automatically deleted. The minimum duration is 5 minutes.

      Input value of either type ~datetime.timedelta or string in ISO 8601 duration
      format like "PT300S" is accepted.'
    types:
    - <xref:typing.Union>[<xref:datetime.timedelta>, <xref:str>]
  - name: enable_partitioning
    description: 'A value that indicates whether the topic is to be partitioned

      across multiple message brokers.'
    types:
    - <xref:bool>
  - name: enable_express
    description: 'A value that indicates whether Express Entities are enabled. An
      express

      queue holds a message in memory temporarily before writing it to persistent
      storage.'
    types:
    - <xref:bool>
  - name: user_metadata
    description: Metadata associated with the topic.
    types:
    - <xref:str>
  - name: max_message_size_in_kilobytes
    description: 'The maximum size in kilobytes of message payload that

      can be accepted by the queue. This feature is only available when using a Premium
      namespace

      and Service Bus API version "2021-05" or higher.

      The minimum allowed value is 1024 while the maximum allowed value is 102400.
      Default value is 1024.'
    types:
    - <xref:int>
  return:
    types:
    - <xref:azure.servicebus.management.TopicProperties>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.delete_queue
  name: delete_queue
  summary: Delete a queue.
  signature: 'async delete_queue(queue_name: str, **kwargs: Any) -> None'
  parameters:
  - name: queue_name
    description: 'The name of the queue or

      a *QueueProperties* with name.'
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:None>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.delete_rule
  name: delete_rule
  summary: Delete a topic subscription rule.
  signature: 'async delete_rule(topic_name: str, subscription_name: str, rule_name:
    str, **kwargs: Any) -> None'
  parameters:
  - name: topic_name
    description: The topic that owns the subscription.
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: 'The subscription that

      owns the topic.'
    isRequired: true
    types:
    - <xref:str>
  - name: rule_name
    description: The to-be-deleted rule.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:None>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.delete_subscription
  name: delete_subscription
  summary: Delete a topic subscription.
  signature: 'async delete_subscription(topic_name: str, subscription_name: str, **kwargs:
    Any) -> None'
  parameters:
  - name: topic_name
    description: The topic that owns the subscription.
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: 'The subscription

      to be deleted.'
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:None>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.delete_topic
  name: delete_topic
  summary: Delete a topic.
  signature: 'async delete_topic(topic_name: str, **kwargs: Any) -> None'
  parameters:
  - name: topic_name
    description: The topic to be deleted.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:None>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.from_connection_string
  name: from_connection_string
  summary: Create a client from connection string.
  signature: 'from_connection_string(conn_str: str, *, api_version: str | ApiVersion
    = ApiVersion.V2021_05, **kwargs: Any) -> ServiceBusAdministrationClient'
  parameters:
  - name: conn_str
    description: The connection string of the Service Bus Namespace.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: api_version
    description: 'The Service Bus API version to use for requests. Default value is
      the most

      recent service version that is compatible with the current SDK. Setting to an
      older version may result

      in reduced feature compatibility.'
    defaultValue: ApiVersion.V2021_05
    types:
    - <xref:str>
    - <xref:azure.servicebus.management.ApiVersion>
  return:
    description: A ServiceBusAdministrationClient.
    types:
    - <xref:azure.servicebus.aio.management.ServiceBusAdministrationClient>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.get_namespace_properties
  name: get_namespace_properties
  summary: Get the namespace properties
  signature: 'async get_namespace_properties(**kwargs: Any) -> NamespaceProperties'
  return:
    description: The namespace properties.
    types:
    - <xref:azure.servicebus.management.NamespaceProperties>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.get_queue
  name: get_queue
  summary: Get the properties of a queue.
  signature: 'async get_queue(queue_name: str, **kwargs: Any) -> QueueProperties'
  parameters:
  - name: queue_name
    description: The name of the queue.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The properties of the Queue.
    types:
    - <xref:azure.servicebus.management.QueueProperties>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.get_queue_runtime_properties
  name: get_queue_runtime_properties
  summary: Get the runtime information of a queue.
  signature: 'async get_queue_runtime_properties(queue_name: str, **kwargs: Any) ->
    QueueRuntimeProperties'
  parameters:
  - name: queue_name
    description: The name of the queue.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The runtime information of the Queue.
    types:
    - <xref:azure.servicebus.management.QueueRuntimeProperties>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.get_rule
  name: get_rule
  summary: Get the properties of a topic subscription rule.
  signature: 'async get_rule(topic_name: str, subscription_name: str, rule_name: str,
    **kwargs: Any) -> RuleProperties'
  parameters:
  - name: topic_name
    description: The topic that owns the subscription.
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: 'The subscription that

      owns the rule.'
    isRequired: true
    types:
    - <xref:str>
  - name: rule_name
    description: Name of the rule.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The properties of the topic subscription rule.
    types:
    - <xref:azure.servicebus.management.RuleProperties>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.get_subscription
  name: get_subscription
  summary: Get the properties of a topic subscription.
  signature: 'async get_subscription(topic_name: str, subscription_name: str, **kwargs:
    Any) -> SubscriptionProperties'
  parameters:
  - name: topic_name
    description: The topic that owns the subscription.
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: name of the subscription.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An instance of SubscriptionProperties.
    types:
    - <xref:azure.servicebus.management.SubscriptionProperties>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.get_subscription_runtime_properties
  name: get_subscription_runtime_properties
  summary: Get a topic subscription runtime info.
  signature: 'async get_subscription_runtime_properties(topic_name: str, subscription_name:
    str, **kwargs: Any) -> SubscriptionRuntimeProperties'
  parameters:
  - name: topic_name
    description: The topic that owns the subscription.
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: name of the subscription.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An instance of SubscriptionRuntimeProperties.
    types:
    - <xref:azure.servicebus.management.SubscriptionRuntimeProperties>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.get_topic
  name: get_topic
  summary: Get the properties of a topic.
  signature: 'async get_topic(topic_name: str, **kwargs: Any) -> TopicProperties'
  parameters:
  - name: topic_name
    description: The name of the topic.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The properties of the topic.
    types:
    - <xref:azure.servicebus.management.TopicDescription>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.get_topic_runtime_properties
  name: get_topic_runtime_properties
  summary: Get the runtime information of a topic.
  signature: 'async get_topic_runtime_properties(topic_name: str, **kwargs: Any) ->
    TopicRuntimeProperties'
  parameters:
  - name: topic_name
    description: The name of the topic.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The runtime info of the topic.
    types:
    - <xref:azure.servicebus.management.TopicRuntimeProperties>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.list_queues
  name: list_queues
  summary: List the queues of a ServiceBus namespace.
  signature: 'list_queues(**kwargs: Any) -> AsyncItemPaged[QueueProperties]'
  return:
    description: An iterable (auto-paging) response of QueueProperties.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.servicebus.management.QueueProperties>]
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.list_queues_runtime_properties
  name: list_queues_runtime_properties
  summary: List the runtime information of the queues in a ServiceBus namespace.
  signature: 'list_queues_runtime_properties(**kwargs: Any) -> AsyncItemPaged[QueueRuntimeProperties]'
  return:
    description: An iterable (auto-paging) response of QueueRuntimeProperties.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.servicebus.management.QueueRuntimeProperties>]
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.list_rules
  name: list_rules
  summary: List the rules of a topic subscription.
  signature: 'list_rules(topic_name: str, subscription_name: str, **kwargs: Any) ->
    AsyncItemPaged[RuleProperties]'
  parameters:
  - name: topic_name
    description: The topic that owns the subscription.
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: 'The subscription that

      owns the rules.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterable (auto-paging) response of RuleProperties.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.servicebus.management.RuleProperties>]
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.list_subscriptions
  name: list_subscriptions
  summary: List the subscriptions of a ServiceBus Topic.
  signature: 'list_subscriptions(topic_name: str, **kwargs: Any) -> AsyncItemPaged[SubscriptionProperties]'
  parameters:
  - name: topic_name
    description: The topic that owns the subscription.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterable (auto-paging) response of SubscriptionProperties.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.servicebus.management.SubscriptionProperties>]
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.list_subscriptions_runtime_properties
  name: list_subscriptions_runtime_properties
  summary: List the subscriptions runtime information of a ServiceBus.
  signature: 'list_subscriptions_runtime_properties(topic_name: str, **kwargs: Any)
    -> AsyncItemPaged[SubscriptionRuntimeProperties]'
  parameters:
  - name: topic_name
    description: The topic that owns the subscription.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterable (auto-paging) response of SubscriptionRuntimeProperties.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.servicebus.management.SubscriptionRuntimeProperties>]
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.list_topics
  name: list_topics
  summary: List the topics of a ServiceBus namespace.
  signature: 'list_topics(**kwargs: Any) -> AsyncItemPaged[TopicProperties]'
  return:
    description: An iterable (auto-paging) response of TopicProperties.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.servicebus.management.TopicProperties>]
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.list_topics_runtime_properties
  name: list_topics_runtime_properties
  summary: List the topics runtime information of a ServiceBus namespace.
  signature: 'list_topics_runtime_properties(**kwargs: Any) -> AsyncItemPaged[TopicRuntimeProperties]'
  return:
    description: An iterable (auto-paging) response of TopicRuntimeProperties.
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.servicebus.management.TopicRuntimeProperties>]
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.update_queue
  name: update_queue
  summary: 'Update a queue.


    Before calling this method, you should use *get_queue*, *create_queue* or *list_queues*
    to get a

    *QueueProperties* instance, then update the properties. Only a portion of properties
    can

    be updated. Refer to [https://docs.microsoft.com/en-us/rest/api/servicebus/update-queue](https://docs.microsoft.com/en-us/rest/api/servicebus/update-queue).

    You could also pass keyword arguments for updating properties in the form of

    *<property_name>=<property_value>* which will override whatever was specified
    in

    the *QueueProperties* instance. Refer to ~azure.servicebus.management.QueueProperties
    for names of properties.'
  signature: 'async update_queue(queue: QueueProperties | Mapping[str, Any], **kwargs:
    Any) -> None'
  parameters:
  - name: queue
    description: 'The queue that is returned from *get_queue*, *create_queue* or *list_queues*
      and

      has the updated properties.'
    isRequired: true
    types:
    - <xref:azure.servicebus.management.QueueProperties>
  return:
    types:
    - <xref:None>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.update_rule
  name: update_rule
  summary: 'Update a rule.


    Before calling this method, you should use *get_rule*, *create_rule* or *list_rules*
    to get a *RuleProperties*

    instance, then update the properties.

    You could also pass keyword arguments for updating properties in the form of

    *<property_name>=<property_value>* which will override whatever was specified
    in

    the *RuleProperties* instance. Refer to ~azure.servicebus.management.RuleProperties
    for names of properties.'
  signature: 'async update_rule(topic_name: str, subscription_name: str, rule: RuleProperties
    | Mapping[str, Any], **kwargs: Any) -> None'
  parameters:
  - name: topic_name
    description: The topic that owns the subscription.
    isRequired: true
    types:
    - <xref:str>
  - name: subscription_name
    description: 'The subscription that

      owns this rule.'
    isRequired: true
    types:
    - <xref:str>
  - name: rule
    description: 'The rule that is returned from *get_rule*,

      *create_rule*, or *list_rules* and has the updated properties.'
    isRequired: true
    types:
    - <xref:azure.servicebus.management.RuleProperties>
  return:
    types:
    - <xref:None>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.update_subscription
  name: update_subscription
  summary: 'Update a subscription.


    Before calling this method, you should use *get_subscription*, *update_subscription*
    or *list_subscription*

    to get a *SubscriptionProperties* instance, then update the properties.

    You could also pass keyword arguments for updating properties in the form of

    *<property_name>=<property_value>* which will override whatever was specified
    in

    the *SubscriptionProperties* instance.

    Refer to ~azure.servicebus.management.SubscriptionProperties for names of properties.'
  signature: 'async update_subscription(topic_name: str, subscription: SubscriptionProperties
    | Mapping[str, Any], **kwargs: Any) -> None'
  parameters:
  - name: topic_name
    description: The topic that owns the subscription.
    isRequired: true
    types:
    - <xref:str>
  - name: subscription
    description: 'The subscription that is returned

      from *get_subscription*, *update_subscription* or *list_subscription* and has
      the updated properties.'
    isRequired: true
    types:
    - <xref:azure.servicebus.management.SubscriptionProperties>
  return:
    types:
    - <xref:None>
- uid: azure.servicebus.aio.management.ServiceBusAdministrationClient.update_topic
  name: update_topic
  summary: 'Update a topic.


    Before calling this method, you should use *get_topic*, *create_topic* or *list_topics*
    to get a

    *TopicProperties* instance, then update the properties. Only a portion of properties
    can be updated.

    Refer to [https://docs.microsoft.com/en-us/rest/api/servicebus/update-topic](https://docs.microsoft.com/en-us/rest/api/servicebus/update-topic).

    You could also pass keyword arguments for updating properties in the form of

    *<property_name>=<property_value>* which will override whatever was specified
    in

    the *TopicProperties* instance. Refer to ~azure.servicebus.management.TopicProperties
    for names of properties.'
  signature: 'async update_topic(topic: TopicProperties | Mapping[str, Any], **kwargs:
    Any) -> None'
  parameters:
  - name: topic
    description: 'The topic that is returned from *get_topic*, *create_topic*, or
      *list_topics*

      and has the updated properties.'
    isRequired: true
    types:
    - <xref:azure.servicebus.management.TopicProperties>
  return:
    types:
    - <xref:None>
