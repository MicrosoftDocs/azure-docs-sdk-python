### YamlMime:PythonClass
uid: azure.servicebus.exceptions.ServiceBusError
name: ServiceBusError
fullName: azure.servicebus.exceptions.ServiceBusError
module: azure.servicebus.exceptions
inheritances:
- azure.core.exceptions.AzureError
summary: Base exception for all Service Bus errors which can be used for default error
  handling.
constructor:
  syntax: 'ServiceBusError(message: str | bytes | None, *args: Any, **kwargs: Any)'
  parameters:
  - name: message
    description: The message object stringified as 'message' attribute
    isRequired: true
    types:
    - <xref:str>
    - <xref:bytes>
  keywordOnlyParameters:
  - name: error
    description: The original exception if any
    types:
    - <xref:Exception>
variables:
- description: The exc_type from sys.exc_info()
  name: exc_type
- description: The exc_value from sys.exc_info()
  name: exc_value
- description: The exc_traceback from sys.exc_info()
  name: exc_traceback
- description: A string formatting of message parameter, exc_type and exc_value
  name: exc_msg
- description: A stringified version of the message parameter
  name: message
  types:
  - <xref:str>
methods:
- uid: azure.servicebus.exceptions.ServiceBusError.add_note
  name: add_note
  summary: "Exception.add_note(note) \u2013\nadd a note to the exception"
  signature: add_note()
- uid: azure.servicebus.exceptions.ServiceBusError.raise_with_traceback
  name: raise_with_traceback
  summary: 'Raise the exception with the existing traceback.


    *Deprecated since version 1.22.0:* This method is deprecated as we don''t support
    Python 2 anymore. Use raise/from instead.'
  signature: raise_with_traceback() -> None
- uid: azure.servicebus.exceptions.ServiceBusError.with_traceback
  name: with_traceback
  summary: "Exception.with_traceback(tb) \u2013\nset self.__traceback__ to tb and\
    \ return self."
  signature: with_traceback()
attributes:
- uid: azure.servicebus.exceptions.ServiceBusError.args
  name: args
