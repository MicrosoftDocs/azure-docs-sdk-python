### YamlMime:PythonClass
uid: azure.servicebus.aio.ServiceBusSession
name: ServiceBusSession
fullName: azure.servicebus.aio.ServiceBusSession
module: azure.servicebus.aio
inheritances:
- azure.servicebus._servicebus_session.BaseSession
summary: 'The ServiceBusSession is used for manage session states and lock renewal.


  **Please use the property `session` on the ServiceBusReceiver to get the corresponding
  ServiceBusSession

  object linked with the receiver instead of instantiating a ServiceBusSession object
  directly.**'
constructor:
  syntax: 'ServiceBusSession(session_id: str, receiver: ServiceBusReceiver | ServiceBusReceiverAsync)'
  parameters:
  - name: session_id
    isRequired: true
  - name: receiver
    isRequired: true
examples:
- "Get session from a receiver<!--[!code-python[Main](les\\async_samples\\sample_code_servicebus_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
  \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\221\\\\azure-servicebus-7.12.1\\\
  \\samples\\\\async_samples\\\\sample_code_servicebus_async.py\", \"xml:space\":\
  \ \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\":\
  \ {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n       async with\
  \ servicebus_client.get_queue_receiver(queue_name=queue_name, session_id=session_id)\
  \ as receiver:\n           session = receiver.session\n\n   ````\n"
methods:
- uid: azure.servicebus.aio.ServiceBusSession.get_state
  name: get_state
  summary: 'Get the session state.


    Returns None if no state has been set.'
  signature: 'async get_state(*, timeout: float | None = None, **kwargs: Any) -> bytes'
  keywordOnlyParameters:
  - name: timeout
    description: 'The total operation timeout in seconds including all the retries.

      The value must be greater than 0 if specified. The default value is None, meaning
      no timeout.'
    types:
    - <xref:typing.Optional>[<xref:float>]
  return:
    description: The session state.
    types:
    - <xref:bytes>
  examples:
  - "Get the session state<!--[!code-python[Main](les\\async_samples\\sample_code_servicebus_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    221\\\\azure-servicebus-7.12.1\\\\samples\\\\async_samples\\\\sample_code_servicebus_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       async with servicebus_client.get_queue_receiver(queue_name=queue_name,\
    \ session_id=session_id) as receiver:\n           session = receiver.session\n\
    \           session_state = await session.get_state()\n\n   ````\n"
- uid: azure.servicebus.aio.ServiceBusSession.renew_lock
  name: renew_lock
  summary: 'Renew the session lock.


    This operation must be performed periodically in order to retain a lock on the

    session to continue message processing.


    Once the lock is lost the connection will be closed; an expired lock cannot be
    renewed.


    This operation can also be performed as a threaded background task by registering
    the session

    with an *azure.servicebus.aio.AutoLockRenewer* instance.'
  signature: 'async renew_lock(*, timeout: float | None = None, **kwargs: Any) ->
    datetime'
  keywordOnlyParameters:
  - name: timeout
    description: 'The total operation timeout in seconds including all the retries.

      The value must be greater than 0 if specified. The default value is None, meaning
      no timeout.'
    types:
    - <xref:typing.Optional>[<xref:float>]
  return:
    description: The utc datetime the lock is set to expire at.
    types:
    - <xref:datetime>
  examples:
  - "Renew the session lock before it expires<!--[!code-python[Main](les\\async_samples\\\
    sample_code_servicebus_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\221\\\\azure-servicebus-7.12.1\\\\samples\\\\async_samples\\\
    \\sample_code_servicebus_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n       async with servicebus_client.get_queue_receiver(queue_name=queue_name,\
    \ session_id=session_id) as receiver:\n           session = receiver.session\n\
    \           await session.renew_lock()\n\n   ````\n"
- uid: azure.servicebus.aio.ServiceBusSession.set_state
  name: set_state
  summary: Set the session state.
  signature: 'async set_state(state: str | bytes | bytearray | None, *, timeout: float
    | None = None, **kwargs: Any) -> None'
  parameters:
  - name: state
    description: The state value.
    isRequired: true
    types:
    - <xref:str>
    - <xref:bytes>
    - <xref:bytearray>
    - <xref:None>
  keywordOnlyParameters:
  - name: timeout
    description: 'The total operation timeout in seconds including all the retries.

      The value must be greater than 0 if specified. The default value is None, meaning
      no timeout.'
    types:
    - <xref:float>
    - <xref:None>
  return:
    description: Response of callback
    types:
    - <xref:any>
  examples:
  - "Set the session state<!--[!code-python[Main](les\\async_samples\\sample_code_servicebus_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    221\\\\azure-servicebus-7.12.1\\\\samples\\\\async_samples\\\\sample_code_servicebus_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n       async with servicebus_client.get_queue_receiver(queue_name=queue_name,\
    \ session_id=session_id) as receiver:\n           session = receiver.session\n\
    \           await session.set_state(\"START\")\n\n   ````\n"
attributes:
- uid: azure.servicebus.aio.ServiceBusSession.locked_until_utc
  name: locked_until_utc
  summary: The time at which this session's lock will expire.
  return:
    types:
    - <xref:datetime.datetime>
- uid: azure.servicebus.aio.ServiceBusSession.session_id
  name: session_id
  summary: Session id of the current session.
  return:
    types:
    - <xref:str>
