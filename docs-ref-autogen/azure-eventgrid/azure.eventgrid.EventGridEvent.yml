### YamlMime:PythonClass
uid: azure.eventgrid.EventGridEvent
name: EventGridEvent
fullName: azure.eventgrid.EventGridEvent
module: azure.eventgrid
inheritances:
- azure.eventgrid._generated.models._models.EventGridEvent
summary: 'Properties of an event published to an Event Grid topic using the EventGrid
  Schema.


  Variables are only populated by the server, and will be ignored when sending a request.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'EventGridEvent(subject: str, event_type: str, data: object, data_version:
    str, **kwargs: Any)'
  parameters:
  - name: subject
    description: Required. A resource path relative to the topic path.
    isRequired: true
    types:
    - <xref:str>
  - name: event_type
    description: Required. The type of the event that occurred.
    isRequired: true
    types:
    - <xref:str>
  - name: data
    description: Required. Event data specific to the event type.
    isRequired: true
    types:
    - <xref:object>
  - name: data_version
    description: 'Required. The schema version of the data object.

      If not provided, will be stamped with an empty value.'
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: topic
    description: 'The resource path of the event source. If not provided, Event Grid
      will

      stamp onto the event. This is required when sending event(s) to a domain.'
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: metadata_version
    description: 'The schema version of the event metadata. If provided,

      must match Event Grid Schema exactly. If not provided, EventGrid will stamp
      onto event.'
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: id
    description: An identifier for the event. In not provided, a random UUID will
      be generated and used.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: event_time
    description: 'The time (in UTC) of the event. If not provided,

      it will be the time (in UTC) the event was generated.'
    types:
    - <xref:typing.Optional>[<xref:datetime.datetime>]
variables:
- description: A resource path relative to the topic path.
  name: subject
  types:
  - <xref:str>
- description: The type of the event that occurred.
  name: event_type
  types:
  - <xref:str>
- description: Event data specific to the event type.
  name: data
  types:
  - <xref:object>
- description: 'The schema version of the data object.

    If not provided, will be stamped with an empty value.'
  name: data_version
  types:
  - <xref:str>
- description: The resource path of the event source. If not provided, Event Grid
    will stamp onto the event.
  name: topic
  types:
  - <xref:str>
- description: 'The schema version of the event metadata. If provided, must match
    Event Grid Schema exactly.

    If not provided, EventGrid will stamp onto event.'
  name: metadata_version
  types:
  - <xref:str>
- description: An identifier for the event. In not provided, a random UUID will be
    generated and used.
  name: id
  types:
  - <xref:str>
- description: 'The time (in UTC) of the event. If not provided,

    it will be the time (in UTC) the event was generated.'
  name: event_time
  types:
  - <xref:datetime.datetime>
methods:
- uid: azure.eventgrid.EventGridEvent.as_dict
  name: as_dict
  summary: "Return a dict that can be serialized using json.dump.\n\nAdvanced usage\
    \ might optionally use a callback as parameter:\n\nKey is the attribute name used\
    \ in Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with\
    \ the\nmsrest type and 'key' with the RestAPI encoded key.\nValue is the current\
    \ value in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: 'as_dict(keep_readonly: bool = True, key_transformer: ~typing.Callable[[str,
    ~typing.Dict[str, ~typing.Any], ~typing.Any], ~typing.Any] = <function attribute_transformer>,
    **kwargs: ~typing.Any) -> MutableMapping[str, Any]'
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.eventgrid.EventGridEvent.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: 'deserialize(data: Any, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.eventgrid.EventGridEvent.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending() -> None
- uid: azure.eventgrid.EventGridEvent.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: 'from_dict(data: Any, key_extractors: Callable[[str, Dict[str, Any],
    Any], Any] | None = None, content_type: str | None = None) -> ModelType'
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.eventgrid.EventGridEvent.from_json
  name: from_json
  summary: 'Returns the deserialized EventGridEvent object when a json payload is
    provided.

    :param event: The json string that should be converted into a EventGridEvent.
    This can also be

    a storage QueueMessage, eventhub''s EventData or ServiceBusMessage

    :type event: object

    :rtype: EventGridEvent

    :return: An EventGridEvent object.

    :raises ValueError: If the provided JSON is invalid.'
  signature: 'from_json(event: Any) -> EventGridEvent'
  parameters:
  - name: event
    isRequired: true
- uid: azure.eventgrid.EventGridEvent.is_xml_model
  name: is_xml_model
  signature: is_xml_model() -> bool
- uid: azure.eventgrid.EventGridEvent.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: 'serialize(keep_readonly: bool = False, **kwargs: Any) -> MutableMapping[str,
    Any]'
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
