### YamlMime:PythonClass
uid: azure.ai.ml.entities.JupyterLabJobService
name: JupyterLabJobService
fullName: azure.ai.ml.entities.JupyterLabJobService
module: azure.ai.ml.entities
inheritances:
- azure.ai.ml.entities._job.job_service.JobServiceBase
summary: JupyterLab job service configuration.
constructor:
  syntax: 'JupyterLabJobService(*, endpoint: str | None = None, nodes: Literal[''all'']
    | None = None, status: str | None = None, port: int | None = None, properties:
    Dict[str, str] | None = None, **kwargs: Any)'
  keywordOnlyParameters:
  - name: endpoint
    description: The endpoint URL.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: port
    description: The port for the endpoint.
    types:
    - <xref:typing.Optional>[<xref:int>]
  - name: nodes
    description: Indicates whether the service has to run in all nodes.
    types:
    - <xref:typing.Optional>[<xref:typing.Literal>["all"]]
  - name: properties
    description: Additional properties to set on the endpoint.
    types:
    - <xref:typing.Optional>[<xref:dict>[<xref:str>, <xref:str>]]
  - name: status
    description: The status of the endpoint.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: kwargs
    description: A dictionary of additional configuration parameters.
    types:
    - <xref:dict>
variables:
- description: Specifies the type of job service. Set automatically to "jupyter_lab"
    for this class.
  name: type
  types:
  - <xref:str>
examples:
- "Configuring JupyterLabJobService configuration on a command job.<!--[!code-python[Main](les\\\
  ml_samples_misc.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"\
  names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
  \\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
  \\10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_misc.py\", \"xml:space\": \"\
  preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\": {\"\
  linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.ml\
  \ import command\n   from azure.ai.ml.entities import JupyterLabJobService, SshJobService,\
  \ TensorBoardJobService, VsCodeJobService\n\n   node = command(\n       name=\"\
  interactive-command-job\",\n       description=\"description\",\n       environment=\"\
  AzureML-sklearn-1.0-ubuntu20.04-py38-cpu:33\",\n       command=\"ls\",\n       compute=\"\
  testCompute\",\n       services={\n           \"my_ssh\": SshJobService(),\n   \
  \        \"my_tensorboard\": TensorBoardJobService(log_dir=\"~/blog\"),\n      \
  \     \"my_jupyter_lab\": JupyterLabJobService(),\n           \"my_vscode\": VsCodeJobService(),\n\
  \       },\n   )\n\n   ````\n"
methods:
- uid: azure.ai.ml.entities.JupyterLabJobService.get
  name: get
  signature: 'get(key: Any, default: Any | None = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.ml.entities.JupyterLabJobService.has_key
  name: has_key
  signature: 'has_key(k: Any) -> bool'
  parameters:
  - name: k
    isRequired: true
- uid: azure.ai.ml.entities.JupyterLabJobService.items
  name: items
  signature: items() -> list
- uid: azure.ai.ml.entities.JupyterLabJobService.keys
  name: keys
  signature: keys() -> list
- uid: azure.ai.ml.entities.JupyterLabJobService.update
  name: update
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.ai.ml.entities.JupyterLabJobService.values
  name: values
  signature: values() -> list
