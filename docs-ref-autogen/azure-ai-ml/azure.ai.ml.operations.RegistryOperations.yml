### YamlMime:PythonClass
uid: azure.ai.ml.operations.RegistryOperations
name: RegistryOperations
fullName: azure.ai.ml.operations.RegistryOperations
module: azure.ai.ml.operations
inheritances:
- builtins.object
summary: 'RegistryOperations.


  You should not instantiate this class directly. Instead, you should create an MLClient
  instance that instantiates it

  for you and attaches it as an attribute.'
constructor:
  syntax: 'RegistryOperations(operation_scope: OperationScope, service_client: AzureMachineLearningWorkspaces,
    all_operations: OperationsContainer, credentials: TokenCredential | None = None,
    **kwargs: Dict)'
  parameters:
  - name: operation_scope
    isRequired: true
  - name: service_client
    isRequired: true
  - name: all_operations
    isRequired: true
  - name: credentials
    defaultValue: None
methods:
- uid: azure.ai.ml.operations.RegistryOperations.begin_create
  name: begin_create
  summary: 'Create a new Azure Machine Learning Registry, or try to update if it already
    exists.


    Note: Due to service limitations we have to sleep for

    an additional 30~45 seconds AFTER the LRO Poller concludes

    before the registry will be consistently deleted from the

    perspective of subsequent operations.

    If a deletion is required for subsequent operations to

    work properly, callers should implement that logic until the

    service has been fixed to return a reliable LRO.'
  signature: 'begin_create(registry: Registry, **kwargs: Dict) -> LROPoller[Registry]'
  parameters:
  - name: registry
    description: Registry definition.
    isRequired: true
    types:
    - <xref:azure.ai.ml.entities.Registry>
  return:
    description: A poller to track the operation status.
    types:
    - <xref:LROPoller>
- uid: azure.ai.ml.operations.RegistryOperations.begin_delete
  name: begin_delete
  summary: Delete a registry if it exists. Returns nothing on a successful operation.
  signature: 'begin_delete(*, name: str, **kwargs: Dict) -> LROPoller[None]'
  keywordOnlyParameters:
  - name: name
    description: Name of the registry
    types:
    - <xref:str>
  return:
    description: A poller to track the operation status.
    types:
    - <xref:LROPoller>
- uid: azure.ai.ml.operations.RegistryOperations.get
  name: get
  summary: Get a registry by name.
  signature: 'get(name: str | None = None) -> Registry'
  parameters:
  - name: name
    description: Name of the registry.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The registry with the provided name.
    types:
    - <xref:azure.ai.ml.entities.Registry>
  exceptions:
  - type: azure.ai.ml.exceptions.ValidationException
    description: 'Raised if Registry name cannot be

      successfully validated. Details will be provided in the error message.'
  - type: azure.core.exceptions.HttpResponseError
    description: 'Raised if the corresponding name and version cannot be

      retrieved from the service.'
- uid: azure.ai.ml.operations.RegistryOperations.list
  name: list
  summary: List all registries that the user has access to in the current resource
    group or subscription.
  signature: 'list(*, scope: str = ''resource_group'') -> Iterable[Registry]'
  keywordOnlyParameters:
  - name: scope
    description: scope of the listing, "resource_group" or "subscription", defaults
      to "resource_group"
    types:
    - <xref:str>
  return:
    description: An iterator like instance of Registry objects
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.ai.ml.entities.Registry>]
