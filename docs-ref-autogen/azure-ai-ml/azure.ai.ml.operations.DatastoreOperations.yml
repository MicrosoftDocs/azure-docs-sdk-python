### YamlMime:PythonClass
uid: azure.ai.ml.operations.DatastoreOperations
name: DatastoreOperations
fullName: azure.ai.ml.operations.DatastoreOperations
module: azure.ai.ml.operations
inheritances:
- azure.ai.ml._scope_dependent_operations._ScopeDependentOperations
summary: 'Represents a client for performing operations on Datastores.


  You should not instantiate this class directly. Instead, you should create MLClient
  and use this client via the

  property MLClient.datastores'
constructor:
  syntax: 'DatastoreOperations(operation_scope: OperationScope, operation_config:
    OperationConfig, serviceclient_2023_04_01_preview: AzureMachineLearningWorkspaces,
    serviceclient_2024_01_01_preview: AzureMachineLearningWorkspaces, **kwargs: Dict)'
  parameters:
  - name: operation_scope
    description: Scope variables for the operations classes of an MLClient object.
    isRequired: true
    types:
    - <xref:azure.ai.ml._scope_dependent_operations.OperationScope>
  - name: operation_config
    description: Common configuration for operations classes of an MLClient object.
    isRequired: true
    types:
    - <xref:azure.ai.ml._scope_dependent_operations.OperationConfig>
  - name: serviceclient_2022_10_01
    description: 'Service client to allow end users to operate on Azure Machine Learning
      Workspace

      resources.'
    isRequired: true
    types:
    - <xref:<xref:azure.ai.ml._restclient.v2022_10_01._azure_machine_learning_workspaces.
      AzureMachineLearningWorkspaces>>
  - name: serviceclient_2023_04_01_preview
    isRequired: true
  - name: serviceclient_2024_01_01_preview
    isRequired: true
methods:
- uid: azure.ai.ml.operations.DatastoreOperations.create_or_update
  name: create_or_update
  summary: Attaches the passed in datastore to the workspace or updates the datastore
    if it already exists.
  signature: 'create_or_update(datastore: Datastore) -> Datastore'
  parameters:
  - name: datastore
    description: The configuration of the datastore to attach.
    isRequired: true
    types:
    - <xref:azure.ai.ml.entities.Datastore>
  return:
    description: The attached datastore.
    types:
    - <xref:azure.ai.ml.entities.Datastore>
  examples:
  - "Create datastore example.<!--[!code-python[Main](les\\ml_samples_misc.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\
    \\samples\\\\ml_samples_misc.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.ai.ml.entities import AzureBlobDatastore\n\
    \n   datastore_example = AzureBlobDatastore(\n       name=\"azure_blob_datastore\"\
    ,\n       account_name=\"sdkvnextclidcdnrc7zb7xyy\",  # cspell:disable-line\n\
    \       container_name=\"testblob\",\n   )\n   ml_client.datastores.create_or_update(datastore_example)\n\
    \n   ````\n"
- uid: azure.ai.ml.operations.DatastoreOperations.delete
  name: delete
  summary: 'Deletes a datastore reference with the given name from the workspace.
    This method does not delete the actual

    datastore or underlying data in the datastore.'
  signature: 'delete(name: str) -> None'
  parameters:
  - name: name
    description: Name of the datastore
    isRequired: true
    types:
    - <xref:str>
  examples:
  - "Delete datastore example.<!--[!code-python[Main](les\\ml_samples_misc.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\
    \\samples\\\\ml_samples_misc.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   ml_client.datastores.delete(\"azure_blob_datastore\"\
    )\n\n   ````\n"
- uid: azure.ai.ml.operations.DatastoreOperations.get
  name: get
  summary: Returns information about the datastore referenced by the given name.
  signature: 'get(name: str, *, include_secrets: bool = False) -> Datastore'
  parameters:
  - name: name
    description: Datastore name
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: include_secrets
    description: Include datastore secrets in the returned datastore, defaults to
      False
    types:
    - <xref:bool>
  return:
    description: Datastore with the specified name.
    types:
    - <xref:azure.ai.ml.entities.Datastore>
  examples:
  - "Get datastore example.<!--[!code-python[Main](les\\ml_samples_misc.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\
    \\samples\\\\ml_samples_misc.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   ml_client.datastores.get(\"azure_blob_datastore\"\
    )\n\n   ````\n"
- uid: azure.ai.ml.operations.DatastoreOperations.get_default
  name: get_default
  summary: Returns the workspace's default datastore.
  signature: 'get_default(*, include_secrets: bool = False) -> Datastore'
  keywordOnlyParameters:
  - name: include_secrets
    description: Include datastore secrets in the returned datastore, defaults to
      False
    types:
    - <xref:bool>
  return:
    description: The default datastore.
    types:
    - <xref:azure.ai.ml.entities.Datastore>
  examples:
  - "Get default datastore example.<!--[!code-python[Main](les\\ml_samples_misc.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_misc.py\", \"xml:space\": \"\
    preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\": {\"\
    linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   ml_client.datastores.get_default()\n\
    \n   ````\n"
- uid: azure.ai.ml.operations.DatastoreOperations.list
  name: list
  summary: Lists all datastores and associated information within a workspace.
  signature: 'list(*, include_secrets: bool = False) -> Iterable[Datastore]'
  keywordOnlyParameters:
  - name: include_secrets
    description: Include datastore secrets in returned datastores, defaults to False
    types:
    - <xref:bool>
  return:
    description: An iterator like instance of Datastore objects
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.ai.ml.entities.Datastore>]
  examples:
  - "List datastore example.<!--[!code-python[Main](les\\ml_samples_misc.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\
    \\samples\\\\ml_samples_misc.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   ml_client.datastores.list()\n\n   ````\n"
- uid: azure.ai.ml.operations.DatastoreOperations.mount
  name: mount
  summary: '> [!NOTE]

    > This is an experimental method, and may change at any time. Please see [https://aka.ms/azuremlexperimental](https://aka.ms/azuremlexperimental)
    for more information.

    >


    Mount a datastore to a local path, so that you can access data inside it

    under a local path with any tools of your choice.'
  signature: 'mount(path: str, mount_point: str | None = None, mode: str = ''ro_mount'',
    debug: bool = False, persistent: bool = False, **_kwargs) -> None'
  parameters:
  - name: path
    description: The data store path to mount, in the form of *<name>* or *azureml://datastores/<name>*.
    isRequired: true
    types:
    - <xref:str>
  - name: mount_point
    description: A local path used as mount point.
    isRequired: true
    types:
    - <xref:str>
  - name: mode
    description: Mount mode, either *ro_mount* (read-only) or *rw_mount* (read-write).
    isRequired: true
    types:
    - <xref:str>
  - name: debug
    description: Whether to enable verbose logging.
    isRequired: true
    types:
    - <xref:bool>
  - name: persistent
    description: 'Whether to persist the mount after reboot. Applies only when running
      on Compute Instance,

      where the ''CI_NAME'' environment variable is set."'
    isRequired: true
    types:
    - <xref:bool>
  return:
    description: None
