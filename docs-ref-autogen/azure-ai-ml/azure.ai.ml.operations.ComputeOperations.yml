### YamlMime:PythonClass
uid: azure.ai.ml.operations.ComputeOperations
name: ComputeOperations
fullName: azure.ai.ml.operations.ComputeOperations
module: azure.ai.ml.operations
inheritances:
- azure.ai.ml._scope_dependent_operations._ScopeDependentOperations
summary: 'ComputeOperations.


  This class should not be instantiated directly. Instead, use the *compute* attribute
  of an MLClient object.'
constructor:
  syntax: 'ComputeOperations(operation_scope: OperationScope, operation_config: OperationConfig,
    service_client: AzureMachineLearningWorkspaces, **kwargs: Dict)'
  parameters:
  - name: operation_scope
    description: Scope variables for the operations classes of an MLClient object.
    isRequired: true
    types:
    - <xref:azure.ai.ml._scope_dependent_operations.OperationScope>
  - name: operation_config
    description: Common configuration for operations classes of an MLClient object.
    isRequired: true
    types:
    - <xref:azure.ai.ml._scope_dependent_operations.OperationConfig>
  - name: service_client
    description: 'Service client to allow end users to operate on Azure Machine Learning

      Workspace resources.'
    isRequired: true
    types:
    - <xref:azure.ai.ml._restclient.v2023_02_01_preview.AzureMachineLearningWorkspaces>
methods:
- uid: azure.ai.ml.operations.ComputeOperations.begin_attach
  name: begin_attach
  summary: Attach a compute resource to the workspace.
  signature: 'begin_attach(compute: Compute, **kwargs: Any) -> LROPoller[Compute]'
  parameters:
  - name: compute
    description: The compute resource definition.
    isRequired: true
    types:
    - <xref:azure.ai.ml.entities.Compute>
  return:
    description: 'An instance of LROPoller that returns a Compute object once the

      long-running operation is complete.'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.ai.ml.entities.Compute>]
  examples:
  - "Attaching a compute resource to the workspace.<!--[!code-python[Main](les\\ml_samples_compute.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_compute.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.ml.entities\
    \ import AmlCompute\n\n   compute_obj = AmlCompute(\n       name=compute_name_2,\n\
    \       tags={\"key1\": \"value1\", \"key2\": \"value2\"},\n       min_instances=0,\n\
    \       max_instances=10,\n       idle_time_before_scale_down=100,\n   )\n   attached_compute\
    \ = ml_client.compute.begin_attach(compute_obj)\n\n   ````\n"
- uid: azure.ai.ml.operations.ComputeOperations.begin_create_or_update
  name: begin_create_or_update
  summary: Create and register a compute resource.
  signature: 'begin_create_or_update(compute: Compute) -> LROPoller[Compute]'
  parameters:
  - name: compute
    description: The compute resource definition.
    isRequired: true
    types:
    - <xref:azure.ai.ml.entities.Compute>
  return:
    description: 'An instance of LROPoller that returns a Compute object once the

      long-running operation is complete.'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.ai.ml.entities.Compute>]
  examples:
  - "Creating and registering a compute resource.<!--[!code-python[Main](les\\ml_samples_compute.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_compute.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.ai.ml.entities\
    \ import AmlCompute\n\n   compute_obj = AmlCompute(\n       name=compute_name_1,\n\
    \       tags={\"key1\": \"value1\", \"key2\": \"value2\"},\n       min_instances=0,\n\
    \       max_instances=10,\n       idle_time_before_scale_down=100,\n   )\n   registered_compute\
    \ = ml_client.compute.begin_create_or_update(compute_obj)\n\n   ````\n"
- uid: azure.ai.ml.operations.ComputeOperations.begin_delete
  name: begin_delete
  summary: Delete or detach a compute resource.
  signature: 'begin_delete(name: str, *, action: str = ''Delete'') -> LROPoller[None]'
  parameters:
  - name: name
    description: The name of the compute resource.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: action
    description: 'Action to perform. Possible values: ["Delete", "Detach"]. Defaults
      to "Delete".'
  return:
    description: A poller to track the operation status.
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:None>]
  examples:
  - "Delete compute example.<!--[!code-python[Main](les\\ml_samples_compute.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\
    \\samples\\\\ml_samples_compute.py\", \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   ml_client.compute.begin_delete(compute_name_1,\
    \ action=\"Detach\")\n\n   ml_client.compute.begin_delete(compute_name_2)\n\n\
    \   ````\n"
- uid: azure.ai.ml.operations.ComputeOperations.begin_restart
  name: begin_restart
  summary: Restart a compute instance.
  signature: 'begin_restart(name: str) -> LROPoller[None]'
  parameters:
  - name: name
    description: The name of the compute instance.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A poller to track the operation status.
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:None>]
  examples:
  - "Restarting a stopped compute instance.<!--[!code-python[Main](les\\ml_samples_compute.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_compute.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   ml_client.compute.begin_restart(ci_name)\n\
    \n   ````\n"
- uid: azure.ai.ml.operations.ComputeOperations.begin_start
  name: begin_start
  summary: Start a compute instance.
  signature: 'begin_start(name: str) -> LROPoller[None]'
  parameters:
  - name: name
    description: The name of the compute instance.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A poller to track the operation status.
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:None>]
  examples:
  - "Starting a compute instance.<!--[!code-python[Main](les\\ml_samples_compute.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_compute.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   ml_client.compute.begin_start(ci_name)\n\
    \n   ````\n"
- uid: azure.ai.ml.operations.ComputeOperations.begin_stop
  name: begin_stop
  summary: Stop a compute instance.
  signature: 'begin_stop(name: str) -> LROPoller[None]'
  parameters:
  - name: name
    description: The name of the compute instance.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A poller to track the operation status.
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:None>]
  examples:
  - "Stopping a compute instance.<!--[!code-python[Main](les\\ml_samples_compute.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_compute.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   ml_client.compute.begin_stop(ci_name)\n\
    \n   ````\n"
- uid: azure.ai.ml.operations.ComputeOperations.begin_update
  name: begin_update
  summary: Update a compute resource. Currently only valid for AmlCompute resource
    types.
  signature: 'begin_update(compute: Compute) -> LROPoller[Compute]'
  parameters:
  - name: compute
    description: The compute resource definition.
    isRequired: true
    types:
    - <xref:azure.ai.ml.entities.Compute>
  return:
    description: 'An instance of LROPoller that returns a Compute object once the

      long-running operation is complete.'
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.ai.ml.entities.Compute>]
  examples:
  - "Updating an AmlCompute resource.<!--[!code-python[Main](les\\ml_samples_compute.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_compute.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   compute_obj\
    \ = ml_client.compute.get(\"cpu-cluster\")\n   compute_obj.idle_time_before_scale_down\
    \ = 200\n   updated_compute = ml_client.compute.begin_update(compute_obj)\n\n\
    \   ````\n"
- uid: azure.ai.ml.operations.ComputeOperations.get
  name: get
  summary: Get a compute resource.
  signature: 'get(name: str) -> Compute'
  parameters:
  - name: name
    description: Name of the compute resource.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: A Compute object.
    types:
    - <xref:azure.ai.ml.entities.Compute>
  examples:
  - "Retrieving a compute resource from a workspace.<!--[!code-python[Main](les\\\
    ml_samples_compute.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
    \\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
    \\10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_compute.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   cpu_cluster\
    \ = ml_client.compute.get(\"cpu-cluster\")\n\n   ````\n"
- uid: azure.ai.ml.operations.ComputeOperations.list
  name: list
  summary: List computes of the workspace.
  signature: 'list(*, compute_type: str | None = None) -> Iterable[Compute]'
  keywordOnlyParameters:
  - name: compute_type
    description: The type of the compute to be listed, case-insensitive. Defaults
      to AMLCompute.
    types:
    - <xref:typing.Optional>[<xref:str>]
  return:
    description: An iterator like instance of Compute objects.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.ai.ml.entities.Compute>]
  examples:
  - "Retrieving a list of the AzureML Kubernetes compute resources in a workspace.<!--[!code-python[Main](les\\\
    ml_samples_compute.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
    \\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
    \\10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_compute.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   compute_list\
    \ = ml_client.compute.list(compute_type=\"AMLK8s\")  # cspell:disable-line\n\n\
    \   ````\n"
- uid: azure.ai.ml.operations.ComputeOperations.list_nodes
  name: list_nodes
  summary: Retrieve a list of a compute resource's nodes.
  signature: 'list_nodes(name: str) -> Iterable[AmlComputeNodeInfo]'
  parameters:
  - name: name
    description: Name of the compute resource.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterator-like instance of AmlComputeNodeInfo objects.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.ai.ml.entities.AmlComputeNodeInfo>]
  examples:
  - "Retrieving a list of nodes from a compute resource.<!--[!code-python[Main](les\\\
    ml_samples_compute.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
    \\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
    \\10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_compute.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   node_list\
    \ = ml_client.compute.list_nodes(name=\"cpu-cluster\")\n\n   ````\n"
- uid: azure.ai.ml.operations.ComputeOperations.list_sizes
  name: list_sizes
  summary: List the supported VM sizes in a location.
  signature: 'list_sizes(*, location: str | None = None, compute_type: str | None
    = None) -> Iterable[VmSize]'
  keywordOnlyParameters:
  - name: location
    description: 'The location upon which virtual-machine-sizes is queried.

      Defaults to workspace location.'
    types:
    - <xref:str>
  - name: compute_type
    description: The type of the compute to be listed, case-insensitive. Defaults
      to AMLCompute.
    types:
    - <xref:typing.Optional>[<xref:str>]
  return:
    description: An iterator over virtual machine size objects.
    types:
    - <xref:typing.Iterable>[<xref:azure.ai.ml.entities.VmSize>]
  examples:
  - "Listing the supported VM sizes in the workspace location.<!--[!code-python[Main](les\\\
    ml_samples_compute.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
    \\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
    \\10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_compute.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   size_list\
    \ = ml_client.compute.list_sizes()\n\n   ````\n"
- uid: azure.ai.ml.operations.ComputeOperations.list_usage
  name: list_usage
  summary: 'List the current usage information as well as AzureML resource limits
    for the

    given subscription and location.'
  signature: 'list_usage(*, location: str | None = None) -> Iterable[Usage]'
  keywordOnlyParameters:
  - name: location
    description: 'The location for which resource usage is queried.

      Defaults to workspace location.'
    types:
    - <xref:typing.Optional>[<xref:str>]
  return:
    description: An iterator over current usage info objects.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.ai.ml.entities.Usage>]
  examples:
  - "Listing resource usage for the workspace location.<!--[!code-python[Main](les\\\
    ml_samples_compute.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
    \\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
    \\10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_compute.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   usage_list\
    \ = ml_client.compute.list_usage()\n\n   ````\n"
