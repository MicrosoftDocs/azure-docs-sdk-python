### YamlMime:PythonClass
uid: azure.ai.ml.operations.WorkspaceOutboundRuleOperations
name: WorkspaceOutboundRuleOperations
fullName: azure.ai.ml.operations.WorkspaceOutboundRuleOperations
module: azure.ai.ml.operations
inheritances:
- builtins.object
summary: 'WorkspaceOutboundRuleOperations.


  You should not instantiate this class directly. Instead, you should create

  an MLClient instance that instantiates it for you and attaches it as an attribute.'
constructor:
  syntax: 'WorkspaceOutboundRuleOperations(operation_scope: OperationScope, service_client:
    AzureMachineLearningWorkspaces, all_operations: OperationsContainer, credentials:
    TokenCredential = None, **kwargs: Dict)'
  parameters:
  - name: operation_scope
    isRequired: true
  - name: service_client
    isRequired: true
  - name: all_operations
    isRequired: true
  - name: credentials
    defaultValue: None
methods:
- uid: azure.ai.ml.operations.WorkspaceOutboundRuleOperations.begin_create
  name: begin_create
  summary: Create a Workspace OutboundRule.
  signature: 'begin_create(workspace_name: str, rule: OutboundRule, **kwargs: Any)
    -> LROPoller[OutboundRule]'
  parameters:
  - name: workspace_name
    description: Name of the workspace.
    isRequired: true
    types:
    - <xref:str>
  - name: rule
    description: OutboundRule definition (FqdnDestination, PrivateEndpointDestination,
      or ServiceTagDestination).
    isRequired: true
    types:
    - <xref:azure.ai.ml.entities.OutboundRule>
  return:
    description: An instance of LROPoller that returns an OutboundRule.
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.ai.ml.entities.OutboundRule>]
  examples:
  - "Create an FQDN outbound rule for a workspace with the given name,\nsimilar can\
    \ be done for PrivateEndpointDestination or ServiceTagDestination.<!--[!code-python[Main](les\\\
    ml_samples_workspace.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_workspace.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.ai.ml.entities import FqdnDestination\n\n   fqdn_rule = FqdnDestination(name=\"\
    rulename\", destination=\"google.com\")\n   rule = ml_client.workspace_outbound_rules.begin_create(workspace_name=\"\
    test-ws\", rule=fqdn_rule).result()\n\n   ````\n"
- uid: azure.ai.ml.operations.WorkspaceOutboundRuleOperations.begin_remove
  name: begin_remove
  summary: Remove a Workspace OutboundRule.
  signature: 'begin_remove(workspace_name: str, outbound_rule_name: str, **kwargs:
    Any) -> LROPoller[None]'
  parameters:
  - name: workspace_name
    description: Name of the workspace.
    isRequired: true
    types:
    - <xref:str>
  - name: outbound_rule_name
    description: Name of the outbound rule to remove.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An Iterable of OutboundRule.
    types:
    - <xref:typing.Iterable>[<xref:azure.ai.ml.entities.OutboundRule>]
  examples:
  - "Remove the outbound rule for a workspace with the given name.<!--[!code-python[Main](les\\\
    ml_samples_workspace.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_workspace.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   ml_client.workspace_outbound_rules.begin_remove(workspace_name=\"test-ws\"\
    , outbound_rule_name=\"rulename\")\n\n   ````\n"
- uid: azure.ai.ml.operations.WorkspaceOutboundRuleOperations.begin_update
  name: begin_update
  summary: Update a Workspace OutboundRule.
  signature: 'begin_update(workspace_name: str, rule: OutboundRule, **kwargs: Any)
    -> LROPoller[OutboundRule]'
  parameters:
  - name: workspace_name
    description: Name of the workspace.
    isRequired: true
    types:
    - <xref:str>
  - name: rule
    description: OutboundRule definition (FqdnDestination, PrivateEndpointDestination,
      or ServiceTagDestination).
    isRequired: true
    types:
    - <xref:azure.ai.ml.entities.OutboundRule>
  return:
    description: An instance of LROPoller that returns an OutboundRule.
    types:
    - <xref:azure.core.polling.LROPoller>[<xref:azure.ai.ml.entities.OutboundRule>]
  examples:
  - "Update an FQDN outbound rule for a workspace with the given name,\nsimilar can\
    \ be done for PrivateEndpointDestination or ServiceTagDestination.<!--[!code-python[Main](les\\\
    ml_samples_workspace.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_workspace.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.ai.ml.entities import FqdnDestination\n\n   fqdn_rule = FqdnDestination(name=\"\
    rulename\", destination=\"linkedin.com\")\n   rule = ml_client.workspace_outbound_rules.begin_update(workspace_name=\"\
    test-ws\", rule=fqdn_rule).result()\n\n   ````\n"
- uid: azure.ai.ml.operations.WorkspaceOutboundRuleOperations.get
  name: get
  summary: Get a workspace OutboundRule by name.
  signature: 'get(workspace_name: str, outbound_rule_name: str, **kwargs: Any) ->
    OutboundRule'
  parameters:
  - name: workspace_name
    description: Name of the workspace.
    isRequired: true
    types:
    - <xref:str>
  - name: outbound_rule_name
    description: Name of the outbound rule.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The OutboundRule with the provided name for the workspace.
    types:
    - <xref:azure.ai.ml.entities.OutboundRule>
  examples:
  - "Get the outbound rule for a workspace with the given name.<!--[!code-python[Main](les\\\
    ml_samples_workspace.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_workspace.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   rule = ml_client.workspace_outbound_rules.get(workspace_name=\"test-ws\"\
    , outbound_rule_name=\"sample-rule\")\n\n   ````\n"
- uid: azure.ai.ml.operations.WorkspaceOutboundRuleOperations.list
  name: list
  summary: List Workspace OutboundRules.
  signature: 'list(workspace_name: str, **kwargs: Any) -> Iterable[OutboundRule]'
  parameters:
  - name: workspace_name
    description: Name of the workspace.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An Iterable of OutboundRule.
    types:
    - <xref:typing.Iterable>[<xref:azure.ai.ml.entities.OutboundRule>]
  examples:
  - "List the outbound rule for a workspace with the given name.<!--[!code-python[Main](les\\\
    ml_samples_workspace.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_workspace.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   rules = ml_client.workspace_outbound_rules.list(workspace_name=\"test-ws\"\
    )\n\n   ````\n"
