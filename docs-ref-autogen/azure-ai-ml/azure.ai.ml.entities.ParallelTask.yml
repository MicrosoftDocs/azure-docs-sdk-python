### YamlMime:PythonClass
uid: azure.ai.ml.entities.ParallelTask
name: ParallelTask
fullName: azure.ai.ml.entities.ParallelTask
module: azure.ai.ml.entities
inheritances:
- azure.ai.ml.entities._mixins.RestTranslatableMixin
- azure.ai.ml.entities._mixins.DictMixin
summary: Parallel task.
constructor:
  syntax: 'ParallelTask(*, type: str | None = None, code: str | None = None, entry_script:
    str | None = None, program_arguments: str | None = None, model: str | None = None,
    append_row_to: str | None = None, environment: Environment | str | None = None,
    **kwargs: Any)'
  parameters:
  - name: type
    description: 'The type of the parallel task.

      Possible values are ''run_function''and ''model''.'
    isRequired: true
    types:
    - <xref:str>
  - name: code
    description: A local or remote path pointing at source code.
    isRequired: true
    types:
    - <xref:str>
  - name: entry_script
    description: 'User script which will be run in parallel on multiple nodes. This
      is

      specified as a local file path.

      The entry_script should contain two functions:

      `init()`: this function should be used for any costly or common preparation
      for subsequent inferences,

      e.g., deserializing and loading the model into a global object.

      `run(mini_batch)`: The method to be parallelized. Each invocation will have
      one mini-batch.

      ''mini_batch'': Batch inference will invoke run method and pass either a list
      or a Pandas DataFrame as an

      argument to the method. Each entry in min_batch will be a filepath if input
      is a FileDataset,

      a Pandas DataFrame if input is a TabularDataset.

      run() method should return a Pandas DataFrame or an array.

      For append_row output_action, these returned elements are appended into the
      common output file.

      For summary_only, the contents of the elements are ignored. For all output actions,

      each returned output element indicates one successful inference of input element
      in the input mini-batch.

      Each parallel worker process will call *init* once and then loop over *run*
      function until all mini-batches

      are processed.'
    isRequired: true
    types:
    - <xref:str>
  - name: program_arguments
    description: The arguments of the parallel task.
    isRequired: true
    types:
    - <xref:str>
  - name: model
    description: The model of the parallel task.
    isRequired: true
    types:
    - <xref:str>
  - name: append_row_to
    description: 'All values output by run() method invocations will be aggregated
      into

      one unique file which is created in the output location.

      if it is not set, ''summary_only'' would invoked,  which means user script is
      expected to store the output itself.'
    isRequired: true
    types:
    - <xref:str>
  - name: environment
    description: Environment that training job will run in.
    isRequired: true
    types:
    - <xref:typing.Union>[<xref:azure.ai.ml.entities.Environment>, <xref:str>]
  keywordOnlyParameters:
  - name: type
    isRequired: true
  - name: code
    isRequired: true
  - name: entry_script
    isRequired: true
  - name: program_arguments
    isRequired: true
  - name: model
    isRequired: true
  - name: append_row_to
    isRequired: true
  - name: environment
    isRequired: true
methods:
- uid: azure.ai.ml.entities.ParallelTask.get
  name: get
  signature: 'get(key: Any, default: Any | None = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.ml.entities.ParallelTask.has_key
  name: has_key
  signature: 'has_key(k: Any) -> bool'
  parameters:
  - name: k
    isRequired: true
- uid: azure.ai.ml.entities.ParallelTask.items
  name: items
  signature: items() -> list
- uid: azure.ai.ml.entities.ParallelTask.keys
  name: keys
  signature: keys() -> list
- uid: azure.ai.ml.entities.ParallelTask.update
  name: update
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.ai.ml.entities.ParallelTask.values
  name: values
  signature: values() -> list
