### YamlMime:PythonClass
uid: azure.ai.ml.operations.DataOperations
name: DataOperations
fullName: azure.ai.ml.operations.DataOperations
module: azure.ai.ml.operations
inheritances:
- azure.ai.ml._scope_dependent_operations._ScopeDependentOperations
summary: 'DataOperations.


  You should not instantiate this class directly. Instead, you should

  create an MLClient instance that instantiates it for you and

  attaches it as an attribute.'
constructor:
  syntax: 'DataOperations(operation_scope: OperationScope, operation_config: OperationConfig,
    service_client: AzureMachineLearningWorkspaces | AzureMachineLearningWorkspaces,
    service_client_012024_preview: AzureMachineLearningWorkspaces, datastore_operations:
    DatastoreOperations, **kwargs: Any)'
  parameters:
  - name: operation_scope
    description: Scope variables for the operations classes of an MLClient object.
    isRequired: true
    types:
    - <xref:azure.ai.ml._scope_dependent_operations.OperationScope>
  - name: operation_config
    description: Common configuration for operations classes of an MLClient object.
    isRequired: true
    types:
    - <xref:azure.ai.ml._scope_dependent_operations.OperationConfig>
  - name: service_client
    description: 'Service client to allow end users to operate on Azure Machine Learning
      Workspace

      resources (ServiceClient042023Preview or ServiceClient102021Dataplane).'
    isRequired: true
    types:
    - <xref:typing.Union>[ <xref:azure.ai.ml._restclient.v2023_04_01_preview._azure_machine_learning_workspaces.AzureMachineLearningWorkspaces>,
      <xref:azure.ai.ml._restclient.v2021_10_01_dataplanepreview._azure_machine_learning_workspaces.
      AzureMachineLearningWorkspaces>]
  - name: datastore_operations
    description: Represents a client for performing operations on Datastores.
    isRequired: true
    types:
    - <xref:azure.ai.ml.operations.DatastoreOperations>
  - name: service_client_012024_preview
    isRequired: true
methods:
- uid: azure.ai.ml.operations.DataOperations.archive
  name: archive
  summary: Archive a data asset.
  signature: 'archive(name: str, version: str | None = None, label: str | None = None,
    **kwargs: Any) -> None'
  parameters:
  - name: name
    description: Name of data asset.
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: Version of data asset.
    isRequired: true
    types:
    - <xref:str>
  - name: label
    description: Label of the data asset. (mutually exclusive with version)
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
  examples:
  - "Archive data asset example.<!--[!code-python[Main](les\\ml_samples_misc.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\
    \\samples\\\\ml_samples_misc.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   ml_client.data.archive(\"data_asset_name\")\n\
    \n   ````\n"
- uid: azure.ai.ml.operations.DataOperations.create_or_update
  name: create_or_update
  summary: 'Returns created or updated data asset.


    If not already in storage, asset will be uploaded to the workspace''s blob storage.'
  signature: 'create_or_update(data: Data) -> Data'
  parameters:
  - name: data
    description: Data asset object.
    isRequired: true
    types:
    - <xref:azure.ai.ml.entities.Data>
  return:
    description: Data asset object.
    types:
    - <xref:azure.ai.ml.entities.Data>
  exceptions:
  - type: azure.ai.ml.exceptions.AssetPathException
    description: 'Raised when the Data artifact path is

      already linked to another asset'
  - type: azure.ai.ml.exceptions.ValidationException
    description: 'Raised if Data cannot be successfully validated.

      Details will be provided in the error message.'
  - type: azure.ai.ml.exceptions.EmptyDirectoryError
    description: Raised if local path provided points to an empty directory.
  examples:
  - "Create data assets example.<!--[!code-python[Main](les\\ml_samples_misc.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\
    \\samples\\\\ml_samples_misc.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.ai.ml.entities import Data\n\n   data_asset_example\
    \ = Data(name=data_asset_name, version=\"2.0\", path=\"./sdk/ml/azure-ai-ml/samples/src\"\
    )\n   ml_client.data.create_or_update(data_asset_example)\n\n   ````\n"
- uid: azure.ai.ml.operations.DataOperations.get
  name: get
  summary: Get the specified data asset.
  signature: 'get(name: str, version: str | None = None, label: str | None = None)
    -> Data'
  parameters:
  - name: name
    description: Name of data asset.
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: Version of data asset.
    isRequired: true
    types:
    - <xref:str>
  - name: label
    description: Label of the data asset. (mutually exclusive with version)
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Data asset object.
    types:
    - <xref:azure.ai.ml.entities.Data>
  exceptions:
  - type: azure.ai.ml.exceptions.ValidationException
    description: 'Raised if Data cannot be successfully

      identified and retrieved. Details will be provided in the error message.'
  examples:
  - "Get data assets example.<!--[!code-python[Main](les\\ml_samples_misc.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\
    \\samples\\\\ml_samples_misc.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   ml_client.data.get(name=\"data_asset_name\",\
    \ version=\"2.0\")\n\n   ````\n"
- uid: azure.ai.ml.operations.DataOperations.import_data
  name: import_data
  summary: '> [!NOTE]

    > This is an experimental method, and may change at any time. Please see [https://aka.ms/azuremlexperimental](https://aka.ms/azuremlexperimental)
    for more information.

    >


    Returns the data import job that is creating the data asset.'
  signature: 'import_data(data_import: DataImport, **kwargs: Any) -> PipelineJob'
  parameters:
  - name: data_import
    description: DataImport object.
    isRequired: true
    types:
    - <xref:azure.ai.ml.entities.DataImport>
  return:
    description: data import job object.
    types:
    - <xref:azure.ai.ml.entities.PipelineJob>
  examples:
  - "Import data assets example.<!--[!code-python[Main](les\\ml_samples_misc.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\
    \\samples\\\\ml_samples_misc.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.ai.ml.entities._data_import.data_import\
    \ import DataImport\n   from azure.ai.ml.entities._inputs_outputs.external_data\
    \ import Database\n\n   database_example = Database(query=\"SELECT ID FROM DataTable\"\
    , connection=\"azureml:my_azuresqldb_connection\")\n   data_import_example = DataImport(\n\
    \       name=\"data_asset_name\", path=\"azureml://datastores/workspaceblobstore/paths/\"\
    , source=database_example\n   )\n   ml_client.data.import_data(data_import_example)\n\
    \n   ````\n"
- uid: azure.ai.ml.operations.DataOperations.list
  name: list
  summary: List the data assets of the workspace.
  signature: 'list(name: str | None = None, *, list_view_type: ListViewType = ListViewType.ACTIVE_ONLY)
    -> ItemPaged[Data]'
  parameters:
  - name: name
    description: Name of a specific data asset, optional.
    isRequired: true
    types:
    - <xref:typing.Optional>[<xref:str>]
  keywordOnlyParameters:
  - name: list_view_type
    description: 'View type for including/excluding (for example) archived data assets.

      Default: ACTIVE_ONLY.'
  return:
    description: An iterator like instance of Data objects
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.ai.ml.entities.Data>]
  examples:
  - "List data assets example.<!--[!code-python[Main](les\\ml_samples_misc.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\
    \\samples\\\\ml_samples_misc.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   ml_client.data.list(name=\"data_asset_name\"\
    )\n\n   ````\n"
- uid: azure.ai.ml.operations.DataOperations.list_materialization_status
  name: list_materialization_status
  summary: List materialization jobs of the asset.
  signature: 'list_materialization_status(name: str, *, list_view_type: ListViewType
    = ListViewType.ACTIVE_ONLY, **kwargs: Any) -> Iterable[PipelineJob]'
  parameters:
  - name: name
    description: name of asset being created by the materialization jobs.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: list_view_type
    description: 'View type for including/excluding (for example) archived jobs. Default:
      ACTIVE_ONLY.'
    types:
    - <xref:typing.Optional>[<xref:azure.ai.ml.constants.ListViewType>]
  return:
    description: An iterator like instance of Job objects.
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.ai.ml.entities.PipelineJob>]
  examples:
  - "List materialization jobs example.<!--[!code-python[Main](les\\ml_samples_misc.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    10\\\\azure-ai-ml-1.15.0\\\\samples\\\\ml_samples_misc.py\", \"xml:space\": \"\
    preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\": {\"\
    linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   ml_client.data.list_materialization_status(\"\
    data_asset_name\")\n\n   ````\n"
- uid: azure.ai.ml.operations.DataOperations.mount
  name: mount
  summary: '> [!NOTE]

    > This is an experimental method, and may change at any time. Please see [https://aka.ms/azuremlexperimental](https://aka.ms/azuremlexperimental)
    for more information.

    >


    Mount a data asset to a local path, so that you can access data inside it

    under a local path with any tools of your choice.'
  signature: 'mount(path: str, mount_point: str | None = None, mode: str = ''ro_mount'',
    debug: bool = False, persistent: bool = False, **_kwargs) -> None'
  parameters:
  - name: path
    description: The data asset path to mount, in the form of *azureml:<name>* or
      *azureml:<name>:<version>*.
    isRequired: true
    types:
    - <xref:str>
  - name: mount_point
    description: A local path used as mount point.
    isRequired: true
    types:
    - <xref:str>
  - name: mode
    description: Mount mode. Only *ro_mount* (read-only) is supported for data asset
      mount.
    isRequired: true
    types:
    - <xref:str>
  - name: debug
    description: Whether to enable verbose logging.
    isRequired: true
    types:
    - <xref:bool>
  - name: persistent
    description: 'Whether to persist the mount after reboot. Applies only when running
      on Compute Instance,

      where the ''CI_NAME'' environment variable is set."'
    isRequired: true
    types:
    - <xref:bool>
  return:
    description: None
- uid: azure.ai.ml.operations.DataOperations.restore
  name: restore
  summary: Restore an archived data asset.
  signature: 'restore(name: str, version: str | None = None, label: str | None = None,
    **kwargs: Any) -> None'
  parameters:
  - name: name
    description: Name of data asset.
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: Version of data asset.
    isRequired: true
    types:
    - <xref:str>
  - name: label
    description: Label of the data asset. (mutually exclusive with version)
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
  examples:
  - "Restore data asset example.<!--[!code-python[Main](les\\ml_samples_misc.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\
    \\samples\\\\ml_samples_misc.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   ml_client.data.restore(\"data_asset_name\")\n\
    \n   ````\n"
- uid: azure.ai.ml.operations.DataOperations.share
  name: share
  summary: '> [!NOTE]

    > This is an experimental method, and may change at any time. Please see [https://aka.ms/azuremlexperimental](https://aka.ms/azuremlexperimental)
    for more information.

    >


    Share a data asset from workspace to registry.'
  signature: 'share(name: str, version: str, *, share_with_name: str, share_with_version:
    str, registry_name: str, **kwargs: Any) -> Data'
  parameters:
  - name: name
    description: Name of data asset.
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: Version of data asset.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: share_with_name
    description: Name of data asset to share with.
    types:
    - <xref:str>
  - name: share_with_version
    description: Version of data asset to share with.
    types:
    - <xref:str>
  - name: registry_name
    description: Name of the destination registry.
    types:
    - <xref:str>
  return:
    description: Data asset object.
    types:
    - <xref:azure.ai.ml.entities.Data>
  examples:
  - "Share data asset example.<!--[!code-python[Main](les\\ml_samples_misc.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\
    \\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\10\\\\azure-ai-ml-1.15.0\\\
    \\samples\\\\ml_samples_misc.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n       ml_client.data.share(\n           name=\"\
    data_asset_name\",\n           version=\"2.0\",\n           registry_name=\"my-registry\"\
    ,\n           share_with_name=\"transformed-nyc-taxi-data-shared-from-ws\",\n\
    \           share_with_version=\"2.0\",\n       )\n\n   ````\n"
