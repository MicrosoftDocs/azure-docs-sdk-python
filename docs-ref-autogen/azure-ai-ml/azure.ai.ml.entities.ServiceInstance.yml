### YamlMime:PythonClass
uid: azure.ai.ml.entities.ServiceInstance
name: ServiceInstance
fullName: azure.ai.ml.entities.ServiceInstance
module: azure.ai.ml.entities
inheritances:
- azure.ai.ml.entities._mixins.RestTranslatableMixin
- azure.ai.ml.entities._mixins.DictMixin
summary: Service Instance Result.
constructor:
  syntax: 'ServiceInstance(*, type: str | None = None, port: int | None = None, status:
    str | None = None, error: str | None = None, endpoint: str | None = None, properties:
    Dict[str, str] | None = None, **kwargs: Any)'
  keywordOnlyParameters:
  - name: type
    description: The type of service.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: port
    description: The port used by the service.
    types:
    - <xref:typing.Optional>[<xref:int>]
  - name: status
    description: The status of the service.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: error
    description: The error message.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: endpoint
    description: The service endpoint.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: properties
    description: The service instance's properties.
    types:
    - <xref:typing.Optional>[<xref:dict>[<xref:str>, <xref:str>]]
methods:
- uid: azure.ai.ml.entities.ServiceInstance.get
  name: get
  signature: 'get(key: Any, default: Any | None = None) -> Any'
  parameters:
  - name: key
    isRequired: true
  - name: default
    defaultValue: None
- uid: azure.ai.ml.entities.ServiceInstance.has_key
  name: has_key
  signature: 'has_key(k: Any) -> bool'
  parameters:
  - name: k
    isRequired: true
- uid: azure.ai.ml.entities.ServiceInstance.items
  name: items
  signature: items() -> list
- uid: azure.ai.ml.entities.ServiceInstance.keys
  name: keys
  signature: keys() -> list
- uid: azure.ai.ml.entities.ServiceInstance.update
  name: update
  signature: 'update(*args: Any, **kwargs: Any) -> None'
- uid: azure.ai.ml.entities.ServiceInstance.values
  name: values
  signature: values() -> list
