### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_bytes
  - azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_path
  - azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_stream
  - azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_text
  - azure.storage.blob.appendblobservice.AppendBlobService.append_block
  - azure.storage.blob.appendblobservice.AppendBlobService.create_blob
  - azure.storage.blob.appendblobservice.AppendBlobService.MAX_BLOCK_SIZE
  class: azure.storage.blob.appendblobservice.AppendBlobService
  fullName: azure.storage.blob.appendblobservice.AppendBlobService
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: azure.storage.common.storageclient.StorageClient
    type: azure.storage.blob.baseblobservice.BaseBlobService
  langs:
  - python
  module: azure.storage.blob.appendblobservice
  name: AppendBlobService
  source:
    id: AppendBlobService
    path: azure\storage\blob\appendblobservice.py
    remote:
      branch: master
      path: azure\storage\blob\appendblobservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 53
  summary: 'An append blob is comprised of blocks and is optimized for append operations.

    When you modify an append blob, blocks are added to the end of the blob only,

    via the append_block operation. Updating or deleting of existing blocks is not

    supported. Unlike a block blob, an append blob does not expose its block IDs.


    Each block in an append blob can be a different size, up to a maximum of 4 MB,

    and an append blob can include up to 50,000 blocks. The maximum size of an

    append blob is therefore slightly more than 195 GB (4 MB X 50,000 blocks).








    '
  syntax:
    content: AppendBlobService(account_name=None, account_key=None, sas_token=None,
      is_emulated=False, protocol='https', endpoint_suffix='core.windows.net', custom_domain=None,
      request_session=None, connection_string=None, socket_timeout=None, token_credential=None)
    variables:
    - description: 'The size of the blocks put by append_blob_from_* methods. Smaller
        blocks

        may be put if there is less data provided. The maximum block size the service

        supports is 4MB.

        '
      id: MAX_BLOCK_SIZE
      type:
      - int
  type: class
  uid: azure.storage.blob.appendblobservice.AppendBlobService
- class: azure.storage.blob.appendblobservice.AppendBlobService
  fullName: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_bytes
  langs:
  - python
  module: azure.storage.blob.appendblobservice
  name: append_blob_from_bytes
  source:
    id: append_blob_from_bytes
    path: azure\storage\blob\appendblobservice.py
    remote:
      branch: master
      path: azure\storage\blob\appendblobservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 349
  summary: 'Appends to the content of an existing blob from an array of bytes, with

    automatic chunking and progress notifications.

    '
  syntax:
    content: append_blob_from_bytes(container_name, blob_name, blob, index=0, count=None,
      validate_content=False, maxsize_condition=None, progress_callback=None, lease_id=None,
      timeout=None)
    parameters:
    - description: 'Name of existing container.

        '
      id: container_name
      type:
      - str
    - description: 'Name of blob to create or update.

        '
      id: blob_name
      type:
      - str
    - description: 'Content of blob as an array of bytes.

        '
      id: blob
      type:
      - bytes
    - defaultValue: '0'
      description: 'Start index in the array of bytes.

        '
      id: index
      type:
      - int
    - defaultValue: None
      description: 'Number of bytes to upload. Set to None or negative value to upload

        all bytes starting from index.

        '
      id: count
      type:
      - int
    - defaultValue: 'False'
      description: 'If true, calculates an MD5 hash for each chunk of the blob. The
        storage

        service checks the hash of the content that has arrived with the hash

        that was sent. This is primarily valuable for detecting bitflips on

        the wire if using http instead of https as https (the default) will

        already validate. Note that this MD5 hash is not stored with the

        blob.

        '
      id: validate_content
      type:
      - bool
    - defaultValue: None
      description: 'Optional conditional header. The max length in bytes permitted
        for

        the append blob. If the Append Block operation would cause the blob

        to exceed that limit or if the blob size is already greater than the

        value specified in this header, the request will fail with

        MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).

        '
      id: maxsize_condition
      type:
      - int
    - defaultValue: None
      description: 'Callback for progress with signature function(current, total)
        where

        current is the number of bytes transfered so far, and total is the

        size of the blob, or None if the total size is unknown.

        '
      id: progress_callback
      type:
      - func(current, total)
    - defaultValue: None
      description: 'Required if the blob has an active lease.

        '
      id: lease_id
      type:
      - str
    - defaultValue: None
      description: 'The timeout parameter is expressed in seconds. This method may
        make

        multiple calls to the Azure service and the timeout will apply to

        each call individually.

        '
      id: timeout
      type:
      - int
    return:
      description: 'ETag and last modified properties for the Append Blob

        '
      type:
      - azure.storage.blob.models.ResourceProperties
  type: method
  uid: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_bytes
- class: azure.storage.blob.appendblobservice.AppendBlobService
  fullName: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_path
  langs:
  - python
  module: azure.storage.blob.appendblobservice
  name: append_blob_from_path
  source:
    id: append_blob_from_path
    path: azure\storage\blob\appendblobservice.py
    remote:
      branch: master
      path: azure\storage\blob\appendblobservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 291
  summary: 'Appends to the content of an existing blob from a file path, with automatic

    chunking and progress notifications.

    '
  syntax:
    content: append_blob_from_path(container_name, blob_name, file_path, validate_content=False,
      maxsize_condition=None, progress_callback=None, lease_id=None, timeout=None)
    parameters:
    - description: 'Name of existing container.

        '
      id: container_name
      type:
      - str
    - description: 'Name of blob to create or update.

        '
      id: blob_name
      type:
      - str
    - description: 'Path of the file to upload as the blob content.

        '
      id: file_path
      type:
      - str
    - defaultValue: 'False'
      description: 'If true, calculates an MD5 hash for each chunk of the blob. The
        storage

        service checks the hash of the content that has arrived with the hash

        that was sent. This is primarily valuable for detecting bitflips on

        the wire if using http instead of https as https (the default) will

        already validate. Note that this MD5 hash is not stored with the

        blob.

        '
      id: validate_content
      type:
      - bool
    - defaultValue: None
      description: 'Optional conditional header. The max length in bytes permitted
        for

        the append blob. If the Append Block operation would cause the blob

        to exceed that limit or if the blob size is already greater than the

        value specified in this header, the request will fail with

        MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).

        '
      id: maxsize_condition
      type:
      - int
    - defaultValue: None
      description: 'Callback for progress with signature function(current, total)
        where

        current is the number of bytes transfered so far, and total is the

        size of the blob, or None if the total size is unknown.

        '
      id: progress_callback
      type:
      - func(current, total)
    - defaultValue: None
      description: 'Required if the blob has an active lease.

        '
      id: lease_id
      type:
      - str
    - defaultValue: None
      description: 'The timeout parameter is expressed in seconds. This method may
        make

        multiple calls to the Azure service and the timeout will apply to

        each call individually.

        '
      id: timeout
      type:
      - int
    return:
      description: 'ETag and last modified properties for the Append Blob

        '
      type:
      - azure.storage.blob.models.ResourceProperties
  type: method
  uid: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_path
- class: azure.storage.blob.appendblobservice.AppendBlobService
  fullName: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_stream
  langs:
  - python
  module: azure.storage.blob.appendblobservice
  name: append_blob_from_stream
  source:
    id: append_blob_from_stream
    path: azure\storage\blob\appendblobservice.py
    remote:
      branch: master
      path: azure\storage\blob\appendblobservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 486
  summary: 'Appends to the content of an existing blob from a file/stream, with

    automatic chunking and progress notifications.

    '
  syntax:
    content: append_blob_from_stream(container_name, blob_name, stream, count=None,
      validate_content=False, maxsize_condition=None, progress_callback=None, lease_id=None,
      timeout=None)
    parameters:
    - description: 'Name of existing container.

        '
      id: container_name
      type:
      - str
    - description: 'Name of blob to create or update.

        '
      id: blob_name
      type:
      - str
    - description: 'Opened stream to upload as the blob content.

        '
      id: stream
      type:
      - io.IOBase
    - defaultValue: None
      description: 'Number of bytes to read from the stream. This is optional, but

        should be supplied for optimal performance.

        '
      id: count
      type:
      - int
    - defaultValue: 'False'
      description: 'If true, calculates an MD5 hash for each chunk of the blob. The
        storage

        service checks the hash of the content that has arrived with the hash

        that was sent. This is primarily valuable for detecting bitflips on

        the wire if using http instead of https as https (the default) will

        already validate. Note that this MD5 hash is not stored with the

        blob.

        '
      id: validate_content
      type:
      - bool
    - defaultValue: None
      description: 'Conditional header. The max length in bytes permitted for

        the append blob. If the Append Block operation would cause the blob

        to exceed that limit or if the blob size is already greater than the

        value specified in this header, the request will fail with

        MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).

        '
      id: maxsize_condition
      type:
      - int
    - defaultValue: None
      description: 'Callback for progress with signature function(current, total)
        where

        current is the number of bytes transfered so far, and total is the

        size of the blob, or None if the total size is unknown.

        '
      id: progress_callback
      type:
      - func(current, total)
    - defaultValue: None
      description: 'Required if the blob has an active lease.

        '
      id: lease_id
      type:
      - str
    - defaultValue: None
      description: 'The timeout parameter is expressed in seconds. This method may
        make

        multiple calls to the Azure service and the timeout will apply to

        each call individually.

        '
      id: timeout
      type:
      - int
    return:
      description: 'ETag and last modified properties for the Append Blob

        '
      type:
      - azure.storage.blob.models.ResourceProperties
  type: method
  uid: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_stream
- class: azure.storage.blob.appendblobservice.AppendBlobService
  fullName: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_text
  langs:
  - python
  module: azure.storage.blob.appendblobservice
  name: append_blob_from_text
  source:
    id: append_blob_from_text
    path: azure\storage\blob\appendblobservice.py
    remote:
      branch: master
      path: azure\storage\blob\appendblobservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 422
  summary: 'Appends to the content of an existing blob from str/unicode, with

    automatic chunking and progress notifications.

    '
  syntax:
    content: append_blob_from_text(container_name, blob_name, text, encoding='utf-8',
      validate_content=False, maxsize_condition=None, progress_callback=None, lease_id=None,
      timeout=None)
    parameters:
    - description: 'Name of existing container.

        '
      id: container_name
      type:
      - str
    - description: 'Name of blob to create or update.

        '
      id: blob_name
      type:
      - str
    - description: 'Text to upload to the blob.

        '
      id: text
      type:
      - str
    - defaultValue: utf-8
      description: 'Python encoding to use to convert the text to bytes.

        '
      id: encoding
      type:
      - str
    - defaultValue: 'False'
      description: 'If true, calculates an MD5 hash for each chunk of the blob. The
        storage

        service checks the hash of the content that has arrived with the hash

        that was sent. This is primarily valuable for detecting bitflips on

        the wire if using http instead of https as https (the default) will

        already validate. Note that this MD5 hash is not stored with the

        blob.

        '
      id: validate_content
      type:
      - bool
    - defaultValue: None
      description: 'Optional conditional header. The max length in bytes permitted
        for

        the append blob. If the Append Block operation would cause the blob

        to exceed that limit or if the blob size is already greater than the

        value specified in this header, the request will fail with

        MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).

        '
      id: maxsize_condition
      type:
      - int
    - defaultValue: None
      description: 'Callback for progress with signature function(current, total)
        where

        current is the number of bytes transfered so far, and total is the

        size of the blob, or None if the total size is unknown.

        '
      id: progress_callback
      type:
      - func(current, total)
    - defaultValue: None
      description: 'Required if the blob has an active lease.

        '
      id: lease_id
      type:
      - str
    - defaultValue: None
      description: 'The timeout parameter is expressed in seconds. This method may
        make

        multiple calls to the Azure service and the timeout will apply to

        each call individually.

        '
      id: timeout
      type:
      - int
    return:
      description: 'ETag and last modified properties for the Append Blob

        '
      type:
      - azure.storage.blob.models.ResourceProperties
  type: method
  uid: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_text
- class: azure.storage.blob.appendblobservice.AppendBlobService
  fullName: azure.storage.blob.appendblobservice.AppendBlobService.append_block
  langs:
  - python
  module: azure.storage.blob.appendblobservice
  name: append_block
  source:
    id: append_block
    path: azure\storage\blob\appendblobservice.py
    remote:
      branch: master
      path: azure\storage\blob\appendblobservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 194
  summary: 'Commits a new block of data to the end of an existing append blob.

    '
  syntax:
    content: append_block(container_name, blob_name, block, validate_content=False,
      maxsize_condition=None, appendpos_condition=None, lease_id=None, if_modified_since=None,
      if_unmodified_since=None, if_match=None, if_none_match=None, timeout=None)
    parameters:
    - description: 'Name of existing container.

        '
      id: container_name
      type:
      - str
    - description: 'Name of existing blob.

        '
      id: blob_name
      type:
      - str
    - description: 'Content of the block in bytes.

        '
      id: block
      type:
      - bytes
    - defaultValue: 'False'
      description: 'If true, calculates an MD5 hash of the block content. The storage

        service checks the hash of the content that has arrived

        with the hash that was sent. This is primarily valuable for detecting

        bitflips on the wire if using http instead of https as https (the default)

        will already validate. Note that this MD5 hash is not stored with the

        blob.

        '
      id: validate_content
      type:
      - bool
    - defaultValue: None
      description: 'Optional conditional header. The max length in bytes permitted
        for

        the append blob. If the Append Block operation would cause the blob

        to exceed that limit or if the blob size is already greater than the

        value specified in this header, the request will fail with

        MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).

        '
      id: maxsize_condition
      type:
      - int
    - defaultValue: None
      description: 'Optional conditional header, used only for the Append Block operation.

        A number indicating the byte offset to compare. Append Block will

        succeed only if the append position is equal to this number. If it

        is not, the request will fail with the

        AppendPositionConditionNotMet error

        (HTTP status code 412 - Precondition Failed).

        '
      id: appendpos_condition
      type:
      - int
    - defaultValue: None
      description: 'Required if the blob has an active lease.

        '
      id: lease_id
      type:
      - str
    - defaultValue: None
      description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.

        '
      id: if_modified_since
      type:
      - datetime
    - defaultValue: None
      description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.

        '
      id: if_unmodified_since
      type:
      - datetime
    - defaultValue: None
      description: 'An ETag value, or the wildcard character (*). Specify this header
        to perform

        the operation only if the resource''s ETag matches the value specified.

        '
      id: if_match
      type:
      - str
    - defaultValue: None
      description: 'An ETag value, or the wildcard character (*). Specify this header

        to perform the operation only if the resource''s ETag does not match

        the value specified. Specify the wildcard character (*) to perform

        the operation only if the resource does not exist, and fail the

        operation if it does exist.

        '
      id: if_none_match
      type:
      - str
    - defaultValue: None
      description: 'The timeout parameter is expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'ETag, last modified, append offset, and committed block count

        properties for the updated Append Blob

        '
      type:
      - azure.storage.blob.models.AppendBlockProperties
  type: method
  uid: azure.storage.blob.appendblobservice.AppendBlobService.append_block
- class: azure.storage.blob.appendblobservice.AppendBlobService
  fullName: azure.storage.blob.appendblobservice.AppendBlobService.create_blob
  langs:
  - python
  module: azure.storage.blob.appendblobservice
  name: create_blob
  source:
    id: create_blob
    path: azure\storage\blob\appendblobservice.py
    remote:
      branch: master
      path: azure\storage\blob\appendblobservice.py
      repo: https://github.com/Azure/azure-storage-python.git
    startLine: 122
  summary: 'Creates a blob or overrides an existing blob. Use if_none_match=* to

    prevent overriding an existing blob.


    See create_blob_from_* for high level

    functions that handle the creation and upload of large blobs with

    automatic chunking and progress notifications.

    '
  syntax:
    content: create_blob(container_name, blob_name, content_settings=None, metadata=None,
      lease_id=None, if_modified_since=None, if_unmodified_since=None, if_match=None,
      if_none_match=None, timeout=None)
    parameters:
    - description: 'Name of existing container.

        '
      id: container_name
      type:
      - str
    - description: 'Name of blob to create or update.

        '
      id: blob_name
      type:
      - str
    - defaultValue: None
      description: 'ContentSettings object used to set blob properties.

        '
      id: content_settings
      type:
      - azure.storage.blob.models.ContentSettings
    - defaultValue: None
      description: 'Name-value pairs associated with the blob as metadata.

        '
      id: metadata
      type:
      - dict(str, str)
    - defaultValue: None
      description: 'Required if the blob has an active lease.

        '
      id: lease_id
      type:
      - str
    - defaultValue: None
      description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.

        '
      id: if_modified_since
      type:
      - datetime
    - defaultValue: None
      description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.

        '
      id: if_unmodified_since
      type:
      - datetime
    - defaultValue: None
      description: 'An ETag value, or the wildcard character (*). Specify this header
        to

        perform the operation only if the resource''s ETag matches the value specified.

        '
      id: if_match
      type:
      - str
    - defaultValue: None
      description: 'An ETag value, or the wildcard character (*). Specify this header

        to perform the operation only if the resource''s ETag does not match

        the value specified. Specify the wildcard character (*) to perform

        the operation only if the resource does not exist, and fail the

        operation if it does exist.

        '
      id: if_none_match
      type:
      - str
    - defaultValue: None
      description: 'The timeout parameter is expressed in seconds.

        '
      id: timeout
      type:
      - int
    return:
      description: 'ETag and last modified properties for the updated Append Blob

        '
      type:
      - azure.storage.blob.models.ResourceProperties
  type: method
  uid: azure.storage.blob.appendblobservice.AppendBlobService.create_blob
- class: azure.storage.blob.appendblobservice.AppendBlobService
  fullName: azure.storage.blob.appendblobservice.AppendBlobService.MAX_BLOCK_SIZE
  langs:
  - python
  module: azure.storage.blob.appendblobservice
  name: MAX_BLOCK_SIZE
  syntax:
    content: MAX_BLOCK_SIZE = 4194304
  type: attribute
  uid: azure.storage.blob.appendblobservice.AppendBlobService.MAX_BLOCK_SIZE
references:
- fullName: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_bytes
  isExternal: false
  name: append_blob_from_bytes
  parent: azure.storage.blob.appendblobservice.AppendBlobService
  uid: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_bytes
- fullName: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_path
  isExternal: false
  name: append_blob_from_path
  parent: azure.storage.blob.appendblobservice.AppendBlobService
  uid: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_path
- fullName: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_stream
  isExternal: false
  name: append_blob_from_stream
  parent: azure.storage.blob.appendblobservice.AppendBlobService
  uid: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_stream
- fullName: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_text
  isExternal: false
  name: append_blob_from_text
  parent: azure.storage.blob.appendblobservice.AppendBlobService
  uid: azure.storage.blob.appendblobservice.AppendBlobService.append_blob_from_text
- fullName: azure.storage.blob.appendblobservice.AppendBlobService.append_block
  isExternal: false
  name: append_block
  parent: azure.storage.blob.appendblobservice.AppendBlobService
  uid: azure.storage.blob.appendblobservice.AppendBlobService.append_block
- fullName: azure.storage.blob.appendblobservice.AppendBlobService.create_blob
  isExternal: false
  name: create_blob
  parent: azure.storage.blob.appendblobservice.AppendBlobService
  uid: azure.storage.blob.appendblobservice.AppendBlobService.create_blob
- fullName: azure.storage.blob.appendblobservice.AppendBlobService.MAX_BLOCK_SIZE
  isExternal: false
  name: MAX_BLOCK_SIZE
  parent: azure.storage.blob.appendblobservice.AppendBlobService
  uid: azure.storage.blob.appendblobservice.AppendBlobService.MAX_BLOCK_SIZE
- fullName: func(current, total)
  name: func(current, total)
  spec.python:
  - fullName: func
    name: func
    uid: func
  - fullName: (
    name: (
  - fullName: current
    name: current
    uid: current
  - fullName: ', '
    name: ', '
  - fullName: total
    name: total
    uid: total
  - fullName: )
    name: )
  uid: func(current, total)
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
