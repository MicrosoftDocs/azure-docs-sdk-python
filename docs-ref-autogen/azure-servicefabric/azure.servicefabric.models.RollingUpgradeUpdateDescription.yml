### YamlMime:PythonClass
uid: azure.servicefabric.models.RollingUpgradeUpdateDescription
name: RollingUpgradeUpdateDescription
fullName: azure.servicefabric.models.RollingUpgradeUpdateDescription
module: azure.servicefabric.models
inheritances:
- msrest.serialization.Model
summary: 'Describes the parameters for updating a rolling upgrade of application or

  cluster.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'RollingUpgradeUpdateDescription(*, rolling_upgrade_mode=''UnmonitoredAuto'',
    force_restart: Optional[bool] = None, replica_set_check_timeout_in_milliseconds:
    Optional[int] = None, failure_action=None, health_check_wait_duration_in_milliseconds:
    Optional[str] = None, health_check_stable_duration_in_milliseconds: Optional[str]
    = None, health_check_retry_timeout_in_milliseconds: Optional[str] = None, upgrade_timeout_in_milliseconds:
    Optional[str] = None, upgrade_domain_timeout_in_milliseconds: Optional[str] =
    None, instance_close_delay_duration_in_seconds: Optional[int] = None, **kwargs)'
  parameters:
  - name: rolling_upgrade_mode
    description: 'Required. The mode used to monitor health

      during a rolling upgrade. The values are UnmonitoredAuto,

      UnmonitoredManual, Monitored, and UnmonitoredDeferred. Possible values

      include: ''Invalid'', ''UnmonitoredAuto'', ''UnmonitoredManual'', ''Monitored'',

      ''UnmonitoredDeferred''. Default value: "UnmonitoredAuto" .'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.servicefabric.models.UpgradeMode>
  - name: force_restart
    description: 'If true, then processes are forcefully restarted

      during upgrade even when the code version has not changed (the upgrade

      only changes configuration or data).'
    isRequired: true
    types:
    - <xref:bool>
  - name: replica_set_check_timeout_in_milliseconds
    description: 'The maximum amount of

      time to block processing of an upgrade domain and prevent loss of

      availability when there are unexpected issues. When this timeout expires,

      processing of the upgrade domain will proceed regardless of availability

      loss issues. The timeout is reset at the start of each upgrade domain.

      Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit

      integer).'
    isRequired: true
    types:
    - <xref:long>
  - name: failure_action
    description: 'The compensating action to perform when a Monitored

      upgrade encounters monitoring policy or health policy violations.

      Invalid indicates the failure action is invalid. Rollback specifies that

      the upgrade will start rolling back automatically.

      Manual indicates that the upgrade will switch to UnmonitoredManual upgrade

      mode. Possible values include: ''Invalid'', ''Rollback'', ''Manual'''
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.servicefabric.models.FailureAction>
  - name: health_check_wait_duration_in_milliseconds
    description: 'The amount of time to

      wait after completing an upgrade domain before applying health policies.

      It is first interpreted as a string representing an ISO 8601 duration. If

      that fails, then it is interpreted as a number representing the total

      number of milliseconds.'
    isRequired: true
    types:
    - <xref:str>
  - name: health_check_stable_duration_in_milliseconds
    description: 'The amount of time

      that the application or cluster must remain healthy before the upgrade

      proceeds to the next upgrade domain. It is first interpreted as a string

      representing an ISO 8601 duration. If that fails, then it is interpreted

      as a number representing the total number of milliseconds.'
    isRequired: true
    types:
    - <xref:str>
  - name: health_check_retry_timeout_in_milliseconds
    description: 'The amount of time to

      retry health evaluation when the application or cluster is unhealthy

      before FailureAction is executed. It is first interpreted as a string

      representing an ISO 8601 duration. If that fails, then it is interpreted

      as a number representing the total number of milliseconds.'
    isRequired: true
    types:
    - <xref:str>
  - name: upgrade_timeout_in_milliseconds
    description: 'The amount of time the overall

      upgrade has to complete before FailureAction is executed. It is first

      interpreted as a string representing an ISO 8601 duration. If that fails,

      then it is interpreted as a number representing the total number of

      milliseconds.'
    isRequired: true
    types:
    - <xref:str>
  - name: upgrade_domain_timeout_in_milliseconds
    description: 'The amount of time each

      upgrade domain has to complete before FailureAction is executed. It is

      first interpreted as a string representing an ISO 8601 duration. If that

      fails, then it is interpreted as a number representing the total number of

      milliseconds.'
    isRequired: true
    types:
    - <xref:str>
  - name: instance_close_delay_duration_in_seconds
    description: 'Duration in seconds, to

      wait before a stateless instance is closed, to allow the active requests

      to drain gracefully. This would be effective when the instance is closing

      during the application/cluster

      upgrade, only for those instances which have a non-zero delay duration

      configured in the service description. See

      InstanceCloseDelayDurationSeconds property in $ref:

      "#/definitions/StatelessServiceDescription.yaml" for details.

      Note, the default value of InstanceCloseDelayDurationInSeconds is

      4294967295, which indicates that the behavior will entirely depend on the

      delay configured in the stateless service description.'
    isRequired: true
    types:
    - <xref:long>
