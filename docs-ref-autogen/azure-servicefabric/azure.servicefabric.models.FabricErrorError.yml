### YamlMime:PythonClass
uid: azure.servicefabric.models.FabricErrorError
name: FabricErrorError
fullName: azure.servicefabric.models.FabricErrorError
module: azure.servicefabric.models
inheritances:
- msrest.serialization.Model
summary: 'Error object containing error code and error message.


  All required parameters must be populated in order to send to Azure.'
constructor:
  syntax: 'FabricErrorError(*, code, message: str = None, **kwargs)'
  parameters:
  - name: code
    description: 'Required. Defines the fabric error codes that be returned as

      part of the error object in response to Service Fabric API operations that

      are not successful. Following are the error code values that can be

      returned for a specific HTTP status code.

      - Possible values of the error code for HTTP status code 400 (Bad Request)

      - "FABRIC_E_INVALID_PARTITION_KEY"

      - "FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR"

      - "FABRIC_E_INVALID_ADDRESS"

      - "FABRIC_E_APPLICATION_NOT_UPGRADING"

      - "FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR"

      - "FABRIC_E_FABRIC_NOT_UPGRADING"

      - "FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR"

      - "FABRIC_E_INVALID_CONFIGURATION"

      - "FABRIC_E_INVALID_NAME_URI"

      - "FABRIC_E_PATH_TOO_LONG"

      - "FABRIC_E_KEY_TOO_LARGE"

      - "FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED"

      - "FABRIC_E_INVALID_ATOMIC_GROUP"

      - "FABRIC_E_VALUE_EMPTY"

      - "FABRIC_E_BACKUP_IS_ENABLED"

      - "FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH"

      - "FABRIC_E_INVALID_FOR_STATELESS_SERVICES"

      - "FABRIC_E_INVALID_SERVICE_SCALING_POLICY"

      - "E_INVALIDARG"

      - Possible values of the error code for HTTP status code 404 (Not Found)

      - "FABRIC_E_NODE_NOT_FOUND"

      - "FABRIC_E_APPLICATION_TYPE_NOT_FOUND"

      - "FABRIC_E_APPLICATION_NOT_FOUND"

      - "FABRIC_E_SERVICE_TYPE_NOT_FOUND"

      - "FABRIC_E_SERVICE_DOES_NOT_EXIST"

      - "FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND"

      - "FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND"

      - "FABRIC_E_PARTITION_NOT_FOUND"

      - "FABRIC_E_REPLICA_DOES_NOT_EXIST"

      - "FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST"

      - "FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND"

      - "FABRIC_E_DIRECTORY_NOT_FOUND"

      - "FABRIC_E_FABRIC_VERSION_NOT_FOUND"

      - "FABRIC_E_FILE_NOT_FOUND"

      - "FABRIC_E_NAME_DOES_NOT_EXIST"

      - "FABRIC_E_PROPERTY_DOES_NOT_EXIST"

      - "FABRIC_E_ENUMERATION_COMPLETED"

      - "FABRIC_E_SERVICE_MANIFEST_NOT_FOUND"

      - "FABRIC_E_KEY_NOT_FOUND"

      - "FABRIC_E_HEALTH_ENTITY_NOT_FOUND"

      - "FABRIC_E_BACKUP_NOT_ENABLED"

      - "FABRIC_E_BACKUP_POLICY_NOT_EXISTING"

      - "FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING"

      - "FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR"

      - Possible values of the error code for HTTP status code 409 (Conflict)

      - "FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS"

      - "FABRIC_E_APPLICATION_ALREADY_EXISTS"

      - "FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION"

      - "FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS"

      - "FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS"

      - "FABRIC_E_SERVICE_ALREADY_EXISTS"

      - "FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS"

      - "FABRIC_E_APPLICATION_TYPE_IN_USE"

      - "FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION"

      - "FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS"

      - "FABRIC_E_FABRIC_VERSION_IN_USE"

      - "FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS"

      - "FABRIC_E_NAME_ALREADY_EXISTS"

      - "FABRIC_E_NAME_NOT_EMPTY"

      - "FABRIC_E_PROPERTY_CHECK_FAILED"

      - "FABRIC_E_SERVICE_METADATA_MISMATCH"

      - "FABRIC_E_SERVICE_TYPE_MISMATCH"

      - "FABRIC_E_HEALTH_STALE_REPORT"

      - "FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED"

      - "FABRIC_E_NODE_HAS_NOT_STOPPED_YET"

      - "FABRIC_E_INSTANCE_ID_MISMATCH"

      - "FABRIC_E_BACKUP_IN_PROGRESS"

      - "FABRIC_E_RESTORE_IN_PROGRESS"

      - "FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING"

      - Possible values of the error code for HTTP status code 413 (Request

      Entity Too Large)

      - "FABRIC_E_VALUE_TOO_LARGE"

      - Possible values of the error code for HTTP status code 500 (Internal

      Server Error)

      - "FABRIC_E_NODE_IS_UP"

      - "E_FAIL"

      - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS"

      - "FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND"

      - "FABRIC_E_VOLUME_ALREADY_EXISTS"

      - "FABRIC_E_VOLUME_NOT_FOUND"

      - "SerializationError"

      - Possible values of the error code for HTTP status code 503 (Service

      Unavailable)

      - "FABRIC_E_NO_WRITE_QUORUM"

      - "FABRIC_E_NOT_PRIMARY"

      - "FABRIC_E_NOT_READY"

      - "FABRIC_E_RECONFIGURATION_PENDING"

      - "FABRIC_E_SERVICE_OFFLINE"

      - "E_ABORT"

      - "FABRIC_E_VALUE_TOO_LARGE"

      - Possible values of the error code for HTTP status code 504 (Gateway

      Timeout)

      - "FABRIC_E_COMMUNICATION_ERROR"

      - "FABRIC_E_OPERATION_NOT_COMPLETE"

      - "FABRIC_E_TIMEOUT". Possible values include:

      ''FABRIC_E_INVALID_PARTITION_KEY'',

      ''FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR'', ''FABRIC_E_INVALID_ADDRESS'',

      ''FABRIC_E_APPLICATION_NOT_UPGRADING'',

      ''FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR'',

      ''FABRIC_E_FABRIC_NOT_UPGRADING'',

      ''FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR'',

      ''FABRIC_E_INVALID_CONFIGURATION'', ''FABRIC_E_INVALID_NAME_URI'',

      ''FABRIC_E_PATH_TOO_LONG'', ''FABRIC_E_KEY_TOO_LARGE'',

      ''FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED'',

      ''FABRIC_E_INVALID_ATOMIC_GROUP'', ''FABRIC_E_VALUE_EMPTY'',

      ''FABRIC_E_NODE_NOT_FOUND'', ''FABRIC_E_APPLICATION_TYPE_NOT_FOUND'',

      ''FABRIC_E_APPLICATION_NOT_FOUND'', ''FABRIC_E_SERVICE_TYPE_NOT_FOUND'',

      ''FABRIC_E_SERVICE_DOES_NOT_EXIST'',

      ''FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND'',

      ''FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND'',

      ''FABRIC_E_PARTITION_NOT_FOUND'', ''FABRIC_E_REPLICA_DOES_NOT_EXIST'',

      ''FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST'',

      ''FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND'',

      ''FABRIC_E_DIRECTORY_NOT_FOUND'', ''FABRIC_E_FABRIC_VERSION_NOT_FOUND'',

      ''FABRIC_E_FILE_NOT_FOUND'', ''FABRIC_E_NAME_DOES_NOT_EXIST'',

      ''FABRIC_E_PROPERTY_DOES_NOT_EXIST'', ''FABRIC_E_ENUMERATION_COMPLETED'',

      ''FABRIC_E_SERVICE_MANIFEST_NOT_FOUND'', ''FABRIC_E_KEY_NOT_FOUND'',

      ''FABRIC_E_HEALTH_ENTITY_NOT_FOUND'',

      ''FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS'',

      ''FABRIC_E_APPLICATION_ALREADY_EXISTS'',

      ''FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION'',

      ''FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS'',

      ''FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS'',

      ''FABRIC_E_SERVICE_ALREADY_EXISTS'',

      ''FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS'',

      ''FABRIC_E_APPLICATION_TYPE_IN_USE'',

      ''FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION'',

      ''FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS'',

      ''FABRIC_E_FABRIC_VERSION_IN_USE'', ''FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS'',

      ''FABRIC_E_NAME_ALREADY_EXISTS'', ''FABRIC_E_NAME_NOT_EMPTY'',

      ''FABRIC_E_PROPERTY_CHECK_FAILED'', ''FABRIC_E_SERVICE_METADATA_MISMATCH'',

      ''FABRIC_E_SERVICE_TYPE_MISMATCH'', ''FABRIC_E_HEALTH_STALE_REPORT'',

      ''FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED'',

      ''FABRIC_E_NODE_HAS_NOT_STOPPED_YET'', ''FABRIC_E_INSTANCE_ID_MISMATCH'',

      ''FABRIC_E_VALUE_TOO_LARGE'', ''FABRIC_E_NO_WRITE_QUORUM'',

      ''FABRIC_E_NOT_PRIMARY'', ''FABRIC_E_NOT_READY'',

      ''FABRIC_E_RECONFIGURATION_PENDING'', ''FABRIC_E_SERVICE_OFFLINE'', ''E_ABORT'',

      ''FABRIC_E_COMMUNICATION_ERROR'', ''FABRIC_E_OPERATION_NOT_COMPLETE'',

      ''FABRIC_E_TIMEOUT'', ''FABRIC_E_NODE_IS_UP'', ''E_FAIL'',

      ''FABRIC_E_BACKUP_IS_ENABLED'',

      ''FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH'',

      ''FABRIC_E_INVALID_FOR_STATELESS_SERVICES'', ''FABRIC_E_BACKUP_NOT_ENABLED'',

      ''FABRIC_E_BACKUP_POLICY_NOT_EXISTING'',

      ''FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_EXISTING'',

      ''FABRIC_E_BACKUP_IN_PROGRESS'', ''FABRIC_E_RESTORE_IN_PROGRESS'',

      ''FABRIC_E_BACKUP_POLICY_ALREADY_EXISTING'',

      ''FABRIC_E_INVALID_SERVICE_SCALING_POLICY'', ''E_INVALIDARG'',

      ''FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS'',

      ''FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND'',

      ''FABRIC_E_VOLUME_ALREADY_EXISTS'', ''FABRIC_E_VOLUME_NOT_FOUND'',

      ''SerializationError'', ''FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR'''
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.servicefabric.models.FabricErrorCodes>
  - name: message
    description: Error message.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: code
    isRequired: true
  - name: message
    isRequired: true
methods:
- uid: azure.servicefabric.models.FabricErrorError.as_dict
  name: as_dict
  summary: "Return a dict that can be JSONify using json.dump.\n\nAdvanced usage might\
    \ optionally use a callback as parameter:\n\nKey is the attribute name used in\
    \ Python. Attr_desc\nis a dict of metadata. Currently contains 'type' with the\n\
    msrest type and 'key' with the RestAPI encoded key.\nValue is the current value\
    \ in this object.\n\nThe string returned will be used to serialize the key.\n\
    If the return type is a list, this is considered hierarchical\nresult dict.\n\n\
    See the three examples in this file:\n\n* attribute_transformer \n\n* full_restapi_key_transformer\
    \ \n\n* last_restapi_key_transformer \n\nIf you want XML serialization, you can\
    \ pass the kwargs is_xml=True."
  signature: as_dict(keep_readonly=True, key_transformer=<function attribute_transformer>,
    **kwargs)
  parameters:
  - name: key_transformer
    description: A key transformer function.
    types:
    - <xref:function>
  - name: keep_readonly
    defaultValue: 'True'
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.servicefabric.models.FabricErrorError.deserialize
  name: deserialize
  summary: Parse a str using the RestAPI syntax and return a model.
  signature: deserialize(data, content_type=None)
  parameters:
  - name: data
    description: A str using RestAPI structure. JSON by default.
    isRequired: true
    types:
    - <xref:str>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.servicefabric.models.FabricErrorError.enable_additional_properties_sending
  name: enable_additional_properties_sending
  signature: enable_additional_properties_sending()
- uid: azure.servicefabric.models.FabricErrorError.from_dict
  name: from_dict
  summary: 'Parse a dict using given key extractor return a model.


    By default consider key

    extractors (rest_key_case_insensitive_extractor, attribute_key_case_insensitive_extractor

    and last_rest_key_case_insensitive_extractor)'
  signature: from_dict(data, key_extractors=None, content_type=None)
  parameters:
  - name: data
    description: A dict using RestAPI structure
    isRequired: true
    types:
    - <xref:dict>
  - name: content_type
    description: JSON by default, set application/xml if XML.
    defaultValue: None
    types:
    - <xref:str>
  - name: key_extractors
    defaultValue: None
  return:
    description: An instance of this model
  exceptions:
  - type: DeserializationError if something went wrong
- uid: azure.servicefabric.models.FabricErrorError.is_xml_model
  name: is_xml_model
  signature: is_xml_model()
- uid: azure.servicefabric.models.FabricErrorError.serialize
  name: serialize
  summary: 'Return the JSON that would be sent to azure from this model.


    This is an alias to *as_dict(full_restapi_key_transformer, keep_readonly=False)*.


    If you want XML serialization, you can pass the kwargs is_xml=True.'
  signature: serialize(keep_readonly=False, **kwargs)
  parameters:
  - name: keep_readonly
    description: If you want to serialize the readonly attributes
    defaultValue: 'False'
    types:
    - <xref:bool>
  return:
    description: A dict JSON compatible object
    types:
    - <xref:dict>
- uid: azure.servicefabric.models.FabricErrorError.validate
  name: validate
  summary: Validate this model recursively and return a list of ValidationError.
  signature: validate()
  return:
    description: A list of validation error
    types:
    - <xref:list>
