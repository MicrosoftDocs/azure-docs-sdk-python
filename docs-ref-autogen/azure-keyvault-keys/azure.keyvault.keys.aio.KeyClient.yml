### YamlMime:PythonClass
uid: azure.keyvault.keys.aio.KeyClient
name: KeyClient
fullName: azure.keyvault.keys.aio.KeyClient
module: azure.keyvault.keys.aio
inheritances:
- azure.keyvault.keys._shared.async_client_base.AsyncKeyVaultClientBase
summary: A high-level asynchronous interface for managing a vault's keys.
constructor:
  parameters:
  - name: vault_url
    description: URL of the vault the client will access
    types:
    - <xref:str>
  - name: credential
    description: 'An object which can provide an access token for the vault, such
      as a credential from

      <xref:azure.identity.aio>'
  - name: api_version
    description: version of the Key Vault API to use. Defaults to the most recent.
    types:
    - <xref:azure.keyvault.keys.ApiVersion>
  - name: transport
    description: 'transport to use. Defaults to

      <xref:azure.core.pipeline.transport.AioHttpTransport>.'
    types:
    - <xref:azure.core.pipeline.transport.AsyncHttpTransport>
examples:
- "Create a new `KeyClient`<!--[!code-python[Main](s\\test_samples_keys_async.py )]-->\n\
  \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-keyvault-keys-4.3.1\\\
  \\tests\\\\test_samples_keys_async.py\", \"xml:space\": \"preserve\", \"language\"\
  : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
  \n````python\n\n\n   from azure.identity.aio import DefaultAzureCredential\n   from\
  \ azure.keyvault.keys.aio import KeyClient\n\n   # Create a KeyClient using default\
  \ Azure credentials\n   credential = DefaultAzureCredential()\n   key_client = KeyClient(vault_url,\
  \ credential)\n\n\n   ````\n"
methods:
- uid: azure.keyvault.keys.aio.KeyClient.backup_key
  name: backup_key
  summary: 'Back up a key in a protected form useable only by Azure Key Vault. Requires
    key/backup permission.


    This is intended to allow copying a key from one vault to another. Both vaults
    must be owned by the same Azure

    subscription. Also, backup / restore cannot be performed across geopolitical boundaries.
    For example, a backup

    from a vault in a USA region cannot be restored to a vault in an EU region.'
  signature: 'backup_key(name: str, **kwargs: typing.Any) -> bytes'
  parameters:
  - name: name
    description: The name of the key to back up
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:bytes>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  examples:
  - "Get a key backup<!--[!code-python[Main](s\\test_samples_keys_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\\
    azure-keyvault-keys-4.3.1\\\\tests\\\\test_samples_keys_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # backup key\n   key_backup\
    \ = await key_client.backup_key(key_name)\n\n   # returns the raw bytes of the\
    \ backup\n   print(key_backup)\n\n\n   ````\n"
- uid: azure.keyvault.keys.aio.KeyClient.create_ec_key
  name: create_ec_key
  summary: 'Create a new elliptic curve key or, if *name* is already in use, create
    a new version of the key.


    Requires the keys/create permission.'
  signature: 'create_ec_key(name: str, **kwargs: typing.Any) -> azure.keyvault.keys._models.KeyVaultKey'
  parameters:
  - name: name
    description: The name for the new key.
    isRequired: true
    types:
    - <xref:str>
  - name: curve
    description: Elliptic curve name. Defaults to the NIST P-256 elliptic curve.
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.KeyCurveName>
    - <xref:str>
  - name: key_operations
    description: Allowed key operations
    isRequired: true
    types:
    - <xref:list>[<xref:azure.keyvault.keys.KeyOperation>
    - <xref:str>]
  - name: hardware_protected
    description: 'Whether the key should be created in a hardware security module.

      Defaults to `False`.'
    isRequired: true
    types:
    - <xref:bool>
  - name: enabled
    description: Whether the key is enabled for use.
    isRequired: true
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    isRequired: true
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: not_before
    description: Not before date of the key in UTC
    isRequired: true
    types:
    - <xref:datetime.datetime>
  - name: expires_on
    description: Expiry date of the key in UTC
    isRequired: true
    types:
    - <xref:datetime.datetime>
  return:
    description: The created key
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Create an elliptic curve key<!--[!code-python[Main](s\\test_samples_keys_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\17\\\\azure-keyvault-keys-4.3.1\\\\tests\\\\test_samples_keys_async.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # create an elliptic curve (ec)\
    \ key\n   key_curve = \"P-256\"\n   ec_key = await key_client.create_ec_key(\"\
    key-name\", curve=key_curve)\n\n   print(ec_key.id)\n   print(ec_key.name)\n \
    \  print(ec_key.key_type)\n   print(ec_key.key.crv)\n\n\n   ````\n"
- uid: azure.keyvault.keys.aio.KeyClient.create_key
  name: create_key
  summary: 'Create a key or, if *name* is already in use, create a new version of
    the key.


    Requires keys/create permission.'
  parameters:
  - name: name
    description: The name of the new key.
    isRequired: true
    types:
    - <xref:str>
  - name: key_type
    description: The type of key to create
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.KeyType>
    - <xref:str>
  - name: size
    description: 'RSA key size in bits, for example 2048, 3072, or 4096. Applies only
      to RSA keys. To

      create an RSA key, consider using <xref:azure.keyvault.keys.aio.create_rsa_key>
      instead.'
    isRequired: true
    types:
    - <xref:int>
  - name: curve
    description: 'Elliptic curve name. Applies only to elliptic curve keys. Defaults
      to the NIST P-256

      elliptic curve. To create an elliptic curve key, consider using <xref:azure.keyvault.keys.aio.KeyClient.create_ec_key>
      instead.'
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.KeyCurveName>
    - <xref:str>
  - name: key_operations
    description: Allowed key operations
    isRequired: true
    types:
    - <xref:list>[<xref:azure.keyvault.keys.KeyOperation>
    - <xref:str>]
  - name: enabled
    description: Whether the key is enabled for use.
    isRequired: true
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    isRequired: true
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: not_before
    description: Not before date of the key in UTC
    isRequired: true
    types:
    - <xref:datetime.datetime>
  - name: expires_on
    description: Expiry date of the key in UTC
    isRequired: true
    types:
    - <xref:datetime.datetime>
  return:
    description: The created key
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Create a key<!--[!code-python[Main](s\\test_samples_keys_async.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-keyvault-keys-4.3.1\\\
    \\tests\\\\test_samples_keys_async.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n\n   from dateutil import parser as date_parse\n\n   key_size\
    \ = 2048\n   key_ops = [\"encrypt\", \"decrypt\", \"sign\", \"verify\", \"wrapKey\"\
    , \"unwrapKey\"]\n   expires_on = date_parse.parse(\"2050-02-02T08:00:00.000Z\"\
    )\n\n   # create a key with optional arguments\n   key = await key_client.create_key(\n\
    \       \"key-name\", \"RSA\", size=key_size, key_operations=key_ops, expires_on=expires_on\n\
    \   )\n\n   print(key.id)\n   print(key.name)\n   print(key.key_type)\n   print(key.properties.enabled)\n\
    \   print(key.properties.expires_on)\n\n\n   ````\n"
- uid: azure.keyvault.keys.aio.KeyClient.create_rsa_key
  name: create_rsa_key
  summary: 'Create a new RSA key or, if *name* is already in use, create a new version
    of the key


    Requires the keys/create permission.'
  signature: 'create_rsa_key(name: str, **kwargs: typing.Any) -> azure.keyvault.keys._models.KeyVaultKey'
  parameters:
  - name: name
    description: The name for the new key.
    isRequired: true
    types:
    - <xref:str>
  - name: size
    description: Key size in bits, for example 2048, 3072, or 4096.
    isRequired: true
    types:
    - <xref:int>
  - name: hardware_protected
    description: 'Whether the key should be created in a hardware security module.

      Defaults to `False`.'
    isRequired: true
    types:
    - <xref:bool>
  - name: key_operations
    description: Allowed key operations
    isRequired: true
    types:
    - <xref:list>[<xref:azure.keyvault.keys.KeyOperation>
    - <xref:str>]
  - name: enabled
    description: Whether the key is enabled for use.
    isRequired: true
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    isRequired: true
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: not_before
    description: Not before date of the key in UTC
    isRequired: true
    types:
    - <xref:datetime.datetime>
  - name: expires_on
    description: Expiry date of the key in UTC
    isRequired: true
    types:
    - <xref:datetime.datetime>
  return:
    description: The created key
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Create RSA key<!--[!code-python[Main](s\\test_samples_keys_async.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\\
    azure-keyvault-keys-4.3.1\\\\tests\\\\test_samples_keys_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # create an rsa key in a hardware\
    \ security module\n   key = await key_client.create_rsa_key(\"key-name\", hardware_protected=True,\
    \ size=2048)\n\n   print(key.id)\n   print(key.name)\n   print(key.key_type)\n\
    \n\n   ````\n"
- uid: azure.keyvault.keys.aio.KeyClient.delete_key
  name: delete_key
  summary: 'Delete all versions of a key and its cryptographic material. Requires
    keys/delete permission.


    If the vault has soft-delete enabled, deletion may take several seconds to complete.'
  signature: 'delete_key(name: str, **kwargs: typing.Any) -> azure.keyvault.keys._models.DeletedKey'
  parameters:
  - name: name
    description: The name of the key to delete
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The deleted key
    types:
    - <xref:azure.keyvault.keys.DeletedKey>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  examples:
  - "Delete a key<!--[!code-python[Main](s\\test_samples_keys_async.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-keyvault-keys-4.3.1\\\
    \\tests\\\\test_samples_keys_async.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n\n   # delete a key\n   deleted_key = await key_client.delete_key(\"\
    key-name\")\n\n   print(deleted_key.name)\n\n   # if the vault has soft-delete\
    \ enabled, the key's\n   # scheduled purge date, deleted_date and recovery id\
    \ are set\n   print(deleted_key.deleted_date)\n   print(deleted_key.scheduled_purge_date)\n\
    \   print(deleted_key.recovery_id)\n\n\n   ````\n"
- uid: azure.keyvault.keys.aio.KeyClient.get_deleted_key
  name: get_deleted_key
  summary: Get a deleted key. Possible only in a vault with soft-delete enabled. Requires
    keys/get permission.
  signature: 'get_deleted_key(name: str, **kwargs: typing.Any) -> azure.keyvault.keys._models.DeletedKey'
  parameters:
  - name: name
    description: The name of the key
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The deleted key
    types:
    - <xref:azure.keyvault.keys.DeletedKey>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  examples:
  - "Get a deleted key<!--[!code-python[Main](s\\test_samples_keys_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\\
    azure-keyvault-keys-4.3.1\\\\tests\\\\test_samples_keys_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get a deleted key (requires\
    \ soft-delete enabled for the vault)\n   deleted_key = await key_client.get_deleted_key(\"\
    key-name\")\n   print(deleted_key.name)\n\n\n   ````\n"
- uid: azure.keyvault.keys.aio.KeyClient.get_key
  name: get_key
  summary: Get a key's attributes and, if it's an asymmetric key, its public material.
    Requires keys/get permission.
  signature: 'get_key(name: str, version: typing.Union[str, NoneType] = None, **kwargs:
    typing.Any) -> azure.keyvault.keys._models.KeyVaultKey'
  parameters:
  - name: name
    description: The name of the key to get.
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: '(optional) A specific version of the key to get. If not specified,
      gets the latest version

      of the key.'
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  examples:
  - "Get a key<!--[!code-python[Main](s\\test_samples_keys_async.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-keyvault-keys-4.3.1\\\
    \\tests\\\\test_samples_keys_async.py\", \"xml:space\": \"preserve\", \"language\"\
    : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n\n   # get the latest version of a key\n   key = await key_client.get_key(\"\
    key-name\")\n\n   # alternatively, specify a version\n   key_version = key.properties.version\n\
    \   key = await key_client.get_key(\"key-name\", key_version)\n\n   print(key.id)\n\
    \   print(key.name)\n   print(key.properties.version)\n   print(key.key_type)\n\
    \   print(key.properties.vault_url)\n\n\n   ````\n"
- uid: azure.keyvault.keys.aio.KeyClient.import_key
  name: import_key
  summary: 'Import a key created externally. Requires keys/import permission.


    If *name* is already in use, the key will be imported as a new version.'
  signature: 'import_key(name: str, key: azure.keyvault.keys._models.JsonWebKey, **kwargs:
    typing.Any) -> azure.keyvault.keys._models.KeyVaultKey'
  parameters:
  - name: name
    description: Name for the imported key
    isRequired: true
    types:
    - <xref:str>
  - name: key
    description: The JSON web key to import
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.JsonWebKey>
  - name: hardware_protected
    description: Whether the key should be backed by a hardware security module
    isRequired: true
    types:
    - <xref:bool>
  - name: enabled
    description: Whether the key is enabled for use.
    isRequired: true
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    isRequired: true
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: not_before
    description: Not before date of the key in UTC
    isRequired: true
    types:
    - <xref:datetime.datetime>
  - name: expires_on
    description: Expiry date of the key in UTC
    isRequired: true
    types:
    - <xref:datetime.datetime>
  return:
    description: The imported key
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.keyvault.keys.aio.KeyClient.list_deleted_keys
  name: list_deleted_keys
  summary: 'List all deleted keys, including the public part of each. Possible only
    in a vault with soft-delete enabled.


    Requires keys/list permission.'
  return:
    description: An iterator of deleted keys
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.keyvault.keys.DeletedKey>]
  examples:
  - "List all the deleted keys<!--[!code-python[Main](s\\test_samples_keys_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\17\\\\azure-keyvault-keys-4.3.1\\\\tests\\\\test_samples_keys_async.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get an iterator of deleted\
    \ keys (requires soft-delete enabled for the vault)\n   deleted_keys = key_client.list_deleted_keys()\n\
    \n   async for key in deleted_keys:\n       print(key.id)\n       print(key.name)\n\
    \       print(key.scheduled_purge_date)\n       print(key.recovery_id)\n     \
    \  print(key.deleted_date)\n\n\n   ````\n"
- uid: azure.keyvault.keys.aio.KeyClient.list_properties_of_key_versions
  name: list_properties_of_key_versions
  summary: List the identifiers and properties of a key's versions. Requires keys/list
    permission.
  parameters:
  - name: name
    description: The name of the key
    isRequired: true
    types:
    - <xref:str>
  return:
    description: An iterator of keys without their cryptographic material
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.keyvault.keys.KeyProperties>]
  examples:
  - "List all versions of a key<!--[!code-python[Main](s\\test_samples_keys_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\17\\\\azure-keyvault-keys-4.3.1\\\\tests\\\\test_samples_keys_async.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get an iterator of all versions\
    \ of a key\n   key_versions = key_client.list_properties_of_key_versions(\"key-name\"\
    )\n\n   async for key in key_versions:\n       print(key.id)\n       print(key.updated_on)\n\
    \       print(key.properties.version)\n       print(key.expires_on)\n\n\n   ````\n"
- uid: azure.keyvault.keys.aio.KeyClient.list_properties_of_keys
  name: list_properties_of_keys
  summary: List identifiers and properties of all keys in the vault. Requires keys/list
    permission.
  return:
    description: An iterator of keys without their cryptographic material or version
      information
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.keyvault.keys.KeyProperties>]
  examples:
  - "List all keys<!--[!code-python[Main](s\\test_samples_keys_async.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\\
    azure-keyvault-keys-4.3.1\\\\tests\\\\test_samples_keys_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # list keys\n   keys = key_client.list_properties_of_keys()\n\
    \n   async for key in keys:\n       print(key.id)\n       print(key.created_on)\n\
    \       print(key.name)\n       print(key.updated_on)\n       print(key.enabled)\n\
    \n\n   ````\n"
- uid: azure.keyvault.keys.aio.KeyClient.purge_deleted_key
  name: purge_deleted_key
  summary: 'Permanently deletes a deleted key. Only possible in a vault with soft-delete
    enabled.


    Performs an irreversible deletion of the specified key, without

    possibility for recovery. The operation is not available if the

    <xref:azure.keyvault.keys.KeyProperties.recovery_level> does not specify ''Purgeable''.

    This method is only necessary for purging a key before its

    <xref:azure.keyvault.keys.DeletedKey.scheduled_purge_date>.


    Requires keys/purge permission.'
  signature: 'purge_deleted_key(name: str, **kwargs: typing.Any) -> None'
  parameters:
  - name: name
    description: The name of the deleted key to purge
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n   # if the\
    \ vault has soft-delete enabled, purge permanently deletes a deleted key\n   #\
    \ (with soft-delete disabled, delete_key is permanent)\n   await key_client.purge_deleted_key(\"\
    key-name\")\n   ````\n"
- uid: azure.keyvault.keys.aio.KeyClient.recover_deleted_key
  name: recover_deleted_key
  summary: 'Recover a deleted key to its latest version. Possible only in a vault
    with soft-delete enabled.


    Requires keys/recover permission. If the vault does not have soft-delete enabled,
    <xref:azure.keyvault.keys.aio.KeyClient.delete_key> is

    permanent, and this method will raise an error. Attempting to recover a non-deleted
    key will also raise an

    error.'
  signature: 'recover_deleted_key(name: str, **kwargs: typing.Any) -> azure.keyvault.keys._models.KeyVaultKey'
  parameters:
  - name: name
    description: The name of the deleted key
    isRequired: true
    types:
    - <xref:str>
  return:
    description: The recovered key
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Recover a deleted key<!--[!code-python[Main](s\\test_samples_keys_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\\
    azure-keyvault-keys-4.3.1\\\\tests\\\\test_samples_keys_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # recover deleted key to its\
    \ latest version (requires soft-delete enabled for the vault)\n   recovered_key\
    \ = await key_client.recover_deleted_key(\"key-name\")\n   print(recovered_key.id)\n\
    \   print(recovered_key.name)\n\n\n   ````\n"
- uid: azure.keyvault.keys.aio.KeyClient.restore_key_backup
  name: restore_key_backup
  summary: 'Restore a key backup to the vault. Requires keys/restore permission.


    This imports all versions of the key, with its name, attributes, and access control
    policies. If the key''s name

    is already in use, restoring it will fail. Also, the target vault must be owned
    by the same Microsoft Azure

    subscription as the source vault.'
  signature: 'restore_key_backup(backup: bytes, **kwargs: typing.Any) -> azure.keyvault.keys._models.KeyVaultKey'
  parameters:
  - name: backup
    description: A key backup as returned by <xref:azure.keyvault.keys.aio.KeyClient.backup_key>
    isRequired: true
    types:
    - <xref:bytes>
  return:
    description: The restored key
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.ResourceExistsError
  examples:
  - "Restore a key backup<!--[!code-python[Main](s\\test_samples_keys_async.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\\
    azure-keyvault-keys-4.3.1\\\\tests\\\\test_samples_keys_async.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # restores a backup\n   restored_key\
    \ = await key_client.restore_key_backup(key_backup)\n   print(restored_key.id)\n\
    \   print(restored_key.name)\n   print(restored_key.properties.version)\n\n\n\
    \   ````\n"
- uid: azure.keyvault.keys.aio.KeyClient.update_key_properties
  name: update_key_properties
  summary: Change a key's properties (not its cryptographic material). Requires keys/update
    permission.
  signature: 'update_key_properties(name: str, version: typing.Union[str, NoneType]
    = None, **kwargs: typing.Any) -> azure.keyvault.keys._models.KeyVaultKey'
  parameters:
  - name: name
    description: The name of key to update
    isRequired: true
    types:
    - <xref:str>
  - name: version
    description: (optional) The version of the key to update. If unspecified, the
      latest version is updated.
    isRequired: true
    types:
    - <xref:str>
  - name: key_operations
    description: Allowed key operations
    isRequired: true
    types:
    - <xref:list>[<xref:azure.keyvault.keys.KeyOperation>
    - <xref:str>]
  - name: enabled
    description: Whether the key is enabled for use.
    isRequired: true
    types:
    - <xref:bool>
  - name: tags
    description: Application specific metadata in the form of key-value pairs.
    isRequired: true
    types:
    - <xref:dict>[<xref:str>, <xref:str>]
  - name: not_before
    description: Not before date of the key in UTC
    isRequired: true
    types:
    - <xref:datetime.datetime>
  - name: expires_on
    description: Expiry date of the key in UTC
    isRequired: true
    types:
    - <xref:datetime.datetime>
  return:
    description: The updated key
    types:
    - <xref:azure.keyvault.keys.KeyVaultKey>
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.ResourceNotFoundError
  examples:
  - "Update a key's attributes<!--[!code-python[Main](s\\test_samples_keys_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\17\\\\azure-keyvault-keys-4.3.1\\\\tests\\\\test_samples_keys_async.py\", \"\
    xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n\n   # update attributes of an existing\
    \ key\n   expires_on = date_parse.parse(\"2050-01-02T08:00:00.000Z\")\n   tags\
    \ = {\"foo\": \"updated tag\"}\n   updated_key = await key_client.update_key_properties(key.name,\
    \ expires_on=expires_on, tags=tags)\n\n   print(updated_key.properties.version)\n\
    \   print(updated_key.properties.updated_on)\n   print(updated_key.properties.expires_on)\n\
    \   print(updated_key.properties.tags)\n   print(updated_key.key_type)\n\n\n \
    \  ````\n"
