### YamlMime:PythonClass
uid: azure.keyvault.keys.crypto.aio.CryptographyClient
name: CryptographyClient
fullName: azure.keyvault.keys.crypto.aio.CryptographyClient
module: azure.keyvault.keys.crypto.aio
inheritances:
- azure.keyvault.keys._shared.async_client_base.AsyncKeyVaultClientBase
summary: 'Performs cryptographic operations using Azure Key Vault keys.


  This client will perform operations locally when it''s intialized with the necessary
  key material or is able to get

  that material from Key Vault. When the required key material is unavailable, cryptographic
  operations are performed

  by the Key Vault service.'
constructor:
  syntax: 'CryptographyClient(key: KeyVaultKey | str, credential: AsyncTokenCredential,
    **kwargs: Any)'
  parameters:
  - name: key
    description: 'Either a azure.keyvault.keys.KeyVaultKey instance as returned by

      <xref:azure.keyvault.keys.aio.KeyClient.get_key>, or a string.

      If a string, the value must be the identifier of an Azure Key Vault key. Including
      a version is recommended.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.keyvault.keys.KeyVaultKey>
  - name: credential
    description: 'An object which can provide an access token for the vault, such
      as a credential from

      <xref:azure.identity.aio>'
    isRequired: true
    types:
    - <xref:azure.core.credentials_async.AsyncTokenCredential>
  keywordOnlyParameters:
  - name: api_version
    description: Version of the service API to use. Defaults to the most recent.
    types:
    - <xref:azure.keyvault.keys.ApiVersion>
    - <xref:str>
  - name: verify_challenge_resource
    description: 'Whether to verify the authentication challenge resource matches
      the Key

      Vault or Managed HSM domain. Defaults to True.'
    types:
    - <xref:bool>
methods:
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.close
  name: close
  summary: 'Close sockets opened by the client.


    Calling this method is unnecessary when using the client as a context manager.'
  signature: async close() -> None
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.decrypt
  name: decrypt
  summary: 'Decrypt a single block of encrypted data using the client''s key.


    Requires the keys/decrypt permission. This method decrypts only a single block
    of data, whose size depends on

    the key and encryption algorithm.'
  signature: 'async decrypt(algorithm: EncryptionAlgorithm, ciphertext: bytes, **kwargs:
    Any) -> DecryptResult'
  parameters:
  - name: algorithm
    description: Encryption algorithm to use
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.crypto.EncryptionAlgorithm>
  - name: ciphertext
    description: 'Encrypted bytes to decrypt. Microsoft recommends you not use CBC
      without first ensuring

      the integrity of the ciphertext using, for example, an HMAC. See

      [https://docs.microsoft.com/dotnet/standard/security/vulnerabilities-cbc-mode](https://docs.microsoft.com/dotnet/standard/security/vulnerabilities-cbc-mode)
      for more information.'
    isRequired: true
    types:
    - <xref:bytes>
  keywordOnlyParameters:
  - name: iv
    description: The initialization vector used during encryption. Required for AES
      decryption.
    types:
    - <xref:bytes>
    - <xref:None>
  - name: authentication_tag
    description: 'The authentication tag generated during encryption. Required for
      only AES-GCM

      decryption.'
    types:
    - <xref:bytes>
    - <xref:None>
  - name: additional_authenticated_data
    description: 'Optional data that is authenticated but not encrypted. For use

      with AES-GCM decryption.'
    types:
    - <xref:bytes>
    - <xref:None>
  return:
    description: The result of the decryption operation.
    types:
    - <xref:azure.keyvault.keys.crypto.DecryptResult>
  exceptions:
  - type: ValueError
    description: If parameters that are incompatible with the specified algorithm
      are provided.
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.encrypt
  name: encrypt
  summary: 'Encrypt bytes using the client''s key.


    Requires the keys/encrypt permission. This method encrypts only a single block
    of data, whose size depends on

    the key and encryption algorithm.'
  signature: 'async encrypt(algorithm: EncryptionAlgorithm, plaintext: bytes, **kwargs:
    Any) -> EncryptResult'
  parameters:
  - name: algorithm
    description: Encryption algorithm to use
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.crypto.EncryptionAlgorithm>
  - name: plaintext
    description: Bytes to encrypt
    isRequired: true
    types:
    - <xref:bytes>
  keywordOnlyParameters:
  - name: iv
    description: 'Initialization vector. Required for only AES-CBC(PAD) encryption.
      If you pass your own IV,

      make sure you use a cryptographically random, non-repeating IV. If omitted,
      an attempt will be made to

      generate an IV via [os.urandom](https://docs.python.org/library/os.html#os.urandom)
      for local

      cryptography; for remote cryptography, Key Vault will generate an IV.'
    types:
    - <xref:bytes>
    - <xref:None>
  - name: additional_authenticated_data
    description: 'Optional data that is authenticated but not encrypted. For use

      with AES-GCM encryption.'
    types:
    - <xref:bytes>
    - <xref:None>
  return:
    description: The result of the encryption operation.
    types:
    - <xref:azure.keyvault.keys.crypto.EncryptResult>
  exceptions:
  - type: ValueError
    description: 'if parameters that are incompatible with the specified algorithm
      are provided, or if

      generating an IV fails on the current platform.'
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.from_jwk
  name: from_jwk
  summary: Creates a client that can only perform cryptographic operations locally.
  signature: 'from_jwk(jwk: JsonWebKey | Dict[str, Any]) -> CryptographyClient'
  parameters:
  - name: jwk
    description: the key's cryptographic material, as a JsonWebKey or dictionary.
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.JsonWebKey>
    - <xref:typing.Dict>[<xref:str>, <xref:typing.Any>]
  return:
    description: A client that can only perform local cryptographic operations.
    types:
    - <xref:azure.keyvault.keys.crypto.aio.CryptographyClient>
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.send_request
  name: send_request
  summary: 'Runs a network request using the client''s existing pipeline.


    The request URL can be relative to the vault URL. The service API version used
    for the request is the same as

    the client''s unless otherwise specified. This method does not raise if the response
    is an error; to raise an

    exception, call *raise_for_status()* on the returned response object. For more
    information about how to send

    custom requests with this method, see [https://aka.ms/azsdk/dpcodegen/python/send_request](https://aka.ms/azsdk/dpcodegen/python/send_request).'
  signature: 'async send_request(request: HttpRequest, *, stream: bool = False, **kwargs:
    Any) -> Awaitable[AsyncHttpResponse]'
  parameters:
  - name: request
    description: The network request you want to make.
    isRequired: true
    types:
    - <xref:azure.core.rest.HttpRequest>
  keywordOnlyParameters:
  - name: stream
    description: Whether the response payload will be streamed. Defaults to False.
    types:
    - <xref:bool>
  return:
    description: The response of your network call. Does not do error handling on
      your response.
    types:
    - <xref:azure.core.rest.AsyncHttpResponse>
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.sign
  name: sign
  summary: 'Create a signature from a digest using the client''s key.


    Requires the keys/sign permission.'
  signature: 'async sign(algorithm: SignatureAlgorithm, digest: bytes, **kwargs: Any)
    -> SignResult'
  parameters:
  - name: algorithm
    description: signing algorithm
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.crypto.SignatureAlgorithm>
  - name: digest
    description: hashed bytes to sign
    isRequired: true
    types:
    - <xref:bytes>
  return:
    description: The result of the signing operation.
    types:
    - <xref:azure.keyvault.keys.crypto.SignResult>
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.unwrap_key
  name: unwrap_key
  summary: 'Unwrap a key previously wrapped with the client''s key.


    Requires the keys/unwrapKey permission.'
  signature: 'async unwrap_key(algorithm: KeyWrapAlgorithm, encrypted_key: bytes,
    **kwargs: Any) -> UnwrapResult'
  parameters:
  - name: algorithm
    description: wrapping algorithm to use
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.crypto.KeyWrapAlgorithm>
  - name: encrypted_key
    description: the wrapped key
    isRequired: true
    types:
    - <xref:bytes>
  return:
    description: The result of the unwrapping operation.
    types:
    - <xref:azure.keyvault.keys.crypto.UnwrapResult>
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.verify
  name: verify
  summary: 'Verify a signature using the client''s key.


    Requires the keys/verify permission.'
  signature: 'async verify(algorithm: SignatureAlgorithm, digest: bytes, signature:
    bytes, **kwargs: Any) -> VerifyResult'
  parameters:
  - name: algorithm
    description: verification algorithm
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.crypto.SignatureAlgorithm>
  - name: digest
    description: 'Pre-hashed digest corresponding to **signature**. The hash algorithm
      used must be

      compatible with `algorithm`.'
    isRequired: true
    types:
    - <xref:bytes>
  - name: signature
    description: signature to verify
    isRequired: true
    types:
    - <xref:bytes>
  return:
    description: The result of the verifying operation.
    types:
    - <xref:azure.keyvault.keys.crypto.VerifyResult>
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.wrap_key
  name: wrap_key
  summary: 'Wrap a key with the client''s key.


    Requires the keys/wrapKey permission.'
  signature: 'async wrap_key(algorithm: KeyWrapAlgorithm, key: bytes, **kwargs: Any)
    -> WrapResult'
  parameters:
  - name: algorithm
    description: wrapping algorithm to use
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.crypto.KeyWrapAlgorithm>
  - name: key
    description: key to wrap
    isRequired: true
    types:
    - <xref:bytes>
  return:
    description: The result of the wrapping operation.
    types:
    - <xref:azure.keyvault.keys.crypto.WrapResult>
attributes:
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.key_id
  name: key_id
  summary: 'The full identifier of the client''s key.


    This property may be None when a client is constructed with <xref:azure.keyvault.keys.crypto.aio.CryptographyClient.from_jwk>.'
  return:
    description: The full identifier of the client's key.
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.vault_url
  name: vault_url
  summary: 'The base vault URL of the client''s key.


    This property may be None when a client is constructed with <xref:azure.keyvault.keys.crypto.aio.CryptographyClient.from_jwk>.'
  return:
    description: The base vault URL of the client's key.
    types:
    - <xref:str>
    - <xref:None>
