### YamlMime:PythonClass
uid: azure.keyvault.keys.crypto.aio.CryptographyClient
name: CryptographyClient
fullName: azure.keyvault.keys.crypto.aio.CryptographyClient
module: azure.keyvault.keys.crypto.aio
inheritances:
- azure.keyvault.keys._shared.async_client_base.AsyncKeyVaultClientBase
summary: "Performs cryptographic operations using Azure Key Vault keys.\n\nThis client\
  \ will perform operations locally when it's intialized with the necessary key material\
  \ or is able to get\nthat material from Key Vault. When the required key material\
  \ is unavailable, cryptographic operations are performed\nby the Key Vault service.\n\
  \nCreate a CryptographyClient<!--[!code-python[Main](s\\test_examples_crypto_async.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-keyvault-keys-4.4.0\\\
  \\tests\\\\test_examples_crypto_async.py\", \"xml:space\": \"preserve\", \"force\"\
  : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
  linenos\": false} -->\n\n````python\n\n   # create a CryptographyClient using a\
  \ KeyVaultKey instance\n   key = await key_client.get_key(key_name)\n   crypto_client\
  \ = CryptographyClient(key, credential)\n\n   # or a key's id, which must include\
  \ a version\n   key_id = \"https://<your vault>.vault.azure.net/keys/<key name>/fe4fdcab688c479a9aa80f01ffeac26\"\
  \n   crypto_client = CryptographyClient(key_id, credential)\n\n   # the client and\
  \ credential should be closed when no longer needed\n   # (both are also async context\
  \ managers)\n   await crypto_client.close()\n   await credential.close()\n\n   ````"
constructor:
  syntax: 'CryptographyClient(key: Union[KeyVaultKey, str], credential: AsyncTokenCredential,
    **kwargs: Any)'
  parameters:
  - name: key
    description: 'Either a <xref:azure.keyvault.keys.KeyVaultKey> instance as returned
      by

      <xref:azure.keyvault.keys.aio.KeyClient.get_key>, or a string.

      If a string, the value must be the full identifier of an Azure Key Vault key
      with a version.'
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.keyvault.keys.KeyVaultKey>
  - name: credential
    description: 'An object which can provide an access token for the vault, such
      as a credential from

      <xref:azure.identity.aio>'
    isRequired: true
  - name: api_version
    description: version of the Key Vault API to use. Defaults to the most recent.
    types:
    - <xref:azure.keyvault.keys.ApiVersion>
  - name: transport
    description: transport to use. Defaults to <xref:azure.core.pipeline.transport.AioHttpTransport>.
    types:
    - <xref:azure.core.pipeline.transport.AsyncHttpTransport>
methods:
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.decrypt
  name: decrypt
  summary: "Decrypt a single block of encrypted data using the client's key.\n\nRequires\
    \ the keys/decrypt permission. This method decrypts only a single block of data,\
    \ whose size depends on\nthe key and encryption algorithm.\n\nDecrypt bytes<!--[!code-python[Main](s\\\
    test_examples_crypto_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-keyvault-keys-4.4.0\\\\tests\\\\test_examples_crypto_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.keyvault.keys.crypto import EncryptionAlgorithm\n\n   result =\
    \ await client.decrypt(EncryptionAlgorithm.rsa_oaep, ciphertext)\n   print(result.plaintext)\n\
    \n   ````"
  signature: 'decrypt(algorithm: EncryptionAlgorithm, ciphertext: bytes, **kwargs:
    Any) -> azure.keyvault.keys.crypto._models.DecryptResult'
  parameters:
  - name: algorithm
    description: encryption algorithm to use
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.crypto.EncryptionAlgorithm>
  - name: ciphertext
    description: encrypted bytes to decrypt
    isRequired: true
    types:
    - <xref:bytes>
  - name: iv
    description: the initialization vector used during encryption. Required for AES
      decryption.
    types:
    - <xref:bytes>
  - name: authentication_tag
    description: 'the authentication tag generated during encryption. Required for
      only AES-GCM

      decryption.'
    types:
    - <xref:bytes>
  - name: additional_authenticated_data
    description: 'optional data that is authenticated but not encrypted. For use

      with AES-GCM decryption.'
    types:
    - <xref:bytes>
  return:
    types:
    - <xref:azure.keyvault.keys.crypto.DecryptResult>
  exceptions:
  - description: if parameters that are incompatible with the specified algorithm
      are provided.
    type: ValueError
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.encrypt
  name: encrypt
  summary: "Encrypt bytes using the client's key.\n\nRequires the keys/encrypt permission.\
    \ This method encrypts only a single block of data, whose size depends on\nthe\
    \ key and encryption algorithm.\n\nEncrypt bytes<!--[!code-python[Main](s\\test_examples_crypto_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\17\\\\azure-keyvault-keys-4.4.0\\\\tests\\\\test_examples_crypto_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.keyvault.keys.crypto import EncryptionAlgorithm\n\n   # the result\
    \ holds the ciphertext and identifies the encryption key and algorithm used\n\
    \   result = await client.encrypt(EncryptionAlgorithm.rsa_oaep, b\"plaintext\"\
    )\n   print(result.key_id)\n   print(result.algorithm)\n   ciphertext = result.ciphertext\n\
    \n   ````"
  signature: 'encrypt(algorithm: EncryptionAlgorithm, plaintext: bytes, **kwargs:
    Any) -> azure.keyvault.keys.crypto._models.EncryptResult'
  parameters:
  - name: algorithm
    description: encryption algorithm to use
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.crypto.EncryptionAlgorithm>
  - name: plaintext
    description: bytes to encrypt
    isRequired: true
    types:
    - <xref:bytes>
  - name: iv
    description: initialization vector. Required for only AES-CBC(PAD) encryption.
    types:
    - <xref:bytes>
  - name: additional_authenticated_data
    description: 'optional data that is authenticated but not encrypted. For use

      with AES-GCM encryption.'
    types:
    - <xref:bytes>
  return:
    types:
    - <xref:azure.keyvault.keys.crypto.EncryptResult>
  exceptions:
  - description: if parameters that are incompatible with the specified algorithm
      are provided.
    type: ValueError
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.from_jwk
  name: from_jwk
  summary: Creates a client that can only perform cryptographic operations locally.
  signature: 'from_jwk(jwk: Union[JsonWebKey, dict]) -> CryptographyClient'
  parameters:
  - name: jwk
    description: the key's cryptographic material, as a JsonWebKey or dictionary.
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.JsonWebKey>
    - <xref:dict>
  - name: jwk
    isRequired: true
  return:
    types:
    - <xref:azure.keyvault.keys.crypto.aio.CryptographyClient>
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.sign
  name: sign
  summary: "Create a signature from a digest using the client's key.\n\nRequires the\
    \ keys/sign permission.\n\nSign bytes<!--[!code-python[Main](s\\test_examples_crypto_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\17\\\\azure-keyvault-keys-4.4.0\\\\tests\\\\test_examples_crypto_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   import hashlib\n   from azure.keyvault.keys.crypto import SignatureAlgorithm\n\
    \n   digest = hashlib.sha256(b\"plaintext\").digest()\n\n   # sign returns the\
    \ signature and the metadata required to verify it\n   result = await client.sign(SignatureAlgorithm.rs256,\
    \ digest)\n   print(result.key_id)\n   print(result.algorithm)\n   signature =\
    \ result.signature\n\n   ````"
  signature: 'sign(algorithm: SignatureAlgorithm, digest: bytes, **kwargs: Any) ->
    azure.keyvault.keys.crypto._models.SignResult'
  parameters:
  - name: algorithm
    description: signing algorithm
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.crypto.SignatureAlgorithm>
  - name: digest
    description: hashed bytes to sign
    isRequired: true
    types:
    - <xref:bytes>
  return:
    types:
    - <xref:azure.keyvault.keys.crypto.SignResult>
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.unwrap_key
  name: unwrap_key
  summary: "Unwrap a key previously wrapped with the client's key.\n\nRequires the\
    \ keys/unwrapKey permission.\n\nUnwrap a key<!--[!code-python[Main](s\\test_examples_crypto_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\17\\\\azure-keyvault-keys-4.4.0\\\\tests\\\\test_examples_crypto_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.keyvault.keys.crypto import KeyWrapAlgorithm\n\n   result = await\
    \ client.unwrap_key(KeyWrapAlgorithm.rsa_oaep, encrypted_key)\n\n   ````"
  signature: 'unwrap_key(algorithm: KeyWrapAlgorithm, encrypted_key: bytes, **kwargs:
    Any) -> azure.keyvault.keys.crypto._models.UnwrapResult'
  parameters:
  - name: algorithm
    description: wrapping algorithm to use
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.crypto.KeyWrapAlgorithm>
  - name: encrypted_key
    description: the wrapped key
    isRequired: true
    types:
    - <xref:bytes>
  return:
    types:
    - <xref:azure.keyvault.keys.crypto.UnwrapResult>
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.verify
  name: verify
  summary: "Verify a signature using the client's key.\n\nRequires the keys/verify\
    \ permission.\n\nVerify a signature<!--[!code-python[Main](s\\test_examples_crypto_async.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\17\\\\azure-keyvault-keys-4.4.0\\\\tests\\\\test_examples_crypto_async.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.keyvault.keys.crypto import SignatureAlgorithm\n\n   verified\
    \ = await client.verify(SignatureAlgorithm.rs256, digest, signature)\n   assert\
    \ verified.is_valid\n\n   ````"
  signature: 'verify(algorithm: SignatureAlgorithm, digest: bytes, signature: bytes,
    **kwargs: Any) -> azure.keyvault.keys.crypto._models.VerifyResult'
  parameters:
  - name: algorithm
    description: verification algorithm
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.crypto.SignatureAlgorithm>
  - name: digest
    description: 'Pre-hashed digest corresponding to **signature**. The hash algorithm
      used must be

      compatible with **algorithm**.'
    isRequired: true
    types:
    - <xref:bytes>
  - name: signature
    description: signature to verify
    isRequired: true
    types:
    - <xref:bytes>
  return:
    types:
    - <xref:azure.keyvault.keys.crypto.VerifyResult>
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.wrap_key
  name: wrap_key
  summary: "Wrap a key with the client's key.\n\nRequires the keys/wrapKey permission.\n\
    \nWrap a key<!--[!code-python[Main](s\\test_examples_crypto_async.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\\
    azure-keyvault-keys-4.4.0\\\\tests\\\\test_examples_crypto_async.py\", \"xml:space\"\
    : \"preserve\", \"force\": false, \"language\": \"python\", \"highlight_args\"\
    : {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\n   from azure.keyvault.keys.crypto\
    \ import KeyWrapAlgorithm\n\n   # wrap returns a tuple with the wrapped bytes\
    \ and the metadata required to unwrap the key\n   result = await client.wrap_key(KeyWrapAlgorithm.rsa_oaep,\
    \ key_bytes)\n   print(result.key_id)\n   print(result.algorithm)\n   encrypted_key\
    \ = result.encrypted_key\n\n   ````"
  signature: 'wrap_key(algorithm: KeyWrapAlgorithm, key: bytes, **kwargs: Any) ->
    azure.keyvault.keys.crypto._models.WrapResult'
  parameters:
  - name: algorithm
    description: wrapping algorithm to use
    isRequired: true
    types:
    - <xref:azure.keyvault.keys.crypto.KeyWrapAlgorithm>
  - name: key
    description: key to wrap
    isRequired: true
    types:
    - <xref:bytes>
  return:
    types:
    - <xref:azure.keyvault.keys.crypto.WrapResult>
attributes:
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.key_id
  name: key_id
  summary: 'The full identifier of the client''s key.


    This property may be None when a client is constructed with <xref:azure.keyvault.keys.crypto.aio.CryptographyClient.from_jwk>.'
  return:
    types:
    - <xref:str>
    - <xref:None>
- uid: azure.keyvault.keys.crypto.aio.CryptographyClient.vault_url
  name: vault_url
  summary: 'The base vault URL of the client''s key.


    This property may be None when a client is constructed with <xref:azure.keyvault.keys.crypto.aio.CryptographyClient.from_jwk>.'
  return:
    types:
    - <xref:str>
    - <xref:None>
