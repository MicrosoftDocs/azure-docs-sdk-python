### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.keyvault.keys.KeyClient.backup_key
  - azure.keyvault.keys.KeyClient.begin_delete_key
  - azure.keyvault.keys.KeyClient.begin_recover_deleted_key
  - azure.keyvault.keys.KeyClient.create_ec_key
  - azure.keyvault.keys.KeyClient.create_key
  - azure.keyvault.keys.KeyClient.create_rsa_key
  - azure.keyvault.keys.KeyClient.get_deleted_key
  - azure.keyvault.keys.KeyClient.get_key
  - azure.keyvault.keys.KeyClient.import_key
  - azure.keyvault.keys.KeyClient.list_deleted_keys
  - azure.keyvault.keys.KeyClient.list_properties_of_key_versions
  - azure.keyvault.keys.KeyClient.list_properties_of_keys
  - azure.keyvault.keys.KeyClient.purge_deleted_key
  - azure.keyvault.keys.KeyClient.restore_key_backup
  - azure.keyvault.keys.KeyClient.update_key_properties
  class: azure.keyvault.keys.KeyClient
  example:
  - "Create a new `KeyClient`<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\\
    azure-keyvault-keys-4.1.0\\\\tests\\\\test_samples_keys.py\", \"xml:space\": \"\
    preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\":\
    \ {\"linenostart\": 1}} -->\n\n````python\n\n\n   from azure.identity import DefaultAzureCredential\n\
    \   from azure.keyvault.keys import KeyClient\n\n   # Create a KeyClient using\
    \ default Azure credentials\n   credential = DefaultAzureCredential()\n   key_client\
    \ = KeyClient(vault_url, credential)\n\n\n   ````\n"
  fullName: azure.keyvault.keys.KeyClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.keyvault.keys._shared.client_base.KeyVaultClientBase
  langs:
  - python
  module: azure.keyvault.keys
  name: KeyClient
  summary: A high-level interface for managing a vault's keys.
  syntax:
    content: KeyClient(vault_url, credential, **kwargs)
    parameters:
    - description: URL of the vault the client will access. This is also called the
        vault's "DNS Name".
      id: vault_url
      type:
      - str
    - description: 'An object which can provide an access token for the vault, such
        as a credential from

        <xref:azure.identity>'
      id: credential
    - description: version of the Key Vault API to use. Defaults to the most recent.
      id: api_version
      type:
      - str
    - description: transport to use. Defaults to <xref:azure.core.pipeline.transport.RequestsTransport>.
      id: transport
      type:
      - azure.core.pipeline.transport.HttpTransport
  type: class
  uid: azure.keyvault.keys.KeyClient
- class: azure.keyvault.keys.KeyClient
  example:
  - "Get a key backup<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-keyvault-keys-4.1.0\\\
    \\tests\\\\test_samples_keys.py\", \"xml:space\": \"preserve\", \"language\":\
    \ \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n\n   # backup key\n   key_backup = key_client.backup_key(key_name)\n\
    \n   # returns the raw bytes of the backed up key\n   print(key_backup)\n\n\n\
    \   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.keys.KeyClient.backup_key
  langs:
  - python
  module: azure.keyvault.keys
  name: backup_key(name, **kwargs)
  namewithoutparameters: backup_key
  summary: 'Back up a key in a protected form useable only by Azure Key Vault. Requires
    keys/backup permission.


    This is intended to allow copying a key from one vault to another. Both vaults
    must be owned by the same Azure

    subscription. Also, backup / restore cannot be performed across geopolitical boundaries.
    For example, a backup

    from a vault in a USA region cannot be restored to a vault in an EU region.'
  syntax:
    content: backup_key(name, **kwargs)
    parameters:
    - description: The name of the key to back up
      id: name
      isRequired: true
      type:
      - str
    return:
      type:
      - bytes
  type: method
  uid: azure.keyvault.keys.KeyClient.backup_key
- class: azure.keyvault.keys.KeyClient
  example:
  - "Delete a key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-keyvault-keys-4.1.0\\\
    \\tests\\\\test_samples_keys.py\", \"xml:space\": \"preserve\", \"language\":\
    \ \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n\n   # delete a key\n   deleted_key_poller = key_client.begin_delete_key(\"\
    key-name\")\n   deleted_key = deleted_key_poller.result()\n\n   print(deleted_key.name)\n\
    \n   # if the vault has soft-delete enabled, the key's deleted_date,\n   # scheduled\
    \ purge date and recovery id are set\n   print(deleted_key.deleted_date)\n   print(deleted_key.scheduled_purge_date)\n\
    \   print(deleted_key.recovery_id)\n\n   # if you want to block until deletion\
    \ is complete, call wait() on the poller\n   deleted_key_poller.wait()\n\n\n \
    \  ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.keys.KeyClient.begin_delete_key
  langs:
  - python
  module: azure.keyvault.keys
  name: begin_delete_key(name, **kwargs)
  namewithoutparameters: begin_delete_key
  summary: 'Delete all versions of a key and its cryptographic material. Requires
    keys/delete permission.


    When this method returns Key Vault has begun deleting the key. Deletion may take
    several seconds in a vault

    with soft-delete enabled. This method therefore returns a poller enabling you
    to wait for deletion to complete.'
  syntax:
    content: begin_delete_key(name, **kwargs)
    parameters:
    - description: The name of the key to delete.
      id: name
      isRequired: true
      type:
      - str
    return:
      description: 'A poller for the delete key operation. The poller''s *result*
        method returns the

        <xref:azure.keyvault.keys.DeletedKey> without waiting for deletion to complete.
        If the vault has

        soft-delete enabled and you want to permanently delete the key with <xref:azure.keyvault.keys.purge_deleted_key>,
        call the

        poller''s *wait* method first. It will block until the deletion is complete.
        The *wait* method requires

        keys/get permission.'
      type:
      - azure.core.polling.LROPoller[azure.keyvault.keys.DeletedKey]
  type: method
  uid: azure.keyvault.keys.KeyClient.begin_delete_key
- class: azure.keyvault.keys.KeyClient
  example:
  - "Recover a deleted key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\\
    azure-keyvault-keys-4.1.0\\\\tests\\\\test_samples_keys.py\", \"xml:space\": \"\
    preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\":\
    \ {\"linenostart\": 1}} -->\n\n````python\n\n\n   # recover a deleted key to its\
    \ latest version (requires soft-delete enabled for the vault)\n   recover_key_poller\
    \ = key_client.begin_recover_deleted_key(\"key-name\")\n   recovered_key = recover_key_poller.result()\n\
    \   print(recovered_key.id)\n   print(recovered_key.name)\n\n   # if you want\
    \ to block until key is recovered server-side, call wait() on the poller\n   recover_key_poller.wait()\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.keys.KeyClient.begin_recover_deleted_key
  langs:
  - python
  module: azure.keyvault.keys
  name: begin_recover_deleted_key(name, **kwargs)
  namewithoutparameters: begin_recover_deleted_key
  summary: 'Recover a deleted key to its latest version. Possible only in a vault
    with soft-delete enabled.


    Requires keys/recover permission.


    When this method returns Key Vault has begun recovering the key. Recovery may
    take several seconds. This

    method therefore returns a poller enabling you to wait for recovery to complete.
    Waiting is only necessary when

    you want to use the recovered key in another operation immediately.'
  syntax:
    content: begin_recover_deleted_key(name, **kwargs)
    parameters:
    - description: The name of the deleted key to recover
      id: name
      isRequired: true
      type:
      - str
    return:
      description: 'A poller for the recovery operation. The poller''s *result* method
        returns the recovered

        <xref:azure.keyvault.keys.KeyVaultKey> without waiting for recovery to complete.
        If you want to use the

        recovered key immediately, call the poller''s *wait* method, which blocks
        until the key is ready to use. The

        *wait* method requires keys/get permission.'
      type:
      - azure.core.polling.LROPoller[azure.keyvault.keys.KeyVaultKey]
  type: method
  uid: azure.keyvault.keys.KeyClient.begin_recover_deleted_key
- class: azure.keyvault.keys.KeyClient
  example:
  - "Create an elliptic curve key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\\
    azure-keyvault-keys-4.1.0\\\\tests\\\\test_samples_keys.py\", \"xml:space\": \"\
    preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\":\
    \ {\"linenostart\": 1}} -->\n\n````python\n\n   key_curve = \"P-256\"\n\n   #\
    \ create an EC (Elliptic curve) key with curve specification\n   # EC key can\
    \ be created with default curve of 'P-256'\n   ec_key = key_client.create_ec_key(\"\
    key-name\", curve=key_curve)\n\n   print(ec_key.id)\n   print(ec_key.properties.version)\n\
    \   print(ec_key.key_type)\n   print(ec_key.key.crv)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.keys.KeyClient.create_ec_key
  langs:
  - python
  module: azure.keyvault.keys
  name: create_ec_key(name, **kwargs)
  namewithoutparameters: create_ec_key
  summary: 'Create a new elliptic curve key or, if *name* is already in use, create
    a new version of the key.


    Requires the keys/create permission.'
  syntax:
    content: create_ec_key(name, **kwargs)
    parameters:
    - description: The name for the new key.
      id: name
      isRequired: true
      type:
      - str
    - description: Elliptic curve name. Defaults to the NIST P-256 elliptic curve.
      id: curve
      isRequired: true
      type:
      - azure.keyvault.keys.KeyCurveName
      - str
    - description: Allowed key operations
      id: key_operations
      isRequired: true
      type:
      - list[azure.keyvault.keys.KeyOperation
      - str]
    - description: 'Whether the key should be created in a hardware security module.

        Defaults to `False`.'
      id: hardware_protected
      isRequired: true
      type:
      - bool
    - description: Whether the key is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: Application specific metadata in the form of key-value pairs.
      id: tags
      isRequired: true
      type:
      - dict[str, str]
    - description: Not before date of the key in UTC
      id: not_before
      isRequired: true
      type:
      - datetime.datetime
    - description: Expiry date of the key in UTC
      id: expires_on
      isRequired: true
      type:
      - datetime.datetime
    return:
      description: The created key
      type:
      - azure.keyvault.keys.KeyVaultKey
  type: method
  uid: azure.keyvault.keys.KeyClient.create_ec_key
- class: azure.keyvault.keys.KeyClient
  example:
  - "Create a key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-keyvault-keys-4.1.0\\\
    \\tests\\\\test_samples_keys.py\", \"xml:space\": \"preserve\", \"language\":\
    \ \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n   from dateutil import parser as date_parse\n\n   expires_on\
    \ = date_parse.parse(\"2050-02-02T08:00:00.000Z\")\n\n   # create a key with optional\
    \ arguments\n   key = key_client.create_key(\"key-name\", \"RSA-HSM\", expires_on=expires_on)\n\
    \n   print(key.name)\n   print(key.id)\n   print(key.key_type)\n   print(key.properties.expires_on)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.keys.KeyClient.create_key
  langs:
  - python
  module: azure.keyvault.keys
  name: create_key(name, key_type, **kwargs)
  namewithoutparameters: create_key
  summary: 'Create a key or, if *name* is already in use, create a new version of
    the key.


    Requires keys/create permission.'
  syntax:
    content: create_key(name, key_type, **kwargs)
    parameters:
    - description: The name of the new key.
      id: name
      isRequired: true
      type:
      - str
    - description: The type of key to create
      id: key_type
      isRequired: true
      type:
      - azure.keyvault.keys.KeyType
      - str
    - description: 'RSA key size in bits, for example 2048, 3072, or 4096. Applies
        only to RSA keys. To

        create an RSA key, consider using <xref:azure.keyvault.keys.create_rsa_key>
        instead.'
      id: size
      isRequired: true
      type:
      - int
    - description: 'Elliptic curve name. Applies only to elliptic curve keys. Defaults
        to the NIST P-256

        elliptic curve. To create an elliptic curve key, consider using <xref:azure.keyvault.keys.KeyClient.create_ec_key>
        instead.'
      id: curve
      isRequired: true
      type:
      - azure.keyvault.keys.KeyCurveName
      - str
    - description: Allowed key operations
      id: key_operations
      isRequired: true
      type:
      - list[azure.keyvault.keys.KeyOperation
      - str]
    - description: Whether the key is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: Application specific metadata in the form of key-value pairs.
      id: tags
      isRequired: true
      type:
      - dict[str, str]
    - description: Not before date of the key in UTC
      id: not_before
      isRequired: true
      type:
      - datetime.datetime
    - description: Expiry date of the key in UTC
      id: expires_on
      isRequired: true
      type:
      - datetime.datetime
    return:
      description: The created key
      type:
      - azure.keyvault.keys.KeyVaultKey
  type: method
  uid: azure.keyvault.keys.KeyClient.create_key
- class: azure.keyvault.keys.KeyClient
  example:
  - "Create RSA key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-keyvault-keys-4.1.0\\\
    \\tests\\\\test_samples_keys.py\", \"xml:space\": \"preserve\", \"language\":\
    \ \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n\n   key_size = 2048\n   key_ops = [\"encrypt\", \"decrypt\",\
    \ \"sign\", \"verify\", \"wrapKey\", \"unwrapKey\"]\n\n   # create an rsa key\
    \ with size specification\n   # RSA key can be created with default size of '2048'\n\
    \   key = key_client.create_rsa_key(\"key-name\", hardware_protected=True, size=key_size,\
    \ key_operations=key_ops)\n\n   print(key.id)\n   print(key.name)\n   print(key.key_type)\n\
    \   print(key.key_operations)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.keys.KeyClient.create_rsa_key
  langs:
  - python
  module: azure.keyvault.keys
  name: create_rsa_key(name, **kwargs)
  namewithoutparameters: create_rsa_key
  summary: 'Create a new RSA key or, if *name* is already in use, create a new version
    of the key


    Requires the keys/create permission.'
  syntax:
    content: create_rsa_key(name, **kwargs)
    parameters:
    - description: The name for the new key.
      id: name
      isRequired: true
      type:
      - str
    - description: Key size in bits, for example 2048, 3072, or 4096.
      id: size
      isRequired: true
      type:
      - int
    - description: 'Whether the key should be created in a hardware security module.

        Defaults to `False`.'
      id: hardware_protected
      isRequired: true
      type:
      - bool
    - description: Allowed key operations
      id: key_operations
      isRequired: true
      type:
      - list[azure.keyvault.keys.KeyOperation
      - str]
    - description: Whether the key is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: Application specific metadata in the form of key-value pairs.
      id: tags
      isRequired: true
      type:
      - dict[str, str]
    - description: Not before date of the key in UTC
      id: not_before
      isRequired: true
      type:
      - datetime.datetime
    - description: Expiry date of the key in UTC
      id: expires_on
      isRequired: true
      type:
      - datetime.datetime
    return:
      description: The created key
      type:
      - azure.keyvault.keys.KeyVaultKey
  type: method
  uid: azure.keyvault.keys.KeyClient.create_rsa_key
- class: azure.keyvault.keys.KeyClient
  example:
  - "Get a deleted key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n<!--\
    \ literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [],\
    \ \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-keyvault-keys-4.1.0\\\
    \\tests\\\\test_samples_keys.py\", \"xml:space\": \"preserve\", \"language\":\
    \ \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n\n   # get a deleted key (requires soft-delete enabled for the\
    \ vault)\n   deleted_key = key_client.get_deleted_key(\"key-name\")\n   print(deleted_key.name)\n\
    \n   # if the vault has soft-delete enabled, the key's deleted_date\n   # scheduled\
    \ purge date and recovery id are set\n   print(deleted_key.deleted_date)\n   print(deleted_key.scheduled_purge_date)\n\
    \   print(deleted_key.recovery_id)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.keys.KeyClient.get_deleted_key
  langs:
  - python
  module: azure.keyvault.keys
  name: get_deleted_key(name, **kwargs)
  namewithoutparameters: get_deleted_key
  summary: Get a deleted key. Possible only in a vault with soft-delete enabled. Requires
    keys/get permission.
  syntax:
    content: get_deleted_key(name, **kwargs)
    parameters:
    - description: The name of the key
      id: name
      isRequired: true
      type:
      - str
    return:
      description: The deleted key
      type:
      - azure.keyvault.keys.DeletedKey
  type: method
  uid: azure.keyvault.keys.KeyClient.get_deleted_key
- class: azure.keyvault.keys.KeyClient
  example:
  - "Get a key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-keyvault-keys-4.1.0\\\
    \\tests\\\\test_samples_keys.py\", \"xml:space\": \"preserve\", \"language\":\
    \ \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n\n   # get the latest version of a key\n   key = key_client.get_key(\"\
    key-name\")\n\n   # alternatively, specify a version\n   key_version = key.properties.version\n\
    \   key = key_client.get_key(\"key-name\", key_version)\n\n   print(key.id)\n\
    \   print(key.name)\n   print(key.properties.version)\n   print(key.key_type)\n\
    \   print(key.properties.vault_url)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.keys.KeyClient.get_key
  langs:
  - python
  module: azure.keyvault.keys
  name: get_key(name, version=None, **kwargs)
  namewithoutparameters: get_key
  summary: Get a key's attributes and, if it's an asymmetric key, its public material.
    Requires keys/get permission.
  syntax:
    content: get_key(name, version=None, **kwargs)
    parameters:
    - description: The name of the key to get.
      id: name
      isRequired: true
      type:
      - str
    - description: '(optional) A specific version of the key to get. If not specified,
        gets the latest version

        of the key.'
      id: version
      isRequired: true
      type:
      - str
    return:
      type:
      - azure.keyvault.keys.KeyVaultKey
  type: method
  uid: azure.keyvault.keys.KeyClient.get_key
- class: azure.keyvault.keys.KeyClient
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.keys.KeyClient.import_key
  langs:
  - python
  module: azure.keyvault.keys
  name: import_key(name, key, **kwargs)
  namewithoutparameters: import_key
  summary: 'Import a key created externally. Requires keys/import permission.


    If *name* is already in use, the key will be imported as a new version.'
  syntax:
    content: import_key(name, key, **kwargs)
    parameters:
    - description: Name for the imported key
      id: name
      isRequired: true
      type:
      - str
    - description: The JSON web key to import
      id: key
      isRequired: true
      type:
      - azure.keyvault.keys.JsonWebKey
    - description: Whether the key should be backed by a hardware security module
      id: hardware_protected
      isRequired: true
      type:
      - bool
    - description: Whether the key is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: Application specific metadata in the form of key-value pairs.
      id: tags
      isRequired: true
      type:
      - dict[str, str]
    - description: Not before date of the key in UTC
      id: not_before
      isRequired: true
      type:
      - datetime.datetime
    - description: Expiry date of the key in UTC
      id: expires_on
      isRequired: true
      type:
      - datetime.datetime
    return:
      description: The imported key
      type:
      - azure.keyvault.keys.KeyVaultKey
  type: method
  uid: azure.keyvault.keys.KeyClient.import_key
- class: azure.keyvault.keys.KeyClient
  example:
  - "List all the deleted keys<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\\
    azure-keyvault-keys-4.1.0\\\\tests\\\\test_samples_keys.py\", \"xml:space\": \"\
    preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\":\
    \ {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get an iterator of deleted\
    \ keys (requires soft-delete enabled for the vault)\n   deleted_keys = key_client.list_deleted_keys()\n\
    \n   for key in deleted_keys:\n       print(key.id)\n       print(key.name)\n\
    \       print(key.scheduled_purge_date)\n       print(key.recovery_id)\n     \
    \  print(key.deleted_date)\n\n\n   ````\n"
  fullName: azure.keyvault.keys.KeyClient.list_deleted_keys
  langs:
  - python
  module: azure.keyvault.keys
  name: list_deleted_keys(**kwargs)
  namewithoutparameters: list_deleted_keys
  summary: 'List all deleted keys, including the public part of each. Possible only
    in a vault with soft-delete enabled.


    Requires keys/list permission.'
  syntax:
    content: list_deleted_keys(**kwargs)
    return:
      description: An iterator of deleted keys
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.keys.DeletedKey]
  type: method
  uid: azure.keyvault.keys.KeyClient.list_deleted_keys
- class: azure.keyvault.keys.KeyClient
  example:
  - "List all versions of a key<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\\
    azure-keyvault-keys-4.1.0\\\\tests\\\\test_samples_keys.py\", \"xml:space\": \"\
    preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\":\
    \ {\"linenostart\": 1}} -->\n\n````python\n\n\n   # get an iterator of a key's\
    \ versions\n   key_versions = key_client.list_properties_of_key_versions(\"key-name\"\
    )\n\n   for key in key_versions:\n       print(key.id)\n       print(key.name)\n\
    \n\n   ````\n"
  fullName: azure.keyvault.keys.KeyClient.list_properties_of_key_versions
  langs:
  - python
  module: azure.keyvault.keys
  name: list_properties_of_key_versions(name, **kwargs)
  namewithoutparameters: list_properties_of_key_versions
  summary: List the identifiers and properties of a key's versions. Requires keys/list
    permission.
  syntax:
    content: list_properties_of_key_versions(name, **kwargs)
    parameters:
    - description: The name of the key
      id: name
      isRequired: true
      type:
      - str
    return:
      description: An iterator of keys without their cryptographic material
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.keys.KeyProperties]
  type: method
  uid: azure.keyvault.keys.KeyClient.list_properties_of_key_versions
- class: azure.keyvault.keys.KeyClient
  example:
  - "List all keys<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n<!-- literal_block\
    \ {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\"\
    : [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\azure-keyvault-keys-4.1.0\\\
    \\tests\\\\test_samples_keys.py\", \"xml:space\": \"preserve\", \"language\":\
    \ \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
    \n````python\n\n\n   # get an iterator of keys\n   keys = key_client.list_properties_of_keys()\n\
    \n   for key in keys:\n       print(key.id)\n       print(key.name)\n\n\n   ````\n"
  fullName: azure.keyvault.keys.KeyClient.list_properties_of_keys
  langs:
  - python
  module: azure.keyvault.keys
  name: list_properties_of_keys(**kwargs)
  namewithoutparameters: list_properties_of_keys
  summary: List identifiers and properties of all keys in the vault. Requires keys/list
    permission.
  syntax:
    content: list_properties_of_keys(**kwargs)
    return:
      description: An iterator of keys without their cryptographic material or version
        information
      type:
      - azure.core.paging.ItemPaged[azure.keyvault.keys.KeyProperties]
  type: method
  uid: azure.keyvault.keys.KeyClient.list_properties_of_keys
- class: azure.keyvault.keys.KeyClient
  example:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n   # if the\
    \ vault has soft-delete enabled, purge permanently deletes a deleted key\n   #\
    \ (with soft-delete disabled, begin_delete_key is permanent)\n   key_client.purge_deleted_key(\"\
    key-name\")\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  fullName: azure.keyvault.keys.KeyClient.purge_deleted_key
  langs:
  - python
  module: azure.keyvault.keys
  name: purge_deleted_key(name, **kwargs)
  namewithoutparameters: purge_deleted_key
  summary: 'Permanently deletes a deleted key. Only possible in a vault with soft-delete
    enabled.


    Performs an irreversible deletion of the specified key, without

    possibility for recovery. The operation is not available if the

    <xref:azure.keyvault.keys.KeyProperties.recovery_level> does not specify ''Purgeable''.

    This method is only necessary for purging a key before its

    <xref:azure.keyvault.keys.DeletedKey.scheduled_purge_date>.


    Requires keys/purge permission.'
  syntax:
    content: purge_deleted_key(name, **kwargs)
    parameters:
    - description: The name of the deleted key to purge
      id: name
      isRequired: true
      type:
      - str
    return:
      description: None
  type: method
  uid: azure.keyvault.keys.KeyClient.purge_deleted_key
- class: azure.keyvault.keys.KeyClient
  example:
  - "Restore a key backup<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\n\
    <!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\\
    azure-keyvault-keys-4.1.0\\\\tests\\\\test_samples_keys.py\", \"xml:space\": \"\
    preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\":\
    \ {\"linenostart\": 1}} -->\n\n````python\n\n\n   # restore a key backup\n   restored_key\
    \ = key_client.restore_key_backup(key_backup)\n   print(restored_key.id)\n   print(restored_key.properties.version)\n\
    \n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceExistsError
  fullName: azure.keyvault.keys.KeyClient.restore_key_backup
  langs:
  - python
  module: azure.keyvault.keys
  name: restore_key_backup(backup, **kwargs)
  namewithoutparameters: restore_key_backup
  summary: 'Restore a key backup to the vault. Requires keys/restore permission.


    This imports all versions of the key, with its name, attributes, and access control
    policies. If the key''s name

    is already in use, restoring it will fail. Also, the target vault must be owned
    by the same Microsoft Azure

    subscription as the source vault.'
  syntax:
    content: restore_key_backup(backup, **kwargs)
    parameters:
    - description: A key backup as returned by <xref:azure.keyvault.keys.KeyClient.backup_key>
      id: backup
      isRequired: true
      type:
      - bytes
    return:
      description: The restored key
      type:
      - azure.keyvault.keys.KeyVaultKey
  type: method
  uid: azure.keyvault.keys.KeyClient.restore_key_backup
- class: azure.keyvault.keys.KeyClient
  example:
  - "Update a key's attributes<!--[!code-python[Main](s\\test_samples_keys.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\17\\\\\
    azure-keyvault-keys-4.1.0\\\\tests\\\\test_samples_keys.py\", \"xml:space\": \"\
    preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\":\
    \ {\"linenostart\": 1}} -->\n\n````python\n\n\n   # update attributes of an existing\
    \ key\n   expires_on = date_parse.parse(\"2050-01-02T08:00:00.000Z\")\n   tags\
    \ = {\"foo\": \"updated tag\"}\n   updated_key = key_client.update_key_properties(key.name,\
    \ expires_on=expires_on, tags=tags)\n\n   print(updated_key.properties.version)\n\
    \   print(updated_key.properties.updated_on)\n   print(updated_key.properties.expires_on)\n\
    \   print(updated_key.properties.tags)\n   print(key.key_type)\n\n\n   ````\n"
  exceptions:
  - type: azure.core.exceptions.ResourceNotFoundError
  - type: azure.core.exceptions.ResourceNotFoundError
  fullName: azure.keyvault.keys.KeyClient.update_key_properties
  langs:
  - python
  module: azure.keyvault.keys
  name: update_key_properties(name, version=None, **kwargs)
  namewithoutparameters: update_key_properties
  summary: Change a key's properties (not its cryptographic material). Requires keys/update
    permission.
  syntax:
    content: update_key_properties(name, version=None, **kwargs)
    parameters:
    - description: The name of key to update
      id: name
      isRequired: true
      type:
      - str
    - description: (optional) The version of the key to update. If unspecified, the
        latest version is updated.
      id: version
      isRequired: true
      type:
      - str
    - description: Allowed key operations
      id: key_operations
      isRequired: true
      type:
      - list[azure.keyvault.keys.KeyOperation
      - str]
    - description: Whether the key is enabled for use.
      id: enabled
      isRequired: true
      type:
      - bool
    - description: Application specific metadata in the form of key-value pairs.
      id: tags
      isRequired: true
      type:
      - dict[str, str]
    - description: Not before date of the key in UTC
      id: not_before
      isRequired: true
      type:
      - datetime.datetime
    - description: Expiry date of the key in UTC
      id: expires_on
      isRequired: true
      type:
      - datetime.datetime
    return:
      description: The updated key
      type:
      - azure.keyvault.keys.KeyVaultKey
  type: method
  uid: azure.keyvault.keys.KeyClient.update_key_properties
references:
- fullName: azure.keyvault.keys.KeyClient.backup_key
  isExternal: false
  name: backup_key(name, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.backup_key
- fullName: azure.keyvault.keys.KeyClient.begin_delete_key
  isExternal: false
  name: begin_delete_key(name, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.begin_delete_key
- fullName: azure.keyvault.keys.KeyClient.begin_recover_deleted_key
  isExternal: false
  name: begin_recover_deleted_key(name, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.begin_recover_deleted_key
- fullName: azure.keyvault.keys.KeyClient.create_ec_key
  isExternal: false
  name: create_ec_key(name, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.create_ec_key
- fullName: azure.keyvault.keys.KeyClient.create_key
  isExternal: false
  name: create_key(name, key_type, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.create_key
- fullName: azure.keyvault.keys.KeyClient.create_rsa_key
  isExternal: false
  name: create_rsa_key(name, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.create_rsa_key
- fullName: azure.keyvault.keys.KeyClient.get_deleted_key
  isExternal: false
  name: get_deleted_key(name, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.get_deleted_key
- fullName: azure.keyvault.keys.KeyClient.get_key
  isExternal: false
  name: get_key(name, version=None, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.get_key
- fullName: azure.keyvault.keys.KeyClient.import_key
  isExternal: false
  name: import_key(name, key, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.import_key
- fullName: azure.keyvault.keys.KeyClient.list_deleted_keys
  isExternal: false
  name: list_deleted_keys(**kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.list_deleted_keys
- fullName: azure.keyvault.keys.KeyClient.list_properties_of_key_versions
  isExternal: false
  name: list_properties_of_key_versions(name, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.list_properties_of_key_versions
- fullName: azure.keyvault.keys.KeyClient.list_properties_of_keys
  isExternal: false
  name: list_properties_of_keys(**kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.list_properties_of_keys
- fullName: azure.keyvault.keys.KeyClient.purge_deleted_key
  isExternal: false
  name: purge_deleted_key(name, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.purge_deleted_key
- fullName: azure.keyvault.keys.KeyClient.restore_key_backup
  isExternal: false
  name: restore_key_backup(backup, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.restore_key_backup
- fullName: azure.keyvault.keys.KeyClient.update_key_properties
  isExternal: false
  name: update_key_properties(name, version=None, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.update_key_properties
- fullName: azure.core.polling.LROPoller[azure.keyvault.keys.DeletedKey]
  name: LROPoller[DeletedKey]
  spec.python:
  - fullName: azure.core.polling.LROPoller
    name: LROPoller
    uid: azure.core.polling.LROPoller
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.keys.DeletedKey
    name: DeletedKey
    uid: azure.keyvault.keys.DeletedKey
  - fullName: ']'
    name: ']'
  uid: azure.core.polling.LROPoller[azure.keyvault.keys.DeletedKey]
- fullName: azure.core.polling.LROPoller[azure.keyvault.keys.KeyVaultKey]
  name: LROPoller[KeyVaultKey]
  spec.python:
  - fullName: azure.core.polling.LROPoller
    name: LROPoller
    uid: azure.core.polling.LROPoller
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.keys.KeyVaultKey
    name: KeyVaultKey
    uid: azure.keyvault.keys.KeyVaultKey
  - fullName: ']'
    name: ']'
  uid: azure.core.polling.LROPoller[azure.keyvault.keys.KeyVaultKey]
- fullName: list[azure.keyvault.keys.KeyOperation
  name: list[KeyOperation
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.keys.KeyOperation
    name: KeyOperation
    uid: azure.keyvault.keys.KeyOperation
  uid: list[azure.keyvault.keys.KeyOperation
- fullName: str]
  name: str]
  spec.python:
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: str]
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
- fullName: azure.core.paging.ItemPaged[azure.keyvault.keys.DeletedKey]
  name: ItemPaged[DeletedKey]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.keys.DeletedKey
    name: DeletedKey
    uid: azure.keyvault.keys.DeletedKey
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.keyvault.keys.DeletedKey]
- fullName: azure.core.paging.ItemPaged[azure.keyvault.keys.KeyProperties]
  name: ItemPaged[KeyProperties]
  spec.python:
  - fullName: azure.core.paging.ItemPaged
    name: ItemPaged
    uid: azure.core.paging.ItemPaged
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.keys.KeyProperties
    name: KeyProperties
    uid: azure.keyvault.keys.KeyProperties
  - fullName: ']'
    name: ']'
  uid: azure.core.paging.ItemPaged[azure.keyvault.keys.KeyProperties]
