### YamlMime:PythonClass
uid: azure.keyvault.keys.crypto.KeyVaultRSAPrivateKey
name: KeyVaultRSAPrivateKey
fullName: azure.keyvault.keys.crypto.KeyVaultRSAPrivateKey
module: azure.keyvault.keys.crypto
inheritances:
- cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey
summary: 'An *RSAPrivateKey* implementation based on a key managed by Key Vault.


  This class should not be instantiated directly. Instead, use the

  <xref:azure.keyvault.keys.crypto.CryptographyClient.create_rsa_private_key> method
  to create a key based on the

  client''s key. Only synchronous clients and operations are supported at this time.'
constructor:
  syntax: 'KeyVaultRSAPrivateKey(client: CryptographyClient, key_material: JsonWebKey
    | None)'
  parameters:
  - name: client
    isRequired: true
  - name: key_material
    isRequired: true
methods:
- uid: azure.keyvault.keys.crypto.KeyVaultRSAPrivateKey.decrypt
  name: decrypt
  summary: Decrypts the provided ciphertext.
  signature: 'decrypt(ciphertext: bytes, padding: AsymmetricPadding) -> bytes'
  parameters:
  - name: ciphertext
    description: Encrypted bytes to decrypt.
    isRequired: true
    types:
    - <xref:bytes>
  - name: padding
    description: 'The padding to use. Supported paddings are *OAEP* and *PKCS1v15*.
      For *OAEP* padding, supported

      hash algorithms are *SHA1* and *SHA256*. The only supported mask generation
      function is *MGF1*. See

      [https://learn.microsoft.com/azure/key-vault/keys/about-keys-details](https://learn.microsoft.com/azure/key-vault/keys/about-keys-details)
      for details.'
    isRequired: true
    types:
    - <xref:cryptography.hazmat.primitives.asymmetric.padding.AsymmetricPadding>
  return:
    description: The decrypted plaintext, as bytes.
    types:
    - <xref:bytes>
- uid: azure.keyvault.keys.crypto.KeyVaultRSAPrivateKey.private_bytes
  name: private_bytes
  summary: 'Allows serialization of the key to bytes.


    This function uses the *cryptography* library''s implementation.

    Encoding (*PEM* or *DER*) and format (*TraditionalOpenSSL*, *OpenSSH*, or *PKCS8*)
    and encryption algorithm

    (such as *BestAvailableEncryption* or *NoEncryption*) are chosen to define the
    exact serialization.'
  signature: 'private_bytes(encoding: Encoding, format: PrivateFormat, encryption_algorithm:
    KeySerializationEncryption) -> bytes'
  parameters:
  - name: encoding
    description: A value from the *Encoding* enum.
    isRequired: true
    types:
    - <xref:cryptography.hazmat.primitives.serialization.Encoding>
  - name: format
    description: A value from the *PrivateFormat* enum.
    isRequired: true
    types:
    - <xref:cryptography.hazmat.primitives.serialization.PrivateFormat>
  - name: encryption_algorithm
    description: An instance of an object conforming to the *KeySerializationEncryption*
      interface.
    isRequired: true
    types:
    - <xref:cryptography.hazmat.primitives.serialization.KeySerializationEncryption>
  return:
    description: The serialized key.
    types:
    - <xref:bytes>
  exceptions:
  - type: ValueError
    description: if the client is unable to obtain the key material from Key Vault.
- uid: azure.keyvault.keys.crypto.KeyVaultRSAPrivateKey.private_numbers
  name: private_numbers
  summary: Returns an *RSAPrivateNumbers* representing the key's private numbers.
  signature: private_numbers() -> RSAPrivateNumbers
  return:
    description: The private numbers of the key.
    types:
    - <xref:cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateNumbers>
  exceptions:
  - type: ValueError
    description: if the client is unable to obtain the key material from Key Vault.
- uid: azure.keyvault.keys.crypto.KeyVaultRSAPrivateKey.public_key
  name: public_key
  summary: 'The *RSAPublicKey* associated with this private key, as a *KeyVaultRSAPublicKey*.


    The public key implementation will use the same underlying cryptography client
    as this private key.'
  signature: public_key() -> KeyVaultRSAPublicKey
  return:
    description: The *KeyVaultRSAPublicKey* associated with the key.
    types:
    - <xref:azure.keyvault.keys.crypto.KeyVaultRSAPublicKey>
- uid: azure.keyvault.keys.crypto.KeyVaultRSAPrivateKey.sign
  name: sign
  summary: Signs the data.
  signature: 'sign(data: bytes, padding: AsymmetricPadding, algorithm: Prehashed |
    HashAlgorithm) -> bytes'
  parameters:
  - name: data
    description: The data to sign, as bytes.
    isRequired: true
    types:
    - <xref:bytes>
  - name: padding
    description: 'The padding to use. Supported paddings are *PKCS1v15* and *PSS*.
      For *PSS*, the only supported

      mask generation function is *MGF1*. See [https://learn.microsoft.com/azure/key-vault/keys/about-keys-details](https://learn.microsoft.com/azure/key-vault/keys/about-keys-details)

      for details.'
    isRequired: true
    types:
    - <xref:cryptography.hazmat.primitives.asymmetric.padding.AsymmetricPadding>
  - name: algorithm
    description: "The algorithm to sign with. Only *HashAlgorithm`s are supported\
      \ \u2013 specifically, `SHA256*,\n*SHA384*, and *SHA512*."
    isRequired: true
    types:
    - <xref:cryptography.hazmat.primitives.asymmetric.utils.Prehashed>
    - <xref:cryptography.hazmat.primitives.hashes.HashAlgorithm>
  return:
    description: The signature, as bytes.
    types:
    - <xref:bytes>
- uid: azure.keyvault.keys.crypto.KeyVaultRSAPrivateKey.signer
  name: signer
  summary: Not implemented. This method was deprecated in *cryptography* 2.0 and removed
    in 37.0.0.
  signature: 'signer(padding: AsymmetricPadding, algorithm: HashAlgorithm) -> NoReturn'
  parameters:
  - name: padding
    isRequired: true
  - name: algorithm
    isRequired: true
attributes:
- uid: azure.keyvault.keys.crypto.KeyVaultRSAPrivateKey.key_size
  name: key_size
  summary: The bit length of the public modulus.
  return:
    description: The key's size.
    types:
    - <xref:int>
  exceptions:
  - type: ValueError
    description: if the client is unable to obtain the key material from Key Vault.
