### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.Receiver.on_message
  - azure.eventhub.Receiver.queue_size
  - azure.eventhub.Receiver.receive
  - azure.eventhub.Receiver.selector
  - azure.eventhub.Receiver.timeout
  class: azure.eventhub.Receiver
  fullName: azure.eventhub.Receiver
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.eventhub
  name: Receiver
  source:
    id: Receiver
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 382
  summary: 'Implements a Receiver.






    '
  syntax:
    content: Receiver(client, source, prefetch=300, epoch=None)
  type: class
  uid: azure.eventhub.Receiver
- class: azure.eventhub.Receiver
  fullName: azure.eventhub.Receiver.on_message
  langs:
  - python
  module: azure.eventhub
  name: on_message
  source:
    id: on_message
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 428
  summary: 'Callback to process a received message and wrap it in EventData.

    Will also call a user supplied callback.

    :param event: The received message.

    :type event: ~uamqp.Message

    :returns: ~azure.eventhub.EventData.

    '
  syntax:
    content: on_message(event)
    parameters:
    - id: event
  type: method
  uid: azure.eventhub.Receiver.on_message
- class: azure.eventhub.Receiver
  fullName: azure.eventhub.Receiver.queue_size
  langs:
  - python
  module: azure.eventhub
  name: queue_size
  source:
    id: queue_size
    path: null
    remote:
      branch: develop
      path: null
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: null
  summary: 'The current size of the unprocessed message queue.

    :returns: int

    '
  syntax: {}
  type: attribute
  uid: azure.eventhub.Receiver.queue_size
- class: azure.eventhub.Receiver
  fullName: azure.eventhub.Receiver.receive
  langs:
  - python
  module: azure.eventhub
  name: receive
  source:
    id: receive
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 442
  summary: "Receive events from the EventHub.\n:param max_batch_size: Receive a batch\
    \ of events. Batch size will\n\n\n   be up to the maximum specified, but will\
    \ return as soon as service\n   returns no new events. If combined with a timeout\
    \ and no events are\n   retrieve before the time, the result will be empty. If\
    \ no batch\n   size is supplied, the prefetch size will be the maximum.\n\n"
  syntax:
    content: receive(max_batch_size=None, callback=None, timeout=None)
    parameters:
    - defaultValue: None
      description: 'A callback to be run for each received event. This must

        be a function that accepts a single argument - the event data. This callback

        will be run before the message is returned in the result generator.

        '
      id: callback
      type:
      - func[azure.eventhub.EventData]
    - defaultValue: None
      id: callback
    - defaultValue: None
      id: timeout
    return:
      description: 'list[~azure.eventhub.EventData]

        '
  type: method
  uid: azure.eventhub.Receiver.receive
- class: azure.eventhub.Receiver
  fullName: azure.eventhub.Receiver.selector
  langs:
  - python
  module: azure.eventhub
  name: selector
  source:
    id: selector
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 478
  summary: 'Create a selector for the current offset if it is set.

    :param default: The fallback receive offset.

    :type default: ~azure.eventhub.Offset

    :returns: ~azure.eventhub.Offset

    '
  syntax:
    content: selector(default)
    parameters:
    - id: default
  type: method
  uid: azure.eventhub.Receiver.selector
- class: azure.eventhub.Receiver
  fullName: azure.eventhub.Receiver.timeout
  langs:
  - python
  module: azure.eventhub
  name: timeout
  syntax:
    content: timeout = 0
  type: attribute
  uid: azure.eventhub.Receiver.timeout
references:
- fullName: azure.eventhub.Receiver.on_message
  isExternal: false
  name: on_message
  parent: azure.eventhub.Receiver
  uid: azure.eventhub.Receiver.on_message
- fullName: azure.eventhub.Receiver.queue_size
  isExternal: false
  name: queue_size
  parent: azure.eventhub.Receiver
  uid: azure.eventhub.Receiver.queue_size
- fullName: azure.eventhub.Receiver.receive
  isExternal: false
  name: receive
  parent: azure.eventhub.Receiver
  uid: azure.eventhub.Receiver.receive
- fullName: azure.eventhub.Receiver.selector
  isExternal: false
  name: selector
  parent: azure.eventhub.Receiver
  uid: azure.eventhub.Receiver.selector
- fullName: azure.eventhub.Receiver.timeout
  isExternal: false
  name: timeout
  parent: azure.eventhub.Receiver
  uid: azure.eventhub.Receiver.timeout
- fullName: func[azure.eventhub.EventData]
  name: func[EventData]
  spec.python:
  - fullName: func
    name: func
    uid: func
  - fullName: '['
    name: '['
  - fullName: azure.eventhub.EventData
    name: EventData
    uid: azure.eventhub.EventData
  - fullName: ']'
    name: ']'
  uid: func[azure.eventhub.EventData]
