### YamlMime:UniversalReference
api_name: []
items:
- children:
  - adal.wstrust_response.WSTrustResponse
  - adal.wstrust_response.findall_content
  - adal.wstrust_response.scrub_rstr_log_message
  fullName: adal.wstrust_response
  langs:
  - python
  module: adal.wstrust_response
  name: wstrust_response
  source:
    id: wstrust_response
    path: adal\wstrust_response.py
    remote:
      branch: dev
      path: adal\wstrust_response.py
      repo: https://github.com/AzureAD/azure-activedirectory-library-for-python
    startLine: 0
  type: module
  uid: adal.wstrust_response
- fullName: adal.wstrust_response.findall_content
  langs:
  - python
  module: adal.wstrust_response
  name: findall_content
  source:
    id: findall_content
    path: adal\wstrust_response.py
    remote:
      branch: dev
      path: adal\wstrust_response.py
      repo: https://github.com/AzureAD/azure-activedirectory-library-for-python
    startLine: 58
  summary: 'Given a tag name without any prefix,

    this function returns a list of the raw content inside this tag as-is.



    ```


    >>> findall_content("<ns0:foo> what <bar> ever </bar> content </ns0:foo>", "foo")

    [" what <bar> ever </bar> content "]

    ```


    Motivation:


    Usually we would use XML parser to extract the data by xpath.

    However the ElementTree in Python will implicitly normalize the output

    by "hoisting" the inner inline namespaces into the outmost element.

    The result will be a semantically equivalent XML snippet,

    but not fully identical to the original one.

    While this effect shouldn''t become a problem in all other cases,

    it does not seem to fully comply with Exclusive XML Canonicalization spec

    ([https://www.w3.org/TR/xml-exc-c14n/](https://www.w3.org/TR/xml-exc-c14n/)),
    and void the SAML token signature.

    SAML signature algo needs the "XML -> C14N(XML) -> Signed(C14N(Xml))" order.


    The binary extention lxml is probably the canonical way to solve this

    ([https://stackoverflow.com/questions/22959577/python-exclusive-xml-canonicalization-xml-exc-c14n](https://stackoverflow.com/questions/22959577/python-exclusive-xml-canonicalization-xml-exc-c14n))

    but here we use this workaround, based on Regex, to return raw content as-is.

    '
  syntax:
    content: findall_content(xml_string, tag)
    parameters:
    - id: xml_string
    - id: tag
  type: function
  uid: adal.wstrust_response.findall_content
- fullName: adal.wstrust_response.scrub_rstr_log_message
  langs:
  - python
  module: adal.wstrust_response
  name: scrub_rstr_log_message
  source:
    id: scrub_rstr_log_message
    path: adal\wstrust_response.py
    remote:
      branch: dev
      path: adal\wstrust_response.py
      repo: https://github.com/AzureAD/azure-activedirectory-library-for-python
    startLine: 40
  syntax:
    content: scrub_rstr_log_message(response_str)
    parameters:
    - id: response_str
  type: function
  uid: adal.wstrust_response.scrub_rstr_log_message
references:
- fullName: adal.wstrust_response.WSTrustResponse
  isExternal: false
  name: WSTrustResponse
  parent: adal.wstrust_response
  uid: adal.wstrust_response.WSTrustResponse
- fullName: adal.wstrust_response.findall_content
  isExternal: false
  name: findall_content
  parent: adal.wstrust_response
  uid: adal.wstrust_response.findall_content
- fullName: adal.wstrust_response.scrub_rstr_log_message
  isExternal: false
  name: scrub_rstr_log_message
  parent: adal.wstrust_response
  uid: adal.wstrust_response.scrub_rstr_log_message
