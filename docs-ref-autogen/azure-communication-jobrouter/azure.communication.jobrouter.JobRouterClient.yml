### YamlMime:PythonClass
uid: azure.communication.jobrouter.JobRouterClient
name: JobRouterClient
fullName: azure.communication.jobrouter.JobRouterClient
module: azure.communication.jobrouter
inheritances:
- azure.communication.jobrouter._client.JobRouterClient
summary: 'A client to interact with the AzureCommunicationService JobRouter service.


  This client provides operations to create and update jobs, policies and workers.'
constructor:
  syntax: 'JobRouterClient(endpoint: str, credential: AzureKeyCredential, **kwargs:
    Any)'
  parameters:
  - name: endpoint
    description: The endpoint of the Azure Communication resource.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: The credentials with which to authenticate
    isRequired: true
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
  keywordOnlyParameters:
  - name: api_version
    description: 'Azure Communication Job Router API version.

      Default value is "2023-11-01".

      Note that overriding this default value may result in unsupported behavior.'
methods:
- uid: azure.communication.jobrouter.JobRouterClient.accept_job_offer
  name: accept_job_offer
  summary: 'Accepts an offer to work on a job and returns a 409/Conflict if another
    agent accepted the job

    already.


    Accepts an offer to work on a job and returns a 409/Conflict if another agent
    accepted the job

    already.'
  signature: 'accept_job_offer(worker_id: str, offer_id: str, **kwargs: Any) -> AcceptJobOfferResult'
  parameters:
  - name: worker_id
    description: Id of a worker. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: offer_id
    description: Id of an offer. Required.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: stream
    description: 'Whether to stream the response of this operation. Defaults to False.
      You

      will have to context manage the returned stream.'
    types:
    - <xref:bool>
  return:
    description: AcceptJobOfferResult. The AcceptJobOfferResult is compatible with
      MutableMapping
    types:
    - <xref:azure.communication.jobrouter.models.AcceptJobOfferResult>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.JobRouterClient.cancel_job
  name: cancel_job
  summary: Closes a completed job.
  signature: 'cancel_job(job_id: str, options: CancelJobOptions | MutableMapping[str,
    Any] | IO | None = None, **kwargs: Any) -> None'
  parameters:
  - name: job_id
    description: Id of the job.
    isRequired: true
    types:
    - <xref:str>
  - name: options
    description: 'Request model for cancelling job. Is one of the following types:

      CancelJobOptions, JSON, IO Default value is None.'
    isRequired: true
    types:
    - <xref:azure.communication.jobrouter.models.CancelJobOptions>
    - <xref:JSON>
    - <xref:typing.IO>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to cancel a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\\router_job_crud_ops.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.communication.jobrouter import JobRouterClient\n\n   router_client\
    \ = JobRouterClient.from_connection_string(conn_str=connection_string)\n\n   router_client.cancel_job(job_id)\n\
    \n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.close
  name: close
  signature: close() -> None
- uid: azure.communication.jobrouter.JobRouterClient.close_job
  name: close_job
  summary: Closes a completed job.
  signature: 'close_job(job_id: str, assignment_id: str, options: CloseJobOptions
    | MutableMapping[str, Any] | IO | None = None, **kwargs: Any) -> None'
  parameters:
  - name: job_id
    description: Id of the job.
    isRequired: true
    types:
    - <xref:str>
  - name: assignment_id
    description: The Id of the job assignment. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: options
    description: 'Request model for closing job. Is one of the following types: CloseJobOptions,

      JSON, IO Default value is None.'
    isRequired: true
    types:
    - <xref:azure.communication.jobrouter.models.CloseJobOptions>
    - <xref:JSON>
    - <xref:typing.IO>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to close a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\\router_job_crud_ops.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.communication.jobrouter.models import RouterJob, CloseJobOptions\n\
    \n   router_client.close_job(job_id, assignment_id, CloseJobOptions(note=\"Close\
    \ job\"))\n\n   queried_job: RouterJob = router_client.get_job(job_id)\n\n   print(f\"\
    Job has been successfully closed. Current status: {queried_job.status}\")\n\n\n\
    \   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.complete_job
  name: complete_job
  summary: Completes an assigned job.
  signature: 'complete_job(job_id: str, assignment_id: str, options: CompleteJobOptions
    | MutableMapping[str, Any] | IO | None = None, **kwargs: Any) -> None'
  parameters:
  - name: job_id
    description: Id of the job.
    isRequired: true
    types:
    - <xref:str>
  - name: assignment_id
    description: The Id of the job assignment. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: options
    description: 'Request model for completing job. Is one of the following types:

      CompleteJobOptions, JSON, IO Default value is None.'
    isRequired: true
    types:
    - <xref:azure.communication.jobrouter.models.CompleteJobOptions>
    - <xref:JSON>
    - <xref:typing.IO>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to complete a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\\router_job_crud_ops.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.communication.jobrouter import JobRouterClient\n   from azure.communication.jobrouter.models\
    \ import (\n       RouterJob,\n       CompleteJobOptions,\n   )\n\n   router_client\
    \ = JobRouterClient.from_connection_string(conn_str=connection_string)\n\n   queried_job:\
    \ RouterJob = router_client.get_job(job_id)\n\n   assignment_id = [k for k, v\
    \ in queried_job.assignments.items()][0]\n\n   router_client.complete_job(job_id,\
    \ assignment_id, CompleteJobOptions(note=\"Complete job\"))\n\n   queried_job:\
    \ RouterJob = router_client.get_job(job_id)\n\n   print(f\"Job has been successfully\
    \ completed. Current status: {queried_job.status}\")\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.decline_job_offer
  name: decline_job_offer
  summary: Declines an offer to work on a job.
  signature: 'decline_job_offer(worker_id: str, offer_id: str, options: DeclineJobOfferOptions
    | MutableMapping[str, Any] | IO | None = None, **kwargs: Any) -> None'
  parameters:
  - name: worker_id
    description: Id of the worker. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: offer_id
    description: Id of the offer. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: options
    description: 'Request model for declining offer. Is one of the following types:

      DeclineJobOfferOptions, JSON, IO Default value is None.'
    isRequired: true
    types:
    - <xref:azure.communication.jobrouter.models.DeclineJobOfferOptions>
    - <xref:JSON>
    - <xref:typing.IO>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to close a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\\router_job_crud_ops.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.communication.jobrouter.models import RouterJob, CloseJobOptions\n\
    \n   router_client.close_job(job_id, assignment_id, CloseJobOptions(note=\"Close\
    \ job\"))\n\n   queried_job: RouterJob = router_client.get_job(job_id)\n\n   print(f\"\
    Job has been successfully closed. Current status: {queried_job.status}\")\n\n\n\
    \   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.delete_job
  name: delete_job
  summary: 'Deletes a job and all of its traces.


    Deletes a job and all of its traces.'
  signature: 'delete_job(job_id: str, **kwargs: Any) -> None'
  parameters:
  - name: job_id
    description: Id of a job. Required.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.JobRouterClient.delete_worker
  name: delete_worker
  summary: 'Deletes a worker and all of its traces.


    Deletes a worker and all of its traces.'
  signature: 'delete_worker(worker_id: str, **kwargs: Any) -> None'
  parameters:
  - name: worker_id
    description: Id of a worker. Required.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.JobRouterClient.from_connection_string
  name: from_connection_string
  summary: Create JobRouterClient from a Connection String.
  signature: 'from_connection_string(conn_str: str, **kwargs: Any) -> JobRouterClient'
  parameters:
  - name: conn_str
    description: A connection string to an Azure Communication Service resource.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Instance of JobRouterClient.
    types:
    - <xref:azure.communication.jobrouter.JobRouterClient>
  examples:
  - "Authenticating a JobRouterClient from a connection_string<!--[!code-python[Main](les\\\
    sample_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\
    \\sample_authentication.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import JobRouterClient\n\
    \n   # set `connection_string` to an existing ACS endpoint\n   router_client =\
    \ JobRouterClient.from_connection_string(conn_str=connection_string)\n   print(\"\
    JobRouterClient created successfully!\")\n\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.get_job
  name: get_job
  summary: 'Retrieves an existing job by Id.


    Retrieves an existing job by Id.'
  signature: 'get_job(job_id: str, **kwargs: Any) -> RouterJob'
  parameters:
  - name: job_id
    description: Id of a job. Required.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: stream
    description: 'Whether to stream the response of this operation. Defaults to False.
      You

      will have to context manage the returned stream.'
    types:
    - <xref:bool>
  return:
    description: RouterJob. The RouterJob is compatible with MutableMapping
    types:
    - <xref:azure.communication.jobrouter.models.RouterJob>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.JobRouterClient.get_queue_position
  name: get_queue_position
  summary: 'Gets a job''s position details.


    Gets a job''s position details.'
  signature: 'get_queue_position(job_id: str, **kwargs: Any) -> RouterJobPositionDetails'
  parameters:
  - name: job_id
    description: Id of the job. Required.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: stream
    description: 'Whether to stream the response of this operation. Defaults to False.
      You

      will have to context manage the returned stream.'
    types:
    - <xref:bool>
  return:
    description: 'RouterJobPositionDetails. The RouterJobPositionDetails is compatible
      with

      MutableMapping'
    types:
    - <xref:azure.communication.jobrouter.models.RouterJobPositionDetails>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.JobRouterClient.get_queue_statistics
  name: get_queue_statistics
  summary: 'Retrieves a queue''s statistics.


    Retrieves a queue''s statistics.'
  signature: 'get_queue_statistics(queue_id: str, **kwargs: Any) -> RouterQueueStatistics'
  parameters:
  - name: queue_id
    description: Id of the queue to retrieve statistics. Required.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: stream
    description: 'Whether to stream the response of this operation. Defaults to False.
      You

      will have to context manage the returned stream.'
    types:
    - <xref:bool>
  return:
    description: RouterQueueStatistics. The RouterQueueStatistics is compatible with
      MutableMapping
    types:
    - <xref:azure.communication.jobrouter.models.RouterQueueStatistics>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.JobRouterClient.get_worker
  name: get_worker
  summary: 'Retrieves an existing worker by Id.


    Retrieves an existing worker by Id.'
  signature: 'get_worker(worker_id: str, **kwargs: Any) -> RouterWorker'
  parameters:
  - name: worker_id
    description: Id of a worker. Required.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: stream
    description: 'Whether to stream the response of this operation. Defaults to False.
      You

      will have to context manage the returned stream.'
    types:
    - <xref:bool>
  return:
    description: RouterWorker. The RouterWorker is compatible with MutableMapping
    types:
    - <xref:azure.communication.jobrouter.models.RouterWorker>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.JobRouterClient.list_jobs
  name: list_jobs
  summary: Retrieves list of jobs based on filter parameters.
  signature: 'list_jobs(*, status: str | RouterJobStatus | Literal[''all'', ''active'']
    | None = ''all'', channel_id: str | None = None, queue_id: str | None = None,
    classification_policy_id: str | None = None, scheduled_before: str | datetime
    | None = None, scheduled_after: str | datetime | None = None, results_per_page:
    int | None = None, **kwargs: Any) -> ItemPaged[RouterJob]'
  keywordOnlyParameters:
  - name: status
    description: 'If specified, filter jobs by status. Default value is "all".

      Accepted value(s): pendingClassification, queued, assigned, completed, closed,
      cancelled,

      classificationFailed, active, all'
    types:
    - <xref:typing.Optional>[<xref:typing.Union>[<xref:str>, <xref:azure.communication.jobrouter.models.RouterJobStatus>,
      <xref:typing.Literal>["all","active"]]]
  - name: channel_id
    description: If specified, filter jobs by channel. Default value is None.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: queue_id
    description: If specified, filter jobs by queue. Default value is None.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: classification_policy_id
    description: If specified, filter jobs by classificationPolicy. Default value
      is None.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: scheduled_before
    description: 'If specified, filter on jobs that was scheduled before or

      at given timestamp. Range: (-Inf, scheduledBefore]. Default value is None.'
    types:
    - <xref:typing.Optional>[<xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]]
  - name: scheduled_after
    description: 'If specified, filter on jobs that was scheduled at or

      after given value. Range: [scheduledAfter, +Inf). Default value is None.'
    types:
    - <xref:typing.Optional>[<xref:typing.Union>[<xref:str>, <xref:datetime.datetime>]]
  - name: results_per_page
    description: The maximum number of results to be returned per page.
    types:
    - <xref:typing.Optional>[<xref:int>]
  return:
    description: An iterator like instance of RouterJobItem
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.communication.jobrouter.models.RouterJobItem>]
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to retrieve scheduled jobs<!--[!code-python[Main](les\\\
    router_job_crud_ops.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\":\
    \ [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\
    \\router_job_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from datetime import datetime\n   from azure.communication.jobrouter\
    \ import JobRouterClient\n\n   router_client = JobRouterClient.from_connection_string(conn_str=connection_string)\n\
    \n   scheduled_before = datetime.utcnow()\n\n   router_job_iterator = router_client.list_jobs(scheduled_before=scheduled_before,\
    \ results_per_page=10)\n\n   for job_page in router_job_iterator.by_page():\n\
    \       jobs_in_page = list(job_page)\n       print(f\"Retrieved {len(jobs_in_page)}\
    \ jobs in current page\")\n\n       for j in jobs_in_page:\n           print(f\"\
    Retrieved job with id: {j.id}\")\n\n   print(f\"Successfully completed fetching\
    \ scheduled jobs\")\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.list_workers
  name: list_workers
  summary: Retrieves existing workers.
  signature: 'list_workers(*, state: str | RouterWorkerState | Literal[''all''] |
    None = ''all'', channel_id: str | None = None, queue_id: str | None = None, has_capacity:
    bool | None = None, results_per_page: int | None = None, **kwargs: Any) -> ItemPaged[RouterWorker]'
  keywordOnlyParameters:
  - name: state
    description: 'If specified, select workers by worker status. Default value is
      "all".

      Accepted value(s): active, draining, inactive, all'
    types:
    - <xref:typing.Optional>[<xref:typing.Union>[<xref:str>, <xref:azure.communication.jobrouter.models.RouterWorkerState>,
      <xref:typing.Literal>["all"]]]
  - name: channel_id
    description: 'If specified, select workers who have a channel configuration

      with this channel. Default value is None.'
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: queue_id
    description: 'If specified, select workers who are assigned to this queue.

      Default value is None.'
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: has_capacity
    description: 'If set to true, select only workers who have capacity for the

      channel specified by `channelId` or for any channel'
    types:
    - <xref:typing.Optional>[<xref:bool>]
  - name: results_per_page
    description: The maximum number of results to be returned per page.
    types:
    - <xref:typing.Optional>[<xref:int>]
  return:
    description: An iterator like instance of RouterWorkerItem
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.communication.jobrouter.models.RouterWorkerItem>]
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to retrieve workers in batches<!--[!code-python[Main](les\\\
    router_worker_crud_ops.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\
    \\router_worker_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import JobRouterClient\n\
    \n   router_client = JobRouterClient.from_connection_string(conn_str=connection_string)\n\
    \n   router_worker_iterator = router_client.list_workers(results_per_page=10)\n\
    \n   for worker_page in router_worker_iterator.by_page():\n       workers_in_page\
    \ = list(worker_page)\n       print(f\"Retrieved {len(workers_in_page)} workers\
    \ in current page\")\n\n       for w in workers_in_page:\n           print(f\"\
    Retrieved worker with id: {w.id}\")\n\n   print(f\"Successfully completed fetching\
    \ workers\")\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.reclassify_job
  name: reclassify_job
  summary: Reclassify a job.
  signature: 'reclassify_job(job_id: str, **kwargs: Any) -> None'
  parameters:
  - name: job_id
    description: Id of the job.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to re-classify a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\\router_job_crud_ops.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.communication.jobrouter import JobRouterClient\n\n   router_client\
    \ = JobRouterClient.from_connection_string(conn_str=connection_string)\n\n   router_client.reclassify_job(job_id)\n\
    \n   print(f\"Successfully re-classified job\")\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.send_request
  name: send_request
  summary: 'Runs the network request through the client''s chained policies.


    ```


    >>> from azure.core.rest import HttpRequest

    >>> request = HttpRequest("GET", "https://www.example.org/")

    <HttpRequest [GET], url: ''https://www.example.org/''>

    >>> response = client.send_request(request)

    <HttpResponse: 200 OK>

    ```


    For more information on this code flow, see [https://aka.ms/azsdk/dpcodegen/python/send_request](https://aka.ms/azsdk/dpcodegen/python/send_request)'
  signature: 'send_request(request: HttpRequest, *, stream: bool = False, **kwargs:
    Any) -> HttpResponse'
  parameters:
  - name: request
    description: The network request you want to make. Required.
    isRequired: true
    types:
    - <xref:azure.core.rest.HttpRequest>
  keywordOnlyParameters:
  - name: stream
    description: Whether the response payload will be streamed. Defaults to False.
    types:
    - <xref:bool>
  return:
    description: The response of your network call. Does not do error handling on
      your response.
    types:
    - <xref:azure.core.rest.HttpResponse>
- uid: azure.communication.jobrouter.JobRouterClient.unassign_job
  name: unassign_job
  summary: 'Unassign a job.


    Unassign a job.'
  signature: 'unassign_job(job_id: str, assignment_id: str, options: UnassignJobOptions
    | MutableMapping[str, Any] | IO | None = None, **kwargs: Any) -> UnassignJobResult'
  parameters:
  - name: job_id
    description: Id of a job. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: assignment_id
    description: Id of a job assignment. Required.
    isRequired: true
    types:
    - <xref:str>
  - name: options
    description: 'Request body for unassign route. Is one of the following types:

      UnassignJobOptions, JSON, IO Default value is None.'
    isRequired: true
    types:
    - <xref:azure.communication.jobrouter.models.UnassignJobOptions>
    - <xref:JSON>
    - <xref:typing.IO>
  keywordOnlyParameters:
  - name: content_type
    description: 'Body parameter Content-Type. Known values are: application/json.
      Default

      value is None.'
    types:
    - <xref:str>
  - name: stream
    description: 'Whether to stream the response of this operation. Defaults to False.
      You

      will have to context manage the returned stream.'
    types:
    - <xref:bool>
  return:
    description: UnassignJobResult. The UnassignJobResult is compatible with MutableMapping
    types:
    - <xref:azure.communication.jobrouter.models.UnassignJobResult>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.JobRouterClient.upsert_job
  name: upsert_job
  summary: Update a job.
  signature: 'upsert_job(job_id: str, *args: RouterJob | MutableMapping[str, Any]
    | IO, **kwargs: Any) -> RouterJob'
  parameters:
  - name: job_id
    description: Id of the job.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: channel_reference
    description: Reference to an external parent context, eg. call ID.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: channel_id
    description: The channel identifier. eg. voice, chat, etc.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: classification_policy_id
    description: 'The Id of the Classification policy used for classifying a

      job.'
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: queue_id
    description: The Id of the Queue that this job is queued to.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: priority
    description: The priority of this job.
    types:
    - <xref:typing.Optional>[<xref:int>]
  - name: disposition_code
    description: Reason code for cancelled or closed jobs.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: requested_worker_selectors
    description: 'A collection of manually specified label selectors, which

      a worker must satisfy in order to process this job.'
    types:
    - <xref:typing.Optional>[<xref:typing.List>[ <xref:azure.communication.jobrouter.models.RouterWorkerSelector>]]
  - name: labels
    description: 'A set of key/value pairs that are identifying attributes used by
      the rules

      engines to make decisions.'
    types:
    - <xref:typing.Optional>[<xref:typing.Dict>[<xref:str>, <xref:typing.Union>[<xref:int>,
      <xref:float>, <xref:str>, <xref:bool>, <xref:None>]]]
  - name: tags
    description: A set of tags. A set of non-identifying attributes attached to this
      job.
    types:
    - <xref:typing.Optional>[<xref:typing.Dict>[<xref:str>, <xref:typing.Union>[<xref:int>,
      <xref:float>, <xref:str>, <xref:bool>, <xref:None>]]]
  - name: notes
    description: Notes attached to a job, sorted by timestamp.
    types:
    - <xref:typing.Optional>[<xref:typing.Dict>[<xref:datetime.datetime>, <xref:str>]]
  - name: matching_mode
    description: If set, determines how a job will be matched
    types:
    - <xref:typing.Optional>[<xref:azure.communication.jobrouter.models.JobMatchingMode>]
  - name: if_unmodified_since
    description: 'The request should only proceed if the entity was not modified

      after this time. Default value is None.'
    types:
    - <xref:datetime.datetime>
  - name: etag
    description: 'check if resource is changed. Set None to skip checking etag. Default
      value is

      None.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag. Default value is None.
    types:
    - <xref:azure.core.MatchConditions>
  return:
    description: Instance of RouterJob
    types:
    - <xref:azure.communication.jobrouter.models.RouterJob>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to update a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\\router_job_crud_ops.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.communication.jobrouter import (\n       JobRouterClient,\n  \
    \ )\n\n   # set `connection_string` to an existing ACS endpoint\n   router_client:\
    \ JobRouterClient = JobRouterClient.from_connection_string(conn_str=connection_string)\n\
    \   print(\"JobRouterAdministrationClient created successfully!\")\n\n   update_job\
    \ = router_client.upsert_job(job_id, channel_reference=\"45678\")\n\n   print(f\"\
    Job has been successfully update with channel reference: {update_job.channel_reference}\"\
    )\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.upsert_worker
  name: upsert_worker
  summary: Update a router worker.
  signature: 'upsert_worker(worker_id: str, *args: RouterWorker | MutableMapping[str,
    Any] | IO, **kwargs: Any) -> RouterWorker'
  parameters:
  - name: worker_id
    description: Id of the worker.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: queue_assignments
    description: The queue(s) that this worker can receive work from.
    types:
    - <xref:typing.Optional>[<xref:typing.Dict>[<xref:str>, <xref:typing.Union>[<xref:typing.MutableMapping>[<xref:str>,
      <xref:typing.Any>], <xref:None>]]]
  - name: total_capacity
    description: 'The total capacity score this worker has to manage multiple concurrent

      jobs.'
    types:
    - <xref:typing.Optional>[<xref:int>]
  - name: labels
    description: 'A set of key/value pairs that are identifying attributes used by
      the rules

      engines to make decisions.'
    types:
    - <xref:typing.Optional>[<xref:typing.Dict>[<xref:str>, <xref:typing.Union>[<xref:int>,
      <xref:float>, <xref:str>, <xref:bool>, <xref:None>]]]
  - name: tags
    description: A set of tags. A set of non-identifying attributes attached to this
      worker.
    types:
    - <xref:typing.Optional>[<xref:typing.Dict>[<xref:str>, <xref:typing.Union>[<xref:int>,
      <xref:float>, <xref:str>, <xref:bool>, <xref:None>]]]
  - name: channel_configurations
    description: 'The channel(s) this worker can handle and their impact on the

      workers capacity.'
    types:
    - <xref:typing.Optional>[<xref:typing.Dict>[<xref:str>, <xref:azure.communication.jobrouter.models.ChannelConfiguration>]]
  - name: available_for_offers
    description: A flag indicating this worker is open to receive offers or not.
    types:
    - <xref:typing.Optional>[<xref:bool>]
  - name: if_unmodified_since
    description: 'The request should only proceed if the entity was not modified

      after this time. Default value is None.'
    types:
    - <xref:datetime.datetime>
  - name: etag
    description: 'check if resource is changed. Set None to skip checking etag. Default
      value is

      None.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag. Default value is None.
    types:
    - <xref:azure.core.MatchConditions>
  return:
    description: Instance of RouterWorker
    types:
    - <xref:azure.communication.jobrouter.models.RouterWorker>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to de-register a worker<!--[!code-python[Main](les\\router_worker_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\\windows\\\
    \\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\\\
    29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\\router_worker_crud_ops.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.communication.jobrouter import JobRouterClient\n\n   router_client\
    \ = JobRouterClient.from_connection_string(conn_str=connection_string)\n\n   router_worker\
    \ = router_client.upsert_worker(worker_id, available_for_offers=False)\n\n   print(\n\
    \       f\"Successfully de-registered router worker with id: {router_worker.id}\
    \ with status: {router_worker.state}\"\n   )\n\n   ````\n"
