### YamlMime:PythonClass
uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient
name: JobRouterAdministrationClient
fullName: azure.communication.jobrouter.aio.JobRouterAdministrationClient
module: azure.communication.jobrouter.aio
inheritances:
- azure.communication.jobrouter.aio._client.JobRouterAdministrationClient
summary: 'A client to interact with the AzureCommunicationService JobRouter service.


  This client provides operations to create, update, list and delete the following
  entities: classification policy,

  exception policy, distribution policy and queue.'
constructor:
  syntax: 'JobRouterAdministrationClient(endpoint: str, credential: AzureKeyCredential,
    **kwargs: Any)'
  parameters:
  - name: endpoint
    description: The endpoint of the Azure Communication resource.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: The credentials with which to authenticate
    isRequired: true
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
  keywordOnlyParameters:
  - name: api_version
    description: 'Azure Communication Job Router API version. Default value is "2023-11-01".

      Note that overriding this default value may result in unsupported behavior.'
    types:
    - <xref:str>
methods:
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.close
  name: close
  signature: async close() -> None
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.delete_classification_policy
  name: delete_classification_policy
  summary: 'Delete a classification policy by Id.


    Delete a classification policy by Id.'
  signature: 'async delete_classification_policy(classification_policy_id: str, **kwargs:
    Any) -> None'
  parameters:
  - name: classification_policy_id
    description: Id of a classification policy. Required.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.delete_distribution_policy
  name: delete_distribution_policy
  summary: 'Delete a distribution policy by Id.


    Delete a distribution policy by Id.'
  signature: 'async delete_distribution_policy(distribution_policy_id: str, **kwargs:
    Any) -> None'
  parameters:
  - name: distribution_policy_id
    description: Id of a distribution policy. Required.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.delete_exception_policy
  name: delete_exception_policy
  summary: 'Deletes a exception policy by Id.


    Deletes a exception policy by Id.'
  signature: 'async delete_exception_policy(exception_policy_id: str, **kwargs: Any)
    -> None'
  parameters:
  - name: exception_policy_id
    description: Id of an exception policy. Required.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.delete_queue
  name: delete_queue
  summary: 'Deletes a queue by Id.


    Deletes a queue by Id.'
  signature: 'async delete_queue(queue_id: str, **kwargs: Any) -> None'
  parameters:
  - name: queue_id
    description: Id of a queue. Required.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.from_connection_string
  name: from_connection_string
  summary: Create JobRouterClient from a Connection String.
  signature: 'from_connection_string(conn_str: str, **kwargs: Any) -> JobRouterAdministrationClient'
  parameters:
  - name: conn_str
    description: A connection string to an Azure Communication Service resource.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Instance of JobRouterAdministrationClient.
    types:
    - <xref:azure.communication.jobrouter.aio.JobRouterAdministrationClient>
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.get_classification_policy
  name: get_classification_policy
  summary: 'Retrieves an existing classification policy by Id.


    Retrieves an existing classification policy by Id.'
  signature: 'async get_classification_policy(classification_policy_id: str, **kwargs:
    Any) -> ClassificationPolicy'
  parameters:
  - name: classification_policy_id
    description: Id of a classification policy. Required.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: stream
    description: 'Whether to stream the response of this operation. Defaults to False.
      You

      will have to context manage the returned stream.'
    types:
    - <xref:bool>
  return:
    description: ClassificationPolicy. The ClassificationPolicy is compatible with
      MutableMapping
    types:
    - <xref:azure.communication.jobrouter.models.ClassificationPolicy>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.get_distribution_policy
  name: get_distribution_policy
  summary: 'Retrieves an existing distribution policy by Id.


    Retrieves an existing distribution policy by Id.'
  signature: 'async get_distribution_policy(distribution_policy_id: str, **kwargs:
    Any) -> DistributionPolicy'
  parameters:
  - name: distribution_policy_id
    description: Id of a distribution policy. Required.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: stream
    description: 'Whether to stream the response of this operation. Defaults to False.
      You

      will have to context manage the returned stream.'
    types:
    - <xref:bool>
  return:
    description: DistributionPolicy. The DistributionPolicy is compatible with MutableMapping
    types:
    - <xref:azure.communication.jobrouter.models.DistributionPolicy>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.get_exception_policy
  name: get_exception_policy
  summary: 'Retrieves an existing exception policy by Id.


    Retrieves an existing exception policy by Id.'
  signature: 'async get_exception_policy(exception_policy_id: str, **kwargs: Any)
    -> ExceptionPolicy'
  parameters:
  - name: exception_policy_id
    description: Id of an exception policy. Required.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: stream
    description: 'Whether to stream the response of this operation. Defaults to False.
      You

      will have to context manage the returned stream.'
    types:
    - <xref:bool>
  return:
    description: ExceptionPolicy. The ExceptionPolicy is compatible with MutableMapping
    types:
    - <xref:azure.communication.jobrouter.models.ExceptionPolicy>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.get_queue
  name: get_queue
  summary: 'Retrieves an existing queue by Id.


    Retrieves an existing queue by Id.'
  signature: 'async get_queue(queue_id: str, **kwargs: Any) -> RouterQueue'
  parameters:
  - name: queue_id
    description: Id of a queue. Required.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: stream
    description: 'Whether to stream the response of this operation. Defaults to False.
      You

      will have to context manage the returned stream.'
    types:
    - <xref:bool>
  return:
    description: RouterQueue. The RouterQueue is compatible with MutableMapping
    types:
    - <xref:azure.communication.jobrouter.models.RouterQueue>
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.list_classification_policies
  name: list_classification_policies
  summary: Retrieves existing classification policies.
  signature: 'list_classification_policies(*, results_per_page: int | None = None,
    **kwargs: Any) -> AsyncItemPaged[ClassificationPolicy]'
  keywordOnlyParameters:
  - name: results_per_page
    description: The maximum number of results to be returned per page.
    types:
    - <xref:typing.Optional>[<xref:int>]
  return:
    description: An iterator like instance of ClassificationPolicy
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.communication.jobrouter.models.ClassificationPolicy>]
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterAdministrationClient to list classification policies in batches<!--[!code-python[Main](les\\\
    classification_policy_crud_ops_async.py )]-->\n\n<!-- literal_block {\"ids\":\
    \ [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\
    \\classification_policy_crud_ops_async.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.communication.jobrouter.aio\
    \ import JobRouterAdministrationClient\n\n   router_admin_client = JobRouterAdministrationClient.from_connection_string(conn_str=connection_string)\n\
    \n   async with router_admin_client:\n       classification_policy_iterator =\
    \ router_admin_client.list_classification_policies(results_per_page=10)\n\n  \
    \     async for policy_page in classification_policy_iterator.by_page():\n   \
    \        policies_in_page = [i async for i in policy_page]\n           print(f\"\
    Retrieved {len(policies_in_page)} policies in current page\")\n\n           for\
    \ cp in policies_in_page:\n               print(f\"Retrieved classification policy\
    \ with id: {cp.id}\")\n\n       print(f\"Successfully completed fetching classification\
    \ policies\")\n\n   ````\n"
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.list_distribution_policies
  name: list_distribution_policies
  summary: Retrieves existing distribution policies.
  signature: 'list_distribution_policies(*, results_per_page: int | None = None, **kwargs:
    Any) -> AsyncItemPaged[DistributionPolicy]'
  keywordOnlyParameters:
  - name: results_per_page
    description: The maximum number of results to be returned per page.
    types:
    - <xref:typing.Optional>[<xref:int>]
  return:
    description: An iterator like instance of DistributionPolicy
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.communication.jobrouter.models.DistributionPolicy>]
  exceptions:
  - type: azure.core.exceptions.HttpResponseError
  examples:
  - "Use a JobRouterAdministrationClient to list distribution policies in batches<!--[!code-python[Main](les\\\
    distribution_policy_crud_ops_async.py )]-->\n\n<!-- literal_block {\"ids\": [],\
    \ \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\"\
    : \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\
    \\distribution_policy_crud_ops_async.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.communication.jobrouter.aio\
    \ import JobRouterAdministrationClient\n\n   router_admin_client = JobRouterAdministrationClient.from_connection_string(conn_str=connection_string)\n\
    \n   async with router_admin_client:\n       distribution_policy_iterator = router_admin_client.list_distribution_policies(results_per_page=10)\n\
    \n       async for policy_page in distribution_policy_iterator.by_page():\n  \
    \         policies_in_page = [i async for i in policy_page]\n           print(f\"\
    Retrieved {len(policies_in_page)} policies in current page\")\n\n           for\
    \ dp in policies_in_page:\n               print(f\"Retrieved distribution policy\
    \ with id: {dp.id}\")\n\n       print(f\"Successfully completed fetching distribution\
    \ policies\")\n\n   ````\n"
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.list_exception_policies
  name: list_exception_policies
  summary: Retrieves existing exception policies.
  signature: 'list_exception_policies(*, results_per_page: int | None = None, **kwargs:
    Any) -> AsyncItemPaged[ExceptionPolicy]'
  keywordOnlyParameters:
  - name: results_per_page
    description: The maximum number of results to be returned per page.
    types:
    - <xref:typing.Optional>[<xref:int>]
  return:
    description: An iterator like instance of ExceptionPolicyItem
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.communication.jobrouter.models.ExceptionPolicyItem>]
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterAdministrationClient to list exception policies in batches<!--[!code-python[Main](les\\\
    exception_policy_crud_ops_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\
    \\exception_policy_crud_ops_async.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.communication.jobrouter.aio\
    \ import JobRouterAdministrationClient\n\n   router_admin_client = JobRouterAdministrationClient.from_connection_string(conn_str=connection_string)\n\
    \n   async with router_admin_client:\n       exception_policy_iterator = router_admin_client.list_exception_policies(results_per_page=10)\n\
    \n       async for policy_page in exception_policy_iterator.by_page():\n     \
    \      policies_in_page = [i async for i in policy_page]\n           print(f\"\
    Retrieved {len(policies_in_page)} policies in current page\")\n\n           for\
    \ ep in policies_in_page:\n               print(f\"Retrieved exception policy\
    \ with id: {ep.id}\")\n\n       print(f\"Successfully completed fetching exception\
    \ policies\")\n\n   ````\n"
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.list_queues
  name: list_queues
  summary: Retrieves existing queues.
  signature: 'list_queues(*, results_per_page: int | None = None, **kwargs: Any) ->
    AsyncItemPaged[RouterQueue]'
  keywordOnlyParameters:
  - name: results_per_page
    description: The maximum number of results to be returned per page.
    types:
    - <xref:typing.Optional>[<xref:int>]
  return:
    description: An iterator like instance of RouterQueue
    types:
    - <xref:azure.core.async_paging.AsyncItemPaged>[<xref:azure.communication.jobrouter.models.RouterQueue>]
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterAdministrationClient to list queues in batches<!--[!code-python[Main](les\\\
    job_queue_crud_ops_async.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\
    \\job_queue_crud_ops_async.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter.aio import\
    \ JobRouterAdministrationClient\n\n   router_admin_client = JobRouterAdministrationClient.from_connection_string(conn_str=connection_string)\n\
    \n   async with router_admin_client:\n       job_queue_iterator = router_admin_client.list_queues(results_per_page=10)\n\
    \n       async for queue_page in job_queue_iterator.by_page():\n           job_queues_in_page\
    \ = [i async for i in queue_page]\n           print(f\"Retrieved {len(job_queues_in_page)}\
    \ queues in current page\")\n\n           for q in job_queues_in_page:\n     \
    \          print(f\"Retrieved queue policy with id: {q.id}\")\n\n       print(f\"\
    Successfully completed fetching job queues\")\n\n   ````\n"
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.send_request
  name: send_request
  summary: 'Runs the network request through the client''s chained policies.


    ```


    >>> from azure.core.rest import HttpRequest

    >>> request = HttpRequest("GET", "https://www.example.org/")

    <HttpRequest [GET], url: ''https://www.example.org/''>

    >>> response = await client.send_request(request)

    <AsyncHttpResponse: 200 OK>

    ```


    For more information on this code flow, see [https://aka.ms/azsdk/dpcodegen/python/send_request](https://aka.ms/azsdk/dpcodegen/python/send_request)'
  signature: 'send_request(request: HttpRequest, *, stream: bool = False, **kwargs:
    Any) -> Awaitable[AsyncHttpResponse]'
  parameters:
  - name: request
    description: The network request you want to make. Required.
    isRequired: true
    types:
    - <xref:azure.core.rest.HttpRequest>
  keywordOnlyParameters:
  - name: stream
    description: Whether the response payload will be streamed. Defaults to False.
    types:
    - <xref:bool>
  return:
    description: The response of your network call. Does not do error handling on
      your response.
    types:
    - <xref:azure.core.rest.AsyncHttpResponse>
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.upsert_classification_policy
  name: upsert_classification_policy
  summary: Update a classification policy
  signature: 'async upsert_classification_policy(classification_policy_id: str, *args:
    ClassificationPolicy | MutableMapping[str, Any] | IO, **kwargs: Any) -> ClassificationPolicy'
  parameters:
  - name: classification_policy_id
    description: Id of the classification policy.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: name
    description: Friendly name of this policy.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: fallback_queue_id
    description: The fallback queue to select if the queue selector doesn't find a
      match.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: queue_selectors
    description: The queue selectors to resolve a queue for a given job.
    types:
    - <xref:typing.Optional>[<xref:typing.List>[<xref:typing.Union>[ <xref:azure.communication.jobrouter.models.StaticQueueSelectorAttachment>,
      <xref:azure.communication.jobrouter.models.ConditionalQueueSelectorAttachment>,
      <xref:azure.communication.jobrouter.models.RuleEngineQueueSelectorAttachment>,
      <xref:azure.communication.jobrouter.models.PassThroughQueueSelectorAttachment>,
      <xref:azure.communication.jobrouter.models.WeightedAllocationQueueSelectorAttachment>]]]
  - name: prioritization_rule
    description: The rule to determine a priority score for a given job.
    types:
    - <xref:typing.Optional>[<xref:typing.Union>[<xref:azure.communication.jobrouter.models.StaticRouterRule>,
      <xref:azure.communication.jobrouter.models.ExpressionRouterRule>, <xref:azure.communication.jobrouter.models.FunctionRouterRule>,
      <xref:azure.communication.jobrouter.models.WebhookRouterRule>]]
  - name: worker_selectors
    description: The worker label selectors to attach to a given job.
    types:
    - <xref:typing.Optional>[<xref:typing.List>[<xref:typing.Union>[<xref:azure.communication.jobrouter.models.StaticWorkerSelectorAttachment>,
      <xref:azure.communication.jobrouter.models.ConditionalWorkerSelectorAttachment>,
      <xref:azure.communication.jobrouter.models.RuleEngineWorkerSelectorAttachment>,
      <xref:azure.communication.jobrouter.models.PassThroughWorkerSelectorAttachment>,
      <xref:azure.communication.jobrouter.models.WeightedAllocationWorkerSelectorAttachment>]]]
  - name: if_unmodified_since
    description: 'The request should only proceed if the entity was not modified

      after this time. Default value is None.'
    types:
    - <xref:datetime.datetime>
  - name: etag
    description: 'check if resource is changed. Set None to skip checking etag. Default
      value is

      None.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag. Default value is None.
    types:
    - <xref:azure.core.MatchConditions>
  return:
    description: Instance of ClassificationPolicy
    types:
    - <xref:azure.communication.jobrouter.models.ClassificationPolicy>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterAdministrationClient to update a classification policy<!--[!code-python[Main](les\\\
    classification_policy_crud_ops.py )]-->\n\n<!-- literal_block {\"ids\": [], \"\
    classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\":\
    \ \"C:\\\\hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\
    \\classification_policy_crud_ops.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.communication.jobrouter import\
    \ (\n       JobRouterAdministrationClient,\n   )\n   from azure.communication.jobrouter.models\
    \ import (\n       ClassificationPolicy,\n       ExpressionRouterRule,\n   )\n\
    \n   # set `connection_string` to an existing ACS endpoint\n   router_admin_client\
    \ = JobRouterAdministrationClient.from_connection_string(conn_str=connection_string)\n\
    \   print(\"JobRouterAdministrationClient created successfully!\")\n\n   updated_classification_policy:\
    \ ClassificationPolicy = router_admin_client.upsert_classification_policy(\n \
    \      policy_id,\n       prioritization_rule=ExpressionRouterRule(expression='If(job.HighPriority\
    \ = \"true\", 50, 10)'),\n   )\n\n   print(f\"Classification policy successfully\
    \ update with new prioritization rule\")\n\n   ````\n"
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.upsert_distribution_policy
  name: upsert_distribution_policy
  summary: Update a distribution policy.
  signature: 'async upsert_distribution_policy(distribution_policy_id: str, *args:
    DistributionPolicy | MutableMapping[str, Any] | IO, **kwargs: Any) -> DistributionPolicy'
  parameters:
  - name: distribution_policy_id
    description: Id of the distribution policy.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: offer_expires_after_seconds
    description: 'The expiry time of any offers created under this policy

      will be governed by the offer time to live.'
    types:
    - <xref:typing.Optional>[<xref:float>]
  - name: mode
    description: Specified distribution mode
    types:
    - <xref:typing.Optional>[<xref:typing.Union>[<xref:azure.communication.jobrouter.models.BestWorkerMode>,
      <xref:azure.communication.jobrouter.models.LongestIdleMode>, <xref:azure.communication.jobrouter.models.RoundRobinMode>]]
  - name: name
    description: The name of this policy.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: if_unmodified_since
    description: 'The request should only proceed if the entity was not modified

      after this time. Default value is None.'
    types:
    - <xref:datetime.datetime>
  - name: etag
    description: 'check if resource is changed. Set None to skip checking etag. Default
      value is

      None.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag. Default value is None.
    types:
    - <xref:azure.core.MatchConditions>
  return:
    description: Instance of DistributionPolicy
    types:
    - <xref:azure.communication.jobrouter.models.DistributionPolicy>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterAdministrationClient to update a distribution policy<!--[!code-python[Main](les\\\
    distribution_policy_crud_ops.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\
    \\distribution_policy_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import (\n\
    \       JobRouterAdministrationClient,\n   )\n   from azure.communication.jobrouter.models\
    \ import (\n       DistributionPolicy,\n       RoundRobinMode,\n   )\n\n   # set\
    \ `connection_string` to an existing ACS endpoint\n   router_admin_client = JobRouterAdministrationClient.from_connection_string(conn_str=connection_string)\n\
    \   print(\"JobRouterAdministrationClient created successfully!\")\n\n   updated_distribution_policy:\
    \ DistributionPolicy = router_admin_client.upsert_distribution_policy(\n     \
    \  policy_id, mode=RoundRobinMode(min_concurrent_offers=1, max_concurrent_offers=1)\n\
    \   )\n\n   print(f\"Distribution policy successfully update with new distribution\
    \ mode\")\n\n   ````\n"
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.upsert_exception_policy
  name: upsert_exception_policy
  summary: Update an exception policy.
  signature: 'async upsert_exception_policy(exception_policy_id: str, *args: ExceptionPolicy
    | MutableMapping[str, Any] | IO, **kwargs: Any) -> ExceptionPolicy'
  parameters:
  - name: exception_policy_id
    description: Id of the exception policy.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: exception_rules
    description: '(Optional) A collection of exception rules on the exception

      policy.'
    types:
    - <xref:typing.Optional>[<xref:typing.Dict>[<xref:str>, <xref:azure.communication.jobrouter.models.ExceptionRule>]]
  - name: name
    description: The name of this policy.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: if_unmodified_since
    description: 'The request should only proceed if the entity was not modified

      after this time. Default value is None.'
    types:
    - <xref:datetime.datetime>
  - name: etag
    description: 'check if resource is changed. Set None to skip checking etag. Default
      value is

      None.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag. Default value is None.
    types:
    - <xref:azure.core.MatchConditions>
  return:
    description: Instance of ExceptionPolicy
    types:
    - <xref:azure.communication.jobrouter.models.ExceptionPolicy>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Using a JobRouterAdministrationClient to update an exception policy<!--[!code-python[Main](les\\\
    exception_policy_crud_ops.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\\
    hostedtoolcache\\\\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\
    \\py2docfx\\\\dist_temp\\\\29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\
    \\exception_policy_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import (\n\
    \       JobRouterAdministrationClient,\n   )\n   from azure.communication.jobrouter.models\
    \ import (\n       WaitTimeExceptionTrigger,\n       ReclassifyExceptionAction,\n\
    \       ExceptionPolicy,\n       ExceptionRule,\n       QueueLengthExceptionTrigger,\n\
    \   )\n\n   # set `connection_string` to an existing ACS endpoint\n   router_admin_client\
    \ = JobRouterAdministrationClient.from_connection_string(conn_str=connection_string)\n\
    \   print(\"JobRouterAdministrationClient created successfully!\")\n\n   # we\
    \ are going to\n   # 1. Add an exception rule: EscalateJobOnWaitTimeExceededTrigger2Min:\
    \ triggers when job has waited in the\n   # queue for more than 2 minutes, then\
    \ reclassifies job adding additional labels on the job\n   # 2. Modify an existing\
    \ rule: EscalateJobOnQueueOverFlowTrigger: change 'threshold' to 100\n   # 3.\
    \ Delete an exception rule: EscalateJobOnWaitTimeExceededTrigger to be deleted\n\
    \n   # let's define the new rule to be added\n   # define exception trigger\n\
    \   escalate_job_on_wait_time_exceed2: WaitTimeExceptionTrigger = WaitTimeExceptionTrigger(threshold_seconds=2\
    \ * 60)\n\n   # define exception action\n   escalate_job_on_wait_time_exceeded2:\
    \ ReclassifyExceptionAction = ReclassifyExceptionAction(\n       classification_policy_id=\"\
    escalation-on-wait-time-exceeded\",\n       labels_to_upsert={\"EscalateJob\"\
    : True, \"EscalationReasonCode\": \"WaitTimeExceeded2Min\"},\n   )\n\n   updated_exception_policy:\
    \ ExceptionPolicy = router_admin_client.upsert_exception_policy(\n       policy_id,\n\
    \       exception_rules=[\n           # adding new rule\n           ExceptionRule(\n\
    \               id=\"EscalateJobOnWaitTimeExceededTrigger2Min\",\n           \
    \    trigger=escalate_job_on_wait_time_exceed2,\n               actions=[escalate_job_on_wait_time_exceeded2],\n\
    \           ),\n           # modifying existing rule\n           ExceptionRule(\n\
    \               id=\"EscalateJobOnQueueOverFlowTrigger\",\n               trigger=QueueLengthExceptionTrigger(threshold=100),\n\
    \               actions=[\n                   ReclassifyExceptionAction(\n   \
    \                    classification_policy_id=\"escalation-on-q-over-flow\",\n\
    \                       labels_to_upsert={\"EscalateJob\": True, \"EscalationReasonCode\"\
    : \"QueueOverFlow\"},\n                   )\n               ],\n           ),\n\
    \       ],\n   )\n\n   print(f\"Exception policy updated with rules: {updated_exception_policy.exception_rules}\"\
    )\n   print(\"Exception policy has been successfully updated\")\n\n\n   ````\n"
- uid: azure.communication.jobrouter.aio.JobRouterAdministrationClient.upsert_queue
  name: upsert_queue
  summary: Update a job queue
  signature: 'async upsert_queue(queue_id: str, *args: RouterQueue | MutableMapping[str,
    Any] | IO, **kwargs: Any) -> RouterQueue'
  parameters:
  - name: queue_id
    description: Id of the queue.
    isRequired: true
    types:
    - <xref:str>
  keywordOnlyParameters:
  - name: distribution_policy_id
    description: 'The ID of the distribution policy that will determine

      how a job is distributed to workers.'
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: name
    description: The name of this queue.
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: labels
    description: 'A set of key/value pairs that are

      identifying attributes used by the rules engines to make decisions.'
    types:
    - <xref:typing.Optional>[<xref:typing.Dict>[<xref:str>, <xref:typing.Union>[<xref:int>,
      <xref:float>, <xref:str>, <xref:bool>]]]
  - name: exception_policy_id
    description: 'The ID of the exception policy that determines various

      job escalation rules.'
    types:
    - <xref:typing.Optional>[<xref:str>]
  - name: if_unmodified_since
    description: 'The request should only proceed if the entity was not modified

      after this time. Default value is None.'
    types:
    - <xref:datetime.datetime>
  - name: etag
    description: 'check if resource is changed. Set None to skip checking etag. Default
      value is

      None.'
    types:
    - <xref:str>
  - name: match_condition
    description: The match condition to use upon the etag. Default value is None.
    types:
    - <xref:azure.core.MatchConditions>
  return:
    description: Instance of RouterQueue
    types:
    - <xref:azure.communication.jobrouter.models.RouterQueue>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterAdministrationClient to update a queue<!--[!code-python[Main](les\\\
    job_queue_crud_ops.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"C:\\\\hostedtoolcache\\\
    \\windows\\\\Python\\\\3.11.9\\\\x64\\\\Lib\\\\site-packages\\\\py2docfx\\\\dist_temp\\\
    \\29\\\\azure-communication-jobrouter-1.0.0\\\\samples\\\\job_queue_crud_ops.py\"\
    , \"xml:space\": \"preserve\", \"force\": false, \"language\": \"python\", \"\
    highlight_args\": {\"linenostart\": 1}, \"linenos\": false} -->\n\n````python\n\
    \n   from azure.communication.jobrouter import (\n       JobRouterAdministrationClient,\n\
    \   )\n   from azure.communication.jobrouter.models import (\n       RouterQueue,\n\
    \   )\n\n   # set `connection_string` to an existing ACS endpoint\n   router_admin_client\
    \ = JobRouterAdministrationClient.from_connection_string(conn_str=connection_string)\n\
    \   print(\"JobRouterAdministrationClient created successfully!\")\n\n   updated_job_queue:\
    \ RouterQueue = router_admin_client.upsert_queue(\n       job_queue_id, labels={\"\
    Additional-Queue-Label\": \"ChatQueue\"}\n   )\n\n   print(f\"Router queue successfully\
    \ update with labels {updated_job_queue.labels}\")\n\n   ````\n"
