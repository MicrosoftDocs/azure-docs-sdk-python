### YamlMime:UniversalReference
api_name: []
items:
- children: []
  class: azure.batch.models.JobAddParameter
  fullName: azure.batch.models.JobAddParameter
  inheritance:
  - inheritance:
    - type: builtins.object
    type: msrest.serialization.Model
  langs:
  - python
  module: azure.batch.models
  name: JobAddParameter
  source:
    id: JobAddParameter
    path: azure-batch\azure\batch\models\job_add_parameter.py
    remote:
      branch: master
      path: azure-batch\azure\batch\models\job_add_parameter.py
      repo: https://github.com/Azure/azure-sdk-for-python.git
    startLine: 15
  summary: 'An Azure Batch job to add.

    '
  syntax:
    content: JobAddParameter(id, pool_info, display_name=None, priority=None, constraints=None,
      job_manager_task=None, job_preparation_task=None, job_release_task=None, common_environment_settings=None,
      on_all_tasks_complete=None, on_task_failure=None, metadata=None, uses_task_dependencies=None)
    parameters:
    - description: 'A string that uniquely identifies the job within the account.

        The ID can contain any combination of alphanumeric characters including

        hyphens and underscores, and cannot contain more than 64 characters. It is

        common to use a GUID for the id.

        '
      id: id
      type:
      - str
    - description: 'The display name for the job. The display name need

        not be unique and can contain any Unicode characters up to a maximum

        length of 1024.

        '
      id: display_name
      type:
      - str
    - description: 'The priority of the job. Priority values can range from

        -1000 to 1000, with -1000 being the lowest priority and 1000 being the

        highest priority. The default value is 0.

        '
      id: priority
      type:
      - int
    - description: 'The execution constraints for the job.

        '
      id: constraints
      type:
      - azure.batch.models.JobConstraints
    - description: 'Details of a Job Manager task to be launched when

        the job is started. If the job does not specify a Job Manager task, the

        user must explicitly add tasks to the job. If the job does specify a Job

        Manager task, the Batch service creates the Job Manager task when the job

        is created, and will try to schedule the Job Manager task before

        scheduling other tasks in the job. The Job Manager task''s typical purpose

        is to control and/or monitor job execution, for example by deciding what

        additional tasks to run, determining when the work is complete, etc.

        (However, a Job Manager task is not restricted to these activities - it is

        a fully-fledged task in the system and perform whatever actions are

        required for the job.) For example, a Job Manager task might download a

        file specified as a parameter, analyze the contents of that file and

        submit additional tasks based on those contents.

        '
      id: job_manager_task
      type:
      - azure.batch.models.JobManagerTask
    - description: 'The Job Preparation task. If a job has a Job

        Preparation task, the Batch service will run the Job Preparation task on a

        compute node before starting any tasks of that job on that compute node.

        '
      id: job_preparation_task
      type:
      - azure.batch.models.JobPreparationTask
    - description: 'The Job Release task. A Job Release task cannot

        be specified without also specifying a Job Preparation task for the job.

        The Batch service runs the Job Release task on the compute nodes that have

        run the Job Preparation task. The primary purpose of the Job Release task

        is to undo changes to compute nodes made by the Job Preparation task.

        Example activities include deleting local files, or shutting down services

        that were started as part of job preparation.

        '
      id: job_release_task
      type:
      - azure.batch.models.JobReleaseTask
    - description: 'The list of common environment

        variable settings. These environment variables are set for all tasks in

        the job (including the Job Manager, Job Preparation and Job Release

        tasks).

        '
      id: common_environment_settings
      type:
      - 'list of @azure.batch.models.EnvironmentSetting

        '
    - description: 'The pool on which the Batch service runs the job''s

        tasks.

        '
      id: pool_info
      type:
      - azure.batch.models.PoolInformation
    - description: 'The action the Batch service should take

        when all tasks in the job are in the completed state. Note that if a job

        contains no tasks, then all tasks are considered complete. This option is

        therefore most commonly used with a Job Manager task; if you want to use

        automatic job termination without a Job Manager, you should initially set

        onAllTasksComplete to noAction and update the job properties to set

        onAllTasksComplete to terminateJob once you have finished adding tasks.

        Permitted values are: noAction - do nothing. The job remains active unless

        terminated or disabled by some other means. terminateJob - terminate the

        job. The job''s terminateReason is set to ''AllTasksComplete''. The default

        is noAction. Possible values include: ''noAction'', ''terminateJob''

        '
      id: on_all_tasks_complete
      type:
      - 'str or @azure.batch.models.OnAllTasksComplete

        '
    - description: 'The action the Batch service should take when any

        task in the job fails. A task is considered to have failed if it completes

        with a non-zero exit code and has exhausted its retry count, or if it had

        a scheduling error. noAction - do nothing. performExitOptionsJobAction -

        take the action associated with the task exit condition in the task''s

        exitConditions collection. (This may still result in no action being

        taken, if that is what the task specifies.) The default is noAction.

        Possible values include: ''noAction'', ''performExitOptionsJobAction''

        '
      id: on_task_failure
      type:
      - 'str or @azure.batch.models.OnTaskFailure

        '
    - description: 'A list of name-value pairs associated with the job as

        metadata. The Batch service does not assign any meaning to metadata; it is

        solely for the use of user code.

        '
      id: metadata
      type:
      - 'list of @azure.batch.models.MetadataItem

        '
    - description: 'The flag that determines if this job will

        use tasks with dependencies.

        '
      id: uses_task_dependencies
      type:
      - bool
  type: class
  uid: azure.batch.models.JobAddParameter
references: []
