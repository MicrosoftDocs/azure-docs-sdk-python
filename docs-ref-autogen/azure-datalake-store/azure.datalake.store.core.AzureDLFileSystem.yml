### YamlMime:PythonClass
uid: azure.datalake.store.core.AzureDLFileSystem
name: AzureDLFileSystem
fullName: azure.datalake.store.core.AzureDLFileSystem
module: azure.datalake.store.core
inheritances:
- builtins.object
summary: Access Azure DataLake Store as if it were a file-system
constructor:
  syntax: AzureDLFileSystem(token=None, per_call_timeout_seconds=60, **kwargs)
  parameters:
  - name: store_name
    description: Store name to connect to.
    isRequired: true
    types:
    - <xref:str >(<xref:"">)
  - name: token
    description: 'When setting up a new connection, this contains the authorization

      credentials (see *lib.auth()*).'
    isRequired: true
    types:
    - <xref:<xref:credentials object>>
  - name: url_suffix
    description: 'Domain to send REST requests to. The end-point URL is constructed

      using this and the store_name. If None, use default.'
    isRequired: true
    types:
    - <xref:str >(<xref:None>)
  - name: api_version
    description: 'The API version to target with requests. Changing this value will

      change the behavior of the requests, and can cause unexpected behavior or

      breaking changes. Changes to this value should be undergone with caution.'
    isRequired: true
    types:
    - <xref:str >(<xref:2018-09-01>)
  - name: per_call_timeout_seconds
    description: This is the timeout for each requests library call.
    isRequired: true
    types:
    - <xref:float>(<xref:60>)
  - name: kwargs
    description: 'See `lib.auth()`; full list: tenant_id, username, password, client_id,

      client_secret, resource'
    isRequired: true
    types:
    - <xref:<xref:optional key/values>>
methods:
- uid: azure.datalake.store.core.AzureDLFileSystem.access
  name: access
  summary: Does such a file/directory exist?
  signature: access(path, invalidate_cache=True)
  parameters:
  - name: path
    description: Path to query
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: invalidate_cache
    description: Whether to invalidate cache
    defaultValue: 'True'
    types:
    - <xref:bool>
  return:
    types:
    - <xref:True>
    - <xref:<xref:false depending on whether the path exists.>>
- uid: azure.datalake.store.core.AzureDLFileSystem.cat
  name: cat
  summary: Return contents of file
  signature: cat(path)
  parameters:
  - name: path
    description: Path to query
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  return:
    types:
    - <xref:<xref:Contents of file>>
- uid: azure.datalake.store.core.AzureDLFileSystem.chmod
  name: chmod
  summary: 'Change access mode of path


    Note this is not recursive.'
  signature: chmod(path, mod)
  parameters:
  - name: path
    description: Location to change
    isRequired: true
    types:
    - <xref:str>
  - name: mod
    description: 'Octal representation of access, e.g., "0777" for public read/write.

      See [docs]([http://hadoop.apache.org/docs/r2.4.1/hadoop-project-dist/hadoop-hdfs/WebHDFS.html#Permission](http://hadoop.apache.org/docs/r2.4.1/hadoop-project-dist/hadoop-hdfs/WebHDFS.html#Permission))'
    isRequired: true
    types:
    - <xref:str>
- uid: azure.datalake.store.core.AzureDLFileSystem.chown
  name: chown
  summary: 'Change owner and/or owning group


    Note this is not recursive.'
  signature: chown(path, owner=None, group=None)
  parameters:
  - name: path
    description: Location to change
    isRequired: true
    types:
    - <xref:str>
  - name: owner
    description: UUID of owning entity
    defaultValue: None
    types:
    - <xref:str>
  - name: group
    description: UUID of group
    defaultValue: None
    types:
    - <xref:str>
- uid: azure.datalake.store.core.AzureDLFileSystem.concat
  name: concat
  summary: Concatenate a list of files into one new file
  signature: concat(outfile, filelist, delete_source=False)
  parameters:
  - name: outfile
    description: 'The file which will be concatenated to. If it already exists,

      the extra pieces will be appended.'
    isRequired: true
    types:
    - <xref:path>
  - name: filelist
    description: Existing adl files to concatenate, in order
    isRequired: true
    types:
    - <xref:<xref:list of paths>>
  - name: delete_source
    description: 'If True, assume that the paths to concatenate exist alone in a

      directory, and delete that whole directory when done.'
    defaultValue: 'False'
    types:
    - <xref:bool >(<xref:False>)
  return:
    types:
    - <xref:None>
- uid: azure.datalake.store.core.AzureDLFileSystem.connect
  name: connect
  summary: Establish connection object.
  signature: connect()
- uid: azure.datalake.store.core.AzureDLFileSystem.cp
  name: cp
  summary: Not implemented. Copy file between locations on ADL
  signature: cp(path1, path2)
  parameters:
  - name: path1
    isRequired: true
  - name: path2
    isRequired: true
- uid: azure.datalake.store.core.AzureDLFileSystem.current
  name: current
  summary: Return the most recently created AzureDLFileSystem
  signature: current()
  parameters:
  - name: cls
    isRequired: true
- uid: azure.datalake.store.core.AzureDLFileSystem.df
  name: df
  summary: Resource summary of path
  signature: df(path)
  parameters:
  - name: path
    description: Path to query
    isRequired: true
    types:
    - <xref:str>
- uid: azure.datalake.store.core.AzureDLFileSystem.du
  name: du
  summary: Bytes in keys at path
  signature: du(path, total=False, deep=False, invalidate_cache=True)
  parameters:
  - name: path
    description: Path to query
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: total
    description: Return the sum on list
    defaultValue: 'False'
    types:
    - <xref:bool>
  - name: deep
    description: Recursively enumerate or just use files under current dir
    defaultValue: 'False'
    types:
    - <xref:bool>
  - name: invalidate_cache
    description: Whether to invalidate cache
    defaultValue: 'True'
    types:
    - <xref:bool>
  return:
    description: '**List of dict of name**'
    types:
    - <xref:<xref:size pairs>>
    - <xref:<xref:total size.>>
- uid: azure.datalake.store.core.AzureDLFileSystem.exists
  name: exists
  summary: Does such a file/directory exist?
  signature: exists(path, invalidate_cache=True)
  parameters:
  - name: path
    description: Path to query
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: invalidate_cache
    description: Whether to invalidate cache
    defaultValue: 'True'
    types:
    - <xref:bool>
  return:
    types:
    - <xref:True>
    - <xref:<xref:false depending on whether the path exists.>>
- uid: azure.datalake.store.core.AzureDLFileSystem.get
  name: get
  summary: Stream data from file at path to local filename
  signature: get(path, filename)
  parameters:
  - name: path
    description: ADL Path to read
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: filename
    description: Local file path to write to
    isRequired: true
    types:
    - <xref:str>
    - <xref:Path>
  return:
    types:
    - <xref:None>
- uid: azure.datalake.store.core.AzureDLFileSystem.get_acl_status
  name: get_acl_status
  summary: Gets Access Control List (ACL) entries for the specified file or directory.
  signature: get_acl_status(path)
  parameters:
  - name: path
    description: Location to get the ACL.
    isRequired: true
    types:
    - <xref:str>
- uid: azure.datalake.store.core.AzureDLFileSystem.glob
  name: glob
  summary: Find files (not directories) by glob-matching.
  signature: glob(path, details=False, invalidate_cache=True)
  parameters:
  - name: path
    description: Path to query
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: details
    description: Whether to include file details
    defaultValue: 'False'
    types:
    - <xref:bool>
  - name: invalidate_cache
    description: Whether to invalidate cache
    defaultValue: 'True'
    types:
    - <xref:bool>
  return:
    types:
    - <xref:<xref:List of files>>
- uid: azure.datalake.store.core.AzureDLFileSystem.head
  name: head
  summary: Return first bytes of file
  signature: head(path, size=1024)
  parameters:
  - name: path
    description: Path to query
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: size
    description: How many bytes to return
    defaultValue: '1024'
    types:
    - <xref:int>
  return:
    types:
    - '<xref:First>(<xref:size>)<xref: bytes of file>'
- uid: azure.datalake.store.core.AzureDLFileSystem.info
  name: info
  summary: File information for path
  signature: info(path, invalidate_cache=True, expected_error_code=None)
  parameters:
  - name: path
    description: Path to query
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: invalidate_cache
    description: Whether to invalidate cache or not
    defaultValue: 'True'
    types:
    - <xref:bool>
  - name: expected_error_code
    description: Optionally indicates a specific, expected error code, if any.
    defaultValue: None
    types:
    - <xref:int>
  return:
    types:
    - <xref:<xref:File information>>
- uid: azure.datalake.store.core.AzureDLFileSystem.invalidate_cache
  name: invalidate_cache
  summary: Remove entry from object file-cache
  signature: invalidate_cache(path=None)
  parameters:
  - name: path
    description: Remove the path from object file-cache
    defaultValue: None
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  return:
    types:
    - <xref:None>
- uid: azure.datalake.store.core.AzureDLFileSystem.listdir
  name: listdir
  summary: List all elements under directory specified with path
  signature: listdir(path='', detail=False, invalidate_cache=True)
  parameters:
  - name: path
    description: Path to query
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: detail
    description: Detailed info or not.
    defaultValue: 'False'
    types:
    - <xref:bool>
  - name: invalidate_cache
    description: Whether to invalidate cache or not
    defaultValue: 'True'
    types:
    - <xref:bool>
  return:
    types:
    - <xref:<xref:List of elements under directory specified with path>>
- uid: azure.datalake.store.core.AzureDLFileSystem.ls
  name: ls
  summary: List all elements under directory specified with path
  signature: ls(path='', detail=False, invalidate_cache=True)
  parameters:
  - name: path
    description: Path to query
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: detail
    description: Detailed info or not.
    defaultValue: 'False'
    types:
    - <xref:bool>
  - name: invalidate_cache
    description: Whether to invalidate cache or not
    defaultValue: 'True'
    types:
    - <xref:bool>
  return:
    types:
    - <xref:<xref:List of elements under directory specified with path>>
- uid: azure.datalake.store.core.AzureDLFileSystem.merge
  name: merge
  summary: Concatenate a list of files into one new file
  signature: merge(outfile, filelist, delete_source=False)
  parameters:
  - name: outfile
    description: 'The file which will be concatenated to. If it already exists,

      the extra pieces will be appended.'
    isRequired: true
    types:
    - <xref:path>
  - name: filelist
    description: Existing adl files to concatenate, in order
    isRequired: true
    types:
    - <xref:<xref:list of paths>>
  - name: delete_source
    description: 'If True, assume that the paths to concatenate exist alone in a

      directory, and delete that whole directory when done.'
    defaultValue: 'False'
    types:
    - <xref:bool >(<xref:False>)
  return:
    types:
    - <xref:None>
- uid: azure.datalake.store.core.AzureDLFileSystem.mkdir
  name: mkdir
  summary: Make new directory
  signature: mkdir(path)
  parameters:
  - name: path
    description: Path to create directory
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  return:
    types:
    - <xref:None>
- uid: azure.datalake.store.core.AzureDLFileSystem.modify_acl_entries
  name: modify_acl_entries
  summary: 'Modify existing Access Control List (ACL) entries on a file or folder.

    If the entry does not exist it is added, otherwise it is updated based on the
    spec passed in.

    No entries are removed by this process (unlike set_acl).


    Note: this is by default not recursive, and applies only to the file or folder
    specified.'
  signature: modify_acl_entries(path, acl_spec, recursive=False, number_of_sub_process=None)
  parameters:
  - name: path
    description: Location to set the ACL entries on.
    isRequired: true
    types:
    - <xref:str>
  - name: acl_spec
    description: 'The ACL specification to use in modifying the ACL at the path in
      the format

      ''[default:]user|group|other:[entity id or UPN]:r|-w|-x|-,[default:]user|group|other:[entity
      id or UPN]:r|-w|-x|-,...'''
    isRequired: true
    types:
    - <xref:str>
  - name: recursive
    description: Specifies whether to modify ACLs recursively or not
    defaultValue: 'False'
    types:
    - <xref:bool>
  - name: number_of_sub_process
    defaultValue: None
- uid: azure.datalake.store.core.AzureDLFileSystem.mv
  name: mv
  summary: Move file between locations on ADL
  signature: mv(path1, path2)
  parameters:
  - name: path1
    description: Source Path
    isRequired: true
  - name: path2
    description: Destination path
    isRequired: true
  return:
    types:
    - <xref:None>
- uid: azure.datalake.store.core.AzureDLFileSystem.open
  name: open
  summary: Open a file for reading or writing
  signature: open(path, mode='rb', blocksize=33554432, delimiter=None)
  parameters:
  - name: path
    description: Path of file on ADL
    isRequired: true
    types:
    - <xref:string>
  - name: mode
    description: One of 'rb', 'ab' or 'wb'
    defaultValue: rb
    types:
    - <xref:string>
  - name: blocksize
    description: Size of data-node blocks if reading
    defaultValue: '33554432'
    types:
    - <xref:int>
  - name: delimiter
    description: For writing delimiter-ended blocks
    defaultValue: None
    types:
    - <xref:byte>(<xref:s>)
    - <xref:None>
- uid: azure.datalake.store.core.AzureDLFileSystem.put
  name: put
  summary: Stream data from local filename to file at path
  signature: put(filename, path, delimiter=None)
  parameters:
  - name: filename
    description: Local file path to read from
    isRequired: true
    types:
    - <xref:str>
    - <xref:Path>
  - name: path
    description: ADL Path to write to
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: delimiter
    description: Optional delimeter for delimiter-ended blocks
    defaultValue: None
  return:
    types:
    - <xref:None>
- uid: azure.datalake.store.core.AzureDLFileSystem.read_block
  name: read_block
  summary: 'Read a block of bytes from an ADL file


    Starting at `offset` of the file, read `length` bytes.  If

    `delimiter` is set then we ensure that the read starts and stops at

    delimiter boundaries that follow the locations `offset` and `offset

    + length`.  If `offset` is zero then we start at zero.  The

    bytestring returned WILL include the end delimiter string.


    If offset+length is beyond the eof, reads to eof.'
  signature: read_block(fn, offset, length, delimiter=None)
  parameters:
  - name: fn
    description: Path to filename on ADL
    isRequired: true
    types:
    - <xref:string>
  - name: offset
    description: Byte offset to start read
    isRequired: true
    types:
    - <xref:int>
  - name: length
    description: Number of bytes to read
    isRequired: true
    types:
    - <xref:int>
  - name: delimiter
    description: Ensure reading starts and stops at delimiter bytestring
    defaultValue: None
    types:
    - <xref:bytes >(<xref:optional>)
  examples:
  - "\n```\n\n>>> adl.read_block('data/file.csv', 0, 13)  \nb'Alice, 100\\nBo'\n>>>\
    \ adl.read_block('data/file.csv', 0, 13, delimiter=b'\\n')  \nb'Alice, 100\\nBob,\
    \ 200\\n'\n```\n\nUse `length=None` to read to the end of the file.\n>>> adl.read_block('data/file.csv',\
    \ 0, None, delimiter=b'n')  # doctest: +SKIP\nb'Alice, 100nBob, 200nCharlie, 300'\n"
  seeAlsoContent: '  <xref:distributed.utils.read_block>

    '
- uid: azure.datalake.store.core.AzureDLFileSystem.remove
  name: remove
  summary: Remove a file or directory
  signature: remove(path, recursive=False)
  parameters:
  - name: path
    description: The location to remove.
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: recursive
    description: 'Whether to remove also all entries below, i.e., which are returned

      by *walk()*.'
    defaultValue: 'False'
    types:
    - <xref:bool >(<xref:True>)
  return:
    types:
    - <xref:None>
- uid: azure.datalake.store.core.AzureDLFileSystem.remove_acl
  name: remove_acl
  summary: 'Remove the entire, non default, ACL from the file or folder, including
    unnamed entries.

    Default entries cannot be removed this way, please use remove_default_acl for
    that.


    Note: this is not recursive, and applies only to the file or folder specified.'
  signature: remove_acl(path)
  parameters:
  - name: path
    description: Location to remove the ACL.
    isRequired: true
    types:
    - <xref:str>
- uid: azure.datalake.store.core.AzureDLFileSystem.remove_acl_entries
  name: remove_acl_entries
  summary: 'Remove existing, named, Access Control List (ACL) entries on a file or
    folder.

    If the entry does not exist already it is ignored.

    Default entries cannot be removed this way, please use remove_default_acl for
    that.

    Unnamed entries cannot be removed in this way, please use remove_acl for that.


    Note: this is by default not recursive, and applies only to the file or folder
    specified.'
  signature: remove_acl_entries(path, acl_spec, recursive=False, number_of_sub_process=None)
  parameters:
  - name: path
    description: Location to remove the ACL entries.
    isRequired: true
    types:
    - <xref:str>
  - name: acl_spec
    description: 'The ACL specification to remove from the ACL at the path in the
      format (note that the permission portion is missing)

      ''[default:]user|group|other:[entity id or UPN],[default:]user|group|other:[entity
      id or UPN],...'''
    isRequired: true
    types:
    - <xref:str>
  - name: recursive
    description: Specifies whether to remove ACLs recursively or not
    defaultValue: 'False'
    types:
    - <xref:bool>
  - name: number_of_sub_process
    defaultValue: None
- uid: azure.datalake.store.core.AzureDLFileSystem.remove_default_acl
  name: remove_default_acl
  summary: 'Remove the entire default ACL from the folder.

    Default entries do not exist on files, if a file

    is specified, this operation does nothing.


    Note: this is not recursive, and applies only to the folder specified.'
  signature: remove_default_acl(path)
  parameters:
  - name: path
    description: Location to set the ACL on.
    isRequired: true
    types:
    - <xref:str>
- uid: azure.datalake.store.core.AzureDLFileSystem.rename
  name: rename
  summary: Move file between locations on ADL
  signature: rename(path1, path2)
  parameters:
  - name: path1
    description: Source Path
    isRequired: true
  - name: path2
    description: Destination path
    isRequired: true
  return:
    types:
    - <xref:None>
- uid: azure.datalake.store.core.AzureDLFileSystem.rm
  name: rm
  summary: Remove a file or directory
  signature: rm(path, recursive=False)
  parameters:
  - name: path
    description: The location to remove.
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: recursive
    description: 'Whether to remove also all entries below, i.e., which are returned

      by *walk()*.'
    defaultValue: 'False'
    types:
    - <xref:bool >(<xref:True>)
  return:
    types:
    - <xref:None>
- uid: azure.datalake.store.core.AzureDLFileSystem.rmdir
  name: rmdir
  summary: Remove empty directory
  signature: rmdir(path)
  parameters:
  - name: path
    description: Directory  path to remove
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  return:
    types:
    - <xref:None>
- uid: azure.datalake.store.core.AzureDLFileSystem.set_acl
  name: set_acl
  summary: 'Set the Access Control List (ACL) for a file or folder.


    Note: this is by default not recursive, and applies only to the file or folder
    specified.'
  signature: set_acl(path, acl_spec, recursive=False, number_of_sub_process=None)
  parameters:
  - name: path
    description: Location to set the ACL on.
    isRequired: true
    types:
    - <xref:str>
  - name: acl_spec
    description: 'The ACL specification to set on the path in the format

      ''[default:]user|group|other:[entity id or UPN]:r|-w|-x|-,[default:]user|group|other:[entity
      id or UPN]:r|-w|-x|-,...'''
    isRequired: true
    types:
    - <xref:str>
  - name: recursive
    description: Specifies whether to set ACLs recursively or not
    defaultValue: 'False'
    types:
    - <xref:bool>
  - name: number_of_sub_process
    defaultValue: None
- uid: azure.datalake.store.core.AzureDLFileSystem.set_expiry
  name: set_expiry
  summary: 'Set or remove the expiration time on the specified file.

    This operation can only be executed against files.


    Note: Folders are not supported.'
  signature: set_expiry(path, expiry_option, expire_time=None)
  parameters:
  - name: path
    description: File path to set or remove expiration time
    isRequired: true
    types:
    - <xref:str>
  - name: expire_time
    description: The time that the file will expire, corresponding to the expiry_option
      that was set
    isRequired: true
    types:
    - <xref:int>
  - name: expiry_option
    description: "Indicates the type of expiration to use for the file:\n   1. NeverExpire:\
      \ ExpireTime is ignored. \n\n   2. RelativeToNow: ExpireTime is an integer in\
      \ milliseconds representing the expiration date relative to when file expiration\
      \ is updated. \n\n   3. RelativeToCreationDate: ExpireTime is an integer in\
      \ milliseconds representing the expiration date relative to file creation. \n\
      \n   4. Absolute: ExpireTime is an integer in milliseconds, as a Unix timestamp\
      \ relative to 1/1/1970 00:00:00."
    defaultValue: None
    types:
    - <xref:str>
- uid: azure.datalake.store.core.AzureDLFileSystem.stat
  name: stat
  summary: File information for path
  signature: stat(path, invalidate_cache=True, expected_error_code=None)
  parameters:
  - name: path
    description: Path to query
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: invalidate_cache
    description: Whether to invalidate cache or not
    defaultValue: 'True'
    types:
    - <xref:bool>
  - name: expected_error_code
    description: Optionally indicates a specific, expected error code, if any.
    defaultValue: None
    types:
    - <xref:int>
  return:
    types:
    - <xref:<xref:File information>>
- uid: azure.datalake.store.core.AzureDLFileSystem.tail
  name: tail
  summary: Return last bytes of file
  signature: tail(path, size=1024)
  parameters:
  - name: path
    description: Path to query
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: size
    description: How many bytes to return
    defaultValue: '1024'
    types:
    - <xref:int>
  return:
    types:
    - '<xref:Last>(<xref:size>)<xref: bytes of file>'
- uid: azure.datalake.store.core.AzureDLFileSystem.touch
  name: touch
  summary: Create empty file
  signature: touch(path)
  parameters:
  - name: path
    description: Path of file to create
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  return:
    types:
    - <xref:None>
- uid: azure.datalake.store.core.AzureDLFileSystem.unlink
  name: unlink
  summary: Remove a file or directory
  signature: unlink(path, recursive=False)
  parameters:
  - name: path
    description: The location to remove.
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: recursive
    description: 'Whether to remove also all entries below, i.e., which are returned

      by *walk()*.'
    defaultValue: 'False'
    types:
    - <xref:bool >(<xref:True>)
  return:
    types:
    - <xref:None>
- uid: azure.datalake.store.core.AzureDLFileSystem.walk
  name: walk
  summary: Get all files below given path
  signature: walk(path='', details=False, invalidate_cache=True)
  parameters:
  - name: path
    description: Path to query
    isRequired: true
    types:
    - <xref:str>
    - <xref:azure.datalake.store.core.AzureDLPath>
  - name: details
    description: Whether to include file details
    defaultValue: 'False'
    types:
    - <xref:bool>
  - name: invalidate_cache
    description: Whether to invalidate cache
    defaultValue: 'True'
    types:
    - <xref:bool>
  return:
    types:
    - <xref:<xref:List of files>>
