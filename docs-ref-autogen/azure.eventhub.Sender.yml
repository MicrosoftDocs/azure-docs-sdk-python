### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.Sender.send
  - azure.eventhub.Sender.transfer
  - azure.eventhub.Sender.wait
  - azure.eventhub.Sender.TIMEOUT
  class: azure.eventhub.Sender
  fullName: azure.eventhub.Sender
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.eventhub
  name: Sender
  source:
    id: Sender
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 297
  summary: 'Implements a Sender.





    '
  syntax:
    content: Sender(client, target, partition=None)
  type: class
  uid: azure.eventhub.Sender
- class: azure.eventhub.Sender
  fullName: azure.eventhub.Sender.send
  langs:
  - python
  module: azure.eventhub
  name: send
  source:
    id: send
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 322
  summary: "Sends an event data and blocks until acknowledgement is\nreceived or operation\
    \ times out.\n:param event_data: The event to be sent.\n:type event_data: ~azure.eventhub.EventData\n\
    :raises: ~azure.eventhub.EventHubError if the message fails to\n\n\n   send.\n\
    \n"
  syntax:
    content: send(event_data)
    parameters:
    - id: event_data
    return:
      description: 'The outcome of the message send ~uamqp.constants.MessageSendResult

        '
  type: method
  uid: azure.eventhub.Sender.send
- class: azure.eventhub.Sender
  fullName: azure.eventhub.Sender.transfer
  langs:
  - python
  module: azure.eventhub
  name: transfer
  source:
    id: transfer
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 344
  summary: "Transfers an event data and notifies the callback when the operation is\
    \ done.\n:param event_data: The event to be sent.\n:type event_data: ~azure.eventhub.EventData\n\
    :param callback: Callback to be run once the message has been send.\n\n\n   This\
    \ must be a function that accepts two arguments.\n\n"
  syntax:
    content: transfer(event_data, callback=None)
    parameters:
    - id: event_data
    - defaultValue: None
      id: callback
  type: method
  uid: azure.eventhub.Sender.transfer
- class: azure.eventhub.Sender
  fullName: azure.eventhub.Sender.wait
  langs:
  - python
  module: azure.eventhub
  name: wait
  source:
    id: wait
    path: azure\eventhub\__init__.py
    remote:
      branch: develop
      path: azure\eventhub\__init__.py
      repo: https://github.com/Azure/azure-event-hubs-python.git
    startLine: 359
  summary: 'Wait until all transferred events have been sent.

    '
  syntax:
    content: wait()
    parameters: []
  type: method
  uid: azure.eventhub.Sender.wait
- class: azure.eventhub.Sender
  fullName: azure.eventhub.Sender.TIMEOUT
  langs:
  - python
  module: azure.eventhub
  name: TIMEOUT
  syntax:
    content: TIMEOUT = 60.0
  type: attribute
  uid: azure.eventhub.Sender.TIMEOUT
references:
- fullName: azure.eventhub.Sender.send
  isExternal: false
  name: send
  parent: azure.eventhub.Sender
  uid: azure.eventhub.Sender.send
- fullName: azure.eventhub.Sender.transfer
  isExternal: false
  name: transfer
  parent: azure.eventhub.Sender
  uid: azure.eventhub.Sender.transfer
- fullName: azure.eventhub.Sender.wait
  isExternal: false
  name: wait
  parent: azure.eventhub.Sender
  uid: azure.eventhub.Sender.wait
- fullName: azure.eventhub.Sender.TIMEOUT
  isExternal: false
  name: TIMEOUT
  parent: azure.eventhub.Sender
  uid: azure.eventhub.Sender.TIMEOUT
