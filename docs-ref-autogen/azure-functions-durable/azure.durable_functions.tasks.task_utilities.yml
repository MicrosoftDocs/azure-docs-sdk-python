### YamlMime:PythonModule
uid: azure.durable_functions.tasks.task_utilities
name: task_utilities
fullName: azure.durable_functions.tasks.task_utilities
functions:
- uid: azure.durable_functions.tasks.task_utilities.find_event_raised
  name: find_event_raised
  summary: Find if the event with the given event name is raised.
  signature: find_event_raised(state, name)
  parameters:
  - name: state
    description: List of histories to search from
    isRequired: true
    types:
    - <xref:List>[<xref:HistoryEvent>]
  - name: name
    description: Name of the event to search for
    isRequired: true
    types:
    - <xref:str>
  return:
    description: 'The raised event with the given event name that has not yet been
      processed.

      Returns None if no event with the given conditions was found.'
    types:
    - <xref:azure.durable_functions.models.history.HistoryEvent>
  exceptions:
  - type: ValueError
    description: Raises an error if no name was given when calling this function.
- uid: azure.durable_functions.tasks.task_utilities.find_matching_event
  name: find_matching_event
  summary: Find matching event in the state array, if it exists.
  signature: 'find_matching_event(state: List[HistoryEvent], event_type: HistoryEventType,
    scheduled_task: HistoryEvent | None = None) -> HistoryEvent | None'
  parameters:
  - name: state
    description: The list of Durable events
    isRequired: true
    types:
    - '<xref:List>[<xref:HistoryEvent>]<xref::'
  - name: event_type
    description: The type of event being searched-for.
    isRequired: true
    types:
    - <xref:<xref:azure.durable_functions.tasks.task_utilities.HistoryEventType:>>
  - name: Optional[HistoryEvent]
    description: 'The corresponding *scheduled* task for the searched-for event,

      only available when looking for a completed or failed event.

      Defaults to None.'
    isRequired: true
    types:
    - <xref:HistoryEvent] (<xref:scheduled_task">>
  - name: optional
    description: 'The corresponding *scheduled* task for the searched-for event,

      only available when looking for a completed or failed event.

      Defaults to None.'
    isRequired: true
  - name: scheduled_task
    defaultValue: None
  return:
    description: The matching event from the state array, if it exists.
    types:
    - <xref:typing.Optional>[<xref:azure.durable_functions.models.history.HistoryEvent>]
- uid: azure.durable_functions.tasks.task_utilities.find_sub_orchestration
  name: find_sub_orchestration
  summary: Look-up matching sub-orchestrator event in the state array.
  signature: 'find_sub_orchestration(state: List[HistoryEvent], event_type: HistoryEventType,
    name: str | None = None, context=None, instance_id: str | None = None, scheduled_task:
    HistoryEvent | None = None) -> HistoryEvent | None'
  parameters:
  - name: state
    description: The history of Durable events
    isRequired: true
    types:
    - <xref:List>[<xref:HistoryEvent>]
  - name: event_type
    description: The type of Durable event to look for.
    isRequired: true
    types:
    - <xref:azure.durable_functions.tasks.task_utilities.HistoryEventType>
  - name: name
    description: Name of the sub-orchestrator.
    defaultValue: None
    types:
    - '<xref:Optional>[<xref:str>]<xref::'
  - name: context
    description: A reference to the orchestration context
    defaultValue: None
    types:
    - "<xref:Optional>[<xref:``\u2019DurableOrchestrationContext\u2019``]"
  - name: instance_id
    description: Instance ID of the sub-orchestrator. Defaults to None.
    defaultValue: None
    types:
    - <xref:Optional>[<xref:str>], <xref:azure.durable_functions.tasks.task_utilities.optional:>
  - name: Optional[HistoryEvent]
    description: 'The corresponding *scheduled* task for the searched-for event,

      only available when looking for a completed or failed event.

      Defaults to None.'
    isRequired: true
    types:
    - <xref:HistoryEvent] (<xref:scheduled_task">>
  - name: optional
    description: 'The corresponding *scheduled* task for the searched-for event,

      only available when looking for a completed or failed event.

      Defaults to None.'
    isRequired: true
  - name: scheduled_task
    defaultValue: None
  return:
    description: The matching event from the state array, if it exists.
    types:
    - <xref:typing.Optional>[<xref:azure.durable_functions.models.history.HistoryEvent>]
- uid: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_completed
  name: find_sub_orchestration_completed
  summary: Look-up the sub-orchestration completed event.
  signature: 'find_sub_orchestration_completed(state: List[HistoryEvent], scheduled_task:
    HistoryEvent | None) -> HistoryEvent | None'
  parameters:
  - name: state
    description: The history of Durable events
    isRequired: true
    types:
    - '<xref:List>[<xref:HistoryEvent>]<xref::'
  - name: scheduled_task
    description: The sub-orchestration creation event, if found.
    isRequired: true
    types:
    - '<xref:Optional>[<xref:HistoryEvent>]<xref::'
  return:
    description: The matching sub-orchestration completed event, if found. Else, None.
    types:
    - <xref:typing.Optional>[<xref:azure.durable_functions.models.history.HistoryEvent>]
- uid: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_created
  name: find_sub_orchestration_created
  summary: Look-up matching sub-orchestrator created event in the state array.
  signature: 'find_sub_orchestration_created(state: List[HistoryEvent], name: str,
    context=None, instance_id: str | None = None) -> HistoryEvent | None'
  parameters:
  - name: state
    description: The history of Durable events
    isRequired: true
    types:
    - '<xref:List>[<xref:HistoryEvent>]<xref::'
  - name: name
    description: Name of the sub-orchestrator.
    isRequired: true
    types:
    - <xref:<xref:azure.durable_functions.tasks.task_utilities.str:>>
  - name: context
    description: A reference to the orchestration context.
    defaultValue: None
    types:
    - "<xref:Optional>[<xref:``\u2019DurableOrchestrationContext\u2019``]<xref::"
  - name: instance_id
    description: Instance ID of the sub-orchestrator. Defaults to None.
    defaultValue: None
    types:
    - <xref:Optional>[<xref:str>], <xref:azure.durable_functions.tasks.task_utilities.optional:>
  return:
    description: The matching sub-orchestration creation event. Else, None.
    types:
    - <xref:typing.Optional>[<xref:azure.durable_functions.models.history.HistoryEvent>]
  exceptions:
  - type: ValueError
    description: correspond to the matching event in the state list.
- uid: azure.durable_functions.tasks.task_utilities.find_sub_orchestration_failed
  name: find_sub_orchestration_failed
  summary: Look-up the sub-orchestration failure event.
  signature: 'find_sub_orchestration_failed(state: List[HistoryEvent], scheduled_task:
    HistoryEvent | None) -> HistoryEvent | None'
  parameters:
  - name: state
    description: The history of Durable events
    isRequired: true
    types:
    - '<xref:List>[<xref:HistoryEvent>]<xref::'
  - name: scheduled_task
    description: The sub-orchestration creation event, if found.
    isRequired: true
    types:
    - '<xref:Optional>[<xref:HistoryEvent>]<xref::'
  return:
    description: The matching sub-orchestration failure event, if found. Else, None.
    types:
    - <xref:typing.Optional>[<xref:azure.durable_functions.models.history.HistoryEvent>]
- uid: azure.durable_functions.tasks.task_utilities.find_task_completed
  name: find_task_completed
  summary: 'Locate the Completed Task.


    Within the state passed, search for an event that has hasn''t been processed,

    is a completed  task type,

    and has the a scheduled id that equals the EventId of the provided scheduled task.'
  signature: find_task_completed(state, scheduled_task)
  parameters:
  - name: state
    isRequired: true
  - name: scheduled_task
    isRequired: true
- uid: azure.durable_functions.tasks.task_utilities.find_task_failed
  name: find_task_failed
  summary: 'Locate the Failed Task.


    Within the state passed, search for an event that has hasn''t been processed,

    is a failed task type,

    and has the a scheduled id that equals the EventId of the provided scheduled task.'
  signature: find_task_failed(state, scheduled_task)
  parameters:
  - name: state
    isRequired: true
  - name: scheduled_task
    isRequired: true
- uid: azure.durable_functions.tasks.task_utilities.find_task_retry_timer_created
  name: find_task_retry_timer_created
  summary: 'Locate the Timer Created Task.


    Within the state passed, search for an event that has hasn''t been processed,

    is a timer created task type,

    and has the an event id that is one higher then Scheduled Id of the provided

    failed task provided.'
  signature: find_task_retry_timer_created(state, failed_task)
  parameters:
  - name: state
    isRequired: true
  - name: failed_task
    isRequired: true
- uid: azure.durable_functions.tasks.task_utilities.find_task_retry_timer_fired
  name: find_task_retry_timer_fired
  summary: 'Locate the Timer Fired Task.


    Within the state passed, search for an event that has hasn''t been processed,

    is a timer fired task type,

    and has the an timer id that is equal to the EventId of the provided

    timer created task provided.'
  signature: find_task_retry_timer_fired(state, retry_timer_created)
  parameters:
  - name: state
    isRequired: true
  - name: retry_timer_created
    isRequired: true
- uid: azure.durable_functions.tasks.task_utilities.find_task_scheduled
  name: find_task_scheduled
  summary: 'Locate the Scheduled Task.


    Within the state passed, search for an event that has hasn''t been processed

    and has the the name provided.'
  signature: find_task_scheduled(state, name)
  parameters:
  - name: state
    isRequired: true
  - name: name
    isRequired: true
- uid: azure.durable_functions.tasks.task_utilities.find_task_timer_created
  name: find_task_timer_created
  summary: 'Locate the Timer Created Task.


    Within the state passed, search for an event that has hasn''t been processed,

    is a timer created task type,

    and has the an event id that is one higher then Scheduled Id of the provided

    failed task provided.'
  signature: find_task_timer_created(state, fire_at)
  parameters:
  - name: state
    isRequired: true
  - name: fire_at
    isRequired: true
- uid: azure.durable_functions.tasks.task_utilities.get_retried_task
  name: get_retried_task
  summary: Determine the state of scheduling some task for execution with retry options.
  signature: 'get_retried_task(state: List[HistoryEvent], max_number_of_attempts:
    int, scheduled_type: HistoryEventType, completed_type: HistoryEventType, failed_type:
    HistoryEventType, action: Action) -> Task'
  parameters:
  - name: state
    description: The list of history events
    isRequired: true
    types:
    - <xref:List>[<xref:HistoryEvent>]
  - name: max_number_of_ints
    description: The maximum number of retrying attempts
    isRequired: true
    types:
    - <xref:int>
  - name: scheduled_type
    description: The event type corresponding to scheduling the searched-for task
    isRequired: true
    types:
    - <xref:azure.durable_functions.tasks.task_utilities.HistoryEventType>
  - name: completed_type
    description: The event type corresponding to a completion of the searched-for
      task
    isRequired: true
    types:
    - <xref:azure.durable_functions.tasks.task_utilities.HistoryEventType>
  - name: failed_type
    description: The event type coresponding to the failure of the searched-for task
    isRequired: true
    types:
    - <xref:azure.durable_functions.tasks.task_utilities.HistoryEventType>
  - name: action
    description: The action corresponding to the searched-for task
    isRequired: true
    types:
    - <xref:azure.durable_functions.tasks.task_utilities.Action>
  - name: max_number_of_attempts
    isRequired: true
  return:
    description: 'A Task encompassing the state of the scheduled work item, that is,

      either completed, failed, or incomplete.'
    types:
    - <xref:azure.durable_functions.models.Task>
- uid: azure.durable_functions.tasks.task_utilities.parse_history_event
  name: parse_history_event
  summary: Based on the type of event, parse the JSON.serializable portion of the
    event.
  signature: parse_history_event(directive_result)
  parameters:
  - name: directive_result
    isRequired: true
- uid: azure.durable_functions.tasks.task_utilities.set_processed
  name: set_processed
  summary: 'Set the isProcessed attribute of all of the tasks to true.


    This provides the ability to not look at events that have already been processed
    within

    searching the history of events.'
  signature: set_processed(tasks)
  parameters:
  - name: tasks
    isRequired: true
- uid: azure.durable_functions.tasks.task_utilities.should_suspend
  name: should_suspend
  summary: Check the state of the result to determine if the orchestration should
    suspend.
  signature: should_suspend(partial_result) -> bool
  parameters:
  - name: partial_result
    isRequired: true
